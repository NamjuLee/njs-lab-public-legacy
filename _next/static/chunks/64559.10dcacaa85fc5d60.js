"use strict";(self.webpackChunk_N_E=self.webpackChunk_N_E||[]).push([[64559],{66394:function(e,t,i){i.d(t,{Du:function(){return r}});let r=(e,t,i)=>{let r=document.createElement("div");r.style.display="flex";let s=document.createElement("input");s.type="range",s.min="".concat(t),s.max="".concat(i);let n=document.createElement("div");return n.textContent=e,n.style.color="#aaa",r.appendChild(s),r.appendChild(n),{div:r,slider:s,text:n}}},64559:function(e,t,i){i.r(t),i.d(t,{Solution:function(){return n}});var r=i(66394);class s{appendEvent(){this.divColor.addEventListener("input",e=>{let t=e.target.value,i=+("0x"+t.slice(1,3))/255,r=+("0x"+t.slice(3,5))/255,s=+("0x"+t.slice(5,7))/255;this.solution.device.queue.writeBuffer(this.solution.pipelineObj.colorBuffer,0,new Float32Array([i,r,s,1])),this.solution.run()}),this.divRange.slider.addEventListener("input",e=>{let t=+e.target.value;this.solution.vertex[0]=0,this.solution.vertex[3]=-.5+-(.01*t),this.solution.vertex[6]=.5+.01*t,this.solution.device.queue.writeBuffer(this.solution.pipelineObj.vertexBuffer,0,this.solution.vertex),this.solution.run()}),window.addEventListener("resize",()=>{this.solution.canvas.width=this.solution.divHost.clientWidth,this.solution.canvas.height=this.solution.divHost.clientHeight,this.solution.run()})}constructor(e){this.solution=e,this.divHost=e.divHost,this.divColor=document.createElement("input"),this.divColor.type="color",this.divColor.defaultValue="#ff0000",this.divHost.appendChild(this.divColor),this.divRange=(0,r.Du)("size",0,100),this.divHost.appendChild(this.divRange.div),this.appendEvent()}}class n{async initWebGPU(){if(!navigator.gpu)throw Error("Not Support WebGPU");let e=await navigator.gpu.requestAdapter({powerPreference:"high-performance"});if(!e)throw Error("No Adapter Found");let t=await e.requestDevice();this.ctx=this.canvas.getContext("webgpu");let i=navigator.gpu.getPreferredCanvasFormat?navigator.gpu.getPreferredCanvasFormat():this.ctx.getPreferredFormat(e);window.devicePixelRatio,this.canvas.width=this.divHost.clientWidth,this.canvas.height=this.divHost.clientHeight,this.ctx.configure({device:t,format:i,alphaMode:"opaque"}),this.size={width:this.canvas.width,height:this.canvas.height},this.device=t,this.format=i,this.initPipeline(this.device,this.format)}async initPipeline(e,t){let i=await e.createRenderPipelineAsync({label:"Basic Pipline",layout:"auto",vertex:{module:e.createShaderModule({code:"\n@vertex\nfn main(@location(0) position : vec3<f32>) -> @builtin(position) vec4<f32> {\n    return vec4<f32>(position, 1.0);\n}\n"}),entryPoint:"main",buffers:[{arrayStride:12,attributes:[{shaderLocation:0,offset:0,format:"float32x3"}]}]},fragment:{module:e.createShaderModule({code:"\n@group(0) @binding(0) var<uniform> color : vec4<f32>;\n\n@fragment\nfn main() -> @location(0) vec4<f32> {\n    return color;\n}\n"}),entryPoint:"main",targets:[{format:t}]},primitive:{topology:"triangle-list"}}),r=e.createBuffer({label:"GPUBuffer store vertex",size:this.vertex.byteLength,usage:GPUBufferUsage.VERTEX|GPUBufferUsage.COPY_DST});e.queue.writeBuffer(r,0,this.vertex);let s=e.createBuffer({label:"GPUBuffer store rgba color",size:16,usage:GPUBufferUsage.UNIFORM|GPUBufferUsage.COPY_DST});e.queue.writeBuffer(s,0,new Float32Array([0,1,1,1]));let n=e.createBindGroup({label:"Uniform Group with colorBuffer",layout:i.getBindGroupLayout(0),entries:[{binding:0,resource:{buffer:s}}]});this.pipelineObj={pipeline:i,vertexBuffer:r,colorBuffer:s,uniformGroup:n},this.run()}run(){this.draw(this.device,this.ctx,this.pipelineObj)}draw(e,t,i){let r=e.createCommandEncoder(),s=t.getCurrentTexture().createView(),n=r.beginRenderPass({colorAttachments:[{view:s,clearValue:{r:0,g:0,b:0,a:1},loadOp:"clear",storeOp:"store"}]});n.setPipeline(i.pipeline),n.setBindGroup(0,i.uniformGroup),n.setVertexBuffer(0,i.vertexBuffer),n.draw(this.vertexCount),n.end(),e.queue.submit([r.finish()])}destroy(){for(this.device.destroy();this.divHost.lastElementChild;)this.divHost.removeChild(this.divHost.lastElementChild)}constructor(e){this.vertex=new Float32Array([0,.5,0,-.5,-.5,0,.5,-.5,0]),this.vertexCount=3,this.mouse=new Float32Array([0,0]),this.divHost=document.getElementById(e),this.canvas=document.createElement("canvas"),this.divHost.appendChild(this.canvas),this.canvas.addEventListener("mousemove",e=>{this.mouse[0],e.offsetX,this.mouse[1],e.offsetY,this.mouse[0]=e.offsetX,this.mouse[1]=e.offsetY},!1),this.ui=new s(this),this.initWebGPU()}}}}]);