{"version":3,"file":"static/js/62605.ba648c79.chunk.js","mappings":"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","sources":["njslab/Tools/MapboxPolygon/MapboxGLWrapper/index.ts","njslab/Tools/MapboxPolygon/Scene/index.ts","njslab/Tools/MapboxPolygon/Feature/index.ts","njslab/Tools/MapboxPolygon/Util/index.ts","njslab/Tools/MapboxPolygon/index.ts"],"sourcesContent":["import mapboxgl from \"mapbox-gl\";\r\n\r\nexport class MapboxGLWrapper {\r\n    public map: mapboxgl.Map\r\n    constructor(id: string) {\r\n\r\n        this.initMap(id);\r\n    }\r\n    private initMap(id: string) {\r\n        // https://account.mapbox.com\r\n        mapboxgl.accessToken = process.env.REACT_APP_MAPBOX;\r\n        this.map = new mapboxgl.Map({\r\n            container: id,\r\n            zoom: 5,\r\n            // minZoom: 10,\r\n            center: [-71.093161, 42.358871],\r\n            style: 'mapbox://styles/mapbox/dark-v10' // 'mapbox://styles/mapbox/streets-v11'\r\n        });\r\n        this.map.dragRotate.disable();\r\n\r\n        // this.map.getCanvas().\r\n\r\n        // https://docs.mapbox.com/mapbox-gl-js/api/events/#mapmouseevent#type\r\n        this.map.on('mousemove', (e) => { this.mouseMove(e); });\r\n        this.map.on('click', (e) => { this.mouseClick(e); });\r\n        this.map.on('mousedown', (e) => { this.mouseDown(e); });\r\n        this.map.on('dblclick', (e) => { this.mouseDClick(e); });\r\n        this.map.on('mouseup', (e) => { this.mouseUp(e); });\r\n\r\n        let div = document.getElementsByClassName('mapboxgl-canvas')[0] as HTMLDivElement;\r\n        div.style.position = 'absolute';\r\n        \r\n        div = document.getElementsByClassName('mapboxgl-control-container')[0] as HTMLDivElement;\r\n        div.style.display = 'none';\r\n\r\n    }\r\n    public center = (lng: number = -99.292649, lat: number = 39.043903) => {\r\n        // const v = new mapboxgl.LngLat(lon, lat);\r\n        // console.log(v);\r\n        this.map.setCenter({ lat, lng })\r\n    }\r\n    public toMap = (x: number, y: number) => {\r\n        const p = this.map.unproject({x, y} as any)\r\n        return [p.lng, p.lat];\r\n    }\r\n    public toScreen = (lon: number, lat: number) => {\r\n        const p = this.map.project([lon, lat])\r\n        return [p.x, p.y];\r\n    }\r\n    public mouseDown = (e) => {\r\n        // console.log(this.toScreen(-71.093161, 42.358871))\r\n        // console.log(JSON.stringify(e.point), e.lngLat.wrap())\r\n    }\r\n    public mouseUp = (e) => {\r\n        // console.log(JSON.stringify(e.point), e.lngLat.wrap())\r\n    }\r\n    public mouseMove = (e) => {\r\n        // console.log(JSON.stringify(e.point), e.lngLat.wrap())\r\n    }\r\n    public mouseClick = (e) => {\r\n        // console.log(e)\r\n        \r\n        // console.log(this.toMap(100, 100));\r\n        // console.log(e.point)\r\n        // this.center()\r\n        // this.map.zoomTo(0)\r\n        // console.log(JSON.stringify(e.point), e.lngLat.wrap())\r\n    }\r\n    public mouseDClick = (e) => {\r\n        // console.log(JSON.stringify(e.point), e.lngLat.wrap())\r\n    }\r\n}\r\n\r\n\r\n","import * as turf from '@turf/turf';\n\nexport class Scene {\n    public renderer = {\n        type: 'FeatureCollection',\n        name: 'ready-polygon-editor',\n        features: [],\n\n    }\n    public id = 'scene-polygon-editor';\n    public hoveredPolygonId = null;\n    public source;\n    public map: mapboxgl.Map;\n    constructor() {\n        /* */\n    }\n    public initScene = () => {\n        this.source = {\n            'type': 'geojson',\n            'data': this.getDataScene(),\n            'generateId': true\n        }\n        this.map.addSource( this.renderer.name, this.source);\n\n        // Add a new layer to visualize the polygon.\n        this.map.addLayer({\n            'id': this.id,\n            'type': 'fill',\n            'source': this.renderer.name, // reference the data source\n            'layout': {},\n            'paint': {\n                'fill-color': ['get', 'color'], // blue color fill\n                // 'fill-color': [\n                //     'case',\n                //     ['boolean',['feature-state', 'clicked'], true],\n                //     '#64bdbb', // if selected true, paint in blue\n                //     '#888888' // else paint in gray\n                // ],\n\n                // 'fill-color': [\n                //     'case',\n                //     ['boolean', ['feature-state', 'clicked'], true],\n                //     '#64bdbb', // if selected true, paint in blue\n                //     '#888888' // else paint in gray\n                // ],\n\n                'fill-opacity': [\n                    'case',\n                    ['boolean', ['feature-state', 'hover'], false],\n                    0.8,\n                    0.4\n                ]\n                // 'fill-opacity': 0.5\n            }\n        });\n        // Add a black outline around the polygon.\n        this.map.addLayer({\n            'id': 'outline',\n            'type': 'line',\n            'source': this.renderer.name,\n            'layout': {},\n            'paint': {\n                'line-color': '#000',\n                'line-width': 1\n            }\n        });\n\n        this.map.on('click', this.id, (e) => {\n            // new mapboxgl.Popup()\n            // .setLngLat(e.lngLat)\n            // .setHTML(e.features[0].properties.name)\n            // .addTo(map);\n            // });\n            // console.log(e.features[0].properties.uuid);\n        });\n        // this.map.on('mouseover', 'scene-polygon-editor', (e) => {\n        //     // this.map.getCanvas().style.cursor = 'grab', //'pointer';\n        //     // new mapboxgl.Popup()\n        //     // .setLngLat(e.lngLat)\n        //     // .setHTML(e.features[0].properties.name)\n        //     // .addTo(map);\n        //     // });\n        //     console.log(e.features[0].properties.uuid);\n        // });\n\n        // var originalColor = \"#088\";             \n        // this.map.on('mouseenter', this.id, (e) => {\n        //     console.log(e)\n        //     this.map.setPaintProperty(this.id, 'fill-opacity', 1);\n        // });\n\n        // this.map.on('mouseleave', this.id, () => {\n        //   this.map.setPaintProperty(this.id, 'fill-opacity', 0.5);\n        // });  \n\n        this.map.on('mousemove', this.id, (e) => {\n\n            if (e.features.length > 0) {\n                if (this.hoveredPolygonId !== null) {\n                    this.map.setFeatureState(\n                        { source: this.renderer.name, id: this.hoveredPolygonId },\n                        { hover: false }\n                    );\n                }\n                this.hoveredPolygonId = e.features[0].id;\n                // console.log(this.hoveredPolygonId)\n                // console.log(e.features[0])\n                this.map.setFeatureState(\n                    { source: this.renderer.name, id: this.hoveredPolygonId },\n                    { hover: true }\n                );\n            }\n        });\n        this.map.on('mouseleave', this.id, () => {\n            if (this.hoveredPolygonId !== null) {\n                this.map.setFeatureState(\n                    { source: this.renderer.name, id: this.hoveredPolygonId },\n                    { hover: false }\n                );\n            }\n            this.hoveredPolygonId = null;\n        });\n\n    }\n    public removePolygon(polygonId) {\n        const indexToRemove = this.renderer.features.map((feature, i) => {\n            if (feature.properties.uuid === polygonId) {\n                return i\n            } else {\n                return -1\n            }\n        });\n\n        for(let i = indexToRemove.length -1 ; i > -1; --i) {\n            if (indexToRemove[i] !== -1) {\n                this.renderer.features.splice(indexToRemove[i], 1);\n            }\n        }\n\n        this.updateRenderer();\n    }\n    public pushFeature = (feature) => {\n        this.renderer.features.push(feature);\n    }\n    public updateRenderer = () => {\n        // @ts-ignore\n        this.map.getSource(this.renderer.name).setData(this.getDataScene())\n    }\n    public updateZoom = (geojsonData) => {\n        const bounds = turf.bbox(geojsonData); // Assuming you have the Turf library loaded\n        // Fit the map to the bounds\n        // @ts-ignore\n        this.map.fitBounds(bounds, { padding: 20 });\n    }\n    public getDataScene() {\n        return JSON.parse(JSON.stringify(this.renderer));\n    }\n}","import { Scene } from '../Scene';\nimport { getUUID, getRandomHex } from '../../../../lib';\nimport * as turf from '@turf/turf'\n\nclass PLayer {\n    divHost: HTMLElement;\n    div: HTMLDivElement;\n    divBtn: HTMLDivElement;\n    divViz: HTMLDivElement;\n    divBtnSplit: HTMLDivElement;\n    divLayerName: HTMLDivElement;\n    constructor(divHost: HTMLElement, destroy: () => void, splitNeeded = false, visFn = () => { }, splitFn = () => { }) {\n        this.divHost = divHost;\n\n        this.div = document.createElement('div');\n        this.divHost.appendChild(this.div);\n        this.div.style.width = '200px';\n        this.div.style.height = '40px';\n        this.div.style.background = 'black';\n        this.div.style.fontSize = '12px';\n        this.div.style.margin = '3px';\n        this.div.style.zIndex = '5';\n        this.div.style.position = 'relative';\n        this.div.style.display = 'flex';\n        // this.div.textContent = 'layer';\n\n        this.divBtn = document.createElement('div');\n        this.divBtn.style.width = '38px';\n        this.divBtn.style.height = '38px';\n        this.divBtn.style.background = 'black'\n        this.divBtn.style.padding = '10px'\n        this.divBtn.style.margin = '1px'\n\n        this.divBtn.textContent = 'X'\n        this.divBtn.onclick = () => destroy();\n        this.div.appendChild(this.divBtn);\n\n        this.divViz = document.createElement('div');\n        this.divViz.style.width = '38px';\n        this.divViz.style.height = '38px';\n        this.divViz.style.background = 'black'\n        this.divViz.style.padding = '10px'\n        this.divViz.style.margin = '1px'\n\n        this.divViz.textContent = 'V'\n        this.divViz.onclick = () => visFn();\n        this.div.appendChild(this.divViz);\n\n        if (splitNeeded) {\n            this.appendSplit(splitFn);\n        }\n\n        this.divLayerName = document.createElement('div');\n        this.divLayerName.style.width = '100%';\n        this.divLayerName.style.height = '40px';\n        this.divLayerName.style.color = 'black';\n\n\n        this.div.appendChild(this.divLayerName);\n    }\n    public appendSplit(splitFn = () => { }) {\n        this.divBtnSplit = document.createElement('div');\n        this.divBtnSplit.style.width = '38px';\n        this.divBtnSplit.style.height = '38px';\n        this.divBtnSplit.style.background = 'black'\n        this.divBtnSplit.style.padding = '10px'\n        this.divBtnSplit.style.margin = '1px'\n        this.divBtnSplit.textContent = 'S'\n        this.divBtnSplit.onclick = () => splitFn();\n        this.div.appendChild(this.divBtnSplit);\n    }\n    public destroy() {\n        this.div.removeChild(this.divLayerName)\n        this.div.removeChild(this.divBtn)\n        this.divHost.removeChild(this.div);\n    }\n}\n\nexport class PFeature {\n    public data = {\n        name: 'untitled',\n        type: 'FeatureCollection',\n        features: [],\n    }\n    public layer: PLayer\n    public scene: Scene;\n    public uuid: string;\n    public color: string;\n    public isVisible: boolean = true;\n    public conditionSplit = {\n        needSplit: false,\n        isMultiFeature: false,\n        isMultiPolygon: false,\n    };\n    constructor(scene, geojson) {\n        this.scene = scene;\n        this.data = JSON.parse(geojson);\n\n        console.log(this.data)\n\n        const ddd = []\n        const coordinate = []\n\n        this.data.features.map(f => {\n            console.log(f.geometry.coordinates)\n            const pp = turf.polygon(f.geometry.coordinates)\n            console.log(pp)\n            ddd.push(pp)\n            coordinate.push(f.geometry.coordinates)\n            return undefined\n        })\n\n        // this.data = removeOverlappingAreaFromPolygons(this.data)\n        this.data = unionPolygons2(this.data)\n\n\n        // console.log('ddd', ddd)\n        // console.log({coordinate})\n        // console.log(this.data.features)\n        \n        // const uu = turf.difference(ddd[0], ddd[1]) \n        // console.log(uu)\n        // this.data.features = []\n        // this.data.features.push(uu); //JSON.parse(uu);\n\n\n\n\n        this.uuid = getUUID();\n        this.color = getRandomHex();\n        this.conditionSplit = checkSplitCondition(this.data);\n\n        this.layer = new PLayer(\n            scene.map.getCanvas().parentElement,\n            this.destroy,\n            this.conditionSplit.needSplit,\n            this.toggleVisibility,\n            this.split,\n        );\n\n        this.layer.div.style.background = this.color;\n        this.data.name = this.data.name ? this.data.name : 'untitled'\n        this.layer.divLayerName.textContent = this.data.name;\n\n        this.addScene();\n        this.zoomIn();\n    }\n    public addScene () {\n        for (let i = 0; i < this.data.features.length; ++i) {\n            const feature = this.data.features[i];\n            feature.properties.uuid = this.uuid;\n            feature.properties.color = this.color;\n            this.scene.pushFeature(feature);\n        }\n\n        this.scene.updateRenderer();\n        \n    }\n    public removeScene() {\n        this.scene.removePolygon(this.uuid)\n    }\n    public zoomIn(){\n        this.scene.updateZoom(this.data);\n    }\n    public toggleVisibility = () => {\n        this.isVisible = !this.isVisible;\n        if (this.isVisible) {\n            this.addScene();\n            // this.zoomIn();\n        } else {\n            this.removeScene();\n        }\n    }\n    public split = () => {\n        if (this.conditionSplit.isMultiFeature) {\n            splitFeature(this.data).forEach((geoJson) => {\n                new PFeature(this.scene, JSON.stringify(geoJson))\n            });\n        }\n\n        if (!this.conditionSplit.isMultiFeature && this.conditionSplit.isMultiPolygon) {\n            splitPolygon(this.data).forEach((geoJson) => {\n                new PFeature(this.scene, JSON.stringify(geoJson))\n            });\n        }\n\n        this.destroy();\n    }\n    public destroy = () => {\n        this.removeScene();\n        this.layer.destroy();\n    }\n}\n\nconst checkSplitCondition = (geojson) => {\n    const isMultiFeature = geojson.features.length > 1;\n    const isMultiPolygon = geojson.features[0]['geometry']['coordinates'].length > 1;\n    return {\n        isMultiFeature, isMultiPolygon,\n        needSplit: isMultiFeature || isMultiPolygon,\n    }\n}\nconst splitFeature = (geojson) => {\n    const listGeojson = [];\n    for (let i = 0; i < geojson.features.length; ++i) {\n        const coordinates = geojson.features[i]['geometry']['coordinates'];\n        const newGeojson = {\n            features: [{\n                geometry: {\n                    coordinates,\n                    type: geojson.features[i]['geometry']['type']\n                },\n                type: geojson.features[i]['type'],\n                properties: geojson.features[i]['properties']\n            }\n            ],\n            type: geojson.type,\n            name: `${geojson.name}_${i}`,\n        }\n        listGeojson.push(newGeojson);\n    }\n    return listGeojson;\n}\nconst splitPolygon = (geojson) => {\n    const listGeojson = [];\n    for (let i = 0; i < geojson.features.length; ++i) {\n        const coordinates = geojson.features[i]['geometry']['coordinates'];\n        for (let j = 0; j < coordinates.length; ++j) {\n            const newGeojson = {\n                features: [{\n                    geometry: {\n                        coordinates: [coordinates[j]],\n                        type: geojson.features[i]['geometry']['type']\n                    },\n                    type:  geojson.features[i]['type'],\n                    properties: geojson.features[i]['properties']\n                }\n                ],\n                type: geojson.type,\n                name: `${geojson.name}_${j}`,\n            }\n            listGeojson.push(newGeojson);\n        }\n    }\n    return listGeojson;\n}\n\nconst unionPolygons2 = (data) => {\n    if (data.features.length < 2) {\n        return undefined;\n    }\n\n    let unionResult = data.features[0];\n\n    for (let i = 1; i < data.features.length; i++) {\n        unionResult = turf.union(unionResult, data.features[i]);\n    }\n\n    data.features = [unionResult]\n    return data;\n}\n\n\nconst unionPolygons = (data) => {\n    const newOne = []\n    for(let j = 0 ; j < data.features.length; ++j) {\n        let f0 = data.features[j]\n        let a = undefined\n        // let b\n        for(let i = 0 ; i < data.features.length; ++i) {\n            const f1 = data.features[i]\n            if (j !== i) {\n                if (turf.intersect(f0, f1)){\n                    f0 = turf.union(f0, f1)\n                    // b = turf.difference(f1, f0) \n                    // f0 = a\n                }\n            }\n        }\n\n        // if (a != undefined){\n            newOne.push(f0)\n        // }\n        // data.features[i] = b\n    }\n    data.features = newOne;\n    return data;\n}\n\nconst removeOverlappingAreaFromPolygons = (data) => {\n    const newOne = []\n    for(let j = 0 ; j < data.features.length; ++j) {\n        let f0 = data.features[j]\n        let a = undefined\n        // let b\n        for(let i = 0 ; i < data.features.length; ++i) {\n            const f1 = data.features[i]\n            if (j !== i) {\n                if (turf.intersect(f0, f1)){\n                    f0 = turf.difference(f0, f1)\n                    // b = turf.difference(f1, f0) \n                    // f0 = a\n                }\n            }\n        }\n\n        // if (a != undefined){\n            newOne.push(f0)\n        // }\n        // data.features[i] = b\n    }\n    data.features = newOne;\n\n\n    // const newOne = data.features.map((f0, j) => {\n    //     return data.features\n    //         .filter((f1, i) => j !== i && turf.intersect(f0, f1))\n    //         .reduce((result, f1) => turf.difference(result, f1), f0);\n    // });\n    \n    // data.features = newOne.filter((f0, j) => !newOne.some((f1, i) => j !== i && turf.intersect(f0, f1)));\n\n    return data\n}","export const getHolder = (out: (d: any) => any) => {\n    const divDrop = document.createElement('div');\n    divDrop.ondrop = (e) => {\n        // this.className = '';\n        e.preventDefault();\n        const file = e.dataTransfer.files[0];\n        const reader = new FileReader();\n        reader.onload = (event) => {\n            // console.log(event.target);\n            out(event.target)\n            // divDrop.innerText = event.target.result;\n        };\n        // console.log(file);\n        reader.readAsText(file);\n        // return false;\n        return\n    };\n    divDrop.ondragover = () => {\n        // this.className = 'hover';\n        return false;\n    };\n    divDrop.ondragend = () => {\n        // this.className = '';\n        return false;\n    };\n    return divDrop;\n}\n\nexport const geojsonDownloader = (geojsonData: string) => {\n    const encode = (s: string) => {\n        let out: number[] = [];\n        for (let i = 0; i < s.length; i++) { out.push(s.charCodeAt(i)); }\n        return new Uint8Array(out);\n    };\n\n    var data = encode((JSON.stringify(geojsonData, null, 4)));\n    // console.log(data)\n    var blob = new Blob([data], { type: 'esri/drawingTool' });\n    let url = URL.createObjectURL(blob);\n    var link = document.createElement('a');\n    link.setAttribute('href', url);\n    link.setAttribute('download', 'scene.json');\n    var event = document.createEvent('MouseEvents');\n    event.initMouseEvent('click', true, true, window, 1, 0, 0, 0, 0, false, false, false, false, 0, null);\n    link.dispatchEvent(event);\n\n}","import { MapboxGLWrapper } from './MapboxGLWrapper';\r\nimport { Scene } from './Scene';\r\nimport { PFeature } from './Feature';\r\n\r\nimport { geojsonDownloader } from './Util';\r\n\r\n// https://geojson.io/#map=5.97/42.914/-73.24\r\n\r\nexport class Solution {\r\n    public divHost: HTMLDivElement;\r\n    public mapboxWrapper: MapboxGLWrapper;\r\n    // public renderer: Renderer;\r\n\r\n    public scene: Scene;\r\n    constructor(id: string) {\r\n        this.divHost = document.getElementById(id) as HTMLDivElement;\r\n        this.divHost.style.position = 'relative';\r\n\r\n        this.divHost.ondrop = (e) => {\r\n            e.preventDefault();\r\n            const file = e.dataTransfer.files[0];\r\n            const reader = new FileReader();\r\n            reader.onload = (event) => {\r\n                this.importData(event.target);\r\n            };\r\n            reader.readAsText(file);\r\n            return\r\n        };\r\n        this.divHost.ondragover = () => {\r\n            return false;\r\n        };\r\n        this.divHost.ondragend = () => {\r\n            return false;\r\n        };\r\n\r\n        this.mapboxWrapper = new MapboxGLWrapper(this.divHost.id);\r\n        this.scene = new Scene();\r\n        this.scene.map = this.mapboxWrapper.map;\r\n\r\n        this.mapboxWrapper.mouseDown = this.mouseDown\r\n        this.mapboxWrapper.mouseUp = this.mouseUp\r\n        this.mapboxWrapper.mouseClick = this.mouseClick\r\n        this.mapboxWrapper.mouseMove = this.mouseMove\r\n\r\n        setTimeout(() => {\r\n            this.mapboxWrapper.map.on('load', () => {\r\n                // Add a data source containing GeoJSON data.\r\n                this.scene.initScene();\r\n            });\r\n\r\n        }, 100);\r\n\r\n\r\n        const divMenu = document.createElement('div');\r\n        divMenu.style.position = 'absolute';\r\n        this.divHost.appendChild(divMenu);\r\n\r\n        const divMenu1 = document.createElement('div');\r\n        divMenu1.style.width = '200px';\r\n        divMenu1.style.height = '20px';\r\n        divMenu1.style.background = 'rgba(0, 0, 0, 0.8)';\r\n        divMenu1.style.zIndex = '10';\r\n        // divMenu1.style.position = 'absolute';\r\n        divMenu1.textContent = 'DOWNLOAD by polygon';\r\n        divMenu1.onclick = () => {\r\n            const scData = this.scene.getDataScene();\r\n            geojsonDownloader(scData);\r\n        }\r\n        divMenu.appendChild(divMenu1);\r\n\r\n        const divMenu2 = document.createElement('div');\r\n        divMenu2.style.width = '200px';\r\n        divMenu2.style.height = '20px';\r\n        divMenu2.style.background = 'rgba(0, 0, 0, 0.8)';\r\n        divMenu2.style.zIndex = '10';\r\n        // divMenu2.style.position = 'absolute';\r\n        divMenu2.textContent = 'DOWNLOAD by feature';\r\n        divMenu2.onclick = () => {\r\n            const scData = this.scene.getDataScene();\r\n\r\n            geojsonDownloader(geojsonByFeature(scData));\r\n        }\r\n        divMenu.appendChild(divMenu2);\r\n\r\n    }\r\n    \r\n    public importData = (d: any) => {\r\n        new PFeature(this.scene, d.result);\r\n    }\r\n    public mouseDown = (e) => {\r\n        // TODO\r\n    }\r\n    public mouseUp = (e) => {\r\n        // TODO\r\n    }\r\n    public mouseDrag = (e) => {\r\n        // TODO\r\n    }\r\n    public mouseClick = (e) => {\r\n        // const dd: AnySourceImpl = this.mapboxWrapper.map.getSource('scene-polygon-editor');\r\n        // console.log(dd._options.data.geometry.coordinates.pop())\r\n        // this.mapboxWrapper.map.removeSource('scene-polygon-editor')\r\n        // console.log(this.data);\r\n        // this.data[0].pop();\r\n        // this.data.features[0].geometry.coordinates[0].pop()\r\n\r\n        // console.log(this.data.features[0].geometry.coordinates[0])\r\n\r\n        // this.setData(this.data)\r\n        // this.addData();\r\n        // TODO\r\n        // console.log(e);\r\n        // console.log(e['lngLat']);\r\n        // this.renderer.pts.push([e['lngLat']['lng'], e['lngLat']['lat']])\r\n\r\n        // this.mapboxWrapper.map.on('click', 'scene-polygon-editor', (e) => {\r\n        //     // new mapboxgl.Popup()\r\n        //     // .setLngLat(e.lngLat)\r\n        //     // .setHTML(e.features[0].properties.name)\r\n        //     // .addTo(map);\r\n        //     // });\r\n        //     console.log(e.features[0].properties.id);\r\n        // });\r\n        // console.log(e)\r\n    }\r\n    public mouseMove = (e) => {\r\n        // TODO\r\n    }\r\n    public keyDown(k: KeyboardEvent) {\r\n        // TODO\r\n    }\r\n    public destroy() {\r\n        // this.renderer.destroy();\r\n        while (this.divHost.lastElementChild) {\r\n            this.divHost.removeChild(this.divHost.lastElementChild);\r\n        }\r\n    }\r\n}\r\n\r\n\r\nconst geojsonByFeature = (geojson) => {\r\n    const coordinates = [];\r\n    for(let i = 0; i < geojson.features.length; ++i) {\r\n        coordinates.push(geojson.features[i]['geometry']['coordinates'])\r\n    }\r\n    const newGeojson = {\r\n        features: [{\r\n            geometry: {\r\n                coordinates: coordinates,\r\n                type: 'MultiPolygon',\r\n            },\r\n            type: geojson.features[0]['type'],\r\n            properties: geojson.features[0]['properties']\r\n        }\r\n        ],\r\n        type: geojson.type,\r\n        name: `${geojson.name}`,\r\n    }\r\n    return JSON.parse(JSON.stringify(newGeojson));\r\n}"],"names":["MapboxGLWrapper","constructor","id","map","center","lng","lat","setCenter","toMap","x","y","p","this","unproject","toScreen","lon","project","mouseDown","e","mouseUp","mouseMove","mouseClick","mouseDClick","initMap","mapboxgl","process","container","zoom","style","dragRotate","disable","on","div","document","getElementsByClassName","position","display","Scene","renderer","type","name","features","hoveredPolygonId","source","initScene","getDataScene","addSource","addLayer","length","setFeatureState","hover","pushFeature","feature","push","updateRenderer","getSource","setData","updateZoom","geojsonData","bounds","turf","fitBounds","padding","removePolygon","polygonId","indexToRemove","i","properties","uuid","splice","JSON","parse","stringify","PLayer","divHost","destroy","splitNeeded","visFn","splitFn","divBtn","divViz","divBtnSplit","divLayerName","createElement","appendChild","width","height","background","fontSize","margin","zIndex","textContent","onclick","appendSplit","color","removeChild","PFeature","scene","geojson","data","layer","isVisible","conditionSplit","needSplit","isMultiFeature","isMultiPolygon","toggleVisibility","addScene","removeScene","split","splitFeature","forEach","geoJson","splitPolygon","console","log","ddd","coordinate","f","geometry","coordinates","pp","unionPolygons2","getUUID","getRandomHex","checkSplitCondition","getCanvas","parentElement","zoomIn","listGeojson","newGeojson","j","unionResult","geojsonDownloader","s","out","charCodeAt","Uint8Array","encode","blob","Blob","url","URL","createObjectURL","link","setAttribute","event","createEvent","initMouseEvent","window","dispatchEvent","Solution","mapboxWrapper","importData","d","result","mouseDrag","getElementById","ondrop","preventDefault","file","dataTransfer","files","reader","FileReader","onload","target","readAsText","ondragover","ondragend","setTimeout","divMenu","divMenu1","scData","divMenu2","geojsonByFeature","keyDown","k","lastElementChild"],"sourceRoot":""}