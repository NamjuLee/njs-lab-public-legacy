{"version":3,"file":"static/js/18263.1cbceba0.chunk.js","mappings":"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","sources":["njslab/Infrastructure/WebGPU/WebGPU_06_rect_gpu_buffer/shaders/shaders.ts","njslab/Infrastructure/WebGPU/WebGPU_06_rect_gpu_buffer/index.ts"],"sourcesContent":["export const CreateGPUBufferUint = (device:GPUDevice, data:Uint32Array, \n    usageFlag:GPUBufferUsageFlags = GPUBufferUsage.INDEX | GPUBufferUsage.COPY_DST) => {\n    const buffer = device.createBuffer({\n        size: data.byteLength,\n        usage: usageFlag,\n        mappedAtCreation: true\n    });\n    new Uint32Array(buffer.getMappedRange()).set(data);\n    buffer.unmap();\n    return buffer;\n}\n\nexport const CreateGPUBuffer = (device:GPUDevice, data:Float32Array, \n    usageFlag:GPUBufferUsageFlags = GPUBufferUsage.VERTEX | GPUBufferUsage.COPY_DST) => {\n    const buffer = device.createBuffer({\n        size: data.byteLength,\n        usage: usageFlag,\n        mappedAtCreation: true\n    });\n    new Float32Array(buffer.getMappedRange()).set(data);\n    buffer.unmap();\n    return buffer;\n}\n\nexport const Shaders = () => {\n    const vertex = `\n        struct Output {\n            @builtin(position) Position : vec4<f32>,\n            @location(0) vColor : vec4<f32>,\n        };\n        @vertex\n        fn main(@location(0) pos: vec4<f32>, @location(1) color: vec4<f32>) -> Output {\n            var output: Output;\n            output.Position = pos;\n            output.vColor = color;\n            return output;\n        }`;\n\n    const fragment = `\n        @fragment\n        fn main(@location(0) vColor: vec4<f32>) -> @location(0) vec4<f32> {\n            return vColor;\n        }`;\n\n    return {\n        vertex, \n        fragment\n    };\n}\n\nexport const ShadersOld = () => {\n    const vertex = `\n        [[location(0)]] var<in> position : vec4<f32>;\n        [[location(1)]] var<in> color : vec4<f32>;\n        [[builtin(position)]] var<out> Position : vec4<f32>;\n        [[location(0)]] var<out> vColor : vec4<f32>;\n\n        [[stage(vertex)]]\n        fn main() -> void {\n            Position = position;\n            vColor = color;\n            return;\n        }`;\n\n    const fragment = `\n        [[location(0)]] var<in> vColor : vec4<f32>;\n        [[location(0)]] var<out> fragColor : vec4<f32>;\n\n        [[stage(fragment)]]\n        fn main() -> void {\n            fragColor = vColor;\n            return;\n        }`;\n\n    return {\n        vertex, \n        fragment\n    };\n}\n","// import positionVert from './shaders/position.vert.wgsl?raw';\r\n// import colorFrag from './shaders/color.frag.wgsl';\r\n\r\nimport { Shaders, CreateGPUBufferUint, CreateGPUBuffer } from './shaders/shaders';\r\n// import shader from './shaders/shader.wgsl';\r\n\r\nconst vertex = new Float32Array([\r\n    0.0, 0.5, 0.0,\r\n    -0.5, -0.5, 0.0,\r\n    0.5, -0.5, 0.0\r\n])\r\nconst vertexCount = 3\r\n\r\nexport { vertex, vertexCount }\r\n\r\nconst shader = `\r\n// vertext shader\r\n\r\nstruct Output {\r\n    @builtin(position) Position : vec4<f32>,\r\n    @location(0) vColor : vec4<f32>,\r\n};\r\n\r\n@vertex\r\nfn vs_main(@location(0) pos: vec4<f32>, @location(1) color: vec4<f32>) -> Output {\r\n    var output: Output;\r\n    output.Position = pos;\r\n    output.vColor = color;\r\n    return output;\r\n}\r\n\r\n// fragment shader\r\n\r\n@fragment\r\nfn fs_main(@location(0) vColor: vec4<f32>) -> @location(0) vec4<f32> {\r\n    return vColor;\r\n}\r\n`\r\n\r\nexport class Solution {\r\n    divHost: HTMLElement;\r\n    canvas: HTMLCanvasElement;\r\n    ctx: GPUCanvasContext;\r\n    device: GPUDevice;\r\n    format: GPUTextureFormat;\r\n    size: any;\r\n    pipelineObj: any;\r\n    constructor(id: string) {\r\n        this.divHost = document.getElementById(id);\r\n\r\n        //     console.log(id, 'webGPU', navigator.gpu);\r\n        this.canvas = document.createElement('canvas');\r\n        this.divHost.appendChild(this.canvas);\r\n\r\n        this.initWebGPU();\r\n    }\r\n    async initWebGPU() {\r\n        if (!navigator.gpu) { throw new Error('Not Support WebGPU'); }\r\n\r\n        const adapter = await navigator.gpu.requestAdapter({\r\n            powerPreference: 'high-performance'\r\n            // powerPreference: 'low-power'\r\n        })\r\n\r\n        if (!adapter) { throw new Error('No Adapter Found'); }\r\n\r\n        const device = await adapter.requestDevice()\r\n        this.ctx = this.canvas.getContext('webgpu') as GPUCanvasContext\r\n        // @ts-ignore\r\n        const format = navigator.gpu.getPreferredCanvasFormat ? navigator.gpu.getPreferredCanvasFormat() : this.ctx.getPreferredFormat(adapter)\r\n        const devicePixelRatio = window.devicePixelRatio || 1\r\n        this.canvas.width = this.divHost.clientWidth;\r\n        this.canvas.height = this.divHost.clientHeight;\r\n        this.ctx.configure({\r\n            // json specific format when key and value are the same\r\n            device, format,\r\n            // prevent chrome warning\r\n            alphaMode: 'opaque'\r\n        })\r\n\r\n        this.size = { width: this.canvas.width, height: this.canvas.height }\r\n        this.device = device;\r\n        this.format = format;\r\n\r\n        this.initPipeline(this.device, this.format);\r\n    }\r\n    async initPipeline(device: GPUDevice, format: GPUTextureFormat, primitiveType = 'triangle-list') { // triangle-list , triangle-strip\r\n        const vertexData = new Float32Array([\r\n            -0.5, -0.5,  // vertex a\r\n            0.5, -0.5,  // vertex b\r\n            -0.5, 0.5,  // vertex d\r\n            -0.5, 0.5,  // vertex d\r\n            0.5, -0.5,  // vertex b\r\n            0.5, 0.5,  // vertex c\r\n        ]);\r\n\r\n        const colorData = new Float32Array([\r\n            1, 0, 0,    // vertex a: red\r\n            0, 1, 0,    // vertex b: green\r\n            1, 1, 0,    // vertex d: yellow\r\n            1, 1, 0,    // vertex d: yellow\r\n            0, 1, 0,    // vertex b: green\r\n            0, 0, 1     // vertex c: blue\r\n        ]);\r\n\r\n        const vertexBuffer = CreateGPUBuffer(device, vertexData);\r\n        const colorBuffer = CreateGPUBuffer(device, colorData);\r\n\r\n        const pipeline = device.createRenderPipeline({\r\n            layout: 'auto',\r\n            vertex: {\r\n                module: device.createShaderModule({\r\n                    code: shader\r\n                }),\r\n                entryPoint: \"vs_main\",\r\n                //@ts-ignore\r\n                buffers: [\r\n                    {\r\n                        arrayStride: 8,\r\n                        attributes: [{\r\n                            shaderLocation: 0,\r\n                            format: \"float32x2\",\r\n                            offset: 0\r\n                        }]\r\n                    },\r\n                    {\r\n                        arrayStride: 12,\r\n                        attributes: [{\r\n                            shaderLocation: 1,\r\n                            format: \"float32x3\",\r\n                            offset: 0\r\n                        }]\r\n                    }\r\n                ]\r\n            },\r\n            fragment: {\r\n                module: device.createShaderModule({\r\n                    code: shader\r\n                }),\r\n                entryPoint: \"fs_main\",\r\n                targets: [\r\n                    {\r\n                        format: this.format as GPUTextureFormat\r\n                    }\r\n                ]\r\n            },\r\n            primitive: {\r\n                topology: \"triangle-list\",\r\n            }\r\n        });\r\n\r\n        const commandEncoder = device.createCommandEncoder();\r\n        const textureView = this.ctx.getCurrentTexture().createView();\r\n        const renderPass = commandEncoder.beginRenderPass({\r\n            //@ts-ignore\r\n            colorAttachments: [{\r\n                view: textureView,\r\n                clearValue: { r: 0, g: 0, b: 0, a: 1.0 }, //background color\r\n                //clearValue: { r: 0.2, g: 0.247, b: 0.314, a: 1.0 }, \r\n                loadOp: 'clear',\r\n                storeOp: 'store'\r\n            }]\r\n        });\r\n        renderPass.setPipeline(pipeline);\r\n        renderPass.setVertexBuffer(0, vertexBuffer);\r\n        renderPass.setVertexBuffer(1, colorBuffer);\r\n        renderPass.draw(6);\r\n        renderPass.end();\r\n\r\n        device.queue.submit([commandEncoder.finish()]);\r\n\r\n    }\r\n    public destroy() {\r\n        this.device.destroy();\r\n        while (this.divHost.lastElementChild) {\r\n            this.divHost.removeChild(this.divHost.lastElementChild);\r\n        }\r\n    }\r\n}"],"names":["CreateGPUBuffer","device","data","usageFlag","GPUBufferUsage","VERTEX","COPY_DST","buffer","createBuffer","size","byteLength","usage","mappedAtCreation","Float32Array","getMappedRange","set","unmap","vertex","vertexCount","shader","Solution","constructor","id","divHost","canvas","ctx","format","pipelineObj","this","document","getElementById","createElement","appendChild","initWebGPU","async","navigator","gpu","Error","adapter","requestAdapter","powerPreference","requestDevice","getContext","getPreferredCanvasFormat","getPreferredFormat","window","devicePixelRatio","width","clientWidth","height","clientHeight","configure","alphaMode","initPipeline","vertexData","colorData","vertexBuffer","colorBuffer","pipeline","createRenderPipeline","layout","module","createShaderModule","code","entryPoint","buffers","arrayStride","attributes","shaderLocation","offset","fragment","targets","primitive","topology","commandEncoder","createCommandEncoder","textureView","getCurrentTexture","createView","renderPass","beginRenderPass","colorAttachments","view","clearValue","r","g","b","a","loadOp","storeOp","setPipeline","setVertexBuffer","draw","end","queue","submit","finish","destroy","lastElementChild","removeChild"],"sourceRoot":""}