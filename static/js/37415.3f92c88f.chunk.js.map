{"version":3,"file":"static/js/37415.3f92c88f.chunk.js","mappings":"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","sources":["njslab/Workshop/workshop-ml/SmartDrawingApp/Lib/NVector3.ts"],"sourcesContent":["// import { ConcaveCore } from './ConcaveCore';\r\n// import { CPoint } from '../../AppDrawing/Canvas/CGeometry/CPoint';\r\n// import { UNIT, MathUtility } from '../Utilities/MathUtility';\r\n\r\n// import { NWebassemblyController } from '../../../Webassembly/Core/NWebassemblyController/NWebassemblyController';\r\n\r\nexport class NVector3 {\r\n  static eps: number = 0.0000001;\r\n  static origin: NVector3 = new NVector3(0, 0, 0);\r\n\r\n  x: number = 0.0;\r\n  y: number = 0.0;\r\n  z: number = 0.0;\r\n  w: number = 0.0;\r\n  long: number = 0.0;\r\n  lat: number = 0.0;\r\n  ele: number = 0.0;\r\n  proX: number = 0.0;\r\n  proY: number = 0.0;\r\n  proZ: number = 0.0;\r\n  alt: number = 0.0;\r\n  d: boolean = true;\r\n  isModified: boolean = false;\r\n\r\n  // tslint:disable-next-line:no-any\r\n  parent: any;\r\n\r\n  static GetVecforGraphicApp(long: number, lat: number, ele: number, proX: number, proY: number, proZ: number) {\r\n    let v = new NVector3(0, 0, 0);\r\n    v.long = long; v.lat = lat; v.ele = ele; v.proX = proX; v.proY = proY; v.proZ = proZ;\r\n    return v;\r\n  }\r\n  static DeepCopy(v: NVector3): NVector3 {\r\n    const out = new NVector3(v.x, v.y, v.z);\r\n    out.long = v.long; out.lat = v.lat;\r\n    out.proX = v.proX; out.proY = v.proY; out.proZ = v.proZ;\r\n    return out;\r\n  }\r\n  static Dot(a: NVector3, b: NVector3) {\r\n    return a.x * b.x + a.y * b.y + a.z * b.z;\r\n  }\r\n\r\n  // https://stackoverflow.com/questions/25122185/measuring-area-with-n-amount-of-gps-coordinates // no concave\r\n  static GetAreayConvexGPS(vec: NVector3[]) {\r\n\r\n    let lats = [], longs = [];\r\n    for (let i = 0; i < vec.length; ++i) {\r\n      lats.push(vec[i].lat); longs.push(vec[i].long);\r\n    }\r\n    lats.push(vec[0].lat); longs.push(vec[0].long); // make sure to add the first term to the end of both arrays\r\n\r\n    let latsSum = 0, longSum = 0; // get the average center point of the polygon\r\n\r\n    for (let i = lats.length; i--;) {\r\n      latsSum += lats[i]; longSum += longs[i];\r\n    }\r\n\r\n    let latOrigin = latsSum / lats.length;\r\n    let lonOrigin = longSum / longs.length;\r\n\r\n    // translate origin to (0,0) by shifting lat long and calculate the standard angle of the point\r\n    let angles = new Array(lats.length);\r\n\r\n    for (let j = lats.length; j--;) {\r\n      lats[j] -= latOrigin;\r\n      longs[j] -= lonOrigin;\r\n\r\n      if (longs[j] >= 0 && lats[j] >= 0) {\r\n        angles[j] = Math.abs(Math.atan(lats[j] / longs[j]) * 180 / Math.PI);\r\n      } else if (longs[j] < 0 && lats[j] >= 0) {\r\n        angles[j] = 90 + Math.abs(Math.atan(lats[j] / longs[j]) * 180 / Math.PI);\r\n      } else if (longs[j] < 0 && lats[j] < 0) {\r\n        angles[j] = 180 + Math.abs(Math.atan(lats[j] / longs[j]) * 180 / Math.PI);\r\n      } else if (longs[j] >= 0 && lats[j] < 0) {\r\n        angles[j] = 270 + Math.abs(Math.atan(lats[j] / longs[j]) * 180 / Math.PI);\r\n      }\r\n    }\r\n\r\n    // re-arrange the points from least to greatest angle\r\n    let curAng, curLat, curLon;\r\n\r\n    for (let l = 0; l < angles.length; l++) {\r\n      for (let k = 0; k < angles.length - 1; k++) {\r\n        curAng = angles[k];\r\n        curLat = lats[k];\r\n        curLon = longs[k];\r\n\r\n        if (curAng < angles[k + 1]) {\r\n          angles[k] = angles[k + 1];\r\n          lats[k] = lats[k + 1];\r\n          longs[k] = longs[k + 1];\r\n\r\n          angles[k + 1] = curAng;\r\n          lats[k + 1] = curLat;\r\n          longs[k + 1] = curLon;\r\n        }\r\n      }\r\n    }\r\n\r\n    // calculate area for irregular polygon\r\n    let sum1 = 0, sum2 = 0;\r\n\r\n    for (let t = 0; t < lats.length; t++) {\r\n      if (t !== lats.length - 1) {\r\n        sum1 += lats[t] * longs[t + 1];\r\n        sum2 += longs[t] * lats[t + 1];\r\n      } else {\r\n        sum1 += lats[t] * longs[0];\r\n        sum2 += longs[t] * lats[0];\r\n      }\r\n    }\r\n\r\n    let area = (sum1 - sum2) / 2.0;\r\n    // console.log('Area: ' + area * 6378137.0 * 6378137.0 / 2.0);\r\n    return area * 20; // * 6378137.0 * 6378137.0 / 2.0;\r\n  }\r\n  static ScalarRev_V_S_OUT(v: NVector3, s: number, out: NVector3) {\r\n    out.x = s * v.x;\r\n    out.y = s * v.y;\r\n    out.z = s * v.z;\r\n    return out;\r\n  }\r\n  static Add(v0: NVector3, v1: NVector3): NVector3 {\r\n    return new NVector3(v0.x + v1.x, v0.y + v1.y, v0.z + v1.z);\r\n  }\r\n  static Sub(v0: NVector3, v1: NVector3): NVector3 {\r\n    return new NVector3(v0.x - v1.x, v0.y - v1.y, v0.z - v1.z);\r\n  }\r\n  static Clone(v: NVector3): NVector3 {\r\n    return NVector3.DeepCopy(v);\r\n  }\r\n  static ZAxis(): NVector3 {\r\n    return new NVector3(0, 0, 1);\r\n  }\r\n  static YAxis(): NVector3 {\r\n    return new NVector3(0, 1, 0);\r\n  }\r\n  static Zero(): NVector3 {\r\n    return new NVector3(0, 0, 0);\r\n  }\r\n  static Origin(): NVector3 {\r\n    return new NVector3(0, 0, 0);\r\n  }\r\n  static Plus(v1: NVector3, v2: NVector3): NVector3 {\r\n    return new NVector3(v1.x + v2.x, v1.y + v2.y, v1.z + v2.z);\r\n  }\r\n  static Scale(v: NVector3, s: number): NVector3 {\r\n    return new NVector3(v.x * s, v.y * s, v.z * s);\r\n  }\r\n  static MidVec(v1: NVector3, v2: NVector3): NVector3 {\r\n    return new NVector3((v1.x + v2.x) * 0.5, (v1.y + v2.y) * 0.5, (v1.z + v2.z) * 0.5);\r\n  }\r\n  static CompareTwoVectors(v0: NVector3, v1: NVector3): boolean {\r\n    if (v0.x !== v1.x || v0.y !== v1.y || v0.z !== v1.z) {\r\n      return false;\r\n    } else {\r\n      return true;\r\n    }\r\n  }\r\n  static Length(v: NVector3): number {\r\n    return Math.sqrt(v.x * v.x + v.y * v.y + v.z * v.z);\r\n  }\r\n  static Normalize(v: NVector3): NVector3 {\r\n    let len: number = Math.sqrt(v.x * v.x + v.y * v.y + v.z * v.z);\r\n    return new NVector3(v.x / len, v.y / len, v.z / len);\r\n  }\r\n  // https://web.archive.org/web/20090214201206/http://valis.cs.uiuc.edu:80/~sariel/research/CG/compgeom/msg00827.html\r\n  static GetArea(vs: NVector3[]) {\r\n    let area = 0;\r\n    // // double center2dx = 0;\r\n    // // double center2dy = 0;\r\n    // for (let i = 0; i < vs.length - 1; i++) {\r\n    //   // tmreal t = 2 * vs[i].X * vs[i + 0].Y + vs[i].Y * vs[i + 1].X + vs[i].X * vs[i + 1].Y + 2 * vs[i + 1].X * vs[i + 1].Y;\r\n    //   area += (vs[i].x - vs[i + 1].x) * (vs[i].y + vs[i + 1].y);\r\n    //   // center2d.x += (+vs[i].X - vs[i + 1].X) * t;\r\n    //   // center2d.y += (-vs[i].Y + vs[i + 1].Y) * t;\r\n    // }\r\n    // area *= 0.5;\r\n    // // center2dx *= 1 / (6 * area);\r\n    // // center2dy *= 1 / (6 * area);\r\n    // return area;\r\n\r\n    for (let i = 0, l = vs.length; i < l; i++) {\r\n      let addX = vs[i].x;\r\n      let addY = vs[i === vs.length - 1 ? 0 : i + 1].y;\r\n      let subX = vs[i === vs.length - 1 ? 0 : i + 1].x;\r\n      let subY = vs[i].y;\r\n\r\n      area += (addX * addY * 0.5);\r\n      area -= (subX * subY * 0.5);\r\n    }\r\n\r\n    return Math.abs(area);\r\n  }\r\n  static GetAreaByLongLat(vs: NVector3[]) {\r\n    let area = 0;\r\n    // double center2dx = 0;\r\n    // double center2dy = 0;\r\n    for (let i = 0; i < vs.length - 1; i++) {\r\n      // tmreal t = 2 * vs[i].X * vs[i + 0].Y + vs[i].Y * vs[i + 1].X + vs[i].X * vs[i + 1].Y + 2 * vs[i + 1].X * vs[i + 1].Y;\r\n      area += (vs[i].long - vs[i + 1].long) * (vs[i].lat + vs[i + 1].lat);\r\n      // center2d.x += (+vs[i].X - vs[i + 1].X) * t;\r\n      // center2d.y += (-vs[i].Y + vs[i + 1].Y) * t;\r\n    }\r\n    area *= 0.5;\r\n    // center2dx *= 1 / (6 * area);\r\n    // center2dy *= 1 / (6 * area);\r\n    return area;\r\n  }\r\n  static GetGeoArea(vs: NVector3[]) {\r\n    let area = 0;\r\n    for (let i = 0; i < vs.length - 1; i++) {\r\n      area += (vs[i].x - vs[i + 1].x) * (vs[i].y + vs[i + 1].y);\r\n    }\r\n    area *= 0.5;\r\n    return Math.abs(area);\r\n  }\r\n  static GetGeoAreaBbyLongLat(vs: NVector3[]) {\r\n    let area = 0;\r\n    for (let i = 0; i < vs.length - 1; i++) {\r\n      area += (vs[i].long - vs[i + 1].long) * (vs[i].lat + vs[i + 1].lat);\r\n    }\r\n    area *= 0.5;\r\n    return Math.abs(area);\r\n  }\r\n  // static GetIndexByShortDistance(v: NVector3, vs: NVector3[]): number[] {\r\n  //   let index = -1;\r\n  //   let dis = Number.MAX_SAFE_INTEGER;\r\n  //   for (let i = 0; i < vs.length; ++i) {\r\n  //     let distance = NVector3.Distance(v, vs[i]);\r\n  //     if (distance < dis) {\r\n  //       dis = distance;\r\n  //       index = i;\r\n  //     }\r\n  //   }\r\n  //   return [index, dis];\r\n  // }\r\n  static Distance(v0: NVector3, v1: NVector3): number {\r\n    return Math.sqrt((v0.x - v1.x) * (v0.x - v1.x) + (v0.y - v1.y) * (v0.y - v1.y) + (v0.z - v1.z) * (v0.z - v1.z));\r\n    // return NWebassemblyController.ctrller.Distance(v0.x, v0.y, v0.z, v1.x, v1.y, v1.z);\r\n  }\r\n  static Distance2(v1: NVector3, v2: NVector3): number {\r\n    let d: number =\r\n      (v1.x - v2.x) * (v1.x - v2.x) +\r\n      (v1.y - v2.y) * (v1.y - v2.y) +\r\n      (v1.z - v2.z) * (v1.z - v2.z);\r\n    return d;\r\n  }\r\n  static DotProduct(v1: NVector3, v2: NVector3): number {\r\n    return v1.x * v2.x + v1.y * v2.y + v1.z * v2.z;\r\n  }\r\n  static CrossProduct(v1: NVector3, v2: NVector3): NVector3 {\r\n    return new NVector3(\r\n      v1.y * v2.z - v1.z * v2.y,\r\n      v1.z * v2.x - v1.x * v2.z,\r\n      v1.x * v2.y - v1.y * v2.x\r\n    );\r\n  }\r\n  static DivideByNum(v0: NVector3, v1: NVector3, n: number = 5): NVector3[] {\r\n    let vs: NVector3[] = [];\r\n    let xOff = (v1.x - v0.x) / n;\r\n    let yOff = (v1.y - v0.y) / n;\r\n    let zOff = (v1.z - v0.z) / n;\r\n    for (let j = 0; j < n; ++j) {\r\n      let x = v0.x + xOff * j;\r\n      let y = v0.y + yOff * j;\r\n      let z = v0.z + zOff * j;\r\n      vs.push(new NVector3(x, y, z));\r\n    }\r\n    return vs;\r\n  }\r\n  // static DistancefromGeoV(v0: NVector3, v1: NVector3, unit: UNIT = CGeometry.appDrawing.activeCommands.unit): number {\r\n  //   let dis = NVector3.KMeterFromGeoGPSPos(v0, v1);\r\n  //   if (unit === UNIT.METER) { return dis * 1000; }\r\n  //   if (unit === UNIT.KM) { return dis; }\r\n  //   if (unit === UNIT.MILE) { return MathUtility.MilesFromKM(dis); }\r\n  //   return -1;\r\n  // }\r\n  static KMeterFromGeoGPSPos(gV0: NVector3, gV1: NVector3): number {\r\n    let R = 6378.137; // Radius of earth in KM // a = Equatorial radius (6,378.1370 km) // b = Polar radius (6,356.7523 km)\r\n    let dLat = gV1.lat * Math.PI / 180 - gV0.lat * Math.PI / 180;\r\n    let dLon = gV1.long * Math.PI / 180 - gV0.long * Math.PI / 180;\r\n    let a =\r\n      Math.sin(dLat / 2) * Math.sin(dLat / 2) +\r\n      Math.cos(gV0.lat * Math.PI / 180) *\r\n      Math.cos(gV1.lat * Math.PI / 180) *\r\n      Math.sin(dLon / 2) *\r\n      Math.sin(dLon / 2);\r\n    let c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1 - a));\r\n    let d = R * c;\r\n    return d; // * 1000; // meters\r\n  }\r\n  static KMeterByTwoGeoPos(long0: number, lat0: number, long1: number, lat1: number) {\r\n    let v0 = new NVector3(0, 0); v0.long = long0; v0.lat = lat0;\r\n    let v1 = new NVector3(0, 0); v1.long = long1; v1.lat = lat1;\r\n    return NVector3.KMeterFromGeoGPSPos(v0, v1);\r\n  }\r\n  static KMeterFromGPSPos(gV0: NVector3, gV1: NVector3): number {\r\n    let R = 6378.137; // Radius of earth in KM // a = Equatorial radius (6,378.1370 km) // b = Polar radius (6,356.7523 km)\r\n    let dLat = gV1.y * Math.PI / 180 - gV0.y * Math.PI / 180;\r\n    let dLon = gV1.x * Math.PI / 180 - gV0.x * Math.PI / 180;\r\n    let a =\r\n      Math.sin(dLat / 2) * Math.sin(dLat / 2) +\r\n      Math.cos(gV0.y * Math.PI / 180) *\r\n      Math.cos(gV1.y * Math.PI / 180) *\r\n      Math.sin(dLon / 2) *\r\n      Math.sin(dLon / 2);\r\n    let c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1 - a));\r\n    let d = R * c;\r\n    return d; // * 1000; // meters\r\n  }\r\n  static Get1KM_Long_ByGeoUnit(long: number = 0, lat: number = 0): number {\r\n    let v = new NVector3(long, lat, 0);\r\n    let addition = 0.0;\r\n    for (let i = 0; i < 10000; ++i) {\r\n      let dis = NVector3.KMeterFromGPSPos(v, new NVector3(v.x + addition, v.y, v.z));\r\n      if (1 < dis && dis < 1.001) {\r\n        // console.log('result long', i, dis);\r\n        return v.x + addition;\r\n      }\r\n      addition += 0.00001;\r\n    }\r\n    return -1;\r\n  }\r\n  static Get1KM_lat_ByGeoUnit(long: number = 0, lat: number = 0): number {\r\n    let v = new NVector3(long, lat, 0);\r\n    let addition = 0.0;\r\n    for (let i = 0; i < 10000; ++i) {\r\n      let dis = NVector3.KMeterFromGPSPos(v, new NVector3(v.x, v.y + addition, v.z));\r\n      if (1 < dis && dis < 1.001) {\r\n        // console.log('result lat', i, dis);\r\n        return v.y + addition;\r\n      }\r\n      addition += 0.00001;\r\n    }\r\n    return -1;\r\n  }\r\n  static Get1KM_Lat_Long_GeoUnit(long: number = 0, lat: number = 0): NVector3 {\r\n    let lng = NVector3.Get1KM_Long_ByGeoUnit(long, lat);\r\n    let la = NVector3.Get1KM_lat_ByGeoUnit(long, lat);\r\n    return new NVector3(lng, la, 0);\r\n  }\r\n  // ............................................................................ vec compute\r\n  // static CalculateFalloff(pts: NVector3[], pt: NVector3, s: number, f: number): number {\r\n  //   let newValue = 0.0;\r\n  //   for (let i = 0; i < pts.length; ++i) {\r\n  //     // let v = NJS.PointUtils.CalculateFalloff(pt, pts[i], s, f);\r\n  //     // newValue += v;\r\n  //   }\r\n  //   return newValue;\r\n  // }\r\n  static CalculateFalloff(pt: NVector3, attractor: NVector3, strength: number, falloff: number): number {\r\n    let v: NVector3 = attractor.Sub(pt);\r\n    let dist: number = v.Length();\r\n    return dist * (strength * Math.exp(-falloff * dist * dist));\r\n  }\r\n  static Attractor(pt: NVector3, attractor: NVector3, strength: number, falloff: number): NVector3 {\r\n    let v: NVector3 = attractor.Sub(pt);\r\n    v.Unitize();\r\n    let dist = v.Length();\r\n    return v.Mult(strength * Math.exp(-falloff * dist * dist));\r\n  }\r\n  static Explosion(pt: NVector3, Explosion: NVector3, strength: number, falloff: number): NVector3 {\r\n    let v = Explosion.Sub(pt);\r\n    v.Unitize();\r\n    let dist = v.Length();\r\n    return v.Mult(-(strength * Math.exp(-falloff * dist * dist)));\r\n  }\r\n  static Rotor(pt: NVector3, rotor: NVector3, strength: number, falloff: number): NVector3 {\r\n    let v = rotor.Sub(pt);\r\n    v.Unitize();\r\n    // v.Rotate(3.141592 / 2, NVector3.zAxis);\r\n    // let dist: number = v.Length;\r\n    // return (v.Mult (strength * (Math.exp(-falloff * dist * dist))));\r\n    return NVector3.Origin();\r\n  }\r\n\r\n  // ............................................................................ vec angle\r\n  static GetAngleBetween(v0: NVector3, v1: NVector3) {\r\n    return Math.atan2(v1.x - v0.x, v1.y - v0.y);\r\n  }\r\n  // .................................................\r\n  static GetCosAngleByTwoVectors(v0: NVector3, v1: NVector3): number {\r\n    return NVector3.DotProduct(NVector3.Normalize(v0), NVector3.Normalize(v1));\r\n  }\r\n  static GetAngleByTwoVectorsRadian(v0: NVector3, v1: NVector3): number {\r\n    return Math.acos(NVector3.GetCosAngleByTwoVectors(v0, v1));\r\n  }\r\n  static GetAngleByTwoVectors(v0: NVector3, v1: NVector3): number {\r\n    return NVector3.GetAngleByTwoVectorsRadian(v0, v1) * 180.0 / Math.PI;\r\n  }\r\n  static GetRotationByWorldCoodinate(v: NVector3): number {\r\n    let origin = new NVector3(1, 0, 0);\r\n    return NVector3.GetAngleByTwoVectors(origin, v);\r\n  }\r\n  static GetRotationByWorldCoodinateByTwo(v0: NVector3, v1: NVector3): number {\r\n    let v = v1.Sub(v0);\r\n    let origin = new NVector3(1, 0, 0);\r\n    if (v.y > 0) {\r\n      return NVector3.GetAngleByTwoVectors(origin, v) * -1;\r\n    } else {\r\n      return NVector3.GetAngleByTwoVectors(origin, v);\r\n    }\r\n  }\r\n  // ............................................................................\r\n  // static ToJSon(v) {\r\n  // var p = {\r\n  //             'point': [],\r\n  //             'primitive': 'point',\r\n  //             'units': {\r\n  //             'point': 'meters'\r\n  //         }\r\n  // }\r\n  // p.point = [v.x , v.y, v.z];\r\n  // return p;\r\n  // }\r\n  static ComputeDotProducts(vs: NVector3[]) {\r\n    let out: number[] = [];\r\n    for (let i = 0; i < vs.length; ++i) {\r\n      // let v0: NVector3 = NVector3.Origin();\r\n      // let v1: NVector3;\r\n      if (i < vs.length - 1) {\r\n        let v0 = new NVector3(vs[i].x, vs[i].y, vs[i].z);\r\n        let v1 = new NVector3(vs[i + 1].x, vs[i + 1].y, vs[i + 1].z);\r\n\r\n        v1.x -= v0.x;\r\n        v1.y -= v0.y;\r\n        v1.z -= v0.z;\r\n\r\n        let dot = NVector3.DotProduct(new NVector3(1, 0, 0), NVector3.Normalize(v1));\r\n        if (Number.isNaN(dot)) {\r\n          out.push(out[out.length - 1]);\r\n        } else {\r\n          out.push(dot);\r\n        }\r\n\r\n      } else {\r\n        let v0 = new NVector3(vs[i].x, vs[i].y, vs[i].z);\r\n        let v1 = new NVector3(vs[0].x, vs[0].y, vs[0].z);\r\n\r\n        v1.x -= v0.x;\r\n        v1.y -= v0.y;\r\n        v1.z -= v0.z;\r\n\r\n        let dot = NVector3.DotProduct(new NVector3(1, 0, 0), NVector3.Normalize(v1));\r\n        if (Number.isNaN(dot)) {\r\n          out.push(out[out.length - 1]);\r\n        } else {\r\n          out.push(dot);\r\n        }\r\n      }\r\n    }\r\n    return out;\r\n  }\r\n  static ComputeDotProductsWithCenter(vs: NVector3[]) {\r\n    let cp = NVector3.GetCenterVecFromVecs(vs);\r\n    let out = [];\r\n    for (let i = 0; i < vs.length; ++i) {\r\n      let v0: NVector3;\r\n      let v1: NVector3;\r\n      if (i < vs.length - 1) {\r\n        v0 = new NVector3(vs[i].x - cp.x, vs[i].y - cp.y, vs[i].z - cp.z);\r\n        v1 = new NVector3(vs[i + 1].x - cp.x, vs[i + 1].y - cp.y, vs[i + 1].z - cp.z);\r\n      } else {\r\n        v0 = new NVector3(vs[i].x - cp.x, vs[i].y - cp.y, vs[i].z - cp.z);\r\n        v1 = new NVector3(vs[0].x - cp.x, vs[0].y - cp.y, vs[0].z - cp.z);\r\n      }\r\n      let dot = NVector3.DotProduct(NVector3.Normalize(v0), NVector3.Normalize(v1));\r\n      out.push(dot);\r\n    }\r\n    return out;\r\n  }\r\n  static GetXYDimForCircle(vs: NVector3[]) {\r\n    let cp = NVector3.GetCenterVecFromVecs(vs);\r\n    // let out = [];\r\n    let xx: number = 0;\r\n    let yy: number = 0;\r\n    let len = vs.length;\r\n    for (let i = 0; i < len; ++i) {\r\n\r\n      // if (i < vs.length - 1) {\r\n      xx += Math.abs(vs[i].x - cp.x);\r\n      yy += Math.abs(vs[i].y - cp.y);\r\n      // v0 = new NVector3(vs[i].x - cp.x, vs[i].y - cp.y, vs[i].z - cp.z);\r\n      // v1 = new NVector3(vs[i + 1].x - cp.x, vs[i + 1].y - cp.y, vs[i + 1].z - cp.z);\r\n      // } else {\r\n      // v0 = new NVector3(vs[i].x - cp.x, vs[i].y - cp.y, vs[i].z - cp.z);\r\n      // v1 = new NVector3(vs[0].x - cp.x, vs[0].y - cp.y, vs[0].z - cp.z);\r\n      // }\r\n      // let dot = NVector3.DotProduct(NVector3.Normalize(v0), NVector3.Normalize(v1));\r\n      // out.push(dot);\r\n    }\r\n    len += 2;\r\n    return [xx / len, yy / len];\r\n  }\r\n\r\n  static DistanceMouseWithTwoVecs(m: NVector3, v0: NVector3, v1: NVector3): number {\r\n    v0.x += 0.00001;\r\n    v0.y += 0.00001;\r\n    let boundary = NVector3.GetBoundingVecs(v0, v1);\r\n    let vec = NVector3.GetCloseVec(v0, v1, m.x, m.y, boundary, true);\r\n    return NVector3.Distance(m, vec);\r\n  }\r\n  static GetCloseVec(p0: NVector3, p1: NVector3, x: number, y: number, vecsBound: NVector3[], OnLine: boolean = true): NVector3 {\r\n    let pp1: NVector3 = new NVector3(p0.x, p0.y, p0.z);\r\n    let pp2: NVector3 = new NVector3(p1.x, p1.y, p1.z);\r\n    let v1: NVector3 = pp2.Sub(pp1);\r\n    let p: NVector3 = new NVector3(x, y, 0);\r\n    let v2: NVector3 = p.Sub(pp1);\r\n    v1.Unitize();\r\n    let cp = pp1.Add(v1.Mult(v2.DotProduct(v1)));\r\n    if (OnLine) {\r\n      if (NVector3.IsInsideOfVecs(cp, vecsBound)) {\r\n        return cp;\r\n      } else {\r\n        if (p0.Distance(cp) < p1.Distance(cp)) {\r\n          return new NVector3(p0.x, p0.y, p0.z);\r\n        } else {\r\n          return new NVector3(p1.x, p1.y, p1.z);\r\n        }\r\n      }\r\n    } else {\r\n      return cp;\r\n    }\r\n  }\r\n  static GetBoundingVecs(v0: NVector3, v1: NVector3): NVector3[] {\r\n    let listOfVec: NVector3[] = [];\r\n    let x: number = 0;\r\n    let y: number = 0;\r\n    let z: number = 0;\r\n    if (v0.x < v1.x) { x = v0.x; } else { x = v1.x; }\r\n    if (v0.y < v1.y) { y = v0.y; } else { y = v1.y; }\r\n    if (v0.z < v1.z) { z = v0.z; } else { z = v1.z; }\r\n    let nv0 = new NVector3(x, y, z);\r\n    if (v0.x > v1.x) { x = v0.x; } else { x = v1.x; }\r\n    if (v0.y > v1.y) { y = v0.y; } else { y = v1.y; }\r\n    if (v0.z > v1.z) { z = v0.z; } else { z = v1.z; }\r\n    let nv1 = new NVector3(x, y, z);\r\n    listOfVec.push(new NVector3(nv0.x, nv0.y, nv0.z));\r\n    listOfVec.push(new NVector3(nv1.x, nv0.y, nv0.z));\r\n    listOfVec.push(new NVector3(nv1.x, nv1.y, nv0.z));\r\n    listOfVec.push(new NVector3(nv0.x, nv1.y, nv0.z));\r\n    return listOfVec;\r\n  }\r\n  static GetBoundaryByVecWidthHeight(v: NVector3, width: number, height: number): NVector3[] {\r\n    let boundarVecsSub = [];\r\n    boundarVecsSub.push(new NVector3(v.x, v.y, v.z));\r\n    boundarVecsSub.push(new NVector3(v.x + width, v.y, v.z));\r\n    boundarVecsSub.push(new NVector3(v.x + width, v.y + height, v.z));\r\n    boundarVecsSub.push(new NVector3(v.x, v.y + height, v.z));\r\n    return boundarVecsSub;\r\n  }\r\n  // static GetBoundingByVecs(vs: NVector3[]): NVector3[] {\r\n  //   let listOfVec: NVector3[] = [];\r\n  //   let xMin: number = Number.MAX_SAFE_INTEGER;\r\n  //   let yMin: number = Number.MAX_SAFE_INTEGER;\r\n  //   let zMin: number = Number.MAX_SAFE_INTEGER;\r\n\r\n  //   let xMax: number = Number.MIN_SAFE_INTEGER;\r\n  //   let yMax: number = Number.MIN_SAFE_INTEGER;\r\n  //   let zMax: number = Number.MIN_SAFE_INTEGER;\r\n  //   for (let i = 0; i < vs.length; ++i) {\r\n\r\n  //     if (xMin > vs[i].x) { xMin = vs[i].x; }\r\n  //     if (yMin > vs[i].y) { yMin = vs[i].y; }\r\n  //     if (zMin > vs[i].z) { zMin = vs[i].z; }\r\n\r\n  //     if (xMax < vs[i].x) { xMax = vs[i].x; }\r\n  //     if (yMax < vs[i].y) { yMax = vs[i].y; }\r\n  //     if (zMax < vs[i].z) { zMax = vs[i].z; }\r\n\r\n  //   }\r\n  //   listOfVec.push(new NVector3(xMin, yMin, zMin));\r\n  //   listOfVec.push(new NVector3(xMax, yMax, zMax));\r\n  //   return listOfVec;\r\n  // }\r\n  static GetMinMaxVecFromVecs(vec: NVector3[]): NVector3[] {\r\n    let minX = Number.MAX_VALUE, minY = Number.MAX_VALUE, minZ = Number.MAX_VALUE;\r\n    let maxX = Number.MIN_VALUE, maxY = Number.MIN_VALUE, maxZ = Number.MIN_VALUE;\r\n    for (let v of vec) {\r\n      if (minX > v.x) { minX = v.x; } if (minY > v.y) { minY = v.y; } if (minZ > v.z) { minZ = v.z; }\r\n      if (maxX < v.x) { maxX = v.x; } if (maxY < v.y) { maxY = v.y; } if (maxZ < v.z) { maxZ = v.z; }\r\n    }\r\n    return [new NVector3(minX, minY, minZ), new NVector3(maxX, maxY, maxZ)];\r\n  }\r\n  static RemoveVecsWithinDis(vs: NVector3[], tor: number = 10): NVector3[] {\r\n    let vecs: NVector3[] = [];\r\n    for (let i = 0; i < vs.length - 1; ++i) {\r\n      let v0 = vs[i];\r\n      if (v0.d === false) { continue; }\r\n      for (let j = i + 1; j < vs.length; ++j) {\r\n        if (NVector3.Distance(v0, vs[j]) < tor) { vs[j].d = false; }\r\n      }\r\n    }\r\n    for (let i = 0; i < vs.length; ++i) { if (vs[i].d === true) { vecs.push(vs[i]); } }\r\n    // vecs.push(vs[vs.length - 1]);\r\n    return vecs;\r\n  }\r\n  // ...............................................................................\r\n  static IsInsideOfVecsWtihVecs(vs: NVector3[], vecs: NVector3[]): boolean {\r\n    let inside: boolean = true;\r\n    for (let i = 0; i < vs.length; i++) {\r\n      inside = NVector3.IsInsideOfVecs(vs[i], vecs);\r\n      if (!inside) {\r\n        return false;\r\n      }\r\n    }\r\n    return true;\r\n  }\r\n  static IsInsideOfVecs(v: NVector3, vecs: NVector3[]): boolean {\r\n    // ray-casting algorithm based on https://github.com/substack/point-in-polygon\r\n    // http://www.ecse.rpi.edu/Homepages/wrf/Research/Short_Notes/pnpoly.html\r\n    let x = v.x, y = v.y;\r\n    let inside = false;\r\n    for (let i = 0, j = vecs.length - 1; i < vecs.length; j = i++) {\r\n      let xi = vecs[i].x,\r\n        yi = vecs[i].y;\r\n      let xj = vecs[j].x,\r\n        yj = vecs[j].y;\r\n      let intersect = yi > y !== yj > y && x < (xj - xi) * (y - yi) / (yj - yi) + xi;\r\n      if (intersect) {\r\n        inside = !inside;\r\n      }\r\n    }\r\n    return inside;\r\n  }\r\n  static IsInsideOfVecsByCrossing(v: NVector3, w: number, h: number, vs: NVector3[]) {\r\n    if (this.IsInsideOfVecs(new NVector3(v.x - w * 0.5, v.y - h * 0.5), vs)) { return true; }\r\n    if (this.IsInsideOfVecs(new NVector3(v.x + w * 0.5, v.y - h * 0.5), vs)) { return true; }\r\n    if (this.IsInsideOfVecs(new NVector3(v.x + w * 0.5, v.y + h * 0.5), vs)) { return true; }\r\n    if (this.IsInsideOfVecs(new NVector3(v.x - w * 0.5, v.y + h * 0.5), vs)) { return true; }\r\n    return false;\r\n  }\r\n  static IsInsideOfVecsByConcaveHull(v: NVector3, vs: NVector3[]) {\r\n    // let vsNum: number[][] = [];\r\n    // for (let i = 0; i < vs.length; ++i) {\r\n    //   vsNum.push([vs[i].x, vs[i].y]);\r\n    // }\r\n\r\n    // let result = ConcaveCore.hull(vsNum, 20)\r\n    // console.log(vs.length);\r\n    // console.log(result);\r\n\r\n    // for (let i = 0; i < result.length; ++i) {\r\n    //   new CPoint(result[i][0], result[i][1]);\r\n    // }\r\n  }\r\n  // Convex hull\r\n  // https://en.wikibooks.org/wiki/Algorithm_Implementation/Geometry/Convex_hull/Monotone_chain\r\n  static IsInsideOfVecsByConvexHull(v: NVector3, vecs: NVector3[]): boolean {\r\n    vecs = NVector3.ConvexHull(vecs);\r\n    if (NVector3.IsInsideOfVecs(v, vecs)) { return true; } else { return false; }\r\n  }\r\n  static ConvexHull(vs: NVector3[]): NVector3[] {\r\n    vs.sort(function (a: NVector3, b: NVector3) {\r\n      return a.x === b.x ? a.y - b.y : a.x - b.x;\r\n    });\r\n    let lower: NVector3[] = [];\r\n    for (let i = 0; i < vs.length; i++) {\r\n      while (lower.length >= 2 && NVector3.Cross(lower[lower.length - 2], lower[lower.length - 1], vs[i]) <= 0) { lower.pop(); }\r\n      lower.push(vs[i]);\r\n    }\r\n    let upper: NVector3[] = [];\r\n    for (let i = vs.length - 1; i >= 0; i--) {\r\n      while (upper.length >= 2 && NVector3.Cross(upper[upper.length - 2], upper[upper.length - 1], vs[i]) <= 0) { upper.pop(); }\r\n      upper.push(vs[i]);\r\n    }\r\n    upper.pop(); lower.pop();\r\n    for (let i = 0; i < upper.length; ++i) { lower.push(upper[i]); }\r\n    return lower;\r\n  }\r\n  static Cross(O: NVector3, A: NVector3, B: NVector3): number {\r\n    return (A.x - O.x) * (B.y - O.y) - (A.y - O.y) * (B.x - O.x);\r\n  }\r\n  static Cross_A_B_OUT(a: NVector3, b: NVector3, out: NVector3) {\r\n    const ax = a.x, ay = a.y, az = a.z, bx = b.x, by = b.y, bz = b.z;\r\n    out.x = ay * bz - az * by;\r\n    out.y = az * bx - ax * bz;\r\n    out.z = ax * by - ay * bx;\r\n    return out;\r\n  }\r\n\r\n  // http://jsfiddle.net/justin_c_rounds/Gd2S2/light/\r\n  static CheckLineIntersection(p0: NVector3, p1: NVector3, p2: NVector3, p3: NVector3) {\r\n    // if the lines intersect, the result contains the x and y of the intersection (treating the lines as infinite) and booleans for whether line segment 1 or line segment 2 contain the point\r\n    let denominator: number = 0, a: number = 0, b: number = 0, numerator1: number = 0, numerator2: number = 0;\r\n    let onLine0: boolean = false, onLine1: boolean = false;\r\n    denominator = ((p3.y - p2.y) * (p1.x - p0.x)) - ((p3.x - p2.x) * (p1.y - p0.y));\r\n    let result: NVector3 = new NVector3(0, 0, 0);\r\n    if (denominator === 0) { return undefined; }\r\n    a = p0.y - p2.y;\r\n    b = p0.x - p2.x;\r\n    numerator1 = ((p3.x - p2.x) * a) - ((p3.y - p2.y) * b);\r\n    numerator2 = ((p1.x - p0.x) * a) - ((p1.y - p0.y) * b);\r\n    a = numerator1 / denominator;\r\n    b = numerator2 / denominator;\r\n\r\n    // if we cast these lines infinitely in both directions, they intersect here:\r\n    result.x = p0.x + (a * (p1.x - p0.x));\r\n    result.y = p0.y + (a * (p1.y - p0.y));\r\n    /*\r\n            // it is worth noting that this should be the same as:\r\n            x = p2.x + (b * (p3.x - p2.x));\r\n            y = p2.x + (b * (p3.y - p2.y));\r\n            */\r\n    // if line1 is a segment and line2 is infinite, they intersect if:\r\n    if (a > 0 && a < 1) {\r\n      onLine0 = true;\r\n    }\r\n    // if line2 is a segment and line1 is infinite, they intersect if:\r\n    if (b > 0 && b < 1) {\r\n      onLine1 = true;\r\n    }\r\n    // if line1 and line2 are segments, they intersect if both of the above are true\r\n    if (onLine0 && onLine1) {\r\n      return result;\r\n    } else { return undefined; }\r\n  }\r\n  // http://www.sunshine2k.de/coding/java/Polygon/Convex/polygon.htm\r\n  static CheckConvexity(vs: NVector3[]) {\r\n    if (vs.length < 3) { return false; }\r\n\r\n    let p: NVector3;\r\n    let v: NVector3;\r\n    let u: NVector3;\r\n    let res = 0;\r\n\r\n    for (let i = 0; i < vs.length; i++) {\r\n      p = vs[i];\r\n      let tmp = vs[(i + 1) % vs.length];\r\n      v = new NVector3(tmp.x - p.x, tmp.y - p.y, 0);\r\n      u = vs[(i + 2) % vs.length];\r\n\r\n      if (i === 0) { // in first loop direction is unknown, so save it in res\r\n        res = u.x * v.y - u.y * v.x + v.x * p.y - v.y * p.x;\r\n      } else {\r\n        let newres = u.x * v.y - u.y * v.x + v.x * p.y - v.y * p.x;\r\n        if ((newres > 0 && res < 0) || (newres < 0 && res > 0)) { return false; }\r\n      }\r\n    }\r\n    return true;\r\n  }\r\n  //////////////////////////////////////////////////////////////////////////////// translation Utility\r\n  static MoveVecs(vecs: NVector3[], dir: NVector3): NVector3[] {\r\n    let temp: NVector3[] = [];\r\n    for (let i = 0; i < vecs.length; ++i) {\r\n      //\r\n      temp.push(NVector3.MoveVec(vecs[i], dir));\r\n    }\r\n    return temp;\r\n  }\r\n  static MoveVec(v: NVector3, dir: NVector3): NVector3 {\r\n    return new NVector3(v.x + dir.x, v.y + dir.y, v.z + dir.z);\r\n  }\r\n  static RotateVecsLoal(vecs: NVector3[], angle: number): NVector3[] {\r\n    let cptToLocal = NVector3.GetCenterVecFromVecs(vecs);\r\n    let cptToWorld = new NVector3(-cptToLocal.x, -cptToLocal.y, -cptToLocal.z);\r\n    let temp: NVector3[] = NVector3.MoveVecs(vecs, cptToWorld);\r\n    temp = NVector3.RotateVecs(temp, angle);\r\n    temp = NVector3.MoveVecs(temp, cptToLocal);\r\n    return temp;\r\n  }\r\n  static RotateVecs(vecs: NVector3[], angle: number) {\r\n    let temp: NVector3[] = [];\r\n    for (let i = 0; i < vecs.length; ++i) {\r\n      temp.push(NVector3.RotateVec(vecs[i], angle));\r\n    }\r\n    return temp;\r\n  }\r\n  static RotateVec(v: NVector3, angle: number): NVector3 {\r\n    let cos = Math.cos(angle * (3.14159265358979 / 180.0));\r\n    let sin = Math.sin(angle * (3.14159265358979 / 180.0));\r\n    let x = v.x * cos - v.y * sin;\r\n    let y = v.x * sin + v.y * cos;\r\n    return new NVector3(x, y, v.z);\r\n  }\r\n  static GetCenterVecFromVecs(vecs: NVector3[]): NVector3 {\r\n    let nv = new NVector3(0, 0, 0);\r\n    for (let i = 0, c = vecs.length; i < c; ++i) {\r\n      nv.Add(vecs[i]);\r\n    }\r\n    nv.Mult(1.0 / vecs.length);\r\n    return nv;\r\n  }\r\n\r\n  // .............................................................................\r\n  static MidVecGeo(p1: NVector3, p2: NVector3): NVector3 {\r\n    // return new NVector3(p1.screenX + p2.screenX * 0.5, p1.screenY + p2.screenY * 0.5, 0);\r\n    return new NVector3(p1.x + p2.x * 0.5, p1.y + p2.y * 0.5, 0);\r\n  }\r\n\r\n  // intersection // https://gist.github.com/gordonwoodhull/50eb65d2f048789f9558\r\n  // https://stackoverflow.com/questions/563198/whats-the-most-efficent-way-to-calculate-where-two-line-segments-intersect/1968345#1968345\r\n  static GetVecFromIntersection(vs: NVector3[]): NVector3[] | undefined {\r\n    let newVes: NVector3[] = [];\r\n    for (let j = 0; j < vs.length - 1; ++j) {\r\n      for (let k = j + 1; k < vs.length - 1; ++k) {\r\n        let v = NVector3.CheckLineIntersection(vs[j], vs[j + 1], vs[k], vs[k + 1]);\r\n        if (v) { newVes.push(v); }\r\n      }\r\n    }\r\n    if (newVes.length === 0) { return undefined; } else { return newVes; }\r\n  }\r\n  static between(a: number, b: number, c: number) {\r\n    return a - NVector3.eps <= b && b <= c + NVector3.eps;\r\n  }\r\n  static segment_intersection(v0: NVector3, v1: NVector3, v2: NVector3, v3: NVector3) {\r\n    var x = ((v0.x * v1.y - v0.y * v1.x) * (v2.x - v3.x) - (v0.x - v1.x) * (v2.x * v3.y - v2.y * v3.x)) /\r\n      ((v0.x - v1.x) * (v2.y - v3.y) - (v0.y - v1.y) * (v2.x - v3.x));\r\n    var y = ((v0.x * v1.y - v0.y * v1.x) * (v2.y - v3.y) - (v0.y - v1.y) * (v2.x * v3.y - v2.y * v3.x)) /\r\n      ((v0.x - v1.x) * (v2.y - v3.y) - (v0.y - v1.y) * (v2.x - v3.x));\r\n    if (isNaN(x) || isNaN(y)) {\r\n      return false;\r\n    } else {\r\n      if (v0.x >= v1.x) {\r\n        if (!NVector3.between(v1.x, x, v0.x)) { return false; }\r\n      } else {\r\n        if (!NVector3.between(v0.x, x, v1.x)) { return false; }\r\n      }\r\n      if (v0.y >= v1.y) {\r\n        if (!NVector3.between(v1.y, y, v0.y)) { return false; }\r\n      } else {\r\n        if (!NVector3.between(v0.y, y, v1.y)) { return false; }\r\n      }\r\n      if (v2.x >= v3.x) {\r\n        if (!NVector3.between(v3.x, x, v2.x)) { return false; }\r\n      } else {\r\n        if (!NVector3.between(v2.x, x, v3.x)) { return false; }\r\n      }\r\n      if (v2.y >= v3.y) {\r\n        if (!NVector3.between(v3.y, y, v2.y)) { return false; }\r\n      } else {\r\n        if (!NVector3.between(v2.y, y, v3.y)) { return false; }\r\n      }\r\n    }\r\n    return new NVector3(x, y);\r\n  }\r\n  // ............................................................................. end static\r\n\r\n  constructor(x: number, y: number, z: number = 0) {\r\n    this.x = x;\r\n    this.y = y;\r\n    this.z = z;\r\n  }\r\n  Set(x: number, y: number, z: number): NVector3 {\r\n    this.x = x;\r\n    this.y = y;\r\n    this.z = z;\r\n    return new NVector3(this.x, this.y, this.z);\r\n  }\r\n  Scale(v: number): NVector3 {\r\n    this.x *= v;\r\n    this.y *= v;\r\n    this.z *= v;\r\n    return new NVector3(this.x, this.y, this.z);\r\n  }\r\n  Mult(v: number): NVector3 {\r\n    this.x *= v;\r\n    this.y *= v;\r\n    this.z *= v;\r\n    return new NVector3(this.x, this.y, this.z);\r\n  }\r\n  DivByVal(v: number): NVector3 {\r\n    this.x /= v;\r\n    this.y /= v;\r\n    this.z /= v;\r\n    return new NVector3(this.x, this.y, this.z);\r\n  }\r\n  DivByVec(v: NVector3): NVector3 {\r\n    this.x /= v.x;\r\n    this.y /= v.y;\r\n    this.z /= v.z;\r\n    return new NVector3(this.x, this.y, this.z);\r\n  }\r\n  Add(v: NVector3): NVector3 {\r\n    this.x += v.x;\r\n    this.y += v.y;\r\n    this.z += v.z;\r\n    return new NVector3(this.x, this.y, this.z);\r\n  }\r\n  Sub(v: NVector3): NVector3 {\r\n    this.x -= v.x;\r\n    this.y -= v.y;\r\n    this.z -= v.z;\r\n    return new NVector3(this.x, this.y, this.z);\r\n  }\r\n  Negate() {\r\n    this.x *= -1;\r\n    this.y *= -1;\r\n    this.z *= -1;\r\n    return new NVector3(this.x, this.y, this.z);\r\n  }\r\n  Equals(v: NVector3) {\r\n    return this.x === v.x && this.y === v.y && this.z === v.z;\r\n  }\r\n  Clone(): NVector3 {\r\n    return new NVector3(this.x, this.y, this.z);\r\n  }\r\n  Length(): number {\r\n    return Math.sqrt(this.x * this.x + this.y * this.y + this.z * this.z);\r\n  }\r\n  Unitize(): NVector3 {\r\n    return this.Normalize();\r\n  }\r\n  IsOverlap(v: NVector3, tor: number = 0.1) {\r\n    if (this.Distance(v) < tor) { return true; } else { return false; }\r\n  }\r\n  Normalize(): NVector3 {\r\n    let len: number = Math.sqrt(this.x * this.x + this.y * this.y + this.z * this.z);\r\n    this.x = this.x / len;\r\n    this.y = this.y / len;\r\n    this.z = this.z / len;\r\n    return new NVector3(this.x, this.y, this.z);\r\n  }\r\n  Distance(v: NVector3): number {\r\n    return NVector3.Distance(new NVector3(this.x, this.y, this.z), v);\r\n  }\r\n  Distance2(v: NVector3): number {\r\n    return NVector3.Distance2(new NVector3(this.x, this.y, this.z), v);\r\n  }\r\n  DotProduct(v: NVector3): number {\r\n    return NVector3.DotProduct(new NVector3(this.x, this.y, this.z), v);\r\n  }\r\n  CrossProduct(v: NVector3): NVector3 {\r\n    return NVector3.CrossProduct(new NVector3(this.x, this.y, this.z), v);\r\n  }\r\n  SquareLength(): number {\r\n    let len: number = NVector3.Length(new NVector3(this.x, this.y, this.z));\r\n    return len * len;\r\n  }\r\n  FadeExp(attr: NVector3, dVal: number) {\r\n    let v = new NVector3(this.x, this.y, this.z);\r\n    v.Sub(attr);\r\n    return Math.exp(-dVal * v.SquareLength());\r\n  }\r\n  GetAngle(): number {\r\n    return Math.atan2(this.y, this.x);\r\n  }\r\n  GetAngleDegree() {\r\n    return 180 * this.GetAngle() / Math.PI;\r\n  }\r\n  ToJSON() {\r\n    /* */\r\n  }\r\n  ToString(): string {\r\n    let t: string = 'x: ' + this.x.toFixed(3).toString() + ' , y: ' + this.y.toFixed(3).toString() + ', z: ' + this.z.toFixed(3).toString();\r\n    return t;\r\n  }\r\n  ToFloat32Array() {\r\n    return new Float32Array([this.x, this.y, this.z]);\r\n  }\r\n}"],"names":["NVector3","static","long","lat","ele","proX","proY","proZ","v","out","x","y","z","a","b","vec","lats","longs","i","length","push","latsSum","longSum","curAng","curLat","curLon","latOrigin","lonOrigin","angles","Array","j","Math","abs","atan","PI","l","k","sum1","sum2","t","s","v0","v1","DeepCopy","v2","sqrt","len","vs","area","n","xOff","yOff","zOff","gV0","gV1","dLat","dLon","sin","cos","atan2","long0","lat0","long1","lat1","KMeterFromGeoGPSPos","addition","dis","KMeterFromGPSPos","lng","Get1KM_Long_ByGeoUnit","la","Get1KM_lat_ByGeoUnit","pt","attractor","strength","falloff","dist","Sub","Length","exp","Unitize","Mult","Explosion","rotor","Origin","DotProduct","Normalize","acos","GetCosAngleByTwoVectors","GetAngleByTwoVectorsRadian","origin","GetAngleByTwoVectors","dot","Number","isNaN","cp","GetCenterVecFromVecs","xx","yy","m","boundary","GetBoundingVecs","GetCloseVec","Distance","p0","p1","vecsBound","OnLine","pp1","Add","IsInsideOfVecs","listOfVec","nv0","nv1","width","height","boundarVecsSub","minX","MAX_VALUE","minY","minZ","maxX","MIN_VALUE","maxY","maxZ","tor","vecs","d","inside","xi","yi","xj","yj","w","h","this","ConvexHull","sort","lower","Cross","pop","upper","O","A","B","ax","ay","az","bx","by","bz","p2","p3","denominator","numerator1","numerator2","onLine0","onLine1","result","p","u","res","tmp","newres","dir","temp","MoveVec","angle","cptToLocal","cptToWorld","MoveVecs","RotateVecs","RotateVec","nv","c","newVes","CheckLineIntersection","eps","v3","between","constructor","alt","isModified","parent","Set","Scale","DivByVal","DivByVec","Negate","Equals","Clone","IsOverlap","Distance2","CrossProduct","SquareLength","FadeExp","attr","dVal","GetAngle","GetAngleDegree","ToJSON","ToString","toFixed","toString","ToFloat32Array","Float32Array"],"sourceRoot":""}