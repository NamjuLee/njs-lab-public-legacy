{"version":3,"file":"static/js/80349.9cc927ed.chunk.js","mappings":"iKAEO,MAAMA,EAGTC,YAAYC,GAAa,KAFlBC,aAAO,OACPC,cAAQ,EAEXC,KAAKF,QAAUG,SAASC,eAAeL,GAGvCG,KAAKF,QAAQK,MAAMC,QAAU,OAC7BJ,KAAKF,QAAQK,MAAME,WAAa,SAEhC,MAAMC,EAAML,SAASM,cAAc,OACnCD,EAAIH,MAAMK,WAAa,OACvBF,EAAIH,MAAMM,YAAc,OACxBH,EAAIH,MAAMO,gBAAkB,OAC5BJ,EAAIH,MAAMQ,MAAQ,SAClBL,EAAIH,MAAMS,OAAS,QAEnBZ,KAAKF,QAAQe,YAAYP,GAKzBN,KAAKD,SAAW,IAAIe,EAASR,EAKjC,CACOS,UAEH,IADAf,KAAKD,SAASgB,UACPf,KAAKF,QAAQkB,kBAChBhB,KAAKF,QAAQmB,YAAYjB,KAAKF,QAAQkB,iBAE9C,EAGG,MAAMF,UAAiBI,EAAAA,GAE1BtB,YAAYU,GACRa,MAAMb,GACNN,KAAKoB,OAAOjB,MAAMkB,SAAW,WAC7BrB,KAAKoB,OAAOjB,MAAMQ,MAAQ,OAC1BX,KAAKoB,OAAOjB,MAAMS,OAAS,OAO3BZ,KAAKsB,OACT,CACOC,OAAOC,GAMV,E","sources":["njslab/Tools/AABB/index.ts"],"sourcesContent":["import { RendererCanvas } from '../../../lib'\r\n\r\nexport class Solution {\r\n    public divHost: HTMLElement;\r\n    public renderer: Renderer;\r\n    constructor(id: string) {\r\n        this.divHost = document.getElementById(id)\r\n\r\n        // Center align\r\n        this.divHost.style.display = 'flex';\r\n        this.divHost.style.alignItems = 'center';\r\n\r\n        const div = document.createElement('div');\r\n        div.style.marginLeft = 'auto';\r\n        div.style.marginRight = 'auto';\r\n        div.style.backgroundColor = '#555';\r\n        div.style.width = '1000px';\r\n        div.style.height = '600px';\r\n\r\n        this.divHost.appendChild(div);\r\n\r\n        // TODO\r\n        // You code goes here for one time operation\r\n\r\n        this.renderer = new Renderer(div);\r\n\r\n        // console.log(this.renderer);\r\n        // !! you should execute it for rendering\r\n        // this.start();\r\n    }\r\n    public destroy() {\r\n        this.renderer.destroy();\r\n        while (this.divHost.lastElementChild) {\r\n            this.divHost.removeChild(this.divHost.lastElementChild);\r\n        }\r\n    }\r\n}\r\n\r\nexport class Renderer extends RendererCanvas {\r\n\r\n    constructor(div: any) {\r\n        super(div);\r\n        this.canvas.style.position = 'relative';\r\n        this.canvas.style.width = '100%';\r\n        this.canvas.style.height = '100%';\r\n\r\n        // TODO\r\n        // You code goes here for one time operation\r\n        // \r\n\r\n\r\n        this.start();\r\n    }\r\n    public render(ctx: CanvasRenderingContext2D): void {\r\n        // TODO\r\n        // You code goes here for the rending loop\r\n\r\n\r\n        // !! can stop render after this frame.\r\n        // this.isStatic = true;\r\n    }\r\n\r\n}\r\n\r\n\r\n\r\n// let div = document.getElementById('div');\r\n// let canvas = document.createElement('canvas');\r\n// canvas.width = 400;\r\n// canvas.height = 400;\r\n// div.append(canvas);\r\n// let ctx: CanvasRenderingContext2D = canvas.getContext('2d');\r\n// ctx.fillStyle = '#ffffff'\r\n// ctx.beginPath();\r\n// ctx.arc(0, 0, 2, 0, 3.14 * 2)\r\n// ctx.closePath();\r\n// ctx.fill();\r\n\r\n\r\n// // https://developer.mozilla.org/en-US/docs/Games/Techniques/2D_collision_detection\r\n// // https://developer.mozilla.org/en-US/docs/Games/Techniques/3D_collision_detection\r\n\r\n// // var rect1 = {x: 5, y: 5, width: 50, height: 50}\r\n// // var rect2 = {x: 20, y: 10, width: 10, height: 10}\r\n\r\n\r\n// class CanvasRect {\r\n// \tx: 5; \r\n// \ty: 5;\r\n// \twidth: 50;\r\n// \theight: 50\r\n// \tisCollidedWithOthers = false;\r\n// \tother: CanvasRect | undefined = undefined;\r\n// \tfillColor = '#000000';\r\n// \tconstructor( param: {x: number, y: number, width: number, height: number} ) {\r\n// \t\tthis.x = param.x;\r\n// \t\tthis.y = param.y;\r\n// \t\tthis.width = param.width;\r\n// \t\tthis.height = param.height;\r\n// \t}\r\n// \tisCollided(rect1: CanvasRect) {\r\n// \t\tif (rect1.x < this.x + this.width &&\r\n// \t\t rect1.x + rect1.width > this.x &&\r\n// \t\t rect1.y < this.y + this.height &&\r\n// \t\t rect1.y + rect1.height > this.y) {\r\n// \t\t\t\tthis.isCollidedWithOthers = true;\r\n// \t\t\t\tthis.other = rect1;\r\n// \t\t\t\trect1.isCollidedWithOthers = true;\r\n// \t\t\t\trect1.other = this;\r\n// \t\t\t\treturn true;\r\n// \t\t\t} else {\r\n// \t\t\t\tthis.isCollidedWithOthers = false;\r\n// \t\t\t\tthis.other = undefined;\r\n// \t\t\t\trect1.isCollidedWithOthers = false;\r\n// \t\t\t\trect1.other = undefined;\r\n// \t\t\treturn false;\r\n// \t\t}\r\n// \t}\r\n// \tpublic render(ctx: CanvasRenderingContext2D){\r\n// \t\tif(this.isCollidedWithOthers) {\r\n// \t\t\tthis.fillColor = '#ff0000';\r\n// \t\t} else {\r\n// \t\t\tthis.fillColor = '#00ff00';\r\n// \t\t}\r\n\t\t\r\n// \t\t// https://www.w3schools.com/tags/canvas_rect.asp\r\n// \t\tctx.beginPath();\r\n// \t\tctx.rect(this.x, this.y, this.width, this.height);\r\n// \t\tctx.fillStyle = this.fillColor;\r\n// \t\tctx.fill();\r\n// \t}\r\n// }\r\n\r\n// let param = {x: 50, y: 5, width: 50, height: 50}\r\n// let rect1 = new CanvasRect(param);\r\n// let rect2 = new CanvasRect({x: 20, y: 10, width: 20, height: 20});\r\n\r\n// console.log(rect1.isCollided(rect2))\r\n\r\n// rect1.render(ctx);\r\n// rect2.render(ctx);\r\n\r\n// console.log(rect1)\r\n// console.log(rect2)"],"names":["Solution","constructor","id","divHost","renderer","this","document","getElementById","style","display","alignItems","div","createElement","marginLeft","marginRight","backgroundColor","width","height","appendChild","Renderer","destroy","lastElementChild","removeChild","RendererCanvas","super","canvas","position","start","render","ctx"],"sourceRoot":""}