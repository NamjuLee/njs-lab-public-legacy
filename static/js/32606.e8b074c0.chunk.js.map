{"version":3,"file":"static/js/32606.e8b074c0.chunk.js","mappings":"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","sources":["njslab/Workshop/workshop-mapping/14_2_PolygonGeoJSON/MouserInteraction.ts"],"sourcesContent":["import { RendererJSAPI } from '../../../../lib'\r\nimport { getJSONFromURL } from 'njscore';\r\n\r\n// https://en.wikipedia.org/wiki/Thematic_map\r\n// https://en.wikipedia.org/wiki/Choropleth_map\r\n\r\n\r\nexport class Solution extends RendererJSAPI {\r\n\r\n    colors: string[] = [];\r\n    polygonsGeo: number [][] = [];\r\n    polygonsScreenPath2D: Path2D [] = [];\r\n    centersScreen: number[][] = [];\r\n\r\n    constructor(id: string) {\r\n        super(id);\r\n    }\r\n    public initPost(): void {\r\n\r\n        // disable interaction with a base map\r\n        // https://developers.arcgis.com/javascript/latest/api-reference/esri-views-MapView.html\r\n        this.mView.on(\"drag\", (event) => {\r\n            event.stopPropagation();\r\n        });\r\n        this.mView.navigation.mouseWheelZoomEnabled = false;\r\n\r\n\r\n        // reposition the center of the basemap\r\n        this.center(-97.893669, 39.176304);\r\n        this.zoom(4);\r\n\r\n\r\n        const canvas = document.createElement('canvas');\r\n        canvas.id = 'layer';\r\n        canvas.width = this.mView.container.clientWidth;\r\n        canvas.height = this.mView.container.clientHeight;\r\n        canvas.style.background= 'rgba(0, 32, 0, 0.6)';\r\n        canvas.style.position = 'absolute';\r\n        canvas.style.pointerEvents = 'none';\r\n        this.mView.container.appendChild(canvas);\r\n\r\n        \r\n        // https://eric.clst.org/tech/usgeojson/\r\n        getJSONFromURL(process.env.PUBLIC_URL + '/static/data/gz_2010_us_050_00_20m.json').then((d) => {\r\n\r\n            const features = d['features'];\r\n\r\n            for(let i = 0 ; i < features.length; ++i) {\r\n                const geometry = features[i]['geometry'];\r\n                // console.log(geometry)\r\n                \r\n                if(geometry['type'] === 'Polygon') {\r\n                    // console.log(geometry['coordinates'].length)\r\n\r\n                    let x = geometry['coordinates'][0][0][0];\r\n                    let y = geometry['coordinates'][0][0][1];\r\n                    const polygon = [];\r\n                    polygon.push(x, y);\r\n\r\n\r\n                    for(let j = 1 ; j < geometry['coordinates'][0].length; ++j) {\r\n                        x = geometry['coordinates'][0][j][0];\r\n                        y = geometry['coordinates'][0][j][1];\r\n                        polygon.push(x, y);\r\n                    }\r\n\r\n                    this.colors.push(`rgba(0, 255, 0, ${Math.random() * 0.2 + 0.3})`);\r\n                    this.polygonsGeo.push(polygon);\r\n\r\n                }\r\n            }\r\n\r\n            // this.start();\r\n        });\r\n    }\r\n    render(ctx: CanvasRenderingContext2D) {\r\n\r\n        for (let i = 0; i < this.polygonsGeo.length; ++i) { \r\n\r\n            let x = this.polygonsGeo[i][0];\r\n            let y = this.polygonsGeo[i][1];\r\n            let projectedScreen = this.toScreen(x, y);\r\n            ctx.beginPath();\r\n            ctx.moveTo(projectedScreen[0], projectedScreen[1]);\r\n\r\n            let polygonScreenPath = new Path2D();\r\n            polygonScreenPath.moveTo(projectedScreen[0], projectedScreen[1]);\r\n\r\n            let cx = projectedScreen[0];\r\n            let cy = projectedScreen[1];\r\n\r\n            let count = 1;\r\n\r\n            for (let j = 2; j < this.polygonsGeo[i].length; j += 2) { \r\n                x = this.polygonsGeo[i][j];\r\n                y = this.polygonsGeo[i][j+1];\r\n                projectedScreen = this.toScreen(x, y);\r\n                ctx.lineTo(projectedScreen[0], projectedScreen[1]);\r\n                \r\n                polygonScreenPath.lineTo(projectedScreen[0], projectedScreen[1]);\r\n\r\n                cx += projectedScreen[0];\r\n                cy += projectedScreen[1];\r\n\r\n                count++;\r\n            }\r\n            ctx.closePath()\r\n            ctx.fillStyle = this.colors[i];\r\n            ctx.fill();\r\n\r\n            \r\n            renderPoint(ctx, cx / count, cy / count, 1, '#0fff0f');\r\n\r\n            this.centersScreen.push([cx / count, cy / count, count]);\r\n\r\n            polygonScreenPath.closePath();\r\n            this.polygonsScreenPath2D.push(polygonScreenPath);\r\n\r\n        }\r\n\r\n    //     console.log('done!');\r\n        this.isStatic = true;\r\n    }\r\n    public mouseMove(x: number, y: number) {\r\n        this.ctx.lineWidth = 0;\r\n\r\n        let closestPtID = -1;\r\n        let maxDis = 100000;\r\n        for(let i = 0; i < this.centersScreen.length; ++i) {\r\n            const centroidScreen = this.centersScreen[i];\r\n            // console.log(centroidScreen)\r\n            const theDis = getDistance(x, y, centroidScreen[0], centroidScreen[1]);\r\n            if (theDis < maxDis) {\r\n                maxDis = theDis;\r\n                closestPtID = i;\r\n                \r\n            }\r\n        }\r\n\r\n    //     console.log('id:', closestPtID);\r\n        this.ctx.lineWidth = 0.2;\r\n        if (closestPtID !== -1 && closestPtID <= this.polygonsScreenPath2D.length) {\r\n            \r\n            const polygonScreen = this.polygonsScreenPath2D[closestPtID];\r\n            this.ctx.strokeStyle = '#0f0';\r\n            this.ctx.stroke(polygonScreen);\r\n        }\r\n    }\r\n}\r\n\r\nconst renderPoint = (ctx: CanvasRenderingContext2D, x: number, y: number, s: number, color: string) => {\r\n    ctx.fillStyle = color;\r\n    ctx.beginPath();\r\n    ctx.arc(x, y, s, 0, Math.PI * 2);\r\n    ctx.closePath();\r\n    ctx.fill();\r\n}\r\n\r\nconst getDistance = (x0: number, y0: number, x1:number, y1:number): number => {\r\n    return Math.sqrt((x0 - x1) * (x0 - x1) + (y0 - y1) * (y0 - y1));\r\n}"],"names":["Solution","RendererJSAPI","constructor","id","super","colors","polygonsGeo","polygonsScreenPath2D","centersScreen","initPost","this","mView","on","event","stopPropagation","navigation","mouseWheelZoomEnabled","center","zoom","canvas","document","createElement","width","container","clientWidth","height","clientHeight","style","background","position","pointerEvents","appendChild","getJSONFromURL","process","then","d","features","i","length","geometry","x","y","polygon","push","j","Math","random","render","ctx","projectedScreen","toScreen","beginPath","moveTo","polygonScreenPath","Path2D","cx","cy","count","lineTo","closePath","fillStyle","fill","renderPoint","isStatic","mouseMove","lineWidth","closestPtID","maxDis","centroidScreen","theDis","getDistance","polygonScreen","strokeStyle","stroke","s","color","arc","PI","x0","y0","x1","y1","sqrt"],"sourceRoot":""}