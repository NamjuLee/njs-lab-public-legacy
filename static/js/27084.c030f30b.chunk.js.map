{"version":3,"file":"static/js/27084.c030f30b.chunk.js","mappings":"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","sources":["njslab/Infrastructure/WebGPU/WebGPU_05_rect_single_buffer/shaders/shaders.ts","njslab/Infrastructure/WebGPU/WebGPU_05_rect_single_buffer/index.ts"],"sourcesContent":["export const CreateGPUBufferUint = (device:GPUDevice, data:Uint32Array, \n    usageFlag:GPUBufferUsageFlags = GPUBufferUsage.INDEX | GPUBufferUsage.COPY_DST) => {\n    const buffer = device.createBuffer({\n        size: data.byteLength,\n        usage: usageFlag,\n        mappedAtCreation: true\n    });\n    new Uint32Array(buffer.getMappedRange()).set(data);\n    buffer.unmap();\n    return buffer;\n}\n\nexport const CreateGPUBuffer = (device:GPUDevice, data:Float32Array, \n    usageFlag:GPUBufferUsageFlags = GPUBufferUsage.VERTEX | GPUBufferUsage.COPY_DST) => {\n    const buffer = device.createBuffer({\n        size: data.byteLength,\n        usage: usageFlag,\n        mappedAtCreation: true\n    });\n    new Float32Array(buffer.getMappedRange()).set(data);\n    buffer.unmap();\n    return buffer;\n}\n\nexport const Shaders = () => {\n    const vertex = `\n        struct Output {\n            @builtin(position) Position : vec4<f32>,\n            @location(0) vColor : vec4<f32>,\n        };\n        @vertex\n        fn main(@location(0) pos: vec4<f32>, @location(1) color: vec4<f32>) -> Output {\n            var output: Output;\n            output.Position = pos;\n            output.vColor = color;\n            return output;\n        }`;\n\n    const fragment = `\n        @fragment\n        fn main(@location(0) vColor: vec4<f32>) -> @location(0) vec4<f32> {\n            return vColor;\n        }`;\n\n    return {\n        vertex, \n        fragment\n    };\n}\n\nexport const ShadersOld = () => {\n    const vertex = `\n        [[location(0)]] var<in> position : vec4<f32>;\n        [[location(1)]] var<in> color : vec4<f32>;\n        [[builtin(position)]] var<out> Position : vec4<f32>;\n        [[location(0)]] var<out> vColor : vec4<f32>;\n\n        [[stage(vertex)]]\n        fn main() -> void {\n            Position = position;\n            vColor = color;\n            return;\n        }`;\n\n    const fragment = `\n        [[location(0)]] var<in> vColor : vec4<f32>;\n        [[location(0)]] var<out> fragColor : vec4<f32>;\n\n        [[stage(fragment)]]\n        fn main() -> void {\n            fragColor = vColor;\n            return;\n        }`;\n\n    return {\n        vertex, \n        fragment\n    };\n}\n","// import positionVert from './shaders/position.vert.wgsl?raw';\r\n// import colorFrag from './shaders/color.frag.wgsl';\r\n\r\nimport { Shaders, CreateGPUBufferUint, CreateGPUBuffer } from './shaders/shaders';\r\nimport shader from './shaders/shader.wgsl';\r\n\r\nconst vertex = new Float32Array([\r\n    0.0, 0.5, 0.0,\r\n    -0.5, -0.5, 0.0,\r\n    0.5, -0.5, 0.0\r\n])\r\nconst vertexCount = 3\r\n\r\nexport { vertex, vertexCount }\r\n\r\nconst positionVert = `\r\n@vertex\r\nfn main(@location(0) position : vec3<f32>) -> @builtin(position) vec4<f32> {\r\n    return vec4<f32>(position, 1.0);\r\n}\r\n`\r\nconst colorFrag = `\r\n@group(0) @binding(0) var<uniform> color : vec4<f32>;\r\n\r\n@fragment\r\nfn main() -> @location(0) vec4<f32> {\r\n    return color;\r\n}\r\n`\r\n\r\nexport class Solution {\r\n    divHost: HTMLElement;\r\n    canvas: HTMLCanvasElement;\r\n    ctx: GPUCanvasContext;\r\n    device: GPUDevice;\r\n    format: GPUTextureFormat;\r\n    size: any;\r\n    pipelineObj: any;\r\n    constructor(id: string) {\r\n        this.divHost = document.getElementById(id);\r\n\r\n        //     console.log(id, 'webGPU', navigator.gpu);\r\n        this.canvas = document.createElement('canvas');\r\n        this.divHost.appendChild(this.canvas);\r\n\r\n        this.initWebGPU();\r\n    }\r\n    async initWebGPU() {\r\n        if (!navigator.gpu) { throw new Error('Not Support WebGPU'); }\r\n\r\n        const adapter = await navigator.gpu.requestAdapter({\r\n            powerPreference: 'high-performance'\r\n            // powerPreference: 'low-power'\r\n        })\r\n\r\n        if (!adapter) { throw new Error('No Adapter Found'); }\r\n\r\n        const device = await adapter.requestDevice()\r\n        this.ctx = this.canvas.getContext('webgpu') as GPUCanvasContext\r\n        // @ts-ignore\r\n        const format = navigator.gpu.getPreferredCanvasFormat ? navigator.gpu.getPreferredCanvasFormat() : this.ctx.getPreferredFormat(adapter)\r\n        const devicePixelRatio = window.devicePixelRatio || 1\r\n        this.canvas.width = this.divHost.clientWidth;\r\n        this.canvas.height = this.divHost.clientHeight;\r\n        this.ctx.configure({\r\n            // json specific format when key and value are the same\r\n            device, format,\r\n            // prevent chrome warning\r\n            alphaMode: 'opaque'\r\n        })\r\n\r\n        this.size = { width: this.canvas.width, height: this.canvas.height }\r\n        this.device = device;\r\n        this.format = format;\r\n\r\n        this.initPipeline(this.device, this.format);\r\n    }\r\n    async initPipeline(device: GPUDevice, format: GPUTextureFormat, primitiveType = 'triangle-list') { // triangle-list , triangle-strip\r\n        const vertexData = new Float32Array([\r\n            //position    //color\r\n            -0.5, -0.5, 1, 0, 0,  // vertex a\r\n            0.5, -0.5, 0, 1, 0,  // vertex b\r\n            -0.5, 0.5, 1, 1, 0,  // vertex d\r\n            -0.5, 0.5, 1, 1, 0,  // vertex d\r\n            0.5, -0.5, 0, 1, 0,  // vertex b\r\n            0.5, 0.5, 0, 0, 1   // vertex c\r\n        ]);\r\n\r\n        const vertexBuffer = CreateGPUBuffer(device, vertexData);\r\n\r\n        const shader = Shaders();\r\n\r\n        const pipeline = device.createRenderPipeline({\r\n            layout: 'auto',\r\n            vertex: {\r\n                module: device.createShaderModule({\r\n                    code: shader.vertex\r\n                }),\r\n                entryPoint: \"main\",\r\n                //@ts-ignore\r\n                buffers: [\r\n                    {\r\n                        arrayStride: 4 * (2 + 3),\r\n                        attributes: [\r\n                            {\r\n                                shaderLocation: 0,\r\n                                format: 'float32x2',\r\n                                offset: 0\r\n                            },\r\n                            {\r\n                                shaderLocation: 1,\r\n                                format: 'float32x3',\r\n                                offset: 8\r\n                            }\r\n                        ]\r\n                    }\r\n                ]\r\n            },\r\n            fragment: {\r\n                module: device.createShaderModule({\r\n                    code: shader.fragment\r\n                }),\r\n                entryPoint: \"main\",\r\n                targets: [\r\n                    {\r\n                        format: this.format as GPUTextureFormat\r\n                    }\r\n                ]\r\n            },\r\n            primitive: {\r\n                topology: \"triangle-list\",\r\n            }\r\n        });\r\n\r\n        const commandEncoder = device.createCommandEncoder();\r\n        const textureView = this.ctx.getCurrentTexture().createView();\r\n        const renderPass = commandEncoder.beginRenderPass({\r\n            //@ts-ignore\r\n            colorAttachments: [{\r\n                view: textureView,\r\n                clearValue: { r: 0.0, g: 0.0, b: 0.0, a: 1.0 }, //background color\r\n                loadOp: 'clear',\r\n                storeOp: 'store'\r\n            }]\r\n        });\r\n        renderPass.setPipeline(pipeline);\r\n        renderPass.setVertexBuffer(0, vertexBuffer);\r\n        renderPass.draw(6);\r\n        renderPass.end();\r\n\r\n        device.queue.submit([commandEncoder.finish()]);\r\n\r\n    }\r\n    public destroy() {\r\n        this.device.destroy();\r\n        while (this.divHost.lastElementChild) {\r\n            this.divHost.removeChild(this.divHost.lastElementChild);\r\n        }\r\n    }\r\n}"],"names":["vertex","Float32Array","vertexCount","Solution","constructor","id","divHost","canvas","ctx","device","format","size","pipelineObj","this","document","getElementById","createElement","appendChild","initWebGPU","async","navigator","gpu","Error","adapter","requestAdapter","powerPreference","requestDevice","getContext","getPreferredCanvasFormat","getPreferredFormat","window","devicePixelRatio","width","clientWidth","height","clientHeight","configure","alphaMode","initPipeline","vertexBuffer","data","usageFlag","GPUBufferUsage","VERTEX","COPY_DST","buffer","createBuffer","byteLength","usage","mappedAtCreation","getMappedRange","set","unmap","CreateGPUBuffer","shader","fragment","pipeline","createRenderPipeline","layout","module","createShaderModule","code","entryPoint","buffers","arrayStride","attributes","shaderLocation","offset","targets","primitive","topology","commandEncoder","createCommandEncoder","textureView","getCurrentTexture","createView","renderPass","beginRenderPass","colorAttachments","view","clearValue","r","g","b","a","loadOp","storeOp","setPipeline","setVertexBuffer","draw","end","queue","submit","finish","destroy","lastElementChild","removeChild"],"sourceRoot":""}