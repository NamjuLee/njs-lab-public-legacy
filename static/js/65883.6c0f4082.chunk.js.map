{"version":3,"file":"static/js/65883.6c0f4082.chunk.js","mappings":"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","sources":["njslab/Project/Project_03_SlowZone/01_JSAPI/Tint/FilterGLViewDarkForDarken.ts","njslab/Project/Project_03_SlowZone/03_SlowZone/Drawing/index.ts","njslab/Project/Project_03_SlowZone/03_SlowZone/DataTwitter.ts","njslab/Project/Project_03_SlowZone/03_SlowZone/UI/index.ts","njslab/Project/Project_03_SlowZone/03_SlowZone/index.ts"],"sourcesContent":["import { NVector3, GLShaderCommon } from '../../../../../lib/NJSCore';\n\n// import { Mat3 } from '../../AppCore/GLUtility/Mat3';\n\nexport class FilterGLViewDarkForDarken {\n\n    gl: WebGLRenderingContext;\n    program: WebGLProgram;\n    fragmentShader: WebGLShader;\n    vertexShader: WebGLShader;\n    matrixLocation: WebGLProgram;\n    posBuffer: WebGLBuffer;\n    colBuffer: WebGLBuffer;\n    vertexs: Float32Array;\n\n    posLocAtt: number;\n    colLocAtt: number;\n    matLoc: WebGLUniformLocation;\n    colLoc: WebGLUniformLocation;\n    cVecLoc: WebGLUniformLocation;\n    mouseLoc: WebGLUniformLocation;\n    timeGL: WebGLUniformLocation;\n    // startTime: number;\n    // randomSeed: number;\n\n    vShader: WebGLShader;\n    fShader: WebGLShader;\n\n    v = `\n    attribute vec2 a_position;\n    attribute vec4 a_color;\n    \n    varying vec4 f_color;\n\n    void main() {\n\n        vec2 mouse_distance = vec2(0,0) - (a_position.xy /vec2(2,2));\n        float red = 1.0 - length(mouse_distance);\n        f_color = vec4(a_position, 0, 1.0);\n    \n        // float dis = distance(vec2(a_position.xy), vec2(0,0));\n\n        // f_color = vec4(dis * 0.6, 0,0,1);\n        gl_Position = vec4( a_position, 0, 1);\n    }\n    `;\n\n    f = `\n    precision highp float;\n\n    varying vec4 f_color;\n    \n    void main() {\n        vec2 mouse_distance = vec2(0,0) - (f_color.xy /vec2(5,5));\n\n        float col =  length(mouse_distance*5.);\n        float val = 1.0 - length(mouse_distance*8.);\n        \n        gl_FragColor = vec4(0.19,0.19,0.19, col);\n\n    }\n    `;\n\n    positionAttribLocation: WebGLProgram;\n    colorAttribLocation: WebGLProgram;\n    translation: NVector3;\n    color: number[];\n    colArray: Float32Array;\n\n    constructor(gl: WebGLRenderingContext, xt: number = 100, yt: number = 100, zt: number = 0, xs: number = 1, ys: number = 1, zs: number = 1) {\n        this.gl = gl;\n        // this.translation = new NVector3(xt, yt, zt);\n        // this.angleInRadians = 0;\n        // this.scale = new NVector3(xs, ys, zs);\n        this.color = [Math.random(), Math.random(), Math.random(), 1];\n        this.InitShader();\n    }\n    InitShader() {\n        // let vShader = GLUtility.CreateShaderFromPath(this.gl, this.gl.VERTEX_SHADER,'/shader/vsCanvas.glsl');\n        // let fShader = GLUtility.CreateShaderFromPath(this.gl, this.gl.FRAGMENT_SHADER, '/shader/fsColor.glsl');\n\n        let vShader = GLShaderCommon.CreateShader(this.gl, this.gl.VERTEX_SHADER, this.v); // '/shader/vsCanvas.glsl');\n        let fShader = GLShaderCommon.CreateShader(this.gl, this.gl.FRAGMENT_SHADER, this.f); // '/shader/fsColor.glsl');\n\n        if (vShader && fShader) {\n            this.vShader = vShader;\n            this.fShader = fShader;\n            let program = GLShaderCommon.CreateProgram(this.gl, vShader, fShader);\n            if (program) { this.program = program; }\n        }\n\n        // this.InitVerext();\n    }\n    Render(gl: WebGLRenderingContext) {\n\n        let col = [0.1, 0, 0, 1];\n\n        this.vertexs = new Float32Array([\n            // left column\n            -1, -1, 1, 1, 1, 1,\n            - 1, 1, col[0], col[1], col[2], col[3],\n            1, -1, col[0], col[1], col[2], col[3],\n\n            -1, 1, 1, 1, 1, 1,\n            1, -1, col[0], col[1], col[2], col[3],\n            1, 1, col[0], col[1], col[2], col[3],\n\n        ]);\n\n        this.posBuffer = this.gl.createBuffer() as WebGLBuffer;\n        this.gl.bindBuffer(this.gl.ARRAY_BUFFER, this.posBuffer);\n        this.gl.bufferData(this.gl.ARRAY_BUFFER, new Float32Array(this.vertexs), gl.STATIC_DRAW);\n\n        this.posLocAtt = this.gl.getAttribLocation(this.program, 'a_position');\n        // Tell the attribute how to get data out of posBuffer (ARRAY_BUFFER)\n        let size = 2;          // 2 components per iteration\n        let type = gl.FLOAT;   // the data is 32bit floats\n        let normalize = false; // don't normalize the data\n        let stride = 6 * Float32Array.BYTES_PER_ELEMENT; // 0 = move forward size * sizeof(type) each iteration to get the next position\n        let offset = 0;        // start at the beginning of the buffer\n        gl.vertexAttribPointer(this.posLocAtt, size, type, normalize, stride, offset);\n        gl.enableVertexAttribArray(this.posLocAtt);\n\n        // this.colLocAtt = this.gl.getAttribLocation(this.program, 'a_color');\n        // size = 4;          // 2 components per iteration\n        // type = gl.FLOAT;   // the data is 32bit floats\n        // normalize = false; // don't normalize the data\n        // stride = 6 * Float32Array.BYTES_PER_ELEMENT; // 0 = move forward size * sizeof(type) each iteration to get the next position\n        // offset = 2 * Float32Array.BYTES_PER_ELEMENT;        // start at the beginning of the buffer\n        // gl.vertexAttribPointer(this.colLocAtt, size, type, normalize, stride, offset);\n        // gl.enableVertexAttribArray(this.colLocAtt);\n\n        gl.useProgram(this.program);\n        let primitiveType = gl.TRIANGLES; // LINE_LOOP; // gl.TRIANGLE_STRIP;\n        offset = 0;\n        let count = 6; // this.vertexs.length * 0.5;\n        gl.drawArrays(primitiveType, offset, count);\n\n    }\n}","import * as THREE from 'three';\r\nimport { getJSONFromURL, hexToRGBANormalized, Vector3, getRandomHex } from 'njscore';\r\nimport { Solution } from '..';\r\nimport { PARAM } from 'App';\r\nexport class Drawing {\r\n\r\n    solution: Solution;\r\n\r\n    streetOSM: any = [];\r\n    routesTreated: any = [];\r\n    routesControl: any = [];\r\n    zones30: any = [];\r\n    zones15: any = [];\r\n    routesMain: any = [];\r\n\r\n    meshTwitter: THREE.Points;\r\n    meshStreetOSM: THREE.LineSegments;\r\n    meshNode: THREE.Points;\r\n    meshTreated: THREE.LineSegments;\r\n    meshControl: THREE.LineSegments;\r\n    meshMainStreet: THREE.LineSegments;\r\n    meshZones30: THREE.Mesh[];\r\n    meshPolygon: THREE.Group;\r\n\r\n    polygonRingID = {};\r\n    polygonRings: THREE.Mesh;\r\n    yearForPolygonMesh: {};\r\n\r\n    selectedYear = 2009;\r\n\r\n    constructor(solution: Solution) {\r\n        this.solution = solution;\r\n\r\n        // const path = '/static/research/slow-zone/';\r\n        // getJSONFromURL(process.env.PUBLIC_URL + path + 'street_osm.geojson').then((data) => {\r\n        getJSONFromURL('https://raw.githubusercontent.com/NamjuLee/data/master/Paris/street_osm.geojson').then((data) => {\r\n            for (let i = 0; i < data['features'].length; ++i) {\r\n                this.streetOSM.push(data['features'][i]['geometry']['coordinates']);\r\n            }\r\n\r\n            let color = [0, 1, 1];\r\n            if (this.solution.PARAM.colorSOMStreet) {\r\n                color = hexToRGBANormalized('#'+this.solution.PARAM.colorSOMStreet);\r\n                this.solution.ui.isActive_streetOSM = true;\r\n            }\r\n\r\n            this.meshStreetOSM = this.LineSeg(this.streetOSM, color, -0.01);\r\n            this.solution.start();\r\n        });\r\n        getJSONFromURL('https://raw.githubusercontent.com/NamjuLee/data/master/Paris/Paris-main-st.geojson').then((data) => {\r\n            for (let i = 0; i < data['features'].length; ++i) {\r\n                this.routesMain.push(data['features'][i]['geometry']['coordinates']);\r\n            }\r\n\r\n            let color = [0, 1, 1];\r\n            if (this.solution.PARAM.colorMainStreet) {\r\n                color = hexToRGBANormalized('#'+this.solution.PARAM.colorMainStreet);\r\n                this.solution.ui.isActiveMainStreet = true;\r\n            }\r\n\r\n            this.meshMainStreet = this.LineSeg(this.routesMain, color);\r\n\r\n        });\r\n\r\n        getJSONFromURL('https://raw.githubusercontent.com/NamjuLee/data/master/Paris/treated-st.geojson').then((data) => {\r\n            for (let i = 0; i < data['features'].length; ++i) {\r\n                this.routesTreated.push(data['features'][i]['geometry']['coordinates']);\r\n            }\r\n\r\n            let color = [0, 1, 1];\r\n            if (this.solution.PARAM.colorTreatedStreet) {\r\n                color = hexToRGBANormalized('#'+this.solution.PARAM.colorTreatedStreet);\r\n                this.solution.ui.isActive_treated_st = true;\r\n            }\r\n\r\n            this.meshTreated = this.LineSeg(this.routesTreated, color);\r\n        });\r\n\r\n        getJSONFromURL('https://raw.githubusercontent.com/NamjuLee/data/master/Paris/control-st.geojson').then((data) => {\r\n            for (let i = 0; i < data['features'].length; ++i) {\r\n                this.routesControl.push(data['features'][i]['geometry']['coordinates']);\r\n            }\r\n\r\n            let color = [0, 1, 1];\r\n            if (this.solution.PARAM.colorControlStreet) {\r\n                color = hexToRGBANormalized('#'+this.solution.PARAM.colorControlStreet);\r\n                this.solution.ui.isActive_control_st = true;\r\n            }\r\n\r\n            this.meshControl = this.LineSeg(this.routesControl, color);\r\n        });\r\n\r\n        // const path = '/static/data/';\r\n        // getJSONFromURL(process.env.PUBLIC_URL + path + '30speedlimit_zones_pre2015.geojson').then((data) => {\r\n        getJSONFromURL('https://raw.githubusercontent.com/NamjuLee/data/master/Paris/zones-30.geojson').then((data) => {\r\n            for (let i = 0; i < data['features'].length; ++i) {\r\n                this.zones30.push(data['features'][i]['geometry']['coordinates']);\r\n            }\r\n\r\n            let color = [0, 1, 1];\r\n            if (this.solution.PARAM.colorZones30) {\r\n                color = hexToRGBANormalized('#'+this.solution.PARAM.colorZones30);\r\n                // console.log(color)\r\n                this.solution.ui.isActive_zones_30 = true;\r\n            }\r\n\r\n            this.meshZones30 = this.renderMultiPolygon(this.solution.scene, this.zones30, color);\r\n        });\r\n\r\n        let thePath  = 'https://raw.githubusercontent.com/NamjuLee/data/master/Paris/zones_15_innerouter_byyr_rings.json';\r\n        if (PARAM.urlZone) {\r\n            thePath = PARAM.urlZone;\r\n        }\r\n\r\n        getJSONFromURL(thePath).then((geoJSON) => {\r\n\r\n            // console.log(geoJSON);\r\n\r\n            // for (let i = 0; i < geoJSON['features'].length; ++i) {\r\n            //     this.zones15.push(geoJSON['features'][i]['geometry']['coordinates']);\r\n            // }\r\n\r\n            let color = [0, 1, 1];\r\n            if (this.solution.PARAM.colorYearPolygon) {\r\n                color = hexToRGBANormalized('#'+this.solution.PARAM.colorYearPolygon); \r\n            }\r\n\r\n            if (this.solution.PARAM.year) {\r\n                this.selectedYear = this.solution.PARAM.year; \r\n            }\r\n\r\n            this.polygonRings = this.renderCustomPolygon(geoJSON, color);\r\n            this.updateYear(this.selectedYear);\r\n\r\n\r\n            // console.log(geoJSON);\r\n\r\n            // this.meshAreaGon = renderCustomPolygon(this.scene, geoJSON);\r\n\r\n        });\r\n\r\n    }\r\n    public updateYear(year: number) {\r\n        this.selectedYear = year + 1;\r\n        if (this.yearForPolygonMesh !== undefined) {\r\n            for (let i = 2010; i < 2016; ++i) {\r\n\r\n                const ms = this.yearForPolygonMesh[i]; // as THREE.Mesh;\r\n                // console.log(ms);\r\n                ms.forEach(m => {\r\n                    m = m as THREE.Mesh;\r\n                    //     console.log(m)\r\n                    if (i < this.selectedYear) {\r\n                        m.visible = true;\r\n                        //     console.log('active', i)\r\n                    } else {\r\n                        m.visible = false;\r\n                        //     console.log('deactive', i)\r\n                    }\r\n                });\r\n\r\n\r\n\r\n            }\r\n            // this.polygonRings.\r\n        }\r\n    }\r\n    public updateColor(c: string) {\r\n        //     console.log(c);\r\n        const col = hexToRGBANormalized(c);\r\n\r\n        //     console.log(col)\r\n\r\n        if (this.meshMainStreet !== undefined) {\r\n            if (this.solution.ui.isActiveMainStreet) {\r\n                let mat = this.meshMainStreet.material as THREE.LineBasicMaterial;\r\n                mat.color.r = col[0]; mat.color.g = col[1]; mat.color.b = col[2];\r\n            }\r\n        }\r\n        if (this.meshStreetOSM !== undefined) {\r\n            if (this.solution.ui.isActive_streetOSM) {\r\n                let mat = this.meshStreetOSM.material as THREE.LineBasicMaterial;\r\n                mat.color.r = col[0]; mat.color.g = col[1]; mat.color.b = col[2];\r\n            }\r\n        }\r\n        if (this.meshTreated !== undefined) {\r\n            if (this.solution.ui.isActive_treated_st) {\r\n                let mat = this.meshTreated.material as THREE.LineBasicMaterial;\r\n                mat.color.r = col[0]; mat.color.g = col[1]; mat.color.b = col[2];\r\n            }\r\n        }\r\n        if (this.meshControl !== undefined) {\r\n            if (this.solution.ui.isActive_control_st) {\r\n                let mat = this.meshControl.material as THREE.LineBasicMaterial;\r\n                mat.color.r = col[0]; mat.color.g = col[1]; mat.color.b = col[2];\r\n            }\r\n        }\r\n        if (this.meshZones30 !== undefined) {\r\n            if (this.solution.ui.isActive_zones_30) {\r\n                this.meshZones30.forEach((m) => {\r\n                    let mat = m.material as THREE.LineBasicMaterial;\r\n                    mat.color.r = col[0]; mat.color.g = col[1]; mat.color.b = col[2];\r\n                })\r\n            }\r\n        }\r\n\r\n\r\n        if (this.solution.dataTwitter !== undefined) {\r\n            if (this.solution.ui.isActive_twitter) {\r\n                this.solution.dataTwitter.updateColor(col[0], col[1], col[2]);\r\n            }\r\n        }\r\n\r\n\r\n    }\r\n    public update() {\r\n\r\n        // return;\r\n\r\n        if (this.meshMainStreet !== undefined) {\r\n            if (this.solution.ui.isActiveMainStreet) { this.meshMainStreet.visible = true; } else { this.meshMainStreet.visible = false; }\r\n        }\r\n\r\n        if (this.meshStreetOSM !== undefined) {\r\n            if (this.solution.ui.isActive_streetOSM) { this.meshStreetOSM.visible = true; } else { this.meshStreetOSM.visible = false; }\r\n        }\r\n\r\n        if (this.meshTreated !== undefined) {\r\n            if (this.solution.ui.isActive_treated_st) { this.meshTreated.visible = true; } else { this.meshTreated.visible = false; }\r\n        }\r\n\r\n        if (this.meshControl !== undefined) {\r\n            if (this.solution.ui.isActive_control_st) { this.meshControl.visible = true; } else { this.meshControl.visible = false; }\r\n        }\r\n\r\n        if (this.meshZones30 !== undefined) {\r\n            if (this.solution.ui.isActive_zones_30) {\r\n                this.meshZones30.forEach((m) => {\r\n                    m.visible = true;\r\n                })\r\n            } else {\r\n                this.meshZones30.forEach((m) => {\r\n                    m.visible = false;\r\n                })\r\n            }\r\n        }\r\n\r\n\r\n\r\n        if (this.solution.dataTwitter.mesh !== undefined) {\r\n            if (this.solution.ui.isActive_twitter) { this.solution.dataTwitter.mesh.visible = true; } else { this.solution.dataTwitter.mesh.visible = false; }\r\n        }\r\n\r\n    }\r\n\r\n    // ......................................... area polygon 2010 - 2015\r\n    public renderCustomPolygon(json: any, colorArray: number[]) {\r\n        // console.log(json.value_mn_rescale);\r\n\r\n\r\n        const yearForPolygonID = {}\r\n\r\n        for (const [key, value] of Object.entries(json.yr)) {\r\n            const theValue = value as string;\r\n            if (theValue in yearForPolygonID) {\r\n                yearForPolygonID[theValue].push(+key)\r\n            } else {\r\n                yearForPolygonID[theValue] = [+key]\r\n            }\r\n        }\r\n\r\n        const yearForPolygonMesh = {}\r\n\r\n        //     console.log(yearForPolygonID)\r\n        this.polygonRingID = yearForPolygonID;\r\n\r\n        let count = 0;\r\n\r\n        for (const [theKey, theIDs] of Object.entries(this.polygonRingID)) {\r\n\r\n            //     console.log(theKey, theIDs)\r\n\r\n\r\n\r\n            const meshes = [];\r\n            //@ts-ignore\r\n            for (let k = 0; k < theIDs.length; ++k) {\r\n                const id = theIDs[k];\r\n\r\n                const value = json.value_mn_rescale[id];\r\n                // console.log(value);\r\n\r\n                const outPTs = []\r\n                for (let i = 0; i < json.outer_ring[id].length; ++i) {\r\n                    const [x, y] = this.solution.projectionToMercator(json.outer_ring[id][i][0], json.outer_ring[id][i][1]);\r\n                    outPTs.push(new Vector3(x, y))\r\n                }\r\n\r\n                const shape = new THREE.Shape(outPTs);\r\n                for (let i = 0; i < json.inner_rings[id].length; ++i) {\r\n\r\n                    const holePath = new THREE.Path();\r\n\r\n                    let [x, y] = this.solution.projectionToMercator(json.inner_rings[id][i][0][0], json.inner_rings[id][i][0][1]);\r\n                    holePath.moveTo(x, y);\r\n\r\n                    for (let j = 1; j < json.inner_rings[id][i].length; ++j) {\r\n                        let [x, y] = this.solution.projectionToMercator(json.inner_rings[id][i][j][0], json.inner_rings[id][i][j][1]);\r\n                        holePath.lineTo(x, y);\r\n                        // outPTs.push(new Vector3(x, y))\r\n                    }\r\n\r\n                    shape.holes.push(holePath)\r\n                }\r\n\r\n                let geometry = new THREE.ShapeGeometry(shape);\r\n                // console.log(count)\r\n                // console.log(geometry)\r\n\r\n                // const col = getRandomHex().split('#')[1];\r\n                // console.log(col)\r\n\r\n                const color = new THREE.Color(0xffffff);\r\n                color.setRGB(colorArray[0], colorArray[1], colorArray[2])\r\n\r\n                let mat = new THREE.MeshBasicMaterial({\r\n                    side: THREE.DoubleSide, color: color,\r\n                    transparent: true,\r\n                    opacity: 0.85\r\n                });\r\n\r\n                let mesh = new THREE.Mesh(geometry, mat);\r\n                mesh.translateY(count++ * 0.0001);\r\n                mesh.visible = true;\r\n                this.solution.scene.add(mesh);\r\n                mesh.rotateOnAxis(new THREE.Vector3(1, 0, 0), Math.PI * 0.5);\r\n                meshes.push(mesh);\r\n            }\r\n\r\n\r\n            const theValue = theKey as string;\r\n            yearForPolygonMesh[theValue] = meshes;\r\n            // break\r\n\r\n        }\r\n\r\n        this.yearForPolygonMesh = yearForPolygonMesh;\r\n        //     console.log(yearForPolygonMesh);\r\n        return undefined;\r\n    }\r\n\r\n    // ----------------------------- polygon for 30 zone\r\n    public renderMultiPolygon = (scene: THREE.Scene, paths: any, colorArray: number[]) => {\r\n\r\n        const meshes = [];\r\n        const positions = [];\r\n\r\n        for (let multi = 0; multi < paths.length; ++multi) {\r\n            const multiPolygon = paths[multi];\r\n\r\n            for (let polyI = 0; polyI < multiPolygon.length; ++polyI) {\r\n                const polygon = multiPolygon[polyI];\r\n\r\n                if (polygon.length === 1) {\r\n                    const thePolygon = polygon[0];\r\n\r\n                    const shape = [];\r\n\r\n                    for (let i = 0; i < thePolygon.length; ++i) {\r\n\r\n                        const [x, y] = this.solution.projectionToMercator(thePolygon[i][0], thePolygon[i][1]);\r\n\r\n                        positions.push(x, 0, y)\r\n\r\n                        shape.push(new THREE.Vector2(x, y));\r\n                    }\r\n\r\n\r\n                    let geometry = new THREE.ShapeGeometry(new THREE.Shape(shape));\r\n                    let mat = new THREE.MeshBasicMaterial({\r\n                        side: THREE.DoubleSide, color: new THREE.Color(colorArray[0], colorArray[1], colorArray[2]),\r\n                        transparent: true,\r\n                        opacity: 0.3\r\n                    });\r\n                    let mesh = new THREE.Mesh(geometry, mat);\r\n                    scene.add(mesh);\r\n                    meshes.push(mesh);\r\n                    mesh.rotateOnAxis(new THREE.Vector3(1, 0, 0), Math.PI * 0.5);\r\n\r\n\r\n                }\r\n            }\r\n        }\r\n        return meshes;\r\n    };\r\n    public LineSeg(paths: any, color: number[], offsetZ = 0) {\r\n        const geometry = new THREE.BufferGeometry();\r\n        const material = new THREE.LineBasicMaterial();\r\n        material.color.r = color[0];\r\n        material.color.g = color[1];\r\n        material.color.b = color[2];\r\n\r\n        const positions = [];\r\n        const colors = [];\r\n        const indices = [];\r\n\r\n        for (let i = 0; i < paths.length; ++i) {\r\n            const route = paths[i]\r\n\r\n            for (let j = 0; j < route.length; ++j) {\r\n                for (let k = 0; k < route[j].length; ++k) {\r\n\r\n                    const [x, y] = this.solution.projectionToMercator(route[j][k][0], route[j][k][1]);\r\n\r\n                    positions.push(x, offsetZ, y)\r\n\r\n                    colors.push(color[0], color[1], color[2]);\r\n\r\n                    if (k < route[j].length - 1) {\r\n                        indices.push(Math.floor(positions.length / 3) - 1, Math.floor(positions.length / 3));\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        // console.log(xC / Count, yC / Count)\r\n        geometry.setIndex(indices);\r\n        geometry.setAttribute('position', new THREE.Float32BufferAttribute(positions, 3));\r\n        geometry.setAttribute('color', new THREE.Float32BufferAttribute(colors, 3));\r\n        // generateMorphTargets( geometry );\r\n\r\n        geometry.computeBoundingSphere();\r\n\r\n        const mesh = new THREE.LineSegments(geometry, material);\r\n        this.solution.scene.add(mesh);\r\n        return mesh;\r\n\r\n\r\n    }\r\n    public renderPoints = (paths: any, color: number[]) => {\r\n        const geometry = new THREE.BufferGeometry();\r\n        const material = new THREE.PointsMaterial({ vertexColors: true, size: 0.5 });\r\n\r\n        const positions = [];\r\n        const colors = [];\r\n\r\n        for (let i = 0; i < paths.length; ++i) {\r\n            const route = paths[i]\r\n\r\n            for (let j = 0; j < route.length; ++j) {\r\n                for (let k = 0; k < route[j].length; ++k) {\r\n\r\n                    const [x, y] = this.solution.projectionToMercator(route[j][k][0], route[j][k][1]);\r\n\r\n                    positions.push(x, 0, y)\r\n                    colors.push(color[0], color[1], color[2]);\r\n                }\r\n            }\r\n        }\r\n\r\n        geometry.setAttribute('position', new THREE.Float32BufferAttribute(positions, 3));\r\n        geometry.setAttribute('color', new THREE.Float32BufferAttribute(colors, 3));\r\n        geometry.computeBoundingSphere();\r\n\r\n        const mesh = new THREE.Points(geometry, material);\r\n        this.solution.scene.add(mesh);\r\n        return mesh;\r\n\r\n    }\r\n\r\n    // ..............................\r\n    // public toggleRenderYearForPolygonMesh() {\r\n    //     if (this.yearForPolygonMesh[2010] !== undefined) {\r\n    //         console.log('1');\r\n    //         if (this.solution.ui.isActive_zones_buffer) {\r\n    //             console.log('2');\r\n    //             for (const [key, value] of Object.entries(this.yearForPolygonMesh)) {\r\n    //                 for (let i = 0; i < this.yearForPolygonMesh[key].length; ++i) {\r\n    //                     this.yearForPolygonMesh[key][i].visible = true;\r\n    //                 }\r\n    //                 console.log('3');\r\n    //             }\r\n    //         } else {\r\n    //             for (const [key, value] of Object.entries(this.yearForPolygonMesh)) {\r\n    //                 for (let i = 0; i < this.yearForPolygonMesh[key].length; ++i) {\r\n    //                     this.yearForPolygonMesh[key][i].visible = false;\r\n    //                 }\r\n    //                 console.log('4');\r\n    //             }\r\n\r\n    //         }\r\n    //     }\r\n    // }\r\n}","import * as THREE from 'three';\r\nimport { Solution } from './';\r\n\r\nimport { PARAM } from '../../../../App';\r\n\r\nimport { getJSONFromURL, } from 'njscore';\r\nexport class DataTwitter {\r\n    solution: Solution;\r\n    active: boolean = false;\r\n    dataRaw: any;\r\n    mesh: THREE.Points;\r\n    t = 0.0;\r\n\r\n    dataScale: number = 1;\r\n    colorScale: number = 1;\r\n\r\n    pos: Float32Array;\r\n\r\n    color: string = '#0ff';\r\n\r\n    material: THREE.PointsMaterial;\r\n\r\n    dotG = 0;\r\n    dotB = 0;\r\n\r\n    constructor(solution: Solution) {\r\n        this.solution = solution;\r\n\r\n        const fileName = 'real_data.json'\r\n        const path = '/static/data/real_data_buffersonly.json';\r\n\r\n        let thePath = 'https://raw.githubusercontent.com/NamjuLee/data/master/Paris/real_data_buffersonly.json'; // process.env.PUBLIC_URL + path + fileName\r\n\r\n        if (PARAM.url) {\r\n            thePath = PARAM.url;\r\n        }\r\n\r\n        if (PARAM.dotG) {\r\n            this.dotG = +PARAM.dotG / 255;\r\n        }\r\n        if (PARAM.dotB) {\r\n            this.dotB = +PARAM.dotB / 255;\r\n        }\r\n\r\n        getJSONFromURL(thePath).then((data) => {\r\n            // getJSONFromURL(process.env.PUBLIC_URL + path).then((data) => {\r\n            this.dataRaw = data;\r\n\r\n            // console.log('t',data);\r\n\r\n            this.initMesh('noNeighbsLog');\r\n            this.solution.updateParam();\r\n        });\r\n\r\n    }\r\n    initMesh(key: string) {\r\n        const positions = [];\r\n        const colors = [];\r\n\r\n\r\n        const domain = this.dataRaw['meta']['domain_' + key]\r\n        // console.log(domain)\r\n\r\n        // const selYear = domain[0]\r\n        // lat : 48.819493\r\n        // lon : 2.3554159\r\n        // noNeighbsLog : 0\r\n        // noNeighbsLogDensity : 0\r\n        // noNeighbsRaw : 0\r\n        // noNeighbsWins : 0\r\n        // noTwtsLog : 0\r\n        // noTwtsLogDensity : 0\r\n        // noTwtsRaw : 0\r\n        // noTwtsWins : 0\r\n        // noUsersLog : 0\r\n        // noUsersLogDensity : 0\r\n        // noUsersRaw : 0\r\n        // noUsersWins : 0\r\n        // treatmentCategory : 0\r\n        // year : 2010\r\n\r\n        for (let i = 0; i < this.dataRaw['cells'].length; ++i) {\r\n            const cell = this.dataRaw['cells'][i];\r\n            const [x, y] = this.solution.projectionToMercator(+cell['lon'], +cell['lat'])\r\n\r\n            let keyIndex = +cell[key]\r\n            keyIndex /= 2;\r\n\r\n            const color = [keyIndex, keyIndex, 0];\r\n\r\n            positions.push(x, keyIndex * this.dataScale, y)\r\n\r\n            colors.push(color[0], color[1], color[2]);\r\n\r\n        }\r\n        // this.meshStreetOSM = this.LineSeg(this.streetOSM, [0, 1, 1]);\r\n\r\n        const geometry = new THREE.BufferGeometry();\r\n        const material = new THREE.PointsMaterial({ vertexColors: true, size: 0.5 });\r\n        this.material = material;\r\n\r\n        this.pos = new Float32Array(positions)\r\n\r\n        geometry.setAttribute('position', new THREE.Float32BufferAttribute(this.pos, 3));\r\n        geometry.setAttribute('color', new THREE.Float32BufferAttribute(colors, 3));\r\n        geometry.computeBoundingSphere();\r\n\r\n        this.mesh = new THREE.Points(geometry, material);\r\n        this.solution.scene.add(this.mesh);\r\n\r\n        //     console.log('done');\r\n        this.active = true;\r\n\r\n    }\r\n    updateColor(r: number, g: number, b: number) {\r\n        this.material.color.setRGB(r, g, b);\r\n    }\r\n    updateMesh(key: string) {\r\n        this.active = false;\r\n        this.removeMesh();\r\n        this.initMesh(key);\r\n    }\r\n    removeMesh() {\r\n        this.solution.scene.remove(this.mesh);\r\n    }\r\n    update() {\r\n        if (!this.active) { return; }\r\n        this.t += 0.05;\r\n        // if (this.solution.ui.isActive_twitter) {\r\n        this.updateAnimation();\r\n    }\r\n    updateAnimation() {\r\n\r\n        let numVertices = this.mesh.geometry.attributes.position.count;\r\n        for (let i = 0; i < numVertices; i++) {\r\n            let o = this.mesh.geometry.attributes.position;\r\n\r\n            let x = o.getX(i);\r\n            // let y = o.getY(i);\r\n            let z = o.getZ(i)\r\n\r\n            let y = this.pos[(i * 3) + 1] * this.dataScale;\r\n\r\n            y = y * (1 + Math.sin(x + y + this.t) * Math.cos(x + y + this.t))\r\n\r\n            y = y < 0.1 ? 0.1 : y;\r\n            // console.log(y)\r\n\r\n            let p = new THREE.Vector3(x, y, z);\r\n\r\n            this.mesh.geometry.attributes.position.setXYZ(i, p.x, p.y, p.z);\r\n\r\n            // if (intersection !== null) {\r\n            //     y = distanceTo(x, y, z, intersection.point.x, intersection.point.y, intersection.point.z) / 30\r\n            // }\r\n\r\n\r\n\r\n\r\n            const valNorm = y / this.colorScale;\r\n            // this.mesh.geometry.attributes.color.setXYZ(i, valNorm, 1 - valNorm, 0);\r\n            this.mesh.geometry.attributes.color.setXYZ(i, \r\n                valNorm, \r\n                this.dotG,\r\n                this.dotB, \r\n                );\r\n\r\n                // valNorm, \r\n                // 86 / 255, \r\n                // 61 / 255\r\n                // );\r\n\r\n                // 104\r\n                // 50\r\n                // 21\r\n\r\n            // console.log(y)\r\n        }\r\n\r\n        // set to true each time you modify the positions:\r\n        this.mesh.geometry.attributes.position.needsUpdate = true;\r\n        this.mesh.geometry.attributes.color.needsUpdate = true;\r\n        this.mesh.geometry.computeVertexNormals();\r\n\r\n    }\r\n}","import { Solution } from '../';;\r\nexport class UI {\r\n    solution: Solution;\r\n    hostDiv: HTMLElement;\r\n\r\n    isActiveMainStreet = true;\r\n    isActive_streetOSM = false;\r\n    isActive_treated_st = false;\r\n    isActive_control_st = false;\r\n    isActive_zones_30 = false;\r\n    isActive_zones_buffer = false;\r\n    isActive_twitter = false;\r\n\r\n    year: number = 2010;\r\n\r\n    divCameraPos: HTMLElement;\r\n\r\n    constructor(solution: Solution) {\r\n        this.solution = solution;\r\n        this.hostDiv = solution.hostDiv;\r\n\r\n        // console.log(1);\r\n        if (this.solution.PARAM.local_ui !== undefined) {\r\n            if((this.solution.PARAM.local_ui as boolean) === true) {\r\n                this.appendUI();\r\n            }\r\n        } else {\r\n            this.appendUI();\r\n        }\r\n        \r\n    }\r\n    public appendUI() {\r\n\r\n        const mainMenu = document.createElement('div');\r\n        mainMenu.style.position = 'absolute';\r\n        mainMenu.style.margin = '5px';\r\n        this.hostDiv.append(mainMenu);\r\n\r\n\r\n        \r\n        const divCameraPos = document.createElement('dv');\r\n        divCameraPos.style.display = 'flex';\r\n        divCameraPos.style.marginBottom = '10px';\r\n        divCameraPos.textContent = 'pos target';\r\n        this.divCameraPos = divCameraPos;\r\n        mainMenu.append(divCameraPos);\r\n\r\n        // let checkBoxUIA = getCheckBox('high_low_connectedness_user');\r\n        // mainMenu.append(checkBoxUIA.div);\r\n        // checkBoxUIA.checkBox.onchange = () => {\r\n        //     if (checkBoxUIA.checkBox.checked === true){\r\n        //         this.isActive_high_low_connectedness_user = true;\r\n\r\n        //     } else {\r\n        //         this.isActive_high_low_connectedness_user = false;\r\n        //     }\r\n        // }\r\n        const divInputColor = document.createElement('input');\r\n        mainMenu.append(divInputColor)\r\n        divInputColor.type = 'color';\r\n        divInputColor.oninput = () => {\r\n            this.solution.drawing.updateColor(divInputColor.value);\r\n            // console.log(divInputColor.value)\r\n            // if (this.capture) {\r\n            //     const colArray = hex2RGBA(divInputColor.value)\r\n            //     // this.capture.opacity = +sl3.slider.value * 0.01;\r\n            //     this.capture.rgb = colArray;\r\n            // //     console.log(colArray)\r\n            // }\r\n        }\r\n\r\n        let checkBoxUIB = getCheckBox('main street');\r\n        mainMenu.append(checkBoxUIB.div);\r\n        checkBoxUIB.checkBox.checked = true;\r\n        checkBoxUIB.checkBox.onchange = () => {\r\n            if (checkBoxUIB.checkBox.checked === true) {\r\n                this.isActiveMainStreet = true;\r\n            } else {\r\n                this.isActiveMainStreet = false;\r\n            }\r\n        }\r\n\r\n\r\n        let checkBoxUI_OSM = getCheckBox('OSM street');\r\n        mainMenu.append(checkBoxUI_OSM.div);\r\n        checkBoxUI_OSM.checkBox.onchange = () => {\r\n            if (checkBoxUI_OSM.checkBox.checked === true) {\r\n                this.isActive_streetOSM = true;\r\n            } else {\r\n                this.isActive_streetOSM = false;\r\n            }\r\n        }\r\n\r\n\r\n        let checkBoxUIC = getCheckBox('treated street');\r\n        mainMenu.append(checkBoxUIC.div);\r\n        checkBoxUIC.checkBox.onchange = () => {\r\n            if (checkBoxUIC.checkBox.checked === true) {\r\n                this.isActive_treated_st = true;\r\n            } else {\r\n                this.isActive_treated_st = false;\r\n            }\r\n        }\r\n\r\n\r\n        let checkBoxUID = getCheckBox('control street');\r\n        mainMenu.append(checkBoxUID.div);\r\n        checkBoxUID.checkBox.onchange = () => {\r\n            if (checkBoxUID.checkBox.checked === true) {\r\n                this.isActive_control_st = true;\r\n            } else {\r\n                this.isActive_control_st = false;\r\n            }\r\n        }\r\n        let checkBoxUIE = getCheckBox('zones 30');\r\n        mainMenu.append(checkBoxUIE.div);\r\n        checkBoxUIE.checkBox.onchange = () => {\r\n            if (checkBoxUIE.checkBox.checked === true) {\r\n                this.isActive_zones_30 = true;\r\n            } else {\r\n                this.isActive_zones_30 = false;\r\n            }\r\n        }\r\n\r\n\r\n        let slider = getSlider('Year')\r\n        slider.div.style.marginTop = '25px';\r\n        slider.text.textContent = 'Year: 2019'\r\n        mainMenu.append(slider.div);\r\n\r\n        slider.slider.oninput = () => {\r\n            this.year = +slider.slider.value;\r\n            slider.text.textContent = 'Year: ' + slider.slider.value;\r\n            this.solution.drawing.updateYear(+slider.slider.value);\r\n        }\r\n\r\n\r\n        //  ..............................\r\n\r\n        let checkBoxUI_Node = getCheckBox('twitter data');\r\n        checkBoxUI_Node.div.style.marginTop = '25px';\r\n        mainMenu.append(checkBoxUI_Node.div);\r\n        checkBoxUI_Node.checkBox.onchange = () => {\r\n            if (checkBoxUI_Node.checkBox.checked === true) {\r\n                this.isActive_twitter = true;\r\n            } else {\r\n                this.isActive_twitter = false;\r\n            }\r\n        }\r\n        let sliderDataScale = getSlider('Scale', '1', '10');\r\n        sliderDataScale.text.textContent = 'Scale: 1'\r\n        mainMenu.append(sliderDataScale.div);\r\n        sliderDataScale.slider.defaultValue = '1';\r\n        sliderDataScale.slider.oninput = () => {\r\n            this.year = +sliderDataScale.slider.value;\r\n            sliderDataScale.text.textContent = 'Scale: ' + sliderDataScale.slider.value;\r\n            this.solution.dataTwitter.dataScale = +sliderDataScale.slider.value;\r\n        }\r\n        let sliderDataScaleColor = getSlider('Color', '1.', '50.');\r\n        sliderDataScaleColor.text.textContent = 'Color: 1'\r\n        mainMenu.append(sliderDataScaleColor.div);\r\n        sliderDataScaleColor.slider.defaultValue = '1';\r\n        sliderDataScaleColor.slider.oninput = () => {\r\n            this.year = +sliderDataScaleColor.slider.value;\r\n            sliderDataScaleColor.text.textContent = 'Color: ' + sliderDataScaleColor.slider.value;\r\n            this.solution.dataTwitter.colorScale = +sliderDataScaleColor.slider.value;\r\n        }\r\n\r\n        let checkBoxAni = getCheckBox('Animation');\r\n        checkBoxAni.checkBox.defaultChecked = true;\r\n        mainMenu.append(checkBoxAni.div);\r\n        checkBoxAni.checkBox.onchange = () => {\r\n            if (checkBoxAni.checkBox.checked === true) {\r\n                this.solution.dataTwitter.active = true;\r\n            } else {\r\n                this.solution.dataTwitter.active = false;\r\n            }\r\n            this.solution.dataTwitter.updateAnimation();\r\n        }\r\n\r\n        const theField = {\r\n            noNeighbsLog: 'noNeighbsLog',\r\n            noNeighbsLogDensity: 'noNeighbsLogDensity',\r\n            noNeighbsRaw: 'noNeighbsRaw',\r\n            noNeighbsWins: 'noNeighbsWins',\r\n            noTwtsLog: 'noTwtsLog',\r\n            noTwtsLogDensity: 'noTwtsLogDensity',\r\n            noTwtsRaw: 'noTwtsRaw',\r\n            noTwtsWins: 'noTwtsWins',\r\n            noUsersLog: 'noUsersLog',\r\n            noUsersLogDensity: 'noUsersLogDensity',\r\n            noUsersRaw: 'noUsersRaw',\r\n            noUsersWins: 'noUsersWins',\r\n            treatmentCategory: 'treatmentCategory',\r\n        }\r\n\r\n        const optionList = document.createElement('select');\r\n        mainMenu.append(optionList);\r\n        for (let i in theField) {\r\n            const option = document.createElement('option')\r\n            option.value = i;\r\n            option.textContent = i\r\n            optionList.appendChild(option)\r\n        }\r\n\r\n        optionList.onchange = (e) => {\r\n        //     console.log((e.target as any).value)\r\n            this.solution.dataTwitter.updateMesh((e.target as any).value);\r\n        };\r\n\r\n    }\r\n}\r\n\r\n\r\nconst getCheckBox = (title: string) => {\r\n    const div = document.createElement('div');\r\n    div.style.display = 'flex';\r\n\r\n    const checkBox = document.createElement('input');\r\n    checkBox.type = 'checkbox';\r\n    const text = document.createElement('div');\r\n    text.textContent = title;\r\n    text.style.color = '#aaa';\r\n    div.appendChild(checkBox);\r\n    div.appendChild(text);\r\n\r\n    return {\r\n        div, checkBox\r\n    }\r\n};\r\n\r\nconst getSlider = (title: string, min: string = '2009', max: string = '2015') => {\r\n    // <input type=\"range\" min=\"1\" max=\"100\" value=\"50\" class=\"slider\" id=\"myRange\">\r\n    const div = document.createElement('div');\r\n    div.style.display = 'flex';\r\n\r\n    const slider = document.createElement('input');\r\n    slider.type = 'range';\r\n    slider.min = min;\r\n    slider.max = max;\r\n\r\n    const text = document.createElement('div');\r\n    text.textContent = title;\r\n    text.style.color = '#aaa';\r\n    div.appendChild(slider);\r\n    div.appendChild(text);\r\n\r\n    return {\r\n        div, slider, text\r\n    }\r\n};","import * as THREE from 'three';\r\nimport { RendererThree, NJSCORE } from '../../../../lib';\r\nimport { getJSONFromURL, } from 'njscore';\r\n\r\nimport { FilterGLViewDarkForDarken } from '../01_JSAPI/Tint/FilterGLViewDarkForDarken';\r\nimport { Drawing } from './Drawing';\r\nimport { DataTwitter } from './DataTwitter';\r\n\r\nimport { UI } from './UI';\r\nexport class Solution extends RendererThree {\r\n\r\n    drawing: Drawing;\r\n    ui: UI;\r\n\r\n    meshAreaGon: THREE.Mesh;\r\n    meshPolygon2: THREE.Mesh;\r\n\r\n    pts: number[] = [];\r\n\r\n    dataTwitter: DataTwitter;\r\n\r\n    xOFf = -15478803.88731685;\r\n    yOFf = -4766681.448690384;\r\n    scale = 0.01;\r\n\r\n    PARAM: any;\r\n\r\n    constructor(id: string = 'main') {\r\n        super(id)\r\n\r\n        let paramURL = NJSCORE.BrowserUtility.getAllUrlParams();\r\n        this.PARAM = JSON.parse(JSON.stringify(paramURL));\r\n\r\n        // console.log(this.PARAM);\r\n\r\n\r\n        this.drawing = new Drawing(this);\r\n        this.dataTwitter = new DataTwitter(this);\r\n\r\n        const light = new THREE.PointLight(0xffffff, 0.8);\r\n        this.camera.add(light);\r\n        this.scene.add(light);\r\n\r\n        const canvasGL = document.createElement('canvas');\r\n        canvasGL.style.position = 'absolute';\r\n        canvasGL.style.pointerEvents = 'none';\r\n        canvasGL.style.mixBlendMode = 'darken';\r\n        canvasGL.width = this.hostDiv.clientWidth;\r\n        canvasGL.height = this.hostDiv.clientHeight;\r\n        this.hostDiv.appendChild(canvasGL);\r\n        const glCtx = canvasGL.getContext('webgl');\r\n        const d = new FilterGLViewDarkForDarken(glCtx, 0.5, 5);\r\n        d.Render(glCtx);\r\n\r\n\r\n\r\n        this.ui = new UI(this);\r\n        if (this.PARAM.posCamera) {\r\n            const pos = this.PARAM.posCamera.split(',');\r\n            this.camera.position.set(+pos[0], +pos[1], +pos[2]);\r\n            this.controls.enablePan = false;\r\n            this.controls.enableRotate = false;\r\n            this.controls.enableZoom = false;\r\n        } else {\r\n            this.camera.position.set(0, 100, 100);\r\n\r\n        }\r\n        if (this.PARAM.posTarget) {\r\n            const pos = this.PARAM.posTarget.split(',');\r\n            this.controls.target.set(+pos[0], +pos[1], +pos[2]);\r\n        } \r\n\r\n    }\r\n    public projectionToMercator(lon: number, lat: number) {\r\n        const [xPro, yPro] = MercatorProjection(lon, lat);\r\n        return [\r\n            (xPro + this.xOFf) * this.scale,\r\n            (yPro + this.yOFf) * this.scale * -1\r\n        ];\r\n    }\r\n    public updateParam() {\r\n        if (this.PARAM.scale) {\r\n            this.ui.isActive_twitter = true;\r\n            this.dataTwitter.dataScale = +this.PARAM.scale;\r\n        }\r\n        if (this.PARAM.colorScale) {\r\n            this.ui.isActive_twitter = true;\r\n            this.dataTwitter.colorScale = +this.PARAM.colorScale;\r\n        }\r\n        if (this.PARAM.dataLayer) {\r\n            this.ui.isActive_twitter = true;\r\n            this.dataTwitter.updateMesh(this.PARAM.dataLayer);\r\n        }\r\n\r\n    }\r\n    public update(scene: THREE.Scene) {\r\n        this.drawing.update();\r\n        this.dataTwitter?.update();\r\n\r\n        const pos = `Pos: ${this.camera.position.x}, ${this.camera.position.y}, ${this.camera.position.z}; Target: ${this.controls.target.x}, ${this.controls.target.y}, ${this.controls.target.z}`;\r\n        if (this.ui.divCameraPos !== undefined) {\r\n            this.ui.divCameraPos.textContent = pos;\r\n        }\r\n    }\r\n}\r\n\r\n/*\r\nhttps://namjulee.github.io/njs-lab-public/lab/project-slow-zone/project-slow-zone-viz?ui=0&local_ui=false&posCamera=29.483,121.5247,176.1508&posTarget=4.269852,-6.45155,7.54423&colorMainStreet=ff0000&colorSOMStreet=00ff00&colorTreatedStreet=0000ff&colorControlStreet=ffffff&colorZones30=333333&colorYearPolygon=00f00f&year=2012&scale=0.95&colorScale=3.75&colorVizBottom=0000ff&colorVizTop=ff0000&dataLayer=noNeighbsLogDensity\r\n\r\nhttps://namjulee.github.io/njs-lab-public/lab/project-slow-zone/project-slow-zone-viz?ui=0&\r\n\r\nurl=URL\r\nurlZone=https://raw.githubusercontent.com/NamjuLee/data/master/Paris/zones_15_innerouter_byyr_rings.json\r\n\r\nlocal_ui=false&posCamera=29.483,121.5247,176.1508\r\nposTarget=4.269852,-6.45155,7.54423\r\ncolorMainStreet=ff0000\r\ncolorSOMStreet=00ff00\r\ncolorTreatedStreet=0000ff\r\ncolorControlStreet=ffffff\r\ncolorZones30=333333\r\ncolorYearPolygon=00f00f\r\nyear=2012\r\nscale=0.95\r\ncolorScale=3.75\r\ncolorVizBottom=0000ff\r\ncolorVizTop=ff0000\r\ndataLayer=noNeighbsLogDensity\r\n\r\n\r\n\r\nParams:\r\nui=0&\r\nlocal_ui=false&\r\n\r\nposCamera=29.483,121.5247,176.1508&\r\nposTarget=4.269852,-6.45155,7.54423&\r\n\r\ncolorMainStreet=ffffff&\r\ncolorSOMStreet=ffffff&\r\ncolorTreatedStreet=ffffff&\r\ncolorControlStreet=ffffff&\r\ncolorZones30=ffffff&\r\ncolorYearPolygon=ffffff&\r\n\r\nyear=2012&\r\nscale=2.5&\r\ncolorScale=1.75&\r\ndataLayer=noNeighbsWins\r\n*/\r\n\r\nexport const MercatorProjection = (longitude: number, latitude: number) => {\r\n\r\n    // latitude    = 41.145556; // (φ)\r\n    // longitude   = -73.995;   // (λ)\r\n\r\n    const  mapWidth = 30559983.333; // 200\r\n    const  mapHeight = 446; // 100\r\n\r\n    // get x value\r\n    const  x = (longitude + 180) * (mapWidth / 360);\r\n\r\n    // convert from degrees to radians\r\n    const  latRad = latitude * Math.PI / 180;\r\n\r\n    // get y value\r\n    const  mercN = Math.log(Math.tan((Math.PI / 4) + (latRad / 2)));\r\n    const  y = (mapHeight / 2) - (mapWidth * mercN / (2 * Math.PI)) * -1;\r\n    return [x, y];\r\n}"],"names":["FilterGLViewDarkForDarken","constructor","gl","program","fragmentShader","vertexShader","matrixLocation","posBuffer","colBuffer","vertexs","posLocAtt","colLocAtt","matLoc","colLoc","cVecLoc","mouseLoc","timeGL","vShader","fShader","v","f","positionAttribLocation","colorAttribLocation","translation","color","colArray","this","Math","random","InitShader","GLShaderCommon","VERTEX_SHADER","FRAGMENT_SHADER","Render","col","Float32Array","createBuffer","bindBuffer","ARRAY_BUFFER","bufferData","STATIC_DRAW","getAttribLocation","type","FLOAT","stride","BYTES_PER_ELEMENT","offset","vertexAttribPointer","enableVertexAttribArray","useProgram","primitiveType","TRIANGLES","drawArrays","Drawing","solution","streetOSM","routesTreated","routesControl","zones30","zones15","routesMain","meshTwitter","meshStreetOSM","meshNode","meshTreated","meshControl","meshMainStreet","meshZones30","meshPolygon","polygonRingID","polygonRings","yearForPolygonMesh","selectedYear","renderMultiPolygon","scene","paths","colorArray","meshes","positions","multi","length","multiPolygon","polyI","polygon","thePolygon","shape","i","x","y","projectionToMercator","push","THREE","geometry","mat","side","transparent","opacity","mesh","add","rotateOnAxis","PI","renderPoints","material","vertexColors","size","colors","route","j","k","setAttribute","computeBoundingSphere","getJSONFromURL","then","data","PARAM","colorSOMStreet","hexToRGBANormalized","ui","isActive_streetOSM","LineSeg","start","colorMainStreet","isActiveMainStreet","colorTreatedStreet","isActive_treated_st","colorControlStreet","isActive_control_st","colorZones30","isActive_zones_30","thePath","geoJSON","colorYearPolygon","year","renderCustomPolygon","updateYear","undefined","forEach","m","visible","updateColor","c","r","g","b","dataTwitter","isActive_twitter","update","json","yearForPolygonID","key","value","Object","entries","yr","theValue","count","theKey","theIDs","id","outPTs","value_mn_rescale","outer_ring","Vector3","inner_rings","holePath","moveTo","lineTo","holes","setRGB","translateY","offsetZ","indices","floor","setIndex","DataTwitter","active","dataRaw","t","dataScale","colorScale","pos","dotG","dotB","initMesh","updateParam","cell","keyIndex","updateMesh","removeMesh","remove","updateAnimation","numVertices","attributes","position","o","getX","z","getZ","sin","cos","p","setXYZ","valNorm","needsUpdate","computeVertexNormals","UI","hostDiv","isActive_zones_buffer","divCameraPos","local_ui","appendUI","mainMenu","document","createElement","style","margin","append","display","marginBottom","textContent","divInputColor","oninput","drawing","checkBoxUIB","getCheckBox","div","checkBox","checked","onchange","checkBoxUI_OSM","checkBoxUIC","checkBoxUID","checkBoxUIE","slider","getSlider","marginTop","text","checkBoxUI_Node","sliderDataScale","defaultValue","sliderDataScaleColor","checkBoxAni","defaultChecked","theField","noNeighbsLog","noNeighbsLogDensity","noNeighbsRaw","noNeighbsWins","noTwtsLog","noTwtsLogDensity","noTwtsRaw","noTwtsWins","noUsersLog","noUsersLogDensity","noUsersRaw","noUsersWins","treatmentCategory","optionList","option","appendChild","e","target","title","min","max","Solution","RendererThree","super","meshAreaGon","meshPolygon2","pts","xOFf","yOFf","scale","paramURL","NJSCORE","JSON","parse","stringify","light","camera","canvasGL","pointerEvents","mixBlendMode","width","clientWidth","height","clientHeight","glCtx","getContext","posCamera","split","set","controls","enablePan","enableRotate","enableZoom","posTarget","lon","lat","xPro","yPro","MercatorProjection","dataLayer","longitude","latitude","mapWidth","latRad","mapHeight","log","tan"],"sourceRoot":""}