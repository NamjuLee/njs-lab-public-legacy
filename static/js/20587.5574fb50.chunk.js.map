{"version":3,"file":"static/js/20587.5574fb50.chunk.js","mappings":"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","sources":["lib/NJSCore/IO/FirebaseWrapper.ts","njslab/Workshop/workshop-ml/SmartDrawingApp/Implementation/SmartDrawing/index.ts","njslab/Workshop/workshop-ml/SmartDrawingApp/Implementation/index.ts"],"sourcesContent":["\r\n// import firebase from 'firebase';\r\n\r\nexport class FirebaseWrapper {\r\n    firebaseConfig = {\r\n        apiKey: 'AIzaSyA1yKg85WGZoshbk8xR23cXr3SwpqXVgIc',\r\n        authDomain: 'njs-data.firebaseapp.com',\r\n        projectId: 'njs-data',\r\n        storageBucket: 'njs-data.appspot.com',\r\n        messagingSenderId: '635991152770',\r\n        appId: '1:635991152770:web:722f5356e0d14cea50fc9b'\r\n      };\r\n\r\n    // ref: firebase.database.Reference;\r\n    // db: firebase.database.Database;\r\n    // appDatabase: firebase.app.App;\r\n    constructor(type: string, callBack: (d: any) => any) {\r\n        // this.appDatabase = firebase.initializeApp(this.firebaseConfig);\r\n        // this.db = this.appDatabase.database();\r\n        // this.ref = this.db.ref(type);\r\n        // this.ref.on('value', callBack, this.getError);\r\n    }\r\n    public sendData(data: {}) {\r\n        // let result = this.ref.push(data);\r\n        // console.log(result.key);\r\n    }\r\n\r\n    public getData = (d: any) => {\r\n        let data = d.val();\r\n    //     console.log('get data', data);\r\n\r\n        for (let i in data) {\r\n        //     console.log(i, data[i]);\r\n        }\r\n    }\r\n    public getError = (d: any) => {\r\n        console.error(d);\r\n    }\r\n}","import { tensor2d, tidy, Tensor2D } from '@tensorflow/tfjs';\r\nimport * as tf from '@tensorflow/tfjs';\r\nimport { NVector3 } from '../../Lib/NVector3';\r\n\r\nimport { FirebaseWrapper } from '../../Lib';\r\n\r\nexport class SmartDrawing {\r\n    static CLASS_TYPE = {\r\n        0: 'CIRCLE',\r\n        1: 'TRI-GON',\r\n        2: 'ARROW_SINGLE',\r\n        3: 'ARROW_DOUBLE',\r\n        4: 'RECTANGLE',\r\n        5: 'TEXT',\r\n        6: 'CURVE',\r\n        7: 'HEART',\r\n        8: 'CLOUD'\r\n    };\r\n    // tslint:disable-next-line:no-any\r\n    modelLogisticRegression: any;\r\n    modelMultiClassification: tf.LayersModel;\r\n    divText: HTMLElement;\r\n\r\n    firebaseWrapper: FirebaseWrapper;\r\n    constructor() {\r\n        // tf.model;\r\n        this.AppendDiv();\r\n        // this.activeCommandController = new ActiveCommandController(this);\r\n        // this.LoadModelFromJsons();\r\n        this.LoadModelFromPublic();\r\n        console.log(tf.version);\r\n\r\n        this.firebaseWrapper = new FirebaseWrapper('smartDrawing', this.callback);\r\n    }\r\n    callback(d: any) {\r\n        let data = d.val();\r\n        console.log('callback -------- get data', data);\r\n\r\n        for (let i in data) {\r\n            console.log(i, data[i]);\r\n        }\r\n    }\r\n    AppendDiv() {\r\n        const div = document.getElementById('main');\r\n        const divText = document.createElement('div');\r\n        if (div && divText) {\r\n            this.divText = divText;\r\n            div.insertBefore(this.divText, null);\r\n            // this.divText.style.backgroundColor = '#ff0000';\r\n            this.divText.style.marginLeft = '20px';\r\n            // this.divText.style.width = '500px';\r\n            // this.divText.style.height = '500px';\r\n\r\n        }\r\n    }\r\n    async LoadModelFromJsons() {\r\n        // localStorage.setItem('model', modelMultiClassificationJsonTopo);\r\n\r\n        // // const modeltopo = modelMultiClassificationJson.modelTopology;\r\n        // console.log(modelMultiClassificationJsonTopo);\r\n        // console.log(localStorage);\r\n        // console.log(await io.listModels());\r\n        // // console.log(JSON.parse(JSON.stringify(modelMultiClassificationJson)));\r\n\r\n        // const model = await loadModel(io.browserFiles([modelMultiClassificationJsonTopo, modelMultiClassificationJson]));\r\n        // console.log(model);\r\n        // // this.modelLogisticRegression = await loadFrozenModel(modelMultiClassificationJsonTopo, modelMultiClassificationJson);\r\n        // console.log(this.modelLogisticRegression);\r\n        // // // this.modelMultiClassification = await loadModel(modelMultiClassificationJson);\r\n        // // this.modelMultiClassification = await loadModel('./model/modelMultiClassification/model.json');\r\n\r\n        // console.log(this.modelLogisticRegression);\r\n        // console.log(this.modelMultiClassification);\r\n    }\r\n    async LoadModelFromPublic() {\r\n        // http://www.njstudio.co.kr/ml/sm/modelLogisticRegression0/model.json\r\n        // let file = 'ML/SmartDrawing/modelLogisticRegression0/model.json';\r\n        let file = `https://raw.githubusercontent.com/NamjuLee/data/master/smart-drawing/model/modelLogisticRegression0/model.json`;\r\n        // let file = 'ML/SmartDrawing/new/model.json';\r\n        this.modelLogisticRegression = await this.LoadModelFromPath(file);\r\n\r\n        file = `https://raw.githubusercontent.com/NamjuLee/data/master/smart-drawing/model/modelMultiClassification0/model.json`;\r\n        this.modelMultiClassification = await this.LoadModelFromPath(file);\r\n    }\r\n    async LoadModelFromPath(file: string) {\r\n        // return await tf.loadLayersModel(thePath);\r\n        // console.log(thePath);\r\n        const model = await tf.loadLayersModel(file);\r\n        // console.log(model.summary());\r\n        return model;\r\n    }\r\n\r\n    PredictByLogisticRegression(data: number[]) {\r\n        if (this.modelLogisticRegression === undefined) { console.error('no model loaded'); return; }\r\n        // console.log('==============================');\r\n        return tidy(() => {\r\n\r\n            const d = tensor2d([data]);\r\n            const predictOut = this.modelLogisticRegression.predict(d) as Tensor2D;\r\n            const score = predictOut.dataSync();\r\n            return this.PredictionPostProcessingLogisticRegression(score[0]);\r\n        });\r\n    }\r\n    PredictByMultiClassification(data: number[]) {\r\n        if (this.modelMultiClassification === undefined) { console.error('no model loaded'); return; }\r\n        return tidy(() => {\r\n            // console.log(data);\r\n            const d = tf.tensor2d([data]);\r\n            // console.log(d.toFloat());\r\n            const predictOut = this.modelMultiClassification.predict(d) as Tensor2D;\r\n            // console.log(predictOut);\r\n            // console.log(predictOut.toString());\r\n            // console.log('lllllllllllllllll');\r\n            const rankings = true;\r\n            if (rankings) {\r\n                const logits = Array.from(predictOut.dataSync());\r\n                const rankingIndex = this.GetIndexBySortDescending(logits as number[]);\r\n                // console.log(logits);\r\n                // console.log(rankingIndex);\r\n                // console.log('#####################');\r\n                const outText: string[] = [];\r\n                for (let i of rankingIndex) {\r\n                    const probability: number = logits[i] as number;\r\n                    const text = 'class:' + SmartDrawing.CLASS_TYPE[i] + ', probability:' + probability.toFixed(5);\r\n                    console.log(text);\r\n                    outText.push(text);\r\n                }\r\n                this.UpdateDivWithText(outText);\r\n            }\r\n\r\n            const winner = predictOut.argMax(-1).dataSync()[0];\r\n            return SmartDrawing.CLASS_TYPE[winner];\r\n            // console.log(this.classStringsMultiClassification[winner]);\r\n            // return this.PredictionPostProcessingLogisticRegression(scoreArray[0]);\r\n        });\r\n    }\r\n    private UpdateDivWithText(outText: string[]) {\r\n        let text = `<p>*** FROM DEEP LEARNING MODEL B *** </p>`;\r\n        for (let i = 0; i < outText.length; ++i) {\r\n            text += `<p> ${outText[i]}</p>`;\r\n        }\r\n        this.divText.innerHTML = text;\r\n    }\r\n    private PredictionPostProcessingLogisticRegression(d: number) {\r\n        const result = Math.floor(d + 0.5);\r\n        return SmartDrawing.CLASS_TYPE[result];\r\n    }\r\n    private GetIndexBySortDescending(d: number[]) {\r\n        let len = d.length;\r\n        let indices = new Array(len);\r\n        for (var i = 0; i < len; ++i) { indices[i] = i; }\r\n        indices.sort((a, b) => { return d[a] > d[b] ? -1 : d[a] < d[b] ? 1 : 0; });\r\n        return indices;\r\n    }\r\n    public Remove() {\r\n        // console.log('revmoe smart');\r\n    }\r\n    public Predict(d: number[][]) {\r\n\r\n        const vs = [];\r\n        for (let i of d) { vs.push(new NVector3(i[0], i[1], 0)); }\r\n        // console.log(vs);\r\n        const dotPrediction = NVector3.ComputeDotProducts(vs);\r\n        // console.log(dotPrediction);\r\n        const dotValueInterpolated = this.GetInterpolatedArray(dotPrediction, 501);\r\n        // console.log(dotValueInterpolated);\r\n        // const dotValueInterpolated = dotPrediction\r\n        // console.log(this.GetInterpolatedArray(dotPrediction, 10));\r\n        // console.log(this.scene.annotationInstance.implementation.app.model.appAnnotation.addon.smartDrawing);\r\n        console.log('*** FROM DEEP LEARNING MODELS ***');\r\n        // const predictionLosisticR = this.smartDrawing.PredictByLogisticRegression(dotValueInterpolated);\r\n        // console.debug(`pridiction:%c ${predictionLosisticR} from LR Model`, 'background: #ddb137; color: black');\r\n        const predictionMultiC = this.PredictByMultiClassification(dotValueInterpolated);\r\n        console.debug(`pridiction:%c ${predictionMultiC} from MC model`, 'background: #4e2c7e; color: white');\r\n\r\n        // console.log(d, predictionMultiC);\r\n        this.firebaseWrapper.sendData({\r\n            class: predictionMultiC,\r\n            vec: d\r\n        });\r\n\r\n        return predictionMultiC;\r\n\r\n        // console.log(prediction);\r\n        // this.GetShapeFromPrediction(prediction, vs);\r\n    }\r\n    public LinearInterpolate(before: number, after: number, atPoint: number) {\r\n        return before + (after - before) * atPoint;\r\n\r\n        // const d = new Float32Array(10);\r\n        // d[5];\r\n    }\r\n    public GetInterpolatedArray(data: number[], fitCount: number) {\r\n        let newData = {};\r\n        let springFactor = (data.length - 1) / (fitCount - 1);\r\n        newData[0] = data[0]; // for new allocation\r\n        for (let i = 1; i < fitCount - 1; i++) {\r\n            let tmp: number = i * springFactor;\r\n            let before: number = +(Math.floor(tmp)).toFixed();\r\n            let after: number = +(Math.ceil(tmp)).toFixed();\r\n            let atPoint: number = tmp - before;\r\n            newData[i] = this.LinearInterpolate(data[before], data[after], atPoint);\r\n        }\r\n        newData[fitCount - 1] = data[data.length - 1]; // for new allocation\r\n        return newData;\r\n    }\r\n}\r\n\r\n","import { SmartDrawing } from './SmartDrawing';\r\nimport { AppML } from '..';\r\nexport class Implementation {\r\n    app: AppML;\r\n    smartDrawing: SmartDrawing;\r\n    constructor(app: AppML) {\r\n        this.app = app;\r\n        this.smartDrawing = new SmartDrawing();\r\n    }\r\n}"],"names":["FirebaseWrapper","constructor","type","callBack","firebaseConfig","apiKey","authDomain","projectId","storageBucket","messagingSenderId","appId","getData","d","data","val","i","getError","console","error","sendData","SmartDrawing","modelLogisticRegression","modelMultiClassification","divText","firebaseWrapper","this","AppendDiv","LoadModelFromPublic","log","tf","callback","div","document","getElementById","createElement","insertBefore","style","marginLeft","async","file","LoadModelFromPath","PredictByLogisticRegression","undefined","tidy","tensor2d","score","predict","dataSync","PredictionPostProcessingLogisticRegression","PredictByMultiClassification","predictOut","logits","Array","from","rankingIndex","GetIndexBySortDescending","outText","probability","text","CLASS_TYPE","toFixed","push","UpdateDivWithText","winner","argMax","length","innerHTML","result","Math","floor","len","indices","sort","a","b","Remove","Predict","vs","NVector3","dotPrediction","dotValueInterpolated","GetInterpolatedArray","predictionMultiC","debug","class","vec","LinearInterpolate","before","after","atPoint","fitCount","newData","springFactor","tmp","ceil","Implementation","app","smartDrawing"],"sourceRoot":""}