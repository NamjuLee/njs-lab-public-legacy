{"version":3,"file":"static/js/14242.c32f63b6.chunk.js","mappings":"iKAEO,MAAMA,EAGTC,YAAYC,GAAa,KAFlBC,aAAO,OACPC,cAAQ,EAEXC,KAAKF,QAAUG,SAASC,eAAeL,GAGvCG,KAAKF,QAAQK,MAAMC,QAAU,OAC7BJ,KAAKF,QAAQK,MAAME,WAAa,SAEhC,MAAMC,EAAML,SAASM,cAAc,OACnCD,EAAIH,MAAMK,WAAa,OACvBF,EAAIH,MAAMM,YAAc,OACxBH,EAAIH,MAAMO,gBAAkB,OAC5BJ,EAAIH,MAAMQ,MAAQ,QAClBL,EAAIH,MAAMS,OAAS,QAEnBZ,KAAKF,QAAQe,YAAYP,GAKzBN,KAAKD,SAAW,IAAIe,EAASR,EAMjC,CACOS,UAEH,IADAf,KAAKD,SAASgB,UACPf,KAAKF,QAAQkB,kBAChBhB,KAAKF,QAAQmB,YAAYjB,KAAKF,QAAQkB,iBAE9C,EAGG,MAAMF,UAAiBI,EAAAA,GAG1BtB,YAAYU,GACRa,MAAMb,GAAK,KAHfc,SAAoCC,EAAS,KAC7CC,SAAW,EAIPtB,KAAKuB,OAAOpB,MAAMqB,SAAW,WAE7BxB,KAAKuB,OAAOpB,MAAMQ,MAAQ,OAC1BX,KAAKuB,OAAOpB,MAAMS,OAAS,QAO3Ba,EAAAA,EAAAA,IAAc,+FAA+FC,MAAON,IAEhHpB,KAAKoB,IAAMA,CAAG,IAmBlB,MAAMO,EAAY1B,SAASM,cAAc,OACzCP,KAAKF,QAAQe,YAAYc,GACzBA,EAAUC,YAAc,SACxBD,EAAUxB,MAAMqB,SAAW,WAC3BG,EAAUxB,MAAM0B,MAAQ,OAExBF,EAAUG,QAAU,KAEJ9B,KAAKF,QAAQiC,YAAc/B,KAAKF,QAAQkC,aAAehC,KAAKF,QAAQiC,YAAc/B,KAAKF,QAAQkC,aAA3G,MAEMrB,EAAQX,KAAKF,QAAQK,MAAMQ,MACjCX,KAAKF,QAAQK,MAAMQ,MAAQX,KAAKF,QAAQK,MAAMS,OAC9CZ,KAAKF,QAAQK,MAAMS,OAASD,EAE5BX,KAAKuB,OAAOZ,MAAQX,KAAKF,QAAQiC,YACjC/B,KAAKuB,OAAOX,OAASZ,KAAKF,QAAQkC,aAElChC,KAAKsB,UAAsB,GAAVW,KAAKC,EAAQ,EAIlClC,KAAKmC,OACT,CACOC,OAAOC,GAGVrC,KAAKqC,IAAIC,OACTtC,KAAKqC,IAAIE,UAA8B,GAApBvC,KAAKuB,OAAOZ,MAAkC,GAArBX,KAAKuB,OAAOX,QACxDZ,KAAKqC,IAAIG,OAAOxC,KAAKsB,UAClBtB,KAAKoB,KACJpB,KAAKqC,IAAII,UAAUzC,KAAKoB,IAAuB,IAAjBpB,KAAKoB,IAAIT,MAAgC,IAAlBX,KAAKoB,IAAIR,QAIlEyB,EAAIK,YACJL,EAAIM,IAAI,EAAG,EAAG,GAAI,EAAa,EAAVV,KAAKC,IAC1BG,EAAIO,YACJP,EAAIQ,OAIJ7C,KAAKqC,IAAIS,SAGb,CACOC,UAAUC,EAAWC,GACxB,CAEGC,QAAQF,EAAWC,GACtB,CAEGE,UAAUH,EAAWC,GACxB,CAEGG,WAAWJ,EAAWC,GACzB,CAEGI,UAAUL,EAAWC,GACxB,CAEGK,QAAQC,GACX,E","sources":["njslab/Raster/image-transform/index.ts"],"sourcesContent":["import { RendererCanvas, getImgFromURL } from '../../../lib'\r\n\r\nexport class Solution {\r\n    public divHost: HTMLElement;\r\n    public renderer: Renderer;\r\n    constructor(id: string) {\r\n        this.divHost = document.getElementById(id); \r\n\r\n        // Center align\r\n        this.divHost.style.display = 'flex';\r\n        this.divHost.style.alignItems = 'center';\r\n\r\n        const div = document.createElement('div');\r\n        div.style.marginLeft = 'auto';\r\n        div.style.marginRight = 'auto';\r\n        div.style.backgroundColor = '#555';\r\n        div.style.width = '600px';\r\n        div.style.height = '350px';\r\n\r\n        this.divHost.appendChild(div);\r\n\r\n        // TODO\r\n        // You code goes here for one time operation\r\n\r\n        this.renderer = new Renderer(div);\r\n\r\n\r\n    //     console.log(this.renderer);\r\n        // !! you should execute it for rendering\r\n        // this.start();\r\n    }\r\n    public destroy() {\r\n        this.renderer.destroy();\r\n        while (this.divHost.lastElementChild) {\r\n            this.divHost.removeChild(this.divHost.lastElementChild);\r\n        }\r\n    }\r\n}\r\n\r\nexport class Renderer extends RendererCanvas {\r\n    img: HTMLImageElement | undefined = undefined\r\n    rotation = 0.0;\r\n    constructor(div: any) {\r\n        super(div);\r\n\r\n        this.canvas.style.position = 'relative';\r\n\r\n        this.canvas.style.width = '100%';\r\n        this.canvas.style.height = '100%';\r\n\r\n        // TODO\r\n        // You code goes here for one time operation\r\n        // \r\n\r\n        // getImgFromURL('https://raw.githubusercontent.com/NamjuLee/data/master/img/person/HaminHaram.jpg').then( (img: HTMLImageElement) => {\r\n        getImgFromURL('https://raw.githubusercontent.com/NamjuLee/data/master/img/bg/zoom-James-River-Kayaking.jpg').then( (img: HTMLImageElement) => {\r\n        //     console.log(img)\r\n            this.img = img;\r\n            \r\n            // this.canvas.width = img.width;\r\n            // this.canvas.height = img.height;\r\n\r\n            \r\n            // this.hostDiv.style.width = img.width + 'px';\r\n            // this.hostDiv.style.height = img.height + 'px';\r\n\r\n            // this.ctx.canvas.width = img.width;\r\n            // this.ctx.canvas.height = img.height;\r\n            // this.ctx.beginPath();\r\n            // this.ctx.arc(100, 100, 150, 0, Math.PI * 2);\r\n            // this.ctx.closePath();\r\n            // this.ctx.fill()\r\n            // this.ctx.drawImage(img, 0, 0);\r\n            // this.hostDiv.appendChild(img)\r\n        });\r\n\r\n        const divRotate = document.createElement('div');\r\n        this.divHost.appendChild(divRotate);\r\n        divRotate.textContent = 'rotate';\r\n        divRotate.style.position = 'absolute';\r\n        divRotate.style.color = 'aqua';\r\n\r\n        divRotate.onclick = () => {\r\n        //     console.log('ro');\r\n            const max = this.divHost.clientWidth > this.divHost.clientHeight ? this.divHost.clientWidth : this.divHost.clientHeight;\r\n\r\n            const width = this.divHost.style.width;\r\n            this.divHost.style.width = this.divHost.style.height\r\n            this.divHost.style.height = width;\r\n\r\n            this.canvas.width = this.divHost.clientWidth;\r\n            this.canvas.height = this.divHost.clientHeight;\r\n\r\n            this.rotation += Math.PI * 0.5;\r\n        }\r\n\r\n\r\n        this.start();\r\n    }\r\n    public render(ctx: CanvasRenderingContext2D): void {\r\n        // TODO\r\n        // You code goes here for the rending loop\r\n        this.ctx.save();\r\n        this.ctx.translate(this.canvas.width * 0.5, this.canvas.height * 0.5)\r\n        this.ctx.rotate(this.rotation)\r\n        if(this.img) {\r\n            this.ctx.drawImage(this.img, -this.img.width * 0.5, -this.img.height * 0.5);\r\n        }\r\n\r\n\r\n        ctx.beginPath();\r\n        ctx.arc(0, 0, 50, 0, Math.PI * 2);\r\n        ctx.closePath();\r\n        ctx.fill()\r\n\r\n        // console.log(ctx)\r\n\r\n        this.ctx.restore();\r\n        // !! can stop render after this frame.\r\n        // this.isStatic = true;\r\n    }\r\n    public mouseDown(x: number, y: number): void {\r\n        // TODO\r\n    }\r\n    public mouseUp(x: number, y: number): void {\r\n        // TODO\r\n    }\r\n    public mouseDrag(x: number, y: number): void {\r\n        // TODO\r\n    }\r\n    public mouseClick(x: number, y: number): void {\r\n        // TODO\r\n    }\r\n    public mouseMove(x: number, y: number) {\r\n        // TODO\r\n    }\r\n    public keyDown(k: KeyboardEvent): void {\r\n        // TODO\r\n    }\r\n}"],"names":["Solution","constructor","id","divHost","renderer","this","document","getElementById","style","display","alignItems","div","createElement","marginLeft","marginRight","backgroundColor","width","height","appendChild","Renderer","destroy","lastElementChild","removeChild","RendererCanvas","super","img","undefined","rotation","canvas","position","getImgFromURL","then","divRotate","textContent","color","onclick","clientWidth","clientHeight","Math","PI","start","render","ctx","save","translate","rotate","drawImage","beginPath","arc","closePath","fill","restore","mouseDown","x","y","mouseUp","mouseDrag","mouseClick","mouseMove","keyDown","k"],"sourceRoot":""}