{"version":3,"file":"static/js/21030.bb121252.chunk.js","mappings":"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","sources":["njslab/Raster/AppImage/AppExpressImage/ExpressImageViewer/Renderer/index.ts","njslab/Raster/AppImage/AppExpressImage/ExpressImageViewer/Scene/index.ts","njslab/Raster/AppImage/AppExpressImage/ExpressImageViewer/index.ts"],"sourcesContent":["import { InteractionMode } from '../lib';\nimport { ExpressImageViewer } from '..';\n\nexport class Renderer {\n    public app: ExpressImageViewer;\n    public div: HTMLElement;\n    public ctx: CanvasRenderingContext2D;\n    public canvas: HTMLCanvasElement;\n\n    private _numMaxFrame = 120;\n    private _mode: InteractionMode = InteractionMode.ObserveViewer;\n    private _numFrame: number = 0;\n    constructor(app: ExpressImageViewer, div: HTMLElement) {\n        this.app = app;\n        this.div = div;\n\n\n        this.canvas = document.createElement('canvas');\n        \n        this.div.appendChild(this.canvas);\n        this.updateCanvasSize(this.div.clientWidth, this.div.clientHeight);\n        this.canvas.style.position = 'absolute'\n        this.ctx = this.canvas.getContext('2d') as CanvasRenderingContext2D;\n        \n        if (this.app.debugMode) {\n            this.canvas.style.background = 'rgba(255, 0, 0, 0.3)';\n        }\n        this.init();\n    }\n    public get mode() {\n        return this._mode;\n    }\n    public set mode (mode: InteractionMode) {\n        this._mode = mode;\n        this._numFrame = 0;\n        if (this._mode === InteractionMode.InteractiveViewer) {\n\n            this.canvas.onmouseenter = (e: MouseEvent) => {\n                this._numFrame = 0;\n                this.loop();\n            }\n            this.canvas.onmousemove = (e: MouseEvent) => {\n                if (this._numFrame >  this._numMaxFrame) {\n                    this._numFrame = 0;\n                    this.loop();\n                }\n            }\n\n            this.loop();\n        } else {\n            this.canvas.onmouseenter = (e: MouseEvent) => {\n\n            }\n            this.canvas.onmousemove = (e: MouseEvent) => {\n\n            }\n        }\n\n    }\n    public updateCanvasSize(width: number, height: number) {\n        this.canvas.width = width;\n        this.canvas.height = height;\n        // console.log(width, height);\n        // console.trace();\n    }\n    public init() {\n        this.loop();\n    }\n    public loop() {\n        if (this._numFrame++ <= this._numMaxFrame && this._mode === InteractionMode.InteractiveViewer ) {\n\n            requestAnimationFrame(() => {\n                // console.log('loop', this._numFrame);\n                this.ctx.clearRect(0, 0, this.canvas.width, this.canvas.height);\n                this.loop();\n            });\n        }\n\n        this.render();\n    }\n    public render() {\n        this.app.scene.render(this.ctx);\n    }\n    public destroy() {\n        this.div.removeChild(this.canvas);\n    }\n}","import {\n    GType,\n    renderRPoint,\n    renderPolyline, renderPolygon, renderCircle,\n    renderArrowSingle, renderArrowDouble,\n } from '../lib';\nimport { ExpressImageViewer } from '..';\nexport class Scene {\n    public app: ExpressImageViewer;\n    public projection: Projection;\n    public scale: number = 1;\n    private index: number = 0;\n    public svgRPoint: Path2D;\n    public svgNPoint: Path2D;\n    public scaleByRatio = 1;\n    constructor(app: ExpressImageViewer) {\n        this.app = app;\n        this.projection = new Projection();\n\n        this.svgRPoint = new Path2D('M9 0a9.022 9.022 0 00-9 9.041c0 4.992 5 11.761 9 19.421 4-7.659 9-14.428 9-19.42A9.022 9.022 0 009 .001V0zm0 12.652a3.85 3.85 0 113.833-3.85A3.841 3.841 0 019 12.652z');\n        this.svgNPoint = new Path2D('M26 2a2 2 0 00-2-2H2a2 2 0 00-2 2v17a2 2 0 002 2h6.757l4.276 6.33L17.31 21H24a2 2 0 002-2V2z');\n    }\n    public render(ctx: CanvasRenderingContext2D) {\n        // console.log('rendering...');\n        this.projection.widthDisplay = ctx.canvas.width;\n        this.projection.heightDisplay = ctx.canvas.height;\n\n        let x, y = 0;\n        let pos: any = []\n        // let pos = [0, 0];\n        const offset = [0, 0];\n\n        if (this.app.data) {\n            this.index = this.app.data.length;\n            while(this.index--) {\n                const d = this.app.data[this.index];\n                const scale = d.styles.width * this.scaleByRatio * d.styles.scale;\n\n                switch (d.type) {\n                    case GType.POINT_REGULAR:\n                        x = d.nodes[0].sx;\n                        y = d.nodes[0].sy;\n                        [x, y] = this.projection.toScreen(x, y);\n                        renderRPoint(ctx, d.nodes, this.svgNPoint, d.styles.colorRgba, [0, 0], this.scaleByRatio * d.styles.scale);\n                        break;\n                    case GType.POINT_NUMBERED:\n                        x = d.nodes[0].sx;\n                        y = d.nodes[0].sy;\n                        [x, y] = this.projection.toScreen(x, y);\n                        renderRPoint(ctx, d.nodes, this.svgNPoint, d.styles.colorRgba, [0, 0], this.scaleByRatio * d.styles.scale);\n                        break;\n                    case GType.POLYLINE_BENDING:\n                        pos = []\n                        for (let i = 0 ; i < d.nodes.length; ++i) {\n                            [x, y] = this.projection.toScreen(d.nodes[i].sx, d.nodes[i].sy);\n                            pos.push({ sx: x, sy: y  });\n                        }\n                        renderPolyline(ctx, pos, d.styles.colorRgba, offset, scale);\n                        break;\n                    case GType.POLYGON_GRAPH:\n                        pos = []\n                        for (let i = 0 ; i < d.nodes.length; ++i) {\n                            [x, y] = this.projection.toScreen(d.nodes[i].sx, d.nodes[i].sy);\n                            pos.push({ sx: x, sy: y  });\n                        }\n                        renderPolygon(ctx, pos, d.styles.colorRgba, offset, scale);\n                        break;\n                    case GType.RECTANGLE:\n                        pos = []\n                        for (let i = 0 ; i < d.nodes.length; ++i) {\n                            [x, y] = this.projection.toScreen(d.nodes[i].sx, d.nodes[i].sy);\n                            pos.push({ sx: x, sy: y  });\n                        }\n                        renderPolygon(ctx, pos, d.styles.colorRgba, offset, scale);\n                        break;\n                    case GType.CIRCLE:\n                        pos = []\n                        for (let i = 0 ; i < d.nodes.length; ++i) {\n                            [x, y] = this.projection.toScreen(d.nodes[i].sx, d.nodes[i].sy);\n                            pos.push({ sx: x, sy: y  });\n                        }\n                        renderCircle(ctx, pos, d.styles.colorRgba, offset, scale);\n                        break;\n                    case GType.ARROW_SINGLE:\n                        pos = []\n                        for (let i = 0 ; i < d.nodes.length; ++i) {\n                            [x, y] = this.projection.toScreen(d.nodes[i].sx, d.nodes[i].sy);\n                            pos.push({ sx: x, sy: y  });\n                        }\n                        renderArrowSingle(ctx, pos, d.styles.colorRgba, offset, scale);\n                        break;\n                    case GType.ARROW_DOUBLE:\n                        pos = []\n                        for (let i = 0 ; i < d.nodes.length; ++i) {\n                            [x, y] = this.projection.toScreen(d.nodes[i].sx, d.nodes[i].sy);\n                            pos.push({ sx: x, sy: y  });\n                        }\n                        renderArrowDouble(ctx, pos, d.styles.colorRgba, offset, scale);\n                        // renderArrowDouble(ctx, pos);\n                        break;\n                    default:\n                        break;\n\n                }\n\n\n            }\n        }\n\n\n    }\n}\nclass Projection {\n    public xCropped = 0;\n    public yCropped = 0;\n\n    public widthCropped = 0;\n    public heightCropped = 0;\n\n    public widthDisplay = 0;\n    public heightDisplay = 0;\n\n    public toScreen(x: number, y: number) {\n\n        let xx =  x - this.xCropped;\n        let yy =  y - this.yCropped;\n\n\n        xx = this.remap(xx, this.widthCropped, this.widthDisplay);\n        yy = this.remap(yy, this.heightCropped, this.heightDisplay);\n\n        return [\n            xx, yy\n        ];\n    }\n    private remap = (t: number, oldT: number, newT: number) => {\n        return t * newT  / oldT;\n    }\n}\n","import { InteractionMode } from './lib';\nimport { Renderer } from './Renderer';\nimport { Scene } from './Scene';\nexport class ExpressImageViewer {\n    public data: any = [];\n    public div: HTMLElement;\n    public renderer: Renderer;\n    public scene: Scene;\n    public width: number = 0;\n    public height: number = 0;\n    public debugMode: boolean = false;\n    constructor(div: HTMLElement, width: number, height: number) {\n        this.div = div;\n        this.width = width;\n        this.height = height;\n        this.scene = new Scene(this);\n        this.renderer = new Renderer(this, div);\n    }\n    public getCanvas() {\n        return this.renderer.canvas;\n    }\n    public updateMode(mode: InteractionMode) {\n        this.renderer.mode = mode;\n    }\n    public render() {\n        this.renderer.render();\n    }\n    public updateCanvasSize(width: number, height: number) {\n        this.renderer.updateCanvasSize(width, height);\n        this.render();\n    }\n    public updateScale(v: number) {\n        this.scene.scale = v;\n    }\n    public updateExtent(data: any, width: number, height: number ) {\n        this.scene.projection.xCropped = data.x;\n        this.scene.projection.yCropped = data.y;\n        this.scene.projection.widthCropped = data.width;\n        this.scene.projection.heightCropped = data.height;\n        \n        this.scene.projection.widthDisplay = width;\n        this.scene.projection.heightDisplay = height;\n        // console.log('projection updated', this.renderer.projection);\n        // console.log('projection updated', this);\n    }\n    public updateGeometry(data: any) {\n        if (!data) { return ; }\n        this.data = data;\n        // console.log('--------');\n        // console.log(this.data);\n        this.render();\n        \n    }\n    public destroy() {\n        this.renderer.destroy();\n    }\n}"],"names":["Renderer","constructor","app","div","ctx","canvas","_numMaxFrame","_mode","InteractionMode","_numFrame","this","document","createElement","appendChild","updateCanvasSize","clientWidth","clientHeight","style","position","getContext","debugMode","background","init","mode","onmouseenter","e","loop","onmousemove","width","height","requestAnimationFrame","clearRect","render","scene","destroy","removeChild","Scene","projection","scale","index","svgRPoint","svgNPoint","scaleByRatio","Projection","Path2D","widthDisplay","heightDisplay","x","y","pos","offset","data","length","d","styles","type","GType","nodes","sx","sy","toScreen","renderRPoint","colorRgba","i","push","renderPolyline","renderPolygon","renderCircle","renderArrowSingle","renderArrowDouble","xCropped","yCropped","widthCropped","heightCropped","remap","t","oldT","newT","xx","yy","ExpressImageViewer","renderer","getCanvas","updateMode","updateScale","v","updateExtent","updateGeometry"],"sourceRoot":""}