{"version":3,"file":"static/js/58206.dbae067a.chunk.js","mappings":"wKAKO,MAAMA,EACFC,UAEP,CACAC,YAAYC,GAOR,MAAMC,EAAI,CAAC,EAAG,EAAG,EAAG,EAAG,GACjBC,EAAI,CAAC,EAAG,EAAG,GAAI,GAAI,IAEnBC,EAAQ,IAAIC,EAAAA,GAClBD,EAAME,IAAIJ,EAAGC,GACEC,EAAMG,QAAQ,CAAC,MAA9B,MAIMC,EAAU,IAAIC,EAAAA,GACpBD,EAAQF,IAAIJ,EAAGC,EAAG,KACDK,EAAQD,QAAQ,CAAC,MAAlC,MAKMG,EAAI,CAAC,EAAG,EAAG,EAAG,GACdC,EAAI,CAAC,EAAG,EAAG,EAAG,GAEdC,EAAM,CAAC,GAEbC,EAAiBH,EAAGC,EAAGC,GACvBE,EAAmBJ,EAAGC,EAAGC,EAG7B,EAGJ,MAAME,EAAqB,CAACJ,EAAaC,EAAaC,KAElD,MAAMR,EAAQW,EAAAA,aACdX,EAAMY,IAAID,EAAAA,OAAAA,MAAgB,CAACE,MAAO,EAAGC,WAAY,CAAC,MAGlDd,EAAMe,QAAQ,CAACC,KAAM,mBAAoBC,UAAW,QAGpD,MAAMC,EAAUP,EAAAA,SAAYL,EAAG,CAAC,EAAG,IAC7Ba,EAAUR,EAAAA,SAAYJ,EAAG,CAAC,EAAG,IAEnCW,EAAQE,QACRD,EAAQC,QAER,MAAMC,EAAQV,EAAAA,SAAY,CAAC,GAAI,CAAC,EAAG,IAInCX,EAAME,IAAIgB,EAASC,EAAS,CAAEG,OAAQ,MAAOC,MAAK,KAG7CvB,EAAMG,QAAQkB,GAAeD,OAAO,GACvC,EAIAX,EAAmB,CAACH,EAAaC,EAAaC,KAChD,MAAMgB,EAAK,IAAIvB,EAAAA,GACfuB,EAAGtB,IAAII,EAAGC,GAEKiB,EAAGrB,QAAQK,EAAI,C","sources":["njslab/Workshop/workshop-ml/02_ModelLinearRegression/index.ts"],"sourcesContent":["import * as tf from '@tensorflow/tfjs';\r\nimport '@tensorflow/tfjs-backend-webgl';\r\n\r\nimport { LinearRegression, LinearRegressionGradientDescent, rSquared } from '../../../../lib';\r\n\r\nexport class Solution {\r\n    public destroy() {\r\n        \r\n    }\r\n    constructor(id: string) {\r\n    //  https://js.tensorflow.org/api/latest/\r\n    //     console.log(\"Let's learn TF JS !!\");\r\n    //     console.log(\"==============================\");\r\n\r\n\r\n\r\n        const x = [1, 2, 3, 4, 5];\r\n        const y = [0, 5, 10, 15, 20];\r\n\r\n        const model = new LinearRegression()\r\n        model.fit(x, y);\r\n        const result = model.predict([2.5]);\r\n    //     console.log(result, model.weight, model.bias);\r\n\r\n\r\n        const modelGD = new LinearRegressionGradientDescent()\r\n        modelGD.fit(x, y, 500);\r\n        const resultGD = modelGD.predict([2.5]);\r\n    //     console.log(resultGD, modelGD.weight, modelGD.bias);\r\n\r\n\r\n\r\n        const X = [1, 2, 3, 4];\r\n        const Y = [1, 3, 5, 7];\r\n\r\n        const val = [3]\r\n \r\n        linearRegression(X, Y, val);\r\n        linearRegressionTF(X, Y, val);\r\n\r\n    //     console.log('Playground done!');\r\n    }\r\n};\r\n\r\nconst linearRegressionTF = (X: number[], Y: number[], val: number[]) => {\r\n    // Define a model for linear regression.\r\n    const model = tf.sequential();\r\n    model.add(tf.layers.dense({units: 1, inputShape: [1]}));\r\n\r\n    // Prepare the model for training: Specify the loss and the optimizer.\r\n    model.compile({loss: 'meanSquaredError', optimizer: 'sgd'});\r\n\r\n    // Generate some synthetic data for training.\r\n    const x_train = tf.tensor2d(X, [4, 1]);\r\n    const y_train = tf.tensor2d(Y, [4, 1]);\r\n\r\n    x_train.print();\r\n    y_train.print();\r\n\r\n    const x_val = tf.tensor2d([3], [1, 1])\r\n//     console.log('prediction of ', x_val.toString() , 'is ...'); \r\n\r\n    // Train the model using the data.\r\n    model.fit(x_train, y_train, { epochs: 100 }).then(() => {\r\n        // Use the model to do inference on a data point the model hasn't seen before:\r\n        // Open the browser devtools to see the output\r\n        (model.predict(x_val) as any).print();\r\n    });\r\n\r\n};\r\n\r\nconst linearRegression = (X: number[], Y: number[], val: number[]) => {\r\n    const lr = new LinearRegression();\r\n    lr.fit(X, Y);\r\n\r\n    const result = lr.predict(val);\r\n//     console.log(result);\r\n\r\n    // x = [5, 7, 8, 7, 2, 17, 2, 9, 4, 11, 12, 9, 6]\r\n    // y = [99, 86, 87, 88, 111, 86, 103, 87, 94, 78, 77, 85, 86]\r\n\r\n    // 다시 봐라 이거 맞는지 확인\r\n    // console.log(rSquared(X, Y, lr.bias));\r\n}\r\n\r\n/*\r\nReference:\r\nhttps://www.tensorflow.org/js\r\nhttps://www.tensorflow.org/js/tutorials\r\nhttps://www.tensorflow.org/js/models\r\nhttps://js.tensorflow.org/api/latest/\r\n\r\n\r\n*/"],"names":["Solution","destroy","constructor","id","x","y","model","LinearRegression","fit","predict","modelGD","LinearRegressionGradientDescent","X","Y","val","linearRegression","linearRegressionTF","tf","add","units","inputShape","compile","loss","optimizer","x_train","y_train","print","x_val","epochs","then","lr"],"sourceRoot":""}