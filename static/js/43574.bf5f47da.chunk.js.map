{"version":3,"file":"static/js/43574.bf5f47da.chunk.js","mappings":"4IAEO,MAAMA,EAAmB,SAACC,GAAgG,IAAjFC,EAAgB,uDAAG,CAAC,EAAE,EAAE,GAAIC,EAAa,uDAAG,CAAC,EAAE,EAAE,GAAIC,EAAY,uDAAG,CAAC,EAAE,EAAE,GACrH,MAAMC,EAAaC,EAAAA,KACbC,EAAaD,EAAAA,KACbE,EAAaF,EAAAA,KACbG,EAAeH,EAAAA,KACfI,EAAWJ,EAAAA,KAGjBA,EAAAA,GAAqBG,EAAcP,GACnCI,EAAAA,GAAmBD,EAAYF,EAAS,IACxCG,EAAAA,GAAmBC,EAAYJ,EAAS,IACxCG,EAAAA,GAAmBE,EAAYL,EAAS,IACxCG,EAAAA,GAAiBI,EAAUN,GAG3BE,EAAAA,GAAcL,EAAUI,EAAYK,GACpCJ,EAAAA,GAAcL,EAAUM,EAAYN,GACpCK,EAAAA,GAAcL,EAAUO,EAAYP,GACpCK,EAAAA,GAAcL,EAAUQ,EAAcR,EAC1C,EAEaU,EAAuB,WACE,IADDC,EAAY,uDAAG,EAAKC,EAAmB,uDAAG,CAAC,EAAG,EAAG,GAAIC,EAAkB,uDAAG,CAAC,EAAG,EAAG,GAClHC,EAAgB,uDAAG,CAAC,EAAG,EAAG,GAE1B,MAAMC,EAAaV,EAAAA,KACbW,EAAmBX,EAAAA,KACnBY,EAAuBZ,EAAAA,KAC7BA,EAAAA,GAAiBW,EAAkB,EAAEE,KAAKC,GAAG,EAAGR,EAAc,GAAK,KAEnEN,EAAAA,GAAYU,EAAYH,EAAgBC,EAAeC,GACvDT,EAAAA,GAAcY,EAAsBD,EAAkBD,GAStD,MAAO,CACHA,aACAC,mBACAC,uBACAG,aAXiB,CACjBC,IAAKT,EACLU,OAAQT,EACRU,QAAS,IACTC,UAAW,GASnB,C,2EC/CO,MAYMC,EAAkB,SAACC,EAAkBC,GACuC,IAArFC,EAA6B,uDAAGC,eAAeC,OAASD,eAAeE,SACvE,MAAMC,EAASN,EAAOO,aAAa,CAC/BC,KAAMP,EAAKQ,WACXC,MAAOR,EACPS,kBAAkB,IAItB,OAFA,IAAIC,aAAaN,EAAOO,kBAAkBC,IAAIb,GAC9CK,EAAOS,QACAT,CACX,E,eCpBO,MAAMU,EAAiB,SAACC,EAAgBC,EAAeC,GAA2C,IAA9BvB,EAAY,uDAAG,CAAC,EAAG,EAAG,GAC7F,MAAMwB,EAAM5B,KAAK6B,IAAIH,EAAQ1B,KAAKC,GAAK,KACjC6B,EAAM9B,KAAK+B,IAAIL,EAAQ1B,KAAKC,GAAK,KACjC+B,EAAMhC,KAAK6B,IAAIF,EAAM3B,KAAKC,GAAK,KAC/BgC,EAAMjC,KAAK+B,IAAIJ,EAAM3B,KAAKC,GAAK,KACrC,OAAOiC,EAAAA,GAAgBT,EAASG,EAAMK,EAAM7B,EAAO,GAAIqB,EAASK,EAAM1B,EAAO,IAAKqB,EAASG,EAAMI,EAAM5B,EAAO,GAClH,EA8Ba+B,EAAa,WAAmF,IAAlFV,EAAc,uDAAG,EAAGW,EAAS,uDAAG,GAAIC,EAAS,uDAAG,GAAIjC,EAAY,uDAAG,CAAC,EAAG,EAAG,GACjG,GAAIgC,EAAI,GAAKC,EAAI,EAAG,OACpB,IACIC,EADAC,EAAM,GAEV,IAAK,IAAIC,EAAI,EAAGA,EAAIJ,EAAGI,IAAK,CACxB,IAAIC,EAAc,GAClB,IAAK,IAAIC,EAAI,EAAGA,EAAIL,EAAGK,IACnBJ,EAAKd,EAAeC,EAAY,IAAJe,GAAWJ,EAAI,GAAQ,IAAJM,GAAWL,EAAI,GAAIjC,GAClEqC,EAAIE,KAAKL,GAEbC,EAAII,KAAKF,EACb,CAEA,IACIG,EAAUC,EAAUC,EAAUC,EAD9BC,EAAS,GAAWC,EAAS,GAGjC,IAAK,IAAIT,EAAI,EAAGA,EAAIJ,EAAI,EAAGI,IACvB,IAAK,IAAIE,EAAI,EAAGA,EAAIL,EAAI,EAAGK,IACvBE,EAAKL,EAAIC,GAAGE,GACZG,EAAKN,EAAIC,EAAI,GAAGE,GAChBI,EAAKP,EAAIC,EAAI,GAAGE,EAAI,GACpBK,EAAKR,EAAIC,GAAGE,EAAI,GAGhBM,EAAOL,KAAK,CAERC,EAAG,GAAIA,EAAG,GAAIA,EAAG,GAAIC,EAAG,GAAIA,EAAG,GAAIA,EAAG,GAAIE,EAAG,GAAIA,EAAG,GAAIA,EAAG,GAG3DF,EAAG,GAAIA,EAAG,GAAIA,EAAG,GAAIC,EAAG,GAAIA,EAAG,GAAIA,EAAG,GAAIC,EAAG,GAAIA,EAAG,GAAIA,EAAG,KAI/DE,EAAON,KAAK,CAERC,EAAG,GAAKnB,EAAQmB,EAAG,GAAKnB,EAAQmB,EAAG,GAAKnB,EACxCoB,EAAG,GAAKpB,EAAQoB,EAAG,GAAKpB,EAAQoB,EAAG,GAAKpB,EACxCsB,EAAG,GAAKtB,EAAQsB,EAAG,GAAKtB,EAAQsB,EAAG,GAAKtB,EAGxCoB,EAAG,GAAKpB,EAAQoB,EAAG,GAAKpB,EAAQoB,EAAG,GAAKpB,EACxCqB,EAAG,GAAKrB,EAAQqB,EAAG,GAAKrB,EAAQqB,EAAG,GAAKrB,EACxCsB,EAAG,GAAKtB,EAAQsB,EAAG,GAAKtB,EAAQsB,EAAG,GAAKtB,IAIpD,MAAO,CACHyB,WAAY,IAAI9B,aAAa4B,EAAOG,QACpCC,WAAY,IAAIhC,aAAa6B,EAAOE,QAE5C,EAUaE,EAAWC,IAEpBA,EAAGC,WAAqBC,IAAbF,EAAGC,MAAsB,kBAAoBD,EAAGC,MAC3DD,EAAGG,sBAA2CD,IAAxBF,EAAGG,iBAAiC,MAAQH,EAAGG,iBACrEH,EAAGI,sBAA2CF,IAAxBF,EAAGI,iBAAiC,MAAQJ,EAAGI,iBACrEJ,EAAGK,uBAA6CH,IAAzBF,EAAGK,kBAAkC,MAAQL,EAAGK,kBACvEL,EAAGM,eAA6BJ,IAAjBF,EAAGM,UAA0B,OAASN,EAAGM,UACxDN,EAAGO,mBAAqCL,IAArBF,EAAGO,cAA8B,kBAAoBP,EAAGO,cAC3EP,EAAGQ,aAAyBN,IAAfF,EAAGQ,QAAwB,IAAMR,EAAGQ,QAoDjD,MAAO,CACHd,OAnDQ,i8BAoDRe,SA5BU,uqBAaeT,EAAGI,iBAAgB,+FAEvBJ,EAAGQ,QAAO,uEAETR,EAAGK,kBAAiB,mDAA2CL,EAAGM,UAAS,kEAE3EN,EAAGK,kBAAiB,sCAA8BL,EAAGM,UAAS,6EAE3DN,EAAGG,iBAAgB,8EACDH,EAAGC,MAAK,2CAAmCD,EAAGO,cAAa,4EAOzG,ECjJCG,EAAeC,EAAQ,OAGtB,MAAMC,EA6BTC,YAAYC,GAAa,KA5BzBC,aAAO,OACPC,YAAM,OACNC,SAAG,OACH/D,YAAM,OACNgE,YAAM,OACNxD,UAAI,OACJyD,cAAQ,OACRC,aAAuB,EAAK,KAE5BC,YAAM,OAENC,mBAAa,OACbC,sBAAgB,OAChBC,iBAAW,OACXC,kBAAY,OACZC,2BAAqB,OAErBC,sBAAgB,OAChBC,kBAAY,OACZC,kBAAY,OACZC,iBAAW,OAEXpG,SAAWkD,EAAAA,GAAgB,EAAG,EAAG,GAAG,KAIpCmD,gBAAU,OA6NHC,KAAO,KAGNC,KAAKb,aACLa,KAAKvG,SAAS,IAAM,IACpBuG,KAAKvG,SAAS,IAAM,IACpBuG,KAAKvG,SAAS,IAAM,KAEpBuG,KAAKvG,SAAW,CAAC,EAAG,EAAG,GAG3BuG,KAAKC,UACDD,KAAKb,cACLa,KAAKF,WAAaI,sBAAsBF,KAAKD,MACjD,EAxOAC,KAAKlB,QAAUqB,SAASC,eAAevB,GAGvCmB,KAAKjB,OAASoB,SAASE,cAAc,UACrCL,KAAKlB,QAAQwB,YAAYN,KAAKjB,QAE9BiB,KAAKO,YACT,CACAC,mBACI,IAAKC,UAAUC,IAAO,MAAM,IAAIC,MAAM,sBAEtC,MAAMC,QAAgBH,UAAUC,IAAIG,eAAe,CAC/CC,gBAAiB,qBAIrB,IAAKF,EAAW,MAAM,IAAID,MAAM,oBAEhC,MAAM1F,QAAe2F,EAAQG,gBAC7Bf,KAAKhB,IAAMgB,KAAKjB,OAAOiC,WAAW,UAElC,MAAM/B,EAASwB,UAAUC,IAAIO,yBAA2BR,UAAUC,IAAIO,2BAA6BjB,KAAKhB,IAAIkC,mBAAmBN,GACtGO,OAAOC,iBAChCpB,KAAKjB,OAAOsC,MAAQrB,KAAKlB,QAAQwC,YACjCtB,KAAKjB,OAAOwC,OAASvB,KAAKlB,QAAQ0C,aAClCxB,KAAKhB,IAAIyC,UAAU,CAEfxG,SAAQgE,SAERyC,UAAW,WAGf1B,KAAKvE,KAAO,CAAE4F,MAAOrB,KAAKjB,OAAOsC,MAAOE,OAAQvB,KAAKjB,OAAOwC,QAC5DvB,KAAK/E,OAASA,EACd+E,KAAKf,OAASA,EAEde,KAAKZ,OAAS,IAAIuC,EAAO3B,MAEzBA,KAAK4B,aAAa5B,KAAK/E,OAAQ+E,KAAKf,OACxC,CAEAuB,mBAAmBvF,EAAmBgE,GASlC,MAAMlB,EAAkB,CACpBC,MAAO,iBAEXD,EAAGC,WAAqBC,IAAbF,EAAGC,MAAsB,gBAAkBD,EAAGC,MACzDD,EAAGG,sBAA2CD,IAAxBF,EAAGG,iBAAiC,MAAQH,EAAGG,iBACrEH,EAAGI,sBAA2CF,IAAxBF,EAAGI,iBAAiC,MAAQJ,EAAGI,iBACrEJ,EAAGK,uBAA6CH,IAAzBF,EAAGK,kBAAkC,MAAQL,EAAGK,kBACvEL,EAAGM,eAA6BJ,IAAjBF,EAAGM,UAA0B,OAASN,EAAGM,UACxDN,EAAGO,mBAAqCL,IAArBF,EAAGO,cAA8B,kBAAoBP,EAAGO,cAO3E,IAAIuD,EDkDc9D,KACf,CACH+D,OAAQhE,EAAQC,GAChBN,OAAQb,EAAW,EAAG,GAAI,GAAI,CAAC,EAAG,EAAG,MCrD3BmF,CAAUhE,GAGpBiC,KAAKL,aAAe3E,EAAgBC,EAAQ4G,EAAIpE,OAAOE,YACvDqC,KAAKJ,aAAe5E,EAAgBC,EAAQ4G,EAAIpE,OAAOI,YAGvDmC,KAAKN,iBAAmBmC,EAAIpE,OAAOE,WAAWqE,OAAS,EAEvD,MAAMF,EAASD,EAAIC,OAEnB9B,KAAKd,SAAWjE,EAAOgH,qBAAqB,CACxCC,OAAQ,OACRzE,OAAQ,CACJ0E,OAAQlH,EAAOmH,mBAAmB,CAC9BC,KAAMP,EAAOrE,SAEjB6E,WAAY,OAEZC,QAAS,CACL,CACIC,YAAa,GACbC,WAAY,CAAC,CACTC,eAAgB,EAChBzD,OAAQ,YACR0D,OAAQ,KAGhB,CACIH,YAAa,GACbC,WAAY,CAAC,CACTC,eAAgB,EAChBzD,OAAQ,YACR0D,OAAQ,OAKxBnE,SAAU,CACN2D,OAAQlH,EAAOmH,mBAAmB,CAC9BC,KAAMP,EAAOtD,WAEjB8D,WAAY,OACZM,QAAS,CACL,CACI3D,OAAQe,KAAKf,UAIzB4D,UAAW,CACPC,SAAU,iBAGdC,aAAc,CACV9D,OAAQ,cACR+D,mBAAmB,EACnBC,aAAc,UAKtBjD,KAAKX,cAAgBpE,EAAOO,aAAa,CACrCC,KAAM,GACNE,MAAOP,eAAe8H,QAAU9H,eAAeE,WAInD0E,KAAKV,iBAAmBrE,EAAOkI,gBAAgB,CAC3CjB,OAAQlC,KAAKd,SAASkE,mBAAmB,GACzCC,QAAS,CAAC,CACNC,QAAS,EACTC,SAAU,CACNhI,OAAQyE,KAAKX,cACbsD,OAAQ,EACRlH,KAAM,QASlB,IAAI+H,EAAc,IAAI3H,aAAamE,KAAKZ,OAAOqE,GAAG9I,aAAaC,KAC3D8I,EAAgBF,EAIpB,MAAMG,EAAsB1I,EAAOO,aAAa,CAC5CC,KAAM,IACNE,MAAOP,eAAe8H,QAAU9H,eAAeE,WAG7CsI,EAAwB3I,EAAOO,aAAa,CAC9CC,KAAM,GACNE,MAAOP,eAAe8H,QAAU9H,eAAeE,WAGnDL,EAAO4I,MAAMC,YAAYH,EAAqB,EAAG3D,KAAKZ,OAAOqE,GAAGjJ,sBAChES,EAAO4I,MAAMC,YAAYF,EAAuB,EAAGF,GACnDzI,EAAO4I,MAAMC,YAAYF,EAAuB,GAAIJ,GAE3BvI,EAAOkI,gBAAgB,CAC5CjB,OAAQlC,KAAKd,SAASkE,mBAAmB,GACzCC,QAAS,CACL,CACIC,QAAS,EACTC,SAAU,CACNhI,OAAQoI,EACRhB,OAAQ,EACRlH,KAAM,MAGd,CACI6H,QAAS,EACTC,SAAU,CACNhI,OAAQqI,EACRjB,OAAQ,EACRlH,KAAM,QAMtBuE,KAAKT,YAAcS,KAAKhB,IAAI+E,oBAAoBC,aAMhDhE,KAAKP,sBAAwB,CAEzBwE,iBAAkB,CAAC,CACfC,KAAMlE,KAAKT,YACX4E,WAAY,CAAEC,EAAG,EAAKC,EAAG,EAAKC,EAAG,EAAKC,EAAG,GACzCC,OAAQ,QACRC,QAAS,WAejBzE,KAAKF,WAAaI,sBAAsBF,KAAKD,KACjD,CAkBOE,UACHD,KAAKZ,OAAOsF,SAEZ,MAAMf,EAAsB3D,KAAK/E,OAAOO,aAAa,CACjDC,KAAM,IACNE,MAAOP,eAAe8H,QAAU9H,eAAeE,WAGrB0E,KAAK/E,OAAOO,aAAa,CACnDC,KAAM,GACNE,MAAOP,eAAe8H,QAAU9H,eAAeE,WAInD1B,EAAAA,GAAYoG,KAAKZ,OAAOuF,aAAc3E,KAAKZ,OAAOwF,aAClDhL,EAAAA,GAAeoG,KAAKZ,OAAOuF,aAAc3E,KAAKZ,OAAOuF,cAErD3E,KAAK/E,OAAO4I,MAAMC,YAAYH,EAAqB,GAAI3D,KAAKZ,OAAOwF,aACnE5E,KAAK/E,OAAO4I,MAAMC,YAAYH,EAAqB,IAAK3D,KAAKZ,OAAOuF,cAIpE3E,KAAKT,YAAcS,KAAKhB,IAAI+E,oBAAoBC,aAChDhE,KAAKP,sBAAsBwE,iBAAiB,GAAGC,KAAOlE,KAAKT,YAC3D,MAAMsF,EAAiB7E,KAAK/E,OAAO6J,uBAC7BC,EAAaF,EAAeG,gBAAgBhF,KAAKP,uBAEvDsF,EAAWE,YAAYjF,KAAKd,UAC5B6F,EAAWG,gBAAgB,EAAGlF,KAAKL,cAEnCoF,EAAWG,gBAAgB,EAAGlF,KAAKJ,cACnCmF,EAAWI,aAAa,EAAGnF,KAAKV,kBAEhCyF,EAAWK,KAAKpF,KAAKN,kBACrBqF,EAAWM,MAEXrF,KAAK/E,OAAO4I,MAAMyB,OAAO,CAACT,EAAeU,UAC7C,CACOC,UAKH,IAJAxF,KAAK/E,OAAOuK,UAEZC,qBAAqBzF,KAAKF,YAEnBE,KAAKlB,QAAQ4G,kBAChB1F,KAAKlB,QAAQ6G,YAAY3F,KAAKlB,QAAQ4G,iBAE9C,EAIJ,MAAM/D,EAeF/C,YAAYgH,GAAqB,KAd1BA,cAAQ,OACR7G,YAAM,OAEN4F,kBAAY,OACZC,iBAAW,OACXiB,eAAS,OAETC,aAAO,OACPC,cAAQ,OACRtM,SAAWkD,EAAAA,GAAgB,EAAG,EAAG,GAAG,KACpCnD,YAAcmD,EAAAA,GAAgB,EAAG,EAAG,GAAG,KACvCyC,YAAM,OAENqE,QAAE,EAELzD,KAAK4F,SAAWA,EAChB5F,KAAKjB,OAAS6G,EAAS7G,OAEvBiB,KAAK2E,aAAe/K,EAAAA,KACpBoG,KAAK4E,YAAchL,EAAAA,KACnBoG,KAAK6F,UAAYjM,EAAAA,KACjBoG,KAAK8F,QAAUlM,EAAAA,KACfoG,KAAK+F,SAAWnM,EAAAA,KAChBoG,KAAKyD,IAAKxJ,EAAAA,EAAAA,GAAqB+F,KAAKjB,OAAOsC,MAAQrB,KAAKjB,OAAOwC,QAC/DvB,KAAK+F,SAAW/F,KAAKyD,GAAGjJ,qBAGxBwF,KAAKZ,OAASX,EAAauB,KAAKjB,OAAQiB,KAAKyD,GAAG9I,aAEpD,CACO+J,SACH,MAAMsB,EAAUhG,KAAKyD,GAAGlJ,iBACxByF,KAAK8F,QAAU9F,KAAKZ,OAAO6G,OAC3BrM,EAAAA,GAAcoG,KAAK+F,SAAUC,EAAShG,KAAK8F,UAE3CxM,EAAAA,EAAAA,GAAiB0G,KAAK4E,YAAa5E,KAAKxG,YAAawG,KAAKvG,UAC1DG,EAAAA,GAAcoG,KAAK6F,UAAW7F,KAAK+F,SAAU/F,KAAK4E,YACtD,E,0LCxWG,SAASsB,IACd,IAAIC,EAAM,IAAIC,EAAAA,GAAoB,GAQlC,OANIA,EAAAA,IAAuBvK,eACzBsK,EAAI,GAAK,EACTA,EAAI,GAAK,EACTA,EAAI,GAAK,GAGJA,CACT,CAqCO,SAASE,EAAWC,EAAGC,EAAGC,GAC/B,IAAIL,EAAM,IAAIC,EAAAA,GAAoB,GAIlC,OAHAD,EAAI,GAAKG,EACTH,EAAI,GAAKI,EACTJ,EAAI,GAAKK,EACFL,CACT,CAwCO,SAASM,EAAIN,EAAK5B,EAAGD,GAI1B,OAHA6B,EAAI,GAAK5B,EAAE,GAAKD,EAAE,GAClB6B,EAAI,GAAK5B,EAAE,GAAKD,EAAE,GAClB6B,EAAI,GAAK5B,EAAE,GAAKD,EAAE,GACX6B,CACT,CAUO,SAASO,EAASP,EAAK5B,EAAGD,GAI/B,OAHA6B,EAAI,GAAK5B,EAAE,GAAKD,EAAE,GAClB6B,EAAI,GAAK5B,EAAE,GAAKD,EAAE,GAClB6B,EAAI,GAAK5B,EAAE,GAAKD,EAAE,GACX6B,CACT,CAgIO,SAASQ,EAAYR,EAAK5B,EAAGD,EAAGsC,GAIrC,OAHAT,EAAI,GAAK5B,EAAE,GAAKD,EAAE,GAAKsC,EACvBT,EAAI,GAAK5B,EAAE,GAAKD,EAAE,GAAKsC,EACvBT,EAAI,GAAK5B,EAAE,GAAKD,EAAE,GAAKsC,EAChBT,CACT,CAkDO,SAASU,EAAOV,EAAK5B,GAI1B,OAHA4B,EAAI,IAAM5B,EAAE,GACZ4B,EAAI,IAAM5B,EAAE,GACZ4B,EAAI,IAAM5B,EAAE,GACL4B,CACT,CAuBO,SAASW,EAAUX,EAAK5B,GAC7B,IAAI+B,EAAI/B,EAAE,GACNgC,EAAIhC,EAAE,GACNiC,EAAIjC,EAAE,GACNwC,EAAMT,EAAIA,EAAIC,EAAIA,EAAIC,EAAIA,EAU9B,OARIO,EAAM,IAERA,EAAM,EAAItM,KAAKuM,KAAKD,IAGtBZ,EAAI,GAAK5B,EAAE,GAAKwC,EAChBZ,EAAI,GAAK5B,EAAE,GAAKwC,EAChBZ,EAAI,GAAK5B,EAAE,GAAKwC,EACTZ,CACT,CAqBO,SAASc,EAAMd,EAAK5B,EAAGD,GAC5B,IAAI4C,EAAK3C,EAAE,GACP4C,EAAK5C,EAAE,GACP6C,EAAK7C,EAAE,GACP8C,EAAK/C,EAAE,GACPgD,EAAKhD,EAAE,GACPiD,EAAKjD,EAAE,GAIX,OAHA6B,EAAI,GAAKgB,EAAKI,EAAKH,EAAKE,EACxBnB,EAAI,GAAKiB,EAAKC,EAAKH,EAAKK,EACxBpB,EAAI,GAAKe,EAAKI,EAAKH,EAAKE,EACjBlB,CACT,CAgGO,SAASqB,EAAcrB,EAAK5B,EAAGkD,GACpC,IAAInB,EAAI/B,EAAE,GACNgC,EAAIhC,EAAE,GACNiC,EAAIjC,EAAE,GACNmD,EAAID,EAAE,GAAKnB,EAAImB,EAAE,GAAKlB,EAAIkB,EAAE,IAAMjB,EAAIiB,EAAE,IAK5C,OAJAC,EAAIA,GAAK,EACTvB,EAAI,IAAMsB,EAAE,GAAKnB,EAAImB,EAAE,GAAKlB,EAAIkB,EAAE,GAAKjB,EAAIiB,EAAE,KAAOC,EACpDvB,EAAI,IAAMsB,EAAE,GAAKnB,EAAImB,EAAE,GAAKlB,EAAIkB,EAAE,GAAKjB,EAAIiB,EAAE,KAAOC,EACpDvB,EAAI,IAAMsB,EAAE,GAAKnB,EAAImB,EAAE,GAAKlB,EAAIkB,EAAE,IAAMjB,EAAIiB,EAAE,KAAOC,EAC9CvB,CACT,CAUO,SAASwB,EAAcxB,EAAK5B,EAAGkD,GACpC,IAAInB,EAAI/B,EAAE,GACNgC,EAAIhC,EAAE,GACNiC,EAAIjC,EAAE,GAIV,OAHA4B,EAAI,GAAKG,EAAImB,EAAE,GAAKlB,EAAIkB,EAAE,GAAKjB,EAAIiB,EAAE,GACrCtB,EAAI,GAAKG,EAAImB,EAAE,GAAKlB,EAAIkB,EAAE,GAAKjB,EAAIiB,EAAE,GACrCtB,EAAI,GAAKG,EAAImB,EAAE,GAAKlB,EAAIkB,EAAE,GAAKjB,EAAIiB,EAAE,GAC9BtB,CACT,CAWO,SAASyB,EAAczB,EAAK5B,EAAGsD,GAEpC,IAAIC,EAAKD,EAAE,GACPE,EAAKF,EAAE,GACPG,EAAKH,EAAE,GACPI,EAAKJ,EAAE,GACPvB,EAAI/B,EAAE,GACNgC,EAAIhC,EAAE,GACNiC,EAAIjC,EAAE,GAGN2D,EAAMH,EAAKvB,EAAIwB,EAAKzB,EACpB4B,EAAMH,EAAK1B,EAAIwB,EAAKtB,EACpB4B,EAAMN,EAAKvB,EAAIwB,EAAKzB,EAEpB+B,EAAON,EAAKK,EAAMJ,EAAKG,EACvBG,EAAON,EAAKE,EAAMJ,EAAKM,EACvBG,EAAOT,EAAKK,EAAMJ,EAAKG,EAEvBM,EAAU,EAALP,EAYT,OAXAC,GAAOM,EACPL,GAAOK,EACPJ,GAAOI,EAEPH,GAAQ,EACRC,GAAQ,EACRC,GAAQ,EAERpC,EAAI,GAAKG,EAAI4B,EAAMG,EACnBlC,EAAI,GAAKI,EAAI4B,EAAMG,EACnBnC,EAAI,GAAKK,EAAI4B,EAAMG,EACZpC,CACT,CAUO,SAASsC,EAAQtC,EAAK5B,EAAGD,EAAGoE,GACjC,IAAIC,EAAI,GACJvE,EAAI,GAaR,OAXAuE,EAAE,GAAKpE,EAAE,GAAKD,EAAE,GAChBqE,EAAE,GAAKpE,EAAE,GAAKD,EAAE,GAChBqE,EAAE,GAAKpE,EAAE,GAAKD,EAAE,GAEhBF,EAAE,GAAKuE,EAAE,GACTvE,EAAE,GAAKuE,EAAE,GAAKlO,KAAK+B,IAAIkM,GAAOC,EAAE,GAAKlO,KAAK6B,IAAIoM,GAC9CtE,EAAE,GAAKuE,EAAE,GAAKlO,KAAK6B,IAAIoM,GAAOC,EAAE,GAAKlO,KAAK+B,IAAIkM,GAE9CvC,EAAI,GAAK/B,EAAE,GAAKE,EAAE,GAClB6B,EAAI,GAAK/B,EAAE,GAAKE,EAAE,GAClB6B,EAAI,GAAK/B,EAAE,GAAKE,EAAE,GACX6B,CACT,CAUO,SAASyC,EAAQzC,EAAK5B,EAAGD,EAAGoE,GACjC,IAAIC,EAAI,GACJvE,EAAI,GAaR,OAXAuE,EAAE,GAAKpE,EAAE,GAAKD,EAAE,GAChBqE,EAAE,GAAKpE,EAAE,GAAKD,EAAE,GAChBqE,EAAE,GAAKpE,EAAE,GAAKD,EAAE,GAEhBF,EAAE,GAAKuE,EAAE,GAAKlO,KAAK6B,IAAIoM,GAAOC,EAAE,GAAKlO,KAAK+B,IAAIkM,GAC9CtE,EAAE,GAAKuE,EAAE,GACTvE,EAAE,GAAKuE,EAAE,GAAKlO,KAAK+B,IAAIkM,GAAOC,EAAE,GAAKlO,KAAK6B,IAAIoM,GAE9CvC,EAAI,GAAK/B,EAAE,GAAKE,EAAE,GAClB6B,EAAI,GAAK/B,EAAE,GAAKE,EAAE,GAClB6B,EAAI,GAAK/B,EAAE,GAAKE,EAAE,GACX6B,CACT,CAUO,SAAS0C,EAAQ1C,EAAK5B,EAAGD,EAAGoE,GACjC,IAAIC,EAAI,GACJvE,EAAI,GAaR,OAXAuE,EAAE,GAAKpE,EAAE,GAAKD,EAAE,GAChBqE,EAAE,GAAKpE,EAAE,GAAKD,EAAE,GAChBqE,EAAE,GAAKpE,EAAE,GAAKD,EAAE,GAEhBF,EAAE,GAAKuE,EAAE,GAAKlO,KAAK+B,IAAIkM,GAAOC,EAAE,GAAKlO,KAAK6B,IAAIoM,GAC9CtE,EAAE,GAAKuE,EAAE,GAAKlO,KAAK6B,IAAIoM,GAAOC,EAAE,GAAKlO,KAAK+B,IAAIkM,GAC9CtE,EAAE,GAAKuE,EAAE,GAETxC,EAAI,GAAK/B,EAAE,GAAKE,EAAE,GAClB6B,EAAI,GAAK/B,EAAE,GAAKE,EAAE,GAClB6B,EAAI,GAAK/B,EAAE,GAAKE,EAAE,GACX6B,CACT,CAQO,SAAS2C,EAAMvE,EAAGD,GACvB,IAAI4C,EAAK3C,EAAE,GACP4C,EAAK5C,EAAE,GACP6C,EAAK7C,EAAE,GACP8C,EAAK/C,EAAE,GACPgD,EAAKhD,EAAE,GACPiD,EAAKjD,EAAE,GAGPyE,EAFOtO,KAAKuM,KAAKE,EAAKA,EAAKC,EAAKA,EAAKC,EAAKA,GACnC3M,KAAKuM,KAAKK,EAAKA,EAAKC,EAAKA,EAAKC,EAAKA,GAE1CyB,EAASD,GA9RR,SAAaxE,EAAGD,GACrB,OAAOC,EAAE,GAAKD,EAAE,GAAKC,EAAE,GAAKD,EAAE,GAAKC,EAAE,GAAKD,EAAE,EAC9C,CA4RsB2E,CAAI1E,EAAGD,GAAKyE,EAChC,OAAOtO,KAAKyO,KAAKzO,KAAK0O,IAAI1O,KAAK2O,IAAIJ,GAAS,GAAI,GAClD,CAyDO,IAAIK,EAAM3C,GAkDI,WACnB,IAAI4C,EAAMpD,GA8BZ,CA/BqB,E","sources":["njslab/Infrastructure/WebGPU/Util/MatUtil.ts","njslab/Infrastructure/WebGPU/WebGPU_11_Light/shaders/shaders.ts","njslab/Infrastructure/WebGPU/WebGPU_11_Light/Geometry/Sphere.ts","njslab/Infrastructure/WebGPU/WebGPU_11_Light/index.ts","../node_modules/gl-matrix/esm/vec3.js"],"sourcesContent":["import { vec3, mat4 } from 'gl-matrix';\n\nexport const createTransforms = (modelMat:mat4, translation:vec3 = [0,0,0], rotation:vec3 = [0,0,0], scaling:vec3 = [1,1,1]) => {\n    const rotateXMat = mat4.create();\n    const rotateYMat = mat4.create();\n    const rotateZMat = mat4.create();   \n    const translateMat = mat4.create();\n    const scaleMat = mat4.create();\n\n    //perform individual transformations\n    mat4.fromTranslation(translateMat, translation);\n    mat4.fromXRotation(rotateXMat, rotation[0]);\n    mat4.fromYRotation(rotateYMat, rotation[1]);\n    mat4.fromZRotation(rotateZMat, rotation[2]);\n    mat4.fromScaling(scaleMat, scaling);\n\n    //combine all transformation matrices together to form a final transform matrix: modelMat\n    mat4.multiply(modelMat, rotateXMat, scaleMat);\n    mat4.multiply(modelMat, rotateYMat, modelMat);        \n    mat4.multiply(modelMat, rotateZMat, modelMat);\n    mat4.multiply(modelMat, translateMat, modelMat);\n};\n\nexport const createViewProjection = (respectRatio = 1.0, cameraPosition:vec3 = [2, 2, 4], lookDirection:vec3 = [0, 0, 0], \n    upDirection:vec3 = [0, 1, 0]) => {\n\n    const viewMatrix = mat4.create();\n    const projectionMatrix = mat4.create();       \n    const viewProjectionMatrix = mat4.create();\n    mat4.perspective(projectionMatrix, 2*Math.PI/5, respectRatio, 0.1, 100.0);\n\n    mat4.lookAt(viewMatrix, cameraPosition, lookDirection, upDirection);\n    mat4.multiply(viewProjectionMatrix, projectionMatrix, viewMatrix);\n\n    const cameraOption = {\n        eye: cameraPosition,\n        center: lookDirection,\n        zoomMax: 100,\n        zoomSpeed: 2\n    };\n\n    return {\n        viewMatrix,\n        projectionMatrix,\n        viewProjectionMatrix,\n        cameraOption\n    }\n};","export const CreateGPUBufferUint = (device:GPUDevice, data:Uint32Array, \n    usageFlag:GPUBufferUsageFlags = GPUBufferUsage.INDEX | GPUBufferUsage.COPY_DST) => {\n    const buffer = device.createBuffer({\n        size: data.byteLength,\n        usage: usageFlag,\n        mappedAtCreation: true\n    });\n    new Uint32Array(buffer.getMappedRange()).set(data);\n    buffer.unmap();\n    return buffer;\n}\n\nexport const CreateGPUBuffer = (device:GPUDevice, data:Float32Array, \n    usageFlag:GPUBufferUsageFlags = GPUBufferUsage.VERTEX | GPUBufferUsage.COPY_DST) => {\n    const buffer = device.createBuffer({\n        size: data.byteLength,\n        usage: usageFlag,\n        mappedAtCreation: true\n    });\n    new Float32Array(buffer.getMappedRange()).set(data);\n    buffer.unmap();\n    return buffer;\n}\n\nexport const Shaders = () => {\n    const vertex = `\n        struct Output {\n            @builtin(position) Position : vec4<f32>,\n            @location(0) vColor : vec4<f32>,\n        };\n        @vertex\n        fn main(@location(0) pos: vec4<f32>, @location(1) color: vec4<f32>) -> Output {\n            var output: Output;\n            output.Position = pos;\n            output.vColor = color;\n            return output;\n        }`;\n\n    const fragment = `\n        @fragment\n        fn main(@location(0) vColor: vec4<f32>) -> @location(0) vec4<f32> {\n            return vColor;\n        }`;\n\n    return {\n        vertex, \n        fragment\n    };\n}\n\nexport const ShadersOld = () => {\n    const vertex = `\n        [[location(0)]] var<in> position : vec4<f32>;\n        [[location(1)]] var<in> color : vec4<f32>;\n        [[builtin(position)]] var<out> Position : vec4<f32>;\n        [[location(0)]] var<out> vColor : vec4<f32>;\n\n        [[stage(vertex)]]\n        fn main() -> void {\n            Position = position;\n            vColor = color;\n            return;\n        }`;\n\n    const fragment = `\n        [[location(0)]] var<in> vColor : vec4<f32>;\n        [[location(0)]] var<out> fragColor : vec4<f32>;\n\n        [[stage(fragment)]]\n        fn main() -> void {\n            fragColor = vColor;\n            return;\n        }`;\n\n    return {\n        vertex, \n        fragment\n    };\n}\n","import { vec3 } from 'gl-matrix';\n\nexport const SpherePosition = (radius: number, theta: number, phi: number, center: vec3 = [0, 0, 0]) => {\n    const snt = Math.sin(theta * Math.PI / 180);\n    const cnt = Math.cos(theta * Math.PI / 180);\n    const snp = Math.sin(phi * Math.PI / 180);\n    const cnp = Math.cos(phi * Math.PI / 180);\n    return vec3.fromValues(radius * snt * cnp + center[0], radius * cnt + center[1], -radius * snt * snp + center[2]);\n}\nexport const SphereWireframeData = (radius: number, u: number, v: number, center: vec3 = [0, 0, 0]) => {\n    if (u < 2 || v < 2) return;\n    let pts = [];\n    let pt: vec3;\n    for (let i = 0; i < u; i++) {\n        let pt1: vec3[] = [];\n        for (let j = 0; j < v; j++) {\n            pt = SpherePosition(radius, i * 180 / (u - 1), j * 360 / (v - 1), center);\n            pt1.push(pt);\n        }\n        pts.push(pt1);\n    }\n\n    let p = [] as any;\n    let p0, p1, p2, p3;\n    for (let i = 0; i < u - 1; i++) {\n        for (let j = 0; j < v - 1; j++) {\n            p0 = pts[i][j];\n            p1 = pts[i + 1][j];\n            //p2 = pts[i+1][j+1];\n            p3 = pts[i][j + 1];\n            p.push([\n                p0[0], p0[1], p0[2], p1[0], p1[1], p1[2],\n                p0[0], p0[1], p0[2], p3[0], p3[1], p3[2]\n            ]);\n        }\n    }\n    return new Float32Array(p.flat());\n}\nexport const SphereData = (radius: number = 2, u: number = 20, v: number = 15, center: vec3 = [0, 0, 0]) => {\n    if (u < 2 || v < 2) return;\n    let pts = [];\n    let pt: vec3;\n    for (let i = 0; i < u; i++) {\n        let pt1: vec3[] = [];\n        for (let j = 0; j < v; j++) {\n            pt = SpherePosition(radius, i * 180 / (u - 1), j * 360 / (v - 1), center);\n            pt1.push(pt);\n        }\n        pts.push(pt1);\n    }\n\n    let vertex = [] as any, normal = [] as any;\n    let p0: vec3, p1: vec3, p2: vec3, p3: vec3, a: vec3, b: vec3;\n\n    for (let i = 0; i < u - 1; i++) {\n        for (let j = 0; j < v - 1; j++) {\n            p0 = pts[i][j];\n            p1 = pts[i + 1][j];\n            p2 = pts[i + 1][j + 1];\n            p3 = pts[i][j + 1];\n\n            // vertex data\n            vertex.push([\n                //first triangle                    \n                p0[0], p0[1], p0[2], p1[0], p1[1], p1[2], p3[0], p3[1], p3[2],\n\n                //second triangle                    \n                p1[0], p1[1], p1[2], p2[0], p2[1], p2[2], p3[0], p3[1], p3[2]\n            ]);\n\n            //normal data\n            normal.push([\n                //first triangle\n                p0[0] / radius, p0[1] / radius, p0[2] / radius,\n                p1[0] / radius, p1[1] / radius, p1[2] / radius,\n                p3[0] / radius, p3[1] / radius, p3[2] / radius,\n\n                //second triangle                    \n                p1[0] / radius, p1[1] / radius, p1[2] / radius,\n                p2[0] / radius, p2[1] / radius, p2[2] / radius,\n                p3[0] / radius, p3[1] / radius, p3[2] / radius\n            ]);\n        }\n    }\n    return {\n        vertexData: new Float32Array(vertex.flat()),\n        normalData: new Float32Array(normal.flat())\n    }\n}\nexport interface LightInputs {\n    color?: string;\n    ambientIntensity?: string;\n    diffuseIntensity?: string;\n    specularIntensity?: string;\n    shininess?: string;\n    specularColor?: string;\n    isPhong?: string;\n}\nexport const Shaders = (li: LightInputs) => {\n    // define default input values:\n    li.color = li.color === undefined ? '(1.0, 0.0, 0.0)' : li.color;\n    li.ambientIntensity = li.ambientIntensity === undefined ? '0.2' : li.ambientIntensity;\n    li.diffuseIntensity = li.diffuseIntensity === undefined ? '0.8' : li.diffuseIntensity;\n    li.specularIntensity = li.specularIntensity === undefined ? '0.4' : li.specularIntensity;\n    li.shininess = li.shininess === undefined ? '30.0' : li.shininess;\n    li.specularColor = li.specularColor === undefined ? '(1.0, 1.0, 1.0)' : li.specularColor;\n    li.isPhong = li.isPhong === undefined ? '0' : li.isPhong;\n\n    const vertex = `\n         struct Uniforms {\n             viewProjectionMatrix : mat4x4<f32>,\n             modelMatrix : mat4x4<f32>,               \n             normalMatrix : mat4x4<f32>,            \n         };\n         @binding(0) @group(0) var<uniform> uniforms : Uniforms;\n \n         struct Output {\n             @builtin(position) Position : vec4<f32>,\n             @location(0) vPosition : vec4<f32>,\n             @location(1) vNormal : vec4<f32>,\n         };\n \n         @vertex\n         fn main(@location(0) position: vec4<f32>, @location(1) normal: vec4<f32>) -> Output {    \n             var output: Output;            \n             let mPosition:vec4<f32> = uniforms.modelMatrix * position; \n             output.vPosition = mPosition;                  \n             output.vNormal =  uniforms.normalMatrix*normal;\n             output.Position = uniforms.viewProjectionMatrix * mPosition;               \n             return output;\n         }`;\n\n    const fragment = `\n         struct Uniforms {\n             lightPosition : vec4<f32>,   \n             eyePosition : vec4<f32>,\n         };\n         @binding(1) @group(0) var<uniform> uniforms : Uniforms;\n \n         @fragment\n         fn main(@location(0) vPosition: vec4<f32>, @location(1) vNormal: vec4<f32>) -> @location(0) vec4<f32> {\n             let N:vec3<f32> = normalize(vNormal.xyz);                \n             let L:vec3<f32> = normalize(uniforms.lightPosition.xyz - vPosition.xyz);     \n             let V:vec3<f32> = normalize(uniforms.eyePosition.xyz - vPosition.xyz);          \n             let H:vec3<f32> = normalize(L + V);\n             let diffuse:f32 = ${li.diffuseIntensity} * max(dot(N, L), 0.0);\n             var specular:f32;\n             var isp:i32 = ${li.isPhong};\n             if(isp === 1){\n                 specular = ${li.specularIntensity} * pow(max(dot(V, reflect(-L, N)),0.0), ${li.shininess});\n             } else {\n                 specular = ${li.specularIntensity} * pow(max(dot(N, H),0.0), ${li.shininess});\n             }               \n             let ambient:f32 = ${li.ambientIntensity};               \n             let finalColor:vec3<f32> = vec3<f32>${li.color}*(ambient + diffuse) + vec3<f32>${li.specularColor}*specular; \n             return vec4<f32>(finalColor, 1.0);\n         }`;\n\n    return {\n        vertex,\n        fragment\n    };\n}\n\nexport const getSphere = (li: LightInputs) => {\n    return {\n        shader: Shaders(li),\n        vertex: SphereData(1, 20, 20, [0, 0, 0])\n    }\n}\n","// import positionVert from './shaders/position.vert.wgsl?raw';\r\n// import colorFrag from './shaders/color.frag.wgsl';\r\nimport { vec3, mat4 } from 'gl-matrix';\r\n\r\nimport { CreateGPUBuffer, CreateGPUBufferUint } from './shaders/shaders';\r\n\r\nimport { createTransforms, createViewProjection } from '../Util';\r\n\r\nimport { CubeData, CubeData1 } from './shaders/cube';\r\n\r\nimport { getSphere } from './Geometry/Sphere'\r\nimport type { LightInputs } from './Geometry/Sphere'\r\nimport { getCylinder } from './Geometry/Cylinder';\r\nimport { getCone } from './Geometry/Cone';\r\nimport { getTorus } from './Geometry/Torus';\r\n\r\nconst createCamera = require('3d-view-controls');\r\n\r\n\r\nexport class Solution {\r\n    divHost: HTMLElement;\r\n    canvas: HTMLCanvasElement;\r\n    ctx: GPUCanvasContext;\r\n    device: GPUDevice;\r\n    format: GPUTextureFormat;\r\n    size: any;\r\n    pipeline: GPURenderPipeline;\r\n    isAnimation: boolean = true;\r\n\r\n    camera: Camera;\r\n\r\n    uniformBuffer: GPUBuffer\r\n    uniformBindGroup: GPUBindGroup\r\n    textureView: GPUTextureView\r\n    depthTexture: GPUTexture;\r\n    renderPassDescription: GPURenderPassDescriptor\r\n\r\n    numberOfVertices: number;\r\n    vertexBuffer: GPUBuffer;\r\n    normalBuffer: GPUBuffer;\r\n    colorBuffer: GPUBuffer;\r\n\r\n    rotation = vec3.fromValues(0, 0, 0);\r\n\r\n    // requestAnimationFrame = window.requestAnimationFrame;\r\n    // cancelAnimationFrame = window.cancelAnimationFrame;\r\n    requestAni: any;\r\n\r\n    constructor(id: string) {\r\n        this.divHost = document.getElementById(id);\r\n\r\n        //     console.log(id, 'webGPU', navigator.gpu);\r\n        this.canvas = document.createElement('canvas');\r\n        this.divHost.appendChild(this.canvas);\r\n\r\n        this.initWebGPU();\r\n    }\r\n    async initWebGPU() {\r\n        if (!navigator.gpu) { throw new Error('Not Support WebGPU'); }\r\n\r\n        const adapter = await navigator.gpu.requestAdapter({\r\n            powerPreference: 'high-performance'\r\n            // powerPreference: 'low-power'\r\n        })\r\n\r\n        if (!adapter) { throw new Error('No Adapter Found'); }\r\n\r\n        const device = await adapter.requestDevice()\r\n        this.ctx = this.canvas.getContext('webgpu') as GPUCanvasContext\r\n        // @ts-ignore\r\n        const format = navigator.gpu.getPreferredCanvasFormat ? navigator.gpu.getPreferredCanvasFormat() : this.ctx.getPreferredFormat(adapter)\r\n        const devicePixelRatio = window.devicePixelRatio || 1\r\n        this.canvas.width = this.divHost.clientWidth;\r\n        this.canvas.height = this.divHost.clientHeight;\r\n        this.ctx.configure({\r\n            // json specific format when key and value are the same\r\n            device, format,\r\n            // prevent chrome warning\r\n            alphaMode: 'opaque'\r\n        })\r\n\r\n        this.size = { width: this.canvas.width, height: this.canvas.height }\r\n        this.device = device;\r\n        this.format = format;\r\n\r\n        this.camera = new Camera(this);\r\n\r\n        this.initPipeline(this.device, this.format);\r\n    }\r\n\r\n    async initPipeline(device: GPUDevice, format: GPUTextureFormat, primitiveType = 'triangle-list') { // triangle-list , triangle-strip\r\n        // create vertex buffers\r\n        // const cubeData = CubeData0();\r\n        // this.numberOfVertices = cubeData.positions.length / 3;\r\n        // this.vertexBuffer = CreateGPUBuffer(device, cubeData.positions);\r\n        // this.colorBuffer = CreateGPUBuffer(device, cubeData.colors);\r\n\r\n        // const cubeData = CubeData1();\r\n\r\n        const li: LightInputs = {\r\n            color: '[1.0,0.0,0.0]',\r\n        };\r\n        li.color = li.color === undefined ? '[1.0,0.0,0.0]' : li.color;\r\n        li.ambientIntensity = li.ambientIntensity === undefined ? '0.2' : li.ambientIntensity;\r\n        li.diffuseIntensity = li.diffuseIntensity === undefined ? '0.8' : li.diffuseIntensity;\r\n        li.specularIntensity = li.specularIntensity === undefined ? '0.4' : li.specularIntensity;\r\n        li.shininess = li.shininess === undefined ? '30.0' : li.shininess;\r\n        li.specularColor = li.specularColor === undefined ? '[1.0, 1.0, 1.0]' : li.specularColor;\r\n\r\n        // let geo = getCylinder();\r\n        // let geo = getCone();\r\n        // let geo = getCone();\r\n        // let geo = getTorus();\r\n        // if (Math.random() < 0.5) {\r\n        let geo = getSphere(li);\r\n        // }\r\n\r\n        this.vertexBuffer = CreateGPUBuffer(device, geo.vertex.vertexData);\r\n        this.normalBuffer = CreateGPUBuffer(device, geo.vertex.normalData);\r\n        // // this.colorBuffer = CreateGPUBufferUint(device, cubeData.indexData);\r\n\r\n        this.numberOfVertices = geo.vertex.vertexData.length / 3;\r\n\r\n        const shader = geo.shader;\r\n\r\n        this.pipeline = device.createRenderPipeline({\r\n            layout: 'auto',\r\n            vertex: {\r\n                module: device.createShaderModule({\r\n                    code: shader.vertex\r\n                }),\r\n                entryPoint: \"main\",\r\n                // @ts-ignore\r\n                buffers: [\r\n                    {\r\n                        arrayStride: 12,\r\n                        attributes: [{\r\n                            shaderLocation: 0,\r\n                            format: \"float32x3\",\r\n                            offset: 0\r\n                        }]\r\n                    },\r\n                    {\r\n                        arrayStride: 12,\r\n                        attributes: [{\r\n                            shaderLocation: 1,\r\n                            format: \"float32x3\",\r\n                            offset: 0\r\n                        }]\r\n                    }\r\n                ]\r\n            },\r\n            fragment: {\r\n                module: device.createShaderModule({\r\n                    code: shader.fragment\r\n                }),\r\n                entryPoint: \"main\",\r\n                targets: [\r\n                    {\r\n                        format: this.format as GPUTextureFormat\r\n                    }\r\n                ]\r\n            },\r\n            primitive: {\r\n                topology: \"triangle-list\",\r\n                // cullMode: 'back'\r\n            },\r\n            depthStencil: {\r\n                format: \"depth24plus\",\r\n                depthWriteEnabled: true,\r\n                depthCompare: \"less\"\r\n            }\r\n        });\r\n\r\n        // create uniform buffer and layout\r\n        this.uniformBuffer = device.createBuffer({\r\n            size: 64,\r\n            usage: GPUBufferUsage.UNIFORM | GPUBufferUsage.COPY_DST\r\n        });\r\n\r\n\r\n        this.uniformBindGroup = device.createBindGroup({\r\n            layout: this.pipeline.getBindGroupLayout(0),\r\n            entries: [{\r\n                binding: 0,\r\n                resource: {\r\n                    buffer: this.uniformBuffer,\r\n                    offset: 0,\r\n                    size: 64\r\n                }\r\n            }]\r\n        });\r\n\r\n\r\n\r\n\r\n\r\n        let eyePosition = new Float32Array(this.camera.vp.cameraOption.eye);\r\n        let lightPosition = eyePosition;\r\n\r\n\r\n        // create uniform buffer and layout\r\n        const vertexUniformBuffer = device.createBuffer({\r\n            size: 192,\r\n            usage: GPUBufferUsage.UNIFORM | GPUBufferUsage.COPY_DST\r\n        });\r\n\r\n        const fragmentUniformBuffer = device.createBuffer({\r\n            size: 32,\r\n            usage: GPUBufferUsage.UNIFORM | GPUBufferUsage.COPY_DST\r\n        });\r\n\r\n        device.queue.writeBuffer(vertexUniformBuffer, 0, this.camera.vp.viewProjectionMatrix as ArrayBuffer);\r\n        device.queue.writeBuffer(fragmentUniformBuffer, 0, lightPosition);\r\n        device.queue.writeBuffer(fragmentUniformBuffer, 16, eyePosition);\r\n\r\n        const uniformBindGroup = device.createBindGroup({\r\n            layout: this.pipeline.getBindGroupLayout(0),\r\n            entries: [\r\n                {\r\n                    binding: 0,\r\n                    resource: {\r\n                        buffer: vertexUniformBuffer,\r\n                        offset: 0,\r\n                        size: 192\r\n                    }\r\n                },\r\n                {\r\n                    binding: 1,\r\n                    resource: {\r\n                        buffer: fragmentUniformBuffer,\r\n                        offset: 0,\r\n                        size: 32\r\n                    }\r\n                }\r\n            ]\r\n        });\r\n\r\n        this.textureView = this.ctx.getCurrentTexture().createView();\r\n        // this.depthTexture = device.createTexture({\r\n        //     size: [this.canvas.width, this.canvas.height, 1],\r\n        //     format: \"depth24plus\",\r\n        //     usage: GPUTextureUsage.RENDER_ATTACHMENT\r\n        // });\r\n        this.renderPassDescription = {\r\n            //@ts-ignore\r\n            colorAttachments: [{\r\n                view: this.textureView,\r\n                clearValue: { r: 0.0, g: 0.0, b: 0.0, a: 1.0 }, //background color\r\n                loadOp: 'clear',\r\n                storeOp: 'store'\r\n                //@ts-ignore\r\n                // loadValue: { r: 0.0, g: 0.0, b: 0.0, a: 1.0 },\r\n            }],\r\n            // depthStencilAttachment: {\r\n            //     view: this.depthTexture.createView(),\r\n            //     depthClearValue: 1.0,\r\n            //     depthLoadOp: 'clear',\r\n            //     depthStoreOp: \"store\",\r\n            //     //stencilClearValue: 0,\r\n            //     //stencilLoadOp: 'clear',\r\n            //     //stencilStoreOp: \"store\"\r\n            // }\r\n        };\r\n\r\n        this.requestAni = requestAnimationFrame(this.loop);\r\n    }\r\n    public loop = () => {\r\n        // console.log(this.rotation);\r\n\r\n        if (this.isAnimation) {\r\n            this.rotation[0] += 0.01;\r\n            this.rotation[1] += 0.01;\r\n            this.rotation[2] += 0.01;\r\n        } else {\r\n            this.rotation = [0, 0, 0];\r\n        }\r\n\r\n        this.drawing();\r\n        if (this.isAnimation) {\r\n            this.requestAni = requestAnimationFrame(this.loop);\r\n        }\r\n\r\n    }\r\n    public drawing() {\r\n        this.camera.update();\r\n\r\n        const vertexUniformBuffer = this.device.createBuffer({\r\n            size: 192,\r\n            usage: GPUBufferUsage.UNIFORM | GPUBufferUsage.COPY_DST\r\n        });\r\n\r\n        const fragmentUniformBuffer = this.device.createBuffer({\r\n            size: 32,\r\n            usage: GPUBufferUsage.UNIFORM | GPUBufferUsage.COPY_DST\r\n        });\r\n\r\n        // CreateTransforms(modelMatrix,[0,0,0], rotation);\r\n        mat4.invert(this.camera.normalMatrix, this.camera.modelMatrix);\r\n        mat4.transpose(this.camera.normalMatrix, this.camera.normalMatrix);\r\n\r\n        this.device.queue.writeBuffer(vertexUniformBuffer, 64, this.camera.modelMatrix as ArrayBuffer);\r\n        this.device.queue.writeBuffer(vertexUniformBuffer, 128, this.camera.normalMatrix as ArrayBuffer);\r\n\r\n        // this.device.queue.writeBuffer(this.uniformBuffer, 0, this.camera.mvpMatrix as ArrayBuffer);\r\n\r\n        this.textureView = this.ctx.getCurrentTexture().createView();\r\n        this.renderPassDescription.colorAttachments[0].view = this.textureView;\r\n        const commandEncoder = this.device.createCommandEncoder();\r\n        const renderPass = commandEncoder.beginRenderPass(this.renderPassDescription as GPURenderPassDescriptor);\r\n\r\n        renderPass.setPipeline(this.pipeline);\r\n        renderPass.setVertexBuffer(0, this.vertexBuffer);\r\n        // renderPass.setIndexBuffer(this.colorBuffer, 'uint32');\r\n        renderPass.setVertexBuffer(1, this.normalBuffer);\r\n        renderPass.setBindGroup(0, this.uniformBindGroup);\r\n        // renderPass.drawIndexed(this.numberOfVertices);\r\n        renderPass.draw(this.numberOfVertices);\r\n        renderPass.end();\r\n\r\n        this.device.queue.submit([commandEncoder.finish()]);\r\n    }\r\n    public destroy() {\r\n        this.device.destroy();\r\n        // this.isAnimation = false;\r\n        cancelAnimationFrame(this.requestAni);\r\n        // this.requestAni = undefined;\r\n        while (this.divHost.lastElementChild) {\r\n            this.divHost.removeChild(this.divHost.lastElementChild);\r\n        }\r\n    }\r\n}\r\n\r\n\r\nclass Camera {\r\n    public solution: Solution;\r\n    public canvas: HTMLCanvasElement\r\n\r\n    public normalMatrix: mat4;\r\n    public modelMatrix: mat4 // const\r\n    public mvpMatrix: mat4 // const\r\n\r\n    public vMatrix: mat4;\r\n    public vpMatrix: mat4;\r\n    public rotation = vec3.fromValues(0, 0, 0);\r\n    public translation = vec3.fromValues(0, 0, 0);\r\n    public camera: any\r\n\r\n    public vp: any // const\r\n    constructor(solution: Solution) {\r\n        this.solution = solution;\r\n        this.canvas = solution.canvas;\r\n\r\n        this.normalMatrix = mat4.create();\r\n        this.modelMatrix = mat4.create();\r\n        this.mvpMatrix = mat4.create();\r\n        this.vMatrix = mat4.create();\r\n        this.vpMatrix = mat4.create();\r\n        this.vp = createViewProjection(this.canvas.width / this.canvas.height);\r\n        this.vpMatrix = this.vp.viewProjectionMatrix;\r\n\r\n        // add rotation and camera:\r\n        this.camera = createCamera(this.canvas, this.vp.cameraOption);\r\n        // this.camera.mode = 'turntable' // https://github.com/mikolalysenko/3d-view-controls\r\n    }\r\n    public update() {\r\n        const pMatrix = this.vp.projectionMatrix;\r\n        this.vMatrix = this.camera.matrix;\r\n        mat4.multiply(this.vpMatrix, pMatrix, this.vMatrix);\r\n\r\n        createTransforms(this.modelMatrix, this.translation, this.rotation);\r\n        mat4.multiply(this.mvpMatrix, this.vpMatrix, this.modelMatrix);\r\n    }\r\n}","import * as glMatrix from \"./common.js\";\n/**\n * 3 Dimensional Vector\n * @module vec3\n */\n\n/**\n * Creates a new, empty vec3\n *\n * @returns {vec3} a new 3D vector\n */\n\nexport function create() {\n  var out = new glMatrix.ARRAY_TYPE(3);\n\n  if (glMatrix.ARRAY_TYPE != Float32Array) {\n    out[0] = 0;\n    out[1] = 0;\n    out[2] = 0;\n  }\n\n  return out;\n}\n/**\n * Creates a new vec3 initialized with values from an existing vector\n *\n * @param {ReadonlyVec3} a vector to clone\n * @returns {vec3} a new 3D vector\n */\n\nexport function clone(a) {\n  var out = new glMatrix.ARRAY_TYPE(3);\n  out[0] = a[0];\n  out[1] = a[1];\n  out[2] = a[2];\n  return out;\n}\n/**\n * Calculates the length of a vec3\n *\n * @param {ReadonlyVec3} a vector to calculate length of\n * @returns {Number} length of a\n */\n\nexport function length(a) {\n  var x = a[0];\n  var y = a[1];\n  var z = a[2];\n  return Math.hypot(x, y, z);\n}\n/**\n * Creates a new vec3 initialized with the given values\n *\n * @param {Number} x X component\n * @param {Number} y Y component\n * @param {Number} z Z component\n * @returns {vec3} a new 3D vector\n */\n\nexport function fromValues(x, y, z) {\n  var out = new glMatrix.ARRAY_TYPE(3);\n  out[0] = x;\n  out[1] = y;\n  out[2] = z;\n  return out;\n}\n/**\n * Copy the values from one vec3 to another\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a the source vector\n * @returns {vec3} out\n */\n\nexport function copy(out, a) {\n  out[0] = a[0];\n  out[1] = a[1];\n  out[2] = a[2];\n  return out;\n}\n/**\n * Set the components of a vec3 to the given values\n *\n * @param {vec3} out the receiving vector\n * @param {Number} x X component\n * @param {Number} y Y component\n * @param {Number} z Z component\n * @returns {vec3} out\n */\n\nexport function set(out, x, y, z) {\n  out[0] = x;\n  out[1] = y;\n  out[2] = z;\n  return out;\n}\n/**\n * Adds two vec3's\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a the first operand\n * @param {ReadonlyVec3} b the second operand\n * @returns {vec3} out\n */\n\nexport function add(out, a, b) {\n  out[0] = a[0] + b[0];\n  out[1] = a[1] + b[1];\n  out[2] = a[2] + b[2];\n  return out;\n}\n/**\n * Subtracts vector b from vector a\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a the first operand\n * @param {ReadonlyVec3} b the second operand\n * @returns {vec3} out\n */\n\nexport function subtract(out, a, b) {\n  out[0] = a[0] - b[0];\n  out[1] = a[1] - b[1];\n  out[2] = a[2] - b[2];\n  return out;\n}\n/**\n * Multiplies two vec3's\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a the first operand\n * @param {ReadonlyVec3} b the second operand\n * @returns {vec3} out\n */\n\nexport function multiply(out, a, b) {\n  out[0] = a[0] * b[0];\n  out[1] = a[1] * b[1];\n  out[2] = a[2] * b[2];\n  return out;\n}\n/**\n * Divides two vec3's\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a the first operand\n * @param {ReadonlyVec3} b the second operand\n * @returns {vec3} out\n */\n\nexport function divide(out, a, b) {\n  out[0] = a[0] / b[0];\n  out[1] = a[1] / b[1];\n  out[2] = a[2] / b[2];\n  return out;\n}\n/**\n * Math.ceil the components of a vec3\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a vector to ceil\n * @returns {vec3} out\n */\n\nexport function ceil(out, a) {\n  out[0] = Math.ceil(a[0]);\n  out[1] = Math.ceil(a[1]);\n  out[2] = Math.ceil(a[2]);\n  return out;\n}\n/**\n * Math.floor the components of a vec3\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a vector to floor\n * @returns {vec3} out\n */\n\nexport function floor(out, a) {\n  out[0] = Math.floor(a[0]);\n  out[1] = Math.floor(a[1]);\n  out[2] = Math.floor(a[2]);\n  return out;\n}\n/**\n * Returns the minimum of two vec3's\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a the first operand\n * @param {ReadonlyVec3} b the second operand\n * @returns {vec3} out\n */\n\nexport function min(out, a, b) {\n  out[0] = Math.min(a[0], b[0]);\n  out[1] = Math.min(a[1], b[1]);\n  out[2] = Math.min(a[2], b[2]);\n  return out;\n}\n/**\n * Returns the maximum of two vec3's\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a the first operand\n * @param {ReadonlyVec3} b the second operand\n * @returns {vec3} out\n */\n\nexport function max(out, a, b) {\n  out[0] = Math.max(a[0], b[0]);\n  out[1] = Math.max(a[1], b[1]);\n  out[2] = Math.max(a[2], b[2]);\n  return out;\n}\n/**\n * Math.round the components of a vec3\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a vector to round\n * @returns {vec3} out\n */\n\nexport function round(out, a) {\n  out[0] = Math.round(a[0]);\n  out[1] = Math.round(a[1]);\n  out[2] = Math.round(a[2]);\n  return out;\n}\n/**\n * Scales a vec3 by a scalar number\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a the vector to scale\n * @param {Number} b amount to scale the vector by\n * @returns {vec3} out\n */\n\nexport function scale(out, a, b) {\n  out[0] = a[0] * b;\n  out[1] = a[1] * b;\n  out[2] = a[2] * b;\n  return out;\n}\n/**\n * Adds two vec3's after scaling the second operand by a scalar value\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a the first operand\n * @param {ReadonlyVec3} b the second operand\n * @param {Number} scale the amount to scale b by before adding\n * @returns {vec3} out\n */\n\nexport function scaleAndAdd(out, a, b, scale) {\n  out[0] = a[0] + b[0] * scale;\n  out[1] = a[1] + b[1] * scale;\n  out[2] = a[2] + b[2] * scale;\n  return out;\n}\n/**\n * Calculates the euclidian distance between two vec3's\n *\n * @param {ReadonlyVec3} a the first operand\n * @param {ReadonlyVec3} b the second operand\n * @returns {Number} distance between a and b\n */\n\nexport function distance(a, b) {\n  var x = b[0] - a[0];\n  var y = b[1] - a[1];\n  var z = b[2] - a[2];\n  return Math.hypot(x, y, z);\n}\n/**\n * Calculates the squared euclidian distance between two vec3's\n *\n * @param {ReadonlyVec3} a the first operand\n * @param {ReadonlyVec3} b the second operand\n * @returns {Number} squared distance between a and b\n */\n\nexport function squaredDistance(a, b) {\n  var x = b[0] - a[0];\n  var y = b[1] - a[1];\n  var z = b[2] - a[2];\n  return x * x + y * y + z * z;\n}\n/**\n * Calculates the squared length of a vec3\n *\n * @param {ReadonlyVec3} a vector to calculate squared length of\n * @returns {Number} squared length of a\n */\n\nexport function squaredLength(a) {\n  var x = a[0];\n  var y = a[1];\n  var z = a[2];\n  return x * x + y * y + z * z;\n}\n/**\n * Negates the components of a vec3\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a vector to negate\n * @returns {vec3} out\n */\n\nexport function negate(out, a) {\n  out[0] = -a[0];\n  out[1] = -a[1];\n  out[2] = -a[2];\n  return out;\n}\n/**\n * Returns the inverse of the components of a vec3\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a vector to invert\n * @returns {vec3} out\n */\n\nexport function inverse(out, a) {\n  out[0] = 1.0 / a[0];\n  out[1] = 1.0 / a[1];\n  out[2] = 1.0 / a[2];\n  return out;\n}\n/**\n * Normalize a vec3\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a vector to normalize\n * @returns {vec3} out\n */\n\nexport function normalize(out, a) {\n  var x = a[0];\n  var y = a[1];\n  var z = a[2];\n  var len = x * x + y * y + z * z;\n\n  if (len > 0) {\n    //TODO: evaluate use of glm_invsqrt here?\n    len = 1 / Math.sqrt(len);\n  }\n\n  out[0] = a[0] * len;\n  out[1] = a[1] * len;\n  out[2] = a[2] * len;\n  return out;\n}\n/**\n * Calculates the dot product of two vec3's\n *\n * @param {ReadonlyVec3} a the first operand\n * @param {ReadonlyVec3} b the second operand\n * @returns {Number} dot product of a and b\n */\n\nexport function dot(a, b) {\n  return a[0] * b[0] + a[1] * b[1] + a[2] * b[2];\n}\n/**\n * Computes the cross product of two vec3's\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a the first operand\n * @param {ReadonlyVec3} b the second operand\n * @returns {vec3} out\n */\n\nexport function cross(out, a, b) {\n  var ax = a[0],\n      ay = a[1],\n      az = a[2];\n  var bx = b[0],\n      by = b[1],\n      bz = b[2];\n  out[0] = ay * bz - az * by;\n  out[1] = az * bx - ax * bz;\n  out[2] = ax * by - ay * bx;\n  return out;\n}\n/**\n * Performs a linear interpolation between two vec3's\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a the first operand\n * @param {ReadonlyVec3} b the second operand\n * @param {Number} t interpolation amount, in the range [0-1], between the two inputs\n * @returns {vec3} out\n */\n\nexport function lerp(out, a, b, t) {\n  var ax = a[0];\n  var ay = a[1];\n  var az = a[2];\n  out[0] = ax + t * (b[0] - ax);\n  out[1] = ay + t * (b[1] - ay);\n  out[2] = az + t * (b[2] - az);\n  return out;\n}\n/**\n * Performs a hermite interpolation with two control points\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a the first operand\n * @param {ReadonlyVec3} b the second operand\n * @param {ReadonlyVec3} c the third operand\n * @param {ReadonlyVec3} d the fourth operand\n * @param {Number} t interpolation amount, in the range [0-1], between the two inputs\n * @returns {vec3} out\n */\n\nexport function hermite(out, a, b, c, d, t) {\n  var factorTimes2 = t * t;\n  var factor1 = factorTimes2 * (2 * t - 3) + 1;\n  var factor2 = factorTimes2 * (t - 2) + t;\n  var factor3 = factorTimes2 * (t - 1);\n  var factor4 = factorTimes2 * (3 - 2 * t);\n  out[0] = a[0] * factor1 + b[0] * factor2 + c[0] * factor3 + d[0] * factor4;\n  out[1] = a[1] * factor1 + b[1] * factor2 + c[1] * factor3 + d[1] * factor4;\n  out[2] = a[2] * factor1 + b[2] * factor2 + c[2] * factor3 + d[2] * factor4;\n  return out;\n}\n/**\n * Performs a bezier interpolation with two control points\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a the first operand\n * @param {ReadonlyVec3} b the second operand\n * @param {ReadonlyVec3} c the third operand\n * @param {ReadonlyVec3} d the fourth operand\n * @param {Number} t interpolation amount, in the range [0-1], between the two inputs\n * @returns {vec3} out\n */\n\nexport function bezier(out, a, b, c, d, t) {\n  var inverseFactor = 1 - t;\n  var inverseFactorTimesTwo = inverseFactor * inverseFactor;\n  var factorTimes2 = t * t;\n  var factor1 = inverseFactorTimesTwo * inverseFactor;\n  var factor2 = 3 * t * inverseFactorTimesTwo;\n  var factor3 = 3 * factorTimes2 * inverseFactor;\n  var factor4 = factorTimes2 * t;\n  out[0] = a[0] * factor1 + b[0] * factor2 + c[0] * factor3 + d[0] * factor4;\n  out[1] = a[1] * factor1 + b[1] * factor2 + c[1] * factor3 + d[1] * factor4;\n  out[2] = a[2] * factor1 + b[2] * factor2 + c[2] * factor3 + d[2] * factor4;\n  return out;\n}\n/**\n * Generates a random vector with the given scale\n *\n * @param {vec3} out the receiving vector\n * @param {Number} [scale] Length of the resulting vector. If ommitted, a unit vector will be returned\n * @returns {vec3} out\n */\n\nexport function random(out, scale) {\n  scale = scale || 1.0;\n  var r = glMatrix.RANDOM() * 2.0 * Math.PI;\n  var z = glMatrix.RANDOM() * 2.0 - 1.0;\n  var zScale = Math.sqrt(1.0 - z * z) * scale;\n  out[0] = Math.cos(r) * zScale;\n  out[1] = Math.sin(r) * zScale;\n  out[2] = z * scale;\n  return out;\n}\n/**\n * Transforms the vec3 with a mat4.\n * 4th vector component is implicitly '1'\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a the vector to transform\n * @param {ReadonlyMat4} m matrix to transform with\n * @returns {vec3} out\n */\n\nexport function transformMat4(out, a, m) {\n  var x = a[0],\n      y = a[1],\n      z = a[2];\n  var w = m[3] * x + m[7] * y + m[11] * z + m[15];\n  w = w || 1.0;\n  out[0] = (m[0] * x + m[4] * y + m[8] * z + m[12]) / w;\n  out[1] = (m[1] * x + m[5] * y + m[9] * z + m[13]) / w;\n  out[2] = (m[2] * x + m[6] * y + m[10] * z + m[14]) / w;\n  return out;\n}\n/**\n * Transforms the vec3 with a mat3.\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a the vector to transform\n * @param {ReadonlyMat3} m the 3x3 matrix to transform with\n * @returns {vec3} out\n */\n\nexport function transformMat3(out, a, m) {\n  var x = a[0],\n      y = a[1],\n      z = a[2];\n  out[0] = x * m[0] + y * m[3] + z * m[6];\n  out[1] = x * m[1] + y * m[4] + z * m[7];\n  out[2] = x * m[2] + y * m[5] + z * m[8];\n  return out;\n}\n/**\n * Transforms the vec3 with a quat\n * Can also be used for dual quaternions. (Multiply it with the real part)\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a the vector to transform\n * @param {ReadonlyQuat} q quaternion to transform with\n * @returns {vec3} out\n */\n\nexport function transformQuat(out, a, q) {\n  // benchmarks: https://jsperf.com/quaternion-transform-vec3-implementations-fixed\n  var qx = q[0],\n      qy = q[1],\n      qz = q[2],\n      qw = q[3];\n  var x = a[0],\n      y = a[1],\n      z = a[2]; // var qvec = [qx, qy, qz];\n  // var uv = vec3.cross([], qvec, a);\n\n  var uvx = qy * z - qz * y,\n      uvy = qz * x - qx * z,\n      uvz = qx * y - qy * x; // var uuv = vec3.cross([], qvec, uv);\n\n  var uuvx = qy * uvz - qz * uvy,\n      uuvy = qz * uvx - qx * uvz,\n      uuvz = qx * uvy - qy * uvx; // vec3.scale(uv, uv, 2 * w);\n\n  var w2 = qw * 2;\n  uvx *= w2;\n  uvy *= w2;\n  uvz *= w2; // vec3.scale(uuv, uuv, 2);\n\n  uuvx *= 2;\n  uuvy *= 2;\n  uuvz *= 2; // return vec3.add(out, a, vec3.add(out, uv, uuv));\n\n  out[0] = x + uvx + uuvx;\n  out[1] = y + uvy + uuvy;\n  out[2] = z + uvz + uuvz;\n  return out;\n}\n/**\n * Rotate a 3D vector around the x-axis\n * @param {vec3} out The receiving vec3\n * @param {ReadonlyVec3} a The vec3 point to rotate\n * @param {ReadonlyVec3} b The origin of the rotation\n * @param {Number} rad The angle of rotation in radians\n * @returns {vec3} out\n */\n\nexport function rotateX(out, a, b, rad) {\n  var p = [],\n      r = []; //Translate point to the origin\n\n  p[0] = a[0] - b[0];\n  p[1] = a[1] - b[1];\n  p[2] = a[2] - b[2]; //perform rotation\n\n  r[0] = p[0];\n  r[1] = p[1] * Math.cos(rad) - p[2] * Math.sin(rad);\n  r[2] = p[1] * Math.sin(rad) + p[2] * Math.cos(rad); //translate to correct position\n\n  out[0] = r[0] + b[0];\n  out[1] = r[1] + b[1];\n  out[2] = r[2] + b[2];\n  return out;\n}\n/**\n * Rotate a 3D vector around the y-axis\n * @param {vec3} out The receiving vec3\n * @param {ReadonlyVec3} a The vec3 point to rotate\n * @param {ReadonlyVec3} b The origin of the rotation\n * @param {Number} rad The angle of rotation in radians\n * @returns {vec3} out\n */\n\nexport function rotateY(out, a, b, rad) {\n  var p = [],\n      r = []; //Translate point to the origin\n\n  p[0] = a[0] - b[0];\n  p[1] = a[1] - b[1];\n  p[2] = a[2] - b[2]; //perform rotation\n\n  r[0] = p[2] * Math.sin(rad) + p[0] * Math.cos(rad);\n  r[1] = p[1];\n  r[2] = p[2] * Math.cos(rad) - p[0] * Math.sin(rad); //translate to correct position\n\n  out[0] = r[0] + b[0];\n  out[1] = r[1] + b[1];\n  out[2] = r[2] + b[2];\n  return out;\n}\n/**\n * Rotate a 3D vector around the z-axis\n * @param {vec3} out The receiving vec3\n * @param {ReadonlyVec3} a The vec3 point to rotate\n * @param {ReadonlyVec3} b The origin of the rotation\n * @param {Number} rad The angle of rotation in radians\n * @returns {vec3} out\n */\n\nexport function rotateZ(out, a, b, rad) {\n  var p = [],\n      r = []; //Translate point to the origin\n\n  p[0] = a[0] - b[0];\n  p[1] = a[1] - b[1];\n  p[2] = a[2] - b[2]; //perform rotation\n\n  r[0] = p[0] * Math.cos(rad) - p[1] * Math.sin(rad);\n  r[1] = p[0] * Math.sin(rad) + p[1] * Math.cos(rad);\n  r[2] = p[2]; //translate to correct position\n\n  out[0] = r[0] + b[0];\n  out[1] = r[1] + b[1];\n  out[2] = r[2] + b[2];\n  return out;\n}\n/**\n * Get the angle between two 3D vectors\n * @param {ReadonlyVec3} a The first operand\n * @param {ReadonlyVec3} b The second operand\n * @returns {Number} The angle in radians\n */\n\nexport function angle(a, b) {\n  var ax = a[0],\n      ay = a[1],\n      az = a[2],\n      bx = b[0],\n      by = b[1],\n      bz = b[2],\n      mag1 = Math.sqrt(ax * ax + ay * ay + az * az),\n      mag2 = Math.sqrt(bx * bx + by * by + bz * bz),\n      mag = mag1 * mag2,\n      cosine = mag && dot(a, b) / mag;\n  return Math.acos(Math.min(Math.max(cosine, -1), 1));\n}\n/**\n * Set the components of a vec3 to zero\n *\n * @param {vec3} out the receiving vector\n * @returns {vec3} out\n */\n\nexport function zero(out) {\n  out[0] = 0.0;\n  out[1] = 0.0;\n  out[2] = 0.0;\n  return out;\n}\n/**\n * Returns a string representation of a vector\n *\n * @param {ReadonlyVec3} a vector to represent as a string\n * @returns {String} string representation of the vector\n */\n\nexport function str(a) {\n  return \"vec3(\" + a[0] + \", \" + a[1] + \", \" + a[2] + \")\";\n}\n/**\n * Returns whether or not the vectors have exactly the same elements in the same position (when compared with ===)\n *\n * @param {ReadonlyVec3} a The first vector.\n * @param {ReadonlyVec3} b The second vector.\n * @returns {Boolean} True if the vectors are equal, false otherwise.\n */\n\nexport function exactEquals(a, b) {\n  return a[0] === b[0] && a[1] === b[1] && a[2] === b[2];\n}\n/**\n * Returns whether or not the vectors have approximately the same elements in the same position.\n *\n * @param {ReadonlyVec3} a The first vector.\n * @param {ReadonlyVec3} b The second vector.\n * @returns {Boolean} True if the vectors are equal, false otherwise.\n */\n\nexport function equals(a, b) {\n  var a0 = a[0],\n      a1 = a[1],\n      a2 = a[2];\n  var b0 = b[0],\n      b1 = b[1],\n      b2 = b[2];\n  return Math.abs(a0 - b0) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a0), Math.abs(b0)) && Math.abs(a1 - b1) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a1), Math.abs(b1)) && Math.abs(a2 - b2) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a2), Math.abs(b2));\n}\n/**\n * Alias for {@link vec3.subtract}\n * @function\n */\n\nexport var sub = subtract;\n/**\n * Alias for {@link vec3.multiply}\n * @function\n */\n\nexport var mul = multiply;\n/**\n * Alias for {@link vec3.divide}\n * @function\n */\n\nexport var div = divide;\n/**\n * Alias for {@link vec3.distance}\n * @function\n */\n\nexport var dist = distance;\n/**\n * Alias for {@link vec3.squaredDistance}\n * @function\n */\n\nexport var sqrDist = squaredDistance;\n/**\n * Alias for {@link vec3.length}\n * @function\n */\n\nexport var len = length;\n/**\n * Alias for {@link vec3.squaredLength}\n * @function\n */\n\nexport var sqrLen = squaredLength;\n/**\n * Perform some operation over an array of vec3s.\n *\n * @param {Array} a the array of vectors to iterate over\n * @param {Number} stride Number of elements between the start of each vec3. If 0 assumes tightly packed\n * @param {Number} offset Number of elements to skip at the beginning of the array\n * @param {Number} count Number of vec3s to iterate over. If 0 iterates over entire array\n * @param {Function} fn Function to call for each vector in the array\n * @param {Object} [arg] additional argument to pass to fn\n * @returns {Array} a\n * @function\n */\n\nexport var forEach = function () {\n  var vec = create();\n  return function (a, stride, offset, count, fn, arg) {\n    var i, l;\n\n    if (!stride) {\n      stride = 3;\n    }\n\n    if (!offset) {\n      offset = 0;\n    }\n\n    if (count) {\n      l = Math.min(count * stride + offset, a.length);\n    } else {\n      l = a.length;\n    }\n\n    for (i = offset; i < l; i += stride) {\n      vec[0] = a[i];\n      vec[1] = a[i + 1];\n      vec[2] = a[i + 2];\n      fn(vec, vec, arg);\n      a[i] = vec[0];\n      a[i + 1] = vec[1];\n      a[i + 2] = vec[2];\n    }\n\n    return a;\n  };\n}();"],"names":["createTransforms","modelMat","translation","rotation","scaling","rotateXMat","mat4","rotateYMat","rotateZMat","translateMat","scaleMat","createViewProjection","respectRatio","cameraPosition","lookDirection","upDirection","viewMatrix","projectionMatrix","viewProjectionMatrix","Math","PI","cameraOption","eye","center","zoomMax","zoomSpeed","CreateGPUBuffer","device","data","usageFlag","GPUBufferUsage","VERTEX","COPY_DST","buffer","createBuffer","size","byteLength","usage","mappedAtCreation","Float32Array","getMappedRange","set","unmap","SpherePosition","radius","theta","phi","snt","sin","cnt","cos","snp","cnp","vec3","SphereData","u","v","pt","pts","i","pt1","j","push","p0","p1","p2","p3","vertex","normal","vertexData","flat","normalData","Shaders","li","color","undefined","ambientIntensity","diffuseIntensity","specularIntensity","shininess","specularColor","isPhong","fragment","createCamera","require","Solution","constructor","id","divHost","canvas","ctx","format","pipeline","isAnimation","camera","uniformBuffer","uniformBindGroup","textureView","depthTexture","renderPassDescription","numberOfVertices","vertexBuffer","normalBuffer","colorBuffer","requestAni","loop","this","drawing","requestAnimationFrame","document","getElementById","createElement","appendChild","initWebGPU","async","navigator","gpu","Error","adapter","requestAdapter","powerPreference","requestDevice","getContext","getPreferredCanvasFormat","getPreferredFormat","window","devicePixelRatio","width","clientWidth","height","clientHeight","configure","alphaMode","Camera","initPipeline","geo","shader","getSphere","length","createRenderPipeline","layout","module","createShaderModule","code","entryPoint","buffers","arrayStride","attributes","shaderLocation","offset","targets","primitive","topology","depthStencil","depthWriteEnabled","depthCompare","UNIFORM","createBindGroup","getBindGroupLayout","entries","binding","resource","eyePosition","vp","lightPosition","vertexUniformBuffer","fragmentUniformBuffer","queue","writeBuffer","getCurrentTexture","createView","colorAttachments","view","clearValue","r","g","b","a","loadOp","storeOp","update","normalMatrix","modelMatrix","commandEncoder","createCommandEncoder","renderPass","beginRenderPass","setPipeline","setVertexBuffer","setBindGroup","draw","end","submit","finish","destroy","cancelAnimationFrame","lastElementChild","removeChild","solution","mvpMatrix","vMatrix","vpMatrix","pMatrix","matrix","create","out","glMatrix","fromValues","x","y","z","add","subtract","scaleAndAdd","scale","negate","normalize","len","sqrt","cross","ax","ay","az","bx","by","bz","transformMat4","m","w","transformMat3","transformQuat","q","qx","qy","qz","qw","uvx","uvy","uvz","uuvx","uuvy","uuvz","w2","rotateX","rad","p","rotateY","rotateZ","angle","mag","cosine","dot","acos","min","max","sub","vec"],"sourceRoot":""}