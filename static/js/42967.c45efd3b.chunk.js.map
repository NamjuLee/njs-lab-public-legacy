{"version":3,"file":"static/js/42967.c45efd3b.chunk.js","mappings":"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","sources":["njslab/LabStarter/AppNGL3d/NGL3dApp_05/Utility/GLShaderCommon.ts","njslab/LabStarter/AppNGL3d/NGL3dApp_05/WebGL/AttribLocations.ts","njslab/LabStarter/AppNGL3d/NGL3dApp_05/WebGL/Shader.ts"],"sourcesContent":["\r\nexport class GLShaderCommon {\r\n\r\n    static getShaderProgram(gl: WebGL2RenderingContext, vertexShader: string, fragmentShader: string, needValidate: boolean = true) {\r\n        let vShader = GLShaderCommon.createShader(gl, gl.VERTEX_SHADER as unknown as WebGLShader, vertexShader);\r\n        let fShader = GLShaderCommon.createShader(gl, gl.FRAGMENT_SHADER as unknown as WebGLShader, fragmentShader);\r\n        if (vShader && fShader ) { \r\n            let program = GLShaderCommon.createProgram(gl, vShader, fShader, needValidate);\r\n\r\n            if (program) {\r\n                return program;\r\n\r\n            } else {\r\n                console.error('vertex fragment shader error'); return null;\r\n            }\r\n        } else { \r\n            console.error('vertex fragment shader error'); return null;\r\n        }\r\n    }\r\n    static getShader(gl: WebGL2RenderingContext, type: number, source: string) {\r\n        const shader = gl.createShader(type);\r\n        if (shader === null) {return null; }\r\n        gl.shaderSource(shader, source);\r\n        gl.compileShader(shader);\r\n\r\n        // Check if compiled successfully\r\n        if (!gl.getShaderParameter(shader, gl.COMPILE_STATUS)) {\r\n            console.log('An error occurred compiling the shaders:' + gl.getShaderInfoLog(shader));\r\n            gl.deleteShader(shader);\r\n            return null;\r\n        }\r\n        // Set the attributes, varying, and uniform to shader\r\n        // shader.attributes = this.attributesFromSource(source);\r\n        // shader.varyings = this.varyingsFromSource(source);\r\n        // shader.uniforms = this.uniformsFromSource(source);\r\n        return shader;\r\n    }\r\n    static createProgram(gl: WebGL2RenderingContext, vertexShader: WebGLShader, fragmentShader: WebGLShader, needValidate: boolean = true): WebGLProgram | null {\r\n        const program = gl.createProgram();\r\n        if (program === null ) {return null; }\r\n        gl.attachShader(program, vertexShader);\r\n        gl.attachShader(program, fragmentShader);\r\n        gl.linkProgram(program);\r\n\r\n        // Check that shader program was able to link to WebGL\r\n        if (!gl.getProgramParameter(program, gl.LINK_STATUS)) {\r\n            const error = gl.getProgramInfoLog(program);\r\n            console.log('Failed to link program: ' + error);\r\n            gl.deleteProgram(program);\r\n            gl.deleteShader(fragmentShader);\r\n            gl.deleteShader(vertexShader);\r\n            return null;\r\n        }\r\n        if (needValidate) {\r\n            gl.validateProgram(program);\r\n            if (!gl.getProgramParameter(program, gl.VALIDATE_STATUS)) {\r\n                console.error('Failed to validate program', gl.getProgramInfoLog(program));\r\n                gl.deleteProgram(program);\r\n                gl.deleteShader(fragmentShader);\r\n                gl.deleteShader(vertexShader);\r\n                return null;\r\n            }\r\n        }\r\n        gl.deleteShader(fragmentShader);\r\n        gl.deleteShader(vertexShader);\r\n        return program;\r\n    }\r\n\r\n    // ...............................\r\n\r\n    // static CreateShader(gl: WebGL2RenderingContext, type: WebGLShader, shaderString: string) {\r\n    //     let shader = gl.createShader(type as number);\r\n    //     gl.shaderSource(shader, shaderString);\r\n    //     gl.compileShader(shader);\r\n    //     gl.getShaderParameter(shader, gl.COMPILE_STATUS);\r\n    //     return shader as Webglsh;\r\n    //     // console.log(gl.getShaderInfoLog(shader));\r\n    //     // gl.deleteShader(shader);\r\n    //     // return null;\r\n    // }\r\n    static createShader(gl: WebGL2RenderingContext, type: WebGLShader, shaderString: string) {\r\n        // console.log(type);\r\n        const shader = gl.createShader(type as unknown as number);\r\n        if (shader === null) {return null; }\r\n        gl.shaderSource(shader, shaderString);\r\n        gl.compileShader(shader);\r\n        const suc = gl.getShaderParameter(shader, gl.COMPILE_STATUS);\r\n        if (suc) { return shader; }\r\n        console.log(gl.getShaderInfoLog(shader));\r\n        gl.deleteShader(shader);\r\n        return null;\r\n    }\r\n    static createShaderFromPath(gl: WebGL2RenderingContext, type: WebGLShader, url: string) {\r\n        const shader = gl.createShader(type as unknown as number);\r\n        if (shader === null) {return null; }\r\n        gl.shaderSource(shader, GLShaderCommon.getSourceSynch(url) as string);\r\n        gl.compileShader(shader);\r\n        const suc = gl.getShaderParameter(shader, gl.COMPILE_STATUS);\r\n        if (suc) { return shader; }\r\n        console.log(gl.getShaderInfoLog(shader));\r\n        gl.deleteShader(shader);\r\n        return null;\r\n    }\r\n\r\n    static getSourceSynch(url: string) {\r\n        const req = new XMLHttpRequest();\r\n        req.open('GET', url, false);\r\n        req.send(null);\r\n        return (req.status === 200) ? req.responseText : null;\r\n    }\r\n\r\n    // static LoadTextResource(url: string, callback:(data: any, d2:any) => void ) {\r\n    //     let request = new XMLHttpRequest();\r\n    //     request.open('GET', url + '?please-dont-cache=' + Math.random(), true);\r\n    //     request.onload = function () {\r\n    //         if (request.status < 200 || request.status > 299) {\r\n    //             callback('Error: HTTP Status ' + request.status + ' on resource ' + url);\r\n    //         } else {\r\n    //             callback(null, request.responseText);\r\n    //         }\r\n    //     };\r\n    //     request.send();\r\n    // }\r\n    // static LoadShader(url: string, callback:(data: null, callback:string) => void ) {\r\n    //     GLUtility.LoadTextResource(url, callback);\r\n    // }\r\n    static loadImage(url: string, callback: (data: null, image: HTMLElement) => void) {\r\n        const image = new Image();\r\n        image.onload = function () {\r\n            callback(null, image);\r\n        };\r\n        image.src = url;\r\n    }\r\n    // static LoadJSONResource(url: string, callback:(data: string, callback:string) => void ) {\r\n    //     GLUtility.LoadTextResource(url, function (err: Error, result) {\r\n    //         if (err) {\r\n    //             callback(err);\r\n    //         } else {\r\n    //             try {\r\n    //                 callback(null, JSON.parse(result));\r\n    //             } catch (e) {\r\n    //                 callback(e);\r\n    //             }\r\n    //         }\r\n    //     });\r\n    // }\r\n}\r\n","export enum ATTR {\r\n    ATTR_POSITION_NAME = 'a_position',\r\n    ATTR_POSITION_LOC = 0,\r\n    ATTR_NORMAL_NAME = 'a_norm',\r\n    ATTR_NORMAL_LOC = 1,\r\n    ATTR_UV_NAME = 'a_uv',\r\n    ATTR_UV_LOC = 2,\r\n\r\n    ATTR_COLOR_LOC = 4,\r\n    ATTR_COLOR_NAME = 'a_color',\r\n}\r\n\r\nexport class AttribLocations {\r\n    position: number;\r\n    normal: number;\r\n    uv: number;\r\n    constructor(gl: WebGL2RenderingContext, program: WebGLProgram) {\r\n        this.position = gl.getAttribLocation(program, ATTR.ATTR_NORMAL_NAME);\r\n        this.normal = gl.getAttribLocation(program, ATTR.ATTR_NORMAL_NAME);\r\n        this.uv = gl.getAttribLocation(program, ATTR.ATTR_UV_NAME);\r\n    }\r\n}\r\n\r\nexport class UniformLocations {\r\n    uPointSize: WebGLUniformLocation | null;\r\n    uAngle: WebGLUniformLocation | null;\r\n\r\n    perspective: WebGLUniformLocation | null;\r\n    modalMatrix: WebGLUniformLocation | null;\r\n    cameraMatrix: WebGLUniformLocation | null;\r\n    mainTexture: WebGLUniformLocation | null;\r\n    constructor(gl: WebGL2RenderingContext, program: WebGLProgram) {\r\n        this.perspective =\tgl.getUniformLocation(program, 'uPMatrix');\r\n        this.modalMatrix =\tgl.getUniformLocation(program, 'uMVMatrix');\r\n        this.cameraMatrix =\tgl.getUniformLocation(program, 'uCameraMatrix');\r\n        this.mainTexture =\tgl.getUniformLocation(program, 'uMainTex' );\r\n    }\r\n}","import { GLShaderCommon } from '../Utility/GLShaderCommon';\r\nimport { AttribLocations, UniformLocations } from './AttribLocations';\r\nimport { Modal } from './Modal';\r\n\r\nexport class Shader {\r\n\r\n    gl: WebGL2RenderingContext;\r\n    program: WebGLProgram | null;\r\n\r\n    attribLoc: AttribLocations;\r\n    uniformLoc: UniformLocations;\r\n\r\n    constructor(gl: WebGL2RenderingContext , vertShaderSrc: string, fragShaderSrc: string ) {\r\n        this.program = GLShaderCommon.getShaderProgram(gl, vertShaderSrc, fragShaderSrc, true);\r\n\r\n        if (this.program != null) {\r\n            this.gl = gl;\r\n            gl.useProgram(this.program);\r\n            this.attribLoc = new AttribLocations(gl, this.program);\r\n            this.uniformLoc = new UniformLocations(gl, this.program);\r\n            // this.uniformLoc = {};\t// TODO : Replace in later lessons with get standardUniformLocations.\r\n        }\r\n\r\n        // Note :: Extended shaders should deactivate shader when done calling super and setting up custom parts in the constructor.\r\n    }\r\n\r\n    // ...................................................\r\n    // Methods\r\n    activate() {\r\n         this.gl.useProgram(this.program); return this; \r\n    }\r\n    deactivate() { \r\n        this.gl.useProgram(null); return this; \r\n    }\r\n\r\n    // function helps clean up resources when shader is no longer needed.\r\n    dispose() {\r\n        // unbind the program if its currently active\r\n        if (this.gl.getParameter(this.gl.CURRENT_PROGRAM) === this.program) {this.gl.useProgram(null); }\r\n        this.gl.deleteProgram(this.program);\r\n    }\r\n    setPerspective(matData: Float32Array) {\r\n        this.gl.uniformMatrix4fv(this.uniformLoc.perspective, false, matData); \r\n        return this; \r\n    }\r\n    setModalMatrix(matData: Float32Array) {\r\n        this.gl.uniformMatrix4fv(this.uniformLoc.modalMatrix, false, matData); \r\n        return this; \r\n    }\r\n    setCameraMatrix(matData: Float32Array) {\r\n        this.gl.uniformMatrix4fv(this.uniformLoc.cameraMatrix, false, matData); \r\n        return this; \r\n    }\r\n    // ...................................................\r\n    // RENDER RELATED METHODS\r\n\r\n    // Setup custom properties\r\n    preRender() {\r\n        //\r\n    } \r\n    // Handle rendering a modal\r\n    renderModal(modal: Modal) {\r\n        this.gl.bindVertexArray(modal.mesh.vao);\t// Enable VAO, this will set all the predefined attributes for the shader\r\n        \r\n        if (modal.mesh.indexCount) {\r\n            this.gl.drawElements(modal.mesh.drawMode, modal.mesh.indexCount, this.gl.UNSIGNED_SHORT, 0); \r\n        } else {\r\n            this.gl.drawArrays(modal.mesh.drawMode, 0, modal.mesh.vertexCount);\r\n        }\r\n\r\n        this.gl.bindVertexArray(null);\r\n\r\n        return this;\r\n    }\r\n}"],"names":["GLShaderCommon","static","gl","vertexShader","fragmentShader","needValidate","vShader","createShader","VERTEX_SHADER","fShader","FRAGMENT_SHADER","program","createProgram","console","error","type","source","shader","shaderSource","compileShader","getShaderParameter","COMPILE_STATUS","log","getShaderInfoLog","deleteShader","attachShader","linkProgram","getProgramParameter","LINK_STATUS","getProgramInfoLog","deleteProgram","validateProgram","VALIDATE_STATUS","shaderString","url","getSourceSynch","req","XMLHttpRequest","open","send","status","responseText","callback","image","Image","onload","src","ATTR","AttribLocations","constructor","position","normal","uv","this","getAttribLocation","ATTR_NORMAL_NAME","ATTR_UV_NAME","UniformLocations","uPointSize","uAngle","perspective","modalMatrix","cameraMatrix","mainTexture","getUniformLocation","Shader","vertShaderSrc","fragShaderSrc","attribLoc","uniformLoc","useProgram","activate","deactivate","dispose","getParameter","CURRENT_PROGRAM","setPerspective","matData","uniformMatrix4fv","setModalMatrix","setCameraMatrix","preRender","renderModal","modal","bindVertexArray","mesh","vao","indexCount","drawElements","drawMode","UNSIGNED_SHORT","drawArrays","vertexCount"],"sourceRoot":""}