{"version":3,"file":"static/js/28042.4565b23a.chunk.js","mappings":"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","sources":["njslab/Raster/AppFace/index.ts"],"sourcesContent":["\r\nimport * as tf from '@tensorflow/tfjs'\r\nimport * as facemesh from '@tensorflow-models/facemesh';\r\n// import fm from '@tensorflow-models/facemesh';\r\n\r\nimport { CanvasSD } from './Core/CanvasSD';\r\nimport { Implementation } from './Implementation';\r\n// import { Application } from '../';\r\nexport class AppFace {\r\n    // app: Application;\r\n    canvasSD: CanvasSD;\r\n    implementation: Implementation;\r\n    host: HTMLElement;\r\n    divText: HTMLElement;\r\n    public static Init(id: string) {\r\n        new AppFace(id);\r\n    }\r\n    constructor(id: string = 'main') {\r\n\r\n        const host = document.getElementById(id);\r\n\r\n        if (host) {\r\n            this.host = host;\r\n        }\r\n\r\n\r\n        this.InitHTML();\r\n\r\n\r\n        this.init();\r\n        \r\n    }\r\n    async init() {        \r\n        const video = document.createElement('video');\r\n        this.host.append(video);\r\n        video.id = 'video';\r\n\r\n        const canvas = document.createElement('canvas');\r\n        this.host.append(canvas);\r\n        await main(canvas);\r\n    }\r\n    InitHTML() {\r\n        const btn0 = document.createElement('button');\r\n        btn0.style.width = '100px';\r\n        btn0.style.height = '20px';\r\n        btn0.style.marginLeft = '20px';\r\n        btn0.style.zIndex = '5';\r\n        // btn0.style.left = '20px';\r\n        // btn0.style.top = '20px';\r\n        // btn0.style.position = 'absolute';\r\n        btn0.name = 'Clear';\r\n        btn0.innerText = 'Clear';\r\n        btn0.value = 'Clear';\r\n        btn0.onclick = () => { console.log(this); this.canvasSD.Clear(); };\r\n\r\n        this.host.appendChild(btn0);\r\n        this.divText = document.createElement('div');\r\n        this.divText.id = 'classText';\r\n        this.divText.style.zIndex = '5';\r\n        // this.divText.style.left = '150px';\r\n        // this.divText.style.top = '20px';\r\n        // this.divText.style.position = 'absolute';\r\n        this.divText.innerText = 'class: ';\r\n        this.divText.style.marginLeft = '20px';\r\n        this.host.appendChild(this.divText);\r\n    }\r\n    Init(ctx: CanvasRenderingContext2D) {\r\n        // console.log('this is init...');\r\n    }\r\n    Clear() {\r\n        this.canvasSD.Clear();\r\n    }\r\n}\r\n\r\nfunction isMobile() {\r\n    const isAndroid = /Android/i.test(navigator.userAgent);\r\n    const isiOS = /iPhone|iPad|iPod/i.test(navigator.userAgent);\r\n    return isAndroid || isiOS;\r\n  }\r\n\r\nlet video: any;\r\nconst VIDEO_SIZE = 500;\r\nconst mobile = isMobile();\r\n\r\nlet videoWidth, videoHeight, ctx; // ,scatterGL model, ;\r\n// let scatterGLHasInitialized = false;\r\n\r\nlet model: any;\r\n\r\n\r\nconst  main = async (canvas: HTMLCanvasElement)  => {\r\n    console.log(tf.setBackend);\r\n    await tf.setBackend('webgl'); // ['wasm', 'webgl', 'cpu']\r\n    // setupDatGui();\r\n  \r\n    // stats.showPanel(0);  // 0: fps, 1: ms, 2: mb, 3+: custom\r\n    // document.getElementById('main').appendChild(stats.dom);\r\n  \r\n    await setupCamera();\r\n    video.play();\r\n    videoWidth = video.videoWidth;\r\n    videoHeight = video.videoHeight;\r\n    video.width = videoWidth;\r\n    video.height = videoHeight;\r\n  \r\n    canvas.width = videoWidth;\r\n    canvas.height = videoHeight;\r\n    // const canvasContainer = document.querySelector('.canvas-wrapper');\r\n    canvas.style.width = videoWidth + 'px';\r\n    canvas.style.height = videoHeight + 'px';\r\n    // canvasContainer.style = `width: ${videoWidth}px; height: ${videoHeight}px`;\r\n  \r\n    ctx = canvas.getContext('2d') as CanvasRenderingContext2D;\r\n    ctx.translate(canvas.width, 0);\r\n    ctx.scale(-1, 1);\r\n    ctx.fillStyle = '#32EEDB';\r\n    ctx.strokeStyle = '#32EEDB';\r\n    ctx.lineWidth = 0.5;\r\n  \r\n    model = await facemesh.load({maxFaces: 1000});\r\n    console.log(model)\r\n    renderPrediction();\r\n  \r\n    // if (renderPointcloud) {\r\n    //   document.querySelector('#scatter-gl-container').style =\r\n    //       `width: ${VIDEO_SIZE}px; height: ${VIDEO_SIZE}px;`;\r\n  \r\n    //   scatterGL = new ScatterGL(\r\n    //       document.querySelector('#scatter-gl-container'),\r\n    //       {'rotateOnStart': false, 'selectEnabled': false});\r\n    // }\r\n};\r\n\r\n const setupCamera = async () => {\r\n    video = document.getElementById('video');\r\n  \r\n    const stream = await navigator.mediaDevices.getUserMedia({\r\n      'audio': false,\r\n      'video': {\r\n        facingMode: 'user',\r\n        // Only setting the video to a specified size in order to accommodate a\r\n        // point cloud, so on mobile devices accept the default size.\r\n        width: mobile ? undefined : VIDEO_SIZE,\r\n        height: mobile ? undefined : VIDEO_SIZE\r\n      },\r\n    });\r\n    video.srcObject = stream;\r\n  \r\n    return new Promise((resolve) => {\r\n      video.onloadedmetadata = () => {\r\n        resolve(video);\r\n      };\r\n    });\r\n  }\r\n  \r\nconst renderPrediction = async() => {\r\n  // console.log('ren');\r\n    // stats.begin();\r\n   \r\n    const predictions = await model.estimateFaces(video);\r\n      console.log(predictions[0].faceInViewConfidence)\r\n    //  ctx.drawImage(\r\n    //      video, 0, 0, videoWidth, videoHeight, 0, 0, canvas.width, canvas.height);\r\n   \r\n    //  document.getElementById('myDiv01').innerHTML = '' \r\n    //  if (predictions.length > 0) {\r\n    //    predictions.forEach(prediction => {\r\n    //      try {\r\n    //        document.getElementById('myDiv01').innerHTML += 'Confidence: ' + prediction.faceInViewConfidence.toFixed(4) + '<br>'\r\n    //        // console.log(prediction.faceInViewConfidence.toFixed(4))\r\n    //      }\r\n    //      catch(err) {\r\n    //      document.getElementById('myDiv01').innerHTML = err.message;\r\n    //      }\r\n           \r\n    //      const keypoints = prediction.scaledMesh;\r\n    // // console.log(keypoints[0][2])\r\n    //      if (state.triangulateMesh) {\r\n    //        for (let i = 0; i < TRIANGULATION.length / 3; i++) {\r\n    //          const points = [\r\n    //            TRIANGULATION[i * 3], TRIANGULATION[i * 3 + 1],\r\n    //            TRIANGULATION[i * 3 + 2]\r\n    //          ].map(index => keypoints[index]);\r\n   \r\n    //          drawPath(ctx, points, true);\r\n    //        }\r\n    //      } else {\r\n    //        for (let i = 0; i < keypoints.length; i++) {\r\n    //          const x = keypoints[i][0];\r\n    //          const y = keypoints[i][1];\r\n   \r\n    //          ctx.beginPath();\r\n    //          ctx.arc(x, y, 1 /* radius */, 0, 2 * Math.PI);\r\n    //          ctx.fill();\r\n    //        }\r\n    //      }\r\n    //    });\r\n   \r\n    //    if (renderPointcloud && state.renderPointcloud && scatterGL != null) {\r\n    //      const pointsData = predictions.map(prediction => {\r\n    //        let scaledMesh = prediction.scaledMesh;\r\n    //        return scaledMesh.map(point => ([-point[0], -point[1], -point[2]]));\r\n    //      });\r\n   \r\n    //      let flattenedPointsData = [];\r\n    //      for (let i = 0; i < pointsData.length; i++) {\r\n    //        flattenedPointsData = flattenedPointsData.concat(pointsData[i]);\r\n    //      }\r\n    //      const dataset = new ScatterGL.Dataset(flattenedPointsData);\r\n   \r\n    //      if (!scatterGLHasInitialized) {\r\n    //        scatterGL.render(dataset);\r\n    //      } else {\r\n    //        scatterGL.updateDataset(dataset);\r\n    //      }\r\n    //      scatterGLHasInitialized = true;\r\n    //    }\r\n    //  }\r\n   \r\n   //  stats.end();\r\n  //  console.log('rendering');\r\n     requestAnimationFrame(renderPrediction);\r\n};\r\n\r\nexport class Solution {\r\n  public divHost: HTMLElement;\r\n\r\n  constructor(id: string) {\r\n      this.divHost = document.getElementById(id);\r\n\r\n      AppFace.Init(id)\r\n  }\r\n  public destroy() {\r\n      if (this.divHost) {\r\n          try {\r\n              while (this.divHost.firstChild) {\r\n                  this.divHost.removeChild(this.divHost.firstChild);\r\n              }\r\n          } catch (error) {\r\n              console.error('Error in destroy method:', error);\r\n          }\r\n      } else {\r\n          console.warn('divHost is undefined in destroy method');\r\n      }\r\n  }\r\n}"],"names":["AppFace","id","constructor","canvasSD","implementation","host","divText","document","getElementById","this","InitHTML","init","async","video","createElement","append","canvas","main","btn0","style","width","height","marginLeft","zIndex","name","innerText","value","onclick","console","log","Clear","appendChild","Init","ctx","mobile","isAndroid","test","navigator","userAgent","isiOS","isMobile","videoWidth","videoHeight","model","tf","setupCamera","play","getContext","translate","scale","fillStyle","strokeStyle","lineWidth","facemesh","maxFaces","renderPrediction","stream","mediaDevices","getUserMedia","facingMode","undefined","srcObject","Promise","resolve","onloadedmetadata","predictions","estimateFaces","faceInViewConfidence","requestAnimationFrame","Solution","divHost","destroy","firstChild","removeChild","error","warn"],"sourceRoot":""}