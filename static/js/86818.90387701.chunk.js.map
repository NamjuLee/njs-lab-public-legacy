{"version":3,"file":"static/js/86818.90387701.chunk.js","mappings":"sJAIO,MAAMA,EAgBTC,cAAe,KAHfC,6BAAuB,OACvBC,8BAAwB,OACxBC,UAAoB,EAEhBC,IAAsBC,MAAOC,KACvBC,KAAKN,wBAAyBM,KAAKL,0BAA4BI,EACjEC,KAAKJ,UAAW,CAAI,GAI5B,CACOK,4BAA4BC,GAC/B,QAAqCC,IAAjCH,KAAKN,wBAET,OAAOU,EAAAA,EAAAA,OAAK,KACR,MAAMC,GAAIC,EAAAA,EAAAA,UAAS,CAACJ,IAEdK,EADaP,KAAKN,wBAAwBc,QAAQH,GAC/BI,WACzB,OAAOT,KAAKU,2CAA2CH,EAAM,GAAG,IANlBI,QAAQC,MAAM,kBAQpE,CACQF,2CAA2CL,GAC/C,MAAMQ,EAASC,KAAKC,MAAMV,EAAI,IAC9B,OAAOb,EAAawB,WAAWH,EACnC,CACOI,6BAA6Bf,GAChC,QAAsCC,IAAlCH,KAAKL,yBACT,OAAOS,EAAAA,EAAAA,OAAK,KAER,MAAMC,EAAIa,EAAAA,SAAY,CAAChB,IAEjBiB,EAAanB,KAAKL,yBAAyBa,QAAQH,GAKnDe,EAAoB,GACZ,CACV,MAAMC,EAASC,MAAMC,KAAKJ,EAAWV,YAC/Be,EAAeC,EAAyBJ,GAI9C,IAAK,IAAIK,KAAKF,EAAc,CACxB,MAAMG,EAAsBN,EAAOK,GAC7BE,EAAO,SAAWpC,EAAawB,WAAWU,GAAK,iBAAmBC,EAAYE,QAAQ,GAE5FT,EAAQU,KAAKF,EACjB,CACJ,CAEA,MAAMG,EAASZ,EAAWa,QAAQ,GAAGvB,WAAW,GAChD,MAAO,CAACjB,EAAawB,WAAWe,GAASX,EAAQ,IA1BFT,QAAQC,MAAM,kBA8BrE,EArESpB,EACFwB,WAAa,CAChB,EAAG,SACH,EAAG,UACH,EAAG,eACH,EAAG,eACH,EAAG,YACH,EAAG,OACH,EAAG,QACH,EAAG,QACH,EAAG,SA8DX,MAAMnB,EAAsBoC,UAGxB,IAAIC,EAAI,iHAER,MAAMxC,QAAgCyC,EAAAA,EAAAA,iBAAgBD,GAEtDA,EAAI,kHAEJ,MAAO,CAACxC,QAD+ByC,EAAAA,EAAAA,iBAAgBD,GACI,EAEzDT,EAA4BpB,IAC9B,MAAM+B,EAAU,IAAId,MAAMjB,EAAEgC,QAC5B,IAAK,IAAIX,EAAI,EAAGA,EAAIrB,EAAEgC,SAAUX,EAAKU,EAAQV,GAAKA,EAElD,OADAU,EAAQE,MAAK,CAACC,EAAGC,IAAenC,EAAEkC,GAAKlC,EAAEmC,IAAM,EAAInC,EAAEkC,GAAKlC,EAAEmC,GAAK,EAAI,IAC9DJ,CAAO,C","sources":["njslab/Workshop/workshop-ml/SmartDrawing/Core/SmartDrawing.ts"],"sourcesContent":["import { tensor2d, tidy, Tensor2D, loadLayersModel } from '@tensorflow/tfjs';\r\nimport * as tf from '@tensorflow/tfjs';\r\n// import { NVector3 } from '../../Lib/NVector3';\r\n\r\nexport class SmartDrawing {\r\n    static CLASS_TYPE = {\r\n        0: 'CIRCLE',\r\n        1: 'TRI-GON',\r\n        2: 'ARROW_SINGLE',\r\n        3: 'ARROW_DOUBLE',\r\n        4: 'RECTANGLE',\r\n        5: 'TEXT',\r\n        6: 'CURVE',\r\n        7: 'HEART',\r\n        8: 'CLOUD'\r\n    };\r\n\r\n    modelLogisticRegression: tf.LayersModel\r\n    modelMultiClassification: tf.LayersModel\r\n    isLoaded: boolean = false;\r\n    constructor() {\r\n        LoadModelFromPublic().then( (models) =>{\r\n            [ this.modelLogisticRegression, this.modelMultiClassification ]= models;\r\n            this.isLoaded = true;\r\n        //     console.log(this);\r\n        });\r\n    //     console.log('executing Smart Drawing example');\r\n    }\r\n    public predictByLogisticRegression(data: number[]) {\r\n        if (this.modelLogisticRegression === undefined) { console.error('no model loaded'); return; }\r\n    //     console.log('==============================');\r\n        return tidy(() => {\r\n            const d = tensor2d([data]);\r\n            const predictOut = this.modelLogisticRegression.predict(d) as Tensor2D;\r\n            const score = predictOut.dataSync();\r\n            return this.PredictionPostProcessingLogisticRegression(score[0]);\r\n        });\r\n    }\r\n    private PredictionPostProcessingLogisticRegression(d: number) {\r\n        const result = Math.floor(d + 0.5);\r\n        return SmartDrawing.CLASS_TYPE[result];\r\n    }\r\n    public predictByMultiClassification(data: number[]) {\r\n        if (this.modelMultiClassification === undefined) { console.error('no model loaded'); return; }\r\n        return tidy(() => {\r\n            // console.log(data);\r\n            const d = tf.tensor2d([data]);\r\n            // console.log(d.toFloat());\r\n            const predictOut = this.modelMultiClassification.predict(d) as Tensor2D;\r\n            // console.log(predictOut);\r\n            // console.log(predictOut.toString());\r\n            // console.log('lllllllllllllllll');\r\n            const rankings = true;\r\n            const outText: string[] = [];\r\n            if (rankings) {\r\n                const logits = Array.from(predictOut.dataSync());\r\n                const rankingIndex = getIndexBySortDescending(logits as number[]);\r\n                // console.log(logits);\r\n                // console.log(rankingIndex);\r\n                // console.log('#####################');\r\n                for (let i of rankingIndex) {\r\n                    const probability: number = logits[i] as number;\r\n                    const text = 'class:' + SmartDrawing.CLASS_TYPE[i] + ', probability:' + probability.toFixed(5);\r\n                //     console.log(text);\r\n                    outText.push(text);\r\n                }\r\n            }\r\n\r\n            const winner = predictOut.argMax(-1).dataSync()[0];\r\n            return [SmartDrawing.CLASS_TYPE[winner], outText];\r\n            // console.log(this.classStringsMultiClassification[winner]);\r\n            // return this.PredictionPostProcessingLogisticRegression(scoreArray[0]);\r\n        });\r\n    }\r\n}\r\n\r\nconst LoadModelFromPublic = async () => {\r\n    // http://www.njstudio.co.kr/ml/sm/modelLogisticRegression0/model.json\r\n    // let file = 'ML/SmartDrawing/modelLogisticRegression0/model.json';\r\n    let file = `https://raw.githubusercontent.com/NamjuLee/data/master/smart-drawing/model/modelLogisticRegression0/model.json`;\r\n    // let file = 'ML/SmartDrawing/new/model.json';\r\n    const modelLogisticRegression = await loadLayersModel(file);\r\n\r\n    file = `https://raw.githubusercontent.com/NamjuLee/data/master/smart-drawing/model/modelMultiClassification0/model.json`;\r\n    const modelMultiClassification = await loadLayersModel(file);\r\n    return [modelLogisticRegression , modelMultiClassification]\r\n};\r\nconst getIndexBySortDescending = (d: number[]) => {\r\n    const indices = new Array(d.length);\r\n    for (let i = 0; i < d.length; ++i) { indices[i] = i; }\r\n    indices.sort((a, b) => { return d[a] > d[b] ? -1 : d[a] < d[b] ? 1 : 0; });\r\n    return indices;\r\n}"],"names":["SmartDrawing","constructor","modelLogisticRegression","modelMultiClassification","isLoaded","LoadModelFromPublic","then","models","this","predictByLogisticRegression","data","undefined","tidy","d","tensor2d","score","predict","dataSync","PredictionPostProcessingLogisticRegression","console","error","result","Math","floor","CLASS_TYPE","predictByMultiClassification","tf","predictOut","outText","logits","Array","from","rankingIndex","getIndexBySortDescending","i","probability","text","toFixed","push","winner","argMax","async","file","loadLayersModel","indices","length","sort","a","b"],"sourceRoot":""}