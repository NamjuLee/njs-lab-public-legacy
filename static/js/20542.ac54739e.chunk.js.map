{"version":3,"file":"static/js/20542.ac54739e.chunk.js","mappings":"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","sources":["njslab/LabStarter/AppNGL3d/NGL3dApp_09/Mesh/Geometry/index.ts"],"sourcesContent":["\r\nexport class Geometry {\r\n\r\n    vert: number[] = [];\r\n    UV: number[] = [];\r\n    index: number[] = [];\r\n    normal: number[] = [];\r\n\r\n    static GetPlan() {\r\n        let geo = new Geometry();\r\n        geo.vert = [-0.5, 0.5, 0, -0.5, -0.5, 0, 0.5, -0.5, 0, 0.5, 0.5, 0];\r\n        geo.UV = [0., 0., 0., 1., 1., 1., 1., 0.];\r\n        geo.index = [0, 1, 2, 2, 3, 0];\r\n        return geo;\r\n    }\r\n    static GetQuad() {\r\n        let geo = new Geometry();\r\n        geo.vert = [-0.5, 0.5, 0, -0.5, -0.5, 0, 0.5, -0.5, 0, 0.5, 0.5, 0];\r\n        geo.UV = [0., 0., 0., 1., 1., 1., 1., 0.];\r\n        geo.index = [0, 1, 2, 2, 3, 0];\r\n        return geo;\r\n    }\r\n    static GetMulitQuad() {\r\n        let geo = new Geometry();\r\n\r\n        // geo.vert = [ -0.5, 0.5, 0, -0.5, -0.5, 0, 0.5, -0.5, 0, 0.5, 0.5, 0 ];\r\n\r\n        // geo.UV = [ 0., 0., 0., 1., 1., 1., 1., 0. ];\r\n        // geo.index = [ 0, 1, 2,  2, 3, 0 ];\r\n\r\n        geo.vert = [];\r\n        geo.index = []; // 0,1,2, 2,3,0\r\n        geo.UV = []; // 0,0, 0,1, 1,1, 1,0\r\n\r\n        for (let i = 0; i < 10; i++) {\r\n            // Calculate a random size, y rotation and position for the quad\r\n            let size = 0.2 + (0.8 * Math.random()),\t\t// Random Quad Size in the range of 0.2 - 1.0\r\n                half = size * 0.5,\t\t\t\t\t\t// Half of size, this is the radius for rotation\r\n                angle = Math.PI * 2 * Math.random(),\t// Random angle between 0 - 360 degrees in radians\r\n                dx = half * Math.cos(angle),\t\t\t// Calc the x distance, used as an offset for the random position\r\n                dy = half * Math.sin(angle),\t\t\t// Calc the y distance, for same offset but used in z\r\n                x = -2.5 + (Math.random() * 5),\t\t\t// Random position between -2.5 - 2.5\r\n                y = -2.5 + (Math.random() * 5),\r\n                z = 2.5 - (Math.random() * 5),\r\n                p = i * 4;\t\t\t\t\t\t\t\t// Index of the first vertex of a quad\r\n\r\n            // Build the 4 points of the quad\r\n            geo.vert.push(x - dx, y + half, z - dy);\t\t// TOP LEFT\r\n            geo.vert.push(x - dx, y - half, z - dy);\t\t// BOTTOM LEFT\r\n            geo.vert.push(x + dx, y - half, z + dy);\t\t// BOTTOM RIGHT\r\n            geo.vert.push(x + dx, y + half, z + dy);\t\t// TOP RIGHT\r\n\r\n            geo.UV.push(0, 0, 0, 1, 1, 1, 1, 0);\t\t// Quad's UV\r\n            geo.index.push(p, p + 1, p + 2, p + 2, p + 3, p);\t// Quad's Index\r\n        }\r\n        return geo;\r\n    }\r\n    static GetCube(width: number, height: number, depth: number, x: number, y: number, z: number) {\r\n        let geo = new Geometry();\r\n        let w = width * 0.5, h = height * 0.5, d = depth * 0.5;\r\n        let x0 = x - w, x1 = x + w, y0 = y - h, y1 = y + h, z0 = z - d, z1 = z + d;\r\n\r\n        // Starting bottom left corner, then working counter clockwise to create the front face.\r\n        // Backface is the first face but in reverse (3,2,1,0)\r\n        // keep each quad face built the same way to make index and uv easier to assign\r\n        geo.vert = [\r\n            x0, y1, z1, 0,\t// 0 Front\r\n            x0, y0, z1, 0,\t// 1\r\n            x1, y0, z1, 0,\t// 2\r\n            x1, y1, z1, 0,\t// 3\r\n\r\n            x1, y1, z0, 1,\t// 4 Back\r\n            x1, y0, z0, 1,\t// 5\r\n            x0, y0, z0, 1,\t// 6\r\n            x0, y1, z0, 1,\t// 7\r\n\r\n            x0, y1, z0, 2,\t// 7 Left\r\n            x0, y0, z0, 2,\t// 6\r\n            x0, y0, z1, 2,\t// 1\r\n            x0, y1, z1, 2,\t// 0\r\n\r\n            x0, y0, z1, 3,\t// 1 Bottom\r\n            x0, y0, z0, 3,\t// 6\r\n            x1, y0, z0, 3,\t// 5\r\n            x1, y0, z1, 3,\t// 2\r\n\r\n            x1, y1, z1, 4,\t// 3 Right\r\n            x1, y0, z1, 4,\t// 2\r\n            x1, y0, z0, 4,\t// 5\r\n            x1, y1, z0, 4,\t// 4\r\n\r\n            x0, y1, z0, 5,\t// 7 Top\r\n            x0, y1, z1, 5,\t// 0\r\n            x1, y1, z1, 5,\t// 3\r\n            x1, y1, z0, 5\t// 4\r\n        ];\r\n\r\n        // Build the index of each quad [0,1,2, 2,3,0]\r\n        for (let i = 0; i < geo.vert.length / 4; i += 2) {\r\n            geo.index.push(i, i + 1, (Math.floor(i / 4) * 4) + ((i + 2) % 4));\r\n        }\r\n\r\n        // Build UV data for each vertex\r\n        for (let i = 0; i < 6; i++) {\r\n            geo.UV.push(0, 0, 0, 1, 1, 1, 1, 0);\r\n        }\r\n\r\n        // Build Normal data for each vertex\r\n        geo.normal = [\r\n            0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1,\t\t// Front\r\n            0, 0, -1, 0, 0, -1, 0, 0, -1, 0, 0, -1,\t\t// Back\r\n            -1, 0, 0, -1, 0, 0, -1, 0, 0, -1, 0, 0,\t\t// Left\r\n            0, -1, 0, 0, -1, 0, 0, -1, 0, 0, -1, 0,\t\t// Bottom\r\n            1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0,\t\t// Right\r\n            0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0\t\t// Top\r\n        ];\r\n\r\n        // let mesh = gl.fCreateMeshVAO(\"Cube\",aIndex,aVert,aNorm,aUV,4);\r\n        // mesh.noCulling = true;\t// TODO Only setting this true to view animations better.\r\n        // return mesh;\r\n        return geo;\r\n    }\r\n    constructor() {\r\n        //\r\n    }\r\n\r\n}"],"names":["Geometry","static","geo","vert","UV","index","i","half","Math","random","angle","PI","dx","cos","dy","sin","x","y","z","p","push","width","height","depth","w","h","d","x0","x1","y0","y1","z0","z1","length","floor","normal","constructor"],"sourceRoot":""}