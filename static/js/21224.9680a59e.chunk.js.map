{"version":3,"file":"static/js/21224.9680a59e.chunk.js","mappings":"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","sources":["njslab/Infrastructure/WebGPU/WebGPU_30_WGSL/src/view/triangle_mesh.ts","njslab/Infrastructure/WebGPU/WebGPU_30_WGSL/src/view/quad_mesh.ts","njslab/Infrastructure/WebGPU/WebGPU_30_WGSL/src/view/material.ts","njslab/Infrastructure/WebGPU/WebGPU_30_WGSL/src/model/definitions.ts","njslab/Infrastructure/WebGPU/WebGPU_30_WGSL/src/view/renderer.ts","njslab/Infrastructure/WebGPU/WebGPU_30_WGSL/src/model/math_stuff.ts","njslab/Infrastructure/WebGPU/WebGPU_30_WGSL/src/model/triangle.ts","njslab/Infrastructure/WebGPU/WebGPU_30_WGSL/src/model/camera.ts","njslab/Infrastructure/WebGPU/WebGPU_30_WGSL/src/model/scene.ts","njslab/Infrastructure/WebGPU/WebGPU_30_WGSL/src/control/app.ts","njslab/Infrastructure/WebGPU/WebGPU_30_WGSL/index.ts","../node_modules/gl-matrix/esm/vec3.js"],"sourcesContent":["export class TriangleMesh {\r\n\r\n    buffer: GPUBuffer\r\n    bufferLayout: GPUVertexBufferLayout\r\n\r\n    constructor(device: GPUDevice) {\r\n\r\n        // x y z u v\r\n        const vertices: Float32Array = new Float32Array(\r\n            [\r\n                0.0,  0.0,  0.5, 0.5, 0.0,\r\n                0.0, -0.5, -0.5, 0.0, 1.0,\r\n                0.0,  0.5, -0.5, 1.0, 1.0\r\n            ]\r\n        );\r\n\r\n        const usage: GPUBufferUsageFlags = GPUBufferUsage.VERTEX | GPUBufferUsage.COPY_DST;\r\n        //VERTEX: the buffer can be used as a vertex buffer\r\n        //COPY_DST: data can be copied to the buffer\r\n\r\n        const descriptor: GPUBufferDescriptor = {\r\n            size: vertices.byteLength,\r\n            usage: usage,\r\n            mappedAtCreation: true // similar to HOST_VISIBLE, allows buffer to be written by the CPU\r\n        };\r\n\r\n        this.buffer = device.createBuffer(descriptor);\r\n\r\n        //Buffer has been created, now load in the vertices\r\n        new Float32Array(this.buffer.getMappedRange()).set(vertices);\r\n        this.buffer.unmap();\r\n\r\n        //now define the buffer layout\r\n        this.bufferLayout = {\r\n            arrayStride: 20,\r\n            // @ts-ignore\r\n            attributes: [\r\n                {\r\n                    shaderLocation: 0,\r\n                    format: \"float32x3\",\r\n                    offset: 0\r\n                },\r\n                {\r\n                    shaderLocation: 1,\r\n                    format: \"float32x2\",\r\n                    offset: 12\r\n                }\r\n            ]\r\n        }\r\n\r\n    }\r\n}","export class QuadMesh {\r\n\r\n    buffer: GPUBuffer\r\n    bufferLayout: GPUVertexBufferLayout\r\n\r\n    constructor(device: GPUDevice) {\r\n\r\n        // x y z u v\r\n        const vertices: Float32Array = new Float32Array(\r\n            [\r\n                -0.5, -0.5, 0.0, 0.0, 0.0,\r\n                 0.5, -0.5, 0.0, 1.0, 0.0,\r\n                 0.5,  0.5, 0.0, 1.0, 1.0,\r\n\r\n                 0.5,  0.5, 0.0, 1.0, 1.0,\r\n                -0.5,  0.5, 0.0, 0.0, 1.0,\r\n                -0.5, -0.5, 0.0, 0.0, 0.0\r\n            ]\r\n        );\r\n\r\n        const usage: GPUBufferUsageFlags = GPUBufferUsage.VERTEX | GPUBufferUsage.COPY_DST;\r\n        //VERTEX: the buffer can be used as a vertex buffer\r\n        //COPY_DST: data can be copied to the buffer\r\n\r\n        const descriptor: GPUBufferDescriptor = {\r\n            size: vertices.byteLength,\r\n            usage: usage,\r\n            mappedAtCreation: true // similar to HOST_VISIBLE, allows buffer to be written by the CPU\r\n        };\r\n\r\n        this.buffer = device.createBuffer(descriptor);\r\n\r\n        //Buffer has been created, now load in the vertices\r\n        new Float32Array(this.buffer.getMappedRange()).set(vertices);\r\n        this.buffer.unmap();\r\n\r\n        //now define the buffer layout\r\n        this.bufferLayout = {\r\n            arrayStride: 20,\r\n            //@ts-ignore\r\n            attributes: [\r\n                {\r\n                    shaderLocation: 0,\r\n                    format: \"float32x3\",\r\n                    offset: 0\r\n                },\r\n                {\r\n                    shaderLocation: 1,\r\n                    format: \"float32x2\",\r\n                    offset: 12\r\n                }\r\n            ]\r\n        }\r\n\r\n    }\r\n}","export class Material {\r\n    \r\n    texture: GPUTexture\r\n    view: GPUTextureView\r\n    sampler: GPUSampler\r\n    bindGroup: GPUBindGroup;\r\n\r\n    async initialize(device: GPUDevice, url: string, bindGroupLayout: GPUBindGroupLayout) {\r\n        console.log(url)\r\n        const response: Response = await fetch(url);\r\n        const blob: Blob = await response.blob();\r\n        const imageData: ImageBitmap = await createImageBitmap(blob);\r\n\r\n        await this.loadImageBitmap(device, imageData);\r\n\r\n        const viewDescriptor: GPUTextureViewDescriptor = {\r\n            format: \"rgba8unorm\",\r\n            dimension: \"2d\",\r\n            aspect: \"all\",\r\n            baseMipLevel: 0,\r\n            mipLevelCount: 1,\r\n            baseArrayLayer: 0,\r\n            arrayLayerCount: 1\r\n        };\r\n        this.view = this.texture.createView(viewDescriptor);\r\n\r\n        const samplerDescriptor: GPUSamplerDescriptor = {\r\n            addressModeU: \"repeat\",\r\n            addressModeV: \"repeat\",\r\n            magFilter: \"linear\",\r\n            minFilter: \"nearest\",\r\n            mipmapFilter: \"nearest\",\r\n            maxAnisotropy: 1\r\n        };\r\n        this.sampler = device.createSampler(samplerDescriptor);\r\n\r\n        this.bindGroup = device.createBindGroup({\r\n            layout: bindGroupLayout,\r\n            entries: [\r\n                {\r\n                    binding: 0,\r\n                    resource: this.view\r\n                },\r\n                {\r\n                    binding: 1,\r\n                    resource: this.sampler\r\n                }\r\n            ]\r\n        });\r\n        \r\n    }\r\n\r\n    async loadImageBitmap(device: GPUDevice, imageData: ImageBitmap) {\r\n\r\n        const textureDescriptor: GPUTextureDescriptor = {\r\n            size: {\r\n                width: imageData.width,\r\n                height: imageData.height\r\n            },\r\n            format: \"rgba8unorm\",\r\n            usage: GPUTextureUsage.TEXTURE_BINDING | GPUTextureUsage.COPY_DST | GPUTextureUsage.RENDER_ATTACHMENT\r\n        };\r\n\r\n        this.texture = device.createTexture(textureDescriptor);\r\n\r\n        device.queue.copyExternalImageToTexture(\r\n            {source: imageData},\r\n            {texture: this.texture},\r\n            textureDescriptor.size\r\n        );\r\n    }\r\n}","import { mat4 } from \"gl-matrix\";\r\n\r\nexport enum object_types {\r\n    TRIANGLE,\r\n    QUAD\r\n}\r\n\r\nexport interface RenderData {\r\n    view_transform: mat4;\r\n    model_transforms: Float32Array;\r\n    object_counts: {[obj in object_types]: number}\r\n}","// import shader from \"./shaders/shaders.wgsl\";\r\nimport { TriangleMesh } from \"./triangle_mesh\";\r\nimport { QuadMesh } from \"./quad_mesh\";\r\nimport { mat4 } from \"gl-matrix\";\r\nimport { Material } from \"./material\";\r\nimport { object_types, RenderData } from \"../model/definitions\";\r\n\r\n\r\n\r\nconst shader = `\r\nstruct TransformData {\r\n    view: mat4x4<f32>,\r\n    projection: mat4x4<f32>,\r\n};\r\n\r\nstruct ObjectData {\r\n    model: array<mat4x4<f32>>,\r\n};\r\n\r\n@binding(0) @group(0) var<uniform> transformUBO: TransformData;\r\n@binding(1) @group(0) var<storage, read> objects: ObjectData;\r\n@binding(0) @group(1) var myTexture: texture_2d<f32>;\r\n@binding(1) @group(1) var mySampler: sampler;\r\n\r\nstruct Fragment {\r\n    @builtin(position) Position : vec4<f32>,\r\n    @location(0) TexCoord : vec2<f32>\r\n};\r\n\r\n@vertex\r\nfn vs_main(\r\n    @builtin(instance_index) ID: u32,\r\n    @location(0) vertexPostion: vec3<f32>, \r\n    @location(1) vertexTexCoord: vec2<f32>) -> Fragment {\r\n\r\n    var output : Fragment;\r\n    output.Position = transformUBO.projection * transformUBO.view * objects.model[ID] * vec4<f32>(vertexPostion, 1.0);\r\n    output.TexCoord = vertexTexCoord;\r\n\r\n    return output;\r\n}\r\n\r\n@fragment\r\nfn fs_main(@location(0) TexCoord : vec2<f32>) -> @location(0) vec4<f32> {\r\n    return textureSample(myTexture, mySampler, TexCoord);\r\n}\r\n`\r\nconst  getObjectFromSVGPath = async (path: string) => {\r\n    let parser = new DOMParser();\r\n    let response = await fetch(path);\r\n    let text = await response.text();\r\n    let xml = await parser.parseFromString(text, 'text/xml');\r\n    console.log(text, xml)\r\n    return text;\r\n}\r\n\r\nexport class Renderer {\r\n\r\n    canvas: HTMLCanvasElement;\r\n\r\n    // Device/Context objects\r\n    adapter: GPUAdapter;\r\n    device: GPUDevice;\r\n    context: GPUCanvasContext;\r\n    format : GPUTextureFormat;\r\n\r\n    // Pipeline objects\r\n    uniformBuffer: GPUBuffer;\r\n    pipeline: GPURenderPipeline;\r\n    frameGroupLayout: GPUBindGroupLayout;\r\n    materialGroupLayout: GPUBindGroupLayout;\r\n    frameBindGroup: GPUBindGroup;\r\n\r\n    // Depth Stencil stuff\r\n    depthStencilState: GPUDepthStencilState;\r\n    depthStencilBuffer: GPUTexture;\r\n    depthStencilView: GPUTextureView;\r\n    depthStencilAttachment: GPURenderPassDepthStencilAttachment;\r\n\r\n    // Assets\r\n    triangleMesh: TriangleMesh;\r\n    quadMesh: QuadMesh;\r\n    triangleMaterial: Material;\r\n    quadMaterial: Material;\r\n    objectBuffer: GPUBuffer;\r\n\r\n\r\n    constructor(canvas: HTMLCanvasElement){\r\n        this.canvas = canvas;\r\n    }\r\n\r\n   async Initialize() {\r\n\r\n        const dd = await getObjectFromSVGPath(process.env.PUBLIC_URL+\"/shaders/shaders.wgsl\")\r\n        console.log(dd)\r\n\r\n        await this.setupDevice();\r\n\r\n        await this.makeBindGroupLayouts();\r\n\r\n        await this.createAssets();\r\n\r\n        await this.makeDepthBufferResources();\r\n    \r\n        await this.makePipeline();\r\n\r\n        await this.makeBindGroup();\r\n    }\r\n\r\n    async setupDevice() {\r\n\r\n        //adapter: wrapper around (physical) GPU.\r\n        //Describes features and limits\r\n        this.adapter = await navigator.gpu?.requestAdapter() as GPUAdapter;\r\n        //device: wrapper around GPU functionality\r\n        //Function calls are made through the device\r\n        this.device = await this.adapter?.requestDevice() as GPUDevice\r\n        //context: similar to vulkan instance (or OpenGL context)\r\n        this.context = this.canvas.getContext(\"webgpu\") as GPUCanvasContext;\r\n        this.format = \"bgra8unorm\";\r\n        this.context.configure({\r\n            device: this.device,\r\n            format: this.format,\r\n            alphaMode: \"opaque\"\r\n        });\r\n\r\n    }\r\n\r\n    async makeDepthBufferResources() {\r\n\r\n        this.depthStencilState = {\r\n            format: \"depth24plus-stencil8\",\r\n            depthWriteEnabled: true,\r\n            depthCompare: \"less-equal\",\r\n        };\r\n\r\n        const size: GPUExtent3D = {\r\n            width: this.canvas.width,\r\n            height: this.canvas.height,\r\n            depthOrArrayLayers: 1\r\n        };\r\n        const depthBufferDescriptor: GPUTextureDescriptor = {\r\n            size: size,\r\n            format: \"depth24plus-stencil8\",\r\n            usage: GPUTextureUsage.RENDER_ATTACHMENT,\r\n        }\r\n        this.depthStencilBuffer = this.device.createTexture(depthBufferDescriptor);\r\n\r\n        const viewDescriptor: GPUTextureViewDescriptor = {\r\n            format: \"depth24plus-stencil8\",\r\n            dimension: \"2d\",\r\n            aspect: \"all\"\r\n        };\r\n        this.depthStencilView = this.depthStencilBuffer.createView(viewDescriptor);\r\n        \r\n        this.depthStencilAttachment = {\r\n            view: this.depthStencilView,\r\n            depthClearValue: 1.0,\r\n            depthLoadOp: \"clear\",\r\n            depthStoreOp: \"store\",\r\n\r\n            stencilLoadOp: \"clear\",\r\n            stencilStoreOp: \"discard\"\r\n        };\r\n\r\n    }\r\n\r\n    async makeBindGroupLayouts() {\r\n\r\n        this.frameGroupLayout = this.device.createBindGroupLayout({\r\n            //@ts-ignore\r\n            entries: [\r\n                {\r\n                    binding: 0,\r\n                    visibility: GPUShaderStage.VERTEX,\r\n                    buffer: {}\r\n                },\r\n                {\r\n                    binding: 1,\r\n                    visibility: GPUShaderStage.VERTEX,\r\n                    buffer: {\r\n                        type: \"read-only-storage\",\r\n                        hasDynamicOffset: false\r\n                    }\r\n                }\r\n            ]\r\n\r\n        });\r\n\r\n        this.materialGroupLayout = this.device.createBindGroupLayout({\r\n            entries: [\r\n                {\r\n                    binding: 0,\r\n                    visibility: GPUShaderStage.FRAGMENT,\r\n                    texture: {}\r\n                },\r\n                {\r\n                    binding: 1,\r\n                    visibility: GPUShaderStage.FRAGMENT,\r\n                    sampler: {}\r\n                }\r\n            ]\r\n\r\n        });\r\n\r\n    }\r\n\r\n    async makePipeline() {\r\n        \r\n        const pipelineLayout = this.device.createPipelineLayout({\r\n            bindGroupLayouts: [this.frameGroupLayout, this.materialGroupLayout]\r\n        });\r\n    \r\n        this.pipeline = this.device.createRenderPipeline({\r\n            vertex : {\r\n                module : this.device.createShaderModule({\r\n                    code : shader\r\n                }),\r\n                entryPoint : \"vs_main\",\r\n                buffers: [this.triangleMesh.bufferLayout,]\r\n            },\r\n    \r\n            fragment : {\r\n                module : this.device.createShaderModule({\r\n                    code : shader\r\n                }),\r\n                entryPoint : \"fs_main\",\r\n                targets : [{\r\n                    format : this.format\r\n                }]\r\n            },\r\n    \r\n            primitive : {\r\n                topology : \"triangle-list\"\r\n            },\r\n    \r\n            layout: pipelineLayout,\r\n            depthStencil: this.depthStencilState,\r\n        });\r\n\r\n    }\r\n\r\n    async createAssets() {\r\n        this.triangleMesh = new TriangleMesh(this.device);\r\n        this.quadMesh = new QuadMesh(this.device);\r\n        this.triangleMaterial = new Material();\r\n        this.quadMaterial = new Material();\r\n\r\n        this.uniformBuffer = this.device.createBuffer({\r\n            size: 64 * 2,\r\n            usage: GPUBufferUsage.UNIFORM | GPUBufferUsage.COPY_DST\r\n        });\r\n\r\n        const modelBufferDescriptor: GPUBufferDescriptor = {\r\n            size: 64 * 1024,\r\n            usage: GPUBufferUsage.STORAGE | GPUBufferUsage.COPY_DST,\r\n        };\r\n        this.objectBuffer = this.device.createBuffer(modelBufferDescriptor);\r\n\r\n        await this.triangleMaterial.initialize(this.device, process.env.PUBLIC_URL+\"/img/profile0.jpg\", this.materialGroupLayout);\r\n        await this.quadMaterial.initialize(this.device,process.env.PUBLIC_URL+\"/img/profile0.jpg\", this.materialGroupLayout);\r\n    }\r\n\r\n    async makeBindGroup() {\r\n        this.frameBindGroup = this.device.createBindGroup({\r\n            layout: this.frameGroupLayout,\r\n            entries: [\r\n                {\r\n                    binding: 0,\r\n                    resource: {\r\n                        buffer: this.uniformBuffer\r\n                    }\r\n                },\r\n                {\r\n                    binding: 1,\r\n                    resource: {\r\n                        buffer: this.objectBuffer,\r\n                    }\r\n                }\r\n            ]\r\n        });\r\n    }\r\n\r\n    async render(renderables: RenderData) {\r\n\r\n        //Early exit tests\r\n        if (!this.device || !this.pipeline) {\r\n            return;\r\n        }\r\n\r\n        //make transforms\r\n        const projection = mat4.create();\r\n        mat4.perspective(projection, Math.PI/4, 800/600, 0.1, 10);\r\n\r\n        const view = renderables.view_transform;\r\n\r\n        this.device.queue.writeBuffer(\r\n            this.objectBuffer, 0, \r\n            renderables.model_transforms, 0, \r\n            renderables.model_transforms.length\r\n        );\r\n        this.device.queue.writeBuffer(this.uniformBuffer, 0, view as ArrayBuffer); \r\n        this.device.queue.writeBuffer(this.uniformBuffer, 64, projection as ArrayBuffer);\r\n        \r\n        //command encoder: records draw commands for submission\r\n        const commandEncoder : GPUCommandEncoder = this.device.createCommandEncoder();\r\n        //texture view: image view to the color buffer in this case\r\n        const textureView : GPUTextureView = this.context.getCurrentTexture().createView();\r\n        //renderpass: holds draw commands, allocated from command encoder\r\n        const renderpass : GPURenderPassEncoder = commandEncoder.beginRenderPass({\r\n            //@ts-ignore\r\n            colorAttachments: [{\r\n                view: textureView,\r\n                clearValue: {r: 0.5, g: 0.0, b: 0.25, a: 1.0},\r\n                loadOp: \"clear\",\r\n                storeOp: \"store\"\r\n            }],\r\n            depthStencilAttachment: this.depthStencilAttachment,\r\n        });\r\n        \r\n        renderpass.setPipeline(this.pipeline);\r\n        renderpass.setBindGroup(0, this.frameBindGroup);\r\n\r\n        var objects_drawn: number = 0;\r\n\r\n        //Triangles\r\n        renderpass.setVertexBuffer(0, this.triangleMesh.buffer);\r\n        renderpass.setBindGroup(1, this.triangleMaterial.bindGroup); \r\n        renderpass.draw(\r\n            3, renderables.object_counts[object_types.TRIANGLE], \r\n            0, objects_drawn\r\n        );\r\n        objects_drawn += renderables.object_counts[object_types.TRIANGLE];\r\n\r\n        //Triangles\r\n        renderpass.setVertexBuffer(0, this.quadMesh.buffer);\r\n        renderpass.setBindGroup(1, this.quadMaterial.bindGroup); \r\n        renderpass.draw(\r\n            6, renderables.object_counts[object_types.QUAD], \r\n            0, objects_drawn\r\n        );\r\n        objects_drawn += renderables.object_counts[object_types.QUAD];\r\n\r\n        renderpass.end();\r\n    \r\n        this.device.queue.submit([commandEncoder.finish()]);\r\n\r\n    }\r\n    \r\n}","export function Deg2Rad(theta: number) : number {\n    return theta * Math.PI / 180;\n}","import { vec3, mat4 } from \"gl-matrix\";\nimport { Deg2Rad } from \"./math_stuff\";\n\nexport class Triangle {\n\n    position: vec3;\n    eulers: vec3;\n    model: mat4;\n\n    constructor(position: vec3, theta: number) {\n        this.position = position;\n        this.eulers = vec3.create();\n        this.eulers[2] = theta;\n    }\n\n    update() {\n        // this.eulers[2] += 0.1;\n        // this.eulers[2] %= 360;\n\n        this.model = mat4.create();\n        mat4.translate(this.model, this.model, this.position);\n        mat4.rotateZ(this.model, this.model, Deg2Rad(this.eulers[2]));\n    }\n\n    get_model(): mat4 {\n        return this.model;\n    }\n}","import { vec3, mat4 } from \"gl-matrix\";\nimport { Deg2Rad } from \"./math_stuff\";\n\nexport class Camera {\n\n    position: vec3;\n    eulers: vec3;\n    view: mat4;\n    forwards: vec3;\n    right: vec3;\n    up: vec3;\n\n    constructor(position: vec3, theta: number, phi: number) {\n        this.position = position;\n        this.eulers = [0, phi, theta];\n        this.forwards = vec3.create();\n        this.right = vec3.create();\n        this.up = vec3.create();\n    }\n\n    update() {\n\n        this.forwards = [\n            Math.cos(Deg2Rad(this.eulers[2])) * Math.cos(Deg2Rad(this.eulers[1])),\n            Math.sin(Deg2Rad(this.eulers[2])) * Math.cos(Deg2Rad(this.eulers[1])),\n            Math.sin(Deg2Rad(this.eulers[1]))\n        ];\n\n        vec3.cross(this.right, this.forwards, [0,0,1]);\n\n        vec3.cross(this.up, this.right, this.forwards);\n\n        var target: vec3 = vec3.create();\n        vec3.add(target, this.position, this.forwards);\n\n        this.view = mat4.create();\n        mat4.lookAt(this.view, this.position, target, this.up);\n    }\n\n    get_view(): mat4 {\n        return this.view;\n    }\n}","import { Triangle } from \"./triangle\";\nimport { Quad } from \"./quad\";\nimport { Camera } from \"./camera\";\nimport { vec3,mat4 } from \"gl-matrix\";\nimport { object_types, RenderData } from \"./definitions\";\n\nexport class Scene {\n\n    triangles: Triangle[];\n    quads: Quad[];\n    player: Camera;\n    object_data: Float32Array;\n    triangle_count: number;\n    quad_count: number;\n\n    constructor() {\n\n        this.triangles = [];\n        this.quads = [];\n        this.object_data = new Float32Array(16 * 1024);\n        this.triangle_count = 0;\n        this.quad_count = 0;\n\n        this.make_triangles();\n        // this.make_quads();\n\n        this.player = new Camera(\n            [-2, 0, 0.5], 0, 0\n        );\n\n    }\n\n    make_triangles() {\n        var i: number = 0;\n        for (var y:number = 0; y < 1; y++) {\n            this.triangles.push(\n                new Triangle( [2, y, 0], 0 )\n            );\n\n            var blank_matrix = mat4.create();\n            for (var j: number = 0; j < 16; j++) {\n                this.object_data[16 * i + j] = blank_matrix.at(j) as number;\n            }\n            i++;\n            this.triangle_count++;\n        }\n    }\n\n    // make_quads() {\n    //     var i: number = this.triangle_count;\n    //     for (var x: number = -10; x <= 10; x++) {\n    //         for (var y:number = -10; y <= 10; y++) {\n    //             this.quads.push(\n    //                 new Quad(\n    //                     [x, y, 0]\n    //                 )\n    //             );\n\n    //             var blank_matrix = mat4.create();\n    //             for (var j: number = 0; j < 16; j++) {\n    //                 this.object_data[16 * i + j] = <number>blank_matrix.at(j);\n    //             }\n    //             i++;\n    //             this.quad_count++;\n    //         }\n    //     }\n    // }\n\n    update() {\n\n        var i: number = 0;\n\n        this.triangles.forEach(\n            (triangle) => {\n                triangle.update();\n                var model = triangle.get_model();\n                for (var j: number = 0; j < 16; j++) {\n                    this.object_data[16 * i + j] = model.at(j) as number;\n                }\n                i++;\n            }\n        );\n\n        this.quads.forEach(\n            (quad) => {\n                quad.update();\n                var model = quad.get_model();\n                for (var j: number = 0; j < 16; j++) {\n                    this.object_data[16 * i + j] = model.at(j) as number;\n                }\n                i++;\n            }\n        );\n\n        this.player.update();\n    }\n\n    get_player(): Camera {\n        return this.player;\n    }\n\n    get_renderables(): RenderData {\n        return {\n            view_transform: this.player.get_view(),\n            model_transforms: this.object_data,\n            object_counts: {\n                [object_types.TRIANGLE]: this.triangle_count,\n                [object_types.QUAD]: this.quad_count,\n            }\n        }\n    }\n\n    spin_player(dX: number, dY: number) {\n        this.player.eulers[2] -= dX;\n        this.player.eulers[2] %= 360;\n\n        this.player.eulers[1] = Math.min(\n            89, Math.max(\n                -89,\n                this.player.eulers[1] - dY\n            )\n        );\n    }\n\n    move_player(forwards_amount: number, right_amount: number) {\n        vec3.scaleAndAdd(\n            this.player.position, this.player.position, \n            this.player.forwards, forwards_amount\n        );\n\n        vec3.scaleAndAdd(\n            this.player.position, this.player.position, \n            this.player.right, right_amount\n        );\n    }\n}","import { Renderer } from \"../view/renderer\";\nimport { Scene } from \"../model/scene\";\n// import $ from \"jquery\";\n\nexport class App {\n\n    canvas: HTMLCanvasElement;\n    renderer: Renderer;\n    scene: Scene;\n\n    //Labels for displaying state\n    keyLabel: HTMLElement;\n    mouseXLabel: HTMLElement;\n    mouseYLabel: HTMLElement;\n\n    forwards_amount: number;\n    right_amount: number;\n    \n    constructor(canvas: HTMLCanvasElement) {\n        this.canvas = canvas;\n\n        this.renderer = new Renderer(canvas);\n\n        this.scene = new Scene();\n\n        this.keyLabel = document.getElementById(\"key-label\") as HTMLElement;\n        this.mouseXLabel = document.getElementById(\"mouse-x-label\") as HTMLElement;\n        this.mouseYLabel = document.getElementById(\"mouse-y-label\") as HTMLElement;\n\n        this.forwards_amount = 0;\n        this.right_amount = 0;\n        // $(document).on(\n        //     \"keydown\", \n        //     (event) => {\n        //         this.handle_keypress(event);\n        //     }\n        // );\n        // $(document).on(\n        //     \"keyup\", \n        //     (event) => {\n        //         this.handle_keyrelease(event);\n        //     }\n        // );\n        this.canvas.onclick = () => {\n            this.canvas.requestPointerLock();\n        }\n        this.canvas.addEventListener(\n            \"mousemove\", \n            (event: MouseEvent) => {this.handle_mouse_move(event);}\n        );\n        \n    }\n\n    async InitializeRenderer() {\n        await this.renderer.Initialize();\n    }\n\n    run = () => {\n\n        var running: boolean = true;\n\n        this.scene.update();\n        this.scene.move_player(this.forwards_amount, this.right_amount);\n\n        this.renderer.render(this.scene.get_renderables());\n\n        if (running) {\n            requestAnimationFrame(this.run);\n        }\n    }\n\n    // handle_keypress(event: JQuery.KeyDownEvent) {\n    //     this.keyLabel.innerText = event.code;\n\n    //     if (event.code == \"KeyW\") {\n    //         this.forwards_amount = 0.02;\n    //     }\n    //     if (event.code == \"KeyS\") {\n    //         this.forwards_amount = -0.02;\n    //     }\n    //     if (event.code == \"KeyA\") {\n    //         this.right_amount = -0.02;\n    //     }\n    //     if (event.code == \"KeyD\") {\n    //         this.right_amount = 0.02;\n    //     }\n\n    // }\n\n    // handle_keyrelease(event: JQuery.KeyUpEvent) {\n    //     this.keyLabel.innerText = event.code;\n\n    //     if (event.code == \"KeyW\") {\n    //         this.forwards_amount = 0;\n    //     }\n    //     if (event.code == \"KeyS\") {\n    //         this.forwards_amount = 0;\n    //     }\n    //     if (event.code == \"KeyA\") {\n    //         this.right_amount = 0;\n    //     }\n    //     if (event.code == \"KeyD\") {\n    //         this.right_amount = 0;\n    //     }\n\n    // }\n\n    handle_mouse_move(event: MouseEvent) {\n        // this.mouseXLabel.innerText = event.clientX.toString();\n        // this.mouseYLabel.innerText = event.clientY.toString();\n        \n        // this.scene.spin_player(\n        //     event.movementX / 5, event.movementY / 5\n        // );\n    }\n\n}","// import positionVert from './shaders/position.vert.wgsl?raw';\r\n// import colorFrag from './shaders/color.frag.wgsl';\r\n\r\n// import shader from \"./shaders/shaders.wgsl\";\r\n\r\nimport { TriangleMesh } from \"./triangle_mesh\";\r\nimport { App } from './src/control/app'\r\n// const vertex = new Float32Array([\r\n//     0.0, 0.5, 0.0,\r\n//     -0.5, -0.5, 0.0,\r\n//     0.5, -0.5, 0.0\r\n// ])\r\n// const vertexCount = 3\r\n\r\n// const positionVert = `\r\n// @vertex\r\n// fn main(@location(0) position : vec3<f32>) -> @builtin(position) vec4<f32> {\r\n//     return vec4<f32>(position, 1.0);\r\n// }\r\n// `\r\n// const colorFrag = `\r\n// @group(0) @binding(0) var<uniform> color : vec4<f32>;\r\n\r\n// @fragment\r\n// fn main() -> @location(0) vec4<f32> {\r\n//     return color;\r\n// }\r\n// `\r\n\r\nconst shader =`\r\nstruct Fragment {\r\n    @builtin(position) Position : vec4<f32>,\r\n    @location(0) Color : vec4<f32>\r\n};\r\n\r\n@vertex\r\nfn vs_main(@location(0) vertexPostion: vec2<f32>, @location(1) vertexColor: vec3<f32>) -> Fragment {\r\n\r\n    var output : Fragment;\r\n    output.Position = vec4<f32>(vertexPostion, 0.0, 1.0);\r\n    output.Color = vec4<f32>(vertexColor, 1.0);\r\n\r\n    return output;\r\n}\r\n\r\n@fragment\r\nfn fs_main(@location(0) Color: vec4<f32>) -> @location(0) vec4<f32> {\r\n    return Color;\r\n}\r\n`\r\n\r\nconst initWebGPU = async (canvas: HTMLCanvasElement, formatType: GPUTextureFormat = 'bgra8unorm' ) => {\r\n    const adapter : GPUAdapter = await navigator.gpu?.requestAdapter() as GPUAdapter;\r\n    //device: wrapper around GPU functionality\r\n    //Function calls are made through the device\r\n    const device : GPUDevice = await adapter?.requestDevice() as GPUDevice;\r\n    //context: similar to vulkan instance (or OpenGL context)\r\n    const context : GPUCanvasContext = canvas.getContext('webgpu') as GPUCanvasContext;\r\n    const format : GPUTextureFormat = formatType;\r\n    context.configure({\r\n        device: device,\r\n        format: format,\r\n        alphaMode: \"opaque\"\r\n    });\r\n    return {\r\n        adapter, device, context, format, canvas\r\n    }\r\n};\r\n\r\nexport class Solution {\r\n    divHost: HTMLElement;\r\n    canvas: HTMLCanvasElement;\r\n    ctx: GPUCanvasContext;\r\n    device: GPUDevice;\r\n    format: GPUTextureFormat;\r\n    size: any;\r\n    pipelineObj: any;\r\n    constructor(id: string) {\r\n        this.divHost = document.getElementById(id);\r\n\r\n        // console.log(id, 'webGPU', navigator.gpu);\r\n        this.canvas = document.createElement('canvas');\r\n        this.canvas.width = 500;\r\n        this.canvas.height = 500;\r\n        this.divHost.appendChild(this.canvas);\r\n\r\n        \r\n\r\n        this.initWebGPU();\r\n    }\r\n    async initWebGPU() {\r\n        // // console.log('shader', shader)\r\n        // const webGPU = await initWebGPU(this.canvas);\r\n        // console.log(webGPU)\r\n        // drawing(webGPU);\r\n\r\n        const app = new App(this.canvas);\r\n        app.InitializeRenderer();\r\n        app.run();\r\n    }\r\n    public run() {\r\n        // this.draw(this.device, this.ctx, this.pipelineObj)\r\n    }\r\n    public destroy() {\r\n        this.device.destroy();\r\n        // this.isAnimation = false;\r\n        // this.requestAni = undefined;\r\n        while (this.divHost.lastElementChild) {\r\n            this.divHost.removeChild(this.divHost.lastElementChild);\r\n        }\r\n    }\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\n    \r\nconst drawing = async(webGPU) => {\r\n    const triangleMesh: TriangleMesh = new TriangleMesh(webGPU.device);\r\n\r\n    const bindGroupLayout = webGPU.device.createBindGroupLayout({\r\n        entries: [],\r\n    });\r\n\r\n    const bindGroup = webGPU.device.createBindGroup({\r\n        layout: bindGroupLayout,\r\n        entries: []\r\n    });\r\n    \r\n    const pipelineLayout = webGPU.device.createPipelineLayout({\r\n        bindGroupLayouts: [bindGroupLayout]\r\n    });\r\n\r\n    const pipeline = webGPU.device.createRenderPipeline({\r\n        vertex : {\r\n            module : webGPU.device.createShaderModule({\r\n                code : shader\r\n            }),\r\n            entryPoint : \"vs_main\",\r\n            buffers: [triangleMesh.bufferLayout,]\r\n        },\r\n\r\n        fragment : {\r\n            module : webGPU.device.createShaderModule({\r\n                code : shader\r\n            }),\r\n            entryPoint : \"fs_main\",\r\n            targets : [{\r\n                format : webGPU.format\r\n            }]\r\n        },\r\n\r\n        primitive : {\r\n            topology : \"triangle-list\"\r\n        },\r\n\r\n        layout: pipelineLayout\r\n    });\r\n\r\n    //command encoder: records draw commands for submission\r\n    const commandEncoder : GPUCommandEncoder = webGPU.device.createCommandEncoder();\r\n    //texture view: image view to the color buffer in this case\r\n    const textureView : GPUTextureView = webGPU.context.getCurrentTexture().createView();\r\n    //renderpass: holds draw commands, allocated from command encoder\r\n    const renderpass : GPURenderPassEncoder = commandEncoder.beginRenderPass({\r\n        //@ts-ignore\r\n        colorAttachments: [{\r\n            view: textureView,\r\n            clearValue: {r: 0.0, g: 0.0, b: 0.0, a: 1.0},\r\n            loadOp: \"clear\",\r\n            storeOp: \"store\"\r\n        }]\r\n    });\r\n    renderpass.setPipeline(pipeline);\r\n    renderpass.setVertexBuffer(0, triangleMesh.buffer);\r\n    renderpass.setBindGroup(0, bindGroup)\r\n    renderpass.draw(3, 1, 0, 0);\r\n    renderpass.end();\r\n\r\n    webGPU.device.queue.submit([commandEncoder.finish()]);\r\n}\r\n\r\n","import * as glMatrix from \"./common.js\";\n/**\n * 3 Dimensional Vector\n * @module vec3\n */\n\n/**\n * Creates a new, empty vec3\n *\n * @returns {vec3} a new 3D vector\n */\n\nexport function create() {\n  var out = new glMatrix.ARRAY_TYPE(3);\n\n  if (glMatrix.ARRAY_TYPE != Float32Array) {\n    out[0] = 0;\n    out[1] = 0;\n    out[2] = 0;\n  }\n\n  return out;\n}\n/**\n * Creates a new vec3 initialized with values from an existing vector\n *\n * @param {ReadonlyVec3} a vector to clone\n * @returns {vec3} a new 3D vector\n */\n\nexport function clone(a) {\n  var out = new glMatrix.ARRAY_TYPE(3);\n  out[0] = a[0];\n  out[1] = a[1];\n  out[2] = a[2];\n  return out;\n}\n/**\n * Calculates the length of a vec3\n *\n * @param {ReadonlyVec3} a vector to calculate length of\n * @returns {Number} length of a\n */\n\nexport function length(a) {\n  var x = a[0];\n  var y = a[1];\n  var z = a[2];\n  return Math.hypot(x, y, z);\n}\n/**\n * Creates a new vec3 initialized with the given values\n *\n * @param {Number} x X component\n * @param {Number} y Y component\n * @param {Number} z Z component\n * @returns {vec3} a new 3D vector\n */\n\nexport function fromValues(x, y, z) {\n  var out = new glMatrix.ARRAY_TYPE(3);\n  out[0] = x;\n  out[1] = y;\n  out[2] = z;\n  return out;\n}\n/**\n * Copy the values from one vec3 to another\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a the source vector\n * @returns {vec3} out\n */\n\nexport function copy(out, a) {\n  out[0] = a[0];\n  out[1] = a[1];\n  out[2] = a[2];\n  return out;\n}\n/**\n * Set the components of a vec3 to the given values\n *\n * @param {vec3} out the receiving vector\n * @param {Number} x X component\n * @param {Number} y Y component\n * @param {Number} z Z component\n * @returns {vec3} out\n */\n\nexport function set(out, x, y, z) {\n  out[0] = x;\n  out[1] = y;\n  out[2] = z;\n  return out;\n}\n/**\n * Adds two vec3's\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a the first operand\n * @param {ReadonlyVec3} b the second operand\n * @returns {vec3} out\n */\n\nexport function add(out, a, b) {\n  out[0] = a[0] + b[0];\n  out[1] = a[1] + b[1];\n  out[2] = a[2] + b[2];\n  return out;\n}\n/**\n * Subtracts vector b from vector a\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a the first operand\n * @param {ReadonlyVec3} b the second operand\n * @returns {vec3} out\n */\n\nexport function subtract(out, a, b) {\n  out[0] = a[0] - b[0];\n  out[1] = a[1] - b[1];\n  out[2] = a[2] - b[2];\n  return out;\n}\n/**\n * Multiplies two vec3's\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a the first operand\n * @param {ReadonlyVec3} b the second operand\n * @returns {vec3} out\n */\n\nexport function multiply(out, a, b) {\n  out[0] = a[0] * b[0];\n  out[1] = a[1] * b[1];\n  out[2] = a[2] * b[2];\n  return out;\n}\n/**\n * Divides two vec3's\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a the first operand\n * @param {ReadonlyVec3} b the second operand\n * @returns {vec3} out\n */\n\nexport function divide(out, a, b) {\n  out[0] = a[0] / b[0];\n  out[1] = a[1] / b[1];\n  out[2] = a[2] / b[2];\n  return out;\n}\n/**\n * Math.ceil the components of a vec3\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a vector to ceil\n * @returns {vec3} out\n */\n\nexport function ceil(out, a) {\n  out[0] = Math.ceil(a[0]);\n  out[1] = Math.ceil(a[1]);\n  out[2] = Math.ceil(a[2]);\n  return out;\n}\n/**\n * Math.floor the components of a vec3\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a vector to floor\n * @returns {vec3} out\n */\n\nexport function floor(out, a) {\n  out[0] = Math.floor(a[0]);\n  out[1] = Math.floor(a[1]);\n  out[2] = Math.floor(a[2]);\n  return out;\n}\n/**\n * Returns the minimum of two vec3's\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a the first operand\n * @param {ReadonlyVec3} b the second operand\n * @returns {vec3} out\n */\n\nexport function min(out, a, b) {\n  out[0] = Math.min(a[0], b[0]);\n  out[1] = Math.min(a[1], b[1]);\n  out[2] = Math.min(a[2], b[2]);\n  return out;\n}\n/**\n * Returns the maximum of two vec3's\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a the first operand\n * @param {ReadonlyVec3} b the second operand\n * @returns {vec3} out\n */\n\nexport function max(out, a, b) {\n  out[0] = Math.max(a[0], b[0]);\n  out[1] = Math.max(a[1], b[1]);\n  out[2] = Math.max(a[2], b[2]);\n  return out;\n}\n/**\n * Math.round the components of a vec3\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a vector to round\n * @returns {vec3} out\n */\n\nexport function round(out, a) {\n  out[0] = Math.round(a[0]);\n  out[1] = Math.round(a[1]);\n  out[2] = Math.round(a[2]);\n  return out;\n}\n/**\n * Scales a vec3 by a scalar number\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a the vector to scale\n * @param {Number} b amount to scale the vector by\n * @returns {vec3} out\n */\n\nexport function scale(out, a, b) {\n  out[0] = a[0] * b;\n  out[1] = a[1] * b;\n  out[2] = a[2] * b;\n  return out;\n}\n/**\n * Adds two vec3's after scaling the second operand by a scalar value\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a the first operand\n * @param {ReadonlyVec3} b the second operand\n * @param {Number} scale the amount to scale b by before adding\n * @returns {vec3} out\n */\n\nexport function scaleAndAdd(out, a, b, scale) {\n  out[0] = a[0] + b[0] * scale;\n  out[1] = a[1] + b[1] * scale;\n  out[2] = a[2] + b[2] * scale;\n  return out;\n}\n/**\n * Calculates the euclidian distance between two vec3's\n *\n * @param {ReadonlyVec3} a the first operand\n * @param {ReadonlyVec3} b the second operand\n * @returns {Number} distance between a and b\n */\n\nexport function distance(a, b) {\n  var x = b[0] - a[0];\n  var y = b[1] - a[1];\n  var z = b[2] - a[2];\n  return Math.hypot(x, y, z);\n}\n/**\n * Calculates the squared euclidian distance between two vec3's\n *\n * @param {ReadonlyVec3} a the first operand\n * @param {ReadonlyVec3} b the second operand\n * @returns {Number} squared distance between a and b\n */\n\nexport function squaredDistance(a, b) {\n  var x = b[0] - a[0];\n  var y = b[1] - a[1];\n  var z = b[2] - a[2];\n  return x * x + y * y + z * z;\n}\n/**\n * Calculates the squared length of a vec3\n *\n * @param {ReadonlyVec3} a vector to calculate squared length of\n * @returns {Number} squared length of a\n */\n\nexport function squaredLength(a) {\n  var x = a[0];\n  var y = a[1];\n  var z = a[2];\n  return x * x + y * y + z * z;\n}\n/**\n * Negates the components of a vec3\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a vector to negate\n * @returns {vec3} out\n */\n\nexport function negate(out, a) {\n  out[0] = -a[0];\n  out[1] = -a[1];\n  out[2] = -a[2];\n  return out;\n}\n/**\n * Returns the inverse of the components of a vec3\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a vector to invert\n * @returns {vec3} out\n */\n\nexport function inverse(out, a) {\n  out[0] = 1.0 / a[0];\n  out[1] = 1.0 / a[1];\n  out[2] = 1.0 / a[2];\n  return out;\n}\n/**\n * Normalize a vec3\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a vector to normalize\n * @returns {vec3} out\n */\n\nexport function normalize(out, a) {\n  var x = a[0];\n  var y = a[1];\n  var z = a[2];\n  var len = x * x + y * y + z * z;\n\n  if (len > 0) {\n    //TODO: evaluate use of glm_invsqrt here?\n    len = 1 / Math.sqrt(len);\n  }\n\n  out[0] = a[0] * len;\n  out[1] = a[1] * len;\n  out[2] = a[2] * len;\n  return out;\n}\n/**\n * Calculates the dot product of two vec3's\n *\n * @param {ReadonlyVec3} a the first operand\n * @param {ReadonlyVec3} b the second operand\n * @returns {Number} dot product of a and b\n */\n\nexport function dot(a, b) {\n  return a[0] * b[0] + a[1] * b[1] + a[2] * b[2];\n}\n/**\n * Computes the cross product of two vec3's\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a the first operand\n * @param {ReadonlyVec3} b the second operand\n * @returns {vec3} out\n */\n\nexport function cross(out, a, b) {\n  var ax = a[0],\n      ay = a[1],\n      az = a[2];\n  var bx = b[0],\n      by = b[1],\n      bz = b[2];\n  out[0] = ay * bz - az * by;\n  out[1] = az * bx - ax * bz;\n  out[2] = ax * by - ay * bx;\n  return out;\n}\n/**\n * Performs a linear interpolation between two vec3's\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a the first operand\n * @param {ReadonlyVec3} b the second operand\n * @param {Number} t interpolation amount, in the range [0-1], between the two inputs\n * @returns {vec3} out\n */\n\nexport function lerp(out, a, b, t) {\n  var ax = a[0];\n  var ay = a[1];\n  var az = a[2];\n  out[0] = ax + t * (b[0] - ax);\n  out[1] = ay + t * (b[1] - ay);\n  out[2] = az + t * (b[2] - az);\n  return out;\n}\n/**\n * Performs a hermite interpolation with two control points\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a the first operand\n * @param {ReadonlyVec3} b the second operand\n * @param {ReadonlyVec3} c the third operand\n * @param {ReadonlyVec3} d the fourth operand\n * @param {Number} t interpolation amount, in the range [0-1], between the two inputs\n * @returns {vec3} out\n */\n\nexport function hermite(out, a, b, c, d, t) {\n  var factorTimes2 = t * t;\n  var factor1 = factorTimes2 * (2 * t - 3) + 1;\n  var factor2 = factorTimes2 * (t - 2) + t;\n  var factor3 = factorTimes2 * (t - 1);\n  var factor4 = factorTimes2 * (3 - 2 * t);\n  out[0] = a[0] * factor1 + b[0] * factor2 + c[0] * factor3 + d[0] * factor4;\n  out[1] = a[1] * factor1 + b[1] * factor2 + c[1] * factor3 + d[1] * factor4;\n  out[2] = a[2] * factor1 + b[2] * factor2 + c[2] * factor3 + d[2] * factor4;\n  return out;\n}\n/**\n * Performs a bezier interpolation with two control points\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a the first operand\n * @param {ReadonlyVec3} b the second operand\n * @param {ReadonlyVec3} c the third operand\n * @param {ReadonlyVec3} d the fourth operand\n * @param {Number} t interpolation amount, in the range [0-1], between the two inputs\n * @returns {vec3} out\n */\n\nexport function bezier(out, a, b, c, d, t) {\n  var inverseFactor = 1 - t;\n  var inverseFactorTimesTwo = inverseFactor * inverseFactor;\n  var factorTimes2 = t * t;\n  var factor1 = inverseFactorTimesTwo * inverseFactor;\n  var factor2 = 3 * t * inverseFactorTimesTwo;\n  var factor3 = 3 * factorTimes2 * inverseFactor;\n  var factor4 = factorTimes2 * t;\n  out[0] = a[0] * factor1 + b[0] * factor2 + c[0] * factor3 + d[0] * factor4;\n  out[1] = a[1] * factor1 + b[1] * factor2 + c[1] * factor3 + d[1] * factor4;\n  out[2] = a[2] * factor1 + b[2] * factor2 + c[2] * factor3 + d[2] * factor4;\n  return out;\n}\n/**\n * Generates a random vector with the given scale\n *\n * @param {vec3} out the receiving vector\n * @param {Number} [scale] Length of the resulting vector. If ommitted, a unit vector will be returned\n * @returns {vec3} out\n */\n\nexport function random(out, scale) {\n  scale = scale || 1.0;\n  var r = glMatrix.RANDOM() * 2.0 * Math.PI;\n  var z = glMatrix.RANDOM() * 2.0 - 1.0;\n  var zScale = Math.sqrt(1.0 - z * z) * scale;\n  out[0] = Math.cos(r) * zScale;\n  out[1] = Math.sin(r) * zScale;\n  out[2] = z * scale;\n  return out;\n}\n/**\n * Transforms the vec3 with a mat4.\n * 4th vector component is implicitly '1'\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a the vector to transform\n * @param {ReadonlyMat4} m matrix to transform with\n * @returns {vec3} out\n */\n\nexport function transformMat4(out, a, m) {\n  var x = a[0],\n      y = a[1],\n      z = a[2];\n  var w = m[3] * x + m[7] * y + m[11] * z + m[15];\n  w = w || 1.0;\n  out[0] = (m[0] * x + m[4] * y + m[8] * z + m[12]) / w;\n  out[1] = (m[1] * x + m[5] * y + m[9] * z + m[13]) / w;\n  out[2] = (m[2] * x + m[6] * y + m[10] * z + m[14]) / w;\n  return out;\n}\n/**\n * Transforms the vec3 with a mat3.\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a the vector to transform\n * @param {ReadonlyMat3} m the 3x3 matrix to transform with\n * @returns {vec3} out\n */\n\nexport function transformMat3(out, a, m) {\n  var x = a[0],\n      y = a[1],\n      z = a[2];\n  out[0] = x * m[0] + y * m[3] + z * m[6];\n  out[1] = x * m[1] + y * m[4] + z * m[7];\n  out[2] = x * m[2] + y * m[5] + z * m[8];\n  return out;\n}\n/**\n * Transforms the vec3 with a quat\n * Can also be used for dual quaternions. (Multiply it with the real part)\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a the vector to transform\n * @param {ReadonlyQuat} q quaternion to transform with\n * @returns {vec3} out\n */\n\nexport function transformQuat(out, a, q) {\n  // benchmarks: https://jsperf.com/quaternion-transform-vec3-implementations-fixed\n  var qx = q[0],\n      qy = q[1],\n      qz = q[2],\n      qw = q[3];\n  var x = a[0],\n      y = a[1],\n      z = a[2]; // var qvec = [qx, qy, qz];\n  // var uv = vec3.cross([], qvec, a);\n\n  var uvx = qy * z - qz * y,\n      uvy = qz * x - qx * z,\n      uvz = qx * y - qy * x; // var uuv = vec3.cross([], qvec, uv);\n\n  var uuvx = qy * uvz - qz * uvy,\n      uuvy = qz * uvx - qx * uvz,\n      uuvz = qx * uvy - qy * uvx; // vec3.scale(uv, uv, 2 * w);\n\n  var w2 = qw * 2;\n  uvx *= w2;\n  uvy *= w2;\n  uvz *= w2; // vec3.scale(uuv, uuv, 2);\n\n  uuvx *= 2;\n  uuvy *= 2;\n  uuvz *= 2; // return vec3.add(out, a, vec3.add(out, uv, uuv));\n\n  out[0] = x + uvx + uuvx;\n  out[1] = y + uvy + uuvy;\n  out[2] = z + uvz + uuvz;\n  return out;\n}\n/**\n * Rotate a 3D vector around the x-axis\n * @param {vec3} out The receiving vec3\n * @param {ReadonlyVec3} a The vec3 point to rotate\n * @param {ReadonlyVec3} b The origin of the rotation\n * @param {Number} rad The angle of rotation in radians\n * @returns {vec3} out\n */\n\nexport function rotateX(out, a, b, rad) {\n  var p = [],\n      r = []; //Translate point to the origin\n\n  p[0] = a[0] - b[0];\n  p[1] = a[1] - b[1];\n  p[2] = a[2] - b[2]; //perform rotation\n\n  r[0] = p[0];\n  r[1] = p[1] * Math.cos(rad) - p[2] * Math.sin(rad);\n  r[2] = p[1] * Math.sin(rad) + p[2] * Math.cos(rad); //translate to correct position\n\n  out[0] = r[0] + b[0];\n  out[1] = r[1] + b[1];\n  out[2] = r[2] + b[2];\n  return out;\n}\n/**\n * Rotate a 3D vector around the y-axis\n * @param {vec3} out The receiving vec3\n * @param {ReadonlyVec3} a The vec3 point to rotate\n * @param {ReadonlyVec3} b The origin of the rotation\n * @param {Number} rad The angle of rotation in radians\n * @returns {vec3} out\n */\n\nexport function rotateY(out, a, b, rad) {\n  var p = [],\n      r = []; //Translate point to the origin\n\n  p[0] = a[0] - b[0];\n  p[1] = a[1] - b[1];\n  p[2] = a[2] - b[2]; //perform rotation\n\n  r[0] = p[2] * Math.sin(rad) + p[0] * Math.cos(rad);\n  r[1] = p[1];\n  r[2] = p[2] * Math.cos(rad) - p[0] * Math.sin(rad); //translate to correct position\n\n  out[0] = r[0] + b[0];\n  out[1] = r[1] + b[1];\n  out[2] = r[2] + b[2];\n  return out;\n}\n/**\n * Rotate a 3D vector around the z-axis\n * @param {vec3} out The receiving vec3\n * @param {ReadonlyVec3} a The vec3 point to rotate\n * @param {ReadonlyVec3} b The origin of the rotation\n * @param {Number} rad The angle of rotation in radians\n * @returns {vec3} out\n */\n\nexport function rotateZ(out, a, b, rad) {\n  var p = [],\n      r = []; //Translate point to the origin\n\n  p[0] = a[0] - b[0];\n  p[1] = a[1] - b[1];\n  p[2] = a[2] - b[2]; //perform rotation\n\n  r[0] = p[0] * Math.cos(rad) - p[1] * Math.sin(rad);\n  r[1] = p[0] * Math.sin(rad) + p[1] * Math.cos(rad);\n  r[2] = p[2]; //translate to correct position\n\n  out[0] = r[0] + b[0];\n  out[1] = r[1] + b[1];\n  out[2] = r[2] + b[2];\n  return out;\n}\n/**\n * Get the angle between two 3D vectors\n * @param {ReadonlyVec3} a The first operand\n * @param {ReadonlyVec3} b The second operand\n * @returns {Number} The angle in radians\n */\n\nexport function angle(a, b) {\n  var ax = a[0],\n      ay = a[1],\n      az = a[2],\n      bx = b[0],\n      by = b[1],\n      bz = b[2],\n      mag1 = Math.sqrt(ax * ax + ay * ay + az * az),\n      mag2 = Math.sqrt(bx * bx + by * by + bz * bz),\n      mag = mag1 * mag2,\n      cosine = mag && dot(a, b) / mag;\n  return Math.acos(Math.min(Math.max(cosine, -1), 1));\n}\n/**\n * Set the components of a vec3 to zero\n *\n * @param {vec3} out the receiving vector\n * @returns {vec3} out\n */\n\nexport function zero(out) {\n  out[0] = 0.0;\n  out[1] = 0.0;\n  out[2] = 0.0;\n  return out;\n}\n/**\n * Returns a string representation of a vector\n *\n * @param {ReadonlyVec3} a vector to represent as a string\n * @returns {String} string representation of the vector\n */\n\nexport function str(a) {\n  return \"vec3(\" + a[0] + \", \" + a[1] + \", \" + a[2] + \")\";\n}\n/**\n * Returns whether or not the vectors have exactly the same elements in the same position (when compared with ===)\n *\n * @param {ReadonlyVec3} a The first vector.\n * @param {ReadonlyVec3} b The second vector.\n * @returns {Boolean} True if the vectors are equal, false otherwise.\n */\n\nexport function exactEquals(a, b) {\n  return a[0] === b[0] && a[1] === b[1] && a[2] === b[2];\n}\n/**\n * Returns whether or not the vectors have approximately the same elements in the same position.\n *\n * @param {ReadonlyVec3} a The first vector.\n * @param {ReadonlyVec3} b The second vector.\n * @returns {Boolean} True if the vectors are equal, false otherwise.\n */\n\nexport function equals(a, b) {\n  var a0 = a[0],\n      a1 = a[1],\n      a2 = a[2];\n  var b0 = b[0],\n      b1 = b[1],\n      b2 = b[2];\n  return Math.abs(a0 - b0) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a0), Math.abs(b0)) && Math.abs(a1 - b1) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a1), Math.abs(b1)) && Math.abs(a2 - b2) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a2), Math.abs(b2));\n}\n/**\n * Alias for {@link vec3.subtract}\n * @function\n */\n\nexport var sub = subtract;\n/**\n * Alias for {@link vec3.multiply}\n * @function\n */\n\nexport var mul = multiply;\n/**\n * Alias for {@link vec3.divide}\n * @function\n */\n\nexport var div = divide;\n/**\n * Alias for {@link vec3.distance}\n * @function\n */\n\nexport var dist = distance;\n/**\n * Alias for {@link vec3.squaredDistance}\n * @function\n */\n\nexport var sqrDist = squaredDistance;\n/**\n * Alias for {@link vec3.length}\n * @function\n */\n\nexport var len = length;\n/**\n * Alias for {@link vec3.squaredLength}\n * @function\n */\n\nexport var sqrLen = squaredLength;\n/**\n * Perform some operation over an array of vec3s.\n *\n * @param {Array} a the array of vectors to iterate over\n * @param {Number} stride Number of elements between the start of each vec3. If 0 assumes tightly packed\n * @param {Number} offset Number of elements to skip at the beginning of the array\n * @param {Number} count Number of vec3s to iterate over. If 0 iterates over entire array\n * @param {Function} fn Function to call for each vector in the array\n * @param {Object} [arg] additional argument to pass to fn\n * @returns {Array} a\n * @function\n */\n\nexport var forEach = function () {\n  var vec = create();\n  return function (a, stride, offset, count, fn, arg) {\n    var i, l;\n\n    if (!stride) {\n      stride = 3;\n    }\n\n    if (!offset) {\n      offset = 0;\n    }\n\n    if (count) {\n      l = Math.min(count * stride + offset, a.length);\n    } else {\n      l = a.length;\n    }\n\n    for (i = offset; i < l; i += stride) {\n      vec[0] = a[i];\n      vec[1] = a[i + 1];\n      vec[2] = a[i + 2];\n      fn(vec, vec, arg);\n      a[i] = vec[0];\n      a[i + 1] = vec[1];\n      a[i + 2] = vec[2];\n    }\n\n    return a;\n  };\n}();"],"names":["TriangleMesh","constructor","device","buffer","bufferLayout","vertices","Float32Array","usage","GPUBufferUsage","VERTEX","COPY_DST","descriptor","size","byteLength","mappedAtCreation","this","createBuffer","getMappedRange","set","unmap","arrayStride","attributes","shaderLocation","format","offset","QuadMesh","Material","texture","view","sampler","bindGroup","async","url","bindGroupLayout","console","log","response","fetch","blob","imageData","createImageBitmap","loadImageBitmap","createView","dimension","aspect","baseMipLevel","mipLevelCount","baseArrayLayer","arrayLayerCount","createSampler","addressModeU","addressModeV","magFilter","minFilter","mipmapFilter","maxAnisotropy","createBindGroup","layout","entries","binding","resource","textureDescriptor","width","height","GPUTextureUsage","TEXTURE_BINDING","RENDER_ATTACHMENT","createTexture","queue","copyExternalImageToTexture","source","object_types","shader","Renderer","canvas","adapter","context","uniformBuffer","pipeline","frameGroupLayout","materialGroupLayout","frameBindGroup","depthStencilState","depthStencilBuffer","depthStencilView","depthStencilAttachment","triangleMesh","quadMesh","triangleMaterial","quadMaterial","objectBuffer","dd","parser","DOMParser","path","text","xml","parseFromString","getObjectFromSVGPath","process","setupDevice","makeBindGroupLayouts","createAssets","makeDepthBufferResources","makePipeline","makeBindGroup","navigator","gpu","requestAdapter","requestDevice","getContext","configure","alphaMode","depthWriteEnabled","depthCompare","depthBufferDescriptor","depthOrArrayLayers","depthClearValue","depthLoadOp","depthStoreOp","stencilLoadOp","stencilStoreOp","createBindGroupLayout","visibility","GPUShaderStage","type","hasDynamicOffset","FRAGMENT","pipelineLayout","createPipelineLayout","bindGroupLayouts","createRenderPipeline","vertex","module","createShaderModule","code","entryPoint","buffers","fragment","targets","primitive","topology","depthStencil","UNIFORM","modelBufferDescriptor","STORAGE","initialize","renderables","projection","mat4","Math","PI","view_transform","writeBuffer","model_transforms","length","commandEncoder","createCommandEncoder","textureView","getCurrentTexture","renderpass","beginRenderPass","colorAttachments","clearValue","r","g","b","a","loadOp","storeOp","setPipeline","setBindGroup","objects_drawn","setVertexBuffer","draw","object_counts","TRIANGLE","QUAD","end","submit","finish","Deg2Rad","theta","Triangle","position","eulers","model","vec3","update","get_model","Camera","phi","forwards","right","up","cos","sin","target","get_view","Scene","triangles","quads","player","object_data","triangle_count","quad_count","make_triangles","i","y","push","blank_matrix","j","at","forEach","triangle","quad","get_player","get_renderables","spin_player","dX","dY","min","max","move_player","forwards_amount","right_amount","App","renderer","scene","keyLabel","mouseXLabel","mouseYLabel","run","render","requestAnimationFrame","document","getElementById","onclick","requestPointerLock","addEventListener","event","handle_mouse_move","Initialize","Solution","id","divHost","ctx","pipelineObj","createElement","appendChild","initWebGPU","app","InitializeRenderer","destroy","lastElementChild","removeChild","create","out","glMatrix","fromValues","x","z","add","subtract","scaleAndAdd","scale","negate","normalize","len","sqrt","cross","ax","ay","az","bx","by","bz","transformMat4","m","w","transformMat3","transformQuat","q","qx","qy","qz","qw","uvx","uvy","uvz","uuvx","uuvy","uuvz","w2","rotateX","rad","p","rotateY","rotateZ","angle","mag","cosine","dot","acos","sub","vec"],"sourceRoot":""}