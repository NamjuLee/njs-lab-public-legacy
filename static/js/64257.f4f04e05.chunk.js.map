{"version":3,"file":"static/js/64257.f4f04e05.chunk.js","mappings":"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","sources":["njslab/Tools/A-Star-Graph/Network/Util.ts","njslab/Tools/A-Star-Graph/Network/index.ts","njslab/Tools/A-Star-Graph/index.ts"],"sourcesContent":["import { NNode } from './';\n\nexport const heuristic = (a: NNode, b: NNode) => {\n    let d = 0;\n    // d = distanceManhattan(a.x, a.y, a.z, b.x, b.y, b.z); // find the Manhattan distance (best for grids)\n    d = distanceEuclidean(a.x, a.y, a.z, b.x, b.y, b.z); // euclidean - find the direct distance\n    return d;\n};\n\nexport const distanceManhattan = (x0: number, y0: number, z0: number, x1: number, y1: number, z1: number) => {\n    return Math.abs(x0 - x1) + Math.abs(y0 - y1) + Math.abs(z0 - z1);\n};\n\nexport const distanceEuclidean = (x0: number, y0: number, z0: number, x1: number, y1: number, z1: number) => {\n    return Math.sqrt((x0 - x1) * (x0 - x1) + (y0 - y1) * (y0 - y1) + (z0 - z1) * (z0 - z1));\n};\n\nexport const renderCell = (ctx: CanvasRenderingContext2D, node: NNode, col: string, cellSize: number) => {\n    ctx.fillStyle = col;\n    ctx.beginPath();\n    ctx.rect(node.x * cellSize, node.y * cellSize, cellSize - 1, cellSize - 1);\n    ctx.closePath();\n    ctx.fill();\n};","import { heuristic } from './Util';\nexport class NNetwork {\n    public graph: NGraph;\n\n    public openNodes: NNode[] = [];\n    public closedNodes: NNode[] = [];\n    \n    public startNode: NNode;\n    public endNode: NNode;\n    \n    public path: NNode[] = [];\n    \n    public heuristicConst = 1;\n    \n    public doneComputation: boolean = false;\n    public connectionDiagonal = false;\n    constructor() {\n        this.graph = new NGraph();\n    }\n    public buildConnection = (node: NNode, cols: number, rows: number) => {\n        if (node.blocked) { return; }\n\n        let x = node.x;\n        let y = node.y;\n\n        if (x < cols - 1) {\n            if (!this.graph.grid[x + 1][y].blocked) {\n                node.neighbors.push(this.graph.grid[x + 1][y]);\n            } // right\n        }\n\n        if (y < rows - 1) {\n            if (!this.graph.grid[x][y + 1].blocked) {\n                node.neighbors.push(this.graph.grid[x][y + 1]);\n            } // bottom\n        }\n\n        if (x > 0) {\n            if (!this.graph.grid[x - 1][y].blocked) {\n                node.neighbors.push(this.graph.grid[x - 1][y]);\n            } // left\n        }\n\n        if (y > 0) {\n            if (!this.graph.grid[x][y - 1].blocked) {\n                node.neighbors.push(this.graph.grid[x][y - 1]);\n            } // top\n        }\n        if (this.connectionDiagonal) {\n            console.log(this.connectionDiagonal);\n            if (x > 0 && y > 0) {\n                if (!this.graph.grid[x - 1][y - 1].blocked) {\n                    node.neighbors.push(this.graph.grid[x - 1][y - 1]);\n                }\n            } // left up\n            if (x < cols - 1 && y < rows - 1) {\n                if (!this.graph.grid[x + 1][y + 1].blocked) {\n                    node.neighbors.push(this.graph.grid[x + 1][y + 1]);\n                }\n            } // right bottom\n            if (x > 0 && y < rows - 1) {\n                if (!this.graph.grid[x - 1][y + 1].blocked) {\n                    node.neighbors.push(this.graph.grid[x - 1][y + 1]);\n                }\n            } // left bottom\n            if (x < cols - 1 && y > 0) {\n                if (!this.graph.grid[x + 1][y - 1].blocked) {\n                    node.neighbors.push(this.graph.grid[x + 1][y - 1]);\n                }\n            } // right top\n        }\n    }\n    public gePath() {\n        let result = undefined;\n        let count = this.graph.grid[0].length * this.graph.grid.length\n        while (count--) {\n            result = this.propagation();\n            if (result !== undefined && result.length) {\n                return result;\n            }\n        }\n        return result;\n    }\n    public propagation() {\n        // console.log('-----');\n        if (this.openNodes.length > 0) {\n            //find the lowest f in open nodes\n            let lowestF = 0;\n            for (let i = 0; i < this.openNodes.length; i++) {\n                if (this.openNodes[i].f < this.openNodes[lowestF].f) {\n                    lowestF = i;\n                }\n\n                if (this.openNodes[i].f === this.openNodes[lowestF].f) {\n                    if (this.openNodes[i].g > this.openNodes[lowestF].g) {\n                        lowestF = i;\n                    }\n                }\n            }\n            let current: NNode = this.openNodes[lowestF];\n\n            if (current === this.endNode) {\n                //reached the end node so wait a sec and restart\n                this.doneComputation = true;\n                return this.path;\n            }\n\n            //calculate path\n            this.path = [];\n            let temp = current;\n            while (temp.previous) {\n                this.path.push(temp.previous);\n                temp = temp.previous;\n            }\n            // console.log(this.path.length);\n\n            this.openNodes.splice(this.openNodes.indexOf(current), 1);\n            this.closedNodes.push(current);\n\n            let neighbors = current.neighbors;\n            for (let i = 0; i < neighbors.length; i++) {\n                let neighbor = neighbors[i];\n\n                if (!this.closedNodes.includes(neighbor) && !neighbor.blocked) {\n                    let tempG = current.g + heuristic(neighbor, current) * this.heuristicConst;\n\n                    if (!this.openNodes.includes(neighbor)) {\n                        this.openNodes.push(neighbor);\n                    }\n                    else {\n                        continue;\n                    }\n\n                    neighbor.g = tempG;\n                    neighbor.h = heuristic(neighbor, this.endNode);\n                    neighbor.f = neighbor.g + neighbor.h;\n                    neighbor.previous = current\n                }\n            }\n            return undefined;\n        } else {\n            this.doneComputation = true;\n            return this.path;\n        }\n    }\n}\nexport class NGraph {\n    public grid: NNode[][] = [];\n    constructor() {\n\n    }\n}\nexport class NNode {\n    public f = 0;\n    public h = 0;\n    public g = 0;\n\n    public x = 0;\n    public y = 0;\n    public z = 0;\n    public neighbors: NNode[] = [];\n    public previous = undefined;\n    public blocked = false;\n    constructor(x: number, y: number) {\n        this.f = 0;\n        this.h = 0;\n        this.g = 0;\n        this.x = x;\n        this.y = y;\n        this.neighbors = [];\n        this.blocked = false;\n    }\n}\n","import { PARAM } from 'App';\r\nimport { RendererCanvas } from '../../../lib';\r\n\r\nimport { NNetwork, NNode } from './Network';\r\n\r\nimport { renderCell } from './Network/Util';\r\n\r\nexport class Solution {\r\n    public divHost: HTMLElement;\r\n    public renderer: Renderer;\r\n\r\n    constructor(id: string) {\r\n        this.divHost = document.getElementById(id)\r\n\r\n        // Center align\r\n        this.divHost.style.display = 'flex';\r\n        this.divHost.style.alignItems = 'center';\r\n\r\n        const div = document.createElement('div');\r\n        div.style.marginLeft = 'auto';\r\n        div.style.marginRight = 'auto';\r\n        div.style.backgroundColor = '#555';\r\n        div.style.width = '1000px';\r\n        div.style.height = '600px';\r\n        this.divHost.appendChild(div);\r\n\r\n        // if (PARAM.demo) {\r\n            this.renderer = new Renderer(div);\r\n\r\n            let btn = document.createElement('div');\r\n            div.appendChild(btn);\r\n            btn.textContent = 'Reset';\r\n            btn.onclick = () => {\r\n                this.renderer.Build();\r\n            };\r\n            const cBox = getCheckBox('Connectivity');\r\n            div.appendChild(cBox.div);\r\n            cBox.checkBox.checked = false;\r\n            cBox.checkBox.onchange = () => {\r\n                console.log(cBox.checkBox.checked)\r\n                if (cBox.checkBox.checked === true) {\r\n                    this.renderer.connectionDiagonal = true;\r\n                } else {\r\n                    this.renderer.connectionDiagonal = false;\r\n                }\r\n            }\r\n\r\n            btn = document.createElement('div');\r\n            div.appendChild(btn);\r\n            btn.textContent = 'Play and Stop toggle';\r\n            btn.onclick = () => {\r\n                this.renderer.playToggle = !this.renderer.playToggle;\r\n            };\r\n\r\n            const sl2 = getSlider('Heuristic intensity', 0, 1000);\r\n            div.appendChild(sl2.div);\r\n            sl2.slider.oninput = () => {\r\n                const val = 1 / +sl2.slider.value - 0.001;\r\n                this.renderer.nNetwork.heuristicConst = val;\r\n            };\r\n\r\n\r\n        // }\r\n    }\r\n    public destroy() {\r\n        this.renderer.destroy();\r\n        while (this.divHost.lastElementChild) {\r\n            this.divHost.removeChild(this.divHost.lastElementChild);\r\n        }\r\n    }\r\n}\r\n\r\n\r\n\r\nexport class Renderer extends RendererCanvas {\r\n    w: number = 0;\r\n    h: number = 0;\r\n    cols: number = 0;\r\n    rows: number = 0;\r\n    cellSize: number = 20;\r\n    gridWidth: number = 0;\r\n    gridHeight: number = 0;\r\n    chanceOfWalls: number = 0.35;\r\n    connectionDiagonal = false\r\n\r\n    nNetwork: NNetwork;\r\n\r\n    playToggle = true;\r\n\r\n    frame = 0;\r\n    public divTextIteration: HTMLDivElement;\r\n\r\n    constructor(div: any) {\r\n        super(div);\r\n        this.canvas.style.position = 'relative';\r\n        this.canvas.style.width = '100%';\r\n        this.canvas.style.height = '100%';\r\n\r\n        // TODO\r\n        // You code goes here for one time operation\r\n        this.divTextIteration = document.createElement('div');\r\n        div.appendChild(this.divTextIteration);\r\n\r\n        this.Build();\r\n        this.start();\r\n    }\r\n    public render(ctx: CanvasRenderingContext2D): void {\r\n        if (this.playToggle) {\r\n            const result = this.nNetwork.propagation();\r\n            this.divTextIteration.textContent = `${this.frame++} iterations`;\r\n        }\r\n        // const result = this.graph.gePath();\r\n        if (this.nNetwork.doneComputation) { this.Build(); }\r\n        // console.log(result)\r\n\r\n        for (let i = 0; i < this.cols; i++) {\r\n            for (let j = 0; j < this.rows; j++) {\r\n                const node = this.nNetwork.graph.grid[i][j];\r\n                let color = 'rgb(190, 190, 190)';\r\n\r\n                if (node.blocked) { color = `rgba(0, 0, 0, 0.9)`; }\r\n                if (node === this.nNetwork.endNode) { color = `rgba(255, 0, 255, 0.9)`; }\r\n\r\n                renderCell(ctx, node, color, this.cellSize);\r\n\r\n            }\r\n        }\r\n\r\n        for (let i = 0; i < this.nNetwork.openNodes.length; i++) { // render open nodes\r\n            const node = this.nNetwork.openNodes[i];\r\n            const color = 'rgb(0, 0, 255)';\r\n            renderCell(ctx, node, color, this.cellSize);\r\n        }\r\n\r\n        for (let i = 0; i < this.nNetwork.closedNodes.length; i++) { // visited nodes\r\n            const node = this.nNetwork.closedNodes[i];\r\n            const color = 'rgb(255, 0, 0)';\r\n            renderCell(ctx, node, color, this.cellSize);\r\n        }\r\n\r\n        for (let i = 0; i < this.nNetwork.path.length; i++) { // path\r\n            const node = this.nNetwork.path[i];\r\n            const color = 'rgb(0, 255, 0)';\r\n            renderCell(ctx, node, color, this.cellSize);\r\n        }\r\n\r\n        for (let i = 0; i < this.cols; i++) { // connection\r\n            for (let j = 0; j < this.rows; j++) {\r\n                const node = this.nNetwork.graph.grid[i][j];\r\n                if (node.blocked) { continue; }\r\n                for (let k = 0; k < node.neighbors.length; ++k) {\r\n                    ctx.strokeStyle = '#fff';\r\n                    ctx.lineWidth = 0.58;\r\n                    ctx.beginPath();\r\n                    ctx.moveTo(this.cellSize * node.x + this.cellSize * 0.5, this.cellSize * node.y + this.cellSize * 0.5);\r\n                    ctx.lineTo(this.cellSize * node.neighbors[k].x + this.cellSize * 0.5, this.cellSize * node.neighbors[k].y + this.cellSize * 0.5);\r\n                    ctx.stroke();\r\n                }\r\n\r\n            }\r\n        }\r\n    }\r\n    public Build() {\r\n        this.frame = 0;\r\n        this.w = this.canvas.width;\r\n        this.h = this.canvas.height;\r\n        this.cols = Math.floor(this.w / this.cellSize);\r\n        this.rows = Math.floor(this.h / this.cellSize);\r\n        this.gridWidth = this.w;\r\n        this.gridHeight = this.h;\r\n\r\n\r\n        this.nNetwork = new NNetwork();\r\n        this.nNetwork.connectionDiagonal = this.connectionDiagonal;\r\n\r\n        //Build navigation grid\r\n        for (let i = 0; i < this.cols; i++) {\r\n            for (let j = 0; j < this.rows; j++) {\r\n                if (this.nNetwork.graph.grid[i] === undefined)\r\n                    this.nNetwork.graph.grid[i] = [];\r\n\r\n                const node = new NNode(i, j);\r\n                if (Math.random() < this.chanceOfWalls) { node.blocked = true; }\r\n                this.nNetwork.graph.grid[i][j] = node;\r\n            }\r\n        }\r\n\r\n        this.nNetwork.startNode = this.getRandomCell();\r\n        this.nNetwork.startNode.blocked = false;\r\n\r\n        this.nNetwork.endNode = this.getRandomCell();\r\n        this.nNetwork.endNode.blocked = false;\r\n\r\n        //find neighbors\r\n        for (let i = 0; i < this.cols; i++) {\r\n            for (let j = 0; j < this.rows; j++) {\r\n                this.nNetwork.buildConnection(this.nNetwork.graph.grid[i][j], this.cols, this.rows);\r\n            }\r\n        }\r\n\r\n        this.nNetwork.openNodes.push(this.nNetwork.startNode);\r\n\r\n    }\r\n    getRandomCell() {\r\n        return this.nNetwork.graph.grid[Math.floor(Math.random() * this.cols)][Math.floor(Math.random() * this.rows)];\r\n    }\r\n}\r\n\r\n\r\n// ..................................\r\n\r\nconst getSlider = (title: string, min: number, max: number) => {\r\n    // <input type=\"range\" min=\"1\" max=\"100\" value=\"50\" class=\"slider\" id=\"myRange\">\r\n    const div = document.createElement('div');\r\n    div.style.display = 'flex';\r\n\r\n    const slider = document.createElement('input');\r\n    slider.type = 'range';\r\n    slider.min = `${min}`;\r\n    slider.max = `${max}`;\r\n\r\n    const text = document.createElement('div');\r\n    text.textContent = title;\r\n    text.style.color = '#aaa';\r\n    div.appendChild(slider);\r\n    div.appendChild(text);\r\n\r\n    return {\r\n        div, slider\r\n    }\r\n};\r\nconst getCheckBox = (title: string) => {\r\n    const div = document.createElement('div');\r\n    div.style.display = 'flex';\r\n\r\n    const checkBox = document.createElement('input');\r\n    checkBox.type = 'checkbox';\r\n    checkBox.defaultChecked = false;\r\n    const text = document.createElement('div');\r\n    text.textContent = title;\r\n    text.style.color = '#aaa';\r\n    div.appendChild(checkBox);\r\n    div.appendChild(text);\r\n\r\n    return {\r\n        div, checkBox\r\n    }\r\n};"],"names":["heuristic","a","b","d","distanceEuclidean","x","y","z","x0","y0","z0","x1","y1","z1","Math","sqrt","renderCell","ctx","node","col","cellSize","fillStyle","beginPath","rect","closePath","fill","NNetwork","constructor","graph","openNodes","closedNodes","startNode","endNode","path","heuristicConst","doneComputation","connectionDiagonal","buildConnection","cols","rows","blocked","this","grid","neighbors","push","console","log","NGraph","gePath","result","count","length","propagation","undefined","lowestF","i","f","g","current","temp","previous","splice","indexOf","neighbor","includes","tempG","h","NNode","Solution","id","divHost","renderer","document","getElementById","style","display","alignItems","div","createElement","marginLeft","marginRight","backgroundColor","width","height","appendChild","Renderer","btn","textContent","onclick","Build","cBox","getCheckBox","checkBox","checked","onchange","playToggle","sl2","getSlider","slider","oninput","val","value","nNetwork","destroy","lastElementChild","removeChild","RendererCanvas","super","w","gridWidth","gridHeight","chanceOfWalls","frame","divTextIteration","canvas","position","start","render","j","color","k","strokeStyle","lineWidth","moveTo","lineTo","stroke","floor","random","getRandomCell","title","min","max","type","text","defaultChecked"],"sourceRoot":""}