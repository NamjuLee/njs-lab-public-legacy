{"version":3,"file":"static/js/13012.4aee5448.chunk.js","mappings":"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","sources":["njslab/Project/Project_03_SlowZone/LineStripeInteraction/index.ts"],"sourcesContent":["import * as THREE from 'three';\r\nimport { RendererThree, MercatorProjection, } from '../../../../lib';\r\nimport { getJSONFromURL, getColorByCelsius } from 'njscore';\r\n\r\nimport { FilterGLViewDarkForDarken } from '../01_JSAPI/Tint/FilterGLViewDarkForDarken';\r\n\r\nexport class Solution extends RendererThree {\r\n\r\n    streetOSM: any = [];\r\n    routesTreated: any = [];\r\n    routesControl: any = [];\r\n    zones30: any = [];\r\n\r\n    meshStreet: THREE.LineSegments;\r\n    meshSpike: THREE.LineSegments;\r\n\r\n    raycaster = new THREE.Raycaster();\r\n    pointer = new THREE.Vector2();\r\n    sphere: THREE.Mesh;\r\n\r\n    constructor(id: string = 'main') {\r\n        super(id)\r\n\r\n        const light = new THREE.PointLight(0xffffff, 0.8);\r\n        this.camera.add(light);\r\n        this.scene.add(light);\r\n\r\n        // const canvasGL = document.createElement('canvas');\r\n        // canvasGL.style.position = 'absolute';\r\n        // canvasGL.style.pointerEvents = 'none';\r\n        // canvasGL.style.mixBlendMode = 'darken';\r\n        // canvasGL.width = this.hostDiv.clientWidth;\r\n        // canvasGL.height = this.hostDiv.clientHeight;\r\n        // this.hostDiv.appendChild(canvasGL);\r\n        // const glCtx = canvasGL.getContext('webgl');\r\n        // const d = new FilterGLViewDarkForDarken(glCtx, 0.5, 5)\r\n        // d.Render(glCtx);\r\n\r\n\r\n        this.raycaster = new THREE.Raycaster();\r\n        this.raycaster.params.Line.threshold = 3;\r\n        this.raycaster.far = 1000;\r\n\r\n        const sphereGeometry = new THREE.SphereGeometry(0.2, 32, 32);\r\n        const sphereMaterial = new THREE.MeshBasicMaterial({ color: 0xffffff });\r\n        const sphere = new THREE.Mesh(sphereGeometry, sphereMaterial);\r\n        this.sphere = sphere;\r\n        this.scene.add(sphere);\r\n\r\n        this.camera.position.set(0, 20, 20);\r\n\r\n        // const path = '/static/research/slow-zone/';\r\n        // getJSONFromURL(process.env.PUBLIC_URL + path + 'street_osm.geojson').then((data) => {\r\n        getJSONFromURL('https://raw.githubusercontent.com/NamjuLee/data/master/Paris/street_osm.geojson').then((data) => {\r\n            for (let i = 0; i < data['features'].length; ++i) {\r\n                this.streetOSM.push(data['features'][i]['geometry']['coordinates']);\r\n            }\r\n            this.meshStreet = renderLines(this.scene, this.streetOSM, [0, 1, 1]);\r\n            // renderPoints(this.scene, this.streetOSM, [0, 1, 1]);\r\n\r\n\r\n            getJSONFromURL('https://raw.githubusercontent.com/NamjuLee/data/master/Paris/treated-st.geojson').then((data) => {\r\n                for (let i = 0; i < data['features'].length; ++i) {\r\n                    this.routesTreated.push(data['features'][i]['geometry']['coordinates']);\r\n                }\r\n                // renderLines(this.scene, this.routesTreated, [1, 0, 0]);\r\n                this.meshSpike = renderLinesSpike(this.scene, this.routesTreated, [1, 0, 0]);\r\n            });\r\n\r\n            getJSONFromURL('https://raw.githubusercontent.com/NamjuLee/data/master/Paris/control-st.geojson').then((data) => {\r\n                for (let i = 0; i < data['features'].length; ++i) {\r\n                    this.routesControl.push(data['features'][i]['geometry']['coordinates']);\r\n                }\r\n                renderLines(this.scene, this.routesControl, [0, 1, 0]);\r\n            });\r\n\r\n\r\n\r\n            this.start();\r\n        });\r\n    }\r\n\r\n    public update(scene: THREE.Scene) {\r\n        // console.log('dddd');\r\n        this.raycaster.setFromCamera(this.pointer, this.camera);\r\n        const intersects = this.raycaster.intersectObjects([this.meshStreet, this.meshSpike], true);\r\n\r\n        if (intersects.length > 0) {\r\n            this.sphere.visible = true;\r\n            this.sphere.position.copy(intersects[0].point);\r\n        } else {\r\n\r\n            this.sphere.visible = false;\r\n        }\r\n\r\n\r\n        for (let i = 1; i < this.meshSpike.geometry.attributes.position.count; i += 2) {\r\n            let p = this.meshSpike.geometry.attributes.position;\r\n\r\n            let x = p.getX(i);\r\n            let y = p.getY(i);\r\n            let z = p.getZ(i)\r\n\r\n            y = Math.sin(5 * x * z + this.t * 5) * 9\r\n\r\n            y = y < 0 ? 0 : y;\r\n\r\n            let np = new THREE.Vector3(x, y, z);\r\n            this.meshSpike.geometry.attributes.position.setXYZ(i, np.x, np.y, np.z);\r\n\r\n\r\n            const col = getColorByCelsius(y * 40)\r\n            // console.log(col)\r\n\r\n            // this.meshSpike.geometry.attributes.color.setXYZ(i -1, col[0] /255, col[1] /255, col[2] /255);\r\n            // this.meshSpike.geometry.attributes.color.setXYZ(i,    col[0] /255, col[1] /255, col[2] /255);\r\n\r\n            this.meshSpike.geometry.attributes.color.setXYZ(i - 1, 0, y, 0);\r\n            this.meshSpike.geometry.attributes.color.setXYZ(i, y, 0, 0);\r\n        }\r\n\r\n        this.meshSpike.geometry.attributes.position.needsUpdate = true;\r\n        this.meshSpike.geometry.attributes.color.needsUpdate = true;\r\n        this.meshSpike.geometry.computeVertexNormals();\r\n\r\n\r\n    }\r\n    public mouseMove(e: MouseEvent): void {\r\n        // console.log(e)\r\n        this.pointer.x = ((e.offsetX + 2) / this.hostDiv.clientWidth) * 2 - 1;\r\n        this.pointer.y = - ((e.offsetY - 70) / this.hostDiv.clientHeight) * 2 + 1;\r\n    }\r\n}\r\n\r\n\r\nconst renderPoints = (scene: THREE.Scene, paths: any, color: number[]) => {\r\n    const geometry = new THREE.BufferGeometry();\r\n    const material = new THREE.PointsMaterial({ vertexColors: true, size: 0.5 });\r\n\r\n    const positions = [];\r\n    const colors = [];\r\n\r\n\r\n    const xOFf = -15478803.88731685;\r\n    const yOFf = -4766681.448690384;\r\n    const scale = 0.01;\r\n\r\n\r\n    for (let i = 0; i < paths.length; ++i) {\r\n        const route = paths[i]\r\n\r\n        for (let j = 0; j < route.length; ++j) {\r\n            for (let k = 0; k < route[j].length; ++k) {\r\n\r\n                const [xPro, yPro] = MercatorProjection(route[j][k][0], route[j][k][1]);\r\n\r\n                const x = (xPro + xOFf) * scale\r\n                const y = (yPro + yOFf) * scale\r\n\r\n                positions.push(x, 0, y)\r\n\r\n                colors.push(color[0], color[1], color[2]);\r\n\r\n\r\n            }\r\n        }\r\n    }\r\n\r\n    geometry.setAttribute('position', new THREE.Float32BufferAttribute(positions, 3));\r\n    geometry.setAttribute('color', new THREE.Float32BufferAttribute(colors, 3));\r\n    // generateMorphTargets( geometry );\r\n\r\n    geometry.computeBoundingSphere();\r\n\r\n    const line = new THREE.Points(geometry, material);\r\n    scene.add(line);\r\n\r\n\r\n}\r\nconst renderLinesSpike = (scene: THREE.Scene, paths: any, color: number[]) => {\r\n    const geometry = new THREE.BufferGeometry();\r\n    // const material = new THREE.PointsMaterial( { vertexColors: true, size: 0.1 } );\r\n    const material = new THREE.LineBasicMaterial({ vertexColors: true });\r\n\r\n    const positions = [];\r\n    const colors = [];\r\n    const indices = [];\r\n\r\n    const xOFf = -15478803.88731685;\r\n    const yOFf = -4766681.448690384;\r\n    const scale = 0.01;\r\n\r\n\r\n    let xC = 0\r\n    let yC = 0\r\n    let Count = 0\r\n\r\n    for (let i = 0; i < paths.length; ++i) {\r\n        const route = paths[i]\r\n\r\n        for (let j = 0; j < route.length; ++j) {\r\n            for (let k = 0; k < route[j].length; ++k) {\r\n\r\n                const [xPro, yPro] = MercatorProjection(route[j][k][0], route[j][k][1]);\r\n                xC += xPro;\r\n                yC += yPro;\r\n                Count += 1;\r\n\r\n                const x = (xPro + xOFf) * scale\r\n                const y = (yPro + yOFf) * scale\r\n                // console.log(x, y)\r\n                positions.push(x, 0, y)\r\n                positions.push(x, 10, y)\r\n\r\n                colors.push(color[0], color[1], color[2]);\r\n                colors.push(color[0], color[1], color[2]);\r\n\r\n                // if (k < route[j].length - 1) {\r\n                //     indices.push(Math.floor(positions.length / 3) - 1, Math.floor(positions.length / 3));\r\n                //     indices.push(Math.floor(positions.length / 3) - 1, Math.floor(positions.length / 3));\r\n                // }\r\n            }\r\n        }\r\n    }\r\n    //     console.log(xC / Count, yC / Count)\r\n    // geometry.setIndex(indices);\r\n    geometry.setAttribute('position', new THREE.Float32BufferAttribute(positions, 3));\r\n    geometry.setAttribute('color', new THREE.Float32BufferAttribute(colors, 3));\r\n    // generateMorphTargets( geometry );\r\n\r\n    geometry.computeBoundingSphere();\r\n\r\n    const line = new THREE.LineSegments(geometry, material);\r\n    scene.add(line);\r\n    return line\r\n};\r\n\r\n\r\nconst renderLines = (scene: THREE.Scene, paths: any, color: number[]) => {\r\n\r\n    const geometry = new THREE.BufferGeometry();\r\n    // const material = new THREE.PointsMaterial( { vertexColors: true, size: 0.1 } );\r\n    const material = new THREE.LineBasicMaterial({ vertexColors: true });\r\n\r\n    const positions = [];\r\n    const colors = [];\r\n    const indices = [];\r\n\r\n    const xOFf = -15478803.88731685;\r\n    const yOFf = -4766681.448690384;\r\n    const scale = 0.01;\r\n\r\n\r\n    let xC = 0\r\n    let yC = 0\r\n    let Count = 0\r\n\r\n    for (let i = 0; i < paths.length; ++i) {\r\n        const route = paths[i]\r\n\r\n        for (let j = 0; j < route.length; ++j) {\r\n            for (let k = 0; k < route[j].length; ++k) {\r\n\r\n                const [xPro, yPro] = MercatorProjection(route[j][k][0], route[j][k][1]);\r\n                xC += xPro;\r\n                yC += yPro;\r\n                Count += 1;\r\n\r\n                const x = (xPro + xOFf) * scale\r\n                const y = (yPro + yOFf) * scale\r\n                // console.log(x, y)\r\n                positions.push(x, 0, y)\r\n\r\n                colors.push(color[0], color[1], color[2]);\r\n\r\n                if (k < route[j].length - 1) {\r\n                    indices.push(Math.floor(positions.length / 3) - 1, Math.floor(positions.length / 3));\r\n                }\r\n            }\r\n        }\r\n    }\r\n    //     console.log(xC / Count, yC / Count)\r\n    geometry.setIndex(indices);\r\n    geometry.setAttribute('position', new THREE.Float32BufferAttribute(positions, 3));\r\n    geometry.setAttribute('color', new THREE.Float32BufferAttribute(colors, 3));\r\n    // generateMorphTargets( geometry );\r\n\r\n    geometry.computeBoundingSphere();\r\n\r\n    const line = new THREE.LineSegments(geometry, material);\r\n    scene.add(line);\r\n    return line\r\n};"],"names":["Solution","RendererThree","constructor","super","streetOSM","routesTreated","routesControl","zones30","meshStreet","meshSpike","raycaster","THREE","pointer","sphere","light","this","camera","add","scene","params","Line","threshold","far","sphereGeometry","sphereMaterial","color","position","set","getJSONFromURL","then","data","i","length","push","renderLines","renderLinesSpike","start","update","setFromCamera","intersects","intersectObjects","visible","copy","point","geometry","attributes","count","p","x","getX","y","getY","z","getZ","Math","sin","t","np","setXYZ","getColorByCelsius","needsUpdate","computeVertexNormals","mouseMove","e","offsetX","hostDiv","clientWidth","offsetY","clientHeight","paths","material","vertexColors","positions","colors","xC","yC","Count","route","j","k","xPro","yPro","MercatorProjection","setAttribute","computeBoundingSphere","line","indices","floor","setIndex"],"sourceRoot":""}