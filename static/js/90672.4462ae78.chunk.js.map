{"version":3,"file":"static/js/90672.4462ae78.chunk.js","mappings":"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","sources":["njslab/Env/NNA/NJSEngine/Addon/Clustering/lib/enum.ts","njslab/Env/NNA/NJSEngine/Addon/Clustering/Core/GridSystemScreen.ts","njslab/Env/NNA/NJSEngine/Addon/Clustering/Core/GridSystemDynamic.ts","njslab/Env/NNA/NJSEngine/Addon/Clustering/index.ts","njslab/Env/NNA/NJSEngine/DrawingEngine/ActiveCommand/Commands/CommandBase.ts","njslab/Env/NNA/NJSEngine/DrawingEngine/Geometry/Base/Collision.ts","njslab/Env/NNA/NJSEngine/DrawingEngine/Geometry/Base/GeometryBase.ts","njslab/Env/NNA/NJSCore/Utility/MathUtility.ts","njslab/Env/NNA/NJSEngine/DrawingEngine/Geometry/Point/index.ts","njslab/Env/NNA/NJSEngine/DrawingEngine/ActiveCommand/Commands/CommandShape.ts","njslab/Env/NNA/NJSEngine/DrawingEngine/ActiveCommand/index.ts","njslab/Env/NNA/NJSEngine/DrawingEngine/Projection/index.ts","njslab/Env/NNA/NJSEngine/DrawingEngine/IO/IO.ts","njslab/Env/NNA/NJSEngine/DrawingEngine/Geometry/GeometryCommon.ts","njslab/Env/NNA/NJSEngine/Addon/ClusteringCollisionBasedGraph/Core/PointCluster.ts","njslab/Env/NNA/NJSEngine/Addon/ClusteringCollisionBasedGraph/Core/Renderer.ts","njslab/Env/NNA/NJSEngine/Addon/ClusteringCollisionBasedGraph/Core/GraphClustering.ts","njslab/Env/NNA/NJSEngine/Addon/ClusteringCollisionBasedGraph/index.ts","njslab/Env/NNA/NJSEngine/DrawingEngine/Addon/index.ts","njslab/Env/NNA/NJSEngine/DrawingEngine/Renderer/index.ts","njslab/Env/NNA/NJSEngine/DrawingEngine/Scene/index.ts","njslab/Env/NNA/NJSEngine/DrawingEngine/index.ts","njslab/Env/NNA/NJSEngine/NNAEngineV3/index.ts","njslab/Tools/Clustering/ClusteringCollisionBasedGraph/lib/index.ts"],"sourcesContent":["\r\nexport enum OPTIMIZER {\r\n    NONE = 'NONE',\r\n    GRID = 'GRID',\r\n    GRID_SCREEN = 'GRID_SCREEN',\r\n    COLLISION = 'COLLISION',\r\n    AGENT = 'AGENT',\r\n}","import { NVector3 } from '../lib';\r\n// import { GTYPE } from '../../../../../../../lib/Enumeration';\r\n// import { AGeometryBase } from '../../../../Common/Base/AGeometryBase';\r\n// import { GridBased } from '../';\r\n\r\nexport class GridSystemScreen {\r\n\r\n    public xInterval: number = 0;\r\n    public yInterval: number = 0;\r\n    public rx: number = 9;\r\n    public ry: number = 7;\r\n    public cells: Cell[][] = [];\r\n\r\n    public points: NVector3[] = [];\r\n\r\n    constructor() {\r\n\r\n    }\r\n    public update(width: number, height: number): void {\r\n        // console.log(this.optimizer.optimizer.optimizer.renderer.annotationInstance.activeCommandController.acProperties.isZooming);\r\n        // if (this.optimizer.optimizer.optimizer.renderer.annotationInstance.activeCommandController.acProperties.isZooming) {\r\n        this.initGrid(width, height);\r\n        // }\r\n    }\r\n    private initGrid(width: number, height: number) {\r\n        this.cells = [];\r\n        this.xInterval = width / (this.rx - 1);\r\n        this.yInterval = height / (this.ry - 1);\r\n\r\n        for(let y = 0; y < this.ry; y++){\r\n            const cellList: Cell[] = [];\r\n            for(let x = 0; x < this.rx; x++) {\r\n                cellList.push(new Cell(this, x, y));\r\n            }\r\n            this.cells.push(cellList);\r\n        }\r\n\r\n        for(let i = 0 ; i < this.points.length; ++i){\r\n            const p = this.points[i];\r\n            this.getCellAtPoint(p).push(p);\r\n        }\r\n        for(let y = 0; y < this.ry; ++y){\r\n            for(let x = 0; x < this.rx; ++x) {\r\n                if(this.cells[y][x].points.length < 2) {\r\n                    this.cells[y][x].isRenderable = false;\r\n                }\r\n            }\r\n        }\r\n    }\r\n    public getCellAtPoint(dp: NVector3) {\r\n        let i: number = (Math.round(dp.x / this.xInterval));\r\n        let j: number = (Math.round(dp.y / this.yInterval));\r\n        if (i >= this.rx) { i = this.rx - 1; }\r\n        if (j >= this.ry) { j = this.ry - 1; }\r\n        if (i < 0) { i = 0; }\r\n        if (j < 0) { j = 0; }\r\n        return this.cells[j][i];\r\n    }\r\n    public render(ctx: CanvasRenderingContext2D){\r\n        for(let y = 0; y < this.cells.length; y++){\r\n            for(let x = 0; x < this.cells[y].length; x++) {\r\n                // if(this.cells[y][x]){\r\n                this.cells[y][x].draw(ctx);\r\n                // }\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\nclass Cell {\r\n    grid: GridSystemScreen;\r\n    r0: number = 32 * 0.5;\r\n    r1: number = 48 * 0.5;\r\n    vec: NVector3;\r\n    vecRender: NVector3;\r\n    xI: number;\r\n    yI: number;\r\n    isHover: boolean = false;\r\n    points: NVector3[] = []\r\n    _isRenderable: boolean = true;\r\n    constructor(grid: GridSystemScreen, xI: number, yI: number) {\r\n    this.grid = grid;\r\n    this.xI = xI;\r\n    this.yI = yI;\r\n    this.vec = new NVector3(xI * this.grid.xInterval, yI * this.grid.yInterval);\r\n    // this.geometries = [];\r\n    }\r\n    public push(geo: NVector3){\r\n        geo.isRenderable = false;\r\n        this.points.push(geo);\r\n        this.vecRender = new NVector3(0, 0, 0);\r\n        for(let i = 0; i < this.points.length; ++i) {\r\n            this.vecRender.x += this.points[i].x;\r\n            this.vecRender.y += this.points[i].y;\r\n        }\r\n        this.vecRender.x /= this.points.length;\r\n        this.vecRender.y /= this.points.length;\r\n    }\r\n    public get isRenderable() {\r\n        return this._isRenderable;\r\n    }\r\n    public set isRenderable(v: boolean) {\r\n        if(!v) {\r\n            for(let i = 0; i < this.points.length; ++i) {\r\n                this.points[i].isRenderable = true;\r\n            }\r\n            this.points = [];\r\n        }\r\n        this._isRenderable = v;\r\n    }\r\n    // public IsInside(m: NVector3) {\r\n    // if(Distance(this.vec, m ) < this.r1 + 2) {\r\n    // this.isHover = true;\r\n    // return true;\r\n    // } else {\r\n    // this.isHover = false;\r\n    // return false;\r\n    // }\r\n    // }\r\n    public draw(ctx: CanvasRenderingContext2D, isPanning: boolean = false) {\r\n\r\n        ctx.beginPath();\r\n        ctx.rect(this.vec.x - this.grid.xInterval * 0.5, this.vec.y - this.grid.yInterval * 0.5, this.grid.xInterval, this.grid.yInterval);\r\n        ctx.closePath();\r\n        ctx.stroke();\r\n\r\n    //     console.log(isPanning)\r\n        if (!this.isRenderable) { return; }\r\n        if (isPanning) {\r\n            this.vecRender = new NVector3(0, 0, 0);\r\n            for(let i = 0; i < this.points.length; ++i) {\r\n                this.vecRender.x += this.points[i].x;\r\n                this.vecRender.y += this.points[i].y;\r\n            }\r\n            this.vecRender.x /= this.points.length;\r\n            this.vecRender.y /= this.points.length;\r\n            // this.vec.y -= this.r * 0.5 // offset the ghost center along y\r\n        }\r\n        // ctx.beginPath();\r\n        // ctx.rect(this.vec.x - this.grid.xInterval * 0.5, this.vec.y - this.grid.yInterval * 0.5, this.grid.xInterval, this.grid.yInterval);\r\n        // ctx.closePath();\r\n        const r = 5 + this.points.length * 0.1;\r\n        ctx.fillStyle = `rgba(${r * 10}, 0, 0, 1)`;\r\n        // ctx.stroke = `rgba(${r * 10}, 0, 0, 1)`;\r\n        // ctx.fill();\r\n        // console.log(this.geometries.length);\r\n        ctx.beginPath();\r\n        ctx.arc(this.vecRender.x, this.vecRender.y, r, 0, Math.PI * 2);\r\n        ctx.closePath();\r\n        // ctx.stroke();\r\n        ctx.fill();\r\n\r\n        // this.grid.optimizer.optimizer.optimizer.renderer.draw.shape.cluster.DrawingPresetClustering(ctx, this.geometries, this.vecRender, this.r0, this.r1, this.isHover);\r\n    }\r\n}","import { NVector3 } from '../lib';\r\n// import { GTYPE } from '../../../../../../../lib/Enumeration';\r\n// import { AGeometryBase } from '../../../../Common/Base/AGeometryBase';\r\n// import { GridBased } from '../';\r\n\r\nexport class GridSystemDynamic {\r\n\r\n    public xInterval: number = 0;\r\n    public yInterval: number = 0;\r\n    public width = 0;\r\n    public height = 0;\r\n    public rx: number = 9;\r\n    public ry: number = 7;\r\n    public cells: Cell[][] = [];\r\n\r\n    public points: NVector3[] = [];\r\n\r\n    public minP: NVector3 = new NVector3(Number.MAX_SAFE_INTEGER, Number.MAX_SAFE_INTEGER, Number.MAX_SAFE_INTEGER);\r\n    public maxP: NVector3 = new NVector3(Number.MIN_SAFE_INTEGER, Number.MIN_SAFE_INTEGER, Number.MIN_SAFE_INTEGER);\r\n\r\n    constructor() {\r\n        /* */\r\n    }\r\n    public update(width: number, height: number): void {\r\n        // console.log(this.optimizer.optimizer.optimizer.renderer.annotationInstance.activeCommandController.acProperties.isZooming);\r\n        // if (this.optimizer.optimizer.optimizer.renderer.annotationInstance.activeCommandController.acProperties.isZooming) {\r\n        this.initGrid(width, height);\r\n        // }\r\n    }\r\n    private initGrid(width: number, height: number) {\r\n        // console.log(width);\r\n        this.minP = new NVector3(Number.MAX_SAFE_INTEGER, Number.MAX_SAFE_INTEGER, Number.MAX_SAFE_INTEGER);\r\n        this.maxP = new NVector3(Number.MIN_SAFE_INTEGER, Number.MIN_SAFE_INTEGER, Number.MIN_SAFE_INTEGER);\r\n\r\n        for(let i = 0 ; i < this.points.length; ++i){\r\n            const v = this.points[i];\r\n            if (this.minP.x > v.x) { this.minP.x = v.x; }\r\n            if (this.minP.y > v.y) { this.minP.y = v.y; }\r\n            if (this.minP.z > v.z) { this.minP.z = v.z; }\r\n\r\n            if (this.maxP.x < v.x) { this.maxP.x = v.x; }\r\n            if (this.maxP.y < v.y) { this.maxP.y = v.y; }\r\n            if (this.maxP.z < v.z) { this.maxP.z = v.z; }\r\n        }\r\n    //     console.log(this);\r\n\r\n        this.cells = [];\r\n        this.width = (this.maxP.x - this.minP.x);\r\n        this.height = (this.maxP.y - this.minP.y);\r\n\r\n    //     console.log('width', this.width, 'height', this.height)\r\n\r\n        this.xInterval = this.width / (this.rx - 1);\r\n        this.yInterval = this.height / (this.ry - 1);\r\n        \r\n    //     console.log('this.xInterval', this.xInterval, 'this.yInterval', this.yInterval)\r\n\r\n        for(let y = 0; y < this.ry; y++){\r\n            const cellList: Cell[] = [];\r\n            for(let x = 0; x < this.rx; x++) {\r\n                cellList.push(new Cell(this, x, y));\r\n            }\r\n            this.cells.push(cellList);\r\n        }\r\n\r\n        for(let i = 0 ; i < this.points.length; ++i){\r\n            const p = this.points[i];\r\n            this.getCellAtPoint(p).push(p);\r\n        }\r\n        for(let y = 0; y < this.ry; ++y){\r\n            for(let x = 0; x < this.rx; ++x) {\r\n                if(this.cells[y][x].points.length < 1) {\r\n                    this.cells[y][x].isRenderable = false;\r\n                }\r\n            }\r\n        }\r\n    }\r\n    public getCellAtPoint(dp: NVector3) {\r\n        // let dp: NVector3 = vec.Sub(this);\r\n        let i: number = (Math.round((dp.x - this.minP.x ) / this.xInterval));\r\n        let j: number = (Math.round((dp.y - this.minP.y  ) / this.yInterval));\r\n        if (i >= this.rx) { i = this.rx - 1; }\r\n        if (j >= this.ry) { j = this.ry - 1; }\r\n        if (i < 0) { i = 0; }\r\n        if (j < 0) { j = 0; }\r\n        return this.cells[j][i];\r\n    }\r\n    public render(ctx: CanvasRenderingContext2D){\r\n\r\n        for(let y = 0; y < this.cells.length; y++){\r\n            for(let x = 0; x < this.cells[y].length; x++) {\r\n                // if(this.cells[y][x]){\r\n                this.cells[y][x].draw(ctx);\r\n                // }\r\n            }\r\n        }\r\n\r\n        ctx.beginPath();\r\n        ctx.rect(this.minP.x, this.minP.y, this.maxP.x - this.minP.x, this.maxP.y - this.minP.y);\r\n        ctx.stroke();\r\n    }\r\n}\r\n\r\nclass Cell {\r\n\r\n    grid: GridSystemDynamic;\r\n    r0: number = 32 * 0.5;\r\n    r1: number = 48 * 0.5;\r\n    vec: NVector3;\r\n    vecRender: NVector3;\r\n    xI: number;\r\n    yI: number;\r\n    isHover: boolean = false;\r\n    points: NVector3[] = []\r\n    _isRenderable: boolean = true;\r\n\r\n    constructor(grid: GridSystemDynamic, xI: number, yI: number) {\r\n    this.grid = grid;\r\n    this.xI = xI;\r\n    this.yI = yI;\r\n    this.vec = new NVector3(grid.minP.x + (xI * this.grid.xInterval), grid.minP.y + (yI * this.grid.yInterval));\r\n//     console.log('x', this.vec.x, 'y', this.vec.y, )\r\n    // this.geometries = [];\r\n    }\r\n    public push(geo: NVector3){\r\n        geo.isRenderable = false;\r\n        this.points.push(geo);\r\n        this.vecRender = new NVector3(0, 0, 0);\r\n        for(let i = 0; i < this.points.length; ++i) {\r\n            this.vecRender.x += this.points[i].x;\r\n            this.vecRender.y += this.points[i].y;\r\n        }\r\n        this.vecRender.x /= this.points.length;\r\n        this.vecRender.y /= this.points.length;\r\n    }\r\n    public get isRenderable() {\r\n        return this._isRenderable;\r\n    }\r\n    public set isRenderable(v: boolean) {\r\n        if(!v) {\r\n            for(let i = 0; i < this.points.length; ++i) {\r\n                this.points[i].isRenderable = true;\r\n            }\r\n            this.points = [];\r\n        }\r\n        this._isRenderable = v;\r\n    }\r\n    // public IsInside(m: NVector3) {\r\n    // if(Distance(this.vec, m ) < this.r1 + 2) {\r\n    // this.isHover = true;\r\n    // return true;\r\n    // } else {\r\n    // this.isHover = false;\r\n    // return false;\r\n    // }\r\n    // }\r\n    public draw(ctx: CanvasRenderingContext2D, isPanning: boolean = false) {\r\n        if (!this.isRenderable) { \r\n            ctx.beginPath();\r\n            ctx.rect(this.vec.x - this.grid.xInterval * 0.5, this.vec.y - this.grid.yInterval * 0.5, this.grid.xInterval, this.grid.yInterval);\r\n            ctx.closePath();\r\n            ctx.stroke();    \r\n            return; \r\n        }\r\n\r\n\r\n\r\n        // console.log(isPanning)\r\n        if (isPanning) {\r\n            this.vecRender = new NVector3(0, 0, 0);\r\n            for(let i = 0; i < this.points.length; ++i) {\r\n                this.vecRender.x += this.points[i].x;\r\n                this.vecRender.y += this.points[i].y;\r\n            }\r\n            this.vecRender.x /= this.points.length;\r\n            this.vecRender.y /= this.points.length;\r\n            // this.vec.y -= this.r * 0.5 // offset the ghost center along y\r\n        }\r\n        // ctx.beginPath();\r\n        // ctx.rect(this.vec.x - this.grid.xInterval * 0.5, this.vec.y - this.grid.yInterval * 0.5, this.grid.xInterval, this.grid.yInterval);\r\n        // ctx.closePath();\r\n        const r = 5 + this.points.length * 0.1;\r\n        ctx.fillStyle = `rgba(${r * 10}, 0, 0, 1)`;\r\n        // ctx.stroke = `rgba(${r * 10}, 0, 0, 1)`;\r\n        // ctx.fill();\r\n        // console.log(this.geometries.length);\r\n        ctx.beginPath();\r\n        ctx.arc(this.vecRender.x, this.vecRender.y, r, 0, Math.PI * 2);\r\n        ctx.closePath();\r\n        // ctx.stroke();\r\n        ctx.fill();\r\n\r\n\r\n        // ctx.fillStyle = '#ffffff';\r\n        // ctx.beginPath();\r\n        // ctx.arc(this.vec.x, this.vec.y, 20, 0, Math.PI * 2);\r\n        // ctx.closePath();\r\n        // // ctx.stroke();\r\n        // ctx.fill();\r\n\r\n        ctx.beginPath();\r\n        ctx.rect(this.vec.x - this.grid.xInterval * 0.5, this.vec.y - this.grid.yInterval * 0.5, this.grid.xInterval, this.grid.yInterval);\r\n        ctx.closePath();\r\n        ctx.stroke();\r\n\r\n        // this.grid.optimizer.optimizer.optimizer.renderer.draw.shape.cluster.DrawingPresetClustering(ctx, this.geometries, this.vecRender, this.r0, this.r1, this.isHover);\r\n    }\r\n}","import { NVector3 } from './lib';\r\nimport { OPTIMIZER } from './lib/enum';\r\nimport { GridSystemScreen } from './Core/GridSystemScreen';\r\nimport { GridSystemDynamic } from './Core/GridSystemDynamic';\r\n\r\nexport { OPTIMIZER }\r\nexport class Clustering {\r\n    optimizerType: OPTIMIZER;\r\n\r\n    optimizer: GridSystemDynamic | GridSystemScreen;\r\n\r\n    mv: NVector3 = new NVector3(0, 0);\r\n\r\n    inspection: boolean = true;\r\n\r\n    constructor(optimizer: OPTIMIZER) {\r\n        this.optimizerType = optimizer;\r\n        \r\n        switch (optimizer) {\r\n            case OPTIMIZER.GRID_SCREEN:\r\n                this.optimizer = new GridSystemScreen();\r\n                break;\r\n            case OPTIMIZER.GRID:\r\n                this.optimizer = new GridSystemDynamic();\r\n                break;\r\n            default:\r\n                break;\r\n        }\r\n\r\n        console.debug('clustering... v 0.1.5')\r\n    }\r\n    public push(vs: NVector3[], width: number, height: number) {\r\n        this.optimizer.points = vs;\r\n        this.update(width, height);\r\n    }\r\n    public mouseInteraction(x: number, y: number){\r\n        this.mv = this.optimizer.getCellAtPoint(new NVector3(x, y)).vec;\r\n    }\r\n    public update(width: number, height: number) {\r\n        this.optimizer.update(width, height);\r\n\r\n    }\r\n    public render(ctx: CanvasRenderingContext2D, isStationary: boolean, width: number, height: number) {\r\n        if (isStationary) {\r\n            this.update(width, height);\r\n        }\r\n        this.optimizer.render(ctx)\r\n\r\n        if(this.mv){\r\n            ctx.fillStyle = '#00ff00';\r\n            ctx.beginPath();\r\n            ctx.arc(this.mv.x, this.mv.y,9, 0.0, 3.14 * 2)\r\n            ctx.closePath();\r\n            ctx.fill();\r\n        }\r\n        \r\n\r\n    }\r\n\r\n}","import { MOUSE_TYPE, COMMAND, MouseEventData } from '../../lib'\r\nimport { ActiveCommandController } from '../';\r\nexport class CommandBase {\r\n    activeCommandController: ActiveCommandController;\r\n    type: COMMAND = COMMAND.SELECT;\r\n\r\n    constructor(activeCommandController: ActiveCommandController) {\r\n\r\n        this.activeCommandController = activeCommandController;\r\n\r\n    }\r\n    public mouseEvent(e: MouseEventData) {\r\n        // console.log(e.type)\r\n        switch (e.type) {\r\n            case MOUSE_TYPE.LEFT:\r\n                this.MouseLeftClickPre(e); return;\r\n            case MOUSE_TYPE.MIDDLE:\r\n                this.MouseMiddleClickPre(e); return;\r\n            case MOUSE_TYPE.RIGHT:\r\n                this.MouseRightClickPre(e); return;\r\n            case MOUSE_TYPE.DOUBLE:\r\n                this.MouseDoubleClickPre(e); return;\r\n            case MOUSE_TYPE.MOVE:\r\n                this.MouseMovePre(e); return;\r\n            case MOUSE_TYPE.DRAG:\r\n                this.MouseDragPre(e); return;\r\n            case MOUSE_TYPE.DOWN:\r\n                this.MouseDownPre(e); return;\r\n            case MOUSE_TYPE.UP:\r\n                this.MouseUpPre(e); return;\r\n            case MOUSE_TYPE.WHEEL:\r\n                this.MouseWheelPre(e); return;\r\n            default:\r\n                break;\r\n        }\r\n    }\r\n     // .......................................................\r\n     public MouseDown(e: MouseEventData) {/* */ }\r\n     public MouseDownPre(e: MouseEventData) {\r\n        //  this.scene.MouseDown(e.x, e.y);\r\n\r\n        this.activeCommandController.drawingEngine.scene.capture = this.activeCommandController.drawingEngine.geometryCommon.find(e.x, e.y);\r\n        // console.log(this.activeCommandController.drawingEngine.scene.capture);\r\n\r\n        this.MouseDown(e);\r\n     }\r\n     public MouseLeftClick(e: MouseEventData) {/* */ }\r\n     public MouseLeftClickPre(e: MouseEventData) {\r\n\r\n        this.activeCommandController.drawingEngine.scene.capture = this.activeCommandController.drawingEngine.geometryCommon.find(e.x, e.y);\r\n\r\n        if(this.activeCommandController.drawingEngine.scene.capture){\r\n            this.activeCommandController.drawingEngine.scene.capture.isSelected = !this.activeCommandController.drawingEngine.scene.capture.isSelected;\r\n        } else {\r\n            this.activeCommandController.drawingEngine.geometryCommon.resetSelections();\r\n            // this.activeCommandController.drawingEngine.scene.resetSelections();\r\n        }\r\n\r\n        // console.log(this.activeCommandController.drawingEngine.scene.capture)\r\n        //  this.scene.MouseLeftClick(e.x, e.y);\r\n         this.MouseLeftClick(e);\r\n     }\r\n     public MouseMiddleClick(e: MouseEventData) {/* */ }\r\n     public MouseMiddleClickPre(e: MouseEventData) {\r\n        //  this.scene.MouseMiddleClick(e.x, e.y);\r\n         this.MouseMiddleClick(e);\r\n     }\r\n     public MouseRightClick(e: MouseEventData) { /* */ }\r\n     public MouseRightClickPre(e: MouseEventData) {\r\n        //  this.scene.MouseRightClick(e.x, e.y);\r\n         this.MouseRightClick(e);\r\n     }\r\n     public MouseUp(e: MouseEventData) { /* */ }\r\n     public MouseUpPre(e: MouseEventData) {\r\n        //  this.scene.MouseUp(e.x, e.y);\r\n\r\n        this.activeCommandController.drawingEngine.scene.capture = undefined;\r\n        // console.log('this.activeCommandController.drawingEngine.scene.capture', this.activeCommandController.drawingEngine.scene.capture)\r\n        this.MouseUp(e);\r\n \r\n     }\r\n     public MouseDoubleClick(e: MouseEventData) {/* */ }\r\n     public MouseDoubleClickPre(e: MouseEventData) {\r\n        //  this.scene.MouseDoubleClick(e.x, e.y);\r\n         this.MouseDoubleClick(e);\r\n     }\r\n     public MouseMove(e: MouseEventData) {/* */ }\r\n     public MouseMovePre(e: MouseEventData) {\r\n\r\n        this.activeCommandController.drawingEngine.geometryCommon.updateHover(e.x, e.y);\r\n        //  this.scene.MouseMove(e.x, e.y);\r\n         this.MouseMove(e);\r\n     }\r\n     public MouseDrag(e: MouseEventData) {/* */ }\r\n     public MouseDragPre(e: MouseEventData) {\r\n        //  this.scene.MouseDrag(e.x, e.y);\r\n        if (this.activeCommandController.drawingEngine.scene.capture) {\r\n            const mv = this.activeCommandController.drawingEngine.projection.toMap(e.x, e.y); \r\n            this.activeCommandController.drawingEngine.scene.capture.translate(e.x, e.y, mv[0], mv[1]);\r\n        }\r\n         this.MouseDrag(e);\r\n     }\r\n     public MouseWheel(e: MouseEventData) {/* */ }\r\n     public MouseWheelPre(e: MouseEventData) {\r\n        //  this.scene.MouseWheel(e.x, e.y, e.wheel);\r\n         // console.log(\"drag\");\r\n         this.MouseWheel(e);\r\n     }\r\n}","import { NVector3 } from '../../lib';\r\nimport { GeometryBase } from './GeometryBase';\r\nexport class Collision {\r\n    geometryBase: GeometryBase;\r\n\r\n    isCollided: boolean = false;\r\n\r\n    neighborShapes: GeometryBase[] = [];\r\n\r\n    minVec: NVector3;\r\n    maxVec: NVector3;\r\n\r\n    isVisited: boolean = false;\r\n    numOrder: number = -1;\r\n\r\n    constructor(geometryBase: GeometryBase) {\r\n        this.geometryBase = geometryBase;\r\n        const r = 5;\r\n        this.minVec = new NVector3(this.geometryBase.v.x - r, this.geometryBase.v.y - r, 0);\r\n        this.maxVec = new NVector3(this.geometryBase.v.x + r, this.geometryBase.v.y + r, 0);\r\n    }\r\n    public Reset(){\r\n        this.neighborShapes = [];\r\n        this.numOrder = -1;\r\n        this.geometryBase.numVisit = 0;\r\n        this.geometryBase.isCollapse = false;\r\n        this.isCollided = false;\r\n        this.isVisited = false;\r\n    }\r\n}","import { ACTIVE_UI, getUUID } from '../../lib';\r\nimport { Scene } from '../../Scene';\r\nimport { Collision } from './Collision';\r\nimport { NVector3 } from '../../lib';\r\n\r\nexport class GeometryBase {\r\n    scene: Scene;\r\n    public v: NVector3;\r\n    public type: ACTIVE_UI;\r\n    public id: string = '';\r\n    numVisit: number = 0;\r\n\r\n    public isCollapse: boolean = false;\r\n\r\n    public isHidden: boolean = false;\r\n    public isRenderable: boolean = true;\r\n\r\n    public isSelected: boolean = false;\r\n    public isHover: boolean = false;\r\n    public collision: Collision;\r\n\r\n    constructor(scene: Scene, x: number, y: number) {\r\n        this.scene = scene;\r\n        this.v = new NVector3(x, y, 0);\r\n        this.id = getUUID();\r\n        \r\n        this.collision = new Collision(this);\r\n    }\r\n    public toJson() {\r\n        return { };\r\n    }\r\n    public translate(x: number, y: number, long: number, lat: number) {\r\n\r\n    }\r\n    public isInside(x: number, y: number): boolean {\r\n        return false;\r\n    }\r\n    public update(isPanning: boolean, toScreen: (x: number, y: number) => number[]) {\r\n        /* */\r\n    }\r\n    public render(ctx: CanvasRenderingContext2D, isPanning: boolean) {\r\n        /* */\r\n    }\r\n    public renderPost(ctx: CanvasRenderingContext2D, isPanning: boolean) {\r\n        /* */\r\n    }\r\n}","export const remap = (CValue: number, OldMin: number, OldMax: number, NewMin: number, NewMax: number): number => {\r\n  return (((CValue - OldMin) * (NewMax - NewMin)) / (OldMax - OldMin)) + NewMin;\r\n}\r\nexport const shuffle = (array: any) => {\r\n    var currentIndex = array.length, temporaryValue, randomIndex;\r\n    while (0 !== currentIndex) {\r\n      randomIndex = Math.floor(Math.random() * currentIndex);\r\n      currentIndex -= 1;\r\n      temporaryValue = array[currentIndex];\r\n      array[currentIndex] = array[randomIndex];\r\n      array[randomIndex] = temporaryValue;\r\n    }\r\n    return array;\r\n}\r\nexport const fahrenheit2celsius = (f: number ) => {\r\n  return (f-32) * 5.0/9.0\r\n}\r\nexport const celsius2fahrenheit = (c: number) => {\r\n  return 9.0/5.0 * c + 32\r\n}\r\nexport const kelvin2celsius = (k: number) => {\r\n  return (k-273.15)\r\n}\r\nexport const MilesFromMeters = (m: number) => {\r\n  return m * 0.00062137;\r\n}\r\nexport const MilesFromKM = (m: number) => {\r\n  return m * 0.62137119;\r\n}\r\n// ........................................................... geometry\r\nexport const toRadians = (degrees: number): number => {\r\n  return (degrees * (3.14159265358979 / 180.0)); // myDegree *=  3.141592 / 180 // degrees to radians\r\n}\r\n\r\nexport const toDegrees = (radians: number): number => {\r\n  return (radians * (180.0 / 3.14159265358979));  // myRadian *= 180 / 3.141592 //  radian to degrees\r\n}\r\n// ........................................................... random\r\nexport const getRandom = ()  => {\r\n  return Math.random();\r\n}\r\nexport const getRandomArbitrary = (min: number, max: number)  => {\r\n  return Math.random() * (max - min) + min;\r\n}\r\nexport const getRandomInt = (min: number, max: number)  => {\r\n  return Math.floor(Math.random() * (max - min)) + min;\r\n}\r\nexport const getRandomIntFromRenage = (range: number)  => {\r\n  return Math.floor(Math.random() * range);\r\n}\r\nexport const getRandomIntsInclusive = (min: number, max: number, total: number)  => {\r\n  let out = [];\r\n  for (let i = 0; i < total; ++i) {\r\n      out.push(getRandomIntInclusive(min, max));\r\n  }\r\n  return out;\r\n}\r\nexport const getRandomIntInclusive = (min: number, max: number)  => {\r\n  return Math.floor(Math.random() * (max - min + 1)) + min;\r\n}\r\nexport const getRandomItemWithStringList = (array: string[])  => {\r\n  return array[Math.floor(Math.random() * array.length)];\r\n}\r\nexport const random = (seed: number) => {\r\n  var mask = 0xffffffff;\r\n  var m_w  = (123456789 + seed) & mask;\r\n  var m_z  = (987654321 - seed) & mask;\r\n\r\n  return function() {\r\n    m_z = (36969 * (m_z & 65535) + (m_z >>> 16)) & mask;\r\n    m_w = (18000 * (m_w & 65535) + (m_w >>> 16)) & mask;\r\n\r\n    var result = ((m_z << 16) + (m_w & 65535)) >>> 0;\r\n    result /= 4294967296;\r\n    return result;\r\n  }\r\n}\r\nexport const isIntersect = (p1x: number, p1y: number, q1x: number, q1y: number, p2x: number, p2y: number, q2x: number, q2y: number): boolean => {\r\n  // Find the four orientations needed for general and\r\n  // special cases\r\n  const o1 = orientation(p1x, p1y, q1x, q1y, p2x, p2y);\r\n  const o2 = orientation(p1x, p1x, q1x, q1y, q2x, q2y);\r\n  const o3 = orientation(p2x, p2y, q2x, q2y, p1x, p1y);\r\n  const o4 = orientation(p2x, p2y, q2x, q2y, q1x, q1y);\r\n\r\n  // General case\r\n  if (o1 !== o2 && o3 !== o4) { return true; }\r\n\r\n  // Special Cases\r\n  // p1, q1 and p2 are colinear and p2 lies on segment p1q1\r\n  if (o1 === 0 && onSegment(p1x, p1y, p2x, p2y, q1x, q1y)) { return true; }\r\n\r\n  // p1, q1 and q2 are colinear and q2 lies on segment p1q1\r\n  if (o2 === 0 && onSegment(p1x, p1y, q2x, q2y, q1x, q1y)) { return true; }\r\n\r\n  // p2, q2 and p1 are colinear and p1 lies on segment p2q2\r\n  if (o3 === 0 && onSegment(p2x, p2y, p1x, p1y, q2x, q2y)) { return true; }\r\n\r\n  // p2, q2 and q1 are colinear and q1 lies on segment p2q2\r\n  if (o4 === 0 && onSegment(p2x, p2y, q1x, q1y, q2x, q2y)) { return true; }\r\n\r\n  return false; // Doesn't fall in any of the above cases\r\n}\r\nexport const remapLongToSurface = (CValue: number, min: number, max: number) => { return (((CValue - (-180)) * (max - min)) / (180 - (-180)) + min); }\r\nexport const remapLatToSurface = (CValue: number, min: number, max: number)  => { return (((CValue - (-90)) * (max - min)) / (90 - (-90)) + min); }\r\nexport const remapLongToSurfaceNormal = (CValue: number)  => { return ((CValue - (-180)) * (1.0 - 0)) / (180 - (-180)); } // 0 to 1\r\nexport const remapLatToSurfaceNormal = (CValue: number)  => { return ((CValue - (-90)) * (1.0 - 0)) / (90 - (-90)); } // 0 to 1\r\nexport const remapLong = (CValue: number) => { return (CValue + 180) * Math.PI * 2 / 360 * -1; } // -1 for reversing direction\r\nexport const remapLat = (CValue: number) => { return (CValue + 90) * Math.PI / 180; }\r\nexport const onSegment = (px: number, py: number, qx: number, qy: number, rx: number, ry: number): boolean => {\r\n  if (qx <= Math.max(px, rx) && qx >= Math.min(px, rx) && qy <= Math.max(py, ry) && qy >= Math.min(py, ry)) { return true; }\r\n  return false;\r\n}\r\nexport const orientation = (px: number, py: number, qx: number, qy: number, rx: number, ry: number): number => {\r\n  // See https://www.geeksforgeeks.org/orientation-3-ordered-points/\r\n  // for details of below formula.\r\n  const val = (qy - py) * (rx - qx) - (qx - px) * (ry - qy);\r\n\r\n  if (val === 0) { return 0; } // colinear\r\n\r\n  return (val > 0) ? 1 : 2; // clock or counterclock wise\r\n}\r\n\r\nexport const lineLineIntersection = (Ax: number, Ay: number, Bx: number, By: number, Cx: number, Cy: number, Dx: number, Dy: number): number[] | undefined => { \r\n    // Line AB represented as a1x + b1y = c1  \r\n    const a1:number = By - Ay; \r\n    const b1 = Ax - Bx; \r\n    const c1 = a1 * (Ax) + b1 * (Ay); \r\n\r\n    // Line CD represented as a2x + b2y = c2  \r\n    const a2 = Dy - Cy; \r\n    const b2 = Cx - Dx; \r\n    const c2 = a2 * (Cx) + b2 * (Cy); \r\n\r\n    const determinant = a1 * b2 - a2 * b1; \r\n\r\n    if (determinant === 0) \r\n    { \r\n        // The lines are parallel. This is simplified  \r\n        // by returning a pair of FLT_MAX  \r\n        return undefined; // new Point(double.MaxValue, double.MaxValue); \r\n    } \r\n    else\r\n    { \r\n        const x = (b2 * c1 - b1 * c2) / determinant; \r\n        const y = (a1 * c2 - a2 * c1) / determinant; \r\n        return [x, y];\r\n    } \r\n}\r\nexport const distance2d = (v0x: number, v0y: number, v1x: number, v1y: number): number => {\r\n  return Math.sqrt((v0x - v1x) * (v0x - v1x) + (v0y - v1y) * (v0y - v1y));\r\n  // return NWebassemblyController.ctrller.Distance(v0.x, v0.y, v0.z, v1.x, v1.y, v1.z);\r\n}\r\nexport const getUUID = () => {   // reference : https://jsfiddle.net/briguy37/2MVFd/\r\n  let d = new Date().getTime();\r\n  let uuid = 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, function (c: string) {\r\n      // eslint-disable-next-line\r\n      let r = (d + Math.random() * 16) % 16 | 0;\r\n      d = Math.floor(d / 16);\r\n      // eslint-disable-next-line\r\n      return (c === 'x' ? r : (r & 0x3 | 0x8)).toString(16);\r\n  });\r\n  return uuid;\r\n}","import { GeometryBase } from '../Base/GeometryBase';\r\nimport { ACTIVE_UI, NVector3, distanceToXY } from '../../lib';\r\n\r\nimport { Scene } from '../../Scene';\r\n\r\nimport { Collision } from '../Base/Collision';\r\n\r\nexport interface IPoint {\r\n    x: number,\r\n    y: number,\r\n    z: number,\r\n}\r\n\r\nexport class CPoint extends GeometryBase {\r\n    \r\n    r: number = 5;\r\n    id: string;\r\n    t: number = 0.0;\r\n    color = '#00ff00';\r\n    colorHover = '#0ffff0';\r\n\r\n    collision: Collision;\r\n\r\n    constructor(scene: Scene, param: IPoint) {\r\n        super(scene, param.x, param.y);\r\n        this.type = ACTIVE_UI.point;\r\n        this.v = new NVector3(param.x, param.y, param.z);\r\n    }\r\n    public translate(x: number, y: number, long: number, lat: number) {\r\n        this.v.x = x;\r\n        this.v.y = y;\r\n        this.v.long = long;\r\n        this.v.lat = lat;\r\n    }\r\n    public isInside(x: number, y: number): boolean {\r\n        if (distanceToXY(this.v.x, this.v.y, x, y) < this.r + 3) {\r\n            this.isHover = true;\r\n            return true;\r\n        }\r\n        this.isHover = false;\r\n        return false;\r\n    }\r\n    public update(isPanning: boolean, toScreen: ( x: number, y: number) => number[] ) {\r\n        if (isPanning && this.scene.drawingEngine.projection.isCustom) {\r\n            const sv = toScreen(this.v.long, this.v.lat);\r\n            this.v.x = sv[0];\r\n            this.v.y = sv[1];\r\n        }\r\n    }\r\n    public toJson() {\r\n        return { x: this.v.x, y: this.v.y }\r\n    }\r\n    public renderPost(ctx: CanvasRenderingContext2D, isPanning: boolean) {\r\n\r\n        let r = this.r + (Math.sin(this.t))\r\n        if(this.isHover) {\r\n            r += 3;\r\n            ctx.fillStyle = this.colorHover;\r\n        } else {\r\n            ctx.fillStyle = this.color;\r\n        }\r\n\r\n        ctx.beginPath();\r\n        ctx.arc(this.v.x, this.v.y, r  , 0.0, Math.PI * 2.0 );\r\n        ctx.closePath();\r\n        ctx.fill();\r\n        if(this.isSelected) {\r\n            ctx.lineWidth =3;\r\n            ctx.strokeStyle = '#ffffff';\r\n            ctx.stroke();\r\n        }\r\n        \r\n        this.t += 0.06;\r\n    }\r\n\r\n}","import { COMMAND, MouseEventData } from '../../lib'\r\nimport { CommandBase } from './CommandBase';\r\nimport { ActiveCommandController } from '../';\r\nimport { CPoint } from '../../Geometry/Point';\r\nexport class CommandSelect extends CommandBase {\r\n    constructor(activeCommandController: ActiveCommandController) {\r\n        super(activeCommandController);\r\n        this.type = COMMAND.SELECT;\r\n\r\n    }\r\n    public MouseLeftClick(e: MouseEventData) {\r\n    //     console.log('sel' , e)\r\n    }\r\n}\r\nexport class CommandPoint extends CommandBase {\r\n    constructor(activeCommandController: ActiveCommandController) {\r\n        super(activeCommandController);\r\n        this.type = COMMAND.POINT;\r\n\r\n    }\r\n    public MouseLeftClick(e: MouseEventData) {\r\n        const p = new CPoint(this.activeCommandController.drawingEngine.scene, {x: e.x, y: e.y, z : 0})\r\n        const mv = this.activeCommandController.drawingEngine.projection.toMap(e.x, e.y);\r\n        p.v.long = mv[0];\r\n        p.v.lat = mv[1];\r\n\r\n        this.activeCommandController.drawingEngine.scene.addGeometry(p);\r\n        // console.log(this.activeCommandController.hasShift)\r\n        if(this.activeCommandController.hasShift) { return }\r\n        this.activeCommandController.drawingEngine.setCommand();\r\n    }\r\n}\r\nexport class CommandLine extends CommandBase {\r\n    constructor(activeCommandController: ActiveCommandController) {\r\n        super(activeCommandController);\r\n        this.type = COMMAND.LINE;\r\n\r\n    }\r\n    public MouseLeftClick(e: MouseEventData) {\r\n    //     console.log('line' , e)\r\n    }\r\n}","// import { MouseEventData } from '../../../../Core/EventInteraction';\r\nimport { DrawingEngine } from '../';\r\nimport { CommandBase } from './Commands/CommandBase';\r\nimport { CommandSelect, CommandPoint, CommandLine } from './Commands/CommandShape';\r\n\r\nimport { COMMAND } from '../lib'\r\n\r\nimport { fetchJson } from '../../../NJSCore/IO';\r\nimport { CPoint } from '../Geometry/Point';\r\n\r\nexport class ActiveCommandController {\r\n    drawingEngine: DrawingEngine;\r\n\r\n    \r\n    activeCommand: CommandBase;\r\n    public commands = {};\r\n\r\n    hasShift: boolean = false;\r\n    inspection: boolean = false;\r\n    constructor(drawingEngine: DrawingEngine) {\r\n        this.drawingEngine = drawingEngine;\r\n\r\n        this.commands = {\r\n            SELECT : new CommandSelect(this),\r\n            POINT : new CommandPoint(this),\r\n            LINE : new CommandLine(this),\r\n        }\r\n\r\n        // this.commands.Line = new CommandBase(this);\r\n        // this.commands.Point = new CommandBase(this);\r\n        // this.commands.Line = new CommandBase(this);\r\n\r\n        this.activeCommand = this.commands[COMMAND.SELECT];\r\n    }\r\n    public setCommander(commander: string) {\r\n        switch (commander) {\r\n            case 'save':\r\n            //     console.log('save!!');\r\n                break;\r\n            case 'load':\r\n            //     console.log('load!!');\r\n                break;\r\n            default:\r\n                break;\r\n        }\r\n\r\n        // console.log(commander);\r\n        switch (commander as COMMAND) {\r\n            case COMMAND.SELECT:\r\n                // console.log(commander);\r\n                this.activeCommand = this.commands[commander];\r\n                // console.log(this.activeCommand);\r\n                break;\r\n            case COMMAND.POINT:\r\n                // console.log(commander);\r\n                this.activeCommand = this.commands[commander];\r\n                // console.log(this.activeCommand);\r\n                break;\r\n            case COMMAND.LINE:\r\n                // console.log(commander);\r\n                this.activeCommand = this.commands[commander];\r\n                // console.log(this.activeCommand);\r\n                break;\r\n            // case 'point':\r\n            //     this.activeCommand = this.commands[commander];\r\n            //     break;\r\n            default:\r\n                break;\r\n        }\r\n    }\r\n    public apiCall(command: string): any {\r\n\r\n\r\n        switch (command ) {\r\n            case 'getSelectedCPoint':\r\n                return this.drawingEngine.geometryCommon.getSelCPoint();\r\n            case 'importZipData':\r\n                return this.popZipData();\r\n            case 'importClustering':\r\n                return this.drawingEngine.addon.InitClustering();\r\n            case 'importClusteringCollision':\r\n                return this.drawingEngine.addon.InitClusteringCollision();\r\n\r\n            case 'save':\r\n                return this.drawingEngine.geometryCommon.toJson();\r\n\r\n            default:\r\n                break;\r\n        }\r\n\r\n    }\r\n\r\n    public async popZipData (){\r\n                \r\n        const json = await fetchJson('https://raw.githubusercontent.com/NamjuLee/data/master/US/zip.json');\r\n    //     console.log(json);\r\n        let count = 0;\r\n        for(let i of json['pos']) {\r\n            // console.log(i);\r\n\r\n            const p = this.greatePointByGeoPos(i[0], i[1]);\r\n            p.t += Math.random() * 10;\r\n            if(count++ > 2000) { return; }\r\n        }\r\n    \r\n\r\n    }\r\n    public greatePointByGeoPos(long: number, lat: number) {\r\n        const spos = this.drawingEngine.projection.toScreen(long, lat);\r\n        const p = new CPoint(this.drawingEngine.scene, {x: spos[0], y: spos[1], z: 0 });\r\n        p.v.long = long;\r\n        p.v.lat = lat;\r\n        this.drawingEngine.scene.addGeometry(p);\r\n        return p;\r\n    }\r\n}","import { DrawingEngine } from '../';\r\nexport class Projection{\r\n    drawingEngine: DrawingEngine;\r\n    public isCustom: boolean = false;\r\n    constructor(drawingEngine: DrawingEngine){\r\n        this.drawingEngine = drawingEngine;\r\n\r\n    }\r\n    public updateProjection(projection: { toMap: (x: number, y: number) => number[] , toScreen: (x: number, y: number) => number[]} ){\r\n        this.toMap = projection.toMap;\r\n        this.toScreen = projection.toScreen;\r\n        this.isCustom = true;\r\n    }\r\n    public toScreen(x: number, y: number){\r\n        return [x, y];\r\n    }\r\n    public toMap(x: number, y: number){\r\n        return [x, y];\r\n    }\r\n}","import { DrawingEngine } from '../';\r\n// import firebase from 'firebase';\r\n\r\nexport class IO {\r\n    public drawingEngine: DrawingEngine;\r\n\r\n\r\n    firebaseConfig = {\r\n        apiKey: \"AIzaSyA1yKg85WGZoshbk8xR23cXr3SwpqXVgIc\",\r\n        authDomain: \"njs-data.firebaseapp.com\",\r\n        projectId: \"njs-data\",\r\n        storageBucket: \"njs-data.appspot.com\",\r\n        messagingSenderId: \"635991152770\",\r\n        appId: \"1:635991152770:web:722f5356e0d14cea50fc9b\"\r\n      };\r\n\r\n    // ref: firebase.database.Reference;\r\n\r\n    constructor(drawingEngine: DrawingEngine) {\r\n        this.drawingEngine = drawingEngine;\r\n\r\n        // let fbdatabase = firebase.initializeApp(this.firebaseConfig);\r\n        // console.log('fbdb', fbdatabase);\r\n    \r\n        // // let db = fbdatabase.database();\r\n        // // this.ref = db.ref('drawingEngine');\r\n        // // console.log(this.ref);\r\n    \r\n        // // let data = {\r\n        // //     name:'mlData',\r\n        // //     score: '120'\r\n        // // }\r\n        // // this.sendData(data);\r\n\r\n        // // this.ref.on('value', this.getData, this.getError);\r\n    }\r\n    public sendData(data: {}) {\r\n        // let result = this.ref.push(data);\r\n        // console.log(result.key);\r\n    }\r\n\r\n    public getData = (d: any) => {\r\n        let data = d.val();\r\n    //     console.log('get data', data);\r\n        \r\n        for(let i in data) {\r\n        //     console.log(i, data[i]);\r\n        }\r\n    }\r\n    public getError = (d: any) => {\r\n        console.error(d);\r\n    }\r\n}","import { DrawingEngine } from '../';\r\nimport { GeometryBase } from './Base/GeometryBase';\r\nexport class GeometryCommon{\r\n    drawingEngine: DrawingEngine;\r\n    constructor(drawingEngine: DrawingEngine){\r\n        this.drawingEngine = drawingEngine;\r\n\r\n    }\r\n    public find(x: number, y: number): GeometryBase | undefined {\r\n        for (let key in this.drawingEngine.scene.geoDict) {\r\n            if (this.drawingEngine.scene.geoDict[key].isInside(x, y)) {\r\n                return this.drawingEngine.scene.geoDict[key];\r\n            }\r\n        }\r\n        return undefined\r\n    }\r\n    public resetSelections(){\r\n        for (let i = 0 ; i < this.drawingEngine.scene.geometryList.length; ++i) {\r\n            this.drawingEngine.scene.geometryList[i].isSelected = false;\r\n        }\r\n    }\r\n    public getAllVecFromCPoint(){\r\n        const vs = [];\r\n        for (let i = 0 ; i < this.drawingEngine.scene.pointList.length; ++i) {\r\n            vs.push(this.drawingEngine.scene.pointList[i].v);\r\n        }\r\n        return vs;\r\n    }\r\n    public getAllFromCPoint(){\r\n        const vs = [];\r\n        for (let i = 0 ; i < this.drawingEngine.scene.pointList.length; ++i) {\r\n            vs.push(this.drawingEngine.scene.pointList[i]);\r\n        }\r\n        return vs;\r\n    }\r\n    public getSelCPoint(){\r\n        const vs = [];\r\n        for (let i = 0 ; i < this.drawingEngine.scene.pointList.length; ++i) {\r\n            if (this.drawingEngine.scene.pointList[i].isSelected) {\r\n                vs.push(this.drawingEngine.scene.pointList[i]);\r\n            }\r\n        }\r\n        return vs;\r\n    }\r\n    public updateHover(x: number, y: number) {\r\n        for (let i = 0 ; i < this.drawingEngine.scene.geometryList.length; ++i) {\r\n            this.drawingEngine.scene.geometryList[i].isInside(x, y)\r\n        }\r\n    }\r\n    public toJson() {\r\n        const data = [];\r\n        for(let i = 0 ; i < this.drawingEngine.scene.geometryList.length; ++i) {\r\n            data.push(this.drawingEngine.scene.geometryList[i].toJson());\r\n        }\r\n        return data;\r\n    }\r\n}","import { CPoint } from '../../../DrawingEngine/Geometry/Point';\r\nimport { distance, NVector3 } from '../../Clustering/lib';\r\nimport { Renderer } from './Renderer';\r\n\r\nexport class PointCluster {\r\n    public renderer: Renderer;\r\n    public points: CPoint[];\r\n    public r0: number = 32 * 0.5;\r\n    public r1: number = 48 * 0.5;\r\n    public isHover: boolean = false;\r\n    public isVisited: boolean = false;\r\n    public boundingBoxMin: NVector3 = new NVector3(Number.MAX_SAFE_INTEGER, Number.MAX_SAFE_INTEGER, Number.MAX_SAFE_INTEGER);\r\n    public boundingBoxMax: NVector3 = new NVector3(Number.MIN_SAFE_INTEGER, Number.MIN_SAFE_INTEGER, Number.MIN_SAFE_INTEGER);\r\n    public minVec: NVector3;\r\n    public maxVec: NVector3;\r\n    public vec = new NVector3(0, 0, 0);\r\n    private t: number = 1.0;\r\n    private GridResolution = 85;\r\n    private tempVecGridList: NVector3[] = [];\r\n    private tempGeoGridList: CPoint[][][] = [];\r\n\r\n    constructor(renderer: Renderer, geometries: CPoint[]) {\r\n        this.renderer = renderer;\r\n        this.points = geometries;\r\n        for(let i = 0; i < this.points.length; ++i) {\r\n            this.vec.x += this.points[i].v.x;\r\n            this.vec.y += this.points[i].v.y;\r\n            this.UpdateBoundingBox(this.points[i].v);\r\n        }\r\n        this.vec.x /= this.points.length;\r\n        this.vec.y /= this.points.length;\r\n        this.minVec = new NVector3(this.vec.x - this.r1, this.vec.y - this.r1, 0);\r\n        this.maxVec = new NVector3(this.vec.x + this.r1, this.vec.y + this.r1, 0);\r\n        // for(let i = 0; i < this.geometries.length; ++i) {\r\n        // this.geometries[i].isAniEasing = true;\r\n        // this.geometries[i].tVec = this.vec;\r\n        // }\r\n    }\r\n    public IsInside(m: NVector3) {\r\n        if(distance(this.vec, m ) < this.r1) {\r\n            this.isHover = true;\r\n            // this.points[0].scene.annotationInstance.activeCommandController.activeMouseCursor.SetActiveCursorHovering();\r\n            // this.points[0].scene.annotationInstance.renderer.needFocus = true;\r\n            // this.points[0].scene.annotationInstance.activeCommandController.acProperties.hasHovering = true;\r\n            return true;\r\n        } else {\r\n            this.isHover = false;\r\n            return false;\r\n        }\r\n    }\r\n    public AddPost(geo: CPoint) {\r\n        // @ts-ignore\r\n        if(this.points.includes(geo)) { return; }\r\n        this.points.push(geo);\r\n        this.vec = new NVector3(0, 0, 0);\r\n        for(let i = 0; i < this.points.length; ++i) {\r\n        this.vec.x += this.points[i].v.x;\r\n        this.vec.y += this.points[i].v.y;\r\n        this.UpdateBoundingBox(this.points[i].v);\r\n        }\r\n        this.vec.x /= this.points.length;\r\n        this.vec.y /= this.points.length;\r\n        this.minVec = new NVector3(this.vec.x - this.r1, this.vec.y - this.r1, 0);\r\n        this.maxVec = new NVector3(this.vec.x + this.r1, this.vec.y + this.r1, 0);\r\n    }\r\n    public NeedDecompose() {\r\n        if (this.boundingBoxMax.x - this.boundingBoxMin.x > this.GridResolution) { return true; }\r\n        if (this.boundingBoxMax.y - this.boundingBoxMin.y > this.GridResolution) { return true; }\r\n        return false;\r\n    }\r\n    public Split() {\r\n        this.DeepRemove();\r\n        const xNum = (this.boundingBoxMax.x - this.boundingBoxMin.x) / this.GridResolution < 1 ? 1: (this.boundingBoxMax.x - this.boundingBoxMin.x) / this.GridResolution;\r\n        const yNum = (this.boundingBoxMax.y - this.boundingBoxMin.y) / this.GridResolution < 1 ? 1: (this.boundingBoxMax.y - this.boundingBoxMin.y) / this.GridResolution;\r\n        const grid = this.buildGrid(xNum, yNum);\r\n        this.BuildSubCluster(grid, xNum, yNum);\r\n    }\r\n    public Merge(other: PointCluster){\r\n        this.points.concat(other.points);\r\n        this.vec = new NVector3(0, 0, 0);\r\n        for(let i = 0; i < this.points.length; ++i) {\r\n            this.vec.x += this.points[i].v.x;\r\n            this.vec.y += this.points[i].v.y;\r\n            this.UpdateBoundingBox(this.points[i].v);\r\n        }\r\n        this.vec.x /= this.points.length;\r\n        this.vec.y /= this.points.length;\r\n        this.minVec = new NVector3(this.vec.x - this.r1, this.vec.y - this.r1, 0);\r\n        this.maxVec = new NVector3(this.vec.x + this.r1, this.vec.y + this.r1, 0);\r\n        other.DeepRemove();\r\n    }\r\n    public DeepRemove(){\r\n        this.renderer.RemoveCluster(this);\r\n    }\r\n    public buildGrid(xNum: number, yNum: number) {\r\n        this.tempGeoGridList = []\r\n        let gridList = [];;\r\n        for(let y = 0; y < yNum; ++y) {\r\n            const theY = this.boundingBoxMin.y + y * this.GridResolution;\r\n            const geoMat: CPoint[][] = [];\r\n            for(let x = 0; x < xNum; ++x) {\r\n                const theX = this.boundingBoxMin.x + x * this.GridResolution;\r\n                gridList.push(new NVector3(theX, theY));\r\n                const geoList: CPoint[]= [];\r\n                geoMat.push(geoList);\r\n            }\r\n            this.tempGeoGridList.push(geoMat);\r\n        }\r\n        this.tempVecGridList = gridList;\r\n        return gridList;\r\n    }\r\n    public BuildSubCluster(vs: NVector3[], xNum: number, yNum: number){\r\n        for(let i = 0 ; i < this.points.length; ++i) {\r\n            this.GetCellAtPoint(this.points[i].v, xNum, yNum).push(this.points[i]);\r\n        }\r\n        for(let y = 0; y < this.tempGeoGridList.length; ++y) {\r\n            for(let x = 0; x < this.tempGeoGridList[y].length; ++x) {\r\n            if(this.tempGeoGridList[y][x]) {\r\n                if (this.tempGeoGridList[y][x].length === 1) {\r\n                    this.tempGeoGridList[y][x][0].collision.Reset();\r\n                } else if(this.tempGeoGridList[y][x].length > 1) {\r\n                    this.renderer.clustersRPoint.push(new PointCluster(this.renderer, this.tempGeoGridList[y][x]));\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n    private GetCellAtPoint(tv: NVector3, xNum: number, yNum: number) {\r\n        let dp: NVector3 = new NVector3(tv.x - this.boundingBoxMin.x, tv.y - this.boundingBoxMin.y);\r\n        // let dp: NVector3 = new NVector3(this.boundingBoxMin.x - tv.x, this.boundingBoxMin.y - tv.y);\r\n        let i: number = Math.round(dp.x / this.GridResolution);\r\n        let j: number = Math.round(dp.y / this.GridResolution);\r\n        if (i >= xNum) { i = xNum - 1; }\r\n        if (j >= yNum) { j = yNum - 1; }\r\n        if (i < 0) { i = 0; }\r\n        if (j < 0) { j = 0; }\r\n        i = Math.round(i);\r\n        j = Math.round(j);\r\n        // console.log(j, i);\r\n        // console.log(this.tempGeoGridList)\r\n        return this.tempGeoGridList[j][i];\r\n    }\r\n    public Draw(ctx: CanvasRenderingContext2D, renderer: Renderer, isPanning: boolean) {\r\n        this.UpdateTimeer();\r\n\r\n        if (isPanning) {\r\n            this.vec = new NVector3(0, 0, 0);\r\n            this.boundingBoxMin = new NVector3(Number.MAX_SAFE_INTEGER, Number.MAX_SAFE_INTEGER, Number.MAX_SAFE_INTEGER);\r\n            this.boundingBoxMax = new NVector3(Number.MIN_SAFE_INTEGER, Number.MIN_SAFE_INTEGER, Number.MIN_SAFE_INTEGER);\r\n            for(let i = 0; i < this.points.length; ++i) {\r\n                this.vec.x += this.points[i].v.x;\r\n                this.vec.y += this.points[i].v.y;\r\n                this.UpdateBoundingBox(this.points[i].v);\r\n            }\r\n            this.vec.x /= this.points.length;\r\n            this.vec.y /= this.points.length;\r\n            this.minVec = new NVector3(this.vec.x - this.r1, this.vec.y - this.r1, 0);\r\n            this.maxVec = new NVector3(this.vec.x + this.r1, this.vec.y + this.r1, 0);\r\n            // this.vec.y -= this.r * 0.5 // offset the ghost center along y\r\n        }\r\n\r\n        // renderer.optimizer.optimizer.optimizer.renderer.draw.shape.cluster.DrawingPresetClustering(ctx, this.points, this.vec, this.r0, this.r1, this.isHover, this.t);\r\n        \r\n        if(renderer.optimizer.inspection) {\r\n            ctx.beginPath();\r\n            ctx.rect(this.minVec.x, this.minVec.y, this.maxVec.x - this.minVec.x, this.maxVec.y - this.minVec.y)\r\n            ctx.closePath();\r\n            ctx.fillStyle = 'rgba(0, 0, 0, 0.3)';\r\n            ctx.fill();\r\n            ctx.lineWidth = 0.5;\r\n            ctx.beginPath();\r\n            ctx.rect(this.boundingBoxMin.x, this.boundingBoxMin.y, this.boundingBoxMax.x - this.boundingBoxMin.x, this.boundingBoxMax.y - this.boundingBoxMin.y)\r\n            ctx.closePath();\r\n            ctx.stroke();\r\n            if (this.tempVecGridList.length > 0) {\r\n                for(let i = 0 ; i < this.tempVecGridList.length; ++i) {\r\n                    ctx.beginPath();\r\n                    ctx.rect(this.tempVecGridList[i].x, this.tempVecGridList[i].y, this.GridResolution, this.GridResolution);\r\n                    ctx.closePath();\r\n                    ctx.stroke();\r\n                }\r\n            }\r\n\r\n        }\r\n    }\r\n    private UpdateTimeer(){\r\n        if (true ) {\r\n            this.t -= 0.1; // this.points[0].scene.annotationInstance.customization.themeCurrent.properties.timeTransitionA;\r\n            this.t = this.t < 0.4 ? 0.4 : this.t;\r\n        } else {\r\n            this.t += 0.1; // this.points[0].scene.annotationInstance.customization.themeCurrent.properties.timeTransitionB;\r\n            this.t = this.t > 1 ? 1 : this.t;\r\n        }\r\n    }\r\n    private UpdateBoundingBox(vec: NVector3){\r\n        this.boundingBoxMin.x = vec.x < this.boundingBoxMin.x ? vec.x : this.boundingBoxMin.x;\r\n        this.boundingBoxMin.y = vec.y < this.boundingBoxMin.y ? vec.y : this.boundingBoxMin.y;\r\n        this.boundingBoxMax.x = vec.x > this.boundingBoxMax.x ? vec.x : this.boundingBoxMax.x;\r\n        this.boundingBoxMax.y = vec.y > this.boundingBoxMax.y ? vec.y : this.boundingBoxMax.y;\r\n    }\r\n}","import { PointCluster } from './PointCluster';\r\nimport { CPoint } from '../../../DrawingEngine/Geometry/Point';\r\nimport { ClusteringCollisionBasedGraph } from '../';\r\n\r\nexport class Renderer {\r\n    public clustersRPoint: PointCluster[] = [];\r\n    public optimizer: ClusteringCollisionBasedGraph;\r\n    constructor(optimizer: ClusteringCollisionBasedGraph) {\r\n        this.optimizer = optimizer;\r\n    }\r\n    public InitGeometry(){\r\n        this.clustersRPoint = [];\r\n    }\r\n    public addClusterByGeometries(geo: CPoint[][] ) {\r\n        for(let i = 0; i < geo.length; ++i) {\r\n            this.clustersRPoint.push(new PointCluster(this, geo[i]));\r\n        }\r\n    }\r\n    public RemoveCluster(cluster: PointCluster ){\r\n        this.clustersRPoint.splice(this.clustersRPoint.indexOf(cluster), 1);\r\n\r\n    }\r\n    public Render(ctx: CanvasRenderingContext2D, isStationary: boolean): void {\r\n    //     console.log(this.clustersRPoint.length);\r\n        if (this.clustersRPoint.length > 0) {\r\n            for(let i = 0 ; i < this.clustersRPoint.length; ++i) {\r\n                this.clustersRPoint[i].Draw(ctx, this, isStationary);\r\n            }\r\n        }\r\n\r\n    }\r\n}","import { CPoint } from '../../../DrawingEngine/Geometry/Point';\r\nimport { PointCluster } from './PointCluster';\r\nimport { ClusteringCollisionBasedGraph } from '..';\r\n\r\nimport { distance, AABBintersect2D } from '../../../../../../Tools/Clustering/ClusteringCollisionBasedGraph/lib';\r\n\r\nexport class GraphClustering {\r\n    public optimizer: ClusteringCollisionBasedGraph;\r\n    public pointList: CPoint[] = []\r\n    // listNPoint: CPoint[] = []\r\n\r\n    constructor(optimizer: ClusteringCollisionBasedGraph) {\r\n        this.optimizer = optimizer;\r\n    }\r\n\r\n    public update(): void {\r\n        this.updatePoints();\r\n\r\n        // 1: build connectivity based on collision\r\n        // this.listNPoint = this.BuildConnectivity(this.listNPoint);\r\n        this.pointList = this.BuildConnectivity(this.pointList);\r\n        this.initGeometry();\r\n        // 2: construct clusters graph based on the connectivity\r\n        const geoList = this.buildGraph(this.pointList);\r\n\r\n        if (geoList !== undefined) {\r\n            this.addClusterByGeometries(geoList);\r\n            // // 3: recursive checking for the collision while repositioning clusters\r\n            this.PostUpdateCollisionBasedonGraph();\r\n\r\n            const graphs = this.NeedDecompose();\r\n            if (graphs.length > 0) {\r\n                // 4: tessellate big clusters based on a resolution\r\n                this.SplitClusters(graphs);\r\n                // 5: post-process for merging based on a tolerance\r\n                this.PostMergeCluster();\r\n            }\r\n        }\r\n    }\r\n    public initGeometry() {\r\n        this.optimizer.renderer.InitGeometry();\r\n    }\r\n    public addClusterByGeometries(outGraphList: CPoint[][]) {\r\n        this.optimizer.renderer.addClusterByGeometries(outGraphList);\r\n    }\r\n    private updatePoints() {\r\n        this.pointList = [];\r\n\r\n        for (let i = 0; i < this.optimizer.points.length; ++i) {\r\n            if (this.optimizer.points[i].isHidden ||\r\n                !this.optimizer.points[i].isRenderable) {\r\n                continue\r\n            } else {\r\n                const pt = this.optimizer.points[i];\r\n                pt.collision.Reset();\r\n                this.pointList.push(pt)\r\n            }\r\n        }\r\n\r\n    }\r\n    private BuildConnectivity(listPoints: CPoint[]) {\r\n        for (let i = 0; i < listPoints.length; ++i) {\r\n            const pt = listPoints[i];\r\n            for (let j = i + 1; j < listPoints.length; ++j) {\r\n                const other = listPoints[j];\r\n\r\n                // @ts-ignore\r\n                if (!other.isCollapse && other !== pt && AABBintersect2D([pt.collision.minVec, pt.collision.maxVec], [other.collision.minVec, other.collision.maxVec])) {\r\n                    pt.collision.isCollided = true;\r\n                    pt.isCollapse = true;\r\n                    pt.numVisit = 0;\r\n                    pt.collision.neighborShapes.push(other);\r\n                    other.collision.isCollided = true;\r\n                    other.isCollapse = true;\r\n                    other.numVisit = 0;\r\n                    other.collision.neighborShapes.push(pt);\r\n                    // other.collision.neighborShapes.push(pt);\r\n                    // pt.collision.numOrder = numOrder++;\r\n                    // break;\r\n                }\r\n            }\r\n        }\r\n        return listPoints;\r\n    }\r\n    private buildGraph(listPoints: CPoint[]) {\r\n        let outList: CPoint[][] = [];\r\n        for (let i = 0; i < listPoints.length; ++i) {\r\n            let ptList: CPoint[] = [];\r\n            let queue = [listPoints[i]];\r\n            queue[0].collision.isVisited = true;\r\n            ptList.push(queue[0]);\r\n            let safeguard = 0;\r\n            let current = undefined;\r\n            while ((current = queue.shift()) !== undefined) {\r\n                for (let i = 0; i < current.collision.neighborShapes.length; ++i) {\r\n                    if (!current.collision.neighborShapes[i].collision.isVisited) {\r\n                        current.collision.neighborShapes[i].collision.isVisited = true;\r\n                        queue.push(current.collision.neighborShapes[i] as CPoint);\r\n                        ptList.push(current.collision.neighborShapes[i] as CPoint);\r\n                    }\r\n                }\r\n                if (safeguard++ > 1000) { console.debug('fail to optimize'); return; }\r\n            }\r\n            if (ptList.length > 1) {\r\n                outList.push(ptList);\r\n            }\r\n        }\r\n        return outList;\r\n    }\r\n    public PostUpdateCollisionBasedonGraph() {\r\n        // for (let i = 0; i < this.optimizer.renderer.clustersNPoint.length; ++i) {\r\n        //     this.UpdateByQueue(this.optimizer.renderer.clustersNPoint[i], this.listNPoint);\r\n        // }\r\n        for (let i = 0; i < this.optimizer.renderer.clustersRPoint.length; ++i) {\r\n            this.UpdateByQueue(this.optimizer.renderer.clustersRPoint[i], this.pointList);\r\n        }\r\n    }\r\n    private UpdateByQueue(cluster: PointCluster, geometries: CPoint[]) {\r\n        let remain = 0;\r\n        const queue = [...geometries]\r\n        while (queue.length) {\r\n            const geo = queue.shift();\r\n\r\n            if (geo) {\r\n                // console.log(queue.length);\r\n                // safeguard and performance optimization\r\n                if (geo.numVisit > 100) { geo.numVisit = 0; break; }\r\n                if (queue.length === 0) {\r\n                    if (geometries.length < remain++) { break; }\r\n                }\r\n                // end safeguard and performance optimization\r\n                if (!geo.collision.isCollided) {\r\n                    // @ts-ignore\r\n                    if (AABBintersect2D([geo.collision.minVec, geo.collision.maxVec], [cluster.minVec, cluster.maxVec])) {\r\n                        geo.collision.isCollided = true;\r\n                        geo.isCollapse = true;\r\n                        geo.numVisit = 0;\r\n                        cluster.AddPost(geo);\r\n                    } else {\r\n                        geo.numVisit++;\r\n                        queue.push(geo);\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n    private NeedDecompose() {\r\n        const clusterGraph = [];\r\n\r\n        for (let i = 0; i < this.optimizer.renderer.clustersRPoint.length; ++i) {\r\n            if (this.optimizer.renderer.clustersRPoint[i].NeedDecompose()) {\r\n                clusterGraph.push(this.optimizer.renderer.clustersRPoint[i]);\r\n            }\r\n        }\r\n        return clusterGraph;\r\n    }\r\n    private SplitClusters(clusters: PointCluster[]) {\r\n        for (let i = 0; i < clusters.length; ++i) {\r\n            clusters[i].Split();\r\n        }\r\n    }\r\n    private PostMergeCluster() {\r\n        this.PostMergeClusterCompute(this.optimizer.renderer.clustersRPoint);\r\n    }\r\n    private PostMergeClusterCompute(clusters: PointCluster[]) {\r\n        for (let i = 0; i < clusters.length - 1; ++i) {\r\n            const cluster = clusters[i];\r\n            for (let j = i + 1; j < clusters.length; ++j) {\r\n                const other = clusters[j]\r\n                if (!other.isVisited) {\r\n                    // @ts-ignore\r\n                    if (distance(cluster.vec, other.vec) < cluster.r1 + 20) {\r\n                        other.isVisited = true;\r\n                        cluster.Merge(other);\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n}","import { NVector3 } from '../Clustering/lib';\r\n\r\nimport { Renderer } from './Core/Renderer';\r\nimport { GraphClustering } from './Core/GraphClustering';\r\nimport { CPoint } from '../../DrawingEngine/Geometry/Point';\r\n\r\nexport class ClusteringCollisionBasedGraph {\r\n\r\n    graphClustering: GraphClustering;\r\n    renderer: Renderer;\r\n\r\n    mv: NVector3 = new NVector3(0, 0);\r\n\r\n    inspection: boolean = true;\r\n\r\n    points: CPoint[] = [];\r\n\r\n    constructor() {\r\n        this.graphClustering = new GraphClustering(this);\r\n        this.renderer = new Renderer(this);\r\n    }\r\n    public push(vs: CPoint[]) {\r\n        this.points = vs;\r\n        this.update();\r\n    }\r\n    public mouseInteraction(x: number, y: number){\r\n        // this.mv = this.optimizer.getCellAtPoint(new NVector3(x, y)).vec;\r\n    }\r\n    public update(): void {\r\n        this.graphClustering.update();\r\n        // console.log(this.optimizer.optimizer.optimizer.renderer.annotationInstance.activeCommandController.acProperties.isZooming);\r\n        // if (this.optimizer.optimizer.optimizer.renderer.annotationInstance.activeCommandController.acProperties.isZooming) {\r\n        // this.initGrid(width, height);\r\n        // }\r\n    //     console.log(this);\r\n    }\r\n    public getCellAtPoint(dp: NVector3) {\r\n\r\n    }\r\n    public render(ctx: CanvasRenderingContext2D, isStationary: boolean) {\r\n        this.renderer.Render(ctx, isStationary)\r\n    }\r\n}","import { DrawingEngine } from '../';\r\nimport { MouseEventData, MOUSE_TYPE } from '../lib';\r\nimport { Clustering, OPTIMIZER } from '../../Addon/Clustering/';\r\nimport { ClusteringCollisionBasedGraph } from '../../Addon/ClusteringCollisionBasedGraph';\r\n\r\nexport class Addon {\r\n    drawingEngine: DrawingEngine;\r\n    clustering: Clustering | undefined = undefined;\r\n    clusteringCollisionBasedGraph: ClusteringCollisionBasedGraph | undefined = undefined;\r\n    constructor(drawingEngine: DrawingEngine) {\r\n        this.drawingEngine = drawingEngine;\r\n    }\r\n    async InitClustering() {\r\n        return import('../../Addon/Clustering/').then(({ Clustering }) => {\r\n\r\n            const  vs = this.drawingEngine.geometryCommon.getAllVecFromCPoint();\r\n\r\n            this.clustering = new Clustering(OPTIMIZER.GRID);\r\n            this.clustering.optimizer.rx = 9;\r\n            this.clustering.optimizer.ry = 5;\r\n            this.clustering.push(vs , this.drawingEngine.renderer.ctx.canvas.width, this.drawingEngine.renderer.ctx.canvas.height);\r\n\r\n\r\n        }).catch(err => {\r\n        //     console.log('Stop loading clustering Addon.'); console.log(err);\r\n        }); \r\n    }\r\n    async InitClusteringCollision() {\r\n        return import('../../Addon/Clustering/').then(({ Clustering }) => {\r\n\r\n            const  vs = this.drawingEngine.geometryCommon.getAllFromCPoint();\r\n\r\n            this.clusteringCollisionBasedGraph = new ClusteringCollisionBasedGraph();\r\n            // this.clusteringCollisionBasedGraph.optimizer.rx = 9;\r\n            // this.clusteringCollisionBasedGraph.optimizer.ry = 5;\r\n            this.clusteringCollisionBasedGraph.push(vs);\r\n\r\n\r\n        }).catch(err => {\r\n        //     console.log('Stop loading clustering Addon.'); console.log(err);\r\n        }); \r\n    }\r\n\r\n    \r\n    public mouseInteraction(e: MouseEventData) {\r\n        switch (e.type) {\r\n            case MOUSE_TYPE.LEFT:\r\n                break;\r\n            case MOUSE_TYPE.MIDDLE:\r\n                break;\r\n            case MOUSE_TYPE.RIGHT:\r\n                break;\r\n            case MOUSE_TYPE.DOUBLE:\r\n                break;\r\n            case MOUSE_TYPE.MOVE:\r\n                this.clustering?.mouseInteraction(e.x, e.y);\r\n                break;\r\n            case MOUSE_TYPE.DRAG:\r\n                break;\r\n            case MOUSE_TYPE.DOWN:\r\n                break;\r\n            case MOUSE_TYPE.UP:\r\n                break;\r\n            case MOUSE_TYPE.WHEEL:\r\n                break;\r\n            default:\r\n                break;\r\n        }\r\n    }\r\n    public render(ctx: CanvasRenderingContext2D, isPanning: boolean) {\r\n        this.clustering?.render(ctx, isPanning, this.drawingEngine.renderer.ctx.canvas.width, this.drawingEngine.renderer.ctx.canvas.height);\r\n        // this.clusteringCollisionBasedGraph?.render(ctx, isPanning, this.drawingEngine.renderer.ctx.canvas.width, this.drawingEngine.renderer.ctx.canvas.height);\r\n        this.clusteringCollisionBasedGraph?.render(ctx, isPanning);\r\n    }\r\n\r\n}","import { DrawingEngine } from '../'\r\n\r\nexport class Customization {\r\n\r\n    constructor(){\r\n\r\n    }\r\n\r\n}\r\n\r\nexport class Renderer {\r\n\r\n    public drawingEngine: DrawingEngine;\r\n\r\n    private lastCalledTime: number = Date.now();\r\n    private delta: number = 1;\r\n    public fps: number = 30;\r\n\r\n    public ctx: CanvasRenderingContext2D;\r\n\r\n    constructor(drawingEngine: DrawingEngine) {\r\n        this.drawingEngine = drawingEngine;\r\n    }\r\n    public render(ctx: CanvasRenderingContext2D, isPanning: boolean) {\r\n        this.ctx = ctx;\r\n        this.update(isPanning);\r\n        this.renderPost(ctx, isPanning);\r\n     }\r\n    public update( isPanning: boolean) {\r\n        for (let key in this.drawingEngine.scene.geoDict) {\r\n            this.drawingEngine.scene.geoDict[key].update( isPanning, this.drawingEngine.projection.toScreen );\r\n        }\r\n     }\r\n    public renderPost(ctx: CanvasRenderingContext2D, isPanning: boolean) {\r\n        for (let key in this.drawingEngine.scene.geoDict) {\r\n            this.drawingEngine.scene.geoDict[key].renderPost(ctx, isPanning );\r\n        }\r\n        this.ComputeFPS();\r\n    }\r\n    private ComputeFPS(){\r\n        this.delta = (Date.now() - this.lastCalledTime )/1000;\r\n        this.lastCalledTime = Date.now();\r\n        this.fps = 1 / this.delta;\r\n    }\r\n}","import { DrawingEngine } from '../';\r\nimport { ACTIVE_UI } from '../lib';\r\nimport { GeometryBase } from '../Geometry/Base/GeometryBase';\r\nimport { CPoint } from '../Geometry/Point';\r\n\r\nexport class Scene {\r\n    public drawingEngine: DrawingEngine;\r\n    \r\n    public _capture: GeometryBase | undefined = undefined; \r\n    public geometryList : GeometryBase[] = [];\r\n    public pointList : CPoint[] = [];\r\n\r\n    public geoDict: {} = {};\r\n    constructor(drawingEngine: DrawingEngine) {\r\n        this.drawingEngine = drawingEngine;\r\n    }\r\n    public get capture(): GeometryBase | undefined {\r\n        return this._capture;\r\n    }\r\n    public set capture(g: GeometryBase | undefined) {\r\n        if (g) {\r\n            this.drawingEngine.ableToPan = false;\r\n        } else {\r\n            this.drawingEngine.ableToPan = true;\r\n        }\r\n        // console.log(g);\r\n        this._capture = g;\r\n    }\r\n    public addGeometry(g: GeometryBase) {\r\n        this.geoDict[g.id] = g;\r\n        this.geometryList.push(g);\r\n        if(g.type === ACTIVE_UI.point) {\r\n            this.pointList.push(g as CPoint);\r\n        }\r\n    }\r\n\r\n}","\r\nimport { MouseEventData } from './lib';\r\n\r\nimport { ActiveCommandController } from './ActiveCommand';\r\nimport { Projection } from './Projection';\r\nimport { IO } from './IO/IO';\r\nimport { GeometryCommon } from './Geometry/GeometryCommon';\r\nimport { Addon } from './Addon';\r\nimport { Renderer } from './Renderer';\r\nimport { Scene } from './Scene';\r\nimport { KeyboardEventData } from '../../NJSCore';\r\n\r\n// import { tensor2d, tidy, Tensor2D } from '@tensorflow/tfjs';\r\n// import * as tf from '@tensorflow/tfjs';\r\n\r\n\r\nexport class DrawingEngine {\r\n\r\n    public activeCommand: ActiveCommandController;\r\n    public projection: Projection;\r\n    public geometryCommon: GeometryCommon;\r\n    public scene: Scene;\r\n    public addon: Addon;\r\n    public renderer: Renderer;\r\n    public io: IO;\r\n\r\n    _ableToPan: boolean = true;\r\n\r\n    constructor() {\r\n        this.io = new IO(this);\r\n        this.addon = new Addon(this);\r\n        this.projection = new Projection(this);\r\n        this.geometryCommon = new GeometryCommon(this);\r\n        this.activeCommand = new ActiveCommandController(this);\r\n        this.scene = new Scene(this);\r\n        this.renderer = new Renderer(this);\r\n    }\r\n\r\n    public apiCall(command: string): any {\r\n        return this.activeCommand.apiCall(command);\r\n    }\r\n    public updateProjection(projection: { toMap: (x: number, y: number) => number[] , toScreen: (x: number, y: number) => number[]} ){\r\n        this.projection.updateProjection(projection);\r\n    }\r\n    public setCommand(command: string = 'SELECT') {\r\n    //     console.log(command);\r\n        this.activeCommand.setCommander(command);\r\n    }\r\n    public mouseEvent(m: MouseEventData){\r\n        this.activeCommand.activeCommand.mouseEvent(m);\r\n\r\n        this.addon.mouseInteraction(m);\r\n    }\r\n    public keyEvent(m: KeyboardEventData){\r\n        // this.activeCommand.activeCommand.k(m);\r\n    }\r\n    public render(ctx: CanvasRenderingContext2D, isPanning: boolean) {\r\n        this.renderer.render(ctx, isPanning);\r\n\r\n        this.addon.render(ctx, isPanning);\r\n    }\r\n    public set ableToPan(v: boolean) {\r\n        this._ableToPan = v;\r\n        this.bindAbleToPan(v);\r\n        // this.definition.app.ableToPan = v;\r\n    }\r\n    public bindAbleToPan(v: boolean){\r\n\r\n    }\r\n}","import { APP, MouseEventData, KeyboardEventData, NVector3, NLine, CSVData, getAllUrlParams } from './lib';\r\nimport { HTMLView } from './View/HTMLView';\r\nimport { Controller } from './Controller/Controller';\r\nimport { Core } from './Core/Core';\r\nimport { IO } from './IO';\r\n\r\nexport class NNAEngineV3 {\r\n\r\n    view: HTMLView;\r\n    core: Core;\r\n    io: IO;\r\n    controller: Controller;\r\n\r\n    data: CSVData;\r\n\r\n    lastCalledTime: number = Date.now();;\r\n    fps: number = 30;\r\n    delta: number = 1;\r\n\r\n    public toScreen(x: number, y: number){\r\n        return [x, y];\r\n    }\r\n    public toMap(x: number, y: number){\r\n        return [x, y];\r\n    }\r\n\r\n    constructor() {\r\n        // this.controller = new Controller(this);\r\n        // this.view = new HTMLView(this);\r\n        // this.core = new Core(this);\r\n        // this.io = new IO(this);\r\n        // const param = getAllUrlParams();\r\n        // console.log(param);\r\n        console.log('NNAEngineV3 is running...')\r\n\r\n\r\n\r\n        // const request = new Request('http://njslab.com/NJSLabEnv/NY_street_lat_long.csv');\r\n\r\n        // fetch(request, {mode: 'no-cors'}).then( (response) => {\r\n        //     // Convert to JSON\r\n        //     return response.text();\r\n        // }).then( (j) => {\r\n        //     // Yay, `j` is a JavaScript object\r\n        // //     console.log('jjjjjjjjjjjjjj', j)\r\n        //     // console.log(JSON.stringify(j));\r\n        // }).catch((error) => {\r\n        // //     console.log('Request failed', error)\r\n        // }).then((d: any) => {\r\n        // //     console.log('dddddddddddddddddddddddddd');\r\n        // //     console.log(d);\r\n        // }\r\n        // );\r\n\r\n    }\r\n    // https://cors-anywhere.herokuapp.com/http://njslab.com/NJSLabEnv/NY_street_lat_long.csv\r\n    public importDummyData(url: string = 'https://raw.githubusercontent.com/NamjuLee/data/master/NYC/NY_street_lat_long.csv'){\r\n    // public importDummyData(url: string = 'http://njslab.com/NJSLabEnv/NY_street_lat_long.csv'){\r\n        // this.io.importCSV(``).then( (d: any) => {\r\n        this.io.importCSV(url).then( (d: any) => {\r\n        //     console.log(d);\r\n            this.data = new CSVData();\r\n            this.data.ComputeCSV(d);\r\n            this.data.initLines((x: number, y: number) => this.toScreen(x, y));\r\n\r\n            this.core.graphSystem.initGraph(this.data.lineTest);\r\n        });\r\n    }\r\n    public updateProjection(projection: { toMap: (x: number, y: number) => number[] , toScreen: (x: number, y: number) => number[]} ){\r\n        this.toScreen = projection.toScreen;\r\n        this.toMap = projection.toMap;\r\n    }\r\n    public apiCall(app: APP, action: string, data: any | undefined) {\r\n        this.controller.execution(app, action, data);\r\n    }\r\n    public initGraph(lns: NLine[]) {\r\n        this.core.initGraph(lns);\r\n    }\r\n    public reset(){\r\n        this.view.reset();\r\n    }\r\n    public setUnit(unit: string) {\r\n        this.core.setUnit(unit);\r\n    }\r\n    public computePath(origin: NVector3[], destination: NVector3[], BETA: number = 0.002) {\r\n        this.core.computePath(origin, destination, BETA);\r\n    }\r\n    public mouseEvent(m: MouseEventData){\r\n        // console.log(m);\r\n        this.controller.mouseEvent(m);\r\n    }\r\n    public keyEvent(e: KeyboardEventData){\r\n        // this.controller.ke(m);\r\n    }\r\n    public render(ctx: CanvasRenderingContext2D, isPanning: boolean) {\r\n        this.core.render(ctx, isPanning)\r\n        \r\n        // if(isPanning) {\r\n        //     if (this.data) {\r\n        //         this.data.updateProjection(this.definition.app.projection.ToScreen);\r\n        //     }\r\n        // }\r\n\r\n        // if (this.data) {\r\n        //     this.data.render(ctx, this.definition.app.projection.ToScreen, this.definition.controller.m.x, this.definition.controller.m.y);\r\n        // }\r\n\r\n       this.ComputeFPS();\r\n        // console.log('render');\r\n    }\r\n    private ComputeFPS(){\r\n        this.delta = (Date.now() - this.lastCalledTime )/1000;\r\n        this.lastCalledTime = Date.now();\r\n        this.fps = 1 / this.delta;\r\n    }\r\n}","\nexport const AABBintersect2D = (v0: NVector3[], v1: NVector3[]): boolean => {\n    const v0minX = v0[0].x;\n    const v0maxX = v0[1].x;\n    const v1minX = v1[0].x;\n    const v1maxX = v1[1].x;\n    const v0minY = v0[0].y;\n    const v0maxY = v0[1].y;\n    const v1minY = v1[0].y;\n    const v1maxY = v1[1].y;\n    // const v0minZ = 0;\n    // const v0maxZ = 0;\n    // const v1minZ = 0;\n    // const v1maxZ = 0;\n    return (v0minX <= v1maxX && v0maxX >= v1minX) &&\n        (v0minY <= v1maxY && v0maxY >= v1minY); // &&\n    // (v0minZ <= v1maxZ && v0maxZ >= v1minZ);\n};\nexport const distance = (v0: NVector3, v1: NVector3): number => {\n    return Math.sqrt((v0.x - v1.x) * (v0.x - v1.x) + (v0.y - v1.y) * (v0.y - v1.y) + (v0.z - v1.z) * (v0.z - v1.z));\n    // return NWebassemblyController.ctrller.Distance(v0.x, v0.y, v0.z, v1.x, v1.y, v1.z);\n}\n\nexport class NVector3 {\n    public x: number = 0;\n    public y: number = 0;\n    public z: number = 0;\n    public lon: number = 0;\n    public lat: number = 0;\n    public elevation: number = 0;\n\n    public d: boolean = true;\n    public isRenderable: boolean = true;\n\n    constructor(x: number = 0, y: number = 0, z: number = 0) {\n        this.x = x;\n        this.y = y;\n        this.z = z;\n    }\n}\n\n\nexport class CPoint {\n    public vec: NVector3;\n    public id: string = '';\n    public numVisit: number = 0;\n    public radius: number = 10;\n\n    public isCollapse: boolean = false;\n\n    public isHidden: boolean = false;\n    public isRenderable: boolean = true;\n\n    public isSelected: boolean = false;\n    public isHover: boolean = false;\n    public collision: Collision;\n    constructor(x: number, y: number) {\n        this.vec = new NVector3(x, y, 0);\n        this.updateBounding();\n    }\n    public updateBounding() {\n        this.collision = new Collision(this);\n    }\n    public render(ctx: CanvasRenderingContext2D) {\n        ctx.beginPath();\n        ctx.arc(this.vec.x, this.vec.y, this.radius, 0, Math.PI * 2);\n        ctx.closePath();\n        if (this.isCollapse) {\n            ctx.fillStyle = '#f00';\n        } else {\n            ctx.fillStyle = '#0f0';\n        }\n        ctx.fill();\n\n        this.renderBoundingBox(ctx)\n    }\n    public renderBoundingBox(ctx: CanvasRenderingContext2D){\n        ctx.beginPath();\n        ctx.rect(\n            this.collision.minVec.x, this.collision.minVec.y, \n            (this.collision.maxVec.x - this.collision.minVec.x),\n            (this.collision.maxVec.y - this.collision.minVec.y)\n            )\n        ctx.stroke();\n    }\n}\nexport class Collision {\n    base: CPoint;\n    isCollided: boolean = false;\n\n    neighborShapes: CPoint[] = [];\n\n    minVec: NVector3;\n    maxVec: NVector3;\n\n    isVisited: boolean = false;\n    numOrder: number = -1;\n\n    constructor(base: CPoint) {\n        this.base = base;\n        const r = this.base.radius;\n        this.minVec = new NVector3(this.base.vec.x - r, this.base.vec.y - r, 0);\n        this.maxVec = new NVector3(this.base.vec.x + r, this.base.vec.y + r, 0);\n    }\n    public Reset(){\n        this.neighborShapes = [];\n        this.numOrder = -1;\n        this.base.numVisit = 0;\n        this.base.isCollapse = false;\n        this.isCollided = false;\n        this.isVisited = false;\n    }\n}"],"names":["OPTIMIZER","GridSystemScreen","constructor","xInterval","yInterval","rx","ry","cells","points","update","width","height","this","initGrid","y","cellList","x","push","Cell","i","length","p","getCellAtPoint","isRenderable","dp","Math","round","j","render","ctx","draw","grid","xI","yI","r0","r1","vec","vecRender","isHover","_isRenderable","NVector3","geo","v","isPanning","beginPath","rect","closePath","stroke","r","fillStyle","arc","PI","fill","GridSystemDynamic","minP","Number","MAX_SAFE_INTEGER","maxP","MIN_SAFE_INTEGER","z","Clustering","optimizer","optimizerType","mv","inspection","GRID_SCREEN","GRID","console","debug","vs","mouseInteraction","isStationary","CommandBase","activeCommandController","type","COMMAND","mouseEvent","e","MOUSE_TYPE","MouseLeftClickPre","MouseMiddleClickPre","MouseRightClickPre","MouseDoubleClickPre","MouseMovePre","MouseDragPre","MouseDownPre","MouseUpPre","MouseWheelPre","MouseDown","drawingEngine","scene","capture","geometryCommon","find","MouseLeftClick","isSelected","resetSelections","MouseMiddleClick","MouseRightClick","MouseUp","undefined","MouseDoubleClick","MouseMove","updateHover","MouseDrag","projection","toMap","translate","MouseWheel","Collision","geometryBase","isCollided","neighborShapes","minVec","maxVec","isVisited","numOrder","Reset","numVisit","isCollapse","GeometryBase","id","isHidden","collision","d","Date","getTime","replace","c","random","floor","toString","getUUID","toJson","long","lat","isInside","toScreen","renderPost","CPoint","param","super","t","color","colorHover","ACTIVE_UI","distanceToXY","isCustom","sv","sin","lineWidth","strokeStyle","CommandSelect","CommandPoint","addGeometry","hasShift","setCommand","CommandLine","ActiveCommandController","activeCommand","commands","SELECT","POINT","LINE","setCommander","commander","apiCall","command","getSelCPoint","popZipData","addon","InitClustering","InitClusteringCollision","json","fetchJson","count","greatePointByGeoPos","spos","Projection","updateProjection","IO","firebaseConfig","apiKey","authDomain","projectId","storageBucket","messagingSenderId","appId","getData","data","val","getError","error","sendData","GeometryCommon","key","geoDict","geometryList","getAllVecFromCPoint","pointList","getAllFromCPoint","PointCluster","renderer","geometries","boundingBoxMin","boundingBoxMax","GridResolution","tempVecGridList","tempGeoGridList","UpdateBoundingBox","IsInside","m","distance","AddPost","includes","NeedDecompose","Split","DeepRemove","xNum","yNum","buildGrid","BuildSubCluster","Merge","other","concat","RemoveCluster","gridList","theY","geoMat","theX","geoList","GetCellAtPoint","clustersRPoint","tv","Draw","UpdateTimeer","Renderer","InitGeometry","addClusterByGeometries","cluster","splice","indexOf","Render","GraphClustering","updatePoints","BuildConnectivity","initGeometry","buildGraph","PostUpdateCollisionBasedonGraph","graphs","SplitClusters","PostMergeCluster","outGraphList","pt","listPoints","AABBintersect2D","outList","ptList","queue","current","safeguard","shift","UpdateByQueue","remain","clusterGraph","clusters","PostMergeClusterCompute","ClusteringCollisionBasedGraph","graphClustering","Addon","clustering","clusteringCollisionBasedGraph","async","then","canvas","catch","err","lastCalledTime","now","delta","fps","ComputeFPS","Scene","_capture","g","ableToPan","DrawingEngine","io","_ableToPan","keyEvent","bindAbleToPan","NNAEngineV3","view","core","controller","log","importDummyData","url","importCSV","CSVData","ComputeCSV","initLines","graphSystem","initGraph","lineTest","app","action","execution","lns","reset","setUnit","unit","computePath","origin","destination","BETA","v0","v1","v0minX","v0maxX","v1minX","v1maxX","v0minY","v0maxY","v1minY","v1maxY","sqrt","lon","elevation","radius","updateBounding","renderBoundingBox","base"],"sourceRoot":""}