{"version":3,"file":"static/js/53332.f5172b84.chunk.js","mappings":"qIASO,MAAMA,EAUTC,YAAYC,GAAkC,IAAnBC,EAAW,uDAAG,GAAE,KAR3CC,iBAAW,OAEXC,cAAQ,OACRC,cAAQ,OACRH,SAAG,OACHI,gBAAU,EAINC,KAAKJ,YAAc,EACnBI,KAAKH,SAAWH,EAChBM,KAAKF,UAAW,EAChBE,KAAKL,IAAM,OAGCM,IAARN,GAAqBA,EAAM,GAC3BK,KAAKD,WAAa,IAAOJ,EACzBK,KAAKE,IAAM,WAEP,IAAIC,EAAYC,YAAYC,MACxBC,EAAYH,EAAYH,KAAKJ,YAC7BW,EAAYD,EAAU,IAEtBA,GAAWN,KAAKD,aAChBC,KAAKL,IAAQa,KAAKC,MAAM,EAAIF,GAC5BP,KAAKJ,YAAcO,EACnBH,KAAKH,SAASU,IAGdP,KAAKF,UAAWY,OAAOC,sBAAsBX,KAAKE,IAC1D,GAEAF,KAAKE,IAAM,WAEP,IAAIC,EAAYC,YAAYC,MACxBE,GAAaJ,EAAYH,KAAKJ,aAAe,IAGjDI,KAAKL,IAAQa,KAAKC,MAAM,EAAIF,GAC5BP,KAAKJ,YAAcO,EAEnBH,KAAKH,SAASU,GACVP,KAAKF,UAAWY,OAAOC,sBAAsBX,KAAKE,IAC1D,CAER,CACAA,MACI,CAEJU,QAII,OAHAZ,KAAKF,UAAW,EAChBE,KAAKJ,YAAcQ,YAAYC,MAC/BK,OAAOC,sBAAsBX,KAAKE,KAC3BF,IACX,CAEAa,OACIb,KAAKF,UAAW,CACpB,E","sources":["njslab/LabStarter/AppNGL3d/NGL3dApp_06/Core/Loop.ts"],"sourcesContent":["/*NOTES:\r\nTutorial on how to control FPS :: http:// codetheory.in/controlling-the-frame-rate-with-requestanimationframe/\r\n\r\nEXAMPLE:\r\nrloop = new RenderLoop(function(dt) { \r\n\tconsole.log(rloop.fps + \" \" + dt);\r\n},10).start();\r\n*/\r\n\r\nexport class RenderLoop {\r\n\r\n    msLastFrame: number ;\r\n    //  tslint:disable-next-line:no-any\r\n    callBack: any;\r\n    isActive: boolean;\r\n    fps: number;\r\n    msFpsLimit: number;\r\n\r\n    //  tslint:disable-next-line:no-any\r\n    constructor(callback: any, fps: number = 30) {\r\n        this.msLastFrame = 0;\t// The time in Miliseconds of the last frame.\r\n        this.callBack = callback;\t// What function to call for each frame\r\n        this.isActive = false;\t\t// Control the On/Off state of the render loop\r\n        this.fps = 0;\t\t\t\t// Save the value of how fast the loop is going.\r\n\r\n        // if (!fps && fps > 0) { // Build a run method that limits the framerate\r\n        if (fps !== undefined && fps > 0) { // Build a run method that limits the framerate\r\n            this.msFpsLimit = 1000 / fps; // Calc how many milliseconds per frame in one second of time.\r\n            this.run = function() {\r\n                // Calculate Deltatime between frames and the FPS currently.\r\n                var msCurrent\t= performance.now(),\r\n                    msDelta\t\t= (msCurrent - this.msLastFrame),\r\n                    deltaTime\t= msDelta / 1000.0;\t\t// What fraction of a single second is the delta time\r\n                \r\n                if (msDelta >= this.msFpsLimit) { // Now execute frame since the time has elapsed.\r\n                    this.fps\t\t\t= Math.floor(1 / deltaTime);\r\n                    this.msLastFrame\t= msCurrent;\r\n                    this.callBack(deltaTime);\r\n                }\r\n\r\n                if (this.isActive) {window.requestAnimationFrame(this.run); }\r\n            };\r\n        } else { // Else build a run method thats optimised as much as possible.\r\n            this.run = function() {\r\n                // Calculate Deltatime between frames and the FPS currently.\r\n                var msCurrent\t= performance.now(),\t// Gives you the whole number of how many milliseconds since the dawn of time :)\r\n                    deltaTime\t= (msCurrent - this.msLastFrame) / 1000.0;\t// ms between frames, Then / by 1 second to get the fraction of a second.\r\n\r\n                // Now execute frame since the time has elapsed.\r\n                this.fps\t\t\t= Math.floor(1 / deltaTime); // Time it took to generate one frame, divide 1 by that to get how many frames in one second.\r\n                this.msLastFrame\t= msCurrent;\r\n\r\n                this.callBack(deltaTime);\r\n                if (this.isActive) {window.requestAnimationFrame(this.run); }\r\n            };\r\n        }\r\n    }\r\n    run() {\r\n        // \r\n    }\r\n    start() {\r\n        this.isActive = true;\r\n        this.msLastFrame = performance.now();\r\n        window.requestAnimationFrame(this.run);\r\n        return this;\r\n    }\r\n\r\n    stop() { \r\n        this.isActive = false; \r\n    }\r\n}"],"names":["RenderLoop","constructor","callback","fps","msLastFrame","callBack","isActive","msFpsLimit","this","undefined","run","msCurrent","performance","now","msDelta","deltaTime","Math","floor","window","requestAnimationFrame","start","stop"],"sourceRoot":""}