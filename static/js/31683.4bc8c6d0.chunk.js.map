{"version":3,"file":"static/js/31683.4bc8c6d0.chunk.js","mappings":"0KAIO,MAAMA,EAASC,EAAQ,OAEvB,MAAMC,EAKTC,YAAYC,GAAgB,KAJ5BA,SAAG,OAEHC,wBAAkB,EAGdC,KAAKF,IAAMA,CAEf,CACAG,oBAAoBC,GAEhB,OAAOF,KAAKG,YAAYD,GAAME,MAAMC,IAChC,MAAMC,EAAWC,EAAAA,cAAAA,YAA0BP,KAAKF,IAAIU,OAAOC,GAAIJ,GAAS,GACpEC,IACAN,KAAKD,mBAAqBO,EAC9B,GAER,CACA,kBAA0BI,GACtB,OAAO,IAAIC,SAAQ,CAACC,EAASC,KACzB,IAAIC,EAAM,IAAIC,MACdD,EAAIE,OAAS,IAAMJ,EAAQE,GAC3BA,EAAIG,QAAUJ,EACdC,EAAIJ,IAAMA,CAAG,GAErB,E,kBC5BG,IAAKQ,E,yGAYX,SAZWA,GAAAA,EAAI,gCAAJA,EAAAA,EAAI,yCAAJA,EAAI,0BAAJA,EAAAA,EAAI,qCAAJA,EAAI,oBAAJA,EAAAA,EAAI,6BAAJA,EAAI,0BAAJA,EAAAA,EAAI,mCAYf,CAZWA,IAAAA,EAAI,KAcT,MAAMC,EAMTtB,YAAYY,EAA4BW,GAAwB,KAJhEC,cAAQ,OACRC,UAAI,OACJC,QAAE,EAGEvB,KAAKqB,SAAWZ,EAAGe,kBAAkBJ,EAASF,EAAKO,oBACnDzB,KAAKsB,KAAOb,EAAGe,kBAAkBJ,EAASF,EAAKQ,kBAC/C1B,KAAKuB,GAAKd,EAAGe,kBAAkBJ,EAASF,EAAKS,aACjD,EAGG,MAAMC,EAOT/B,YAAYY,EAA4BW,GAAwB,KALhES,iBAAW,OACXC,iBAAW,OACXC,kBAAY,OACZC,iBAAW,EAGPhC,KAAK6B,YAAcpB,EAAGwB,mBAAmBb,EAAS,YAClDpB,KAAK8B,YAAcrB,EAAGwB,mBAAmBb,EAAS,aAClDpB,KAAK+B,aAAetB,EAAGwB,mBAAmBb,EAAS,iBACnDpB,KAAKgC,YAAcvB,EAAGwB,mBAAmBb,EAAS,WACtD,EAGG,MAAMc,EAWTrC,YAAYY,EAA4B0B,EAAuBC,GAAsD,IAA/BC,IAAqB,yDAKvG,GAL8G,KATlH5B,QAAE,OACFW,aAAO,OAEPkB,eAAS,OACTC,gBAAU,OAEVC,aAAO,OACPC,aAAO,EAGHzC,KAAKS,GAAKA,EACVT,KAAKwC,QAAUjC,EAAcmC,aAAajC,EAAIA,EAAGkC,cAAyCR,GAC1FnC,KAAKyC,QAAUlC,EAAcmC,aAAajC,EAAIA,EAAGmC,gBAA2CR,GAExFpC,KAAKwC,SAAWxC,KAAKyC,QAAS,CAC9B,IAAIrB,EAAUb,EAAcsC,cAAcpC,EAAIT,KAAKwC,QAASxC,KAAKyC,QAASJ,GAE1E,OAAIjB,GACApB,KAAKoB,QAAUA,EACfX,EAAGqC,WAAW9C,KAAKoB,SACnBpB,KAAKsC,UAAY,IAAInB,EAAgBV,EAAIT,KAAKoB,cAC9CpB,KAAKuC,WAAa,IAAIX,EAAiBnB,EAAIT,KAAKoB,gBAIhD2B,QAAQC,MAAM,+BAEtB,CACID,QAAQC,MAAM,+BAGtB,CAIAC,WACsC,OAAlCjD,KAAKS,GAAGqC,WAAW9C,KAAKoB,SAAiBpB,IAC7C,CACAkD,aAC8B,OAA1BlD,KAAKS,GAAGqC,WAAW,MAAc9C,IACrC,CAGAmD,UAEQnD,KAAKS,GAAG2C,aAAapD,KAAKS,GAAG4C,mBAAqBrD,KAAKoB,SAAWpB,KAAKS,GAAGqC,WAAW,MACzF9C,KAAKS,GAAG6C,cAActD,KAAKoB,QAC/B,CACAmC,eAAeC,GAEX,OADAxD,KAAKS,GAAGgD,iBAAiBzD,KAAKuC,WAAWV,aAAa,EAAO2B,GACtDxD,IACX,CACA0D,eAAeF,GAEX,OADAxD,KAAKS,GAAGgD,iBAAiBzD,KAAKuC,WAAWT,aAAa,EAAO0B,GACtDxD,IACX,CACA2D,gBAAgBH,GAEZ,OADAxD,KAAKS,GAAGgD,iBAAiBzD,KAAKuC,WAAWR,cAAc,EAAOyB,GACvDxD,IACX,CAKA4D,YACI,CAGJC,YAAYC,GAkBR,OAjBA9D,KAAK0D,eAAeI,EAAMC,UAAUC,iBACpChE,KAAKS,GAAGwD,gBAAgBH,EAAMI,IAAIA,KAE9BJ,EAAMI,IAAIC,WAAanE,KAAKS,GAAG2D,QAAQpE,KAAKS,GAAG4D,WAC/CP,EAAMI,IAAII,YAActE,KAAKS,GAAG8D,OAAOvE,KAAKS,GAAG+D,OAE/CV,EAAMI,IAAIO,WAEVzE,KAAKS,GAAGiE,aAAaZ,EAAMI,IAAIS,SAAUb,EAAMI,IAAIO,WAAYzE,KAAKS,GAAGmE,eAAgB,GAEvF5E,KAAKS,GAAGoE,WAAWf,EAAMI,IAAIS,SAAU,EAAGb,EAAMI,IAAIY,aAGxD9E,KAAKS,GAAGwD,gBAAgB,MACpBH,EAAMI,IAAIC,WAAanE,KAAKS,GAAG8D,OAAOvE,KAAKS,GAAG4D,WAC9CP,EAAMI,IAAII,YAActE,KAAKS,GAAG2D,QAAQpE,KAAKS,GAAG+D,OAE7CxE,IAEX,EAGG,MAAMO,EACTwE,qBAAqBtE,EAA4BuE,EAA2BC,GAAiF,IAApD5C,IAAqB,yDAC1H,MAAMjB,EAAUX,EAAGyE,gBACnB,GAAgB,OAAZ9D,EAAoB,OAAO,KAW/B,GAVAX,EAAG0E,aAAa/D,EAAS4D,GACzBvE,EAAG0E,aAAa/D,EAAS6D,GAEzBxE,EAAG2E,mBAAmBhE,EAASF,EAAKmE,kBAAmBnE,EAAKO,oBAC5DhB,EAAG2E,mBAAmBhE,EAASF,EAAKoE,gBAAiBpE,EAAKQ,kBAC1DjB,EAAG2E,mBAAmBhE,EAASF,EAAKqE,YAAarE,EAAKS,cAEtDlB,EAAG+E,YAAYpE,IAGVX,EAAGgF,oBAAoBrE,EAASX,EAAGiF,aAAc,CAClD,MAAM1C,EAAQvC,EAAGkF,kBAAkBvE,GAKnC,OAJA2B,QAAQ6C,IAAI,2BAA6B5C,GACzCvC,EAAG6C,cAAclC,GACjBX,EAAGoF,aAAaZ,GAChBxE,EAAGoF,aAAab,GACT,IACX,CACA,OAAI3C,IACA5B,EAAGqF,gBAAgB1E,IACdX,EAAGgF,oBAAoBrE,EAASX,EAAGsF,mBACpChD,QAAQC,MAAM,6BAA8BvC,EAAGkF,kBAAkBvE,IACjEX,EAAG6C,cAAclC,GACjBX,EAAGoF,aAAaZ,GAChBxE,EAAGoF,aAAab,GACT,OAGfvE,EAAGoF,aAAaZ,GAChBxE,EAAGoF,aAAab,GACT5D,EACX,CACA2D,oBAAoBtE,EAA4BuF,EAAmBC,GAE/D,MAAMC,EAASzF,EAAG0F,aAAaH,GAC/B,GAAe,OAAXE,EAAmB,OAAO,KAC9BzF,EAAG2F,aAAaF,EAAQD,GACxBxF,EAAG4F,cAAcH,GAEjB,OADYzF,EAAG6F,mBAAmBJ,EAAQzF,EAAG8F,gBAC3BL,GAClBnD,QAAQ6C,IAAInF,EAAG+F,iBAAiBN,IAChCzF,EAAGoF,aAAaK,GACT,KACX,CACAnB,mBAAmBtE,EAA4BK,EAAuB2F,GAClE,IAAIC,EAAMjG,EAAGkG,gBAeb,OAdgB,IAAZF,GAAoBhG,EAAGmG,YAAYnG,EAAGoG,oBAAqB,GAE/DpG,EAAGqG,YAAYrG,EAAGsG,WAAYL,GAC9BjG,EAAGuG,WAAWvG,EAAGsG,WAAY,EAAGtG,EAAGwG,KAAMxG,EAAGwG,KAAMxG,EAAGyG,cAAepG,GAEpEL,EAAG0G,cAAc1G,EAAGsG,WAAYtG,EAAG2G,mBAAoB3G,EAAG4G,QAC1D5G,EAAG0G,cAAc1G,EAAGsG,WAAYtG,EAAG6G,mBAAoB7G,EAAG8G,uBAC1D9G,EAAG+G,eAAe/G,EAAGsG,YAErBtG,EAAGqG,YAAYrG,EAAGsG,WAAY,OAId,IAAZN,GAAoBhG,EAAGmG,YAAYnG,EAAGoG,oBAAqB,GACxDH,CACX,E","sources":["njslab/LabStarter/AppNGL3d/NGL3dApp_09/Core/Texture.ts","njslab/LabStarter/AppNGL3d/NGL3dApp_09/WebGL/Shader.ts"],"sourcesContent":["import { NGL3dApp } from '..';\r\n\r\nimport { ShaderUtility } from '../WebGL/Shader';\r\n\r\nexport const uvGrid = require('../Asset/UV_Grid_Lrg.jpg');\r\n\r\nexport class Texture {\r\n    app: NGL3dApp;\r\n\r\n    uvGridWebGLTexture: WebGLTexture;\r\n\r\n    constructor(app: NGL3dApp) {\r\n        this.app = app;\r\n\r\n    }\r\n    async UploadTexture(path: string) {\r\n        // tslint:disable-next-line:no-any\r\n        return this.LoadTexture(path).then((imgPath: any) => {\r\n            const webGLTex = ShaderUtility.LoadTexture(this.app.canvas.gl, imgPath, false);\r\n            if (webGLTex) {\r\n                this.uvGridWebGLTexture = webGLTex;\r\n            }\r\n        });\r\n    }\r\n    private async LoadTexture(src: string) {\r\n        return new Promise((resolve, reject) => {\r\n            let img = new Image();\r\n            img.onload = () => resolve(img);\r\n            img.onerror = reject;\r\n            img.src = src;\r\n        });\r\n    }\r\n}","//  import { GLShaderCommon } from '../Utility/GLShaderCommon';\r\nimport { Model } from './Model';\r\n\r\nexport enum ATTR {\r\n    ATTR_POSITION_NAME = 'a_position',\r\n    ATTR_POSITION_LOC = 0,\r\n\r\n    ATTR_NORMAL_NAME = 'a_norm',\r\n    ATTR_NORMAL_LOC = 1,\r\n\r\n    ATTR_UV_NAME = 'a_uv',\r\n    ATTR_UV_LOC = 2,\r\n\r\n    ATTR_COLOR_NAME = 'a_color',\r\n    ATTR_COLOR_LOC = 4,\r\n}\r\n\r\nexport class AttribLocations {\r\n\r\n    position: number;\r\n    norm: number;\r\n    uv: number;\r\n\r\n    constructor(gl: WebGL2RenderingContext, program: WebGLProgram) {\r\n        this.position = gl.getAttribLocation(program, ATTR.ATTR_POSITION_NAME);\r\n        this.norm = gl.getAttribLocation(program, ATTR.ATTR_NORMAL_NAME);\r\n        this.uv = gl.getAttribLocation(program, ATTR.ATTR_UV_NAME);\r\n    }\r\n}\r\n\r\nexport class UniformLocations {\r\n\r\n    perspective: WebGLUniformLocation | null;\r\n    modelMatrix: WebGLUniformLocation | null;\r\n    cameraMatrix: WebGLUniformLocation | null;\r\n    mainTexture: WebGLUniformLocation | null;\r\n\r\n    constructor(gl: WebGL2RenderingContext, program: WebGLProgram) {\r\n        this.perspective = gl.getUniformLocation(program, 'uPMatrix');\r\n        this.modelMatrix = gl.getUniformLocation(program, 'uMVMatrix');\r\n        this.cameraMatrix = gl.getUniformLocation(program, 'uCameraMatrix');\r\n        this.mainTexture = gl.getUniformLocation(program, 'uMainTex');\r\n    }\r\n}\r\n\r\nexport class Shader {\r\n\r\n    gl: WebGL2RenderingContext;\r\n    program: WebGLProgram | null;\r\n\r\n    attribLoc: AttribLocations;\r\n    uniformLoc: UniformLocations;\r\n\r\n    vShader: WebGLShader | null;\r\n    fShader: WebGLShader | null;\r\n\r\n    constructor(gl: WebGL2RenderingContext, vertShaderSrc: string, fragShaderSrc: string, needValidate: boolean = true) {\r\n        this.gl = gl;\r\n        this.vShader = ShaderUtility.CreateShader(gl, gl.VERTEX_SHADER as unknown as WebGLShader, vertShaderSrc);\r\n        this.fShader = ShaderUtility.CreateShader(gl, gl.FRAGMENT_SHADER as unknown as WebGLShader, fragShaderSrc);\r\n\r\n        if (this.vShader && this.fShader) {\r\n            let program = ShaderUtility.CreateProgram(gl, this.vShader, this.fShader, needValidate);\r\n\r\n            if (program) {\r\n                this.program = program;\r\n                gl.useProgram(this.program);\r\n                this.attribLoc = new AttribLocations(gl, this.program);\r\n                this.uniformLoc = new UniformLocations(gl, this.program);\r\n                return;\r\n\r\n            } else {\r\n                console.error('vertex fragment shader error'); return;\r\n            }\r\n        } else {\r\n            console.error('vertex fragment shader error'); return;\r\n        }\r\n        // Note :: Extended shaders should deactivate shader when done calling super and setting up custom parts in the constructor.\r\n    }\r\n\r\n    // ...................................................\r\n    // Methods\r\n    activate() {\r\n        this.gl.useProgram(this.program); return this;\r\n    }\r\n    deactivate() {\r\n        this.gl.useProgram(null); return this;\r\n    }\r\n\r\n    // function helps clean up resources when shader is no longer needed.\r\n    dispose() {\r\n        // unbind the program if its currently active\r\n        if (this.gl.getParameter(this.gl.CURRENT_PROGRAM) === this.program) { this.gl.useProgram(null); }\r\n        this.gl.deleteProgram(this.program);\r\n    }\r\n    setPerspective(matData: Float32Array) {\r\n        this.gl.uniformMatrix4fv(this.uniformLoc.perspective, false, matData);\r\n        return this;\r\n    }\r\n    setModelMatrix(matData: Float32Array) {\r\n        this.gl.uniformMatrix4fv(this.uniformLoc.modelMatrix, false, matData);\r\n        return this;\r\n    }\r\n    setCameraMatrix(matData: Float32Array) {\r\n        this.gl.uniformMatrix4fv(this.uniformLoc.cameraMatrix, false, matData);\r\n        return this;\r\n    }\r\n    // ...................................................\r\n    // RENDER RELATED METHODS\r\n\r\n    // Setup custom properties\r\n    preRender() {\r\n        //\r\n    }\r\n    // Handle rendering a model\r\n    renderModel(model: Model) {\r\n        this.setModelMatrix(model.transform.getViewMatrix());\t// Set the transform, so the shader knows where the model exists in 3d space\r\n        this.gl.bindVertexArray(model.vao.vao);\t// Enable VAO, this will set all the predefined attributes for the shader\r\n\r\n        if (model.vao.noCulling) { this.gl.disable(this.gl.CULL_FACE); }\r\n        if (model.vao.doBlending) { this.gl.enable(this.gl.BLEND); }\r\n\r\n        if (model.vao.indexCount) {\r\n            // console.log(model.vao.indexCount);\r\n            this.gl.drawElements(model.vao.drawMode, model.vao.indexCount, this.gl.UNSIGNED_SHORT, 0);\r\n        } else {\r\n            this.gl.drawArrays(model.vao.drawMode, 0, model.vao.vertexCount);\r\n        }\r\n\r\n        this.gl.bindVertexArray(null);\r\n        if (model.vao.noCulling) { this.gl.enable(this.gl.CULL_FACE); }\r\n        if (model.vao.doBlending) { this.gl.disable(this.gl.BLEND); }\r\n\r\n        return this;\r\n\r\n    }\r\n}\r\n\r\nexport class ShaderUtility {\r\n    static CreateProgram(gl: WebGL2RenderingContext, vertexShader: WebGLShader, fragmentShader: WebGLShader, needValidate: boolean = true): WebGLProgram | null {\r\n        const program = gl.createProgram();\r\n        if (program === null) { return null; }\r\n        gl.attachShader(program, vertexShader);\r\n        gl.attachShader(program, fragmentShader);\r\n\r\n        gl.bindAttribLocation(program, ATTR.ATTR_POSITION_LOC, ATTR.ATTR_POSITION_NAME);\r\n        gl.bindAttribLocation(program, ATTR.ATTR_NORMAL_LOC, ATTR.ATTR_NORMAL_NAME);\r\n        gl.bindAttribLocation(program, ATTR.ATTR_UV_LOC, ATTR.ATTR_UV_NAME);\r\n\r\n        gl.linkProgram(program);\r\n\r\n        // Check that shader program was able to link to WebGL\r\n        if (!gl.getProgramParameter(program, gl.LINK_STATUS)) {\r\n            const error = gl.getProgramInfoLog(program);\r\n            console.log('Failed to link program: ' + error);\r\n            gl.deleteProgram(program);\r\n            gl.deleteShader(fragmentShader);\r\n            gl.deleteShader(vertexShader);\r\n            return null;\r\n        }\r\n        if (needValidate) {\r\n            gl.validateProgram(program);\r\n            if (!gl.getProgramParameter(program, gl.VALIDATE_STATUS)) {\r\n                console.error('Failed to validate program', gl.getProgramInfoLog(program));\r\n                gl.deleteProgram(program);\r\n                gl.deleteShader(fragmentShader);\r\n                gl.deleteShader(vertexShader);\r\n                return null;\r\n            }\r\n        }\r\n        gl.deleteShader(fragmentShader);\r\n        gl.deleteShader(vertexShader);\r\n        return program;\r\n    }\r\n    static CreateShader(gl: WebGL2RenderingContext, type: WebGLShader, shaderString: string) {\r\n        // console.log(type);\r\n        const shader = gl.createShader(type as unknown as number);\r\n        if (shader === null) { return null; }\r\n        gl.shaderSource(shader, shaderString);\r\n        gl.compileShader(shader);\r\n        const suc = gl.getShaderParameter(shader, gl.COMPILE_STATUS);\r\n        if (suc) { return shader; }\r\n        console.log(gl.getShaderInfoLog(shader));\r\n        gl.deleteShader(shader);\r\n        return null;\r\n    }\r\n    static LoadTexture(gl: WebGL2RenderingContext, img: HTMLImageElement, doYFlip: boolean) {\r\n        let tex = gl.createTexture();\r\n        if (doYFlip === true) { gl.pixelStorei(gl.UNPACK_FLIP_Y_WEBGL, 1); } // true); }\t// Flip the texture by the Y Position, So 0,0 is bottom left corner.\r\n\r\n        gl.bindTexture(gl.TEXTURE_2D, tex);\t\t\t\t\t\t\t\t\t\t\t\t\t\t// Set text buffer for work\r\n        gl.texImage2D(gl.TEXTURE_2D, 0, gl.RGBA, gl.RGBA, gl.UNSIGNED_BYTE, img);\t\t\t// Push image to GPU.\r\n\r\n        gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, gl.LINEAR);\t\t\t\t\t// Setup up scaling\r\n        gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl.LINEAR_MIPMAP_NEAREST);\t// Setup down scaling\r\n        gl.generateMipmap(gl.TEXTURE_2D);\t// Precalc different sizes of texture for better quality rendering.\r\n\r\n        gl.bindTexture(gl.TEXTURE_2D, null); // Unbind\r\n\r\n        // gl.mTextureCache[name] = tex;\t\t\t\t\t\t\t\t\t\t\t// Save ID for later unloading\r\n\r\n        if (doYFlip === true) { gl.pixelStorei(gl.UNPACK_FLIP_Y_WEBGL, 1); }\t// Stop flipping textures\r\n        return tex;\r\n    }\r\n}"],"names":["uvGrid","require","Texture","constructor","app","uvGridWebGLTexture","this","async","path","LoadTexture","then","imgPath","webGLTex","ShaderUtility","canvas","gl","src","Promise","resolve","reject","img","Image","onload","onerror","ATTR","AttribLocations","program","position","norm","uv","getAttribLocation","ATTR_POSITION_NAME","ATTR_NORMAL_NAME","ATTR_UV_NAME","UniformLocations","perspective","modelMatrix","cameraMatrix","mainTexture","getUniformLocation","Shader","vertShaderSrc","fragShaderSrc","needValidate","attribLoc","uniformLoc","vShader","fShader","CreateShader","VERTEX_SHADER","FRAGMENT_SHADER","CreateProgram","useProgram","console","error","activate","deactivate","dispose","getParameter","CURRENT_PROGRAM","deleteProgram","setPerspective","matData","uniformMatrix4fv","setModelMatrix","setCameraMatrix","preRender","renderModel","model","transform","getViewMatrix","bindVertexArray","vao","noCulling","disable","CULL_FACE","doBlending","enable","BLEND","indexCount","drawElements","drawMode","UNSIGNED_SHORT","drawArrays","vertexCount","static","vertexShader","fragmentShader","createProgram","attachShader","bindAttribLocation","ATTR_POSITION_LOC","ATTR_NORMAL_LOC","ATTR_UV_LOC","linkProgram","getProgramParameter","LINK_STATUS","getProgramInfoLog","log","deleteShader","validateProgram","VALIDATE_STATUS","type","shaderString","shader","createShader","shaderSource","compileShader","getShaderParameter","COMPILE_STATUS","getShaderInfoLog","doYFlip","tex","createTexture","pixelStorei","UNPACK_FLIP_Y_WEBGL","bindTexture","TEXTURE_2D","texImage2D","RGBA","UNSIGNED_BYTE","texParameteri","TEXTURE_MAG_FILTER","LINEAR","TEXTURE_MIN_FILTER","LINEAR_MIPMAP_NEAREST","generateMipmap"],"sourceRoot":""}