{"version":3,"file":"static/js/20605.db1f7bbc.chunk.js","mappings":"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","sources":["njslab/LabStarter/AppNGL3d/NGL3dApp_05/Geometry/Core/Base.ts","njslab/LabStarter/AppNGL3d/NGL3dApp_05/Geometry/Primatives/GridAxis.ts","njslab/LabStarter/AppNGL3d/NGL3dApp_05/Utility/GLShaderCommon.ts","njslab/LabStarter/AppNGL3d/NGL3dApp_05/Utility/Matrix4.ts","njslab/LabStarter/AppNGL3d/NGL3dApp_05/Utility/Vector3.ts","njslab/LabStarter/AppNGL3d/NGL3dApp_05/WebGL/AttribLocations.ts","njslab/LabStarter/AppNGL3d/NGL3dApp_05/WebGL/Modal.ts","njslab/LabStarter/AppNGL3d/NGL3dApp_05/WebGL/Shader.ts","njslab/LabStarter/AppNGL3d/NGL3dApp_05/WebGL/Transform.ts","njslab/LabStarter/AppNGL3d/NGL3dApp_05/WebGL/VAO.ts"],"sourcesContent":["import { Scene } from '../../Core/Scene';\r\n\r\nexport class GeometryBase {\r\n    scene: Scene;\r\n    constructor(scene: Scene) {\r\n        this.scene = scene;\r\n\r\n        this.scene.add(this);\r\n    }\r\n    render(gl: WebGL2RenderingContext) {\r\n        //\r\n    }\r\n}","\r\nimport { RTN } from '../../WebGL/VAO';\r\nimport { Modal } from '../../WebGL/Modal';\r\nimport { Shader } from '../../WebGL/Shader';\r\n\r\nimport { NGL3dApp } from '../..';\r\nimport { GeometryBase } from '../Core/Base';\r\nimport { ATTR } from '../../WebGL/AttribLocations';\r\n// import { MeshCommon } from '../../WebGL/MeshCommon';\r\n\r\nclass GridAxisShader extends Shader {\r\n\r\n    constructor(gl: WebGL2RenderingContext, vertSrc: string, fragSrc: string, aryColor: number[]) {\r\n        super(gl, vertSrc, fragSrc);\t// Call the base class constructor which will setup most of what we need\r\n\r\n        // Our shader uses custom uniforms, this is the time to get its location for future use.\r\n        if (this.program) {\r\n            // this.uniformLoc.uPointSize = gl.getUniformLocation(this.program, 'uPointSize');\r\n            this.uniformLoc.uAngle = gl.getUniformLocation(this.program, 'uAngle');\r\n            let uColor = gl.getUniformLocation(this.program, 'uColor');\r\n            gl.uniform3fv(uColor, aryColor);\r\n        }\r\n        gl.useProgram(null); // Done setting up shader\r\n    }\r\n\r\n    // Simple function that passes in Angle and Pointsize uniform data to the shader program.\r\n    set(angle: number) {\r\n        this.gl.uniform1f(this.uniformLoc.uAngle, angle);\r\n        return this;\r\n    }\r\n    renderModal(modal: Modal) {\r\n        this.setModalMatrix(modal.transform.getViewMatrix());\t// Set the transform, so the shader knows where the modal exists in 3d space\r\n        this.gl.bindVertexArray(modal.mesh.vao);\t// Enable VAO, this will set all the predefined attributes for the shader\r\n\r\n        if (modal.mesh.indexCount) {\r\n            this.gl.drawElements(modal.mesh.drawMode, modal.mesh.indexCount, this.gl.UNSIGNED_SHORT, 0);\r\n        } else { this.gl.drawArrays(modal.mesh.drawMode, 0, modal.mesh.vertexCount); }\r\n\r\n        this.gl.bindVertexArray(null);\r\n\r\n        return this;\r\n    }\r\n}\r\nexport class GridAxis extends GeometryBase {\r\n    v = `#version 300 es\r\n    in vec3 a_position;\t//Standard position data.\r\n    layout(location=4) in float a_color;\t//Will hold the 4th custom position of the custom position buffer.\r\n\r\n    uniform mat4 uMVMatrix;\r\n    uniform vec3 uColor[4];\t//Color Array\r\n\r\n    out lowp vec4 color;\t//Color to send to fragment shader.\r\n\r\n    void main(void) {\r\n        color = vec4(uColor[ int(a_color) ],1.0); //Using the 4th float as a color index.\r\n        gl_Position = uMVMatrix * vec4(a_position, 1.0);\r\n    }\r\n    `;\r\n    f = `#version 300 es\r\n    precision mediump float;\r\n\r\n    in vec4 color;\r\n    out vec4 finalColor;\r\n\r\n    void main(void) { finalColor = color; }\r\n    `;\r\n    app: NGL3dApp;\r\n    gl: WebGL2RenderingContext;\r\n\r\n    mesh: RTN;\r\n    modal: Modal;\r\n    shader: GridAxisShader;\r\n\r\n    ro: number = 0;\r\n    t: number = 0.0;\r\n    constructor(app: NGL3dApp) {\r\n        super(app.scene);\r\n        this.app = app;\r\n        this.gl = app.canvas.gl;\r\n        this.initShader(this.gl);\r\n    }\r\n    GetVAO() {\r\n        let verts = [],\r\n            size = 1.8,\t\t\t// W/H of the outer box of the grid, from origin we can only go 1 unit in each direction, so from left to right is 2 units max\r\n            div = 10.0,\t\t\t// How to divide up the grid\r\n            step = size / div,\t// Steps between each line, just a number we increment by for each line in the grid.\r\n            half = size / 2;\t// From origin the starting position is half the size.\r\n\r\n        let p;\t// Temp letiable for position value.\r\n        for (let i = 0; i <= div; i++) {\r\n            // Vertical line\r\n            p = -half + (i * step);\r\n            verts.push(p);\t\t// x1\r\n            verts.push(half);\t// y1\r\n            verts.push(0);\t\t// z1\r\n            verts.push(0);\t\t// c2\r\n\r\n            verts.push(p);\t\t// x2\r\n            verts.push(-half);\t// y2\r\n            verts.push(0);\t\t// z2\r\n            verts.push(1);\t\t// c2\r\n\r\n            // Horizontal line\r\n            p = half - (i * step);\r\n            verts.push(-half);\t// x1\r\n            verts.push(p);\t\t// y1\r\n            verts.push(0);\t\t// z1\r\n            verts.push(0);\t\t// c1\r\n\r\n            verts.push(half);\t// x2\r\n            verts.push(p);\t\t// y2\r\n            verts.push(0);\t\t// z2\r\n            verts.push(1);\t\t// c2\r\n        }\r\n\r\n        // TODO : Remove the following, its only to demo extra lines can be thrown in.\r\n        verts.push(-half);\t// x1\r\n        verts.push(-half);\t// y1\r\n        verts.push(0);\t\t// z1\r\n        verts.push(2);\t\t// c2\r\n\r\n        verts.push(half);\t// x2\r\n        verts.push(half);\t// y2\r\n        verts.push(0);\t\t// z2\r\n        verts.push(2);\t\t// c2\r\n\r\n        verts.push(-half);\t// x1\r\n        verts.push(half);\t// y1\r\n        verts.push(0);\t\t// z1\r\n        verts.push(3);\t\t// c2\r\n\r\n        verts.push(half);\t// x2\r\n        verts.push(-half);\t// y2\r\n        verts.push(0);\t\t// z2\r\n        verts.push(3);\t\t// c2\r\n\r\n        // Setup\r\n        // let attrColorLoc = 4;\r\n        this.mesh = new RTN(); // { drawMode:gl.LINES, vao:gl.createVertexArray() };\r\n        this.mesh.drawMode = this.gl.LINES;\r\n        this.mesh.vao = this.gl.createVertexArray();\r\n\r\n        // Do some math\r\n        this.mesh.vertexComponentLen = 4;\r\n        this.mesh.vertexCount = verts.length / this.mesh.vertexComponentLen;\r\n        let strideLen = Float32Array.BYTES_PER_ELEMENT * this.mesh.vertexComponentLen; // Stride Length is the Vertex Size for the buffer in Bytes\r\n\r\n        // Setup our Buffer\r\n        this.mesh.bufVertices = this.gl.createBuffer();\r\n        this.gl.bindVertexArray(this.mesh.vao);\r\n        this.gl.bindBuffer(this.gl.ARRAY_BUFFER, this.mesh.bufVertices);\r\n        this.gl.bufferData(this.gl.ARRAY_BUFFER, new Float32Array(verts), this.gl.STATIC_DRAW);\r\n        this.gl.enableVertexAttribArray(ATTR.ATTR_POSITION_LOC);\r\n        this.gl.enableVertexAttribArray(ATTR.ATTR_COLOR_LOC);\r\n\r\n        this.gl.vertexAttribPointer(\r\n            ATTR.ATTR_POSITION_LOC\t\t\t\t\t\t// Attribute Location\r\n            , 3\t\t\t\t\t\t\t\t\t\t// How big is the vector by number count\r\n            , this.gl.FLOAT \t\t\t\t\t\t\t\t// What type of number we passing in\r\n            , false\t\t\t\t\t\t\t\t\t// Does it need to be normalized?\r\n            , strideLen\t\t\t\t\t\t\t\t// How big is a vertex chunk of data.\r\n            , 0\t\t\t\t\t\t\t\t\t\t// Offset by how much\r\n        );\r\n\r\n        this.gl.vertexAttribPointer(\r\n            ATTR.ATTR_COLOR_LOC\t\t\t\t\t\t\t// new shader has \"in float a_color\" as the second attrib\r\n            , 1\t\t\t\t\t\t\t\t\t\t// This atttrib is just a single float\r\n            , this.gl.FLOAT\r\n            , false\r\n            , strideLen\t\t\t\t\t\t\t\t// Each vertex chunk is 4 floats long\r\n            , Float32Array.BYTES_PER_ELEMENT * 3\t\t// skip first 3 floats in our vertex chunk, its like str.substr(3,1) in theory.\r\n        );\r\n\r\n        // Cleanup and Finalize\r\n        this.gl.bindVertexArray(null);\r\n        this.gl.bindBuffer(this.gl.ARRAY_BUFFER, null);\r\n        // this.gl.mMeshCache[\"grid\"] = this.mesh;\r\n        return this.mesh;\r\n    }\r\n    initShader(gl: WebGL2RenderingContext) {\r\n        const col = [0.8, 0.8, 0.8, 1, 0, 0, 0, 1, 0, 0, 0, 1];\r\n        this.shader = new GridAxisShader(gl, this.v, this.f, col);\r\n        this.mesh = this.GetVAO();\r\n        this.modal = new Modal(this.mesh);\r\n    }\r\n    render(gl: WebGL2RenderingContext) {\r\n        // his.shader.activate();\r\n        // this.ro += 0.04;\r\n        // this.shader.set(this.ro);\r\n        // this.shader.renderModal(this.modal);\r\n\r\n        let p = this.modal.transform.position;\t\t// Just an pointer to transform position, make code smaller\r\n        console.log(p);\r\n        let angle = Math.atan2(p.y, p.x) + (1 * this.t);\t\t// Calc the current angle plus 1 degree per second rotation\r\n        let radius = Math.sqrt(p.x * p.x + p.y * p.y);\t// Calc the distance from origin.\r\n        let scale = Math.max(0.2, Math.abs(Math.sin(angle)) * 1.2);   // Just messing with numbers and seeing what happens :)\r\n\r\n        console.log(angle, radius);\r\n        // -- Code Style One : Traditional --\r\n        this.modal.setScale(scale, scale, 1);\r\n        this.modal.setPosition(radius * Math.cos(angle), radius * Math.sin(angle), 0);\r\n        this.modal.transform.rotation.z += 15 * this.t;\r\n        this.modal.transform.rotation.x += 30 * this.t;\r\n        this.modal.transform.rotation.y += 60 * this.t;\r\n        this.shader.activate().renderModal(this.modal.preRender());\r\n\r\n        // -- Code Style Two : Chaining --\r\n        // this.shader.activate().renderModal(\r\n        //     this.modal.setScale( scale, scale / 4, 1)\r\n        //             .setPosition( radius * Math.cos(angle), radius * Math.sin(angle), 0 )\r\n        //             .addRotation( 30 * this.t, 60 * this.t, 15 * this.t )\r\n        //             .preRender()\r\n        // );\r\n        this.t = 0.01;\r\n        // console.log(this.t);\r\n    }\r\n}","\r\nexport class GLShaderCommon {\r\n\r\n    static getShaderProgram(gl: WebGL2RenderingContext, vertexShader: string, fragmentShader: string, needValidate: boolean = true) {\r\n        let vShader = GLShaderCommon.createShader(gl, gl.VERTEX_SHADER as unknown as WebGLShader, vertexShader);\r\n        let fShader = GLShaderCommon.createShader(gl, gl.FRAGMENT_SHADER as unknown as WebGLShader, fragmentShader);\r\n        if (vShader && fShader ) { \r\n            let program = GLShaderCommon.createProgram(gl, vShader, fShader, needValidate);\r\n\r\n            if (program) {\r\n                return program;\r\n\r\n            } else {\r\n                console.error('vertex fragment shader error'); return null;\r\n            }\r\n        } else { \r\n            console.error('vertex fragment shader error'); return null;\r\n        }\r\n    }\r\n    static getShader(gl: WebGL2RenderingContext, type: number, source: string) {\r\n        const shader = gl.createShader(type);\r\n        if (shader === null) {return null; }\r\n        gl.shaderSource(shader, source);\r\n        gl.compileShader(shader);\r\n\r\n        // Check if compiled successfully\r\n        if (!gl.getShaderParameter(shader, gl.COMPILE_STATUS)) {\r\n            console.log('An error occurred compiling the shaders:' + gl.getShaderInfoLog(shader));\r\n            gl.deleteShader(shader);\r\n            return null;\r\n        }\r\n        // Set the attributes, varying, and uniform to shader\r\n        // shader.attributes = this.attributesFromSource(source);\r\n        // shader.varyings = this.varyingsFromSource(source);\r\n        // shader.uniforms = this.uniformsFromSource(source);\r\n        return shader;\r\n    }\r\n    static createProgram(gl: WebGL2RenderingContext, vertexShader: WebGLShader, fragmentShader: WebGLShader, needValidate: boolean = true): WebGLProgram | null {\r\n        const program = gl.createProgram();\r\n        if (program === null ) {return null; }\r\n        gl.attachShader(program, vertexShader);\r\n        gl.attachShader(program, fragmentShader);\r\n        gl.linkProgram(program);\r\n\r\n        // Check that shader program was able to link to WebGL\r\n        if (!gl.getProgramParameter(program, gl.LINK_STATUS)) {\r\n            const error = gl.getProgramInfoLog(program);\r\n            console.log('Failed to link program: ' + error);\r\n            gl.deleteProgram(program);\r\n            gl.deleteShader(fragmentShader);\r\n            gl.deleteShader(vertexShader);\r\n            return null;\r\n        }\r\n        if (needValidate) {\r\n            gl.validateProgram(program);\r\n            if (!gl.getProgramParameter(program, gl.VALIDATE_STATUS)) {\r\n                console.error('Failed to validate program', gl.getProgramInfoLog(program));\r\n                gl.deleteProgram(program);\r\n                gl.deleteShader(fragmentShader);\r\n                gl.deleteShader(vertexShader);\r\n                return null;\r\n            }\r\n        }\r\n        gl.deleteShader(fragmentShader);\r\n        gl.deleteShader(vertexShader);\r\n        return program;\r\n    }\r\n\r\n    // ...............................\r\n\r\n    // static CreateShader(gl: WebGL2RenderingContext, type: WebGLShader, shaderString: string) {\r\n    //     let shader = gl.createShader(type as number);\r\n    //     gl.shaderSource(shader, shaderString);\r\n    //     gl.compileShader(shader);\r\n    //     gl.getShaderParameter(shader, gl.COMPILE_STATUS);\r\n    //     return shader as Webglsh;\r\n    //     // console.log(gl.getShaderInfoLog(shader));\r\n    //     // gl.deleteShader(shader);\r\n    //     // return null;\r\n    // }\r\n    static createShader(gl: WebGL2RenderingContext, type: WebGLShader, shaderString: string) {\r\n        // console.log(type);\r\n        const shader = gl.createShader(type as unknown as number);\r\n        if (shader === null) {return null; }\r\n        gl.shaderSource(shader, shaderString);\r\n        gl.compileShader(shader);\r\n        const suc = gl.getShaderParameter(shader, gl.COMPILE_STATUS);\r\n        if (suc) { return shader; }\r\n        console.log(gl.getShaderInfoLog(shader));\r\n        gl.deleteShader(shader);\r\n        return null;\r\n    }\r\n    static createShaderFromPath(gl: WebGL2RenderingContext, type: WebGLShader, url: string) {\r\n        const shader = gl.createShader(type as unknown as number);\r\n        if (shader === null) {return null; }\r\n        gl.shaderSource(shader, GLShaderCommon.getSourceSynch(url) as string);\r\n        gl.compileShader(shader);\r\n        const suc = gl.getShaderParameter(shader, gl.COMPILE_STATUS);\r\n        if (suc) { return shader; }\r\n        console.log(gl.getShaderInfoLog(shader));\r\n        gl.deleteShader(shader);\r\n        return null;\r\n    }\r\n\r\n    static getSourceSynch(url: string) {\r\n        const req = new XMLHttpRequest();\r\n        req.open('GET', url, false);\r\n        req.send(null);\r\n        return (req.status === 200) ? req.responseText : null;\r\n    }\r\n\r\n    // static LoadTextResource(url: string, callback:(data: any, d2:any) => void ) {\r\n    //     let request = new XMLHttpRequest();\r\n    //     request.open('GET', url + '?please-dont-cache=' + Math.random(), true);\r\n    //     request.onload = function () {\r\n    //         if (request.status < 200 || request.status > 299) {\r\n    //             callback('Error: HTTP Status ' + request.status + ' on resource ' + url);\r\n    //         } else {\r\n    //             callback(null, request.responseText);\r\n    //         }\r\n    //     };\r\n    //     request.send();\r\n    // }\r\n    // static LoadShader(url: string, callback:(data: null, callback:string) => void ) {\r\n    //     GLUtility.LoadTextResource(url, callback);\r\n    // }\r\n    static loadImage(url: string, callback: (data: null, image: HTMLElement) => void) {\r\n        const image = new Image();\r\n        image.onload = function () {\r\n            callback(null, image);\r\n        };\r\n        image.src = url;\r\n    }\r\n    // static LoadJSONResource(url: string, callback:(data: string, callback:string) => void ) {\r\n    //     GLUtility.LoadTextResource(url, function (err: Error, result) {\r\n    //         if (err) {\r\n    //             callback(err);\r\n    //         } else {\r\n    //             try {\r\n    //                 callback(null, JSON.parse(result));\r\n    //             } catch (e) {\r\n    //                 callback(e);\r\n    //             }\r\n    //         }\r\n    //     });\r\n    // }\r\n}\r\n","import { Vector3 } from './Vector3';\r\n\r\nexport class Matrix4 {\r\n    raw: Float32Array;\r\n    // ....................................................................\r\n    // Static Data Methods\r\n    static identity() {\r\n        let a = new Float32Array(16);\r\n        a[0] = a[5] = a[10] = a[15] = 1;\r\n        return a;\r\n    }\r\n\r\n    // from glMatrix\r\n    static perspective(out: number[], fovy: number, aspect: number , near: number, far: number ) {\r\n        let f = 1.0 / Math.tan(fovy / 2), nf = 1 / (near - far);\r\n        out[0] = f / aspect;\r\n        out[1] = 0;\r\n        out[2] = 0;\r\n        out[3] = 0;\r\n        out[4] = 0;\r\n        out[5] = f;\r\n        out[6] = 0;\r\n        out[7] = 0;\r\n        out[8] = 0;\r\n        out[9] = 0;\r\n        out[10] = (far + near) * nf;\r\n        out[11] = -1;\r\n        out[12] = 0;\r\n        out[13] = 0;\r\n        out[14] = (2 * far * near) * nf;\r\n        out[15] = 0;\r\n    }\r\n\r\n    static ortho(out: number[], left: number, right: number, bottom: number, top: number, near: number, far: number) {\r\n        let lr = 1 / (left - right),\r\n            bt = 1 / (bottom - top),\r\n            nf = 1 / (near - far);\r\n        out[0] = -2 * lr;\r\n        out[1] = 0;\r\n        out[2] = 0;\r\n        out[3] = 0;\r\n        out[4] = 0;\r\n        out[5] = -2 * bt;\r\n        out[6] = 0;\r\n        out[7] = 0;\r\n        out[8] = 0;\r\n        out[9] = 0;\r\n        out[10] = 2 * nf;\r\n        out[11] = 0;\r\n        out[12] = (left + right) * lr;\r\n        out[13] = (top + bottom) * bt;\r\n        out[14] = (far + near) * nf;\r\n        out[15] = 1;\r\n    }\r\n    // https:// github.com/toji/gl-matrix/blob/master/src/gl-matrix/mat4.js\r\n    // make the rows into the columns\r\n    static transpose(out: number[], a: number[]) {\r\n        // If we are transposing ourselves we can skip a few steps but have to cache some values\r\n        if (out === a) {\r\n            let a01 = a[1], a02 = a[2], a03 = a[3], a12 = a[6], a13 = a[7], a23 = a[11];\r\n            out[1] = a[4];\r\n            out[2] = a[8];\r\n            out[3] = a[12];\r\n            out[4] = a01;\r\n            out[6] = a[9];\r\n            out[7] = a[13];\r\n            out[8] = a02;\r\n            out[9] = a12;\r\n            out[11] = a[14];\r\n            out[12] = a03;\r\n            out[13] = a13;\r\n            out[14] = a23;\r\n        } else {\r\n            out[0] = a[0];\r\n            out[1] = a[4];\r\n            out[2] = a[8];\r\n            out[3] = a[12];\r\n            out[4] = a[1];\r\n            out[5] = a[5];\r\n            out[6] = a[9];\r\n            out[7] = a[13];\r\n            out[8] = a[2];\r\n            out[9] = a[6];\r\n            out[10] = a[10];\r\n            out[11] = a[14];\r\n            out[12] = a[3];\r\n            out[13] = a[7];\r\n            out[14] = a[11];\r\n            out[15] = a[15];\r\n        }\r\n\r\n        return out;\r\n    }\r\n\r\n    // Calculates a 3x3 normal matrix (transpose inverse) from the 4x4 matrix\r\n    static normalMat3(out: Float32Array, a: Float32Array) {\r\n        let a00 = a[0], a01 = a[1], a02 = a[2], a03 = a[3],\r\n            a10 = a[4], a11 = a[5], a12 = a[6], a13 = a[7],\r\n            a20 = a[8], a21 = a[9], a22 = a[10], a23 = a[11],\r\n            a30 = a[12], a31 = a[13], a32 = a[14], a33 = a[15],\r\n\r\n            b00 = a00 * a11 - a01 * a10,\r\n            b01 = a00 * a12 - a02 * a10,\r\n            b02 = a00 * a13 - a03 * a10,\r\n            b03 = a01 * a12 - a02 * a11,\r\n            b04 = a01 * a13 - a03 * a11,\r\n            b05 = a02 * a13 - a03 * a12,\r\n            b06 = a20 * a31 - a21 * a30,\r\n            b07 = a20 * a32 - a22 * a30,\r\n            b08 = a20 * a33 - a23 * a30,\r\n            b09 = a21 * a32 - a22 * a31,\r\n            b10 = a21 * a33 - a23 * a31,\r\n            b11 = a22 * a33 - a23 * a32,\r\n\r\n        //  Calculate the determinant\r\n        det = b00 * b11 - b01 * b10 + b02 * b09 + b03 * b08 - b04 * b07 + b05 * b06;\r\n\r\n        if (!det) {return null; }\r\n\r\n        det = 1.0 / det;\r\n\r\n        out[0] = (a11 * b11 - a12 * b10 + a13 * b09) * det;\r\n        out[1] = (a12 * b08 - a10 * b11 - a13 * b07) * det;\r\n        out[2] = (a10 * b10 - a11 * b08 + a13 * b06) * det;\r\n\r\n        out[3] = (a02 * b10 - a01 * b11 - a03 * b09) * det;\r\n        out[4] = (a00 * b11 - a02 * b08 + a03 * b07) * det;\r\n        out[5] = (a01 * b08 - a00 * b10 - a03 * b06) * det;\r\n\r\n        out[6] = (a31 * b05 - a32 * b04 + a33 * b03) * det;\r\n        out[7] = (a32 * b02 - a30 * b05 - a33 * b01) * det;\r\n        out[8] = (a30 * b04 - a31 * b02 + a33 * b00) * det;\r\n        return out;\r\n    }\r\n\r\n    // ....................................................................\r\n    // Static Operation\r\n\r\n    // https:// github.com/gregtatum/mdn-model-view-projection/blob/master/shared/matrices.js\r\n    static multiplyVector(mat4: Matrix4 , v: number[]) {\r\n        let x = v[0], y = v[1], z = v[2], w = v[3];\r\n        let c1r1 = mat4[ 0], c2r1 = mat4[ 1], c3r1 = mat4[ 2], c4r1 = mat4[ 3],\r\n            c1r2 = mat4[ 4], c2r2 = mat4[ 5], c3r2 = mat4[ 6], c4r2 = mat4[ 7],\r\n            c1r3 = mat4[ 8], c2r3 = mat4[ 9], c3r3 = mat4[10], c4r3 = mat4[11],\r\n            c1r4 = mat4[12], c2r4 = mat4[13], c3r4 = mat4[14], c4r4 = mat4[15];\r\n\r\n        return [\r\n            x * c1r1 + y * c1r2 + z * c1r3 + w * c1r4,\r\n            x * c2r1 + y * c2r2 + z * c2r3 + w * c2r4,\r\n            x * c3r1 + y * c3r2 + z * c3r3 + w * c3r4,\r\n            x * c4r1 + y * c4r2 + z * c4r3 + w * c4r4\r\n        ];\r\n    }\r\n\r\n    // https:// github.com/toji/gl-matrix/blob/master/src/gl-matrix/vec4.js, vec4.transformMat4\r\n    static transformVec4(out: Float32Array, v: number[], m: Float32Array) {\r\n        out[0] = m[0] * v[0] + m[4] * v[1] + m[8]\t* v[2] + m[12] * v[3];\r\n        out[1] = m[1] * v[0] + m[5] * v[1] + m[9]\t* v[2] + m[13] * v[3];\r\n        out[2] = m[2] * v[0] + m[6] * v[1] + m[10]\t* v[2] + m[14] * v[3];\r\n        out[3] = m[3] * v[0] + m[7] * v[1] + m[11]\t* v[2] + m[15] * v[3];\r\n        return out;\r\n    }\r\n\r\n    // From glMatrix\r\n    // Multiple two mat4 together\r\n    static mult(out: Float32Array, a: Float32Array, b: Float32Array) { \r\n        let a00 = a[0], a01 = a[1], a02 = a[2], a03 = a[3],\r\n            a10 = a[4], a11 = a[5], a12 = a[6], a13 = a[7],\r\n            a20 = a[8], a21 = a[9], a22 = a[10], a23 = a[11],\r\n            a30 = a[12], a31 = a[13], a32 = a[14], a33 = a[15];\r\n\r\n        //  Cache only the current line of the second matrix\r\n        let b0  = b[0], b1 = b[1], b2 = b[2], b3 = b[3];\r\n        out[0] = b0 * a00 + b1 * a10 + b2 * a20 + b3 * a30;\r\n        out[1] = b0 * a01 + b1 * a11 + b2 * a21 + b3 * a31;\r\n        out[2] = b0 * a02 + b1 * a12 + b2 * a22 + b3 * a32;\r\n        out[3] = b0 * a03 + b1 * a13 + b2 * a23 + b3 * a33;\r\n\r\n        b0 = b[4]; b1 = b[5]; b2 = b[6]; b3 = b[7];\r\n        out[4] = b0 * a00 + b1 * a10 + b2 * a20 + b3 * a30;\r\n        out[5] = b0 * a01 + b1 * a11 + b2 * a21 + b3 * a31;\r\n        out[6] = b0 * a02 + b1 * a12 + b2 * a22 + b3 * a32;\r\n        out[7] = b0 * a03 + b1 * a13 + b2 * a23 + b3 * a33;\r\n\r\n        b0 = b[8]; b1 = b[9]; b2 = b[10]; b3 = b[11];\r\n        out[8] = b0 * a00 + b1 * a10 + b2 * a20 + b3 * a30;\r\n        out[9] = b0 * a01 + b1 * a11 + b2 * a21 + b3 * a31;\r\n        out[10] = b0 * a02 + b1 * a12 + b2 * a22 + b3 * a32;\r\n        out[11] = b0 * a03 + b1 * a13 + b2 * a23 + b3 * a33;\r\n\r\n        b0 = b[12]; b1 = b[13]; b2 = b[14]; b3 = b[15];\r\n        out[12] = b0 * a00 + b1 * a10 + b2 * a20 + b3 * a30;\r\n        out[13] = b0 * a01 + b1 * a11 + b2 * a21 + b3 * a31;\r\n        out[14] = b0 * a02 + b1 * a12 + b2 * a22 + b3 * a32;\r\n        out[15] = b0 * a03 + b1 * a13 + b2 * a23 + b3 * a33;\r\n        return out;\t\r\n    }\r\n\r\n    // ....................................................................\r\n    // Static Transformation\r\n    static scale(out: Float32Array, x: number, y: number, z: number) {\r\n        out[0] *= x;\r\n        out[1] *= x;\r\n        out[2] *= x;\r\n        out[3] *= x;\r\n        out[4] *= y;\r\n        out[5] *= y;\r\n        out[6] *= y;\r\n        out[7] *= y;\r\n        out[8] *= z;\r\n        out[9] *= z;\r\n        out[10] *= z;\r\n        out[11] *= z;\r\n        return out;\r\n    }\r\n\r\n    static rotateY(out: Float32Array, rad: number) {\r\n        let s = Math.sin(rad),\r\n            c = Math.cos(rad),\r\n            a00 = out[0],\r\n            a01 = out[1],\r\n            a02 = out[2],\r\n            a03 = out[3],\r\n            a20 = out[8],\r\n            a21 = out[9],\r\n            a22 = out[10],\r\n            a23 = out[11];\r\n\r\n        //  Perform axis-specific matrix multiplication\r\n        out[0] = a00 * c - a20 * s;\r\n        out[1] = a01 * c - a21 * s;\r\n        out[2] = a02 * c - a22 * s;\r\n        out[3] = a03 * c - a23 * s;\r\n        out[8] = a00 * s + a20 * c;\r\n        out[9] = a01 * s + a21 * c;\r\n        out[10] = a02 * s + a22 * c;\r\n        out[11] = a03 * s + a23 * c;\r\n        return out;\r\n    }\r\n\r\n    static rotateX(out: Float32Array, rad: number) {\r\n        let s = Math.sin(rad),\r\n            c = Math.cos(rad),\r\n            a10 = out[4],\r\n            a11 = out[5],\r\n            a12 = out[6],\r\n            a13 = out[7],\r\n            a20 = out[8],\r\n            a21 = out[9],\r\n            a22 = out[10],\r\n            a23 = out[11];\r\n\r\n        //  Perform axis-specific matrix multiplication\r\n        out[4] = a10 * c + a20 * s;\r\n        out[5] = a11 * c + a21 * s;\r\n        out[6] = a12 * c + a22 * s;\r\n        out[7] = a13 * c + a23 * s;\r\n        out[8] = a20 * c - a10 * s;\r\n        out[9] = a21 * c - a11 * s;\r\n        out[10] = a22 * c - a12 * s;\r\n        out[11] = a23 * c - a13 * s;\r\n        return out;\r\n    }\r\n\r\n    static rotateZ(out: Float32Array, rad: number) {\r\n        let s = Math.sin(rad),\r\n            c = Math.cos(rad),\r\n            a00 = out[0],\r\n            a01 = out[1],\r\n            a02 = out[2],\r\n            a03 = out[3],\r\n            a10 = out[4],\r\n            a11 = out[5],\r\n            a12 = out[6],\r\n            a13 = out[7];\r\n\r\n        //  Perform axis-specific matrix multiplication\r\n        out[0] = a00 * c + a10 * s;\r\n        out[1] = a01 * c + a11 * s;\r\n        out[2] = a02 * c + a12 * s;\r\n        out[3] = a03 * c + a13 * s;\r\n        out[4] = a10 * c - a00 * s;\r\n        out[5] = a11 * c - a01 * s;\r\n        out[6] = a12 * c - a02 * s;\r\n        out[7] = a13 * c - a03 * s;\r\n        return out;\r\n    }\r\n\r\n    static rotate(out: Float32Array , rad: number, axis: number) {\r\n        let x = axis[0], y = axis[1], z = axis[2],\r\n            len = Math.sqrt(x * x + y * y + z * z),\r\n            s, c, t,\r\n            a00, a01, a02, a03,\r\n            a10, a11, a12, a13,\r\n            a20, a21, a22, a23,\r\n            b00, b01, b02,\r\n            b10, b11, b12,\r\n            b20, b21, b22;\r\n\r\n        if (Math.abs(len) < 0.000001) { return null; }\r\n\r\n        len = 1 / len;\r\n        x *= len;\r\n        y *= len;\r\n        z *= len;\r\n\r\n        s = Math.sin(rad);\r\n        c = Math.cos(rad);\r\n        t = 1 - c;\r\n\r\n        a00 = out[0]; a01 = out[1]; a02 = out[2]; a03 = out[3];\r\n        a10 = out[4]; a11 = out[5]; a12 = out[6]; a13 = out[7];\r\n        a20 = out[8]; a21 = out[9]; a22 = out[10]; a23 = out[11];\r\n\r\n        //  Construct the elements of the rotation matrix\r\n        b00 = x * x * t + c; b01 = y * x * t + z * s; b02 = z * x * t - y * s;\r\n        b10 = x * y * t - z * s; b11 = y * y * t + c; b12 = z * y * t + x * s;\r\n        b20 = x * z * t + y * s; b21 = y * z * t - x * s; b22 = z * z * t + c;\r\n\r\n        //  Perform rotation-specific matrix multiplication\r\n        out[0] = a00 * b00 + a10 * b01 + a20 * b02;\r\n        out[1] = a01 * b00 + a11 * b01 + a21 * b02;\r\n        out[2] = a02 * b00 + a12 * b01 + a22 * b02;\r\n        out[3] = a03 * b00 + a13 * b01 + a23 * b02;\r\n        out[4] = a00 * b10 + a10 * b11 + a20 * b12;\r\n        out[5] = a01 * b10 + a11 * b11 + a21 * b12;\r\n        out[6] = a02 * b10 + a12 * b11 + a22 * b12;\r\n        out[7] = a03 * b10 + a13 * b11 + a23 * b12;\r\n        out[8] = a00 * b20 + a10 * b21 + a20 * b22;\r\n        out[9] = a01 * b20 + a11 * b21 + a21 * b22;\r\n        out[10] = a02 * b20 + a12 * b21 + a22 * b22;\r\n        out[11] = a03 * b20 + a13 * b21 + a23 * b22;\r\n        return out;\r\n    }\r\n\r\n    static invert(out: Float32Array, mat?: Float32Array ) {\r\n        if (mat === undefined) { mat = out; }// If input isn't sent, then output is also input\r\n\r\n        let a00 = mat[0], a01 = mat[1], a02 = mat[2], a03 = mat[3],\r\n            a10 = mat[4], a11 = mat[5], a12 = mat[6], a13 = mat[7],\r\n            a20 = mat[8], a21 = mat[9], a22 = mat[10], a23 = mat[11],\r\n            a30 = mat[12], a31 = mat[13], a32 = mat[14], a33 = mat[15],\r\n\r\n            b00 = a00 * a11 - a01 * a10,\r\n            b01 = a00 * a12 - a02 * a10,\r\n            b02 = a00 * a13 - a03 * a10,\r\n            b03 = a01 * a12 - a02 * a11,\r\n            b04 = a01 * a13 - a03 * a11,\r\n            b05 = a02 * a13 - a03 * a12,\r\n            b06 = a20 * a31 - a21 * a30,\r\n            b07 = a20 * a32 - a22 * a30,\r\n            b08 = a20 * a33 - a23 * a30,\r\n            b09 = a21 * a32 - a22 * a31,\r\n            b10 = a21 * a33 - a23 * a31,\r\n            b11 = a22 * a33 - a23 * a32,\r\n\r\n            //  Calculate the determinant\r\n            det = b00 * b11 - b01 * b10 + b02 * b09 + b03 * b08 - b04 * b07 + b05 * b06;\r\n\r\n        if (!det) {return false; }\r\n        det = 1.0 / det;\r\n\r\n        out[0] = (a11 * b11 - a12 * b10 + a13 * b09) * det;\r\n        out[1] = (a02 * b10 - a01 * b11 - a03 * b09) * det;\r\n        out[2] = (a31 * b05 - a32 * b04 + a33 * b03) * det;\r\n        out[3] = (a22 * b04 - a21 * b05 - a23 * b03) * det;\r\n        out[4] = (a12 * b08 - a10 * b11 - a13 * b07) * det;\r\n        out[5] = (a00 * b11 - a02 * b08 + a03 * b07) * det;\r\n        out[6] = (a32 * b02 - a30 * b05 - a33 * b01) * det;\r\n        out[7] = (a20 * b05 - a22 * b02 + a23 * b01) * det;\r\n        out[8] = (a10 * b10 - a11 * b08 + a13 * b06) * det;\r\n        out[9] = (a01 * b08 - a00 * b10 - a03 * b06) * det;\r\n        out[10] = (a30 * b04 - a31 * b02 + a33 * b00) * det;\r\n        out[11] = (a21 * b02 - a20 * b04 - a23 * b00) * det;\r\n        out[12] = (a11 * b07 - a10 * b09 - a12 * b06) * det;\r\n        out[13] = (a00 * b09 - a01 * b07 + a02 * b06) * det;\r\n        out[14] = (a31 * b01 - a30 * b03 - a32 * b00) * det;\r\n        out[15] = (a20 * b03 - a21 * b01 + a22 * b00) * det;\r\n\r\n        return true;\r\n    }\r\n\r\n    // https:// github.com/toji/gl-matrix/blob/master/src/gl-matrix/mat4.js  mat4.scalar.translate = function (out, a, v) {\r\n    static translate(out: Float32Array, x: number, y: number, z: number) {\r\n        out[12] = out[0] * x + out[4] * y + out[8]\t* z + out[12];\r\n        out[13] = out[1] * x + out[5] * y + out[9]\t* z + out[13];\r\n        out[14] = out[2] * x + out[6] * y + out[10]\t* z + out[14];\r\n        out[15] = out[3] * x + out[7] * y + out[11]\t* z + out[15];\r\n    }\r\n    constructor() { \r\n        this.raw = Matrix4.identity(); \r\n    }\r\n    // ....................................................................\r\n    // Transformations Methods\r\n    vtranslate(v: Vector3) {\r\n        Matrix4.translate(this.raw, v.x, v.y, v.z);\r\n        return this; \r\n    }\r\n    translate(x: number, y: number, z: number) {\r\n        Matrix4.translate(this.raw, x, y, z); \r\n        return this;\r\n    }\r\n    rotateY(rad: number) {\t\tMatrix4.rotateY(this.raw, rad); return this; }\r\n    rotateX(rad: number) {\t\tMatrix4.rotateX(this.raw, rad); return this; }\r\n    rotateZ(rad: number) {\t\tMatrix4.rotateZ(this.raw, rad); return this; }\r\n\r\n    vscale(vec3: Vector3) {\t\tMatrix4.scale(this.raw, vec3.x, vec3.y, vec3.z); return this; }\r\n    scale(x: number, y: number, z: number) {\r\n        Matrix4.scale(this.raw, x, y, z); \r\n        return this; \r\n    }\r\n\r\n    invert() {\r\n        Matrix4.invert(this.raw); \r\n        return this; \r\n    }\r\n\r\n    // ....................................................................\r\n    // Methods\r\n    // Bring is back to identity without changing the transform values.\r\n    resetRotation() {\t\r\n        for (let i = 0; i < this.raw.length; i++) {\r\n            if (i >= 12 && i <= 14) {continue; }\r\n            this.raw[i] = (i % 5 === 0) ? 1 : 0;  // only positions 0,5,10,15 need to be 1 else 0.\r\n        }\r\n        return this;\r\n    }\r\n\r\n    // reset data back to identity.\r\n    reset() { \r\n        for (let i = 0; i < this.raw.length; i++) { this.raw[i] = (i % 5 === 0) ? 1 : 0; } // only positions 0,5,10,15 need to be 1 else 0.\r\n        return this;\r\n    }\r\n}","\r\nexport class Vector3 {\r\n    x: number;\r\n    y: number;\r\n    z: number;\r\n    constructor(x: number = 0, y: number = 0, z: number = 0 ) {\r\n        this.x = x;\r\n        this.y = y;\r\n        this.z = z;\r\n    }\r\n    magnitude(v?: Vector3) {\r\n        if (v === undefined) {return Math.sqrt( this.x * this.x + this.y * this.y + this.z * this.z ); }\r\n        let x = v.x - this.x, y = v.y - this.y, z = v.y - this.z;\r\n        return Math.sqrt( x * x + y * y + z * z );\r\n    }\r\n\r\n    normalize() { \r\n        let mag = this.magnitude(); \r\n        this.x /= mag; this.y /= mag; this.z /= mag; \r\n        return this;\r\n    }\r\n    set(x: number, y: number, z: number) {\r\n         this.x = x; this.y = y; this.z = z;\t\r\n         return this;\r\n    }\r\n    multiScalar(v: number) { \r\n        this.x *= v; this.y *= v; this.z *= v; return this; \r\n    }\r\n    getArray() {\r\n         return [this.x, this.y, this.z]; }\r\n    getFloatArray() {\r\n         return new Float32Array([this.x, this.y, this.z]); }\r\n    clone() {\r\n         return new Vector3(this.x, this.y, this.z); \r\n    }\r\n} ","export enum ATTR {\r\n    ATTR_POSITION_NAME = 'a_position',\r\n    ATTR_POSITION_LOC = 0,\r\n    ATTR_NORMAL_NAME = 'a_norm',\r\n    ATTR_NORMAL_LOC = 1,\r\n    ATTR_UV_NAME = 'a_uv',\r\n    ATTR_UV_LOC = 2,\r\n\r\n    ATTR_COLOR_LOC = 4,\r\n    ATTR_COLOR_NAME = 'a_color',\r\n}\r\n\r\nexport class AttribLocations {\r\n    position: number;\r\n    normal: number;\r\n    uv: number;\r\n    constructor(gl: WebGL2RenderingContext, program: WebGLProgram) {\r\n        this.position = gl.getAttribLocation(program, ATTR.ATTR_NORMAL_NAME);\r\n        this.normal = gl.getAttribLocation(program, ATTR.ATTR_NORMAL_NAME);\r\n        this.uv = gl.getAttribLocation(program, ATTR.ATTR_UV_NAME);\r\n    }\r\n}\r\n\r\nexport class UniformLocations {\r\n    uPointSize: WebGLUniformLocation | null;\r\n    uAngle: WebGLUniformLocation | null;\r\n\r\n    perspective: WebGLUniformLocation | null;\r\n    modalMatrix: WebGLUniformLocation | null;\r\n    cameraMatrix: WebGLUniformLocation | null;\r\n    mainTexture: WebGLUniformLocation | null;\r\n    constructor(gl: WebGL2RenderingContext, program: WebGLProgram) {\r\n        this.perspective =\tgl.getUniformLocation(program, 'uPMatrix');\r\n        this.modalMatrix =\tgl.getUniformLocation(program, 'uMVMatrix');\r\n        this.cameraMatrix =\tgl.getUniformLocation(program, 'uCameraMatrix');\r\n        this.mainTexture =\tgl.getUniformLocation(program, 'uMainTex' );\r\n    }\r\n}","import { RTN } from './VAO';\r\nimport { Transform } from './Transform';\r\n\r\nexport class Modal {\r\n    mesh: RTN;\r\n    transform: Transform;\r\n    constructor(meshData: RTN) {\r\n        this.transform = new Transform();\r\n        this.mesh = meshData;\r\n    }\r\n\r\n    setScale(x: number, y: number, z: number) {\r\n         this.transform.scale.set(x, y, z); \r\n         return this; \r\n        }\r\n    setPosition(x: number, y: number, z: number) {\r\n         this.transform.position.set(x, y, z); \r\n         return this; \r\n        }\r\n    setRotation(x: number, y: number, z: number) {\r\n         this.transform.rotation.set(x, y, z); \r\n         return this; \r\n        }\r\n\r\n    addScale(x: number, y: number, z: number) {\tthis.transform.scale.x += x;\tthis.transform.scale.y += y;\tthis.transform.scale.y += y;\t\r\n        return this; \r\n    }\r\n    addPosition(x: number, y: number, z: number) {\tthis.transform.position.x += x; this.transform.position.y += y; this.transform.position.z += z; \r\n        return this; \r\n    }\r\n    addRotation(x: number, y: number, z: number) {\tthis.transform.rotation.x += x; this.transform.rotation.y += y; this.transform.rotation.z += z; \r\n        return this; \r\n    }\r\n\r\n    preRender() {\r\n         this.transform.updateMatrix(); \r\n         return this; \r\n    }\r\n}","import { GLShaderCommon } from '../Utility/GLShaderCommon';\r\nimport { AttribLocations, UniformLocations } from './AttribLocations';\r\nimport { Modal } from './Modal';\r\n\r\nexport class Shader {\r\n\r\n    gl: WebGL2RenderingContext;\r\n    program: WebGLProgram | null;\r\n\r\n    attribLoc: AttribLocations;\r\n    uniformLoc: UniformLocations;\r\n\r\n    constructor(gl: WebGL2RenderingContext , vertShaderSrc: string, fragShaderSrc: string ) {\r\n        this.program = GLShaderCommon.getShaderProgram(gl, vertShaderSrc, fragShaderSrc, true);\r\n\r\n        if (this.program != null) {\r\n            this.gl = gl;\r\n            gl.useProgram(this.program);\r\n            this.attribLoc = new AttribLocations(gl, this.program);\r\n            this.uniformLoc = new UniformLocations(gl, this.program);\r\n            // this.uniformLoc = {};\t// TODO : Replace in later lessons with get standardUniformLocations.\r\n        }\r\n\r\n        // Note :: Extended shaders should deactivate shader when done calling super and setting up custom parts in the constructor.\r\n    }\r\n\r\n    // ...................................................\r\n    // Methods\r\n    activate() {\r\n         this.gl.useProgram(this.program); return this; \r\n    }\r\n    deactivate() { \r\n        this.gl.useProgram(null); return this; \r\n    }\r\n\r\n    // function helps clean up resources when shader is no longer needed.\r\n    dispose() {\r\n        // unbind the program if its currently active\r\n        if (this.gl.getParameter(this.gl.CURRENT_PROGRAM) === this.program) {this.gl.useProgram(null); }\r\n        this.gl.deleteProgram(this.program);\r\n    }\r\n    setPerspective(matData: Float32Array) {\r\n        this.gl.uniformMatrix4fv(this.uniformLoc.perspective, false, matData); \r\n        return this; \r\n    }\r\n    setModalMatrix(matData: Float32Array) {\r\n        this.gl.uniformMatrix4fv(this.uniformLoc.modalMatrix, false, matData); \r\n        return this; \r\n    }\r\n    setCameraMatrix(matData: Float32Array) {\r\n        this.gl.uniformMatrix4fv(this.uniformLoc.cameraMatrix, false, matData); \r\n        return this; \r\n    }\r\n    // ...................................................\r\n    // RENDER RELATED METHODS\r\n\r\n    // Setup custom properties\r\n    preRender() {\r\n        //\r\n    } \r\n    // Handle rendering a modal\r\n    renderModal(modal: Modal) {\r\n        this.gl.bindVertexArray(modal.mesh.vao);\t// Enable VAO, this will set all the predefined attributes for the shader\r\n        \r\n        if (modal.mesh.indexCount) {\r\n            this.gl.drawElements(modal.mesh.drawMode, modal.mesh.indexCount, this.gl.UNSIGNED_SHORT, 0); \r\n        } else {\r\n            this.gl.drawArrays(modal.mesh.drawMode, 0, modal.mesh.vertexCount);\r\n        }\r\n\r\n        this.gl.bindVertexArray(null);\r\n\r\n        return this;\r\n    }\r\n}","import { Vector3 } from '../Utility/Vector3';\r\nimport { Matrix4 } from '../Utility/Matrix4';\r\n\r\nexport class Transform {\r\n    static deg2Rad = Math.PI / 180; // Cache result, one less operation to do for each update.\r\n\r\n    position: Vector3;\r\n    scale: Vector3;\r\n    rotation: Vector3;\r\n    matView: Matrix4;\r\n    matNormal: Float32Array;\r\n\r\n    forward: Float32Array;\r\n    up: Float32Array;\r\n    right: Float32Array;\r\n\r\n    constructor() {\r\n        this.position\t= new Vector3(0, 0, 0);\t// Traditional X,Y,Z 3d position\r\n        this.scale\t\t= new Vector3(1, 1, 1);\t// How much to scale a mesh. Having a 1 means no scaling is done.\r\n        this.rotation\t= new Vector3(0, 0, 0);\t// Hold rotation values based on degrees, Object will translate it to radians\r\n        this.matView \t= new Matrix4();\t\t// Cache the results when calling updateMatrix\r\n        this.matNormal\t= new Float32Array(9);\t// This is a Mat3, raw array to hold the values is enough for what its used for\r\n\r\n        // Direction Vectors\r\n        this.forward\t= new Float32Array(4);\t// When rotating, keep track of what the forward direction is\r\n        this.up\t\t\t= new Float32Array(4);\t// what the up direction is, invert to get bottom\r\n        this.right\t\t= new Float32Array(4);\t// what the right direction is, invert to get left\r\n    }\r\n    updateMatrix() {\r\n        this.matView.reset() // Order is very important!!\r\n            .vtranslate(this.position)\r\n            .rotateX(this.rotation.x * Transform.deg2Rad)\r\n            .rotateZ(this.rotation.z * Transform.deg2Rad)\r\n            .rotateY(this.rotation.y * Transform.deg2Rad)\r\n            .vscale(this.scale);\r\n\r\n        // Calcuate the Normal Matrix which doesn't need translate, then transpose and inverses the mat4 to mat3\r\n        Matrix4.normalMat3(this.matNormal, this.matView.raw);\r\n\r\n        // Determine Direction after all the transformations.\r\n        Matrix4.transformVec4(this.forward,\t[0, 0, 1, 0], this.matView.raw); // Z\r\n        Matrix4.transformVec4(this.up,\t\t[0, 1, 0, 0], this.matView.raw); // Y\r\n        Matrix4.transformVec4(this.right,\t[1, 0, 0, 0], this.matView.raw); // X\r\n\r\n        return this.matView.raw;\r\n    }\r\n\r\n    updateDirection() {\r\n        Matrix4.transformVec4(this.forward,\t[0, 0, 1, 0], this.matView.raw);\r\n        Matrix4.transformVec4(this.up,\t\t[0, 1, 0, 0], this.matView.raw);\r\n        Matrix4.transformVec4(this.right,\t[1, 0, 0, 0], this.matView.raw);\r\n        return this;\r\n    }\r\n\r\n    getViewMatrix() {\treturn this.matView.raw; }\r\n    getNormalMatrix() {\treturn this.matNormal; }\r\n\r\n    reset() {\r\n        this.position.set(0, 0, 0);\r\n        this.scale.set(1, 1, 1);\r\n        this.rotation.set(0, 0, 0);\r\n    }\r\n}\r\n","import { ATTR } from './AttribLocations';\n\nexport enum DRAW_MODE {\n    // \n}\n\nexport class RTN {\n    name: string;\n    \n    vao: WebGLVertexArrayObject | null;\n    bufVertices: WebGLBuffer | null;\n    bufNormals: WebGLBuffer | null;\n    bufUV: WebGLBuffer | null;\n    bufIndex: WebGLBuffer | null;\n\n    vertexComponentLen: number;\n    vertexCount: number;\n    indexCount: number;\n    drawMode: number;\n\n    constructor() {\n        // \n    }\n}\n\nexport class VAO {\n\n    static createMeshVAO(gl: WebGL2RenderingContext, name: string , aryVert: number[], aryInd?: number[], aryNorm?: number[], aryUV?: number[]) {\n        let rtn =  new RTN();\n        rtn.name = name;\n        rtn.drawMode = gl.TRIANGLES;\n\n        rtn.vao = gl.createVertexArray();\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\n        gl.bindVertexArray(rtn.vao);\t//  Bind it so all the calls to vertexAttribPointer/enableVertexAttribArray is saved to the vao.\n\n        // .......................................................\n        // Set up vertices\n        if (aryVert !== undefined && aryVert != null) {\n            rtn.bufVertices = gl.createBuffer();\t\t\t\t\t\t\t\t\t\t\t\t\t// Create buffer...\n            rtn.vertexComponentLen = 3;\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t// How many floats make up a vertex\n            rtn.vertexCount = aryVert.length / rtn.vertexComponentLen;\t\t\t\t\t\t\t\t// How many vertices in the array\n\n            gl.bindBuffer(gl.ARRAY_BUFFER, rtn.bufVertices);\n            gl.bufferData(gl.ARRAY_BUFFER, new Float32Array(aryVert), gl.STATIC_DRAW);\t\t// then push array into it.\n            gl.enableVertexAttribArray(ATTR.ATTR_POSITION_LOC);\t\t\t\t\t\t\t\t\t\t// Enable Attribute location\n            gl.vertexAttribPointer(ATTR.ATTR_POSITION_LOC, 3, gl.FLOAT, false, 0, 0);\t\t\t\t\t\t// Put buffer at location of the vao\n        }\n\n        // .......................................................\n        // Setup normals\n        if (aryNorm !== undefined && aryNorm != null) {\n            rtn.bufNormals = gl.createBuffer();\n            gl.bindBuffer(gl.ARRAY_BUFFER, rtn.bufNormals);\n            gl.bufferData(gl.ARRAY_BUFFER, new Float32Array(aryNorm), gl.STATIC_DRAW);\n            gl.enableVertexAttribArray(ATTR.ATTR_NORMAL_LOC);\n            gl.vertexAttribPointer(ATTR.ATTR_NORMAL_LOC, 3, gl.FLOAT, false, 0, 0);\n        }\n\n        // .......................................................\n        // Setup UV\n        if (aryUV !== undefined && aryUV != null) {\n            rtn.bufUV = gl.createBuffer();\n            gl.bindBuffer(gl.ARRAY_BUFFER, rtn.bufUV);\n            gl.bufferData(gl.ARRAY_BUFFER, new Float32Array(aryUV), gl.STATIC_DRAW);\n            gl.enableVertexAttribArray(ATTR.ATTR_UV_LOC);\n            gl.vertexAttribPointer(ATTR.ATTR_UV_LOC, 2, gl.FLOAT, false, 0, 0);\t// UV only has two floats per component\n        }\n\n        // .......................................................\n        // Setup Index.\n        if (aryInd !== undefined && aryInd != null) {\n            rtn.bufIndex = gl.createBuffer();\n            rtn.indexCount = aryInd.length;\n            gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, rtn.bufIndex);\n            gl.bufferData(gl.ELEMENT_ARRAY_BUFFER, new Uint16Array(aryInd), gl.STATIC_DRAW);\n            gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, null);\n        }\n\n        // Clean up\n        gl.bindVertexArray(null);\t\t\t\t\t// Unbind the VAO, very Important. always unbind when your done using one.\n        gl.bindBuffer(gl.ARRAY_BUFFER, null);\t// Unbind any buffers that might be set\n\n        // this.mMeshCache[name] = rtn;\n        return rtn;\n    }\n    constructor() {\n        //\n    }\n}"],"names":["GeometryBase","constructor","scene","this","add","render","gl","GridAxisShader","Shader","vertSrc","fragSrc","aryColor","super","program","uniformLoc","uAngle","getUniformLocation","uColor","uniform3fv","useProgram","set","angle","uniform1f","renderModal","modal","setModalMatrix","transform","getViewMatrix","bindVertexArray","mesh","vao","indexCount","drawElements","drawMode","UNSIGNED_SHORT","drawArrays","vertexCount","GridAxis","app","v","f","shader","ro","t","canvas","initShader","GetVAO","p","verts","half","size","i","push","RTN","LINES","createVertexArray","vertexComponentLen","length","strideLen","Float32Array","BYTES_PER_ELEMENT","bufVertices","createBuffer","bindBuffer","ARRAY_BUFFER","bufferData","STATIC_DRAW","enableVertexAttribArray","ATTR","vertexAttribPointer","FLOAT","Modal","position","console","log","Math","atan2","y","x","radius","sqrt","scale","max","abs","sin","setScale","setPosition","cos","rotation","z","activate","preRender","GLShaderCommon","static","vertexShader","fragmentShader","needValidate","vShader","createShader","VERTEX_SHADER","fShader","FRAGMENT_SHADER","createProgram","error","type","source","shaderSource","compileShader","getShaderParameter","COMPILE_STATUS","getShaderInfoLog","deleteShader","attachShader","linkProgram","getProgramParameter","LINK_STATUS","getProgramInfoLog","deleteProgram","validateProgram","VALIDATE_STATUS","shaderString","url","getSourceSynch","req","XMLHttpRequest","open","send","status","responseText","callback","image","Image","onload","src","Matrix4","a","out","fovy","aspect","near","far","tan","nf","left","right","bottom","top","lr","bt","a01","a02","a03","a12","a13","a23","a00","a10","a11","a20","a21","a22","a30","a31","a32","a33","b00","b01","b02","b03","b04","b05","b06","b07","b08","b09","b10","b11","det","mat4","w","c1r1","c2r1","c3r1","c4r1","c1r2","c2r2","c3r2","c4r2","c1r3","c2r3","c3r3","c4r3","m","b","b0","b1","b2","b3","rad","s","c","axis","b12","b20","b21","b22","len","mat","undefined","raw","identity","vtranslate","translate","rotateY","rotateX","rotateZ","vscale","vec3","invert","resetRotation","reset","Vector3","magnitude","normalize","mag","multiScalar","getArray","getFloatArray","clone","AttribLocations","normal","uv","getAttribLocation","ATTR_NORMAL_NAME","ATTR_UV_NAME","UniformLocations","uPointSize","perspective","modalMatrix","cameraMatrix","mainTexture","meshData","Transform","setRotation","addScale","addPosition","addRotation","updateMatrix","vertShaderSrc","fragShaderSrc","attribLoc","deactivate","dispose","getParameter","CURRENT_PROGRAM","setPerspective","matData","uniformMatrix4fv","setCameraMatrix","matView","matNormal","forward","up","deg2Rad","updateDirection","getNormalMatrix","PI","DRAW_MODE","name","bufNormals","bufUV","bufIndex","VAO","aryVert","aryInd","aryNorm","aryUV","rtn","TRIANGLES","ELEMENT_ARRAY_BUFFER","Uint16Array"],"sourceRoot":""}