{"version":3,"file":"static/js/85259.86052283.chunk.js","mappings":"kJACO,MAAMA,EAITC,YAAYC,EAAWC,GAA2B,IAAhBC,EAAS,uDAAG,EAAC,KAHxCF,OAAC,OACDC,OAAC,OACDC,OAAC,EAEJC,KAAKH,EAAIA,EACTG,KAAKF,EAAIA,EACTE,KAAKD,EAAIA,CACb,EAGG,MAAME,EAAW,CAACC,EAAaC,IAC3BC,KAAKC,KAAKC,EAAUJ,EAAIC,IAE7BG,EAAY,CAACJ,EAAaC,KACpBD,EAAGL,EAAIM,EAAGN,IAAMK,EAAGL,EAAIM,EAAGN,IAAMK,EAAGJ,EAAIK,EAAGL,IAAMI,EAAGJ,EAAIK,EAAGL,IAAMI,EAAGH,EAAII,EAAGJ,IAAMG,EAAGH,EAAII,EAAGJ,GA+BhGQ,EAAO,CAACC,EAAWC,EAAWC,IAAuBF,EAAIE,GAAKD,EAAID,GAE3DG,EAAc,CAACC,EAAYC,EAAaC,KACjD,IAAIC,EAAKD,EAAGjB,EAAIgB,EAAGhB,EACfmB,EAAKF,EAAGhB,EAAIe,EAAGf,EACfY,IAAME,EAAEf,EAAIgB,EAAGhB,GAAKkB,GAAMH,EAAEd,EAAIe,EAAGf,GAAKkB,IAAOD,EAAKA,EAAKC,EAAKA,GAC9DnB,EAAIU,EAAKM,EAAGhB,EAAGiB,EAAGjB,EAAGa,GACrBZ,EAAIS,EAAKM,EAAGf,EAAGgB,EAAGhB,EAAGY,GACzB,OAAO,IAAIf,EAAQE,EAAGC,EAAE,EClDrB,MAAMmB,EAAa,cAAD,KACdC,KAAO,OAAO,KACdC,YAAa,EAAM,KACnBC,GAAK,EAAE,KACPC,OAAQ,EAAM,KACdC,KAAY,EAAG,EAEnB,MAAMC,EAKT3B,YAAY4B,GAA2B,KAJhCA,iBAAW,OACXC,MAAgB,GAAG,KACnBC,MAAgB,GAGnB1B,KAAKwB,YAAcA,CACvB,EAGG,MAAMG,UAAaV,EAItBrB,YAAYgC,EAAUC,GAClBC,QAAQ,KAJLF,QAAE,OACFC,QAAE,OACFE,QAAkB,EAGrB/B,KAAKkB,KAAO,OACZlB,KAAK4B,GAAKA,EACV5B,KAAK6B,GAAKA,CACd,CACOG,YAEH,OADAhC,KAAK+B,OAAS9B,EAASD,KAAK4B,GAAGK,IAAKjC,KAAK6B,GAAGI,KACrCjC,KAAK+B,MAChB,CACOG,SACH,MAAO,CACHd,GAAIpB,KAAKoB,GACTQ,GAAI5B,KAAK4B,GAAGR,GACZS,GAAI7B,KAAK6B,GAAGT,GACZE,KAAMtB,KAAKsB,KAEnB,CACOa,SACHnC,KAAK4B,GAAGQ,WAAWpC,MACnBA,KAAK6B,GAAGO,WAAWpC,KACvB,EAEG,MAAMqC,UAAapB,EAStBrB,YAAY0C,EAAczC,EAAWC,GAA2B,IAAhBC,EAAS,uDAAG,EACxD+B,QAAQ,KATLQ,WAAK,OACLL,SAAG,OACHP,MAAgB,GAAG,KACnBa,EAAY,EAAE,KAEdC,iBAAmB,EAAE,KACrBC,WAAa,EAIhBzC,KAAKsC,MAAQA,EACbtC,KAAKkB,KAAO,OACZlB,KAAKiC,IAAM,IAAItC,EAAQE,EAAGC,EAAGC,EACjC,CACO2C,QACH1C,KAAKwC,iBAAmB,EACxBxC,KAAKyC,WAAa,EAClBzC,KAAKqB,OAAQ,CACjB,CACOa,SACH,MAAO,CACHd,GAAIpB,KAAKoB,GACTa,IAAK,CAACpC,EAAGG,KAAKiC,IAAIpC,EAAGC,EAAGE,KAAKiC,IAAInC,EAAGC,EAAGC,KAAKiC,IAAIlC,GAChDuB,KAAMtB,KAAKsB,KAEnB,CACOa,SACHnC,KAAKsC,MAAMd,YAAYmB,WAAW3C,KACtC,CACOoC,WAAWQ,GACd5C,KAAK0B,MAAMmB,OAAO7C,KAAK0B,MAAMoB,QAAQF,GAAQ,EACjD,EC/EG,MAMDG,EAAa,CAACC,EAAYC,EAAYC,EAAYC,EAAYC,EAAYC,IACrEjD,KAAKC,MAAM2C,EAAKG,IAAOH,EAAKG,IAAOF,EAAKG,IAAOH,EAAKG,IAAOF,EAAKG,IAAOH,EAAKG,IAGjFC,EAAiB,SAACzC,EAAUC,GAC9B,OAAOiC,EAAWlC,EAAGoB,IAAIpC,EAAGgB,EAAGoB,IAAInC,EAAGe,EAAGoB,IAAIlC,EAAGe,EAAGmB,IAAIpC,EAAGiB,EAAGmB,IAAInC,EAAGgB,EAAGmB,IAAIlC,EAC/E,EACMwD,EAAoB,SAAC9B,EAAe+B,EAAcC,GAAiG,IAAtBC,EAAY,uDAAG,OAC5HC,IAAdF,IACAA,EAAYH,GAGhB,IAAK,IAAIM,EAAI,EAAGA,EAAInC,EAAMM,SAAU6B,EAAKnC,EAAMmC,GAAGlB,QAElD,IAAImB,EAAgB,CAACL,GACrBA,EAAOhB,gBAAkB,EAEzB,IAAK,IAAIoB,EAAI,EAAGA,EAAI,KACK,IAAjBC,EAAM9B,SADkB6B,EAAG,CAE/B,IAAIE,EAAoBD,EAAM,GAC9BA,EAAME,QAEN,IAAK,IAAIC,EAAI,EAAGA,EAAIF,EAAYpC,MAAMK,SAAUiC,EAAG,CAC/C,MAAMC,EAAOH,EAAYpC,MAAMsC,GACzBE,EAAWJ,IAAgBG,EAAKrC,GAAKqC,EAAKpC,GAAKoC,EAAKrC,GAEpDuC,EAAUV,EAAUK,EAAaI,EAAIR,GAErCU,EADUN,EAAYtB,gBAAkB2B,IAElB,IAAxBD,EAAG1B,iBAA4B4B,EAAUF,EAAG1B,mBAC5C0B,EAAG1B,gBAAkB4B,EACrBP,EAAMQ,KAAKH,GAEnB,CACJ,CACJ,EAEMI,EAAkB,CAAC7C,EAAe8C,KACpC,IAAIP,EAAI,EAAOQ,EAAI,EAGfC,EAAe,GACnB,IAAqC,IAAjCF,EAAY/B,gBAA0B,CACtCiC,EAAKJ,KAAK5C,EAAM8C,EAAYnD,KAE5B,IAAI0C,EAAoBS,EACxB,IAAKP,EAAI,EAAGA,EAAI,MAAUA,EAAG,CAEzB,IAAIU,EAAiBZ,EAGrB,IAFAY,EAASjC,aAEJ+B,EAAI,EAAGA,EAAIV,EAAYpC,MAAMK,SAAUyC,EAAG,CAC3C,MAAMP,EAAOH,EAAYpC,MAAM8C,GACzBN,EAAWJ,IAAgBG,EAAKrC,GAAKqC,EAAKpC,GAAKoC,EAAKrC,GAEtDsC,EAAG1B,gBAAkBkC,EAASlC,kBAC9BkC,EAAWR,EAEnB,CAEA,GAAIQ,IAAaZ,EACb,MAEJA,EAAcY,EACdD,EAAKJ,KAAK5C,EAAMqC,EAAY1C,IAEhC,CAEJ,CACA,OAAOqD,CAAI,ECvDf,MAAME,GAAAA,EACYC,KAAO,CACjBC,UAAW,cACXC,UAAW,cAHbH,EAKYI,SAAW,IALvBJ,EAMYK,kBAAoB,CAAChC,EAAYC,EAAYC,EAAYC,EAAYC,EAAYC,IACpFjD,KAAK6E,IAAIjC,EAAKG,GAAM/C,KAAK6E,IAAIhC,EAAKG,GAAMhD,KAAK6E,IAAI/B,EAAKG,GAP/DsB,EASYO,kBAAoB,CAAClC,EAAYC,EAAYC,EAAYC,EAAYC,EAAYC,IACpFjD,KAAKC,MAAM2C,EAAKG,IAAOH,EAAKG,IAAOF,EAAKG,IAAOH,EAAKG,IAAOF,EAAKG,IAAOH,EAAKG,IAVrFsB,EAYYQ,OAAS,CAACC,EAAsBC,EAASnE,KAZrDyD,EAaOW,cAbPX,EAa4BO,kBACtBhE,IAASyD,EAAOC,KAAKC,YAd3BF,EAeWW,cAfXX,EAegCK,mBAG9B,MAAMO,EAAY,CAACH,GACbI,EAA2B,GACjC,IAAIC,EACAC,EAAQ,IACZ,KAAOA,KAEH,GADAD,EAvBNd,EAuBoBgB,YAAYJ,EAAWC,EAAaH,QACnC1B,IAAX8B,GAAwBA,EAAO1D,OAC/B,OAAO0D,EAGf,OAAOA,CAAM,EA5Bfd,EA+BaF,KAAoB,GA/BjCE,EAgCagB,YAAc,CAACJ,EAAWC,EAAaH,KAClD,KAAIE,EAAUxD,OAAS,GA4DnB,OA7FN4C,EA6FkBF,KA5DhB,CAGI,IAAImB,EAAU,EACd,IAAK,IAAIhC,EAAI,EAAGA,EAAI2B,EAAUxD,OAAQ6B,IAC9B2B,EAAU3B,GAAGiC,EAAIN,EAAUK,GAASC,IACpCD,EAAUhC,GAGV2B,EAAU3B,GAAGiC,IAAMN,EAAUK,GAASC,GAClCN,EAAU3B,GAAGkC,EAAIP,EAAUK,GAASE,IACpCF,EAAUhC,GAItB,IAAImC,EAAqBR,EAAUK,GAEnC,GAAIG,IAAYV,EAEZ,MAAO,CAACU,EAASA,EAAQC,YApDnCrB,EAoDqDF,MApDrDE,EAwDWF,KAAO,GACZ,IAAIwB,EAAOF,EACX,KAAOE,EAAKD,WA1DlBrB,EA2DeF,KAAKJ,KAAK4B,EAAKD,UACpBC,EAAOA,EAAKD,SAERC,EAAKD,WA9DnBrB,EA8DqCF,KA9DrCE,EA8D+CF,KAAK1C,OAAO,MAMrDwD,EAAU1C,OAAO0C,EAAUzC,QAAQiD,GAAU,GAC7CP,EAAYnB,KAAK0B,GAEjB,IAAIG,EAAYH,EAAQG,UACxB,IAAK,IAAItC,EAAI,EAAGA,EAAIsC,EAAUnE,OAAQ6B,IAAK,CACvC,IAAIuC,EAAWD,EAAUtC,GAEzB,IAAK4B,EAAYY,SAASD,KAAcA,EAASE,QAAS,CACtD,IAAIC,EAAQP,EAAQD,EA5ElCnB,EA4E2C4B,UAAUJ,EAAUJ,GA5E/DpB,EA4E+EI,SAEjE,GAAKQ,EAAUa,SAASD,GAIpB,SAHAZ,EAAUlB,KAAK8B,GAMnBA,EAASL,EAAIQ,EACbH,EAASK,EAtFvB7B,EAsFgC4B,UAAUJ,EAAUd,GACtCc,EAASN,EAAIM,EAASL,EAAIK,EAASK,EACnCL,EAASH,SAAWD,CACxB,CACJ,CAIJ,GA9FFpB,EAgGaW,mBAAa,EAhG1BX,EAiGa4B,UAAY,CAAC/F,EAAcC,IAjGxCkE,EAkGcW,cAAc9E,EAAEX,EAAGW,EAAEV,EAAGU,EAAET,EAAGU,EAAEZ,EAAGY,EAAEX,EAAGW,EAAEV,GAI7D,MAAM0G,EAeF7G,YAAYC,EAAWC,EAAWC,GAAY,KAdvCqB,IAAM,EAAE,KAERyE,EAAI,EAAE,KACNW,EAAI,EAAE,KAENV,EAAI,EAAE,KAENjG,EAAI,EAAE,KACNC,EAAI,EAAE,KACNC,EAAI,EAAE,KACNmG,UAAyB,GAAG,KAC5BxE,MAAqB,GAAG,KACxBsE,cAAWrC,EAAU,KACrB0C,SAAU,EAEbrG,KAAKH,EAAIA,EACTG,KAAKF,EAAIA,EACTE,KAAKD,EAAIA,CACb,EAEJ,MAAM2G,EAKF9G,YAAYgC,EAAeC,GAAgB,KAJpCT,IAAc,EAAE,KAChBQ,QAAE,OACFC,QAAE,EAGL7B,KAAK4B,GAAKA,EACV5B,KAAK6B,GAAKA,EACV7B,KAAK4B,GAAGF,MAAM2C,KAAKrE,MACnBA,KAAK6B,GAAGH,MAAM2C,KAAKrE,MACnB4B,EAAGsE,UAAU7B,KAAKxC,GAClBA,EAAGqE,UAAU7B,KAAKzC,EACtB,EC5JJ,MAAM+E,EAGF/G,cAAe,KAFP6B,MAAQ,GAAG,KACXC,MAAQ,GAEZ1B,KAAKyB,MAAQ,GACbzB,KAAK0B,MAAQ,EACjB,CACAkF,UAAUC,GACN7G,KAAKyB,MAAM4C,KAAKwC,EACpB,CAEAC,QAAQlF,EAAIC,EAAIkF,GACZ/G,KAAK0B,MAAM2C,KACP,CAAEzC,KAAIC,KAAIkF,UAElB,CACAC,QAAQ5B,GACJ,MAAM6B,EAAU,CAAC,EACXC,EAAM,GAIZ,IAFAD,EAAQ7B,IAAa,EAEd8B,EAAInF,OAAS/B,KAAKyB,MAAMM,OAAS,GAAG,CACvC,IAAIoF,EAAU,KAUd,GARAnH,KAAK0B,MAAM0F,SAAQnD,KACVgD,EAAQhD,EAAKrC,MAAQqF,EAAQhD,EAAKpC,MAAUoF,EAAQhD,EAAKrC,KAAOqF,EAAQhD,EAAKpC,QACzEsF,GAAWlD,EAAK8C,OAASI,EAAQJ,UAClCI,EAAUlD,EAElB,KAGCkD,EAAS,MAEdD,EAAI7C,KAAK8C,GACTF,EAAQE,EAAQvF,KAAM,EACtBqF,EAAQE,EAAQtF,KAAM,CAC1B,CACA,OAAOqF,CACX,EC3BG,MAAMG,EAQTzH,cAAe,KAPR0C,WAAK,OACLgF,aAAU3D,EAAU,KAEpB4D,aAAmC5D,EAAU,KAE5C6D,eAAqC7D,EAGzC3D,KAAKsC,MAAQ,IAAIf,EAAMvB,KAE3B,CACWyH,eACP,OAAOzH,KAAKwH,SAChB,CACWC,aAASC,GACZ1H,KAAKwH,YACLxH,KAAKwH,UAAUrG,YAAa,GAEhCnB,KAAKwH,UAAYE,EACbA,IACA1H,KAAKwH,UAAUrG,YAAa,EAEpC,CACOwG,eACH3H,KAAKyH,cAAW9D,EAChB3D,KAAKuH,aAAU5D,CACnB,CAEOiE,QAAQ/H,EAAWC,GACtB,MAAM+G,EAAO,IAAIxE,EAAKrC,KAAKsC,MAAOzC,EAAGC,EAAG,GAGxC,OAFAE,KAAKsC,MAAMb,MAAM4C,KAAKwC,GACtB7G,KAAK2H,eACEd,CACX,CACOC,QAAQlF,EAAUC,GACrB,GAAID,IAAOC,EAAI,OACf,GAAI7B,KAAK6H,gBAAgBjG,EAAIC,GAAK,OAElC,MAAMoC,EAAO,IAAItC,EAAKC,EAAIC,GAQ1B,OAPAD,EAAGF,MAAM2C,KAAKJ,GACdpC,EAAGH,MAAM2C,KAAKJ,GACdjE,KAAKsC,MAAMZ,MAAM2C,KAAKJ,GAEtBjE,KAAK8H,gBAAgB7D,GAErBjE,KAAK2H,eACE1D,CACX,CACO8D,qBAAqBlB,GACxB,MAAMmB,EAAKhI,KAAKiI,SAASpB,GACrBmB,GAAIhI,KAAK8G,QAAQD,EAAMmB,GAC3BhI,KAAK2H,cACT,CACOO,aAAatG,EAAUC,GAC1B,MAAMoC,EAAO,IAAItC,EAAKC,EAAIC,GAI1B,OAHAD,EAAGF,MAAM2C,KAAKJ,GACdpC,EAAGH,MAAM2C,KAAKJ,GACdjE,KAAKsC,MAAMZ,MAAM2C,KAAKJ,GACfA,CACX,CAEOkE,gBAAgBtB,EAAY5C,GAC/B,MAAMrC,EAAKqC,EAAKrC,GACVC,EAAKoC,EAAKpC,GAEhB7B,KAAK8G,QAAQlF,EAAIiF,GACjB7G,KAAK8G,QAAQD,EAAMhF,GAEnB7B,KAAKoC,WAAW6B,GAChBjE,KAAK2H,cACT,CAEOS,qBAAqBvB,GACxB,MAAMwB,EAAa,GAEnB,IAAIC,EAAgBzB,EAAKnF,MAAMK,OAC/B,IAAK,IAAIiC,EAAI,EAAGA,EAAIsE,IAAiBtE,EAAG,CAGpC,MAAMC,EAAO4C,EAAKnF,MAAMsC,GAClBvC,EAAgB,GAEtB,IAAK,IAAImC,EAAI5D,KAAKsC,MAAMZ,MAAMK,OAAS,EAAG6B,GAAK,IAAKA,EAAG,CACnD,MAAMhB,EAAQ5C,KAAKsC,MAAMZ,MAAMkC,GAC/B,GAAIK,EAAKrC,KAAOgB,EAAMhB,IAClBqC,EAAKrC,KAAOgB,EAAMf,IAClBoC,EAAKpC,KAAOe,EAAMhB,IAClBqC,EAAKpC,KAAOe,EAAMf,GAAI,CACtB,MAAM0G,EAAQC,EAAiBvE,EAAMrB,GACrC,GAAI2F,EAAO,CAEP,MAAMP,EAAK,IAAI3F,EAAKrC,KAAKsC,MAAOiG,EAAM,GAAIA,EAAM,IAChDvI,KAAKsC,MAAMb,MAAM4C,KAAK2D,GACtBhI,KAAKkI,aAAaF,EAAIpF,EAAMhB,IAC5B5B,KAAKkI,aAAaF,EAAIpF,EAAMf,IAE5B7B,KAAKoC,WAAWQ,GAChBnB,EAAM4C,KAAK2D,EACf,CACJ,CACJ,CAEA,GAAIvG,EAAMM,OAAS,EAAG,CAClB,IAAI0G,EAAYxE,EAAKrC,GACrBH,EAAM4C,KAAKJ,EAAKpC,IAChB,MAAM6G,EAAUjH,EAAMkH,KAAKC,GAAe3I,EAAS2I,EAAE3G,IAAKgC,EAAKrC,GAAGK,OAE5D4G,EADUH,EAAQC,KAAI,CAACG,EAAKC,IAAUA,IAClBC,MAAK,CAACxI,EAAGC,IAAMiI,EAAQlI,GAAKkI,EAAQjI,KAC9DT,KAAKkI,aAAaO,EAAWhH,EAAMoH,EAAU,KAC7C,IAAK,IAAIjF,EAAI,EAAGA,EAAIiF,EAAU9G,OAAS,IAAK6B,EACxC5D,KAAKkI,aAAazG,EAAMoH,EAAUjF,IAAKnC,EAAMoH,EAAUjF,EAAI,KAK/DyE,EAAWhE,KAAKJ,GAChBjE,KAAKsC,MAAMZ,MAAMmB,OAAO7C,KAAKsC,MAAMZ,MAAMoB,QAAQmB,GAAO,EAC5D,CACJ,CAEAoE,EAAWjB,SAAS6B,IAChBA,EAAErH,GAAGQ,WAAW6G,GAChBA,EAAEpH,GAAGO,WAAW6G,EAAE,IAGtBjJ,KAAKkJ,UACT,CAEOpB,gBAAgB7D,GAA8B,IAAlBiF,IAAQ,yDACvC,MAAMzH,EAAgB,GAEtB,IAAK,IAAImC,EAAI5D,KAAKsC,MAAMZ,MAAMK,OAAS,EAAG6B,GAAK,IAAKA,EAAG,CACnD,MAAMhB,EAAQ5C,KAAKsC,MAAMZ,MAAMkC,GAC/B,GAAIK,EAAKrC,KAAOgB,EAAMhB,IAClBqC,EAAKrC,KAAOgB,EAAMf,IAClBoC,EAAKpC,KAAOe,EAAMhB,IAClBqC,EAAKpC,KAAOe,EAAMf,GAAI,CACtB,MAAM0G,EAAQC,EAAiBvE,EAAMrB,GACrC,GAAI2F,EAAO,CAEP,MAAMP,EAAK,IAAI3F,EAAKrC,KAAKsC,MAAOiG,EAAM,GAAIA,EAAM,IAChDvI,KAAKsC,MAAMb,MAAM4C,KAAK2D,GACtBhI,KAAKkI,aAAaF,EAAIpF,EAAMhB,IAC5B5B,KAAKkI,aAAaF,EAAIpF,EAAMf,IAE5B7B,KAAKoC,WAAWQ,GAChBnB,EAAM4C,KAAK2D,EACf,CACJ,CACJ,CAEA,GAAIvG,EAAMM,OAAS,EAAG,CAClB,IAAI0G,EAAYxE,EAAKrC,GACrBH,EAAM4C,KAAKJ,EAAKpC,IAChB,MAAM6G,EAAUjH,EAAMkH,KAAKC,GAAe3I,EAAS2I,EAAE3G,IAAKgC,EAAKrC,GAAGK,OAE5D4G,EADUH,EAAQC,KAAI,CAACG,EAAKC,IAAUA,IAClBC,MAAK,CAACxI,EAAGC,IAAMiI,EAAQlI,GAAKkI,EAAQjI,KAC9DT,KAAKkI,aAAaO,EAAWhH,EAAMoH,EAAU,KAC7C,IAAK,IAAIjF,EAAI,EAAGA,EAAIiF,EAAU9G,OAAS,IAAK6B,EACxC5D,KAAKkI,aAAazG,EAAMoH,EAAUjF,IAAKnC,EAAMoH,EAAUjF,EAAI,KAE/D5D,KAAKoC,WAAW6B,EACpB,CAEAiF,GAAYlJ,KAAKkJ,UACrB,CAEOvG,WAAWkE,GACdA,EAAKnF,MAAM0F,SAASnD,IACZA,EAAKrC,KAAOiF,EACZ5C,EAAKpC,GAAGO,WAAW6B,GAEnBA,EAAKrC,GAAGQ,WAAW6B,GAEvBjE,KAAKsC,MAAMZ,MAAMmB,OAAO7C,KAAKsC,MAAMZ,MAAMoB,QAAQmB,GAAO,EAAE,IAG9DjE,KAAKsC,MAAMb,MAAMoB,OAAO7C,KAAKsC,MAAMb,MAAMqB,QAAQ+D,GAAO,GAExD7G,KAAKkJ,WACLlJ,KAAK2H,cACT,CACOvF,WAAWQ,GACdA,EAAMhB,GAAGQ,WAAWQ,GACpBA,EAAMf,GAAGO,WAAWQ,GACpB5C,KAAKsC,MAAMZ,MAAMmB,OAAO7C,KAAKsC,MAAMZ,MAAMoB,QAAQF,GAAQ,EAC7D,CAEOqF,SAASpB,GACZ,IAAIsC,EAASC,OAAOC,UAChBN,GAAS,EACb,IAAK,IAAInF,EAAI,EAAGA,EAAI5D,KAAKsC,MAAMb,MAAMM,SAAU6B,EAAG,CAC9C,GAAI5D,KAAKsC,MAAMb,MAAMmC,KAAOiD,EAAM,SAClC,MAAM5E,EAAMjC,KAAKsC,MAAMb,MAAMmC,GAAG3B,IAC1BqH,EAAMrJ,EAASgC,EAAK4E,EAAK5E,KAC3BkH,EAASG,IACTH,EAASG,EACTP,EAAQnF,EAEhB,CACA,GAAImF,GAAS,EAAK,OAAO/I,KAAKsC,MAAMb,MAAMsH,EAE9C,CACOQ,YAAY1J,EAAWC,GAAwB,IAAb0J,EAAM,uDAAG,EAC1CL,EAASC,OAAOC,UAChBN,GAAS,EACb,MAAMrB,EAAI,IAAI/H,EAAQE,EAAGC,GACzB,IAAK,IAAI8D,EAAI,EAAGA,EAAI5D,KAAKsC,MAAMb,MAAMM,SAAU6B,EAAG,CAC9C,MAAM3B,EAAMjC,KAAKsC,MAAMb,MAAMmC,GAAG3B,IAC1BqH,EAAMrJ,EAASgC,EAAKyF,GACtByB,EAASG,IACTH,EAASG,EACTP,EAAQnF,EAEhB,CACA,GAAImF,GAAS,GAAKI,EAASK,EAAU,OAAOxJ,KAAKsC,MAAMb,MAAMsH,EAEjE,CACOU,YAAY5J,EAAWC,GAAwB,IAAb0J,EAAM,uDAAG,EAC9C,MAAME,EAAK,IAAI/J,EAAQE,EAAGC,EAAG,GAC7B,IAAK,IAAI8D,EAAI,EAAGA,EAAI5D,KAAKsC,MAAMZ,MAAMK,SAAU6B,EAAG,CAC9C,MAAMK,EAAOjE,KAAKsC,MAAMZ,MAAMkC,GACxB+F,EAAKhJ,EAAY+I,EAAIzF,EAAKrC,GAAGK,IAAKgC,EAAKpC,GAAGI,KAGhD,GADYhC,EAASyJ,EAAIC,GACfH,EACN,MAAO,CAAEvF,OAAMhC,IAAK0H,EAE5B,CAEJ,CACOC,eAAe3F,GAClB,OAAOjE,KAAK6H,gBAAgB5D,EAAKrC,GAAIqC,EAAKpC,GAC9C,CACOgG,gBAAgBjG,EAAUC,GAC7B,IAAK,IAAI+B,EAAI,EAAGA,EAAI5D,KAAKsC,MAAMZ,MAAMK,SAAU6B,EAAG,CAC9C,MAAMhB,EAAQ5C,KAAKsC,MAAMZ,MAAMkC,GAC/B,GAAKhC,IAAOgB,EAAMhB,IAAMC,IAAOe,EAAMf,IAAQD,IAAOgB,EAAMf,IAAMA,IAAOe,EAAMhB,GACzE,OAAOgB,CAEf,CAEJ,CACOiH,iBAAiBjI,EAAUC,GAC9B,IAAK,IAAI+B,EAAI,EAAGA,EAAI5D,KAAKsC,MAAMZ,MAAMK,SAAU6B,EAAG,CAC9C,MAAMK,EAAOjE,KAAKsC,MAAMZ,MAAMkC,GAC9B,GAAKK,EAAKrC,KAAOA,GAAMqC,EAAKpC,KAAOA,GAAQoC,EAAKrC,KAAOC,GAAMoC,EAAKpC,KAAOD,EACrE,OAAOqC,CAEf,CAEJ,CACO6F,cAAclI,EAAUC,GAE3B,MAAMkI,EAAS,GACf,IAAK,IAAInG,EAAI,EAAGA,EAAI/B,EAAGH,MAAMK,SAAU6B,EAAG,CACtC,MAAMK,EAAOpC,EAAGH,MAAMkC,GAClBK,EAAKrC,KAAOC,EACZkI,EAAO1F,KAAKJ,EAAKpC,IAEjBkI,EAAO1F,KAAKJ,EAAKrC,GAEzB,CACAC,EAAGM,SAEH4H,EAAO3C,SAASwB,IACP5I,KAAK6J,iBAAiBjI,EAAIgH,IAC3B5I,KAAK8G,QAAQlF,EAAIgH,EACrB,GAER,CAEOM,WACH,IAAK,IAAItF,EAAI,EAAGA,EAAI5D,KAAKsC,MAAMb,MAAMM,SAAU6B,EAAK5D,KAAKsC,MAAMb,MAAMmC,GAAGxC,GAAKwC,EAC7E,IAAK,IAAIA,EAAI,EAAGA,EAAI5D,KAAKsC,MAAMZ,MAAMK,SAAU6B,EAAK5D,KAAKsC,MAAMZ,MAAMkC,GAAGxC,GAAKwC,CACjF,CACOoG,cACH,OAAOA,EAAYhK,KAAKsC,MAC5B,CAEO2H,mBACH,OAAOA,EAAiBjK,KAAKsC,MACjC,CACO4H,aACH,MAAMC,EAAMD,EAAWlK,KAAKsC,OAE5B,OADAtC,KAAKsH,QAAU6C,EACRA,CACX,EAKJ,MAAM3B,EAAmB,CAAC4B,EAAUC,IACzBC,EAAaF,EAAGxI,GAAIwI,EAAGvI,GAAIwI,EAAGzI,GAAIyI,EAAGxI,IAE1CyI,EAAe,CAAC1I,EAAUC,EAAU0I,EAAUC,ILnSf,EAACrH,EAAYC,EAAYqH,EAAYC,EAAYC,EAAYC,EAAYC,EAAYC,KAEtH,GAAK3H,IAAOsH,GAAMrH,IAAOsH,GAAQC,IAAOE,GAAMD,IAAOE,EACjD,OAGJ,MAAMC,GAAgBD,EAAKF,IAAOH,EAAKtH,IAAO0H,EAAKF,IAAOD,EAAKtH,GAG/D,GAAoB,IAAhB2H,EACA,OAGJ,MAAMC,IAAOH,EAAKF,IAAOvH,EAAKwH,IAAOE,EAAKF,IAAOzH,EAAKwH,IAAOI,EACvDE,IAAOR,EAAKtH,IAAOC,EAAKwH,IAAOF,EAAKtH,IAAOD,EAAKwH,IAAOI,EAG7D,GAAIC,EAAK,GAAKA,EAAK,GAAKC,EAAK,GAAKA,EAAK,EACnC,OAOJ,MAAO,CAHG9H,EAAK6H,GAAMP,EAAKtH,GAChBC,EAAK4H,GAAMN,EAAKtH,GAEb,EK2QN8H,CAAsBtJ,EAAGK,IAAIpC,EAAG+B,EAAGK,IAAInC,EAAG+B,EAAGI,IAAIpC,EAAGgC,EAAGI,IAAInC,EAAGyK,EAAGtI,IAAIpC,EAAG0K,EAAGtI,IAAInC,EAAG0K,EAAGvI,IAAIpC,EAAG2K,EAAGvI,IAAInC,GAExGoK,EAAc5H,IAChB,MAAMgF,ED7QahF,KACnB,MAAMwD,EAAI,IAAIa,EAEd,IAAK,IAAI/C,EAAI,EAAGA,EAAItB,EAAMb,MAAMM,SAAU6B,EACtCkC,EAAEc,UAAUtE,EAAMb,MAAMmC,GAAGxC,IAE/B,IAAK,IAAIwC,EAAI,EAAGA,EAAItB,EAAMZ,MAAMK,SAAU6B,EAAG,CACzC,MAAMK,EAAO3B,EAAMZ,MAAMkC,GACzBkC,EAAEgB,QAAQ7C,EAAKrC,GAAGR,GAAI6C,EAAKpC,GAAGT,GAAI6C,EAAKjC,YAC3C,CAMA,OAJY8D,EAAEkB,QAAQ,EAIZ,EC8PMmE,CAAO7I,GACvB,OAAOgF,CAAO,EAEZ0C,EAAe1H,IACjB,MAAMmC,EH5Ta,EAACnC,EAAczB,EAAUC,KAC5CyC,EAAkBjB,EAAMb,MAAOZ,EAAIyC,EAAgB,IAC5CgB,EAAgBhC,EAAMb,MAAOX,IG0TvBsK,CAAQ9I,EAAOA,EAAMb,MAAM,GAAIa,EAAMb,MAAMa,EAAMb,MAAMM,OAAS,IAC7E,OAAO0C,CAAI,EAETwF,EAAoB3H,IACtB,MAAMmC,EFhUa,EAACnC,EAAczB,EAAUC,KAE5C,MAAMW,EAAQ,GACd,IAAI,IAAImC,EAAI,EAAIA,EAAItB,EAAMb,MAAMM,SAAU6B,EAAG,CACzC,MAAMiD,EAAMvE,EAAMb,MAAMmC,GAClByH,EAAU,IAAI5E,EAAUI,EAAK5E,IAAIpC,EAAGgH,EAAK5E,IAAInC,EAAG+G,EAAK5E,IAAIlC,GAC/DsL,EAAQjK,GAAKyF,EAAKzF,GAClBK,EAAM4C,KAAKgH,EACf,CAEA,MAAM3J,EAAQ,GACd,IAAI,IAAIkC,EAAI,EAAIA,EAAItB,EAAMZ,MAAMK,SAAU6B,EAAG,CACzC,MAAMK,EAAM3B,EAAMZ,MAAMkC,GAClB0H,EAAU,IAAI5E,EAAWjF,EAAMwC,EAAKrC,GAAGR,IAAKK,EAAMwC,EAAKpC,GAAGT,KAChEM,EAAM2C,KAAKiH,EACf,CACA,OAAO3G,EAAOQ,OAAO1D,EAAMZ,EAAGO,IAAKK,EAAMX,EAAGM,IAAI,EEgTnCmK,CAAajJ,EAAOA,EAAMb,MAAM,GAAIa,EAAMb,MAAMa,EAAMb,MAAMM,OAAS,IAClF,OAAO0C,CAAI,EClUR,MAAM+G,EAAc,cAAD,KAChBC,UAAiB,GAAG,KACpBC,cAAgB,CAAE,CACnBhJ,QACL1C,KAAKyL,UAAY,GACjBzL,KAAK0L,cAAgB,CACvB,CACOrH,KAAK/C,GACNtB,KAAK0L,aAAe1L,KAAKyL,UAAU1J,OAAS,GAC9C/B,KAAKyL,UAAU5I,OAAO7C,KAAK0L,aAAe,EAAG1L,KAAKyL,UAAU1J,QAE9D/B,KAAKyL,UAAUpH,KAAK/C,GACpBtB,KAAK0L,aAAe1L,KAAKyL,UAAU1J,OAAS,CAC9C,CACO4J,kBACL,OAAO3L,KAAK0L,YACd,CACOE,mBACL,OAAO5L,KAAKyL,UAAU1J,MACxB,CACO8J,kBACL,MAAO,CAAEH,aAAc1L,KAAK2L,kBAAmBG,WAAY9L,KAAK4L,mBAClE,CACOG,OACL,GAA0B,IAAtB/L,KAAK0L,aAET,OADA1L,KAAK0L,eACE1L,KAAKyL,UAAUzL,KAAK0L,aAC7B,CACOM,OAGL,OAFAhM,KAAK0L,eACL1L,KAAK0L,aAAe1L,KAAK0L,aAAe1L,KAAKyL,UAAU1J,OAAS/B,KAAK0L,aAAe1L,KAAKyL,UAAU1J,OAAS,EACrG/B,KAAKyL,UAAUzL,KAAK0L,aAC7B,EAGK,MAAMO,EAEXrM,cAAe,KADPsM,aAAO,EAGblM,KAAKkM,QAAU,IAAIV,CACrB,CACOW,SACL,OAAOnM,KAAKkM,QAAQL,iBACtB,CACOO,aACLpM,KAAKkM,QAAQxJ,QACb1C,KAAKqM,aAAa,GACpB,CACOA,aAAa/K,GAClBtB,KAAKkM,QAAQ7H,KAAK/C,GAIlB,OAFctB,KAAKkM,QAAQL,iBAG7B,CACOE,OACL,OAAO/L,KAAKkM,QAAQH,MAGtB,CACOC,OACL,OAAOhM,KAAKkM,QAAQF,MAGtB,EC5DK,MAAMM,EAMT1M,YAAY2M,GAAyB,KAL9BA,gBAAU,OACVC,gBAAU,OAEVhL,iBAAW,EAGdxB,KAAKuM,WAAaA,EAClBvM,KAAKwB,YAAcxB,KAAKuM,WAAW/K,YACnCxB,KAAKwM,WAAa,IAAIP,CAC1B,CACOvJ,QACH,MAAMJ,EAAQtC,KAAKuM,WAAW/K,YAAYc,MAC1CA,EAAMb,MAAQ,GACda,EAAMZ,MAAQ,GACd1B,KAAKyM,SACT,CACOA,UAEHzM,KAAKwM,WAAWH,aAAarM,KAAKkC,UAElClC,KAAK0M,oBACT,CACOA,qBACH,GAAI1M,KAAKuM,WAAWI,QAAS,CACzB,MAAMC,EAAO5M,KAAKwM,WAAWL,SAC7BnM,KAAKuM,WAAWI,QAAQE,YAAW,gBAAYD,EAAKlB,aAAY,YAAIkB,EAAKd,WAAW,EACxF,CACJ,CAEOC,OACH,MAAMzK,EAAOtB,KAAKwM,WAAWT,OAC7BzK,GAAQtB,KAAK8M,KAAKxL,GAClBtB,KAAK0M,qBACL1M,KAAKuM,WAAW/K,YAAYmG,cAEhC,CACOqE,OACH,MAAM1K,EAAOtB,KAAKwM,WAAWR,OAC7B1K,GAAQtB,KAAK8M,KAAKxL,GAClBtB,KAAK0M,qBACL1M,KAAKuM,WAAW/K,YAAYmG,cAEhC,CAEOzF,SACH,MAAMZ,EAAO,CAAEuF,KAAM,GAAI5C,KAAM,IAG/B,OAFAjE,KAAKuM,WAAW/K,YAAYc,MAAMb,MAAM2F,SAASwB,IAAQtH,EAAKuF,KAAKxC,KAAKuE,EAAE1G,SAAS,IACnFlC,KAAKuM,WAAW/K,YAAYc,MAAMZ,MAAM0F,SAAS6B,IAAQ3H,EAAK2C,KAAKI,KAAK4E,EAAE/G,SAAS,IAC5EZ,CACX,CACOyL,cPEiB,SAACC,GAAoC,IAAxBC,EAAI,uDAAG,WAC5C,MAAMC,EAAOC,SAASC,cAAc,KACpCF,EAAKG,KAAO,uCAAyCC,mBAAmBN,GACxEE,EAAKK,SAAQ,UAAMN,GACnBC,EAAKM,OACT,COLQC,CADYC,KAAKC,UAAU3N,KAAKkC,UACd,aACtB,CACO4K,KAAKxL,GACR,MAAME,EAAcxB,KAAKuM,WAAW/K,YACpCA,EAAYc,MAAMb,MAAQ,GAC1BD,EAAYc,MAAMZ,MAAQ,GAE1B,IAAK,IAAIkC,EAAI,EAAGA,EAAItC,EAAKuF,KAAK9E,SAAU6B,EAAG,CACvC,MAAMgK,EAAWtM,EAAKuF,KAAKjD,GACrBiD,EAAOrF,EAAYoG,QAAQgG,EAAS3L,IAAIpC,EAAG+N,EAAS3L,IAAInC,EAAG8N,EAAS3L,IAAIlC,GAC9E8G,EAAKzF,GAAKwM,EAASxM,GACnByF,EAAKvF,KAAOsM,EAAStM,IACzB,CACA,IAAK,IAAIsC,EAAI,EAAGA,EAAItC,EAAK2C,KAAKlC,SAAU6B,EAAG,CACvC,MAAMiK,EAAWvM,EAAK2C,KAAKL,GACrBK,EAAOzC,EAAYsF,QAAQtF,EAAYc,MAAMb,MAAMoM,EAASjM,IAAKJ,EAAYc,MAAMb,MAAMoM,EAAShM,KACxGoC,EAAK7C,GAAKyM,EAASzM,GACnB6C,EAAK3C,KAAOuM,EAASvM,IACzB,CACJ,CACOwM,WACH,MAAMjO,EAAIO,KAAK2N,SAAW/N,KAAKuM,WAAWyB,OAAOC,MAC3CnO,EAAIM,KAAK2N,SAAW/N,KAAKuM,WAAWyB,OAAOE,OACjDlO,KAAKuM,WAAW4B,WAAWtO,EAAGC,EAClC,CAEOsO,eAAe1G,GAAc1H,KAAKuM,WAAW8B,SAASD,eAAiB1G,CAAG,CAC1E4G,UAAU5G,GACb1H,KAAKuM,WAAW/K,YAAY0I,aAC5BlK,KAAKuM,WAAW8B,SAASC,UAAY5G,CACzC,CAGO6G,kBAECvO,KAAKuM,WAAW/K,YAAYiG,WAC5BzH,KAAKuM,WAAW/K,YAAYiG,SAAStF,SACrCnC,KAAKuM,WAAW/K,YAAYiG,cAAW9D,EAE/C,CACO6K,uBAAuB3O,EAAEC,GAC5B,MAAM+G,EAAO7G,KAAKwB,YAAYoG,QAAQ/H,EAAGC,EAAG,GAC5CE,KAAKwB,YAAYuG,qBAAqBlB,EAC1C,E,aCjGG,MAAM4H,EAMT7O,YAAY2M,GAAyB,KAL9BA,gBAAU,OAEV6B,gBAAiB,EAAM,KACvBE,WAAY,EAGftO,KAAKuM,WAAaA,CACtB,CACOmC,OAAOC,GAoBV,GAbI3O,KAAKuM,WAAW/K,YAAYiG,SAC5BzH,KAAKuM,WAAWqC,OAAO/B,YAAc7M,KAAKuM,WAAW/K,YAAYiG,SAASvG,KAE1ElB,KAAKuM,WAAWqC,OAAO/B,YAAc,YAGzC8B,EAAIE,YACJF,EAAIG,IAAI9O,KAAKuM,WAAWwC,EAAElP,EAAGG,KAAKuM,WAAWwC,EAAEjP,EAAG,EAAG,EAAG,MACxD6O,EAAIK,YACJL,EAAIM,UAAY,OAChBN,EAAIO,OAGAlP,KAAKsO,WACDtO,KAAKuM,WAAW/K,YAAY8F,QAAS,CACrC,MAAM7F,EAAQzB,KAAKuM,WAAW/K,YAAYc,MAAMb,MAChDzB,KAAKuM,WAAW/K,YAAY8F,QAAQF,SAAS6B,IACzC,MAAM/I,EAAKuB,EAAMwH,EAAErH,IAAIK,IACjB9B,EAAKsB,EAAMwH,EAAEpH,IAAII,IACvB0M,EAAIE,YACJF,EAAIQ,OAAOjP,EAAGL,EAAGK,EAAGJ,GACpB6O,EAAIS,OAAOjP,EAAGN,EAAGM,EAAGL,GACpB6O,EAAIU,UAAY,EAChBV,EAAIW,QAAQ,GAEpB,CAGAtP,KAAKoO,gBC9CU,EAACO,EAAKY,KACZ,IAAIC,EAAAA,GAASD,EAAG5G,KAAKjB,GAAMA,EAAEzF,OACrCwN,aAAad,EAAI,ED6ClBe,CAAYf,EAAK3O,KAAKuM,WAAW/K,YAAYc,MAAMb,OAIvDzB,KAAK2P,YAAYhB,EAErB,CACOgB,YAAYhB,GACf3O,KAAKuM,WAAWqD,IAAG,YAAQ5P,KAAKuM,WAAW/K,YAAYc,MAAMb,MAAMM,OAAM,eAAO/B,KAAKuM,WAAW/K,YAAYc,MAAMZ,MAAMK,QAExH/B,KAAKuM,WAAW/K,YAAYc,MAAMZ,MAAM0F,SAAS6B,IAAcjJ,KAAK6P,gBAAgBlB,EAAK1F,EAAE,IAC3FjJ,KAAKuM,WAAW/K,YAAYc,MAAMb,MAAM2F,SAASwB,IAAc5I,KAAK8P,gBAAgBnB,EAAK/F,EAAE,GAC/F,CACOkH,gBAAgBnB,EAA+B9H,GAElD8H,EAAIE,YACJF,EAAIG,IAAIjI,EAAK5E,IAAIpC,EAAGgH,EAAK5E,IAAInC,EAAG+G,EAAKtE,EAAG,EAAG,MAC3CoM,EAAIK,YACJL,EAAIM,UAAY,UAChBN,EAAIO,OACArI,EAAK1F,aACLwN,EAAIU,UAAY,EAChBV,EAAIoB,YAAc,OAClBpB,EAAIW,UAGRX,EAAIoB,YAAc,UAClBpB,EAAIU,UAAY,EAChBV,EAAIqB,WAAW,GAAD,OAAInJ,EAAKrE,iBAAmBqE,EAAK5E,IAAIpC,EAAGgH,EAAK5E,IAAInC,EAAI,IACnE6O,EAAIqB,WAAW,GAAD,OAAInJ,EAAKzF,IAAMyF,EAAK5E,IAAIpC,EAAGgH,EAAK5E,IAAInC,EAAI,EAC1D,CACO+P,gBAAgBlB,EAA+B1K,GAC9CA,EAAK9C,aACLwN,EAAIU,UAAY,EAChBV,EAAIoB,YAAc,OAClBpB,EAAIE,YACJF,EAAIQ,OAAOlL,EAAKrC,GAAGK,IAAIpC,EAAGoE,EAAKrC,GAAGK,IAAInC,GACtC6O,EAAIS,OAAOnL,EAAKpC,GAAGI,IAAIpC,EAAGoE,EAAKpC,GAAGI,IAAInC,GACtC6O,EAAIW,UAERX,EAAIU,UAAY,EAChBV,EAAIE,YACJF,EAAIQ,OAAOlL,EAAKrC,GAAGK,IAAIpC,EAAGoE,EAAKrC,GAAGK,IAAInC,GACtC6O,EAAIS,OAAOnL,EAAKpC,GAAGI,IAAIpC,EAAGoE,EAAKpC,GAAGI,IAAInC,GACtC6O,EAAIoB,YAAc,OAClBpB,EAAIW,SAEJX,EAAIoB,YAAc,UAClBpB,EAAIU,UAAY,EAChB,MAAMxP,EAAIoE,EAAKrC,GAAGK,IAAIpC,EAAsC,IAAjCoE,EAAKpC,GAAGI,IAAIpC,EAAIoE,EAAKrC,GAAGK,IAAIpC,GACjDC,EAAImE,EAAKrC,GAAGK,IAAInC,EAAsC,IAAjCmE,EAAKpC,GAAGI,IAAInC,EAAImE,EAAKrC,GAAGK,IAAInC,GACvD6O,EAAIqB,WAAW,GAAD,OAAI/L,EAAK7C,IAAMvB,EAAGC,EAAI,EACxC,EE9FG,MAAMmQ,EAkBTrQ,YAAYoO,GAA4B,KAjBjCkC,YAAM,OACN1O,iBAAW,OACX6M,cAAQ,OAERL,YAAM,OAENrB,aAAO,OACPwD,YAAM,OACNvB,YAAM,OAENwB,cAAe,EAAM,KACrBrB,EAAI,IAAIpP,EAAQ,EAAG,EAAG,GAAG,KACzBiQ,IAAc,GAAG,KAGhBS,UAAW,EAGfrQ,KAAKwB,YAAc,IAAI6F,EACvBrH,KAAKkQ,OAAS,IAAI5D,EAAOtM,MACzBA,KAAKqO,SAAW,IAAII,EAAczO,MAClCA,KAAKgO,OAASA,CAClB,CAGOsC,UAAUzQ,EAAWC,GAExB,MAAM+G,EAAO7G,KAAKwB,YAAY+H,YAAY1J,EAAGC,GAEzCE,KAAKwB,YAAYiG,UAAYzH,KAAKwB,YAAYiG,WAAaZ,IAC3D7G,KAAKwB,YAAY+F,QAAUvH,KAAKwB,YAAYiG,UAGhDzH,KAAKwB,YAAYiG,SAAWZ,CAChC,CACOsH,WAAWtO,EAAWC,GAMzB,GAJAE,KAAKwB,YAAYiG,SAAWzH,KAAKwB,YAAY+H,YAAY1J,EAAGC,GAIxDE,KAAKwB,YAAY+F,SAAWvH,KAAKwB,YAAYiG,SAK7C,OAHAzH,KAAKwB,YAAYsF,QAAQ9G,KAAKwB,YAAY+F,QAAiBvH,KAAKwB,YAAYiG,UAC5EzH,KAAKkQ,OAAOzD,eACZzM,KAAKuQ,aAMT,MAAMC,EAAYxQ,KAAKwB,YAAYiI,YAAY5J,EAAGC,GAClD,GAAI0Q,QAA2C7M,IAA9B3D,KAAKwB,YAAYiG,SAAwB,CACtD,MAAMZ,EAAO7G,KAAKwB,YAAYoG,QAAQ4I,EAAUvO,IAAIpC,EAAG2Q,EAAUvO,IAAInC,GAIrE,OAHAE,KAAKwB,YAAY2G,gBAAgBtB,EAAM2J,EAAUvM,MACjDjE,KAAKkQ,OAAOzD,eACZzM,KAAKuQ,YAET,CAIA,YAAkC5M,IAA9B3D,KAAKwB,YAAYiG,UACjBzH,KAAKkQ,OAAO1B,uBAAuB3O,EAAGC,GACtCE,KAAKkQ,OAAOzD,eACZzM,KAAKuQ,mBAHT,CAMJ,CAEOE,UAAU5Q,EAAWC,GAExBE,KAAK+O,EAAElP,EAAIA,EACXG,KAAK+O,EAAEjP,EAAIA,CACf,CACO4Q,UAEH,GAAI1Q,KAAKwB,YAAYiG,UAA+C,SAAnCzH,KAAKwB,YAAYiG,SAASvG,KAAiB,CACxE,MAAM2F,EAAO7G,KAAKwB,YAAYiG,SAE9BzH,KAAKwB,YAAY4G,qBAAqBvB,GAUtC,MAAMjE,EAAQ5C,KAAKwB,YAAYyG,SAASpB,GACxC,GAAIjE,EAAO,CACK3C,EAAS4G,EAAK5E,IAAKW,EAAMX,KAC3B,GACNjC,KAAKwB,YAAYsI,cAAclH,EAAOiE,EAE9C,CAGI7G,KAAKqQ,WACLrQ,KAAKkQ,OAAOzD,UACZzM,KAAKqQ,UAAW,GAGpBrQ,KAAKwB,YAAYiG,cAAW9D,EAG5B3D,KAAKuQ,YACT,CACJ,CACOI,UAAU9Q,EAAWC,GAExB,GAAIE,KAAKwB,YAAYiG,UAA+C,SAAnCzH,KAAKwB,YAAYiG,SAASvG,KAAiB,CACxE,MAAM2F,EAAO7G,KAAKwB,YAAYiG,SAC9BZ,EAAK5E,IAAIpC,EAAIA,EACbgH,EAAK5E,IAAInC,EAAIA,CACjB,CACAE,KAAKqQ,UAAW,CACpB,CACOE,aACCvQ,KAAKqO,SAASC,WACdtO,KAAKwB,YAAY0I,YAEzB,CAEOwE,OAAOC,GACN3O,KAAKoQ,cACLpQ,KAAK8N,WAGT9N,KAAKmQ,OAAOtD,YAAc7M,KAAK4P,IAE/B5P,KAAKqO,SAASK,OAAOC,EACzB,CAEO5B,aAAe,OAAO/M,KAAKkQ,OAAOnD,YAAc,CAChDe,WAAa,OAAO9N,KAAKkQ,OAAOpC,UAAY,EC/IhD,MAAM8C,EAEThR,YAAYiR,GAAgB,KAD5BA,SAAG,EAEC7Q,KAAK6Q,IAAMA,EACX7Q,KAAK8Q,QACT,CACOA,SACH,MAAMC,EAAU5D,SAASC,cAAc,OACvC2D,EAAQC,MAAMC,SAAW,WACzBF,EAAQC,MAAME,WAAa,OAC3BH,EAAQC,MAAMG,QAAU,OACxBnR,KAAK6Q,IAAIO,QAAQC,YAAYN,GAE7B,MAAMO,EAASnE,SAASC,cAAc,UACtCkE,EAAOzE,YAAc,MACrByE,EAAOC,QAAU,KACbvR,KAAK6Q,IAAItE,WAAW6D,cAAgBpQ,KAAK6Q,IAAItE,WAAW6D,YAAY,EAExEW,EAAQM,YAAYC,GAEpB,MAAME,EAAYrE,SAASC,cAAc,UACzCoE,EAAU3E,YAAc,SACxB2E,EAAUD,QAAU,KAChBvR,KAAK6Q,IAAItE,WAAW2D,OAAO3B,iBAAiB,EAEhDwC,EAAQM,YAAYG,GAEpB,MAAMC,EAAYtE,SAASC,cAAc,UACzCqE,EAAU5E,YAAc,cACxBkE,EAAQM,YAAYI,GACpBA,EAAUF,QAAU,KAChBvR,KAAK6Q,IAAItE,WAAWQ,YAAY,EAGpC,MAAM2E,EAAUvE,SAASC,cAAc,OACvCsE,EAAQ7E,YAAc,WACtB6E,EAAQV,MAAMW,MAAQ,OACtBZ,EAAQM,YAAYK,GACpB1R,KAAK6Q,IAAItE,WAAW4D,OAASuB,EAE7B,MAAM/E,EAAUQ,SAASC,cAAc,OACvCT,EAAQE,YAAc,UACtBF,EAAQqE,MAAMW,MAAQ,OACtBZ,EAAQM,YAAY1E,GACpB3M,KAAK6Q,IAAItE,WAAWI,QAAUA,EAE9B,MAAMiC,EAASzB,SAASC,cAAc,OACtCwB,EAAO/B,YAAc,YACrB+B,EAAOoC,MAAMW,MAAQ,OACrBZ,EAAQM,YAAYzC,GACpB5O,KAAK6Q,IAAItE,WAAWqC,OAASA,EAE7B,MAAMgD,EAAWC,EAAO,SAAS,KAAQ7R,KAAK6Q,IAAItE,WAAW2D,OAAOxN,OAAO,IAC3EqO,EAAQM,YAAYO,GAEpB,MAAME,EAAUD,EAAO,QAAQ,KAAQ7R,KAAK6Q,IAAItE,WAAW2D,OAAOnE,MAAM,IACxEgF,EAAQM,YAAYS,GAEpB,MAAMC,EAAUF,EAAO,QAAQ,KAAQ7R,KAAK6Q,IAAItE,WAAW2D,OAAOlE,MAAM,IACxE+E,EAAQM,YAAYU,GAEpB,MAAMC,EAAcC,EAAY,YAAavK,IAAQ1H,KAAK6Q,IAAItE,WAAW2D,OAAO9B,eAAe1G,EAAE,IACjGqJ,EAAQM,YAAYW,EAAYE,KAEhC,MAAMC,EAASF,EAAY,OAAQvK,IAAQ1H,KAAK6Q,IAAItE,WAAW2D,OAAO5B,UAAU5G,EAAE,IAClFqJ,EAAQM,YAAYc,EAAOD,IAC/B,EAGJ,MAAML,EAAS,CAACO,EAAeC,KAC3B,MAAMf,EAASnE,SAASC,cAAc,UAGtC,OAFAkE,EAAOzE,YAAcuF,EACrBd,EAAOC,QAAU,KAAQc,GAAI,EACtBf,CAAM,EAEJW,EAAc,CAACG,EAAeC,KACvC,MAAMH,EAAM/E,SAASC,cAAc,OACnC8E,EAAIlB,MAAMsB,QAAU,OAEpB,MAAMC,EAAWpF,SAASC,cAAc,SACxCmF,EAASrR,KAAO,WAChBqR,EAASC,gBAAiB,EAC1B,MAAMC,EAAOtF,SAASC,cAAc,OAMpC,OALAqF,EAAK5F,YAAcuF,EACnBK,EAAKzB,MAAMW,MAAQ,OACnBO,EAAIb,YAAYkB,GAChBL,EAAIb,YAAYoB,GAChBF,EAASG,SAAW,IAAML,EAAGE,EAASI,SAC/B,CACHT,MAAKK,WACR,ECtFE,MAAMK,UAAiBC,EAAAA,GAI1BjT,YAAYwB,GACRU,MAAMqL,SAAS2F,eAAe1R,IAAuB,KAJlDmL,gBAAU,OACVwG,QAAE,EAIL/S,KAAKgO,OAAOgD,MAAMC,SAAW,WAE7BjR,KAAKgT,MACT,CACOA,OACHhT,KAAKuM,WAAa,IAAI0D,EAAWjQ,KAAKgO,QACtChO,KAAKmO,WAAW,IAAK,KAErBnO,KAAK+S,GAAK,IAAInC,EAAQ5Q,MACtBA,KAAKiT,OACT,CAEOvE,OAAOC,GACV3O,KAAKuM,WAAWmC,OAAOC,EAC3B,CACOR,WAAWtO,EAAWC,GACzBE,KAAKuM,WAAW4B,WAAWtO,EAAGC,EAClC,CACOwQ,UAAUzQ,EAAWC,GACxBE,KAAKuM,WAAW+D,UAAUzQ,EAAGC,EACjC,CACO2Q,UAAU5Q,EAAWC,GACxBE,KAAKuM,WAAWkE,UAAU5Q,EAAGC,EACjC,CACO6Q,UAAU9Q,EAAWC,GACxBE,KAAKuM,WAAWoE,UAAU9Q,EAAGC,EACjC,CACO4Q,UACH1Q,KAAKuM,WAAWmE,SACpB,E","sources":["njslab/Workshop/workshop-graph/10_Graph-System/GraphSystem/Graph/util.ts","njslab/Workshop/workshop-graph/10_Graph-System/GraphSystem/Graph/index.ts","njslab/Workshop/workshop-graph/10_Graph-System/GraphSystem/Algorithm/Dijkstra.ts","njslab/Workshop/workshop-graph/10_Graph-System/GraphSystem/Algorithm/AStar.ts","njslab/Workshop/workshop-graph/10_Graph-System/GraphSystem/Algorithm/MST.ts","njslab/Workshop/workshop-graph/10_Graph-System/GraphSystem/index.ts","njslab/Workshop/workshop-graph/10_Graph-System/Controller/Common/SceneManager/index.ts","njslab/Workshop/workshop-graph/10_Graph-System/Controller/Common/index.ts","njslab/Workshop/workshop-graph/10_Graph-System/Controller/Renderer/index.ts","njslab/Workshop/workshop-graph/10_Graph-System/GraphSystem/Algorithm/Delaunay.ts","njslab/Workshop/workshop-graph/10_Graph-System/Controller/index.ts","njslab/Workshop/workshop-graph/10_Graph-System/UIGraph/index.ts","njslab/Workshop/workshop-graph/10_Graph-System/index.ts"],"sourcesContent":["\nexport class Vector3 {\n    public x: number;\n    public y: number;\n    public z: number;\n    constructor(x: number, y: number, z: number = 0) {\n        this.x = x;\n        this.y = y;\n        this.z = z\n    }\n}\n\nexport const distance = (v0: Vector3, v1: Vector3) => {\n    return Math.sqrt(distance2(v0, v1));\n}\nconst distance2 = (v0: Vector3, v1: Vector3) => {\n    return (v0.x - v1.x) * (v0.x - v1.x) + (v0.y - v1.y) * (v0.y - v1.y) + (v0.z - v1.z) * (v0.z - v1.z);\n}\n\nexport const getLineIntersectPlane = (x1: number, y1: number, x2: number, y2: number, x3: number, y3: number, x4: number, y4: number) => {\n    // Check if none of the lines are of length 0\n    if ((x1 === x2 && y1 === y2) || (x3 === x4 && y3 === y4)) {\n        return undefined;\n    }\n\n    const denominator = ((y4 - y3) * (x2 - x1) - (x4 - x3) * (y2 - y1));\n\n    // Lines are parallel\n    if (denominator === 0) {\n        return undefined;\n    }\n\n    const ua = ((x4 - x3) * (y1 - y3) - (y4 - y3) * (x1 - x3)) / denominator;\n    const ub = ((x2 - x1) * (y1 - y3) - (y2 - y1) * (x1 - x3)) / denominator;\n\n    // is the intersection along the segments\n    if (ua < 0 || ua > 1 || ub < 0 || ub > 1) {\n        return undefined;\n    }\n\n    // Return a object with the x and y coordinates of the intersection\n    const x = x1 + ua * (x2 - x1);\n    const y = y1 + ua * (y2 - y1);\n\n    return [x, y];\n};\n\nconst lerp = (a: number, b: number, t: number) => { return a + t * (b - a); }\n\nexport const pointOnLine = (p: Vector3, p0: Vector3, p1: Vector3) => {\n    let dx = p1.x - p0.x,\n        dy = p1.y - p0.y,\n        t = ((p.x - p0.x) * dx + (p.y - p0.y) * dy) / (dx * dx + dy * dy),\n        x = lerp(p0.x, p1.x, t),\n        y = lerp(p0.y, p1.y, t);\n    return new Vector3(x, y);\n}\n\nexport const downloadJson = (collection, name = 'download',) => {\n    const link = document.createElement('a');\n    link.href = 'data:application/json;charset=utf-8,' + encodeURIComponent(collection);\n    link.download = `${name}`;\n    link.click();\n};","\nimport { Vector3, distance } from './util';\n\nimport { GraphSystem} from '..';\n\nexport class GraphCommon {\n    public type = 'node';\n    public isSelected = false;\n    public id = 0;\n    public visit = false;\n    public data: any = [];\n}\nexport class Graph {\n    public graphSystem: GraphSystem;\n    public nodes: Node[] = [];\n    public edges: Edge[] = [];\n\n    constructor(graphSystem: GraphSystem) {\n        this.graphSystem = graphSystem;\n    }\n   \n}\nexport class Edge extends GraphCommon {\n    public n0: Node;\n    public n1: Node;\n    public length: number = -1;\n    constructor(n0: Node, n1: Node) {\n        super();\n        this.type = 'edge';\n        this.n0 = n0;\n        this.n1 = n1;\n    }\n    public getLength() {\n        this.length = distance(this.n0.vec, this.n1.vec);\n        return this.length;\n    }\n    public toJSON() {\n        return {\n            id: this.id,\n            n0: this.n0.id,\n            n1: this.n1.id,\n            data: this.data,\n        };\n    }\n    public remove() {\n        this.n0.removeEdge(this);\n        this.n1.removeEdge(this);\n    }\n}\nexport class Node extends GraphCommon {\n    public graph: Graph;\n    public vec: Vector3;\n    public edges: Edge[] = [];\n    public r: number = 5;\n\n    public networkDistance = -1;\n    public countVisit = 0;\n    \n    constructor(graph: Graph, x: number, y: number, z: number = 0) {\n        super();\n        this.graph = graph;\n        this.type = 'node';\n        this.vec = new Vector3(x, y, z);\n    }\n    public reset(): void {\n        this.networkDistance = -1;\n        this.countVisit = 0;\n        this.visit = false;\n    }\n    public toJSON() {\n        return {\n            id: this.id,\n            vec: {x: this.vec.x, y: this.vec.y, z: this.vec.z},\n            data: this.data\n        };\n    }\n    public remove() {\n        this.graph.graphSystem.removeNode(this);\n    }\n    public removeEdge(other: Edge) {\n        this.edges.splice(this.edges.indexOf(other), 1);\n    }\n}\n","import { Node, Graph } from '../Graph';\n\nexport const getPath = (graph: Graph, p0: Node, p1: Node) => {\n    propagationByNode(graph.nodes, p0, costFnDistance, 0.1);\n    return backPropagation(graph.nodes, p1);\n}\n\n\nconst distanceTo = (x0: number, y0: number, z0: number, x1: number, y1: number, z1: number): number => {\n    return Math.sqrt((x0 - x1) * (x0 - x1) + (y0 - y1) * (y0 - y1) + (z0 - z1) * (z0 - z1));\n}\n// ..............................................................\nconst costFnDistance = (p0: Node, p1: Node, beta: number = 0.0002) => {\n    return distanceTo(p0.vec.x, p0.vec.y, p0.vec.z, p1.vec.x, p1.vec.y, p1.vec.z);\n}\nconst propagationByNode = (nodes: Node[], origin: Node, optimizer?: (current: Node, np: Node, Beta: number) => number | undefined, Beta: number = 1) => { //, PixelMap pMap, transitionCostDelegate cost) {\n    if (optimizer === undefined) {\n        optimizer = costFnDistance;\n    }\n\n    for (let i = 0; i < nodes.length; ++i) { nodes[i].reset(); }\n\n    let queue: Node[] = [origin];\n    origin.networkDistance = 0;\n\n    for (let i = 0; i < 10000000; ++i) {\n        if (queue.length === 0) { break; }\n        let currentNode: Node = queue[0];\n        queue.shift();\n\n        for (let j = 0; j < currentNode.edges.length; ++j) {\n            const edge = currentNode.edges[j];\n            const np: Node = currentNode === edge.n0 ? edge.n1 : edge.n0\n\n            const newCost = optimizer(currentNode, np, Beta);\n            const result = (currentNode.networkDistance + newCost);\n            const newTemp = result; /// this.UNIT_VALUE; // result < 0.001 ? result  : result / this.UNIT_VALUE;\n            if (np.networkDistance === -1.0 || newTemp < np.networkDistance) {\n                np.networkDistance = newTemp;\n                queue.push(np);\n            }\n        }\n    }\n}\n\nconst backPropagation = (nodes: Node[], destination: Node): Node[] => {\n    let j = 0; let k = 0;\n    // this.nodeTarget = destination;\n\n    let path: Node[] = [];\n    if (destination.networkDistance !== -1.0) {\n        path.push(nodes[destination.id]);\n\n        let currentNode: Node = destination;\n        for (j = 0; j < 100000; ++j) {\n\n            let smallest: Node = currentNode;\n            smallest.countVisit++;\n\n            for (k = 0; k < currentNode.edges.length; ++k) {\n                const edge = currentNode.edges[k];\n                const np: Node = currentNode === edge.n0 ? edge.n1 : edge.n0;\n\n                if (np.networkDistance < smallest.networkDistance) {\n                    smallest = np;\n                }\n            }\n\n            if (smallest === currentNode) {\n                break;\n            }\n            currentNode = smallest;\n            path.push(nodes[currentNode.id]);\n\n        }\n\n    }\n    return path;\n}\n\n\nclass GraphDijkstra {\n    public nodes: NodeDijkstra[] = [];\n    public edges: EdgeDijkstra[] = [];\n    public nodeOrigin: Node;\n    public nodeTarget: Node;\n    public constructor() {\n\n    }\n}\nclass EdgeDijkstra {\n    public id: number = -1;\n    public n0: NodeDijkstra;\n    public n1: NodeDijkstra;\n\n    constructor(n0: NodeDijkstra, n1: NodeDijkstra) {\n        this.n0 = n0;\n        this.n1 = n1;\n        this.n0.edges.push(this);\n        this.n1.edges.push(this);\n        n0.nodes.push(n1);\n        n1.nodes.push(n0);\n    }\n}\nclass NodeDijkstra {\n    public id: number = -1;\n    public x: number;\n    public y: number;\n    public z: number;\n\n    public edges: EdgeDijkstra[] = [];\n    public nodes: NodeDijkstra[] = [];\n\n    public networkDistance: number = -1;\n    public countVisit: number = 0;\n\n    constructor(x: number, y: number, z: number) {\n        this.x = x;\n        this.y = y;\n        this.z = z;\n    }\n    public reset(): void {\n        this.networkDistance = -1;\n        this.countVisit = 0;\n    }\n    public deepCopy(): NodeDijkstra {\n        let n = new NodeDijkstra(this.x, this.y, this.z);\n        n.id = this.id;\n        return n;\n    }\n}\n\n\n","import { Node, Graph } from '../Graph';\r\n\r\nexport const getPath = (graph: Graph, p0: Node, p1: Node) => {\r\n\r\n    const nodes = []\r\n    for(let i = 0 ; i < graph.nodes.length; ++i) {\r\n        const node =graph.nodes[i];\r\n        const newNode = new NodeAStar(node.vec.x, node.vec.y, node.vec.z)\r\n        newNode.id = node.id;\r\n        nodes.push(newNode);\r\n    }\r\n\r\n    const edges = []\r\n    for(let i = 0 ; i < graph.edges.length; ++i) {\r\n        const edge =graph.edges[i];\r\n        const newEdge = new EdgeAStar( nodes[edge.n0.id], nodes[edge.n1.id]  )\r\n        edges.push(newEdge);\r\n    }\r\n    return AStart.gePath(nodes[p0.id], nodes[p1.id])\r\n}\r\n\r\n\r\nclass AStart {\r\n    public static TYPE = {\r\n        Manhattan: 'Manhattan  ',\r\n        Euclidean: 'Euclidean ',\r\n    }\r\n    public static strength = 0.01;\r\n    public static distanceManhattan = (x0: number, y0: number, z0: number, x1: number, y1: number, z1: number) => {\r\n        return Math.abs(x0 - x1) + Math.abs(y0 - y1) + Math.abs(z0 - z1);\r\n    }\r\n    public static distanceEuclidean = (x0: number, y0: number, z0: number, x1: number, y1: number, z1: number) => {\r\n        return Math.sqrt((x0 - x1) * (x0 - x1) + (y0 - y1) * (y0 - y1) + (z0 - z1) * (z0 - z1));\r\n    }\r\n    public static gePath = (startNode: NodeAStar, endNode, type?: string) => {\r\n        this.typeHeuristic = this.distanceEuclidean;\r\n        if (type === AStart.TYPE.Manhattan) {\r\n            this.typeHeuristic = this.distanceManhattan;\r\n        }\r\n        \r\n        const openNodes = [startNode];\r\n        const closedNodes: NodeAStar[] = [];\r\n        let result = undefined;\r\n        let count = 100;\r\n        while (count--) {\r\n            result = this.propagation(openNodes, closedNodes, endNode);\r\n            if (result !== undefined && result.length) {\r\n                return result;\r\n            }\r\n        }\r\n        return result;\r\n    }\r\n\r\n    private static path: NodeAStar[] = [];\r\n    private static propagation = (openNodes, closedNodes, endNode) => {\r\n        if (openNodes.length > 0) {\r\n            // console.log(openNodes)\r\n            //find the lowest f in open nodes\r\n            let lowestF = 0;\r\n            for (let i = 0; i < openNodes.length; i++) {\r\n                if (openNodes[i].f < openNodes[lowestF].f) {\r\n                    lowestF = i;\r\n                }\r\n\r\n                if (openNodes[i].f === openNodes[lowestF].f) {\r\n                    if (openNodes[i].g > openNodes[lowestF].g) {\r\n                        lowestF = i;\r\n                    }\r\n                }\r\n            }\r\n            let current: NodeAStar = openNodes[lowestF];\r\n\r\n            if (current === endNode) {\r\n                //reached the end node so wait a sec and restart\r\n                return [current, current.previous, ...this.path];\r\n            }\r\n\r\n            //calculate path\r\n            this.path = [];\r\n            let temp = current;\r\n            while (temp.previous) {\r\n                this.path.push(temp.previous);\r\n                temp = temp.previous;\r\n\r\n                if (temp.previous === this.path[this.path.length-2]) {\r\n                    break;\r\n                }\r\n            }\r\n            // console.log(this.path.length);\r\n\r\n            openNodes.splice(openNodes.indexOf(current), 1);\r\n            closedNodes.push(current);\r\n\r\n            let neighbors = current.neighbors;\r\n            for (let i = 0; i < neighbors.length; i++) {\r\n                let neighbor = neighbors[i];\r\n\r\n                if (!closedNodes.includes(neighbor) && !neighbor.blocked) {\r\n                    let tempG = current.g + this.heuristic(neighbor, current) * this.strength;\r\n\r\n                    if (!openNodes.includes(neighbor)) {\r\n                        openNodes.push(neighbor);\r\n                    }\r\n                    else {\r\n                        continue;\r\n                    }\r\n\r\n                    neighbor.g = tempG;\r\n                    neighbor.h = this.heuristic(neighbor, endNode);\r\n                    neighbor.f = neighbor.g + neighbor.h;\r\n                    neighbor.previous = current\r\n                }\r\n            }\r\n            return undefined;\r\n        } else {\r\n            return this.path;\r\n        }\r\n    }\r\n    private static typeHeuristic: (x0: number, y0: number, z0: number, x1: number, y1: number, z1: number) => number;\r\n    private static heuristic = (a: NodeAStar, b: NodeAStar) => {\r\n        return this.typeHeuristic(a.x, a.y, a.z, b.x, b.y, b.z);\r\n    }\r\n\r\n}\r\nclass NodeAStar {\r\n    public id = -1;\r\n\r\n    public f = 0;\r\n    public h = 0;\r\n\r\n    public g = 0;\r\n\r\n    public x = 0;\r\n    public y = 0;\r\n    public z = 0;\r\n    public neighbors: NodeAStar[] = [];\r\n    public edges: EdgeAStar[] = [];\r\n    public previous = undefined;\r\n    public blocked = false;\r\n    constructor(x: number, y: number, z: number) {\r\n        this.x = x;\r\n        this.y = y;\r\n        this.z = z;\r\n    }\r\n}\r\nclass EdgeAStar {\r\n    public id: number = -1;\r\n    public n0: NodeAStar;\r\n    public n1: NodeAStar;\r\n\r\n    constructor(n0: NodeAStar, n1: NodeAStar) {\r\n        this.n0 = n0;\r\n        this.n1 = n1;\r\n        this.n0.edges.push(this);\r\n        this.n1.edges.push(this);\r\n        n0.neighbors.push(n1);\r\n        n1.neighbors.push(n0);\r\n    }\r\n}\r\n\r\nconst buildNetwork = (lns: any) => {\r\n    //  console.log(lns);\r\n\r\n    let nodes: NodeAStar[] = []\r\n    let edges: EdgeAStar[] = []\r\n\r\n    let nodesForEdge: NodeAStar[] = [];\r\n    for (let i = 0; i < lns.length; ++i) {\r\n        let p0 = lns[i].p0;\r\n        let p1 = lns[i].p1;\r\n        nodesForEdge.push(AddNode(p0, nodes));\r\n        nodesForEdge.push(AddNode(p1, nodes));\r\n    }\r\n    for (let i = 0; i < nodesForEdge.length; i += 2) {\r\n        AddEdge(nodesForEdge[i], nodesForEdge[i + 1], edges);\r\n    }\r\n\r\n    return nodes\r\n}\r\n\r\nconst AddEdge = (n1: NodeAStar, n2: NodeAStar, edges: EdgeAStar[]): EdgeAStar | undefined => {\r\n    if (n1 === n2) return undefined;\r\n\r\n    const testedEdge = findEdge(n1, n2, edges);\r\n    if (testedEdge !== undefined) {\r\n        return testedEdge;\r\n    }\r\n\r\n    let edge = new EdgeAStar(n1, n2);\r\n    edge.id = edges.length;\r\n    edges.push(edge);\r\n    return edge;\r\n}\r\nconst findEdge = (n0: NodeAStar, n1: NodeAStar, edges: EdgeAStar[]): EdgeAStar | undefined => {\r\n    for (let i = 0; i < edges.length; ++i) {\r\n        if ((edges[i].n0 === n0 && edges[i].n1 === n1) || (edges[i].n0 === n1 && edges[i].n1 === n0)) {\r\n            return edges[i];\r\n        }\r\n    }\r\n    return undefined;\r\n}\r\nconst AddNode = (p: any, nodes: NodeAStar[]): NodeAStar => {\r\n    for (let i = 0; i < nodes.length; ++i) {\r\n        if (distanceTo(p.x, p.y, p.z, nodes[i].x, nodes[i].y, nodes[i].z) < 0.01) {\r\n            return nodes[i];\r\n        }\r\n    }\r\n\r\n    let node = new NodeAStar(p.x, p.y, p.z);\r\n    node.id = nodes.length;\r\n    nodes.push(node);\r\n    return node;\r\n}\r\n\r\n\r\nconst distanceTo = (x0: number, y0: number, z0: number, x1: number, y1: number, z1: number): number => {\r\n    return Math.sqrt((x0 - x1) * (x0 - x1) + (y0 - y1) * (y0 - y1) + (z0 - z1) * (z0 - z1));\r\n}","import { Graph } from '../Graph'\r\nclass GraphMST {\r\n    private nodes = [];\r\n    private edges = [];\r\n    constructor() {\r\n        this.nodes = [];\r\n        this.edges = [];\r\n    }\r\n    addVertex(node) {\r\n        this.nodes.push(node);\r\n    }\r\n\r\n    addEdge(n0, n1, weight) {\r\n        this.edges.push(\r\n            { n0, n1, weight }\r\n        );\r\n    }\r\n    primMST(startNode) {\r\n        const visited = {};\r\n        const MST = [];\r\n\r\n        visited[startNode] = true;\r\n\r\n        while (MST.length < this.nodes.length - 1) {\r\n            let minEdge = null;\r\n\r\n            this.edges.forEach(edge => {\r\n                if ((visited[edge.n0] && !visited[edge.n1]) || (!visited[edge.n0] && visited[edge.n1])) {\r\n                    if (!minEdge || edge.weight < minEdge.weight) {\r\n                        minEdge = edge;\r\n                    }\r\n                }\r\n            });\r\n\r\n            if (!minEdge) break;\r\n\r\n            MST.push(minEdge);\r\n            visited[minEdge.n0] = true;\r\n            visited[minEdge.n1] = true;\r\n        }\r\n        return MST;\r\n    }\r\n}\r\n\r\n\r\nexport const getMST = (graph: Graph) => {\r\n    const g = new GraphMST();\r\n\r\n    for (let i = 0; i < graph.nodes.length; ++i) {\r\n        g.addVertex(graph.nodes[i].id);\r\n    }\r\n    for (let i = 0; i < graph.edges.length; ++i) {\r\n        const edge = graph.edges[i];\r\n        g.addEdge(edge.n0.id, edge.n1.id, edge.getLength() )\r\n    }\r\n\r\n    const MST = g.primMST(0);\r\n    // console.log(\"Minimum Spanning Tree:\");\r\n    // MST.forEach(edge => { console.log(`${edge.n0} - ${edge.n1} : ${edge.weight}`); });\r\n\r\n    return MST;\r\n}","import { Graph, Node, Edge } from './Graph';\n\nimport { getPath } from './Algorithm/Dijkstra';\nimport { getPath as getPathAStar } from './Algorithm/AStar';\nimport { getMST } from './Algorithm/MST';\n\nimport {\n    Vector3, distance,\n    getLineIntersectPlane, pointOnLine,\n} from './Graph/util';\n\nexport { Node, Edge } from './Graph';\n// import { Solution } from '../..';\n\nexport class GraphSystem {\n    public graph: Graph;\n    public pathMST = undefined;\n\n    public nodePre: Node | Edge | undefined = undefined;\n\n    private _captured: Node | Edge | undefined = undefined;\n\n    constructor() {\n        this.graph = new Graph(this);\n\n    }\n    public get captured() {\n        return this._captured\n    }\n    public set captured(v) {\n        if (this._captured) {\n            this._captured.isSelected = false;\n        }\n        this._captured = v;\n        if (v) {\n            this._captured.isSelected = true;\n        }\n    }\n    public resetCapture() {\n        this.captured = undefined;\n        this.nodePre = undefined;\n    }\n    // ..............................................................\n    public addNode(x: number, y: number, z: number = 0) {\n        const node = new Node(this.graph, x, y, 0);\n        this.graph.nodes.push(node);\n        this.resetCapture();\n        return node;\n    }\n    public addEdge(n0: Node, n1: Node) {\n        if (n0 === n1) return undefined;\n        if (this.findEdgeByNodes(n0, n1)) return undefined;\n\n        const edge = new Edge(n0, n1);\n        n0.edges.push(edge);\n        n1.edges.push(edge);\n        this.graph.edges.push(edge);\n\n        this.edgeSplitByEdge(edge);\n\n        this.resetCapture();\n        return edge;\n    }\n    public addEdgeByClosestNode(node: Node) {\n        const nn = this.findNode(node);\n        if (nn) this.addEdge(node, nn);\n        this.resetCapture();\n    }\n    public addEdgeSplit(n0: Node, n1: Node) {\n        const edge = new Edge(n0, n1);\n        n0.edges.push(edge);\n        n1.edges.push(edge);\n        this.graph.edges.push(edge);\n        return edge;\n    }\n    // ..............................................................\n    public edgeSplitByNode(node: Node, edge: Edge) {\n        const n0 = edge.n0;\n        const n1 = edge.n1;\n\n        this.addEdge(n0, node);\n        this.addEdge(node, n1);\n\n        this.removeEdge(edge);\n        this.resetCapture();\n    }\n    // edge split from a moved node by it's edges\n    public edgeSplitByNodeEdges(node: Node) {\n        const edgeRemove = [];\n\n        let theEdgeLength = node.edges.length;\n        for (let j = 0; j < theEdgeLength; ++j) {\n            // console.log(j);\n\n            const edge = node.edges[j];\n            const nodes: Node[] = [];\n\n            for (let i = this.graph.edges.length - 1; i > -1; --i) {\n                const other = this.graph.edges[i];\n                if (edge.n0 !== other.n0 &&\n                    edge.n0 !== other.n1 &&\n                    edge.n1 !== other.n0 &&\n                    edge.n1 !== other.n1) {\n                    const inter = getIntersectEdge(edge, other);\n                    if (inter) {\n                        // console.log(inter)\n                        const nn = new Node(this.graph, inter[0], inter[1])\n                        this.graph.nodes.push(nn);\n                        this.addEdgeSplit(nn, other.n0);\n                        this.addEdgeSplit(nn, other.n1);\n\n                        this.removeEdge(other);\n                        nodes.push(nn);\n                    }\n                }\n            }\n\n            if (nodes.length > 0) {\n                let nodeFirst = edge.n0;\n                nodes.push(edge.n1);\n                const disList = nodes.map((n) => { return distance(n.vec, edge.n0.vec); });\n                const indices = disList.map((val, index) => index);\n                const sortedDis = indices.sort((a, b) => disList[a] - disList[b]);\n                this.addEdgeSplit(nodeFirst, nodes[sortedDis[0]]);\n                for (let i = 0; i < sortedDis.length - 1; ++i) {\n                    this.addEdgeSplit(nodes[sortedDis[i]], nodes[sortedDis[i + 1]]);\n                }\n     \n                // edge.n0.removeEdge(edge);\n                // edge.n1.removeEdge(edge);\n                edgeRemove.push(edge);\n                this.graph.edges.splice(this.graph.edges.indexOf(edge), 1);\n            }\n        }\n\n        edgeRemove.forEach((e) => {\n            e.n0.removeEdge(e);\n            e.n1.removeEdge(e);\n        });\n\n        this.updateID();\n    }\n    // add a node by edge intersection\n    public edgeSplitByEdge(edge: Edge, updateID = true) {\n        const nodes: Node[] = [];\n\n        for (let i = this.graph.edges.length - 1; i > -1; --i) {\n            const other = this.graph.edges[i];\n            if (edge.n0 !== other.n0 &&\n                edge.n0 !== other.n1 &&\n                edge.n1 !== other.n0 &&\n                edge.n1 !== other.n1) {\n                const inter = getIntersectEdge(edge, other);\n                if (inter) {\n                    // console.log(inter)\n                    const nn = new Node(this.graph, inter[0], inter[1])\n                    this.graph.nodes.push(nn);\n                    this.addEdgeSplit(nn, other.n0);\n                    this.addEdgeSplit(nn, other.n1);\n\n                    this.removeEdge(other);\n                    nodes.push(nn);\n                }\n            }\n        }\n\n        if (nodes.length > 0) {\n            let nodeFirst = edge.n0;\n            nodes.push(edge.n1);\n            const disList = nodes.map((n) => { return distance(n.vec, edge.n0.vec); });\n            const indices = disList.map((val, index) => index);\n            const sortedDis = indices.sort((a, b) => disList[a] - disList[b]);\n            this.addEdgeSplit(nodeFirst, nodes[sortedDis[0]]);\n            for (let i = 0; i < sortedDis.length - 1; ++i) {\n                this.addEdgeSplit(nodes[sortedDis[i]], nodes[sortedDis[i + 1]]);\n            }\n            this.removeEdge(edge);\n        }\n\n        updateID && this.updateID();\n    }\n    // ..............................................................\n    public removeNode(node: Node) {\n        node.edges.forEach((edge) => {\n            if (edge.n0 === node) {\n                edge.n1.removeEdge(edge)\n            } else {\n                edge.n0.removeEdge(edge)\n            }\n            this.graph.edges.splice(this.graph.edges.indexOf(edge), 1);\n        });\n\n        this.graph.nodes.splice(this.graph.nodes.indexOf(node), 1);\n\n        this.updateID();\n        this.resetCapture();\n    }\n    public removeEdge(other: Edge) {\n        other.n0.removeEdge(other);\n        other.n1.removeEdge(other);\n        this.graph.edges.splice(this.graph.edges.indexOf(other), 1);\n    }\n    // ..............................................................\n    public findNode(node: Node) {\n        let theDis = Number.MAX_VALUE;\n        let index = -1;\n        for (let i = 0; i < this.graph.nodes.length; ++i) {\n            if (this.graph.nodes[i] === node) continue;\n            const vec = this.graph.nodes[i].vec;\n            const dis = distance(vec, node.vec);\n            if (theDis > dis) {\n                theDis = dis;\n                index = i;\n            }\n        }\n        if (index > -1) { return this.graph.nodes[index]; }\n        return undefined;\n    }\n    public findNodeVec(x: number, y: number, minDis = 8) {\n        let theDis = Number.MAX_VALUE;\n        let index = -1;\n        const v = new Vector3(x, y);\n        for (let i = 0; i < this.graph.nodes.length; ++i) {\n            const vec = this.graph.nodes[i].vec;\n            const dis = distance(vec, v);\n            if (theDis > dis) {\n                theDis = dis;\n                index = i;\n            }\n        }\n        if (index > -1 && theDis < minDis) { return this.graph.nodes[index]; }\n        return undefined;\n    }\n    public findEdgeVec(x: number, y: number, minDis = 8) {\n        const mv = new Vector3(x, y, 0)\n        for (let i = 0; i < this.graph.edges.length; ++i) {\n            const edge = this.graph.edges[i];\n            const cp = pointOnLine(mv, edge.n0.vec, edge.n1.vec);\n\n            const dis = distance(mv, cp);\n            if (dis < minDis) {\n                return { edge, vec: cp };\n            }\n        }\n        return undefined;\n    }\n    public findEdgeByEdge(edge: Edge) {\n        return this.findEdgeByNodes(edge.n0, edge.n1);\n    }\n    public findEdgeByNodes(n0: Node, n1: Node) {\n        for (let i = 0; i < this.graph.edges.length; ++i) {\n            const other = this.graph.edges[i];\n            if ((n0 === other.n0 && n1 === other.n1) || (n0 === other.n1 && n1 === other.n0)) {\n                return other;\n            }\n        }\n        return undefined;\n    }\n    public getEdgeByTwoNode(n0: Node, n1: Node) {\n        for (let i = 0; i < this.graph.edges.length; ++i) {\n            const edge = this.graph.edges[i];\n            if ((edge.n0 === n0 && edge.n1 === n1) || (edge.n0 === n1 && edge.n1 === n0)) {\n                return edge;\n            }\n        }\n        return undefined;\n    }\n    public mergeTwoNodes(n0: Node, n1: Node) {\n\n        const others = []\n        for (let i = 0; i < n1.edges.length; ++i) {\n            const edge = n1.edges[i];\n            if (edge.n0 === n1) {\n                others.push(edge.n1);\n            } else {\n                others.push(edge.n0);\n            }\n        }\n        n1.remove();\n\n        others.forEach((n) => {\n            if (!this.getEdgeByTwoNode(n0, n)) {\n                this.addEdge(n0, n);\n            }\n        })\n    }\n    // ..............................................................\n    public updateID() {\n        for (let i = 0; i < this.graph.nodes.length; ++i) { this.graph.nodes[i].id = i; }\n        for (let i = 0; i < this.graph.edges.length; ++i) { this.graph.edges[i].id = i; }\n    }\n    public computePath() {\n        return computePath(this.graph);\n    }\n    // ..............................................................\n    public computePathAStar() {\n        return computePathAStar(this.graph);\n    }\n    public computeMST() {\n        const mst = computeMST(this.graph);\n        this.pathMST = mst;\n        return mst;\n    }\n}\n\n// ..............................................................\n\nconst getIntersectEdge = (e0: Edge, e1: Edge) => {\n    return getIntersect(e0.n0, e0.n1, e1.n0, e1.n1);\n}\nconst getIntersect = (n0: Node, n1: Node, n2: Node, n3: Node) => {\n    return getLineIntersectPlane(n0.vec.x, n0.vec.y, n1.vec.x, n1.vec.y, n2.vec.x, n2.vec.y, n3.vec.x, n3.vec.y);\n}\nconst computeMST = (graph) => {\n    const pathMST = getMST(graph);\n    return pathMST;\n}\nconst computePath = (graph) => {\n    const path = getPath(graph, graph.nodes[0], graph.nodes[graph.nodes.length - 1]);\n    return path;\n}\nconst computePathAStar = (graph) => {\n    const path = getPathAStar(graph, graph.nodes[0], graph.nodes[graph.nodes.length - 1]);\n    return path;\n}","\nexport class SceneManager {\n  private histories: any = [];\n  private currentIndex = -1;\n  public reset() {\n    this.histories = [];\n    this.currentIndex = -1;\n  }\n  public push(data: any) {\n    if (this.currentIndex < this.histories.length - 1) {\n      this.histories.splice(this.currentIndex + 1, this.histories.length);\n    }\n    this.histories.push(data);\n    this.currentIndex = this.histories.length - 1;\n  }\n  public getCurrentIndex() {\n    return this.currentIndex;\n  }\n  public getHistoryLength() {\n    return this.histories.length;\n  }\n  public getCurrentState() {\n    return { currentIndex: this.getCurrentIndex(), historyNum: this.getHistoryLength() };\n  }\n  public undo() {\n    if (this.currentIndex === 0) { return undefined; }\n    this.currentIndex--;\n    return this.histories[this.currentIndex];\n  }\n  public redo() {\n    this.currentIndex++;\n    this.currentIndex = this.currentIndex < this.histories.length ? this.currentIndex : this.histories.length - 1;\n    return this.histories[this.currentIndex];\n  }\n}\n\nexport class SceneState {\n  private manager: SceneManager;\n  constructor() {\n    // this.scene = scene;\n    this.manager = new SceneManager();\n  }\n  public getLog() {\n    return this.manager.getCurrentState();\n  }\n  public resetState() {\n    this.manager.reset();\n    this.captureState([]);\n  }\n  public captureState(data) {\n    this.manager.push(data);\n    // this.manager.push(this.scene.common.getData());\n    const state = this.manager.getCurrentState();\n    // console.log(state);\n    return state;\n  }\n  public undo() {\n    return this.manager.undo();\n    // const state = this.manager.undo();\n    // this.scene.common.populateArea(state);\n  }\n  public redo() {\n    return this.manager.redo();\n    // const state = this.manager.redo();\n    // this.scene.common.populateArea(state);\n  }\n}\n\n\n","import { downloadJson } from '../../GraphSystem/Graph/util';\nimport { Controller } from '..';\nimport { GraphSystem } from '../../GraphSystem';\nimport { SceneState } from './SceneManager';\n\nexport class Common {\n    public controller: Controller;\n    public sceneState: SceneState;\n\n    public graphSystem: GraphSystem;\n\n    constructor(controller: Controller) {\n        this.controller = controller;\n        this.graphSystem = this.controller.graphSystem;\n        this.sceneState = new SceneState();\n    }\n    public reset() {\n        const graph = this.controller.graphSystem.graph;\n        graph.nodes = [];\n        graph.edges = [];\n        this.capture();\n    }\n    public capture() {\n        // console.trace();\n        this.sceneState.captureState(this.toJSON());\n\n        this.updateUndoRedoHist();\n    }\n    public updateUndoRedoHist() {\n        if (this.controller.divHist) {\n            const hist = this.sceneState.getLog();\n            this.controller.divHist.textContent = `hist: ${hist.currentIndex}/${hist.historyNum-1}`;\n        }\n    }\n    // ...........................................\n    public undo() {\n        const data = this.sceneState.undo();\n        data && this.dump(data);\n        this.updateUndoRedoHist();\n        this.controller.graphSystem.resetCapture();\n        // console.log('undo', data);\n    }\n    public redo() {\n        const data = this.sceneState.redo();\n        data && this.dump(data);\n        this.updateUndoRedoHist();\n        this.controller.graphSystem.resetCapture();\n        // console.log('redo', data);\n    }\n    // ...........................................\n    public toJSON() {\n        const data = { node: [], edge: [] }\n        this.controller.graphSystem.graph.nodes.forEach((n) => { data.node.push(n.toJSON()); });\n        this.controller.graphSystem.graph.edges.forEach((e) => { data.edge.push(e.toJSON()); });\n        return data;\n    }\n    public exportJSON() {\n        const obj = JSON.stringify(this.toJSON());\n        downloadJson(obj, 'graph.json');\n    }\n    public dump(data) {\n        const graphSystem = this.controller.graphSystem;\n        graphSystem.graph.nodes = [];\n        graphSystem.graph.edges = [];\n\n        for (let i = 0; i < data.node.length; ++i) {\n            const nodeData = data.node[i];\n            const node = graphSystem.addNode(nodeData.vec.x, nodeData.vec.y, nodeData.vec.z);\n            node.id = nodeData.id;\n            node.data = nodeData.data;\n        }\n        for (let i = 0; i < data.edge.length; ++i) {\n            const edgeData = data.edge[i];\n            const edge = graphSystem.addEdge(graphSystem.graph.nodes[edgeData.n0], graphSystem.graph.nodes[edgeData.n1]);\n            edge.id = edgeData.id;\n            edge.data = edgeData.data;\n        }\n    }\n    public populate() {\n        const x = Math.random() * this.controller.canvas.width;\n        const y = Math.random() * this.controller.canvas.height;\n        this.controller.mouseClick(x, y);\n    }\n    // ...........................................\n    public toggleDelaunay(v: boolean) { this.controller.renderer.toggleDelaunay = v; }\n    public toggleMST(v: boolean) { \n        this.controller.graphSystem.computeMST();\n        this.controller.renderer.toggleMST = v; \n    }\n\n    // ...........................................\n    public removeSelection() {\n        // console.log(this.graphSystem.captured)\n        if (this.controller.graphSystem.captured) {\n            this.controller.graphSystem.captured.remove();\n            this.controller.graphSystem.captured = undefined;\n        }\n    }\n    public addNodeWithClosestNode(x,y) {\n        const node = this.graphSystem.addNode(x, y, 0);\n        this.graphSystem.addEdgeByClosestNode(node);\n    }\n}","import { Controller } from '..';\nimport { Node, Edge } from '../../GraphSystem';\nimport { getDelaunay } from '../../GraphSystem/Algorithm/Delaunay';\n\nexport class GraphRenderer {\n    public controller: Controller;\n\n    public toggleDelaunay = false;\n    public toggleMST = false;\n    \n    constructor(controller: Controller) {\n        this.controller = controller;\n    }\n    public render(ctx: CanvasRenderingContext2D) {\n\n        // this.graph.render(ctx);\n\n\n        // this.divSel.textContent = JSON.stringify(this.graphSystem.captured);\n\n        if (this.controller.graphSystem.captured) {\n            this.controller.divSel.textContent = this.controller.graphSystem.captured.type;\n        } else {\n            this.controller.divSel.textContent = 'undefined';\n        }\n\n        ctx.beginPath();\n        ctx.arc(this.controller.m.x, this.controller.m.y, 2, 0, 3.14 * 2);\n        ctx.closePath();\n        ctx.fillStyle = '#888';\n        ctx.fill();\n\n\n        if (this.toggleMST) {\n            if (this.controller.graphSystem.pathMST) {\n                const nodes = this.controller.graphSystem.graph.nodes\n                this.controller.graphSystem.pathMST.forEach( e => {\n                    const v0 = nodes[e.n0].vec;\n                    const v1 = nodes[e.n1].vec;\n                    ctx.beginPath();\n                    ctx.moveTo(v0.x, v0.y);\n                    ctx.lineTo(v1.x, v1.y);\n                    ctx.lineWidth = 5;\n                    ctx.stroke();\n                });\n            }\n        }\n\n        if (this.toggleDelaunay) {\n            getDelaunay(ctx, this.controller.graphSystem.graph.nodes);\n        }\n\n\n        this.renderGraph(ctx);\n\n    }\n    public renderGraph(ctx: CanvasRenderingContext2D) {\n        this.controller.log = `N:${this.controller.graphSystem.graph.nodes.length}, E:${this.controller.graphSystem.graph.edges.length}`;\n        // console.log(`N:${this.controller.graphSystem.graph.nodes.length}, E:${this.controller.graphSystem.graph.edges.length}`)\n        this.controller.graphSystem.graph.edges.forEach((e: Edge) => { this.renderGraphEdge(ctx, e); })\n        this.controller.graphSystem.graph.nodes.forEach((n: Node) => { this.renderGraphNode(ctx, n); })\n    }\n    public renderGraphNode(ctx: CanvasRenderingContext2D, node: Node) {\n\n        ctx.beginPath();\n        ctx.arc(node.vec.x, node.vec.y, node.r, 0, 3.14 * 2);\n        ctx.closePath();\n        ctx.fillStyle = '#ff0000';\n        ctx.fill();\n        if (node.isSelected) {\n            ctx.lineWidth = 3;\n            ctx.strokeStyle = '#00f';\n            ctx.stroke();\n        }\n\n        ctx.strokeStyle = '#ff0000';\n        ctx.lineWidth = 1;\n        ctx.strokeText(`${node.networkDistance}`, node.vec.x, node.vec.y - 20);\n        ctx.strokeText(`${node.id}`, node.vec.x, node.vec.y - 7);\n    }\n    public renderGraphEdge(ctx: CanvasRenderingContext2D, edge: Edge) {\n        if (edge.isSelected) {\n            ctx.lineWidth = 3;\n            ctx.strokeStyle = '#00f';\n            ctx.beginPath();\n            ctx.moveTo(edge.n0.vec.x, edge.n0.vec.y);\n            ctx.lineTo(edge.n1.vec.x, edge.n1.vec.y);\n            ctx.stroke();\n        }\n        ctx.lineWidth = 1;\n        ctx.beginPath();\n        ctx.moveTo(edge.n0.vec.x, edge.n0.vec.y);\n        ctx.lineTo(edge.n1.vec.x, edge.n1.vec.y);\n        ctx.strokeStyle = '#0f0';\n        ctx.stroke();\n\n        ctx.strokeStyle = '#00ff00';\n        ctx.lineWidth = 1\n        const x = edge.n0.vec.x + (edge.n1.vec.x - edge.n0.vec.x) * 0.5\n        const y = edge.n0.vec.y + (edge.n1.vec.y - edge.n0.vec.y) * 0.5\n        ctx.strokeText(`${edge.id}`, x, y - 7)\n    }\n}","import { Delaunay, NVector3 } from '../../../../../../lib/NJSCore';\n\nexport const getDelaunay = (ctx, vs) => {\n    const delaunay = new Delaunay(vs.map((v) => v.vec));\n    delaunay.DrawTriClass(ctx)\n}","import { GraphSystem, Edge, Node } from '../GraphSystem';\nimport { Vector3, distance } from '../GraphSystem/Graph/util'\nimport { Common } from './Common';\nimport { GraphRenderer } from './Renderer';\n\n// import { Graph, Vector3,  } from './GraphSystem';\n\nexport class Controller {\n    public common: Common;\n    public graphSystem: GraphSystem;\n    public renderer: GraphRenderer;\n\n    public canvas: HTMLCanvasElement;\n\n    public divHist: HTMLDivElement; // = document.createElement('div');\n    public divLog: HTMLDivElement;\n    public divSel: HTMLDivElement;\n\n    public needPopulate = false;\n    public m = new Vector3(0, 0, 0);\n    public log: string = '';\n\n\n    private wasMoved = false;\n\n    constructor(canvas: HTMLCanvasElement) {\n        this.graphSystem = new GraphSystem();\n        this.common = new Common(this)\n        this.renderer = new GraphRenderer(this)\n        this.canvas = canvas;\n    }\n\n    // ..........................................................\n    public mouseDown(x: number, y: number): void {\n        // console.log('down');\n        const node = this.graphSystem.findNodeVec(x, y);\n\n        if (this.graphSystem.captured && this.graphSystem.captured !== node) {\n            this.graphSystem.nodePre = this.graphSystem.captured;\n        };\n\n        this.graphSystem.captured = node\n    }\n    public mouseClick(x: number, y: number): void {\n        // console.log('click');\n        this.graphSystem.captured = this.graphSystem.findNodeVec(x, y);\n\n\n        // add edge between selected node and pre-selected node\n        if (this.graphSystem.nodePre && this.graphSystem.captured) {\n            // console.log('connection needed')\n            this.graphSystem.addEdge(this.graphSystem.nodePre as Node, this.graphSystem.captured as Node);\n            this.common.capture();\n            this.updatePost()\n            return;\n        }\n\n\n        // add a node on edge\n        const closeEdge = this.graphSystem.findEdgeVec(x, y);\n        if (closeEdge && this.graphSystem.captured === undefined) {\n            const node = this.graphSystem.addNode(closeEdge.vec.x, closeEdge.vec.y);\n            this.graphSystem.edgeSplitByNode(node, closeEdge.edge);\n            this.common.capture();\n            this.updatePost()\n            return;\n        }\n\n\n        // click on canvas for adding a node with closest node\n        if (this.graphSystem.captured === undefined) {\n            this.common.addNodeWithClosestNode(x, y)\n            this.common.capture();\n            this.updatePost()\n            return;\n        }\n    }\n\n    public mouseMove(x: number, y: number): void {\n        // console.log('move');\n        this.m.x = x;\n        this.m.y = y;\n    }\n    public mouseUp() {\n        // console.log('up');\n        if (this.graphSystem.captured && this.graphSystem.captured.type === 'node') {\n            const node = this.graphSystem.captured as Node;\n\n            this.graphSystem.edgeSplitByNodeEdges(node)\n            // node.edges.forEach((e, i) => {\n\n            //     // setTimeout(() => {\n            //     console.log(node.edges.length)\n            //     this.graphSystem.edgeSplitByEdge(e);\n            //     // }, 100);\n            // })\n\n            // merge two node into one node\n            const other = this.graphSystem.findNode(node);\n            if (other) {\n                const dis = distance(node.vec, other.vec);\n                if (dis < 8) {\n                    this.graphSystem.mergeTwoNodes(other, node);\n                }\n            }\n\n\n            if (this.wasMoved) {\n                this.common.capture();\n                this.wasMoved = false;\n            }\n\n            this.graphSystem.captured = undefined;\n\n\n            this.updatePost();\n        }\n    }\n    public mouseDrag(x: number, y: number): void {\n        // console.log('drag');\n        if (this.graphSystem.captured && this.graphSystem.captured.type === 'node') {\n            const node = this.graphSystem.captured as Node;\n            node.vec.x = x;\n            node.vec.y = y;\n        }\n        this.wasMoved = true;\n    }\n    public updatePost() {\n        if (this.renderer.toggleMST) {\n            this.graphSystem.computeMST();\n        }\n    }\n\n    public render(ctx: CanvasRenderingContext2D) {\n        if (this.needPopulate) {\n            this.populate();\n        }\n\n        this.divLog.textContent = this.log;\n\n        this.renderer.render(ctx);\n    }\n    // .................... AIP Call\n    public exportJSON() { return this.common.exportJSON(); }\n    public populate() { return this.common.populate(); }\n}\n\n","import { Solution } from '..';\nexport class UIGraph {\n    app: Solution;\n    constructor(app: Solution) {\n        this.app = app;\n        this.initUI();\n    }\n    public initUI() {\n        const divMenu = document.createElement('div');\n        divMenu.style.position = 'absolute';\n        divMenu.style.background = '#222';\n        divMenu.style.padding = '10px';\n        this.app.divHost.appendChild(divMenu);\n\n        const divBtn = document.createElement('button');\n        divBtn.textContent = 'run'\n        divBtn.onclick = () => {\n            this.app.controller.needPopulate = !this.app.controller.needPopulate;\n        }\n        divMenu.appendChild(divBtn);\n\n        const divRemove = document.createElement('button');\n        divRemove.textContent = 'remove'\n        divRemove.onclick = () => {\n            this.app.controller.common.removeSelection();\n        }\n        divMenu.appendChild(divRemove);\n\n        const btnExport = document.createElement('button');\n        btnExport.textContent = 'Export JSON';\n        divMenu.appendChild(btnExport);\n        btnExport.onclick = () => {\n            this.app.controller.exportJSON();\n        }\n\n        const divText = document.createElement('div');\n        divText.textContent = 'N:0, E:0';\n        divText.style.color = '#bbb';\n        divMenu.appendChild(divText);\n        this.app.controller.divLog = divText;\n\n        const divHist = document.createElement('div');\n        divHist.textContent = 'hist: 0';\n        divHist.style.color = '#bbb';\n        divMenu.appendChild(divHist);\n        this.app.controller.divHist = divHist;\n\n        const divSel = document.createElement('div');\n        divSel.textContent = 'undefined';\n        divSel.style.color = '#bbb';\n        divMenu.appendChild(divSel);\n        this.app.controller.divSel = divSel;\n\n        const resetBtn = getBtn('reset', () => { this.app.controller.common.reset(); })\n        divMenu.appendChild(resetBtn);\n\n        const undoBtn = getBtn('undo', () => { this.app.controller.common.undo(); })\n        divMenu.appendChild(undoBtn);\n\n        const redoBtn = getBtn('redo', () => { this.app.controller.common.redo(); })\n        divMenu.appendChild(redoBtn);\n\n        const divDelaunay = getCheckBox('Delaunay', (v) => { this.app.controller.common.toggleDelaunay(v); })\n        divMenu.appendChild(divDelaunay.div);\n\n        const divMST = getCheckBox('MST', (v) => { this.app.controller.common.toggleMST(v); })\n        divMenu.appendChild(divMST.div);\n    }\n}\n\nconst getBtn = (title: string, fn: () => void) => {\n    const divBtn = document.createElement('button');\n    divBtn.textContent = title;\n    divBtn.onclick = () => { fn(); }\n    return divBtn;\n};\nexport const getCheckBox = (title: string, fn: (v: boolean) => void) => {\n    const div = document.createElement('div');\n    div.style.display = 'flex';\n\n    const checkBox = document.createElement('input');\n    checkBox.type = 'checkbox';\n    checkBox.defaultChecked = false;\n    const text = document.createElement('div');\n    text.textContent = title;\n    text.style.color = '#aaa';\n    div.appendChild(checkBox);\n    div.appendChild(text);\n    checkBox.onchange = () => fn(checkBox.checked);\n    return {\n        div, checkBox\n    }\n};","import { RendererCanvas } from '../../../../lib';\r\n\r\nimport { Controller } from './Controller';\r\nimport { UIGraph } from './UIGraph';\r\n\r\nexport class Solution extends RendererCanvas {\r\n    public controller: Controller;\r\n    public ui: UIGraph;\r\n\r\n    constructor(id: string) {\r\n        super(document.getElementById(id) as HTMLDivElement);\r\n        this.canvas.style.position = 'absolute';\r\n\r\n        this.init();\r\n    }\r\n    public init() {\r\n        this.controller = new Controller(this.canvas);\r\n        this.mouseClick(300, 300);\r\n\r\n        this.ui = new UIGraph(this);\r\n        this.start()\r\n    }\r\n\r\n    public render(ctx: CanvasRenderingContext2D): void {\r\n        this.controller.render(ctx);\r\n    }\r\n    public mouseClick(x: number, y: number): void {\r\n        this.controller.mouseClick(x, y);\r\n    }\r\n    public mouseDown(x: number, y: number): void {\r\n        this.controller.mouseDown(x, y)\r\n    }\r\n    public mouseMove(x: number, y: number): void {\r\n        this.controller.mouseMove(x, y);\r\n    }\r\n    public mouseDrag(x: number, y: number): void {\r\n        this.controller.mouseDrag(x, y)\r\n    }\r\n    public mouseUp() {\r\n        this.controller.mouseUp();\r\n    }\r\n}\r\n\r\n\r\n"],"names":["Vector3","constructor","x","y","z","this","distance","v0","v1","Math","sqrt","distance2","lerp","a","b","t","pointOnLine","p","p0","p1","dx","dy","GraphCommon","type","isSelected","id","visit","data","Graph","graphSystem","nodes","edges","Edge","n0","n1","super","length","getLength","vec","toJSON","remove","removeEdge","Node","graph","r","networkDistance","countVisit","reset","removeNode","other","splice","indexOf","distanceTo","x0","y0","z0","x1","y1","z1","costFnDistance","propagationByNode","origin","optimizer","Beta","undefined","i","queue","currentNode","shift","j","edge","np","newCost","newTemp","push","backPropagation","destination","k","path","smallest","AStart","TYPE","Manhattan","Euclidean","strength","distanceManhattan","abs","distanceEuclidean","gePath","startNode","endNode","typeHeuristic","openNodes","closedNodes","result","count","propagation","lowestF","f","g","current","previous","temp","neighbors","neighbor","includes","blocked","tempG","heuristic","h","NodeAStar","EdgeAStar","GraphMST","addVertex","node","addEdge","weight","primMST","visited","MST","minEdge","forEach","GraphSystem","pathMST","nodePre","_captured","captured","v","resetCapture","addNode","findEdgeByNodes","edgeSplitByEdge","addEdgeByClosestNode","nn","findNode","addEdgeSplit","edgeSplitByNode","edgeSplitByNodeEdges","edgeRemove","theEdgeLength","inter","getIntersectEdge","nodeFirst","disList","map","n","sortedDis","val","index","sort","e","updateID","theDis","Number","MAX_VALUE","dis","findNodeVec","minDis","findEdgeVec","mv","cp","findEdgeByEdge","getEdgeByTwoNode","mergeTwoNodes","others","computePath","computePathAStar","computeMST","mst","e0","e1","getIntersect","n2","n3","x2","y2","x3","y3","x4","y4","denominator","ua","ub","getLineIntersectPlane","getMST","getPath","newNode","newEdge","getPathAStar","SceneManager","histories","currentIndex","getCurrentIndex","getHistoryLength","getCurrentState","historyNum","undo","redo","SceneState","manager","getLog","resetState","captureState","Common","controller","sceneState","capture","updateUndoRedoHist","divHist","hist","textContent","dump","exportJSON","collection","name","link","document","createElement","href","encodeURIComponent","download","click","downloadJson","JSON","stringify","nodeData","edgeData","populate","random","canvas","width","height","mouseClick","toggleDelaunay","renderer","toggleMST","removeSelection","addNodeWithClosestNode","GraphRenderer","render","ctx","divSel","beginPath","arc","m","closePath","fillStyle","fill","moveTo","lineTo","lineWidth","stroke","vs","Delaunay","DrawTriClass","getDelaunay","renderGraph","log","renderGraphEdge","renderGraphNode","strokeStyle","strokeText","Controller","common","divLog","needPopulate","wasMoved","mouseDown","updatePost","closeEdge","mouseMove","mouseUp","mouseDrag","UIGraph","app","initUI","divMenu","style","position","background","padding","divHost","appendChild","divBtn","onclick","divRemove","btnExport","divText","color","resetBtn","getBtn","undoBtn","redoBtn","divDelaunay","getCheckBox","div","divMST","title","fn","display","checkBox","defaultChecked","text","onchange","checked","Solution","RendererCanvas","getElementById","ui","init","start"],"sourceRoot":""}