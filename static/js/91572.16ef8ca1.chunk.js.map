{"version":3,"file":"static/js/91572.16ef8ca1.chunk.js","mappings":"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","sources":["njslab/Project/Project_03_SlowZone/01_JSAPI/Tint/FilterGLViewDarkForDarken.ts","njslab/Project/Project_03_SlowZone/01_JSAPI/UI/index.ts","njslab/Project/Project_03_SlowZone/02_Three/index.ts"],"sourcesContent":["import { NVector3, GLShaderCommon } from '../../../../../lib/NJSCore';\n\n// import { Mat3 } from '../../AppCore/GLUtility/Mat3';\n\nexport class FilterGLViewDarkForDarken {\n\n    gl: WebGLRenderingContext;\n    program: WebGLProgram;\n    fragmentShader: WebGLShader;\n    vertexShader: WebGLShader;\n    matrixLocation: WebGLProgram;\n    posBuffer: WebGLBuffer;\n    colBuffer: WebGLBuffer;\n    vertexs: Float32Array;\n\n    posLocAtt: number;\n    colLocAtt: number;\n    matLoc: WebGLUniformLocation;\n    colLoc: WebGLUniformLocation;\n    cVecLoc: WebGLUniformLocation;\n    mouseLoc: WebGLUniformLocation;\n    timeGL: WebGLUniformLocation;\n    // startTime: number;\n    // randomSeed: number;\n\n    vShader: WebGLShader;\n    fShader: WebGLShader;\n\n    v = `\n    attribute vec2 a_position;\n    attribute vec4 a_color;\n    \n    varying vec4 f_color;\n\n    void main() {\n\n        vec2 mouse_distance = vec2(0,0) - (a_position.xy /vec2(2,2));\n        float red = 1.0 - length(mouse_distance);\n        f_color = vec4(a_position, 0, 1.0);\n    \n        // float dis = distance(vec2(a_position.xy), vec2(0,0));\n\n        // f_color = vec4(dis * 0.6, 0,0,1);\n        gl_Position = vec4( a_position, 0, 1);\n    }\n    `;\n\n    f = `\n    precision highp float;\n\n    varying vec4 f_color;\n    \n    void main() {\n        vec2 mouse_distance = vec2(0,0) - (f_color.xy /vec2(5,5));\n\n        float col =  length(mouse_distance*5.);\n        float val = 1.0 - length(mouse_distance*8.);\n        \n        gl_FragColor = vec4(0.19,0.19,0.19, col);\n\n    }\n    `;\n\n    positionAttribLocation: WebGLProgram;\n    colorAttribLocation: WebGLProgram;\n    translation: NVector3;\n    color: number[];\n    colArray: Float32Array;\n\n    constructor(gl: WebGLRenderingContext, xt: number = 100, yt: number = 100, zt: number = 0, xs: number = 1, ys: number = 1, zs: number = 1) {\n        this.gl = gl;\n        // this.translation = new NVector3(xt, yt, zt);\n        // this.angleInRadians = 0;\n        // this.scale = new NVector3(xs, ys, zs);\n        this.color = [Math.random(), Math.random(), Math.random(), 1];\n        this.InitShader();\n    }\n    InitShader() {\n        // let vShader = GLUtility.CreateShaderFromPath(this.gl, this.gl.VERTEX_SHADER,'/shader/vsCanvas.glsl');\n        // let fShader = GLUtility.CreateShaderFromPath(this.gl, this.gl.FRAGMENT_SHADER, '/shader/fsColor.glsl');\n\n        let vShader = GLShaderCommon.CreateShader(this.gl, this.gl.VERTEX_SHADER, this.v); // '/shader/vsCanvas.glsl');\n        let fShader = GLShaderCommon.CreateShader(this.gl, this.gl.FRAGMENT_SHADER, this.f); // '/shader/fsColor.glsl');\n\n        if (vShader && fShader) {\n            this.vShader = vShader;\n            this.fShader = fShader;\n            let program = GLShaderCommon.CreateProgram(this.gl, vShader, fShader);\n            if (program) { this.program = program; }\n        }\n\n        // this.InitVerext();\n    }\n    Render(gl: WebGLRenderingContext) {\n\n        let col = [0.1, 0, 0, 1];\n\n        this.vertexs = new Float32Array([\n            // left column\n            -1, -1, 1, 1, 1, 1,\n            - 1, 1, col[0], col[1], col[2], col[3],\n            1, -1, col[0], col[1], col[2], col[3],\n\n            -1, 1, 1, 1, 1, 1,\n            1, -1, col[0], col[1], col[2], col[3],\n            1, 1, col[0], col[1], col[2], col[3],\n\n        ]);\n\n        this.posBuffer = this.gl.createBuffer() as WebGLBuffer;\n        this.gl.bindBuffer(this.gl.ARRAY_BUFFER, this.posBuffer);\n        this.gl.bufferData(this.gl.ARRAY_BUFFER, new Float32Array(this.vertexs), gl.STATIC_DRAW);\n\n        this.posLocAtt = this.gl.getAttribLocation(this.program, 'a_position');\n        // Tell the attribute how to get data out of posBuffer (ARRAY_BUFFER)\n        let size = 2;          // 2 components per iteration\n        let type = gl.FLOAT;   // the data is 32bit floats\n        let normalize = false; // don't normalize the data\n        let stride = 6 * Float32Array.BYTES_PER_ELEMENT; // 0 = move forward size * sizeof(type) each iteration to get the next position\n        let offset = 0;        // start at the beginning of the buffer\n        gl.vertexAttribPointer(this.posLocAtt, size, type, normalize, stride, offset);\n        gl.enableVertexAttribArray(this.posLocAtt);\n\n        // this.colLocAtt = this.gl.getAttribLocation(this.program, 'a_color');\n        // size = 4;          // 2 components per iteration\n        // type = gl.FLOAT;   // the data is 32bit floats\n        // normalize = false; // don't normalize the data\n        // stride = 6 * Float32Array.BYTES_PER_ELEMENT; // 0 = move forward size * sizeof(type) each iteration to get the next position\n        // offset = 2 * Float32Array.BYTES_PER_ELEMENT;        // start at the beginning of the buffer\n        // gl.vertexAttribPointer(this.colLocAtt, size, type, normalize, stride, offset);\n        // gl.enableVertexAttribArray(this.colLocAtt);\n\n        gl.useProgram(this.program);\n        let primitiveType = gl.TRIANGLES; // LINE_LOOP; // gl.TRIANGLE_STRIP;\n        offset = 0;\n        let count = 6; // this.vertexs.length * 0.5;\n        gl.drawArrays(primitiveType, offset, count);\n\n    }\n}","import { Solution } from '../';\r\nimport { Solution as Solution3D} from '../../02_Three';\r\nexport class UI {\r\n    solution: Solution | Solution3D;\r\n    hostDiv: HTMLElement;\r\n\r\n    isActive_high_low_connectedness_user = false;\r\n    isActive_Paris_main_st = true;\r\n    isActive_treated_st = false;\r\n    isActive_control_st = false;\r\n    isActive_zones_30 = false;\r\n    isActive_streetOSM = false;\r\n    isActive_twitter = false;\r\n\r\n    month: number = -1;\r\n\r\n    constructor(solution: Solution | Solution3D) {\r\n        this.solution = solution;\r\n        this.hostDiv = solution.hostDiv;\r\n        this.appendUI();\r\n    }\r\n    public appendUI(){\r\n\r\n        const mainMenu = document.createElement('div');\r\n        mainMenu.style.position = 'absolute';\r\n        this.hostDiv.append(mainMenu);\r\n\r\n\r\n        let checkBoxUIB = getCheckBox('main street');\r\n        mainMenu.append(checkBoxUIB.div);\r\n        checkBoxUIB.checkBox.checked = true;\r\n        checkBoxUIB.checkBox.onchange = () => {\r\n            if (checkBoxUIB.checkBox.checked === true){\r\n                this.isActive_Paris_main_st = true;\r\n            } else {\r\n                this.isActive_Paris_main_st = false;\r\n            }\r\n        }\r\n\r\n        \r\n        let checkBoxUI_OSM = getCheckBox('OSM street');\r\n        mainMenu.append(checkBoxUI_OSM.div);\r\n        checkBoxUI_OSM.checkBox.onchange = () => {\r\n            if (checkBoxUI_OSM.checkBox.checked === true){\r\n                this.isActive_streetOSM = true;\r\n            } else {\r\n                this.isActive_streetOSM = false;\r\n            }\r\n        }\r\n\r\n\r\n        let checkBoxUIC = getCheckBox('treated street');\r\n        mainMenu.append(checkBoxUIC.div);\r\n        checkBoxUIC.checkBox.onchange = () => {\r\n            if (checkBoxUIC.checkBox.checked === true){\r\n                this.isActive_treated_st = true;\r\n            } else {\r\n                this.isActive_treated_st = false;\r\n            }\r\n        }\r\n\r\n\r\n        let checkBoxUID = getCheckBox('control street');\r\n        mainMenu.append(checkBoxUID.div);\r\n        checkBoxUID.checkBox.onchange = () => {\r\n            if (checkBoxUID.checkBox.checked === true){\r\n                this.isActive_control_st = true;\r\n            } else {\r\n                this.isActive_control_st = false;\r\n            }\r\n        }\r\n\r\n        \r\n        let checkBoxUIE = getCheckBox('zones 30');\r\n        mainMenu.append(checkBoxUIE.div);\r\n        checkBoxUIE.checkBox.onchange = () => {\r\n            if (checkBoxUIE.checkBox.checked === true){\r\n                this.isActive_zones_30 = true;\r\n            } else {\r\n                this.isActive_zones_30 = false;\r\n            }\r\n        }\r\n\r\n        let checkBoxUI_Node = getCheckBox('Node');\r\n        mainMenu.append(checkBoxUI_Node.div);\r\n        checkBoxUI_Node.checkBox.onchange = () => {\r\n            if (checkBoxUI_Node.checkBox.checked === true){\r\n                this.isActive_twitter = true;\r\n            } else {\r\n                this.isActive_twitter = false;\r\n            }\r\n        }\r\n\r\n\r\n        let slider = getSlider('Month') \r\n        mainMenu.append(slider.div);\r\n\r\n        slider.slider.onchange = () => {\r\n           this.month = +slider.slider.value;\r\n        }\r\n\r\n    }\r\n}\r\n\r\n\r\nconst getCheckBox = (title: string) => {\r\n    const div = document.createElement('div');\r\n    div.style.display = 'flex';\r\n\r\n    const checkBox = document.createElement('input');\r\n    checkBox.type = 'checkbox';\r\n    const text = document.createElement('div');\r\n    text.textContent = title;\r\n    text.style.color = '#aaa';\r\n    div.appendChild(checkBox);\r\n    div.appendChild(text);\r\n\r\n    return {\r\n        div, checkBox\r\n    }\r\n};\r\n\r\nconst getSlider = (title: string) => {\r\n    // <input type=\"range\" min=\"1\" max=\"100\" value=\"50\" class=\"slider\" id=\"myRange\">\r\n    const div = document.createElement('div');\r\n    div.style.display = 'flex';\r\n\r\n    const slider = document.createElement('input');\r\n    slider.type = 'range';\r\n    slider.min = '0';\r\n    slider.max = '12';\r\n\r\n    const text = document.createElement('div');\r\n    text.textContent = title;\r\n    text.style.color = '#aaa';\r\n    div.appendChild(slider);\r\n    div.appendChild(text);\r\n\r\n    return {\r\n        div, slider\r\n    }\r\n};","import * as THREE from 'three';\r\nimport { RendererThree, MercatorProjection, getCSVFromURL } from '../../../../lib';\r\nimport { getJSONFromURL, } from 'njscore';\r\n\r\nimport { FilterGLViewDarkForDarken } from '../01_JSAPI/Tint/FilterGLViewDarkForDarken';\r\nimport { UI } from '../01_JSAPI/UI';\r\nexport class Solution extends RendererThree {\r\n\r\n    streetOSM: any = [];\r\n    routesTreated: any = [];\r\n    routesControl: any = [];\r\n    zones30: any = [];\r\n    zones15: any = [];\r\n    routesMain: any = [];\r\n\r\n    ui: UI;\r\n    meshTwitter: THREE.Points;\r\n    meshStreet: THREE.LineSegments;\r\n    meshNode: THREE.Points;\r\n    meshTreated: THREE.LineSegments;\r\n    meshControl: THREE.LineSegments;\r\n    meshPolygon: THREE.Mesh;\r\n    meshRoutesMain: THREE.LineSegments;\r\n\r\n    meshAreaGon: THREE.Mesh;\r\n\r\n    meshPolygon2: THREE.Mesh;\r\n\r\n    pts: number[] = [];\r\n\r\n    constructor(id: string = 'main') {\r\n        super(id)\r\n\r\n        const light = new THREE.PointLight(0xffffff, 0.8);\r\n        this.camera.add(light);\r\n        this.scene.add(light);\r\n\r\n        const canvasGL = document.createElement('canvas');\r\n        canvasGL.style.position = 'absolute';\r\n        canvasGL.style.pointerEvents = 'none';\r\n        canvasGL.style.mixBlendMode = 'darken';\r\n        canvasGL.width = this.hostDiv.clientWidth;\r\n        canvasGL.height = this.hostDiv.clientHeight;\r\n        this.hostDiv.appendChild(canvasGL);\r\n        const glCtx = canvasGL.getContext('webgl');\r\n        const d = new FilterGLViewDarkForDarken(glCtx, 0.5, 5)\r\n        d.Render(glCtx);\r\n\r\n        this.ui = new UI(this);\r\n\r\n        this.camera.position.set(0, 40, 48);\r\n\r\n        const path = '/static/research/slow-zone/';\r\n        getJSONFromURL('https://raw.githubusercontent.com/NamjuLee/data/master/Paris/street_osm.geojson').then((data) => {\r\n            for (let i = 0; i < data['features'].length; ++i) {\r\n                this.streetOSM.push(data['features'][i]['geometry']['coordinates']);\r\n            }\r\n            this.meshStreet = renderLines(this.scene, this.streetOSM, [0, 1, 1]);\r\n            this.meshNode = renderPoints(this.scene, this.streetOSM, [0, 1, 1]);\r\n\r\n\r\n            getCSVFromURL('https://raw.githubusercontent.com/NamjuLee/data/master/Paris/twitter_data_2010-2015.json').then((d) => {\r\n\r\n                const xOFf = -15478803.88731685;\r\n                const yOFf = -4766681.448690384;\r\n                const scale = 0.01;\r\n\r\n                const line = d.split(/\\r\\n|\\r|\\n/g);\r\n                // console.log(line)\r\n                const colors = [];\r\n                for (let i = 1; i < line.length; ++i) {\r\n                    const values = line[i].split(',');\r\n                    const lon = +values[3];\r\n                    const lat = +values[4];\r\n                    if ((lon !== 0 && lat !== 0) && (!isNaN(lon) && !isNaN(lat))) {\r\n\r\n                        const [xPro, yPro] = MercatorProjection(lon, lat);\r\n\r\n                        const x = (xPro + xOFf) * scale\r\n                        const y = (yPro + yOFf) * scale\r\n\r\n                        this.pts.push(x, 0, y);\r\n                        colors.push(0, 0.5, 0.5);\r\n                    }\r\n                }\r\n\r\n                // console.log(this.pts)\r\n                const geometry = new THREE.BufferGeometry();\r\n                const material = new THREE.PointsMaterial({ vertexColors: true, size: 1.5 });\r\n                geometry.setAttribute('position', new THREE.Float32BufferAttribute(this.pts, 3));\r\n                geometry.setAttribute('color', new THREE.Float32BufferAttribute(colors, 3));\r\n                geometry.computeBoundingSphere();\r\n\r\n                this.meshTwitter = new THREE.Points(geometry, material);\r\n                this.scene.add(this.meshTwitter);\r\n\r\n\r\n            });\r\n\r\n\r\n            getJSONFromURL('https://raw.githubusercontent.com/NamjuLee/data/master/Paris/Paris-main-st.geojson').then((data) => {\r\n                for (let i = 0; i < data['features'].length; ++i) {\r\n                    this.routesMain.push(data['features'][i]['geometry']['coordinates']);\r\n                }\r\n                this.meshRoutesMain = renderLines(this.scene, this.routesMain, [1, 1, 0]);\r\n            });\r\n\r\n            getJSONFromURL('https://raw.githubusercontent.com/NamjuLee/data/master/Paris/treated-st.geojson').then((data) => {\r\n                for (let i = 0; i < data['features'].length; ++i) {\r\n                    this.routesTreated.push(data['features'][i]['geometry']['coordinates']);\r\n                }\r\n                this.meshTreated = renderLines(this.scene, this.routesTreated, [1, 0, 0]);\r\n            });\r\n\r\n            getJSONFromURL('https://raw.githubusercontent.com/NamjuLee/data/master/Paris/control-st.geojson').then((data) => {\r\n                for (let i = 0; i < data['features'].length; ++i) {\r\n                    this.routesControl.push(data['features'][i]['geometry']['coordinates']);\r\n                }\r\n                this.meshControl = renderLines(this.scene, this.routesControl, [0, 1, 0]);\r\n            });\r\n\r\n            getJSONFromURL('https://raw.githubusercontent.com/NamjuLee/data/master/Paris/zones-30.geojson').then((data) => {\r\n                for (let i = 0; i < data['features'].length; ++i) {\r\n                    this.zones30.push(data['features'][i]['geometry']['coordinates']);\r\n                }\r\n                // this.meshPolygon = renderMultiPolygon(this.scene, this.zones30, [0, 1, 0]);\r\n\r\n            });\r\n\r\n            this.start();\r\n        });\r\n    }\r\n\r\n    public update(scene: THREE.Scene) {\r\n\r\n        if (this.meshTwitter !== undefined) {\r\n            if (this.ui.isActive_high_low_connectedness_user) { this.meshTwitter.visible = true; } else { this.meshTwitter.visible = false; }\r\n        }\r\n\r\n        if (this.meshRoutesMain !== undefined) {\r\n            if (this.ui.isActive_Paris_main_st) { this.meshRoutesMain.visible = true; } else { this.meshRoutesMain.visible = false; }\r\n        }\r\n\r\n        if (this.meshStreet !== undefined) {\r\n            if (this.ui.isActive_streetOSM) { this.meshStreet.visible = true; } else { this.meshStreet.visible = false; }\r\n        }\r\n\r\n        if (this.meshNode !== undefined) {\r\n            if (this.ui.isActive_twitter) { this.meshNode.visible = true; } else { this.meshNode.visible = false; }\r\n        }\r\n\r\n        if (this.meshTreated !== undefined) {\r\n            if (this.ui.isActive_treated_st) { this.meshTreated.visible = true; } else { this.meshTreated.visible = false; }\r\n        }\r\n\r\n        if (this.meshControl !== undefined) {\r\n            if (this.ui.isActive_control_st) { this.meshControl.visible = true; } else { this.meshControl.visible = false; }\r\n        }\r\n\r\n        if (this.meshPolygon !== undefined) {\r\n            if (this.ui.isActive_zones_30) { this.meshPolygon.visible = true; } else { this.meshPolygon.visible = false; }\r\n        }\r\n\r\n\r\n        // this.meshPolygon2.visible = true;\r\n        // const geo = this.meshAre\r\n        // console.log(geo);\r\n\r\n    }\r\n}\r\nconst renderCustomPolygon = (scene: THREE.Scene, geojson: any) => {\r\n    const xOFf = -15478803.88731685;\r\n    const yOFf = -4766681.448690384;\r\n    const scale = 0.01;\r\n    const shapes = [];\r\n\r\n    let count = 0;\r\n\r\n    for (let index = 0; index < geojson['features'].length; ++index) {\r\n        const multiPolygon = geojson['features'][index]['geometry']['coordinates'];\r\n        const meta = geojson['features'][index];\r\n        // console.log(meta)\r\n        const meta_yr = meta['properties'].yr;\r\n        // console.log(meta_yr)\r\n\r\n\r\n\r\n        const shape = new THREE.Shape();\r\n        const holes = [];\r\n        const shapePts = [];\r\n        for (let polyI = 0; polyI < multiPolygon.length; ++polyI) {\r\n            const polygon = multiPolygon[polyI];\r\n\r\n            // if (polyI === 0) {\r\n\r\n            //     path.moveTo\r\n            // }\r\n            // console.log(multiPolygon)\r\n            // break;\r\n            //     console.log(polygon.length)\r\n\r\n\r\n            let path = new THREE.Path();\r\n\r\n            for (let i = 0; i < polygon.length; ++i) {\r\n                const [xPro, yPro] = MercatorProjection(polygon[i][0], polygon[i][1]);\r\n\r\n                const x = (xPro + xOFf) * scale\r\n                const y = (yPro + yOFf) * scale\r\n                //     // console.log(x, y)\r\n\r\n                if (polyI === 0) {\r\n                    shapePts.push(new THREE.Vector2(x, y));\r\n                } else {\r\n                    if (i === 0) {\r\n                        path.moveTo(x, y);\r\n\r\n                    } else {\r\n                        path.lineTo(x, y);\r\n\r\n                        if (i === polygon.length - 1) {\r\n                            path.closePath()\r\n                        }\r\n                    }\r\n                }\r\n\r\n\r\n            }\r\n\r\n            holes.push(path);\r\n            // shape.uuid = meta_yr;\r\n\r\n            // // shape\r\n            // count++;\r\n            // shape.holes.push()\r\n            // break;\r\n        }\r\n        const shapeThree = new THREE.Shape(holes);\r\n        // shapeThree.holes.push(...holes)\r\n        shapes.push(shapeThree);\r\n        // break;\r\n\r\n    }\r\n\r\n\r\n    let geometry = new THREE.ShapeGeometry(shapes);\r\n    //     console.log(count)\r\n    //     console.log(geometry)\r\n    let mat = new THREE.MeshBasicMaterial({\r\n        side: THREE.DoubleSide, color: 0x00ff00,\r\n        transparent: true,\r\n        opacity: 0.3\r\n    });\r\n    let mesh = new THREE.Mesh(geometry, mat);\r\n    scene.add(mesh);\r\n    mesh.rotateOnAxis(new THREE.Vector3(1, 0, 0), Math.PI * 0.5);\r\n    return mesh;\r\n}\r\nconst renderMultiPolygon = (scene: THREE.Scene, paths: any, colorArray: number[]) => {\r\n    // if (multiPolygons === undefined) return;\r\n\r\n    const xOFf = -15478803.88731685;\r\n    const yOFf = -4766681.448690384;\r\n    const scale = 0.01;\r\n\r\n    // const geometry = new THREE.BufferGeometry();\r\n    // const material = new THREE.MeshBasicMaterial( { vertexColors: true } );\r\n\r\n    const positions = [];\r\n\r\n    const shapes = [];\r\n\r\n\r\n\r\n    for (let multi = 0; multi < paths.length; ++multi) {\r\n        const multiPolygon = paths[multi];\r\n\r\n        for (let polyI = 0; polyI < multiPolygon.length; ++polyI) {\r\n            const polygon = multiPolygon[polyI];\r\n\r\n\r\n\r\n            if (polygon.length === 1) {\r\n                const thePolygon = polygon[0];\r\n\r\n                const shape = [];\r\n\r\n                for (let i = 0; i < thePolygon.length; ++i) {\r\n\r\n                    const [xPro, yPro] = MercatorProjection(thePolygon[i][0], thePolygon[i][1]);\r\n\r\n                    const x = (xPro + xOFf) * scale\r\n                    const y = (yPro + yOFf) * scale\r\n                    // console.log(x, y)\r\n                    // positions.push(x, 0, y)\r\n\r\n                    shape.push(new THREE.Vector2(x, y));\r\n                }\r\n                shapes.push(new THREE.Shape(shape));\r\n            }\r\n        }\r\n    }\r\n\r\n\r\n    let geometry = new THREE.ShapeGeometry(shapes);\r\n    let mat = new THREE.MeshBasicMaterial({\r\n        side: THREE.DoubleSide, color: 0x00ff00,\r\n        transparent: true,\r\n        opacity: 0.3\r\n    });\r\n    let mesh = new THREE.Mesh(geometry, mat);\r\n    scene.add(mesh);\r\n    mesh.rotateOnAxis(new THREE.Vector3(1, 0, 0), Math.PI * 0.5);\r\n    return mesh;\r\n};\r\n\r\n\r\nconst renderPoints = (scene: THREE.Scene, paths: any, color: number[]) => {\r\n    const geometry = new THREE.BufferGeometry();\r\n    const material = new THREE.PointsMaterial({ vertexColors: true, size: 0.5 });\r\n\r\n    const positions = [];\r\n    const colors = [];\r\n\r\n\r\n    const xOFf = -15478803.88731685;\r\n    const yOFf = -4766681.448690384;\r\n    const scale = 0.01;\r\n\r\n\r\n    for (let i = 0; i < paths.length; ++i) {\r\n        const route = paths[i]\r\n\r\n        for (let j = 0; j < route.length; ++j) {\r\n            for (let k = 0; k < route[j].length; ++k) {\r\n\r\n                const [xPro, yPro] = MercatorProjection(route[j][k][0], route[j][k][1]);\r\n\r\n                const x = (xPro + xOFf) * scale\r\n                const y = (yPro + yOFf) * scale\r\n\r\n                positions.push(x, 0, y)\r\n\r\n                colors.push(color[0], color[1], color[2]);\r\n\r\n\r\n            }\r\n        }\r\n    }\r\n\r\n    geometry.setAttribute('position', new THREE.Float32BufferAttribute(positions, 3));\r\n    geometry.setAttribute('color', new THREE.Float32BufferAttribute(colors, 3));\r\n    geometry.computeBoundingSphere();\r\n\r\n    const mesh = new THREE.Points(geometry, material);\r\n    scene.add(mesh);\r\n    return mesh;\r\n\r\n}\r\n\r\nconst renderLines = (scene: THREE.Scene, paths: any, color: number[]) => {\r\n\r\n    const geometry = new THREE.BufferGeometry();\r\n    // const material = new THREE.PointsMaterial( { vertexColors: true, size: 0.1 } );\r\n    const material = new THREE.LineBasicMaterial({ vertexColors: true });\r\n\r\n    const positions = [];\r\n    const colors = [];\r\n    const indices = [];\r\n\r\n    const xOFf = -15478803.88731685;\r\n    const yOFf = -4766681.448690384;\r\n    const scale = 0.01;\r\n\r\n\r\n    let xC = 0\r\n    let yC = 0\r\n    let Count = 0\r\n\r\n    for (let i = 0; i < paths.length; ++i) {\r\n        const route = paths[i]\r\n\r\n        for (let j = 0; j < route.length; ++j) {\r\n            for (let k = 0; k < route[j].length; ++k) {\r\n\r\n                const [xPro, yPro] = MercatorProjection(route[j][k][0], route[j][k][1]);\r\n                xC += xPro;\r\n                yC += yPro;\r\n                Count += 1;\r\n\r\n                const x = (xPro + xOFf) * scale\r\n                const y = (yPro + yOFf) * scale\r\n                // console.log(x, y)\r\n                positions.push(x, 0, y)\r\n\r\n                colors.push(color[0], color[1], color[2]);\r\n\r\n                if (k < route[j].length - 1) {\r\n                    indices.push(Math.floor(positions.length / 3) - 1, Math.floor(positions.length / 3));\r\n                }\r\n            }\r\n        }\r\n    }\r\n    // console.log(xC / Count, yC / Count)\r\n    geometry.setIndex(indices);\r\n    geometry.setAttribute('position', new THREE.Float32BufferAttribute(positions, 3));\r\n    geometry.setAttribute('color', new THREE.Float32BufferAttribute(colors, 3));\r\n    // generateMorphTargets( geometry );\r\n\r\n    geometry.computeBoundingSphere();\r\n\r\n    const mesh = new THREE.LineSegments(geometry, material);\r\n    scene.add(mesh);\r\n    return mesh;\r\n\r\n};"],"names":["FilterGLViewDarkForDarken","constructor","gl","program","fragmentShader","vertexShader","matrixLocation","posBuffer","colBuffer","vertexs","posLocAtt","colLocAtt","matLoc","colLoc","cVecLoc","mouseLoc","timeGL","vShader","fShader","v","f","positionAttribLocation","colorAttribLocation","translation","color","colArray","this","Math","random","InitShader","GLShaderCommon","VERTEX_SHADER","FRAGMENT_SHADER","Render","col","Float32Array","createBuffer","bindBuffer","ARRAY_BUFFER","bufferData","STATIC_DRAW","getAttribLocation","type","FLOAT","stride","BYTES_PER_ELEMENT","offset","vertexAttribPointer","enableVertexAttribArray","useProgram","primitiveType","TRIANGLES","drawArrays","UI","solution","hostDiv","isActive_high_low_connectedness_user","isActive_Paris_main_st","isActive_treated_st","isActive_control_st","isActive_zones_30","isActive_streetOSM","isActive_twitter","month","appendUI","mainMenu","document","createElement","style","position","append","checkBoxUIB","getCheckBox","div","checkBox","checked","onchange","checkBoxUI_OSM","checkBoxUIC","checkBoxUID","checkBoxUIE","checkBoxUI_Node","slider","getSlider","value","title","display","text","textContent","appendChild","min","max","Solution","RendererThree","super","streetOSM","routesTreated","routesControl","zones30","zones15","routesMain","ui","meshTwitter","meshStreet","meshNode","meshTreated","meshControl","meshPolygon","meshRoutesMain","meshAreaGon","meshPolygon2","pts","light","THREE","camera","add","scene","canvasGL","pointerEvents","mixBlendMode","width","clientWidth","height","clientHeight","glCtx","getContext","set","getJSONFromURL","then","data","i","length","push","renderLines","renderPoints","getCSVFromURL","d","line","split","colors","values","lon","lat","isNaN","xPro","yPro","MercatorProjection","x","y","geometry","material","vertexColors","size","setAttribute","computeBoundingSphere","start","update","undefined","visible","paths","positions","route","j","k","mesh","indices","xC","yC","Count","floor","setIndex"],"sourceRoot":""}