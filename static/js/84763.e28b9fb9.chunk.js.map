{"version":3,"file":"static/js/84763.e28b9fb9.chunk.js","mappings":"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","sources":["njslab/LabStarter/AppNGL3d/NGL3dApp_03/Core/Canvas.ts","njslab/LabStarter/AppNGL3d/NGL3dApp_03/Core/Renderer.ts","njslab/LabStarter/AppNGL3d/NGL3dApp_03/Core/Scene.ts","njslab/LabStarter/AppNGL3d/NGL3dApp_03/Geometry/Point.ts","njslab/LabStarter/AppNGL3d/NGL3dApp_03/Geometry/PointShader.ts","njslab/LabStarter/AppNGL3d/NGL3dApp_03/Utility/GLShaderCommon.ts","njslab/LabStarter/AppNGL3d/NGL3dApp_03/WebGL/AttribLocations.ts","njslab/LabStarter/AppNGL3d/NGL3dApp_03/WebGL/Modal.ts","njslab/LabStarter/AppNGL3d/NGL3dApp_03/WebGL/Shader.ts","njslab/LabStarter/AppNGL3d/NGL3dApp_03/WebGL/VAO.ts","njslab/LabStarter/AppNGL3d/NGL3dApp_03/index.ts"],"sourcesContent":["import { NGL3dApp } from '..';\r\n\r\nexport class Canvas {\r\n    app: NGL3dApp;\r\n\r\n    gl: WebGL2RenderingContext;\r\n    canvas: HTMLCanvasElement;\r\n\r\n    constructor(app: NGL3dApp) {\r\n        this.app = app;\r\n\r\n        this.canvas = document.createElement('canvas');\r\n        if (this.app.host) {\r\n            this.app.host.appendChild(this.canvas);\r\n            this.canvas.width = this.app.host.clientWidth;\r\n            this.canvas.height = this.app.host.clientHeight;\r\n        }\r\n        const gl = this.canvas.getContext('webgl2');\r\n        if (gl !== null) { this.gl = gl; }\r\n        this.loop(this.gl);\r\n    }\r\n    loop(gl: WebGL2RenderingContext) {\r\n        // this.clear(gl);\r\n        requestAnimationFrame(() => { this.loop(gl); });\r\n\r\n        this.app.renderer.render(gl);\r\n        // console.log('working');\r\n    }\r\n    clear(gl: WebGL2RenderingContext) {\r\n        gl.clearColor(0.5, 1.0, 1.0, 1.0);\r\n        gl.clear(gl.COLOR_BUFFER_BIT | gl.DEPTH_BUFFER_BIT);\r\n    }\r\n}\r\n","import { NGL3dApp } from '..';\r\n\r\nexport class Renderer {\r\n    app: NGL3dApp;\r\n    constructor(app: NGL3dApp) {\r\n        this.app = app;\r\n    }\r\n    render(gl: WebGL2RenderingContext) {\r\n        // console.log(gl);\r\n\r\n        // console.log(this.app.scene.triList);\r\n\r\n        this.app.scene.triList.forEach((e) => { e.render(gl); });\r\n    }\r\n}","import { NGL3dApp } from '..';\r\n\r\nimport { Point } from '../Geometry/Point';\r\n\r\nexport class Scene {\r\n    NGL3dApp: NGL3dApp;\r\n\r\n    triList: Point[] = [];\r\n\r\n    constructor(NGL3dApp: NGL3dApp) {\r\n        this.NGL3dApp = NGL3dApp;\r\n    }\r\n}","import { NGL3dApp } from '..';\r\n\r\nimport { RTN, VAO } from '../WebGL/VAO';\r\nimport { Modal } from '../WebGL/Modal';\r\nimport { PointShader } from './PointShader';\r\n\r\nexport class Point {\r\n    vOld = `#version 300 es\r\n        in vec3 a_position;\r\n\r\n        uniform float uPointSize;\r\n\r\n        void main(void) {\r\n            gl_PointSize = uPointSize;\r\n            gl_Position = vec4(a_position, 1.0);\r\n        }\r\n    `;\r\n    fOld = `#version 300 es\r\n        precision mediump float;\r\n\r\n        out vec4 finalColor;\r\n\r\n        void main(void) {\r\n            finalColor = vec4(1.0, 0.0, 0.0, 1.0);\r\n        }\r\n    `;\r\n    v = `#version 300 es\r\n\r\n        in vec3 a_position;\r\n\r\n        uniform mediump float uPointSize;\r\n        uniform float uAngle;\r\n\r\n        void main(void) {\r\n            gl_PointSize = uPointSize;\r\n            gl_Position = vec4(cos(uAngle) * 0.8 + a_position.x, sin(uAngle) * 0.8 + a_position.y, a_position.z, 1.0);\r\n        }\r\n    `;\r\n    f = `#version 300 es\r\n        precision mediump float;\r\n\r\n        uniform float uPointSize;\r\n\r\n        out vec4 finalColor;\r\n\r\n        void main(void) {\r\n            float c = (40. - uPointSize ) / 20.;\r\n            finalColor = vec4(c, c, c, 1.0);\r\n        }\r\n    `;\r\n\r\n    app: NGL3dApp;\r\n\r\n    gl: WebGL2RenderingContext;\r\n\r\n    mesh: RTN;\r\n    modal: Modal;\r\n    shader: PointShader;\r\n\r\n    size: number = 2.5;\r\n    rotation: number = 0.0;\r\n\r\n    constructor(app: NGL3dApp) {\r\n        this.app = app;\r\n        this.gl = app.canvas.gl;\r\n        this.initShader(this.gl);\r\n    }\r\n    initShader(gl: WebGL2RenderingContext) {\r\n        this.shader = new PointShader(gl, this.v, this.f);\r\n\r\n        this.mesh = VAO.createMeshVAO(gl, 'dots', [0, 0, 0, 0.1, 0.1, 0, 0.1, -0.1, 0, -0.1, -0.1, 0, -0.1, 0.1, 0]);\r\n        this.mesh.drawMode = gl.POINTS; // Most often the draw mode will be triangles, but in this instance we need Points\r\n\r\n        this.modal = new Modal(this.mesh);\r\n\r\n        this.app.scene.triList.push(this);\r\n    }\r\n    render(gl: WebGL2RenderingContext) {\r\n        console.log(gl);\r\n        this.size += 0.01;\r\n        let size = (Math.sin(this.size) * 10.0) + 30.0;\r\n        // gl.uniform1f(this.uPointSizeLoc, size);\r\n\r\n        // gl.uniform1f(this.uAngle, this.size);\r\n        // gl.drawArrays(gl.POINTS, 0, this.gVertCnt);\r\n        this.rotation += 0.01;\r\n\r\n        this.shader.activate();\r\n        this.shader.set(size, this.rotation);\r\n        this.shader.renderModal(this.modal);\r\n    }\r\n}","import { Shader } from '../WebGL/Shader';\r\n\r\nexport class PointShader extends Shader {\r\n\r\n    constructor(gl: WebGL2RenderingContext, vertSrc: string, fragSrc: string) {\r\n        super(gl, vertSrc, fragSrc);\t// Call the base class constructor which will setup most of what we need\r\n\r\n        // Our shader uses custom uniforms, this is the time to get its location for future use.\r\n        if (this.program) {\r\n            this.uniformLoc.uPointSize = gl.getUniformLocation(this.program, 'uPointSize');\r\n            this.uniformLoc.uAngle = gl.getUniformLocation(this.program, 'uAngle');\r\n        }\r\n        gl.useProgram(null); // Done setting up shader\r\n    }\r\n\r\n    // Simple function that passes in Angle and Pointsize uniform data to the shader program.\r\n    set(size: number, angle: number) {\r\n        this.gl.uniform1f(this.uniformLoc.uPointSize, size);\r\n        this.gl.uniform1f(this.uniformLoc.uAngle, angle);\r\n        return this;\r\n    }\r\n}","\r\nexport class GLShaderCommon {\r\n\r\n    static getShaderProgram(gl: WebGL2RenderingContext, vertexShader: string, fragmentShader: string, needValidate: boolean = true) {\r\n        let vShader = GLShaderCommon.createShader(gl, gl.VERTEX_SHADER as unknown as WebGLShader, vertexShader);\r\n        let fShader = GLShaderCommon.createShader(gl, gl.FRAGMENT_SHADER as unknown as WebGLShader, fragmentShader);\r\n        if (vShader && fShader) {\r\n            let program = GLShaderCommon.createProgram(gl, vShader, fShader, needValidate);\r\n\r\n            if (program) {\r\n                return program;\r\n\r\n            } else {\r\n                console.error('vertex fragment shader error'); return null;\r\n            }\r\n        } else {\r\n            console.error('vertex fragment shader error'); return null;\r\n        }\r\n    }\r\n    static getShader(gl: WebGL2RenderingContext, type: number, source: string) {\r\n        const shader = gl.createShader(type);\r\n        if (shader === null) { return null; }\r\n        gl.shaderSource(shader, source);\r\n        gl.compileShader(shader);\r\n\r\n        // Check if compiled successfully\r\n        if (!gl.getShaderParameter(shader, gl.COMPILE_STATUS)) {\r\n            console.log('An error occurred compiling the shaders:' + gl.getShaderInfoLog(shader));\r\n            gl.deleteShader(shader);\r\n            return null;\r\n        }\r\n        // Set the attributes, varying, and uniform to shader\r\n        // shader.attributes = this.attributesFromSource(source);\r\n        // shader.varyings = this.varyingsFromSource(source);\r\n        // shader.uniforms = this.uniformsFromSource(source);\r\n        return shader;\r\n    }\r\n    static createProgram(gl: WebGL2RenderingContext, vertexShader: WebGLShader, fragmentShader: WebGLShader, needValidate: boolean = true): WebGLProgram | null {\r\n        const program = gl.createProgram();\r\n        if (program === null) { return null; }\r\n        gl.attachShader(program, vertexShader);\r\n        gl.attachShader(program, fragmentShader);\r\n        gl.linkProgram(program);\r\n\r\n        // Check that shader program was able to link to WebGL\r\n        if (!gl.getProgramParameter(program, gl.LINK_STATUS)) {\r\n            const error = gl.getProgramInfoLog(program);\r\n            console.log('Failed to link program: ' + error);\r\n            gl.deleteProgram(program);\r\n            gl.deleteShader(fragmentShader);\r\n            gl.deleteShader(vertexShader);\r\n            return null;\r\n        }\r\n        if (needValidate) {\r\n            gl.validateProgram(program);\r\n            if (!gl.getProgramParameter(program, gl.VALIDATE_STATUS)) {\r\n                console.error('Failed to validate program', gl.getProgramInfoLog(program));\r\n                gl.deleteProgram(program);\r\n                gl.deleteShader(fragmentShader);\r\n                gl.deleteShader(vertexShader);\r\n                return null;\r\n            }\r\n        }\r\n        gl.deleteShader(fragmentShader);\r\n        gl.deleteShader(vertexShader);\r\n        return program;\r\n    }\r\n\r\n    // ...............................\r\n\r\n    // static CreateShader(gl: WebGL2RenderingContext, type: WebGLShader, shaderString: string) {\r\n    //     let shader = gl.createShader(type as number);\r\n    //     gl.shaderSource(shader, shaderString);\r\n    //     gl.compileShader(shader);\r\n    //     gl.getShaderParameter(shader, gl.COMPILE_STATUS);\r\n    //     return shader as Webglsh;\r\n    //     // console.log(gl.getShaderInfoLog(shader));\r\n    //     // gl.deleteShader(shader);\r\n    //     // return null;\r\n    // }\r\n    static createShader(gl: WebGL2RenderingContext, type: WebGLShader, shaderString: string) {\r\n        console.log(type);\r\n        const shader = gl.createShader(type as unknown as number);\r\n        if (shader === null) { return null; }\r\n        gl.shaderSource(shader, shaderString);\r\n        gl.compileShader(shader);\r\n        const suc = gl.getShaderParameter(shader, gl.COMPILE_STATUS);\r\n        if (suc) { return shader; }\r\n        console.log(gl.getShaderInfoLog(shader));\r\n        gl.deleteShader(shader);\r\n        return null;\r\n    }\r\n    static createShaderFromPath(gl: WebGL2RenderingContext, type: WebGLShader, url: string) {\r\n        const shader = gl.createShader(type as unknown as number);\r\n        if (shader === null) { return null; }\r\n        gl.shaderSource(shader, GLShaderCommon.getSourceSynch(url) as string);\r\n        gl.compileShader(shader);\r\n        const suc = gl.getShaderParameter(shader, gl.COMPILE_STATUS);\r\n        if (suc) { return shader; }\r\n        console.log(gl.getShaderInfoLog(shader));\r\n        gl.deleteShader(shader);\r\n        return null;\r\n    }\r\n\r\n    static getSourceSynch(url: string) {\r\n        const req = new XMLHttpRequest();\r\n        req.open('GET', url, false);\r\n        req.send(null);\r\n        return (req.status === 200) ? req.responseText : null;\r\n    }\r\n\r\n    // static LoadTextResource(url: string, callback:(data: any, d2:any) => void ) {\r\n    //     let request = new XMLHttpRequest();\r\n    //     request.open('GET', url + '?please-dont-cache=' + Math.random(), true);\r\n    //     request.onload = function () {\r\n    //         if (request.status < 200 || request.status > 299) {\r\n    //             callback('Error: HTTP Status ' + request.status + ' on resource ' + url);\r\n    //         } else {\r\n    //             callback(null, request.responseText);\r\n    //         }\r\n    //     };\r\n    //     request.send();\r\n    // }\r\n    // static LoadShader(url: string, callback:(data: null, callback:string) => void ) {\r\n    //     GLUtility.LoadTextResource(url, callback);\r\n    // }\r\n    static loadImage(url: string, callback: (data: null, image: HTMLElement) => void) {\r\n        const image = new Image();\r\n        image.onload = function () {\r\n            callback(null, image);\r\n        };\r\n        image.src = url;\r\n    }\r\n    // static LoadJSONResource(url: string, callback:(data: string, callback:string) => void ) {\r\n    //     GLUtility.LoadTextResource(url, function (err: Error, result) {\r\n    //         if (err) {\r\n    //             callback(err);\r\n    //         } else {\r\n    //             try {\r\n    //                 callback(null, JSON.parse(result));\r\n    //             } catch (e) {\r\n    //                 callback(e);\r\n    //             }\r\n    //         }\r\n    //     });\r\n    // }\r\n}\r\n","export enum ATTR {\r\n    ATTR_POSITION_NAME = 'a_position',\r\n    ATTR_POSITION_LOC = 0,\r\n    ATTR_NORMAL_NAME = 'a_norm',\r\n    ATTR_NORMAL_LOC = 1,\r\n    ATTR_UV_NAME = 'a_uv',\r\n    ATTR_UV_LOC = 2\r\n}\r\n\r\nexport class AttribLocations {\r\n    position: number;\r\n    normal: number;\r\n    uv: number;\r\n    constructor(gl: WebGL2RenderingContext, program: WebGLProgram) {\r\n        this.position = gl.getAttribLocation(program, ATTR.ATTR_NORMAL_NAME);\r\n        this.normal = gl.getAttribLocation(program, ATTR.ATTR_NORMAL_NAME);\r\n        this.uv = gl.getAttribLocation(program, ATTR.ATTR_UV_NAME);\r\n    }\r\n}","import { RTN } from './VAO';\r\n\r\nexport class Modal {\r\n    mesh: RTN;\r\n    constructor(meshData: RTN) {\r\n        this.mesh = meshData;\r\n    }\r\n\r\n    // Things to do before its time to render\r\n    preRender() {\r\n        // TODO :: Update transform Matrix in future lesson\r\n    }\r\n}","import { GLShaderCommon } from '../Utility/GLShaderCommon';\r\nimport { AttribLocations } from './AttribLocations';\r\nimport { Modal } from './Modal';\r\n\r\nexport class UniformLoc {\r\n    uPointSize: WebGLUniformLocation | null;\r\n    uAngle: WebGLUniformLocation | null;\r\n}\r\n\r\nexport class Shader {\r\n\r\n    gl: WebGL2RenderingContext;\r\n    program: WebGLProgram | null;\r\n\r\n    attribLoc: AttribLocations;\r\n    uniformLoc: UniformLoc;\r\n\r\n    constructor(gl: WebGL2RenderingContext, vertShaderSrc: string, fragShaderSrc: string) {\r\n        this.program = GLShaderCommon.getShaderProgram(gl, vertShaderSrc, fragShaderSrc, true);\r\n\r\n        if (this.program != null) {\r\n            this.gl = gl;\r\n            gl.useProgram(this.program);\r\n            this.attribLoc = new AttribLocations(gl, this.program);\r\n            this.uniformLoc = new UniformLoc();\r\n            // this.uniformLoc = {};\t// TODO : Replace in later lessons with get standardUniformLocations.\r\n        }\r\n\r\n        // Note :: Extended shaders should deactivate shader when done calling super and setting up custom parts in the constructor.\r\n    }\r\n\r\n    // ...................................................\r\n    // Methods\r\n    activate() {\r\n        this.gl.useProgram(this.program); return this;\r\n    }\r\n    deactivate() {\r\n        this.gl.useProgram(null); return this;\r\n    }\r\n\r\n    // function helps clean up resources when shader is no longer needed.\r\n    dispose() {\r\n        // unbind the program if its currently active\r\n        if (this.gl.getParameter(this.gl.CURRENT_PROGRAM) === this.program) { this.gl.useProgram(null); }\r\n        this.gl.deleteProgram(this.program);\r\n    }\r\n\r\n    // ...................................................\r\n    // RENDER RELATED METHODS\r\n\r\n    // Setup custom properties\r\n    preRender() {\r\n        //\r\n    }\r\n    // Handle rendering a modal\r\n    renderModal(modal: Modal) {\r\n        this.gl.bindVertexArray(modal.mesh.vao);\t// Enable VAO, this will set all the predefined attributes for the shader\r\n\r\n        if (modal.mesh.indexCount) {\r\n            this.gl.drawElements(modal.mesh.drawMode, modal.mesh.indexCount, this.gl.UNSIGNED_SHORT, 0);\r\n        } else {\r\n            this.gl.drawArrays(modal.mesh.drawMode, 0, modal.mesh.vertexCount);\r\n        }\r\n\r\n        this.gl.bindVertexArray(null);\r\n\r\n        return this;\r\n    }\r\n}","import { ATTR } from './AttribLocations';\r\n\r\nexport enum DRAW_MODE {\r\n    //\r\n}\r\n\r\nexport class RTN {\r\n    name: string;\r\n\r\n    vao: WebGLVertexArrayObject | null;\r\n    bufVertices: WebGLBuffer | null;\r\n    bufNormals: WebGLBuffer | null;\r\n    bufUV: WebGLBuffer | null;\r\n    bufIndex: WebGLBuffer | null;\r\n\r\n    vertexComponentLen: number;\r\n    vertexCount: number;\r\n    indexCount: number;\r\n    drawMode: number;\r\n\r\n    constructor() {\r\n        //\r\n    }\r\n}\r\n\r\nexport class VAO {\r\n\r\n    static createMeshVAO(gl: WebGL2RenderingContext, name: string, aryVert: number[], aryInd?: number[], aryNorm?: number[], aryUV?: number[]) {\r\n        let rtn = new RTN();\r\n        rtn.name = name;\r\n        rtn.drawMode = gl.TRIANGLES;\r\n\r\n        rtn.vao = gl.createVertexArray();\r\n        gl.bindVertexArray(rtn.vao);\t//  Bind it so all the calls to vertexAttribPointer/enableVertexAttribArray is saved to the vao.\r\n\r\n        // .......................................................\r\n        // Set up vertices\r\n        if (aryVert !== undefined && aryVert != null) {\r\n            rtn.bufVertices = gl.createBuffer();\t\t\t\t\t\t\t\t\t\t\t\t\t// Create buffer...\r\n            rtn.vertexComponentLen = 3;\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t// How many floats make up a vertex\r\n            rtn.vertexCount = aryVert.length / rtn.vertexComponentLen;\t\t\t\t\t\t\t\t// How many vertices in the array\r\n\r\n            gl.bindBuffer(gl.ARRAY_BUFFER, rtn.bufVertices);\r\n            gl.bufferData(gl.ARRAY_BUFFER, new Float32Array(aryVert), gl.STATIC_DRAW);\t\t// then push array into it.\r\n            gl.enableVertexAttribArray(ATTR.ATTR_POSITION_LOC);\t\t\t\t\t\t\t\t\t\t// Enable Attribute location\r\n            gl.vertexAttribPointer(ATTR.ATTR_POSITION_LOC, 3, gl.FLOAT, false, 0, 0);\t\t\t\t\t\t// Put buffer at location of the vao\r\n        }\r\n\r\n        // .......................................................\r\n        // Setup normals\r\n        if (aryNorm !== undefined && aryNorm != null) {\r\n            rtn.bufNormals = gl.createBuffer();\r\n            gl.bindBuffer(gl.ARRAY_BUFFER, rtn.bufNormals);\r\n            gl.bufferData(gl.ARRAY_BUFFER, new Float32Array(aryNorm), gl.STATIC_DRAW);\r\n            gl.enableVertexAttribArray(ATTR.ATTR_NORMAL_LOC);\r\n            gl.vertexAttribPointer(ATTR.ATTR_NORMAL_LOC, 3, gl.FLOAT, false, 0, 0);\r\n        }\r\n\r\n        // .......................................................\r\n        // Setup UV\r\n        if (aryUV !== undefined && aryUV != null) {\r\n            rtn.bufUV = gl.createBuffer();\r\n            gl.bindBuffer(gl.ARRAY_BUFFER, rtn.bufUV);\r\n            gl.bufferData(gl.ARRAY_BUFFER, new Float32Array(aryUV), gl.STATIC_DRAW);\r\n            gl.enableVertexAttribArray(ATTR.ATTR_UV_LOC);\r\n            gl.vertexAttribPointer(ATTR.ATTR_UV_LOC, 2, gl.FLOAT, false, 0, 0);\t// UV only has two floats per component\r\n        }\r\n\r\n        // .......................................................\r\n        // Setup Index.\r\n        if (aryInd !== undefined && aryInd != null) {\r\n            rtn.bufIndex = gl.createBuffer();\r\n            rtn.indexCount = aryInd.length;\r\n            gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, rtn.bufIndex);\r\n            gl.bufferData(gl.ELEMENT_ARRAY_BUFFER, new Uint16Array(aryInd), gl.STATIC_DRAW);\r\n            gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, null);\r\n        }\r\n\r\n        // Clean up\r\n        gl.bindVertexArray(null);\t\t\t\t\t// Unbind the VAO, very Important. always unbind when your done using one.\r\n        gl.bindBuffer(gl.ARRAY_BUFFER, null);\t// Unbind any buffers that might be set\r\n\r\n        // this.mMeshCache[name] = rtn;\r\n        return rtn;\r\n    }\r\n    constructor() {\r\n        //\r\n    }\r\n}","import { Canvas } from './Core/Canvas';\r\nimport { Renderer } from './Core/Renderer';\r\nimport { Scene } from './Core/Scene';\r\n\r\nimport { Point } from './Geometry/Point';\r\n\r\nexport class NGL3dApp {\r\n\r\n    host: HTMLElement;\r\n    canvas: Canvas;\r\n    renderer: Renderer;\r\n    scene: Scene;\r\n\r\n    constructor(id: string) {\r\n        console.log('id: ' + id + ', NGL3dApp 03 Init!!!!!');\r\n        const host = document.getElementById(id);\r\n        if (host) { this.host = host; }\r\n\r\n        this.scene = new Scene(this);\r\n        this.renderer = new Renderer(this);\r\n        this.canvas = new Canvas(this);\r\n\r\n        const d = new Point(this);\r\n        console.log(d);\r\n    }\r\n\r\n}\r\n// animation VAO, modal shader and so on"],"names":["Canvas","constructor","app","gl","canvas","this","document","createElement","host","appendChild","width","clientWidth","height","clientHeight","getContext","loop","requestAnimationFrame","renderer","render","clear","clearColor","COLOR_BUFFER_BIT","DEPTH_BUFFER_BIT","Renderer","scene","triList","forEach","e","Scene","NGL3dApp","Point","vOld","fOld","v","f","mesh","modal","shader","size","rotation","initShader","PointShader","VAO","drawMode","POINTS","Modal","push","console","log","Math","sin","activate","set","renderModal","Shader","vertSrc","fragSrc","super","program","uniformLoc","uPointSize","getUniformLocation","uAngle","useProgram","angle","uniform1f","GLShaderCommon","static","vertexShader","fragmentShader","needValidate","vShader","createShader","VERTEX_SHADER","fShader","FRAGMENT_SHADER","createProgram","error","type","source","shaderSource","compileShader","getShaderParameter","COMPILE_STATUS","getShaderInfoLog","deleteShader","attachShader","linkProgram","getProgramParameter","LINK_STATUS","getProgramInfoLog","deleteProgram","validateProgram","VALIDATE_STATUS","shaderString","url","getSourceSynch","req","XMLHttpRequest","open","send","status","responseText","callback","image","Image","onload","src","ATTR","AttribLocations","position","normal","uv","getAttribLocation","ATTR_NORMAL_NAME","ATTR_UV_NAME","meshData","preRender","UniformLoc","vertShaderSrc","fragShaderSrc","attribLoc","deactivate","dispose","getParameter","CURRENT_PROGRAM","bindVertexArray","vao","indexCount","drawElements","UNSIGNED_SHORT","drawArrays","vertexCount","DRAW_MODE","RTN","name","bufVertices","bufNormals","bufUV","bufIndex","vertexComponentLen","aryVert","aryInd","aryNorm","aryUV","rtn","TRIANGLES","createVertexArray","undefined","createBuffer","length","bindBuffer","ARRAY_BUFFER","bufferData","Float32Array","STATIC_DRAW","enableVertexAttribArray","vertexAttribPointer","FLOAT","ELEMENT_ARRAY_BUFFER","Uint16Array","id","getElementById","d"],"sourceRoot":""}