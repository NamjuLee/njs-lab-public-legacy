{"version":3,"file":"static/js/29182.20b9c2f6.chunk.js","mappings":"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","sources":["njslab/LabStarter/AppNGL3d/NGL3dApp_02/Geometry/Point.ts","njslab/LabStarter/AppNGL3d/NGL3dApp_02/Utility/GLShaderCommon.ts"],"sourcesContent":["import { NGL3dApp } from '..';\r\n\r\nimport { GLShaderCommon } from '../Utility/GLShaderCommon';\r\n\r\nexport class Point {\r\n    vOld = `#version 300 es\r\n        in vec3 a_position;\r\n\r\n        uniform float uPointSize;\r\n\r\n        void main(void) {\r\n            gl_PointSize = uPointSize;\r\n            gl_Position = vec4(a_position, 1.0);\r\n        }\r\n    `;\r\n    v = `#version 300 es\r\n\r\n        in vec3 a_position;\r\n\r\n        uniform float uPointSize;\r\n        uniform float uAngle;\r\n\r\n        void main(void) {\r\n            gl_PointSize = uPointSize;\r\n            gl_Position = vec4(cos(uAngle) * 0.8 + a_position.x, sin(uAngle) * 0.8 + a_position.y, a_position.z, 1.0);\r\n        }\r\n    `;\r\n    f = `#version 300 es\r\n        precision mediump float;\r\n\r\n        out vec4 finalColor;\r\n\r\n        void main(void) {\r\n            finalColor = vec4(1.0, 0.0, 0.0, 1.0);\r\n        }\r\n    `;\r\n\r\n    app: NGL3dApp;\r\n\r\n    gl: WebGL2RenderingContext;\r\n\r\n    vShader: WebGLShader;\r\n    fShader: WebGLShader;\r\n    program: WebGLProgram | null;\r\n\r\n    aPositionLoc: number;\r\n    uPointSizeLoc: WebGLUniformLocation | null;\r\n    uAngle: WebGLUniformLocation | null;\r\n\r\n    gVertCnt: number;\r\n    size: number = 2.5;\r\n\r\n    bufVerts: WebGLBuffer | null;\r\n\r\n    constructor(app: NGL3dApp) {\r\n        this.app = app;\r\n        this.gl = app.canvas.gl;\r\n        this.initShader(this.gl);\r\n    }\r\n    initShader(gl: WebGL2RenderingContext) {\r\n\r\n        this.program = GLShaderCommon.getShaderProgram(gl, this.v, this.f);\r\n        if (this.program) {\r\n            gl.useProgram(this.program);\r\n            this.aPositionLoc = gl.getAttribLocation(this.program, 'a_position');\r\n            this.uPointSizeLoc = gl.getUniformLocation(this.program, 'uPointSize');\r\n            this.uAngle = gl.getUniformLocation(this.program, 'uAngle');\r\n\r\n            gl.useProgram(null);\r\n            this.initBuffer(gl);\r\n        }\r\n    }\r\n    initBuffer(gl: WebGL2RenderingContext) {\r\n        let isStatic = false;\r\n        let aryVerts = new Float32Array([0, 0, 0]);\r\n\r\n        this.bufVerts = gl.createBuffer();\r\n        gl.bindBuffer(gl.ARRAY_BUFFER, this.bufVerts);\r\n        gl.bufferData(gl.ARRAY_BUFFER, aryVerts, (isStatic) ? gl.STATIC_DRAW : gl.DYNAMIC_DRAW);\r\n        gl.bindBuffer(gl.ARRAY_BUFFER, null);\r\n\r\n        this.gVertCnt = aryVerts.length / 3;\r\n\r\n        gl.useProgram(this.program);\r\n\r\n        gl.bindBuffer(gl.ARRAY_BUFFER, this.bufVerts);\r\n        gl.enableVertexAttribArray(this.aPositionLoc);\r\n        gl.vertexAttribPointer(this.aPositionLoc, 3, gl.FLOAT, false, 0, 0);\r\n        gl.bindBuffer(gl.ARRAY_BUFFER, null);\r\n\r\n        this.app.scene.triList.push(this);\r\n    }\r\n    render(gl: WebGL2RenderingContext) {\r\n        this.size += 0.01;\r\n        let size = (Math.sin(this.size) * 10.0) + 30.0;\r\n        gl.uniform1f(this.uPointSizeLoc, size);\r\n\r\n        gl.uniform1f(this.uAngle, this.size);\r\n        gl.drawArrays(gl.POINTS, 0, this.gVertCnt);\r\n    }\r\n}","\r\nexport class GLShaderCommon {\r\n\r\n    static getShaderProgram(gl: WebGL2RenderingContext, vertexShader: string, fragmentShader: string, needValidate: boolean = true) {\r\n        let vShader = GLShaderCommon.createShader(gl, gl.VERTEX_SHADER as unknown as WebGLShader, vertexShader);\r\n        let fShader = GLShaderCommon.createShader(gl, gl.FRAGMENT_SHADER as unknown as WebGLShader, fragmentShader);\r\n        if (vShader && fShader) {\r\n            let program = GLShaderCommon.createProgram(gl, vShader, fShader, needValidate);\r\n\r\n            if (program) {\r\n                return program;\r\n\r\n            } else {\r\n                console.error('vertex fragment shader error'); return null;\r\n            }\r\n        } else {\r\n            console.error('vertex fragment shader error'); return null;\r\n        }\r\n    }\r\n    static getShader(gl: WebGL2RenderingContext, type: number, source: string) {\r\n        const shader = gl.createShader(type);\r\n        if (shader === null) { return null; }\r\n        gl.shaderSource(shader, source);\r\n        gl.compileShader(shader);\r\n\r\n        // Check if compiled successfully\r\n        if (!gl.getShaderParameter(shader, gl.COMPILE_STATUS)) {\r\n            console.log('An error occurred compiling the shaders:' + gl.getShaderInfoLog(shader));\r\n            gl.deleteShader(shader);\r\n            return null;\r\n        }\r\n        // Set the attributes, varying, and uniform to shader\r\n        // shader.attributes = this.attributesFromSource(source);\r\n        // shader.varyings = this.varyingsFromSource(source);\r\n        // shader.uniforms = this.uniformsFromSource(source);\r\n        return shader;\r\n    }\r\n    static createProgram(gl: WebGL2RenderingContext, vertexShader: WebGLShader, fragmentShader: WebGLShader, needValidate: boolean = true): WebGLProgram | null {\r\n        const program = gl.createProgram();\r\n        if (program === null) { return null; }\r\n        gl.attachShader(program, vertexShader);\r\n        gl.attachShader(program, fragmentShader);\r\n        gl.linkProgram(program);\r\n\r\n        // Check that shader program was able to link to WebGL\r\n        if (!gl.getProgramParameter(program, gl.LINK_STATUS)) {\r\n            const error = gl.getProgramInfoLog(program);\r\n            console.log('Failed to link program: ' + error);\r\n            gl.deleteProgram(program);\r\n            gl.deleteShader(fragmentShader);\r\n            gl.deleteShader(vertexShader);\r\n            return null;\r\n        }\r\n        if (needValidate) {\r\n            gl.validateProgram(program);\r\n            if (!gl.getProgramParameter(program, gl.VALIDATE_STATUS)) {\r\n                console.error('Failed to validate program', gl.getProgramInfoLog(program));\r\n                gl.deleteProgram(program);\r\n                gl.deleteShader(fragmentShader);\r\n                gl.deleteShader(vertexShader);\r\n                return null;\r\n            }\r\n        }\r\n        gl.deleteShader(fragmentShader);\r\n        gl.deleteShader(vertexShader);\r\n        return program;\r\n    }\r\n\r\n    // ...............................\r\n\r\n    // static CreateShader(gl: WebGL2RenderingContext, type: WebGLShader, shaderString: string) {\r\n    //     let shader = gl.createShader(type as number);\r\n    //     gl.shaderSource(shader, shaderString);\r\n    //     gl.compileShader(shader);\r\n    //     gl.getShaderParameter(shader, gl.COMPILE_STATUS);\r\n    //     return shader as Webglsh;\r\n    //     // console.log(gl.getShaderInfoLog(shader));\r\n    //     // gl.deleteShader(shader);\r\n    //     // return null;\r\n    // }\r\n    static createShader(gl: WebGL2RenderingContext, type: WebGLShader, shaderString: string) {\r\n        console.log(type);\r\n        const shader = gl.createShader(type as unknown as number);\r\n        if (shader === null) { return null; }\r\n        gl.shaderSource(shader, shaderString);\r\n        gl.compileShader(shader);\r\n        const suc = gl.getShaderParameter(shader, gl.COMPILE_STATUS);\r\n        if (suc) { return shader; }\r\n        console.log(gl.getShaderInfoLog(shader));\r\n        gl.deleteShader(shader);\r\n        return null;\r\n    }\r\n    static createShaderFromPath(gl: WebGL2RenderingContext, type: WebGLShader, url: string) {\r\n        const shader = gl.createShader(type as unknown as number);\r\n        if (shader === null) { return null; }\r\n        gl.shaderSource(shader, GLShaderCommon.getSourceSynch(url) as string);\r\n        gl.compileShader(shader);\r\n        const suc = gl.getShaderParameter(shader, gl.COMPILE_STATUS);\r\n        if (suc) { return shader; }\r\n        console.log(gl.getShaderInfoLog(shader));\r\n        gl.deleteShader(shader);\r\n        return null;\r\n    }\r\n\r\n    static getSourceSynch(url: string) {\r\n        const req = new XMLHttpRequest();\r\n        req.open('GET', url, false);\r\n        req.send(null);\r\n        return (req.status === 200) ? req.responseText : null;\r\n    }\r\n\r\n    // static LoadTextResource(url: string, callback:(data: any, d2:any) => void ) {\r\n    //     let request = new XMLHttpRequest();\r\n    //     request.open('GET', url + '?please-dont-cache=' + Math.random(), true);\r\n    //     request.onload = function () {\r\n    //         if (request.status < 200 || request.status > 299) {\r\n    //             callback('Error: HTTP Status ' + request.status + ' on resource ' + url);\r\n    //         } else {\r\n    //             callback(null, request.responseText);\r\n    //         }\r\n    //     };\r\n    //     request.send();\r\n    // }\r\n    // static LoadShader(url: string, callback:(data: null, callback:string) => void ) {\r\n    //     GLUtility.LoadTextResource(url, callback);\r\n    // }\r\n    static loadImage(url: string, callback: (data: null, image: HTMLElement) => void) {\r\n        const image = new Image();\r\n        image.onload = function () {\r\n            callback(null, image);\r\n        };\r\n        image.src = url;\r\n    }\r\n    // static LoadJSONResource(url: string, callback:(data: string, callback:string) => void ) {\r\n    //     GLUtility.LoadTextResource(url, function (err: Error, result) {\r\n    //         if (err) {\r\n    //             callback(err);\r\n    //         } else {\r\n    //             try {\r\n    //                 callback(null, JSON.parse(result));\r\n    //             } catch (e) {\r\n    //                 callback(e);\r\n    //             }\r\n    //         }\r\n    //     });\r\n    // }\r\n}\r\n"],"names":["Point","constructor","app","vOld","v","f","gl","vShader","fShader","program","aPositionLoc","uPointSizeLoc","uAngle","gVertCnt","size","bufVerts","this","canvas","initShader","GLShaderCommon","useProgram","getAttribLocation","getUniformLocation","initBuffer","aryVerts","Float32Array","createBuffer","bindBuffer","ARRAY_BUFFER","bufferData","DYNAMIC_DRAW","length","enableVertexAttribArray","vertexAttribPointer","FLOAT","scene","triList","push","render","Math","sin","uniform1f","drawArrays","POINTS","static","vertexShader","fragmentShader","needValidate","createShader","VERTEX_SHADER","FRAGMENT_SHADER","createProgram","console","error","type","source","shader","shaderSource","compileShader","getShaderParameter","COMPILE_STATUS","log","getShaderInfoLog","deleteShader","attachShader","linkProgram","getProgramParameter","LINK_STATUS","getProgramInfoLog","deleteProgram","validateProgram","VALIDATE_STATUS","shaderString","url","getSourceSynch","req","XMLHttpRequest","open","send","status","responseText","callback","image","Image","onload","src"],"sourceRoot":""}