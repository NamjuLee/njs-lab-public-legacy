{"version":3,"file":"static/js/12407.10b61f1e.chunk.js","mappings":"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","sources":["njslab/LabStarter/AppNGL3d/NGL3dApp_08/Core/Canvas.ts","njslab/LabStarter/AppNGL3d/NGL3dApp_08/Core/Renderer.ts","njslab/LabStarter/AppNGL3d/NGL3dApp_08/Core/Scene.ts","njslab/LabStarter/AppNGL3d/NGL3dApp_08/Core/Texture.ts","njslab/LabStarter/AppNGL3d/NGL3dApp_08/Geometry/Core/Base.ts","njslab/LabStarter/AppNGL3d/NGL3dApp_08/Geometry/Primatives/GridAxis.ts","njslab/LabStarter/AppNGL3d/NGL3dApp_08/Geometry/Primatives/Quad.ts","njslab/LabStarter/AppNGL3d/NGL3dApp_08/Utility/Matrix4.ts","njslab/LabStarter/AppNGL3d/NGL3dApp_08/Utility/Vector3.ts","njslab/LabStarter/AppNGL3d/NGL3dApp_08/WebGL/Camera.ts","njslab/LabStarter/AppNGL3d/NGL3dApp_08/WebGL/Model.ts","njslab/LabStarter/AppNGL3d/NGL3dApp_08/WebGL/Shader.ts","njslab/LabStarter/AppNGL3d/NGL3dApp_08/WebGL/Transform.ts","njslab/LabStarter/AppNGL3d/NGL3dApp_08/WebGL/VAO.ts","njslab/LabStarter/AppNGL3d/NGL3dApp_08/index.ts"],"sourcesContent":["import { NGL3dApp } from '..';\r\n\r\nexport class Canvas {\r\n    app: NGL3dApp;\r\n\r\n    gl: WebGL2RenderingContext;\r\n    canvas: HTMLCanvasElement;\r\n\r\n    constructor(app: NGL3dApp) {\r\n        this.app = app;\r\n\r\n        this.canvas = document.createElement('canvas');\r\n        if (this.app.host) {\r\n            this.app.host.appendChild(this.canvas);\r\n            this.canvas.width = this.app.host.clientWidth;\r\n            this.canvas.height = this.app.host.clientHeight;\r\n        }\r\n        const gl = this.canvas.getContext('webgl2');\r\n        if (gl !== null) {\r\n            this.gl = gl;\r\n            this.gl.cullFace(gl.BACK);\t\t\t\t\t\t\t\t    // Back is also default\r\n            this.gl.frontFace(gl.CCW);\t\t\t\t\t\t\t\t    // Dont really need to set it, its ccw by default.\r\n            this.gl.enable(gl.DEPTH_TEST);\t\t\t\t\t\t\t    // Shouldn't use this, use something else to add depth detection\r\n            this.gl.enable(gl.CULL_FACE);\t\t\t\t\t\t\t    // Cull back face, so only show triangles that are created clockwise\r\n            this.gl.depthFunc(gl.LEQUAL);\t\t\t\t\t\t\t    // Near things obscure far things\r\n            this.gl.blendFunc(gl.SRC_ALPHA, gl.ONE_MINUS_SRC_ALPHA);\t// Setup default alpha blending\r\n        }\r\n\r\n        this.loop();\r\n    }\r\n    // fFitScreen = function(wp,hp) { return this.fSetSize(window.innerWidth * (wp || 1),window.innerHeight * (hp || 1)); }\r\n\r\n    loop() {\r\n        this.clear(this.gl);\r\n        requestAnimationFrame(() => { this.loop(); });\r\n\r\n        this.app.renderer.render();\r\n        // console.log('working');\r\n    }\r\n    clear(gl: WebGL2RenderingContext) {\r\n\r\n        gl.cullFace(gl.BACK);\t\t\t\t\t\t\t\t// Back is also default\r\n        gl.frontFace(gl.CCW);\t\t\t\t\t\t\t\t// Dont really need to set it, its ccw by default.\r\n        gl.enable(gl.DEPTH_TEST);\t\t\t\t\t\t\t// Shouldn't use this, use something else to add depth detection\r\n        gl.enable(gl.CULL_FACE);\t\t\t\t\t\t\t// Cull back face, so only show triangles that are created clockwise\r\n        gl.depthFunc(gl.LEQUAL);\t\t\t\t\t\t\t// Near things obscure far things\r\n        gl.blendFunc(gl.SRC_ALPHA, gl.ONE_MINUS_SRC_ALPHA);\t// Setup default alpha blending\r\n        gl.clearColor(1.0, 1.0, 1.0, 1.0);\t// Set clear color\r\n\r\n        // gl.clear(gl.COLOR_BUFFER_BIT | gl.DEPTH_BUFFER_BIT);\r\n        // gl.clearColor(1.0, 1.0, 1.0, 1.0);\r\n    }\r\n}\r\n","import { NGL3dApp } from '..';\r\n\r\nexport class Renderer {\r\n    app: NGL3dApp;\r\n    constructor(app: NGL3dApp) {\r\n        this.app = app;\r\n    }\r\n    render() {\r\n        if (this.app.camera) { this.app.camera.updateViewMatrix(); }\r\n\r\n        // console.log(gl);\r\n\r\n        // console.log(this.app.scene.geometries);\r\n\r\n        this.app.scene.geometries.forEach((e) => { e.render(); });\r\n\r\n    }\r\n}","import { NGL3dApp } from '..';\r\n\r\nimport { GeometryBase } from '../Geometry/Core/Base';\r\n\r\nexport class Scene {\r\n    NGL3dApp: NGL3dApp;\r\n\r\n    geometries: GeometryBase[] = [];\r\n\r\n    constructor(NGL3dApp: NGL3dApp) {\r\n        this.NGL3dApp = NGL3dApp;\r\n    }\r\n    add(mesh: GeometryBase) {\r\n        this.geometries.push(mesh);\r\n    }\r\n}","import { NGL3dApp } from '..';\r\n\r\nimport { ShaderUtility } from '../WebGL/Shader';\r\n\r\nexport const uvGrid = require('../Asset/UV_Grid_Lrg.jpg');\r\n\r\nexport class Texture {\r\n    app: NGL3dApp;\r\n\r\n    uvGridWebGLTexture: WebGLTexture;\r\n\r\n    constructor(app: NGL3dApp) {\r\n        this.app = app;\r\n\r\n    }\r\n    async UploadTexture(path: string) {\r\n        // tslint:disable-next-line:no-any\r\n        return this.LoadTexture(path).then((imgPath: any) => {\r\n            const webGLTex = ShaderUtility.LoadTexture(this.app.canvas.gl, imgPath, false);\r\n            if (webGLTex) {\r\n                this.uvGridWebGLTexture = webGLTex;\r\n            }\r\n        });\r\n    }\r\n    private async LoadTexture(src: string) {\r\n        return new Promise((resolve, reject) => {\r\n            let img = new Image();\r\n            img.onload = () => resolve(img);\r\n            img.onerror = reject;\r\n            img.src = src;\r\n        });\r\n    }\r\n}","import { Scene } from '../../Core/Scene';\r\n\r\nexport class GeometryBase {\r\n    scene: Scene;\r\n    constructor(scene: Scene) {\r\n        this.scene = scene;\r\n        this.scene.add(this);\r\n    }\r\n    render() {\r\n        //\r\n    }\r\n}","\r\nimport { VAO } from '../../WebGL/VAO';\r\nimport { Model } from '../../WebGL/Model';\r\nimport { Shader, ATTR } from '../../WebGL/Shader';\r\n\r\nimport { NGL3dApp } from '../..';\r\nimport { GeometryBase } from '../Core/Base';\r\n// import { vaoCommon } from '../../WebGL/vaoCommon';\r\n\r\nclass GridAxisShader extends Shader {\r\n\r\n    uPointSize: WebGLUniformLocation | null;\r\n    uAngle: WebGLUniformLocation | null;\r\n\r\n    constructor(gl: WebGL2RenderingContext, vertSrc: string, fragSrc: string, aryColor: number[], pMatrix: Float32Array) {\r\n        super(gl, vertSrc, fragSrc);\t// Call the base class constructor which will setup most of what we need\r\n\r\n        if (this.program) {\r\n            this.setPerspective(pMatrix);\r\n            gl.useProgram(this.program); // Done setting up shader\r\n            let uColor = gl.getUniformLocation(this.program, 'uColor');\r\n            gl.uniform3fv(uColor, aryColor);\r\n            // gl.useProgram(null); // Done setting up shader\r\n        }\r\n\r\n    }\r\n    renderModel(model: Model) {\r\n        this.setModelMatrix(model.transform.getViewMatrix());\t// Set the transform, so the shader knows where the model exists in 3d space\r\n        this.gl.bindVertexArray(model.vao.vao);\t// Enable VAO, this will set all the predefined attributes for the shader\r\n\r\n        if (model.vao.indexCount) {\r\n            this.gl.drawElements(model.vao.drawMode, model.vao.indexCount, this.gl.UNSIGNED_SHORT, 0);\r\n        } else { this.gl.drawArrays(model.vao.drawMode, 0, model.vao.vertexCount); }\r\n\r\n        this.gl.bindVertexArray(null);\r\n\r\n        return this;\r\n    }\r\n}\r\nexport class GridAxis extends GeometryBase {\r\n    v = `#version 300 es\r\n    in vec3 a_position;\t//Standard position data.\r\n    layout(location=4) in float a_color;\t//Will hold the 4th custom position of the custom position buffer.\r\n\r\n    uniform mat4 uPMatrix;\r\n    uniform mat4 uMVMatrix;\r\n    uniform mat4 uCameraMatrix;\r\n\r\n    uniform vec3 uColor[4];\t//Color Array\r\n\r\n    out lowp vec4 color;\t//Color to send to fragment shader.\r\n\r\n    void main(void) {\r\n        color = vec4(uColor[ int(a_color) ],1.0); //Using the 4th float as a color index.\r\n        gl_Position = uPMatrix * uCameraMatrix * uMVMatrix * vec4(a_position, 1.0);\r\n    }\r\n    `;\r\n    f = `#version 300 es\r\n    precision mediump float;\r\n\r\n    in vec4 color;\r\n    out vec4 finalColor;\r\n\r\n    void main(void) { finalColor = color; }\r\n    `;\r\n    app: NGL3dApp;\r\n    gl: WebGL2RenderingContext;\r\n\r\n    vao: VAO;\r\n    model: Model;\r\n    shader: GridAxisShader;\r\n\r\n    ro: number = 0;\r\n    t: number = 0.0;\r\n    constructor(app: NGL3dApp) {\r\n        super(app.scene);\r\n        this.app = app;\r\n        this.gl = app.canvas.gl;\r\n        this.initShader(this.gl);\r\n    }\r\n    GetVAO(incAxis: boolean = true) {\r\n        let verts = [],\r\n            size = 1.8,\t\t\t// W/H of the outer box of the grid, from origin we can only go 1 unit in each direction, so from left to right is 2 units max\r\n            div = 10.0,\t\t\t// How to divide up the grid\r\n            step = size / div,\t// Steps between each line, just a number we increment by for each line in the grid.\r\n            half = size / 2;\t// From origin the starting position is half the size.\r\n\r\n        let p;\t// Temp letiable for position value.\r\n        for (let i = 0; i <= div; i++) {\r\n            // Vertical line\r\n            p = -half + (i * step);\r\n            verts.push(p);\t\t// x1\r\n            verts.push(0);\t\t// y1 verts.push(half);\r\n            verts.push(half);\t// z1 verts.push(0);\r\n            verts.push(0);\t\t// c2\r\n\r\n            verts.push(p);\t\t// x2\r\n            verts.push(0);\t\t// y2 verts.push(-half);\r\n            verts.push(-half);\t// z2 verts.push(0);\r\n            verts.push(0);\t\t// c2 verts.push(1);\r\n\r\n            // Horizontal line\r\n            p = half - (i * step);\r\n            verts.push(-half);\t// x1\r\n            verts.push(0);\t\t// y1 verts.push(p);\r\n            verts.push(p);\t\t// z1 verts.push(0);\r\n            verts.push(0);\t\t// c1\r\n\r\n            verts.push(half);\t// x2\r\n            verts.push(0);\t\t// y2 verts.push(p);\r\n            verts.push(p);\t\t// z2 verts.push(0);\r\n            verts.push(0);\t\t// c2 verts.push(1);\r\n        }\r\n\r\n        if (incAxis) {\r\n            // x axis\r\n            verts.push(-1.1);\t// x1\r\n            verts.push(0);\t\t// y1\r\n            verts.push(0);\t\t// z1\r\n            verts.push(1);\t\t// c2\r\n\r\n            verts.push(1.1);\t// x2\r\n            verts.push(0);\t\t// y2\r\n            verts.push(0);\t\t// z2\r\n            verts.push(1);\t\t// c2\r\n\r\n            // y axis\r\n            verts.push(0);      // x1\r\n            verts.push(-1.1);\t// y1\r\n            verts.push(0);\t\t// z1\r\n            verts.push(2);\t\t// c2\r\n\r\n            verts.push(0);\t\t// x2\r\n            verts.push(1.1);\t// y2\r\n            verts.push(0);\t\t// z2\r\n            verts.push(2);\t\t// c2\r\n\r\n            // z axis\r\n            verts.push(0);\t\t// x1\r\n            verts.push(0);\t\t// y1\r\n            verts.push(-1.1);\t// z1\r\n            verts.push(3);\t\t// c2\r\n\r\n            verts.push(0);\t\t// x2\r\n            verts.push(0);\t\t// y2\r\n            verts.push(1.1);\t// z2\r\n            verts.push(3);\t\t// c2\r\n        }\r\n\r\n        // Setup\r\n        // let attrColorLoc = 4;\r\n        this.vao = new VAO(this.gl, 'grid', verts); // { drawMode:gl.LINES, vao:gl.createVertexArray() };\r\n        this.vao.drawMode = this.gl.LINES;\r\n        this.vao.vao = this.gl.createVertexArray();\r\n\r\n        // Do some math\r\n        this.vao.vertexComponentLen = 4;\r\n        this.vao.vertexCount = verts.length / this.vao.vertexComponentLen;\r\n        let strideLen = Float32Array.BYTES_PER_ELEMENT * this.vao.vertexComponentLen; // Stride Length is the Vertex Size for the buffer in Bytes\r\n\r\n        // Setup our Buffer\r\n        this.vao.bufVertices = this.gl.createBuffer();\r\n        this.gl.bindVertexArray(this.vao.vao);\r\n        this.gl.bindBuffer(this.gl.ARRAY_BUFFER, this.vao.bufVertices);\r\n        this.gl.bufferData(this.gl.ARRAY_BUFFER, new Float32Array(verts), this.gl.STATIC_DRAW);\r\n        this.gl.enableVertexAttribArray(ATTR.ATTR_POSITION_LOC);\r\n        this.gl.enableVertexAttribArray(ATTR.ATTR_COLOR_LOC);\r\n\r\n        this.gl.vertexAttribPointer(\r\n            ATTR.ATTR_POSITION_LOC\t\t\t\t\t\t// Attribute Location\r\n            , 3\t\t\t\t\t\t\t\t\t\t// How big is the vector by number count\r\n            , this.gl.FLOAT \t\t\t\t\t\t\t\t// What type of number we passing in\r\n            , false\t\t\t\t\t\t\t\t\t// Does it need to be normalized?\r\n            , strideLen\t\t\t\t\t\t\t\t// How big is a vertex chunk of data.\r\n            , 0\t\t\t\t\t\t\t\t\t\t// Offset by how much\r\n        );\r\n\r\n        this.gl.vertexAttribPointer(\r\n            ATTR.ATTR_COLOR_LOC\t\t\t\t\t\t\t// new shader has \"in float a_color\" as the second attrib\r\n            , 1\t\t\t\t\t\t\t\t\t\t// This atttrib is just a single float\r\n            , this.gl.FLOAT\r\n            , false\r\n            , strideLen\t\t\t\t\t\t\t\t// Each vertex chunk is 4 floats long\r\n            , Float32Array.BYTES_PER_ELEMENT * 3\t\t// skip first 3 floats in our vertex chunk, its like str.substr(3,1) in theory.\r\n        );\r\n\r\n        // Cleanup and Finalize\r\n        this.gl.bindVertexArray(null);\r\n        this.gl.bindBuffer(this.gl.ARRAY_BUFFER, null);\r\n        // this.gl.mvaoCache[\"grid\"] = this.vao;\r\n        return this.vao;\r\n    }\r\n    initShader(gl: WebGL2RenderingContext) {\r\n        const col = [0.8, 0.8, 0.8, 1, 0, 0, 0, 1, 0, 0, 0, 1];\r\n        this.shader = new GridAxisShader(gl, this.v, this.f, col, this.app.camera.projectionMatrix);\r\n        this.vao = this.GetVAO();\r\n        this.model = new Model(this.vao);\r\n    }\r\n    render() {\r\n        // his.shader.activate();\r\n        // this.ro += 0.04;\r\n        // this.shader.set(this.ro);\r\n        // this.shader.renderModel(this.model);\r\n\r\n        // let p = this.model.transform.position;\t\t// Just an pointer to transform position, make code smaller\r\n        // console.log(p);\r\n        // let angle = Math.atan2(p.y, p.x)  + (1 * this.t);\t\t// Calc the current angle plus 1 degree per second rotation\r\n        // let radius = Math.sqrt(p.x * p.x + p.y * p.y);\t// Calc the distance from origin.\r\n        // let scale = Math.max(0.2,  Math.abs(Math.sin(angle)) * 1.2  );   // Just messing with numbers and seeing what happens :)\r\n        // console.log(angle, radius);\r\n\r\n        // this.model.setScale(scale, scale, 1);\r\n        // this.model.setPosition( radius * Math.cos(angle), radius * Math.sin(angle), 0 );\r\n        // this.model.transform.rotation.z += 15 * this.t;\r\n        // this.model.transform.rotation.x += 30 * this.t;\r\n        // this.model.transform.rotation.y += 60 * this.t;\r\n\r\n        this.shader.activate().setCameraMatrix(this.app.camera.viewMatrix).renderModel(this.model.preRender());\r\n        this.t = 0.01;\r\n    }\r\n}","import { Vector3 } from '../../Utility/Vector3';\r\n\r\nimport { VAO } from '../../WebGL/VAO';\r\nimport { Model } from '../../WebGL/Model';\r\n\r\nimport { NGL3dApp } from '../..';\r\n\r\nimport { Shader } from '../../WebGL/Shader';\r\nimport { GeometryBase } from '../Core/Base';\r\n\r\nclass ShaderQuad extends Shader {\r\n\r\n    uPointSize: WebGLUniformLocation | null;\r\n    uAngle: WebGLUniformLocation | null;\r\n\r\n    texture: WebGLTexture;\r\n\r\n    pMatrix: Float32Array;\r\n    constructor(gl: WebGL2RenderingContext, vertSrc: string, fragSrc: string, pMatrix: Float32Array) {\r\n        super(gl, vertSrc, fragSrc);\r\n        this.pMatrix = pMatrix;\r\n\r\n        // Our shader uses custom uniforms, this is the time to get its location for future use.\r\n        if (this.program) {\r\n            gl.useProgram(this.program);\r\n            this.setPerspective(pMatrix);\r\n\r\n            let uColor = gl.getUniformLocation(this.program, 'uColor');\r\n            gl.uniform3fv(uColor, new Float32Array([0.8, 0.8, 0.8, 1, 0, 0, 0, 1, 0, 0, 0, 1]));\r\n\r\n            // this.uPointSize = gl.getUniformLocation(this.program, 'uPointSize');\r\n            // this.uAngle = gl.getUniformLocation(this.program, 'uAngle');\r\n\r\n            // gl.useProgram(this.program);\r\n            gl.useProgram(null); // Done setting up shader\r\n        }\r\n    }\r\n    // Simple function that passes in Angle and Pointsize uniform data to the shader program.\r\n    set(size: number, angle: number) {\r\n        // this.gl.useProgram(null);\r\n        // this.gl.uniform1f(this.uAngle, angle);\r\n        // this.gl.uniform1f(this.uPointSize, size);\r\n        return this;\r\n    }\r\n    setTexture(texID: WebGLTexture) {\r\n        this.texture = texID; return this;\r\n    }\r\n}\r\n\r\nexport class Quad extends GeometryBase {\r\n    v = `#version 300 es\r\n\r\n        in vec3 a_position;\t// Standard position data.\r\n        in vec2 a_uv;\r\n\r\n        layout(location=4) in float a_color;\r\n\r\n        uniform mat4 uPMatrix;\r\n        uniform mat4 uMVMatrix;\r\n        uniform mat4 uCameraMatrix;\r\n\r\n        uniform vec3 uColor[4];\r\n\r\n        out vec2 uv;\r\n        out lowp vec4 color;\r\n\r\n        void main(void) {\r\n            uv = a_uv;\r\n            // uv = vec2(0.5, 1);\r\n\r\n            color = vec4(uColor[ int(a_color) ], 1.0);\r\n\r\n            gl_Position = uPMatrix * uCameraMatrix * uMVMatrix * vec4(a_position, 1.0);\r\n        }\r\n    `;\r\n\r\n    f = `#version 300 es\r\n\r\n    precision mediump float;\r\n\r\n    in highp vec2 uv;\r\n    in vec4 color;\r\n\r\n    uniform sampler2D uMainTex;\r\n\r\n    out vec4 finalColor;\r\n\r\n    void main(void) {\r\n\r\n        //Square Border\r\n        // float c = (uv.x <= 0.1 || uv.x >=0.9 || uv.y <= 0.1 || uv.y >= 0.9)? 0.0 : 1.0;\r\n\r\n        // finalColor = vec4(1.0, uv.x, uv.y ,1.0-c);\r\n        // finalColor = vec4(color.xyz, 1.0 -c);\r\n\r\n        finalColor = texture(uMainTex, vec2(uv.s, uv.t));  //Get the color of the pixel at that UV location\r\n\r\n        // //Circle\r\n        // //  /*\r\n        // vec2 delta = uv - vec2(0.5,0.5); //delta position from center;\r\n        // float dist = 0.5 - sqrt(delta.x*delta.x + delta.y*delta.y);\r\n\r\n        // float border = 0.01;\r\n        // float a = 0.0;\r\n        // if(dist > border) a = 1.0;\r\n        // else if(dist > 0.0) a = dist / border;\r\n\r\n        // finalColor = vec4(0.0,0.0,0.0,a);\r\n        // //  */\r\n    }\r\n    `;\r\n    app: NGL3dApp;\r\n    vao: VAO;\r\n    shader: ShaderQuad;\r\n    model: Model;\r\n\r\n    size: number = 20.5;\r\n    rotation: number = 0.0;\r\n\r\n    constructor(app: NGL3dApp) {\r\n        super(app.scene);\r\n        this.app = app;\r\n        let aVert = [-0.5, 0.5, 0, -0.5, -0.5, 0, 0.5, -0.5, 0, 0.5, 0.5, 0];\r\n        // 0,  0, 0,  1, 1,   1  ,1,  0\r\n        let aUV = [0., 0., 0., 1., 1., 1., 1., 0.];\r\n        let aIndex = [0, 1, 2, 2, 3, 0];\r\n\r\n        this.shader = new ShaderQuad(this.app.canvas.gl, this.v, this.f, this.app.camera.projectionMatrix);\r\n        this.shader.setTexture(this.app.texture.uvGridWebGLTexture);\r\n        this.vao = new VAO(app.canvas.gl, 'Quad', aVert, aIndex, undefined, aUV);\r\n        this.vao.noCulling = true;\r\n        this.vao.doBlending = true;\r\n\r\n        this.model = new Model(this.vao);\r\n\r\n        this.SetTexture(this.app.canvas.gl);\r\n    }\r\n    SetTexture(gl: WebGL2RenderingContext) {\r\n        gl.activeTexture(gl.TEXTURE0);\r\n        gl.bindTexture(gl.TEXTURE_2D, this.shader.texture);\r\n        // gl.uniform1i(this.shader.uniformLoc.mainTexture, 0);\r\n    }\r\n    render() {\r\n        // // console.log(this);\r\n        // this.size += 0.001;\r\n        // let size = (Math.sin(this.size) * 10.0) + 20.0;\r\n\r\n        this.model.transform.position = new Vector3(0, 0, this.model.transform.position.z + -0.01);\r\n\r\n        // this.UpdateTexture(this.app.canvas.gl);\r\n        this.shader.activate();\r\n        this.shader.setPerspective(this.shader.pMatrix);\r\n        // this.shader.set(size,  this.rotation);\r\n        // this.shader.activate().setCameraMatrix(this.app.camera.viewMatrix).renderModel(this.model.preRender());\r\n\r\n        this.shader.setCameraMatrix(this.app.camera.viewMatrix);\r\n        this.shader.renderModel(this.model.preRender());\r\n\r\n    }\r\n}","import { Vector3 } from './Vector3';\r\n\r\nexport class Matrix4 {\r\n    raw: Float32Array;\r\n    // ....................................................................\r\n    // Static Data Methods\r\n    static identity() {\r\n        let a = new Float32Array(16);\r\n        a[0] = a[5] = a[10] = a[15] = 1;\r\n        return a;\r\n    }\r\n\r\n    // from glMatrix\r\n    static perspective(out: Float32Array, fovy: number, aspect: number, near: number, far: number) {\r\n        let f = 1.0 / Math.tan(fovy / 2), nf = 1 / (near - far);\r\n        out[0] = f / aspect;\r\n        out[1] = 0;\r\n        out[2] = 0;\r\n        out[3] = 0;\r\n        out[4] = 0;\r\n        out[5] = f;\r\n        out[6] = 0;\r\n        out[7] = 0;\r\n        out[8] = 0;\r\n        out[9] = 0;\r\n        out[10] = (far + near) * nf;\r\n        out[11] = -1;\r\n        out[12] = 0;\r\n        out[13] = 0;\r\n        out[14] = (2 * far * near) * nf;\r\n        out[15] = 0;\r\n    }\r\n\r\n    static ortho(out: number[], left: number, right: number, bottom: number, top: number, near: number, far: number) {\r\n        let lr = 1 / (left - right),\r\n            bt = 1 / (bottom - top),\r\n            nf = 1 / (near - far);\r\n        out[0] = -2 * lr;\r\n        out[1] = 0;\r\n        out[2] = 0;\r\n        out[3] = 0;\r\n        out[4] = 0;\r\n        out[5] = -2 * bt;\r\n        out[6] = 0;\r\n        out[7] = 0;\r\n        out[8] = 0;\r\n        out[9] = 0;\r\n        out[10] = 2 * nf;\r\n        out[11] = 0;\r\n        out[12] = (left + right) * lr;\r\n        out[13] = (top + bottom) * bt;\r\n        out[14] = (far + near) * nf;\r\n        out[15] = 1;\r\n    }\r\n    // https:// github.com/toji/gl-matrix/blob/master/src/gl-matrix/mat4.js\r\n    // make the rows into the columns\r\n    static transpose(out: number[], a: number[]) {\r\n        // If we are transposing ourselves we can skip a few steps but have to cache some values\r\n        if (out === a) {\r\n            let a01 = a[1], a02 = a[2], a03 = a[3], a12 = a[6], a13 = a[7], a23 = a[11];\r\n            out[1] = a[4];\r\n            out[2] = a[8];\r\n            out[3] = a[12];\r\n            out[4] = a01;\r\n            out[6] = a[9];\r\n            out[7] = a[13];\r\n            out[8] = a02;\r\n            out[9] = a12;\r\n            out[11] = a[14];\r\n            out[12] = a03;\r\n            out[13] = a13;\r\n            out[14] = a23;\r\n        } else {\r\n            out[0] = a[0];\r\n            out[1] = a[4];\r\n            out[2] = a[8];\r\n            out[3] = a[12];\r\n            out[4] = a[1];\r\n            out[5] = a[5];\r\n            out[6] = a[9];\r\n            out[7] = a[13];\r\n            out[8] = a[2];\r\n            out[9] = a[6];\r\n            out[10] = a[10];\r\n            out[11] = a[14];\r\n            out[12] = a[3];\r\n            out[13] = a[7];\r\n            out[14] = a[11];\r\n            out[15] = a[15];\r\n        }\r\n\r\n        return out;\r\n    }\r\n\r\n    // Calculates a 3x3 normal matrix (transpose inverse) from the 4x4 matrix\r\n    static normalMat3(out: Float32Array, a: Float32Array) {\r\n        let a00 = a[0], a01 = a[1], a02 = a[2], a03 = a[3],\r\n            a10 = a[4], a11 = a[5], a12 = a[6], a13 = a[7],\r\n            a20 = a[8], a21 = a[9], a22 = a[10], a23 = a[11],\r\n            a30 = a[12], a31 = a[13], a32 = a[14], a33 = a[15],\r\n\r\n            b00 = a00 * a11 - a01 * a10,\r\n            b01 = a00 * a12 - a02 * a10,\r\n            b02 = a00 * a13 - a03 * a10,\r\n            b03 = a01 * a12 - a02 * a11,\r\n            b04 = a01 * a13 - a03 * a11,\r\n            b05 = a02 * a13 - a03 * a12,\r\n            b06 = a20 * a31 - a21 * a30,\r\n            b07 = a20 * a32 - a22 * a30,\r\n            b08 = a20 * a33 - a23 * a30,\r\n            b09 = a21 * a32 - a22 * a31,\r\n            b10 = a21 * a33 - a23 * a31,\r\n            b11 = a22 * a33 - a23 * a32,\r\n\r\n            //  Calculate the determinant\r\n            det = b00 * b11 - b01 * b10 + b02 * b09 + b03 * b08 - b04 * b07 + b05 * b06;\r\n\r\n        if (!det) { return null; }\r\n\r\n        det = 1.0 / det;\r\n\r\n        out[0] = (a11 * b11 - a12 * b10 + a13 * b09) * det;\r\n        out[1] = (a12 * b08 - a10 * b11 - a13 * b07) * det;\r\n        out[2] = (a10 * b10 - a11 * b08 + a13 * b06) * det;\r\n\r\n        out[3] = (a02 * b10 - a01 * b11 - a03 * b09) * det;\r\n        out[4] = (a00 * b11 - a02 * b08 + a03 * b07) * det;\r\n        out[5] = (a01 * b08 - a00 * b10 - a03 * b06) * det;\r\n\r\n        out[6] = (a31 * b05 - a32 * b04 + a33 * b03) * det;\r\n        out[7] = (a32 * b02 - a30 * b05 - a33 * b01) * det;\r\n        out[8] = (a30 * b04 - a31 * b02 + a33 * b00) * det;\r\n        return out;\r\n    }\r\n\r\n    // ....................................................................\r\n    // Static Operation\r\n\r\n    // https:// github.com/gregtatum/mdn-model-view-projection/blob/master/shared/matrices.js\r\n    static multiplyVector(mat4: Matrix4, v: number[]) {\r\n        let x = v[0], y = v[1], z = v[2], w = v[3];\r\n        let c1r1 = mat4[0], c2r1 = mat4[1], c3r1 = mat4[2], c4r1 = mat4[3],\r\n            c1r2 = mat4[4], c2r2 = mat4[5], c3r2 = mat4[6], c4r2 = mat4[7],\r\n            c1r3 = mat4[8], c2r3 = mat4[9], c3r3 = mat4[10], c4r3 = mat4[11],\r\n            c1r4 = mat4[12], c2r4 = mat4[13], c3r4 = mat4[14], c4r4 = mat4[15];\r\n\r\n        return [\r\n            x * c1r1 + y * c1r2 + z * c1r3 + w * c1r4,\r\n            x * c2r1 + y * c2r2 + z * c2r3 + w * c2r4,\r\n            x * c3r1 + y * c3r2 + z * c3r3 + w * c3r4,\r\n            x * c4r1 + y * c4r2 + z * c4r3 + w * c4r4\r\n        ];\r\n    }\r\n\r\n    // https:// github.com/toji/gl-matrix/blob/master/src/gl-matrix/vec4.js, vec4.transformMat4\r\n    static transformVec4(out: Float32Array, v: number[], m: Float32Array) {\r\n        out[0] = m[0] * v[0] + m[4] * v[1] + m[8] * v[2] + m[12] * v[3];\r\n        out[1] = m[1] * v[0] + m[5] * v[1] + m[9] * v[2] + m[13] * v[3];\r\n        out[2] = m[2] * v[0] + m[6] * v[1] + m[10] * v[2] + m[14] * v[3];\r\n        out[3] = m[3] * v[0] + m[7] * v[1] + m[11] * v[2] + m[15] * v[3];\r\n        return out;\r\n    }\r\n\r\n    // From glMatrix\r\n    // Multiple two mat4 together\r\n    static mult(out: Float32Array, a: Float32Array, b: Float32Array) {\r\n        let a00 = a[0], a01 = a[1], a02 = a[2], a03 = a[3],\r\n            a10 = a[4], a11 = a[5], a12 = a[6], a13 = a[7],\r\n            a20 = a[8], a21 = a[9], a22 = a[10], a23 = a[11],\r\n            a30 = a[12], a31 = a[13], a32 = a[14], a33 = a[15];\r\n\r\n        //  Cache only the current line of the second matrix\r\n        let b0 = b[0], b1 = b[1], b2 = b[2], b3 = b[3];\r\n        out[0] = b0 * a00 + b1 * a10 + b2 * a20 + b3 * a30;\r\n        out[1] = b0 * a01 + b1 * a11 + b2 * a21 + b3 * a31;\r\n        out[2] = b0 * a02 + b1 * a12 + b2 * a22 + b3 * a32;\r\n        out[3] = b0 * a03 + b1 * a13 + b2 * a23 + b3 * a33;\r\n\r\n        b0 = b[4]; b1 = b[5]; b2 = b[6]; b3 = b[7];\r\n        out[4] = b0 * a00 + b1 * a10 + b2 * a20 + b3 * a30;\r\n        out[5] = b0 * a01 + b1 * a11 + b2 * a21 + b3 * a31;\r\n        out[6] = b0 * a02 + b1 * a12 + b2 * a22 + b3 * a32;\r\n        out[7] = b0 * a03 + b1 * a13 + b2 * a23 + b3 * a33;\r\n\r\n        b0 = b[8]; b1 = b[9]; b2 = b[10]; b3 = b[11];\r\n        out[8] = b0 * a00 + b1 * a10 + b2 * a20 + b3 * a30;\r\n        out[9] = b0 * a01 + b1 * a11 + b2 * a21 + b3 * a31;\r\n        out[10] = b0 * a02 + b1 * a12 + b2 * a22 + b3 * a32;\r\n        out[11] = b0 * a03 + b1 * a13 + b2 * a23 + b3 * a33;\r\n\r\n        b0 = b[12]; b1 = b[13]; b2 = b[14]; b3 = b[15];\r\n        out[12] = b0 * a00 + b1 * a10 + b2 * a20 + b3 * a30;\r\n        out[13] = b0 * a01 + b1 * a11 + b2 * a21 + b3 * a31;\r\n        out[14] = b0 * a02 + b1 * a12 + b2 * a22 + b3 * a32;\r\n        out[15] = b0 * a03 + b1 * a13 + b2 * a23 + b3 * a33;\r\n        return out;\r\n    }\r\n\r\n    // ....................................................................\r\n    // Static Transformation\r\n    static scale(out: Float32Array, x: number, y: number, z: number) {\r\n        out[0] *= x;\r\n        out[1] *= x;\r\n        out[2] *= x;\r\n        out[3] *= x;\r\n        out[4] *= y;\r\n        out[5] *= y;\r\n        out[6] *= y;\r\n        out[7] *= y;\r\n        out[8] *= z;\r\n        out[9] *= z;\r\n        out[10] *= z;\r\n        out[11] *= z;\r\n        return out;\r\n    }\r\n\r\n    static rotateY(out: Float32Array, rad: number) {\r\n        let s = Math.sin(rad),\r\n            c = Math.cos(rad),\r\n            a00 = out[0],\r\n            a01 = out[1],\r\n            a02 = out[2],\r\n            a03 = out[3],\r\n            a20 = out[8],\r\n            a21 = out[9],\r\n            a22 = out[10],\r\n            a23 = out[11];\r\n\r\n        //  Perform axis-specific matrix multiplication\r\n        out[0] = a00 * c - a20 * s;\r\n        out[1] = a01 * c - a21 * s;\r\n        out[2] = a02 * c - a22 * s;\r\n        out[3] = a03 * c - a23 * s;\r\n        out[8] = a00 * s + a20 * c;\r\n        out[9] = a01 * s + a21 * c;\r\n        out[10] = a02 * s + a22 * c;\r\n        out[11] = a03 * s + a23 * c;\r\n        return out;\r\n    }\r\n\r\n    static rotateX(out: Float32Array, rad: number) {\r\n        let s = Math.sin(rad),\r\n            c = Math.cos(rad),\r\n            a10 = out[4],\r\n            a11 = out[5],\r\n            a12 = out[6],\r\n            a13 = out[7],\r\n            a20 = out[8],\r\n            a21 = out[9],\r\n            a22 = out[10],\r\n            a23 = out[11];\r\n\r\n        //  Perform axis-specific matrix multiplication\r\n        out[4] = a10 * c + a20 * s;\r\n        out[5] = a11 * c + a21 * s;\r\n        out[6] = a12 * c + a22 * s;\r\n        out[7] = a13 * c + a23 * s;\r\n        out[8] = a20 * c - a10 * s;\r\n        out[9] = a21 * c - a11 * s;\r\n        out[10] = a22 * c - a12 * s;\r\n        out[11] = a23 * c - a13 * s;\r\n        return out;\r\n    }\r\n\r\n    static rotateZ(out: Float32Array, rad: number) {\r\n        let s = Math.sin(rad),\r\n            c = Math.cos(rad),\r\n            a00 = out[0],\r\n            a01 = out[1],\r\n            a02 = out[2],\r\n            a03 = out[3],\r\n            a10 = out[4],\r\n            a11 = out[5],\r\n            a12 = out[6],\r\n            a13 = out[7];\r\n\r\n        //  Perform axis-specific matrix multiplication\r\n        out[0] = a00 * c + a10 * s;\r\n        out[1] = a01 * c + a11 * s;\r\n        out[2] = a02 * c + a12 * s;\r\n        out[3] = a03 * c + a13 * s;\r\n        out[4] = a10 * c - a00 * s;\r\n        out[5] = a11 * c - a01 * s;\r\n        out[6] = a12 * c - a02 * s;\r\n        out[7] = a13 * c - a03 * s;\r\n        return out;\r\n    }\r\n\r\n    static rotate(out: Float32Array, rad: number, axis: number) {\r\n        let x = axis[0], y = axis[1], z = axis[2],\r\n            len = Math.sqrt(x * x + y * y + z * z),\r\n            s, c, t,\r\n            a00, a01, a02, a03,\r\n            a10, a11, a12, a13,\r\n            a20, a21, a22, a23,\r\n            b00, b01, b02,\r\n            b10, b11, b12,\r\n            b20, b21, b22;\r\n\r\n        if (Math.abs(len) < 0.000001) { return null; }\r\n\r\n        len = 1 / len;\r\n        x *= len;\r\n        y *= len;\r\n        z *= len;\r\n\r\n        s = Math.sin(rad);\r\n        c = Math.cos(rad);\r\n        t = 1 - c;\r\n\r\n        a00 = out[0]; a01 = out[1]; a02 = out[2]; a03 = out[3];\r\n        a10 = out[4]; a11 = out[5]; a12 = out[6]; a13 = out[7];\r\n        a20 = out[8]; a21 = out[9]; a22 = out[10]; a23 = out[11];\r\n\r\n        //  Construct the elements of the rotation matrix\r\n        b00 = x * x * t + c; b01 = y * x * t + z * s; b02 = z * x * t - y * s;\r\n        b10 = x * y * t - z * s; b11 = y * y * t + c; b12 = z * y * t + x * s;\r\n        b20 = x * z * t + y * s; b21 = y * z * t - x * s; b22 = z * z * t + c;\r\n\r\n        //  Perform rotation-specific matrix multiplication\r\n        out[0] = a00 * b00 + a10 * b01 + a20 * b02;\r\n        out[1] = a01 * b00 + a11 * b01 + a21 * b02;\r\n        out[2] = a02 * b00 + a12 * b01 + a22 * b02;\r\n        out[3] = a03 * b00 + a13 * b01 + a23 * b02;\r\n        out[4] = a00 * b10 + a10 * b11 + a20 * b12;\r\n        out[5] = a01 * b10 + a11 * b11 + a21 * b12;\r\n        out[6] = a02 * b10 + a12 * b11 + a22 * b12;\r\n        out[7] = a03 * b10 + a13 * b11 + a23 * b12;\r\n        out[8] = a00 * b20 + a10 * b21 + a20 * b22;\r\n        out[9] = a01 * b20 + a11 * b21 + a21 * b22;\r\n        out[10] = a02 * b20 + a12 * b21 + a22 * b22;\r\n        out[11] = a03 * b20 + a13 * b21 + a23 * b22;\r\n        return out;\r\n    }\r\n\r\n    static invert(out: Float32Array, mat?: Float32Array) {\r\n        if (mat === undefined) { mat = out; }// If input isn't sent, then output is also input\r\n\r\n        let a00 = mat[0], a01 = mat[1], a02 = mat[2], a03 = mat[3],\r\n            a10 = mat[4], a11 = mat[5], a12 = mat[6], a13 = mat[7],\r\n            a20 = mat[8], a21 = mat[9], a22 = mat[10], a23 = mat[11],\r\n            a30 = mat[12], a31 = mat[13], a32 = mat[14], a33 = mat[15],\r\n\r\n            b00 = a00 * a11 - a01 * a10,\r\n            b01 = a00 * a12 - a02 * a10,\r\n            b02 = a00 * a13 - a03 * a10,\r\n            b03 = a01 * a12 - a02 * a11,\r\n            b04 = a01 * a13 - a03 * a11,\r\n            b05 = a02 * a13 - a03 * a12,\r\n            b06 = a20 * a31 - a21 * a30,\r\n            b07 = a20 * a32 - a22 * a30,\r\n            b08 = a20 * a33 - a23 * a30,\r\n            b09 = a21 * a32 - a22 * a31,\r\n            b10 = a21 * a33 - a23 * a31,\r\n            b11 = a22 * a33 - a23 * a32,\r\n\r\n            //  Calculate the determinant\r\n            det = b00 * b11 - b01 * b10 + b02 * b09 + b03 * b08 - b04 * b07 + b05 * b06;\r\n\r\n        if (!det) { return false; }\r\n        det = 1.0 / det;\r\n\r\n        out[0] = (a11 * b11 - a12 * b10 + a13 * b09) * det;\r\n        out[1] = (a02 * b10 - a01 * b11 - a03 * b09) * det;\r\n        out[2] = (a31 * b05 - a32 * b04 + a33 * b03) * det;\r\n        out[3] = (a22 * b04 - a21 * b05 - a23 * b03) * det;\r\n        out[4] = (a12 * b08 - a10 * b11 - a13 * b07) * det;\r\n        out[5] = (a00 * b11 - a02 * b08 + a03 * b07) * det;\r\n        out[6] = (a32 * b02 - a30 * b05 - a33 * b01) * det;\r\n        out[7] = (a20 * b05 - a22 * b02 + a23 * b01) * det;\r\n        out[8] = (a10 * b10 - a11 * b08 + a13 * b06) * det;\r\n        out[9] = (a01 * b08 - a00 * b10 - a03 * b06) * det;\r\n        out[10] = (a30 * b04 - a31 * b02 + a33 * b00) * det;\r\n        out[11] = (a21 * b02 - a20 * b04 - a23 * b00) * det;\r\n        out[12] = (a11 * b07 - a10 * b09 - a12 * b06) * det;\r\n        out[13] = (a00 * b09 - a01 * b07 + a02 * b06) * det;\r\n        out[14] = (a31 * b01 - a30 * b03 - a32 * b00) * det;\r\n        out[15] = (a20 * b03 - a21 * b01 + a22 * b00) * det;\r\n\r\n        return true;\r\n    }\r\n\r\n    // https:// github.com/toji/gl-matrix/blob/master/src/gl-matrix/mat4.js  mat4.scalar.translate = function (out, a, v) {\r\n    static translate(out: Float32Array, x: number, y: number, z: number) {\r\n        out[12] = out[0] * x + out[4] * y + out[8] * z + out[12];\r\n        out[13] = out[1] * x + out[5] * y + out[9] * z + out[13];\r\n        out[14] = out[2] * x + out[6] * y + out[10] * z + out[14];\r\n        out[15] = out[3] * x + out[7] * y + out[11] * z + out[15];\r\n    }\r\n    constructor() {\r\n        this.raw = Matrix4.identity();\r\n    }\r\n    // ....................................................................\r\n    // Transformations Methods\r\n    vtranslate(v: Vector3) {\r\n        Matrix4.translate(this.raw, v.x, v.y, v.z);\r\n        return this;\r\n    }\r\n    translate(x: number, y: number, z: number) {\r\n        Matrix4.translate(this.raw, x, y, z);\r\n        return this;\r\n    }\r\n    rotateY(rad: number) { Matrix4.rotateY(this.raw, rad); return this; }\r\n    rotateX(rad: number) { Matrix4.rotateX(this.raw, rad); return this; }\r\n    rotateZ(rad: number) { Matrix4.rotateZ(this.raw, rad); return this; }\r\n\r\n    vscale(vec3: Vector3) { Matrix4.scale(this.raw, vec3.x, vec3.y, vec3.z); return this; }\r\n    scale(x: number, y: number, z: number) {\r\n        Matrix4.scale(this.raw, x, y, z);\r\n        return this;\r\n    }\r\n\r\n    invert() {\r\n        Matrix4.invert(this.raw);\r\n        return this;\r\n    }\r\n\r\n    // ....................................................................\r\n    // Methods\r\n    // Bring is back to identity without changing the transform values.\r\n    resetRotation() {\r\n        for (let i = 0; i < this.raw.length; i++) {\r\n            if (i >= 12 && i <= 14) { continue; }\r\n            this.raw[i] = (i % 5 === 0) ? 1 : 0;  // only positions 0,5,10,15 need to be 1 else 0.\r\n        }\r\n        return this;\r\n    }\r\n\r\n    // reset data back to identity.\r\n    reset() {\r\n        for (let i = 0; i < this.raw.length; i++) { this.raw[i] = (i % 5 === 0) ? 1 : 0; } // only positions 0,5,10,15 need to be 1 else 0.\r\n        return this;\r\n    }\r\n}","\r\nexport class Vector3 {\r\n    x: number;\r\n    y: number;\r\n    z: number;\r\n    constructor(x: number = 0, y: number = 0, z: number = 0) {\r\n        this.x = x;\r\n        this.y = y;\r\n        this.z = z;\r\n    }\r\n    magnitude(v?: Vector3) {\r\n        if (v === undefined) { return Math.sqrt(this.x * this.x + this.y * this.y + this.z * this.z); }\r\n        let x = v.x - this.x, y = v.y - this.y, z = v.y - this.z;\r\n        return Math.sqrt(x * x + y * y + z * z);\r\n    }\r\n\r\n    normalize() {\r\n        let mag = this.magnitude();\r\n        this.x /= mag; this.y /= mag; this.z /= mag;\r\n        return this;\r\n    }\r\n    set(x: number, y: number, z: number) {\r\n        this.x = x; this.y = y; this.z = z;\r\n        return this;\r\n    }\r\n    multiScalar(v: number) {\r\n        this.x *= v; this.y *= v; this.z *= v; return this;\r\n    }\r\n    getArray() {\r\n        return [this.x, this.y, this.z];\r\n    }\r\n    getFloatArray() {\r\n        return new Float32Array([this.x, this.y, this.z]);\r\n    }\r\n    clone() {\r\n        return new Vector3(this.x, this.y, this.z);\r\n    }\r\n} ","import { Matrix4 } from '../Utility/Matrix4';\r\nimport { Transform } from './Transform';\r\n\r\nexport enum CAMERA_MODE {\r\n    FREE = 0,\r\n    ORBIT = 1\r\n\r\n}\r\n\r\nexport class Camera {\r\n\r\n    projectionMatrix: Float32Array;\r\n    viewMatrix: Float32Array;\r\n    transform: Transform;\r\n\r\n    mode: CAMERA_MODE;\r\n\r\n    constructor(gl: WebGL2RenderingContext, fov: number = 45, near: number = 0.1, far: number = 100) {\r\n        // Setup the perspective matrix\r\n        this.projectionMatrix = new Float32Array(16);\r\n        var ratio = gl.canvas.width / gl.canvas.height;\r\n        Matrix4.perspective(this.projectionMatrix, fov || 45, ratio, near || 0.1, far || 100.0);\r\n\r\n        this.transform = new Transform();\t\t// Setup transform to control the position of the camera\r\n        this.viewMatrix = new Float32Array(16);\t// Cache the matrix that will hold the inverse of the transform.\r\n\r\n        this.mode = CAMERA_MODE.ORBIT;\t\t// Set what sort of control mode to use.\r\n    }\r\n\r\n    panX(v: number) {\r\n        if (this.mode === CAMERA_MODE.ORBIT) { return; } //  Panning on the X Axis is only allowed when in free mode\r\n        this.updateViewMatrix();\r\n        this.transform.position.x += this.transform.right[0] * v;\r\n        this.transform.position.y += this.transform.right[1] * v;\r\n        this.transform.position.z += this.transform.right[2] * v;\r\n    }\r\n\r\n    panY(v: number) {\r\n        this.updateViewMatrix();\r\n        this.transform.position.y += this.transform.up[1] * v;\r\n        if (this.mode === CAMERA_MODE.ORBIT) { return; }// Can only move up and down the y axix in orbit mode\r\n        this.transform.position.x += this.transform.up[0] * v;\r\n        this.transform.position.z += this.transform.up[2] * v;\r\n    }\r\n\r\n    panZ(v: number) {\r\n        this.updateViewMatrix();\r\n        if (this.mode === CAMERA_MODE.ORBIT) {\r\n            this.transform.position.z += v; // orbit mode does translate after rotate, so only need to set Z, the rotate will handle the rest.\r\n        } else {\r\n            // in freemode to move forward, we need to move based on our forward which is relative to our current rotation\r\n            this.transform.position.x += this.transform.forward[0] * v;\r\n            this.transform.position.y += this.transform.forward[1] * v;\r\n            this.transform.position.z += this.transform.forward[2] * v;\r\n        }\r\n    }\r\n\r\n    // To have different modes of movements, this function handles the view matrix update for the transform object.\r\n    updateViewMatrix() {\r\n        // Optimize camera transform update, no need for scale nor rotateZ\r\n        if (this.mode === CAMERA_MODE.FREE) {\r\n            this.transform.matView.reset()\r\n                .vtranslate(this.transform.position)\r\n                .rotateX(this.transform.rotation.x * Transform.deg2Rad)\r\n                .rotateY(this.transform.rotation.y * Transform.deg2Rad);\r\n\r\n        } else {\r\n            this.transform.matView.reset()\r\n                .rotateX(this.transform.rotation.x * Transform.deg2Rad)\r\n                .rotateY(this.transform.rotation.y * Transform.deg2Rad)\r\n                .vtranslate(this.transform.position);\r\n\r\n        }\r\n\r\n        this.transform.updateDirection();\r\n\r\n        // Cameras work by doing the inverse transformation on all meshes, the camera itself is a lie :)\r\n        Matrix4.invert(this.viewMatrix, this.transform.matView.raw);\r\n        return this.viewMatrix;\r\n    }\r\n}\r\n\r\nexport class CameraController {\r\n    canvas: HTMLCanvasElement;\r\n    camera: Camera;\r\n    rotateRate: number;\r\n    panRate: number;\r\n    zoomRate: number;\r\n    offsetX: number;\r\n    offsetY: number;\r\n    initX: number;\r\n    initY: number;\r\n    prevX: number;\r\n    prevY: number;\r\n\r\n    onUpHandler: (e: MouseEvent) => void;\r\n    onMoveHandler: (e: MouseEvent) => void;\r\n\r\n    constructor(gl: WebGL2RenderingContext, camera: Camera) {\r\n        // gl.canvas.get\r\n        // var box = gl.canvas.getBoundingClientRect();\r\n        this.canvas = gl.canvas as HTMLCanvasElement;\t\t\t\t\t\t// Need access to the canvas html element, main to access events\r\n        this.camera = camera;\t\t\t\t\t\t\t// Reference to the camera to control\r\n\r\n        this.rotateRate = -300;\t\t\t\t\t\t\t// How fast to rotate, degrees per dragging delta\r\n        this.panRate = 5;\t\t\t\t\t\t\t\t// How fast to pan, max unit per dragging delta\r\n        this.zoomRate = 200;\t\t\t\t\t\t\t// How fast to zoom or can be viewed as forward/backward movement\r\n\r\n        this.offsetX = 10; // box.left;\t\t\t\t\t\t// Help calc global x,y mouse cords.\r\n        this.offsetY = 10; // box.top;\r\n\r\n        this.initX = 0;\t\t\t\t\t\t\t\t\t// Starting X,Y position on mouse down\r\n        this.initY = 0;\r\n        this.prevX = 0;\t\t\t\t\t\t\t\t\t// Previous X,Y position on mouse move\r\n        this.prevY = 0;\r\n\r\n        // // tslint:disable-next-line:no-any\r\n        this.onUpHandler = (e: MouseEvent) => (this.onMouseUp(e));\t// Cache func reference that gets bound and unbound a lot\r\n        this.onMoveHandler = (e: MouseEvent) => { this.onMouseMove(e); };\r\n\r\n        this.canvas.addEventListener('mousedown', (e) => { this.onMouseDown(e); });\t\t// Initializes the up and move events\r\n        this.canvas.addEventListener('mousewheel', (e) => { this.onMouseWheel(e); });\t// Handles zoom/forward movement\r\n    }\r\n\r\n    // Transform mouse x,y cords to something useable by the canvas.\r\n    // tslint:disable-next-line:no-any\r\n    getMouseVec2(e: any) {\r\n        return { x: e.pageX - this.offsetX, y: e.pageY - this.offsetY };\r\n    }\r\n\r\n    // Begin listening for dragging movement\r\n    // tslint:disable-next-line:no-any\r\n    onMouseDown(e: any) {\r\n        this.initX = this.prevX = e.pageX - this.offsetX;\r\n        this.initY = this.prevY = e.pageY - this.offsetY;\r\n\r\n        this.canvas.addEventListener('mouseup', this.onUpHandler);\r\n        this.canvas.addEventListener('mousemove', this.onMoveHandler);\r\n    }\r\n\r\n    // End listening for dragging movement\r\n    // tslint:disable-next-line:no-any\r\n    onMouseUp(e: any) {\r\n        this.canvas.removeEventListener('mouseup', this.onUpHandler);\r\n        this.canvas.removeEventListener('mousemove', this.onMoveHandler);\r\n    }\r\n    // tslint:disable-next-line:no-any\r\n    onMouseWheel(e: any) {\r\n        var delta = Math.max(-1, Math.min(1, (e.wheelDelta || -e.detail))); // Try to map wheel movement to a number between -1 and 1\r\n        this.camera.panZ(delta * (this.zoomRate / this.canvas.height));\t\t// Keep the movement speed the same, no matter the height diff\r\n    }\r\n    // tslint:disable-next-line:no-any\r\n    onMouseMove(e: any) {\r\n        var x = e.pageX - this.offsetX,\t// Get X,y where the canvas's position is origin.\r\n            y = e.pageY - this.offsetY,\r\n            dx = x - this.prevX,\t\t// Difference since last mouse move\r\n            dy = y - this.prevY;\r\n\r\n        // When shift is being helt down, we pan around else we rotate.\r\n        if (!e.shiftKey) {\r\n            this.camera.transform.rotation.y += dx * (this.rotateRate / this.canvas.width);\r\n            this.camera.transform.rotation.x += dy * (this.rotateRate / this.canvas.height);\r\n        } else {\r\n            this.camera.panX(-dx * (this.panRate / this.canvas.width));\r\n            this.camera.panY(dy * (this.panRate / this.canvas.height));\r\n        }\r\n\r\n        this.prevX = x;\r\n        this.prevY = y;\r\n    }\r\n}","import { VAO } from './VAO';\r\nimport { Transform } from './Transform';\r\n\r\nexport class Model {\r\n    vao: VAO;\r\n    transform: Transform;\r\n    constructor(vao: VAO) {\r\n        this.transform = new Transform();\r\n        this.vao = vao;\r\n    }\r\n\r\n    setScale(x: number, y: number, z: number) {\r\n        this.transform.scale.set(x, y, z);\r\n        return this;\r\n    }\r\n    setPosition(x: number, y: number, z: number) {\r\n        this.transform.position.set(x, y, z);\r\n        return this;\r\n    }\r\n    setRotation(x: number, y: number, z: number) {\r\n        this.transform.rotation.set(x, y, z);\r\n        return this;\r\n    }\r\n\r\n    addScale(x: number, y: number, z: number) {\r\n        this.transform.scale.x += x; this.transform.scale.y += y; this.transform.scale.y += y;\r\n        return this;\r\n    }\r\n    addPosition(x: number, y: number, z: number) {\r\n        this.transform.position.x += x; this.transform.position.y += y; this.transform.position.z += z;\r\n        return this;\r\n    }\r\n    addRotation(x: number, y: number, z: number) {\r\n        this.transform.rotation.x += x; this.transform.rotation.y += y; this.transform.rotation.z += z;\r\n        return this;\r\n    }\r\n\r\n    preRender() {\r\n        this.transform.updateMatrix();\r\n        return this;\r\n    }\r\n}","//  import { GLShaderCommon } from '../Utility/GLShaderCommon';\r\nimport { Model } from './Model';\r\n\r\nexport enum ATTR {\r\n    ATTR_POSITION_NAME = 'a_position',\r\n    ATTR_POSITION_LOC = 0,\r\n\r\n    ATTR_NORMAL_NAME = 'a_norm',\r\n    ATTR_NORMAL_LOC = 1,\r\n\r\n    ATTR_UV_NAME = 'a_uv',\r\n    ATTR_UV_LOC = 2,\r\n\r\n    ATTR_COLOR_NAME = 'a_color',\r\n    ATTR_COLOR_LOC = 4,\r\n}\r\n\r\nexport class AttribLocations {\r\n\r\n    position: number;\r\n    norm: number;\r\n    uv: number;\r\n\r\n    constructor(gl: WebGL2RenderingContext, program: WebGLProgram) {\r\n        this.position = gl.getAttribLocation(program, ATTR.ATTR_POSITION_NAME);\r\n        this.norm = gl.getAttribLocation(program, ATTR.ATTR_NORMAL_NAME);\r\n        this.uv = gl.getAttribLocation(program, ATTR.ATTR_UV_NAME);\r\n    }\r\n}\r\n\r\nexport class UniformLocations {\r\n\r\n    perspective: WebGLUniformLocation | null;\r\n    modelMatrix: WebGLUniformLocation | null;\r\n    cameraMatrix: WebGLUniformLocation | null;\r\n    mainTexture: WebGLUniformLocation | null;\r\n\r\n    constructor(gl: WebGL2RenderingContext, program: WebGLProgram) {\r\n        this.perspective = gl.getUniformLocation(program, 'uPMatrix');\r\n        this.modelMatrix = gl.getUniformLocation(program, 'uMVMatrix');\r\n        this.cameraMatrix = gl.getUniformLocation(program, 'uCameraMatrix');\r\n        this.mainTexture = gl.getUniformLocation(program, 'uMainTex');\r\n    }\r\n}\r\n\r\nexport class Shader {\r\n\r\n    gl: WebGL2RenderingContext;\r\n    program: WebGLProgram | null;\r\n\r\n    attribLoc: AttribLocations;\r\n    uniformLoc: UniformLocations;\r\n\r\n    vShader: WebGLShader | null;\r\n    fShader: WebGLShader | null;\r\n\r\n    constructor(gl: WebGL2RenderingContext, vertShaderSrc: string, fragShaderSrc: string, needValidate: boolean = true) {\r\n        this.gl = gl;\r\n        this.vShader = ShaderUtility.CreateShader(gl, gl.VERTEX_SHADER as unknown as WebGLShader, vertShaderSrc);\r\n        this.fShader = ShaderUtility.CreateShader(gl, gl.FRAGMENT_SHADER as unknown as WebGLShader, fragShaderSrc);\r\n\r\n        if (this.vShader && this.fShader) {\r\n            let program = ShaderUtility.CreateProgram(gl, this.vShader, this.fShader, needValidate);\r\n\r\n            if (program) {\r\n                this.program = program;\r\n                gl.useProgram(this.program);\r\n                this.attribLoc = new AttribLocations(gl, this.program);\r\n                this.uniformLoc = new UniformLocations(gl, this.program);\r\n                return;\r\n\r\n            } else {\r\n                console.error('vertex fragment shader error'); return;\r\n            }\r\n        } else {\r\n            console.error('vertex fragment shader error'); return;\r\n        }\r\n        // Note :: Extended shaders should deactivate shader when done calling super and setting up custom parts in the constructor.\r\n    }\r\n\r\n    // ...................................................\r\n    // Methods\r\n    activate() {\r\n        this.gl.useProgram(this.program); return this;\r\n    }\r\n    deactivate() {\r\n        this.gl.useProgram(null); return this;\r\n    }\r\n\r\n    // function helps clean up resources when shader is no longer needed.\r\n    dispose() {\r\n        // unbind the program if its currently active\r\n        if (this.gl.getParameter(this.gl.CURRENT_PROGRAM) === this.program) { this.gl.useProgram(null); }\r\n        this.gl.deleteProgram(this.program);\r\n    }\r\n    setPerspective(matData: Float32Array) {\r\n        this.gl.uniformMatrix4fv(this.uniformLoc.perspective, false, matData);\r\n        return this;\r\n    }\r\n    setModelMatrix(matData: Float32Array) {\r\n        this.gl.uniformMatrix4fv(this.uniformLoc.modelMatrix, false, matData);\r\n        return this;\r\n    }\r\n    setCameraMatrix(matData: Float32Array) {\r\n        this.gl.uniformMatrix4fv(this.uniformLoc.cameraMatrix, false, matData);\r\n        return this;\r\n    }\r\n    // ...................................................\r\n    // RENDER RELATED METHODS\r\n\r\n    // Setup custom properties\r\n    preRender() {\r\n        //\r\n    }\r\n    // Handle rendering a model\r\n    renderModel(model: Model) {\r\n        this.setModelMatrix(model.transform.getViewMatrix());\t// Set the transform, so the shader knows where the model exists in 3d space\r\n        this.gl.bindVertexArray(model.vao.vao);\t// Enable VAO, this will set all the predefined attributes for the shader\r\n\r\n        if (model.vao.noCulling) { this.gl.disable(this.gl.CULL_FACE); }\r\n        if (model.vao.doBlending) { this.gl.enable(this.gl.BLEND); }\r\n\r\n        if (model.vao.indexCount) {\r\n            // console.log(model.vao.indexCount);\r\n            this.gl.drawElements(model.vao.drawMode, model.vao.indexCount, this.gl.UNSIGNED_SHORT, 0);\r\n        } else {\r\n            this.gl.drawArrays(model.vao.drawMode, 0, model.vao.vertexCount);\r\n        }\r\n\r\n        this.gl.bindVertexArray(null);\r\n        if (model.vao.noCulling) { this.gl.enable(this.gl.CULL_FACE); }\r\n        if (model.vao.doBlending) { this.gl.disable(this.gl.BLEND); }\r\n\r\n        return this;\r\n\r\n    }\r\n}\r\n\r\nexport class ShaderUtility {\r\n    static CreateProgram(gl: WebGL2RenderingContext, vertexShader: WebGLShader, fragmentShader: WebGLShader, needValidate: boolean = true): WebGLProgram | null {\r\n        const program = gl.createProgram();\r\n        if (program === null) { return null; }\r\n        gl.attachShader(program, vertexShader);\r\n        gl.attachShader(program, fragmentShader);\r\n\r\n        gl.bindAttribLocation(program, ATTR.ATTR_POSITION_LOC, ATTR.ATTR_POSITION_NAME);\r\n        gl.bindAttribLocation(program, ATTR.ATTR_NORMAL_LOC, ATTR.ATTR_NORMAL_NAME);\r\n        gl.bindAttribLocation(program, ATTR.ATTR_UV_LOC, ATTR.ATTR_UV_NAME);\r\n\r\n        gl.linkProgram(program);\r\n\r\n        // Check that shader program was able to link to WebGL\r\n        if (!gl.getProgramParameter(program, gl.LINK_STATUS)) {\r\n            const error = gl.getProgramInfoLog(program);\r\n            console.log('Failed to link program: ' + error);\r\n            gl.deleteProgram(program);\r\n            gl.deleteShader(fragmentShader);\r\n            gl.deleteShader(vertexShader);\r\n            return null;\r\n        }\r\n        if (needValidate) {\r\n            gl.validateProgram(program);\r\n            if (!gl.getProgramParameter(program, gl.VALIDATE_STATUS)) {\r\n                console.error('Failed to validate program', gl.getProgramInfoLog(program));\r\n                gl.deleteProgram(program);\r\n                gl.deleteShader(fragmentShader);\r\n                gl.deleteShader(vertexShader);\r\n                return null;\r\n            }\r\n        }\r\n        gl.deleteShader(fragmentShader);\r\n        gl.deleteShader(vertexShader);\r\n        return program;\r\n    }\r\n    static CreateShader(gl: WebGL2RenderingContext, type: WebGLShader, shaderString: string) {\r\n        // console.log(type);\r\n        const shader = gl.createShader(type as unknown as number);\r\n        if (shader === null) { return null; }\r\n        gl.shaderSource(shader, shaderString);\r\n        gl.compileShader(shader);\r\n        const suc = gl.getShaderParameter(shader, gl.COMPILE_STATUS);\r\n        if (suc) { return shader; }\r\n        console.log(gl.getShaderInfoLog(shader));\r\n        gl.deleteShader(shader);\r\n        return null;\r\n    }\r\n    static LoadTexture(gl: WebGL2RenderingContext, img: HTMLImageElement, doYFlip: boolean) {\r\n        let tex = gl.createTexture();\r\n        if (doYFlip === true) { gl.pixelStorei(gl.UNPACK_FLIP_Y_WEBGL, 1); } // true); }\t// Flip the texture by the Y Position, So 0,0 is bottom left corner.\r\n\r\n        gl.bindTexture(gl.TEXTURE_2D, tex);\t\t\t\t\t\t\t\t\t\t\t\t\t\t// Set text buffer for work\r\n        gl.texImage2D(gl.TEXTURE_2D, 0, gl.RGBA, gl.RGBA, gl.UNSIGNED_BYTE, img);\t\t\t// Push image to GPU.\r\n\r\n        gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, gl.LINEAR);\t\t\t\t\t// Setup up scaling\r\n        gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl.LINEAR_MIPMAP_NEAREST);\t// Setup down scaling\r\n        gl.generateMipmap(gl.TEXTURE_2D);\t// Precalc different sizes of texture for better quality rendering.\r\n\r\n        gl.bindTexture(gl.TEXTURE_2D, null); // Unbind\r\n\r\n        // gl.mTextureCache[name] = tex;\t\t\t\t\t\t\t\t\t\t\t// Save ID for later unloading\r\n\r\n        if (doYFlip === true) { gl.pixelStorei(gl.UNPACK_FLIP_Y_WEBGL, 1); }\t// Stop flipping textures\r\n        return tex;\r\n    }\r\n}","import { Vector3 } from '../Utility/Vector3';\r\nimport { Matrix4 } from '../Utility/Matrix4';\r\n\r\nexport class Transform {\r\n    static deg2Rad = Math.PI / 180; // Cache result, one less operation to do for each update.\r\n\r\n    position: Vector3;\r\n    scale: Vector3;\r\n    rotation: Vector3;\r\n    matView: Matrix4;\r\n    matNormal: Float32Array;\r\n\r\n    forward: Float32Array;\r\n    up: Float32Array;\r\n    right: Float32Array;\r\n\r\n    constructor() {\r\n        this.position = new Vector3(0, 0, 0);\t// Traditional X,Y,Z 3d position\r\n        this.scale = new Vector3(1, 1, 1);\t// How much to scale a mesh. Having a 1 means no scaling is done.\r\n        this.rotation = new Vector3(0, 0, 0);\t// Hold rotation values based on degrees, Object will translate it to radians\r\n        this.matView = new Matrix4();\t\t// Cache the results when calling updateMatrix\r\n        this.matNormal = new Float32Array(9);\t// This is a Mat3, raw array to hold the values is enough for what its used for\r\n\r\n        // Direction Vectors\r\n        this.forward = new Float32Array(4);\t// When rotating, keep track of what the forward direction is\r\n        this.up = new Float32Array(4);\t// what the up direction is, invert to get bottom\r\n        this.right = new Float32Array(4);\t// what the right direction is, invert to get left\r\n    }\r\n    updateMatrix() {\r\n        this.matView.reset() // Order is very important!!\r\n            .vtranslate(this.position)\r\n            .rotateX(this.rotation.x * Transform.deg2Rad)\r\n            .rotateZ(this.rotation.z * Transform.deg2Rad)\r\n            .rotateY(this.rotation.y * Transform.deg2Rad)\r\n            .vscale(this.scale);\r\n\r\n        // Calcuate the Normal Matrix which doesn't need translate, then transpose and inverses the mat4 to mat3\r\n        Matrix4.normalMat3(this.matNormal, this.matView.raw);\r\n\r\n        // Determine Direction after all the transformations.\r\n        Matrix4.transformVec4(this.forward, [0, 0, 1, 0], this.matView.raw); // Z\r\n        Matrix4.transformVec4(this.up, [0, 1, 0, 0], this.matView.raw); // Y\r\n        Matrix4.transformVec4(this.right, [1, 0, 0, 0], this.matView.raw); // X\r\n\r\n        return this.matView.raw;\r\n    }\r\n\r\n    updateDirection() {\r\n        Matrix4.transformVec4(this.forward, [0, 0, 1, 0], this.matView.raw);\r\n        Matrix4.transformVec4(this.up, [0, 1, 0, 0], this.matView.raw);\r\n        Matrix4.transformVec4(this.right, [1, 0, 0, 0], this.matView.raw);\r\n        return this;\r\n    }\r\n\r\n    getViewMatrix() { return this.matView.raw; }\r\n    getNormalMatrix() { return this.matNormal; }\r\n\r\n    reset() {\r\n        this.position.set(0, 0, 0);\r\n        this.scale.set(1, 1, 1);\r\n        this.rotation.set(0, 0, 0);\r\n    }\r\n}\r\n","import { ATTR } from './Shader';\r\n\r\nexport enum DRAW_MODE {\r\n    //\r\n}\r\n\r\nexport class VAO {\r\n    name: string;\r\n\r\n    noCulling: boolean = true;\r\n    doBlending: boolean = true;\r\n\r\n    vao: WebGLVertexArrayObject | null;\r\n    bufVertices: WebGLBuffer | null;\r\n    bufNormals: WebGLBuffer | null;\r\n    bufUV: WebGLBuffer | null;\r\n    bufIndex: WebGLBuffer | null;\r\n\r\n    vertexComponentLen: number;\r\n    vertexCount: number;\r\n    indexCount: number;\r\n    drawMode: number;\r\n\r\n    constructor(gl: WebGL2RenderingContext, name: string, aryVert: number[], aryInd?: number[] | null, aryNorm?: number[] | null, aryUV?: number[] | null) {\r\n        this.name = name;\r\n        this.drawMode = gl.TRIANGLES;\r\n\r\n        this.vao = gl.createVertexArray();\r\n        gl.bindVertexArray(this.vao);\t//  Bind it so all the calls to vertexAttribPointer/enableVertexAttribArray is saved to the vao.\r\n\r\n        // .......................................................\r\n        // Set up vertices\r\n        if (aryVert !== undefined && aryVert != null) {\r\n            this.bufVertices = gl.createBuffer();\t\t\t\t\t\t\t\t\t\t\t\t\t// Create buffer...\r\n            this.vertexComponentLen = 3;\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t// How many floats make up a vertex\r\n            this.vertexCount = aryVert.length / this.vertexComponentLen;\t\t\t\t\t\t\t\t// How many vertices in the array\r\n\r\n            gl.bindBuffer(gl.ARRAY_BUFFER, this.bufVertices);\r\n            gl.bufferData(gl.ARRAY_BUFFER, new Float32Array(aryVert), gl.STATIC_DRAW);\t\t// then push array into it.\r\n            gl.enableVertexAttribArray(ATTR.ATTR_POSITION_LOC);\t\t\t\t\t\t\t\t\t\t// Enable Attribute location\r\n            gl.vertexAttribPointer(ATTR.ATTR_POSITION_LOC, 3, gl.FLOAT, false, 0, 0);\t\t\t\t\t\t// Put buffer at location of the vao\r\n        }\r\n\r\n        // .......................................................\r\n        // Setup normals\r\n        if (aryNorm !== undefined && aryNorm !== null) {\r\n            this.bufNormals = gl.createBuffer();\r\n            gl.bindBuffer(gl.ARRAY_BUFFER, this.bufNormals);\r\n            gl.bufferData(gl.ARRAY_BUFFER, new Float32Array(aryNorm), gl.STATIC_DRAW);\r\n            gl.enableVertexAttribArray(ATTR.ATTR_NORMAL_LOC);\r\n            gl.vertexAttribPointer(ATTR.ATTR_NORMAL_LOC, 3, gl.FLOAT, false, 0, 0);\r\n        }\r\n\r\n        // .......................................................\r\n        // Setup UV\r\n        if (aryUV !== undefined && aryUV !== null) {\r\n            // console.log(aryUV);\r\n            this.bufUV = gl.createBuffer();\r\n            gl.bindBuffer(gl.ARRAY_BUFFER, this.bufUV);\r\n            gl.bufferData(gl.ARRAY_BUFFER, new Float32Array(aryUV), gl.STATIC_DRAW);\r\n            // console.log(this);\r\n            gl.enableVertexAttribArray(ATTR.ATTR_UV_LOC);\r\n            gl.vertexAttribPointer(ATTR.ATTR_UV_LOC, 2, gl.FLOAT, false, 0, 0);\t// UV only has two floats per component\r\n        }\r\n\r\n        // .......................................................\r\n        // Setup Index.\r\n        if (aryInd !== undefined && aryInd !== null) {\r\n            this.bufIndex = gl.createBuffer();\r\n            this.indexCount = aryInd.length;\r\n            gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, this.bufIndex);\r\n            gl.bufferData(gl.ELEMENT_ARRAY_BUFFER, new Uint16Array(aryInd), gl.STATIC_DRAW);\r\n            // gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, null);\r\n\r\n        }\r\n        // console.log(this);\r\n\r\n        // Clean up\r\n        gl.bindVertexArray(null);\t\t\t\t\t// Unbind the VAO, very Important. always unbind when your done using one.\r\n        gl.bindBuffer(gl.ARRAY_BUFFER, null);\t// Unbind any buffers that might be set\r\n\r\n        // this.mMeshCache[name] = rtn;\r\n    }\r\n\r\n}","import { Canvas } from './Core/Canvas';\r\nimport { Renderer } from './Core/Renderer';\r\nimport { Scene } from './Core/Scene';\r\n\r\nimport { Camera, CameraController } from './WebGL/Camera';\r\nimport { Texture, uvGrid } from './Core/Texture';\r\n\r\nimport { GridAxis } from './Geometry/Primatives/GridAxis';\r\n\r\n// import { PointScreen } from './Geometry/Primatives/PointScreen';\r\n// import { PointWorld } from './Geometry/Primatives/PointWorld';\r\nimport { Quad } from './Geometry/Primatives/Quad';\r\n// import { MulitQuad } from './Geometry/Primatives/MulitQuad';\r\n\r\n// import { RectScreen } from './Geometry/CustomGeometry/RectScreen';\r\n// import { Rect } from './Geometry/CustomGeometry/Rect';\r\n\r\nexport class NGL3dApp {\r\n\r\n    host: HTMLElement;\r\n    canvas: Canvas;\r\n    renderer: Renderer;\r\n    scene: Scene;\r\n\r\n    texture: Texture;\r\n\r\n    camera: Camera;\r\n    cameraCtrl: CameraController;\r\n\r\n    constructor(id: string) {\r\n        console.log('id: ' + id + ', NGL3dApp 08 Init!!!!!');\r\n        const host = document.getElementById(id);\r\n        if (host) { this.host = host; }\r\n\r\n        this.scene = new Scene(this);\r\n        this.renderer = new Renderer(this);\r\n        this.canvas = new Canvas(this);\r\n\r\n        this.texture = new Texture(this);\r\n        this.texture.UploadTexture(uvGrid).then(() => {\r\n\r\n            this.camera = new Camera(this.canvas.gl);\r\n            this.camera.transform.position.set(0, 1, 3);\r\n            this.cameraCtrl = new CameraController(this.canvas.gl, this.camera);\r\n\r\n            this.Init();\r\n        });\r\n    }\r\n    Init() {\r\n        let dd = new GridAxis(this);\r\n        // console.log(dd);\r\n\r\n        // let d = new PointScreen(this);\r\n        // console.log(d);\r\n\r\n        // let d1 = new PointWorld(this);\r\n        // console.log(d1);\r\n\r\n        let dd2 = new Quad(this);\r\n        // console.log(dd2);\r\n\r\n        // let dd3 = new Rect(this);\r\n        // console.log(dd3);\r\n\r\n        // let dd5 = new MulitQuad(this);\r\n        // console.log(dd5);\r\n\r\n    }\r\n\r\n}\r\n\r\n// quad"],"names":["Canvas","constructor","app","gl","canvas","this","document","createElement","host","appendChild","width","clientWidth","height","clientHeight","getContext","cullFace","BACK","frontFace","CCW","enable","DEPTH_TEST","CULL_FACE","depthFunc","LEQUAL","blendFunc","SRC_ALPHA","ONE_MINUS_SRC_ALPHA","loop","clear","requestAnimationFrame","renderer","render","clearColor","Renderer","camera","updateViewMatrix","scene","geometries","forEach","e","Scene","NGL3dApp","add","mesh","push","uvGrid","require","Texture","uvGridWebGLTexture","async","path","LoadTexture","then","imgPath","webGLTex","ShaderUtility","src","Promise","resolve","reject","img","Image","onload","onerror","GeometryBase","GridAxisShader","Shader","vertSrc","fragSrc","aryColor","pMatrix","super","uPointSize","uAngle","program","setPerspective","useProgram","uColor","getUniformLocation","uniform3fv","renderModel","model","setModelMatrix","transform","getViewMatrix","bindVertexArray","vao","indexCount","drawElements","drawMode","UNSIGNED_SHORT","drawArrays","vertexCount","GridAxis","v","f","shader","ro","t","initShader","GetVAO","p","incAxis","verts","half","size","i","VAO","LINES","createVertexArray","vertexComponentLen","length","strideLen","Float32Array","BYTES_PER_ELEMENT","bufVertices","createBuffer","bindBuffer","ARRAY_BUFFER","bufferData","STATIC_DRAW","enableVertexAttribArray","ATTR","vertexAttribPointer","FLOAT","projectionMatrix","Model","activate","setCameraMatrix","viewMatrix","preRender","ShaderQuad","texture","set","angle","setTexture","texID","Quad","rotation","undefined","noCulling","doBlending","SetTexture","activeTexture","TEXTURE0","bindTexture","TEXTURE_2D","position","Vector3","z","Matrix4","static","a","out","fovy","aspect","near","far","Math","tan","nf","left","right","bottom","top","lr","bt","a01","a02","a03","a12","a13","a23","a00","a10","a11","a20","a21","a22","a30","a31","a32","a33","b00","b01","b02","b03","b04","b05","b06","b07","b08","b09","b10","b11","det","mat4","x","y","w","c1r1","c2r1","c3r1","c4r1","c1r2","c2r2","c3r2","c4r2","c1r3","c2r3","c3r3","c4r3","m","b","b0","b1","b2","b3","rad","s","sin","c","cos","axis","b12","b20","b21","b22","len","sqrt","abs","mat","raw","identity","vtranslate","translate","rotateY","rotateX","rotateZ","vscale","vec3","scale","invert","resetRotation","reset","magnitude","normalize","mag","multiScalar","getArray","getFloatArray","clone","CAMERA_MODE","Camera","fov","mode","ratio","Transform","ORBIT","panX","panY","up","panZ","forward","FREE","matView","updateDirection","CameraController","rotateRate","panRate","zoomRate","offsetX","offsetY","initX","initY","prevX","prevY","onUpHandler","onMoveHandler","onMouseUp","onMouseMove","addEventListener","onMouseDown","onMouseWheel","getMouseVec2","pageX","pageY","removeEventListener","delta","max","min","wheelDelta","detail","dx","dy","shiftKey","setScale","setPosition","setRotation","addScale","addPosition","addRotation","updateMatrix","AttribLocations","norm","uv","getAttribLocation","ATTR_POSITION_NAME","ATTR_NORMAL_NAME","ATTR_UV_NAME","UniformLocations","perspective","modelMatrix","cameraMatrix","mainTexture","vertShaderSrc","fragShaderSrc","needValidate","attribLoc","uniformLoc","vShader","fShader","CreateShader","VERTEX_SHADER","FRAGMENT_SHADER","CreateProgram","console","error","deactivate","dispose","getParameter","CURRENT_PROGRAM","deleteProgram","matData","uniformMatrix4fv","disable","BLEND","vertexShader","fragmentShader","createProgram","attachShader","bindAttribLocation","ATTR_POSITION_LOC","ATTR_NORMAL_LOC","ATTR_UV_LOC","linkProgram","getProgramParameter","LINK_STATUS","getProgramInfoLog","log","deleteShader","validateProgram","VALIDATE_STATUS","type","shaderString","createShader","shaderSource","compileShader","getShaderParameter","COMPILE_STATUS","getShaderInfoLog","doYFlip","tex","createTexture","pixelStorei","UNPACK_FLIP_Y_WEBGL","texImage2D","RGBA","UNSIGNED_BYTE","texParameteri","TEXTURE_MAG_FILTER","LINEAR","TEXTURE_MIN_FILTER","LINEAR_MIPMAP_NEAREST","generateMipmap","matNormal","deg2Rad","getNormalMatrix","PI","DRAW_MODE","name","aryVert","aryInd","aryNorm","aryUV","bufNormals","bufUV","bufIndex","TRIANGLES","ELEMENT_ARRAY_BUFFER","Uint16Array","id","cameraCtrl","getElementById","UploadTexture","Init"],"sourceRoot":""}