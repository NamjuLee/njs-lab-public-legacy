{"version":3,"file":"static/js/69167.19aa7e9c.chunk.js","mappings":"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","sources":["njslab/LabStarter/WebGLGLSLPlayground/Core/index.ts","njslab/LabStarter/WebGLGLSLPlayground/Utility/GLShaderCommon.ts","njslab/LabStarter/WebGLGLSLPlayground/Geometry/Base/GeometryBase.ts","njslab/LabStarter/WebGLGLSLPlayground/Geometry/Quad_02.ts","njslab/LabStarter/WebGLGLSLPlayground/Scene/index.ts","njslab/LabStarter/WebGLGLSLPlayground/index.ts"],"sourcesContent":["import { Demo12WebGLGLSLPlayground } from '..';\r\n\r\nexport class CoreWebg2 {\r\n    app: Demo12WebGLGLSLPlayground;\r\n\r\n    gl: WebGL2RenderingContext;\r\n    canvas: HTMLCanvasElement;\r\n\r\n    constructor(app: Demo12WebGLGLSLPlayground) {\r\n        this.app = app;\r\n\r\n        this.canvas = document.createElement('canvas');\r\n        if (this.app.divHost) {\r\n            this.app.divHost.appendChild(this.canvas);\r\n            this.canvas.width = this.app.divHost.clientWidth;\r\n            this.canvas.height = this.app.divHost.clientHeight;\r\n        }\r\n        const gl = this.canvas.getContext('webgl2');\r\n        if (gl) { this.gl = gl; }\r\n\r\n        this.loop(this.gl);\r\n    }\r\n    loop(gl: WebGL2RenderingContext) {\r\n        requestAnimationFrame(() => { this.loop(gl); });\r\n        this.clear(gl);\r\n        this.Render(gl);\r\n    }\r\n    Render(gl: WebGL2RenderingContext) {\r\n        //\r\n    }\r\n    clear(gl: WebGL2RenderingContext) {\r\n        gl.clearColor(1.0, 1.0, 1.0, 1.0);\r\n        gl.clear(gl.COLOR_BUFFER_BIT | gl.DEPTH_BUFFER_BIT);\r\n    }\r\n}\r\n","\r\nexport class GLShaderCommon {\r\n\r\n    static getShader(gl: WebGL2RenderingContext, type: number, source: string) {\r\n        const shader = gl.createShader(type);\r\n        if (shader === null) { return undefined; }\r\n        gl.shaderSource(shader, source);\r\n        gl.compileShader(shader);\r\n\r\n        // Check if compiled successfully\r\n        if (!gl.getShaderParameter(shader, gl.COMPILE_STATUS)) {\r\n            console.log('An error occurred compiling the shaders:' + gl.getShaderInfoLog(shader));\r\n            gl.deleteShader(shader);\r\n            return null;\r\n        }\r\n        // Set the attributes, varying, and uniform to shader\r\n        // shader.attributes = this.attributesFromSource(source);\r\n        // shader.varyings = this.varyingsFromSource(source);\r\n        // shader.uniforms = this.uniformsFromSource(source);\r\n        return shader;\r\n    }\r\n    static createProgram(gl: WebGL2RenderingContext, vertexShader: WebGLShader, fragmentShader: WebGLShader, needValidate: boolean = true): WebGLProgram | null {\r\n        const program = gl.createProgram();\r\n        if (program === null) { return null; }\r\n        gl.attachShader(program, vertexShader);\r\n        gl.attachShader(program, fragmentShader);\r\n        gl.linkProgram(program);\r\n\r\n        // Check that shader program was able to link to WebGL\r\n        if (!gl.getProgramParameter(program, gl.LINK_STATUS)) {\r\n            const error = gl.getProgramInfoLog(program);\r\n            console.log('Failed to link program: ' + error);\r\n            gl.deleteProgram(program);\r\n            gl.deleteShader(fragmentShader);\r\n            gl.deleteShader(vertexShader);\r\n            return null;\r\n        }\r\n        if (needValidate) {\r\n            gl.validateProgram(program);\r\n            if (!gl.getProgramParameter(program, gl.VALIDATE_STATUS)) {\r\n                console.error('Failed to validate program', gl.getProgramInfoLog(program));\r\n                gl.deleteProgram(program);\r\n                gl.deleteShader(fragmentShader);\r\n                gl.deleteShader(vertexShader);\r\n                return null;\r\n            }\r\n        }\r\n        gl.deleteShader(fragmentShader);\r\n        gl.deleteShader(vertexShader);\r\n        return program;\r\n    }\r\n\r\n    // ...............................\r\n\r\n    // static CreateShader(gl: WebGL2RenderingContext, type: WebGLShader, shaderString: string) {\r\n    //     let shader = gl.createShader(type as number);\r\n    //     gl.shaderSource(shader, shaderString);\r\n    //     gl.compileShader(shader);\r\n    //     gl.getShaderParameter(shader, gl.COMPILE_STATUS);\r\n    //     return shader as Webglsh;\r\n    //     // console.log(gl.getShaderInfoLog(shader));\r\n    //     // gl.deleteShader(shader);\r\n    //     // return null;\r\n    // }\r\n    static createShader(gl: WebGL2RenderingContext, type: WebGLShader, shaderString: string) {\r\n        // console.log(type);\r\n        const shader = gl.createShader(type as unknown as number);\r\n        if (shader === null) { return null; }\r\n        gl.shaderSource(shader, shaderString);\r\n        gl.compileShader(shader);\r\n        const suc = gl.getShaderParameter(shader, gl.COMPILE_STATUS);\r\n        if (suc) { return shader; }\r\n        console.log(gl.getShaderInfoLog(shader));\r\n        gl.deleteShader(shader);\r\n        return null;\r\n    }\r\n    static createShaderFromPath(gl: WebGL2RenderingContext, type: WebGLShader, url: string) {\r\n        const shader = gl.createShader(type as unknown as number);\r\n        if (shader === null) { return null; }\r\n        gl.shaderSource(shader, GLShaderCommon.getSourceSynch(url) as string);\r\n        gl.compileShader(shader);\r\n        const suc = gl.getShaderParameter(shader, gl.COMPILE_STATUS);\r\n        if (suc) { return shader; }\r\n        console.log(gl.getShaderInfoLog(shader));\r\n        gl.deleteShader(shader);\r\n        return null;\r\n    }\r\n\r\n    static getSourceSynch(url: string) {\r\n        const req = new XMLHttpRequest();\r\n        req.open('GET', url, false);\r\n        req.send(null);\r\n        return (req.status === 200) ? req.responseText : null;\r\n    }\r\n\r\n    // static LoadTextResource(url: string, callback:(data: any, d2:any) => void ) {\r\n    //     let request = new XMLHttpRequest();\r\n    //     request.open('GET', url + '?please-dont-cache=' + Math.random(), true);\r\n    //     request.onload = function () {\r\n    //         if (request.status < 200 || request.status > 299) {\r\n    //             callback('Error: HTTP Status ' + request.status + ' on resource ' + url);\r\n    //         } else {\r\n    //             callback(null, request.responseText);\r\n    //         }\r\n    //     };\r\n    //     request.send();\r\n    // }\r\n    // static LoadShader(url: string, callback:(data: null, callback:string) => void ) {\r\n    //     GLUtility.LoadTextResource(url, callback);\r\n    // }\r\n    static loadImage(url: string, callback: (data: null, image: HTMLElement) => void) {\r\n        const image = new Image();\r\n        image.onload = function () {\r\n            callback(null, image);\r\n        };\r\n        image.src = url;\r\n    }\r\n    // static LoadJSONResource(url: string, callback:(data: string, callback:string) => void ) {\r\n    //     GLUtility.LoadTextResource(url, function (err: Error, result) {\r\n    //         if (err) {\r\n    //             callback(err);\r\n    //         } else {\r\n    //             try {\r\n    //                 callback(null, JSON.parse(result));\r\n    //             } catch (e) {\r\n    //                 callback(e);\r\n    //             }\r\n    //         }\r\n    //     });\r\n    // }\r\n}\r\n","import { Scene } from '../../Scene';\r\nexport class GeometryBase {\r\n    scene: Scene;\r\n    constructor(scene: Scene) {\r\n        this.scene = scene;\r\n        this.scene.list.push(this);\r\n    }\r\n    Render(ctx: WebGL2RenderingContext) {\r\n        //\r\n    }\r\n}","import { GLShaderCommon } from '../Utility/GLShaderCommon';\r\nimport { GeometryBase } from './Base/GeometryBase';\r\nimport { Scene } from '../Scene';\r\n\r\n\r\nexport class Quad extends GeometryBase {\r\n    // v = `#version 300 es\r\n    //     in vec3 a_position;\r\n\r\n    //     uniform vec2 uMouseLoc;\r\n\r\n    //     out vec4 color;\r\n    //     out vec4 pos;\r\n\r\n    //     void main(void) {\r\n    //         float x = uMouseLoc.x * 0.001; // distance(uMouseLoc.x, vec2(0.f, 0.f)) * 0.001;\r\n    //         float y = uMouseLoc.y * 0.001; // distance(uMouseLoc.y, vec2(0.f, 0.f)) * 0.001;\r\n    //         color = vec4(x, y, 0, 1.0f - x);\r\n\r\n    //         // float d = distance(a_position.xy, vec2(0.5f, 0.5f));\r\n    //         // color = vec3(d, 0, 0);\r\n\r\n    //         gl_Position = vec4(a_position, 1.0);\r\n    //         pos = vec4(a_position, 1.0);\r\n    //     }\r\n    // `;\r\n    // f = `#version 300 es\r\n    //     precision mediump float;\r\n\r\n    //     in vec4 color;\r\n    //     in vec4 pos;\r\n    //     out vec4 finalColor;\r\n\r\n    //     void main(void) {\r\n    //         finalColor = vec4(pos.xyz, 1.0);\r\n    //         // finalColor = color;\r\n    //     }\r\n    // `;\r\n    // ...............................................................................................................\r\n    // v = `#version 300 es\r\n\r\n    //     in vec3 a_position;\r\n    //     uniform vec2 uMouseLoc;\r\n\r\n    //     out vec2 mou;\r\n    //     out vec4 col;\r\n    //     out vec4 pos;\r\n\r\n    //     void main(void) {\r\n\r\n    //         float d = distance(a_position.xy, uMouseLoc) * 0.01;\r\n\r\n    //         float x = a_position.x;\r\n    //         float y = a_position.y;\r\n    //         float z = a_position.z;\r\n\r\n    //         gl_Position = vec4(x, y, z, 1.0);\r\n\r\n    //         mou = uMouseLoc;\r\n    //         pos = vec4(a_position, 1.0);\r\n    //         col = vec4(x, y, z, 1);\r\n    //     }\r\n    // `;\r\n    // f = `#version 300 es\r\n    //     precision mediump float;\r\n\r\n    //     in vec4 col;\r\n\r\n    //     out vec4 color;\r\n\r\n    //     void main(void) {\r\n    //         color = vec4(col.xyz , 1.0);\r\n    //     }\r\n    // `;\r\n    // ...............................................................................................................\r\n    // v = `#version 300 es\r\n\r\n    //     in vec3 a_position;\r\n    //     uniform vec2 uMouseLoc;\r\n\r\n    //     out vec2 mou;\r\n    //     out vec3 pos;\r\n\r\n    //     void main(void) {\r\n\r\n    //         gl_Position = vec4(a_position, 1.0);\r\n\r\n    //         mou = uMouseLoc;\r\n    //         pos = a_position;\r\n    //     }\r\n    // `;\r\n    // f = `#version 300 es\r\n    //     precision mediump float;\r\n\r\n    //     in vec2 mou;\r\n    //     in vec3 pos;\r\n    //     out vec4 finalColor;\r\n\r\n    //     void main(void) {\r\n    //         float dis = distance(mou, pos.xy);\r\n    //         finalColor = vec4(dis, dis , 1, 1.0);\r\n    //     }\r\n    // `;\r\n    // ...............................................................................................................\r\n    v = `#version 300 es\r\n\r\n        in vec3 a_position;\r\n        uniform vec2 uMouseLoc;\r\n        uniform float uTime;\r\n\r\n        out vec2 mou;\r\n        out float t;\r\n\r\n        void main(void) {\r\n\r\n            gl_Position = vec4(a_position, 1.0);\r\n\r\n            mou = uMouseLoc;\r\n            t = uTime;\r\n        }\r\n    `;\r\n    f = `#version 300 es\r\n        precision mediump float;\r\n\r\n        in vec2 mou;\r\n        in float t;\r\n        out vec4 finalColor;\r\n\r\n        void main(void) {\r\n            float r = 1.0;\r\n            float g = sign(1.0 * t);\r\n            float b = 1.0;\r\n            finalColor = vec4(r, g, b, 1.0);\r\n        }\r\n    `;\r\n\r\n    gl: WebGL2RenderingContext;\r\n\r\n    vShader: WebGLShader;\r\n    fShader: WebGLShader;\r\n\r\n    program: WebGLProgram;\r\n\r\n    aPositionLoc: number;\r\n    uMouseLoc: WebGLUniformLocation | null;\r\n    uTime: WebGLUniformLocation | null;\r\n\r\n    size: number = 100;\r\n    time: number = 0.0;\r\n    constructor(scene: Scene, gl: WebGL2RenderingContext) {\r\n        super(scene);\r\n        this.gl = gl;\r\n        this.initShader(gl);\r\n    }\r\n    initShader(gl: WebGL2RenderingContext) {\r\n        let vShader = GLShaderCommon.createShader(gl, gl.VERTEX_SHADER as unknown as WebGLShader, this.v);\r\n        let fShader = GLShaderCommon.createShader(gl, gl.FRAGMENT_SHADER as unknown as WebGLShader, this.f);\r\n        if (vShader && fShader) {\r\n            this.vShader = vShader;\r\n            this.fShader = fShader;\r\n            let program = GLShaderCommon.createProgram(gl, this.vShader, this.fShader, true);\r\n\r\n            if (program) {\r\n                this.program = program;\r\n                gl.useProgram(this.program);\r\n                this.aPositionLoc = gl.getAttribLocation(this.program, 'a_position');\r\n                this.uMouseLoc = gl.getUniformLocation(this.program, 'uMouseLoc');\r\n                this.uTime = gl.getUniformLocation(this.program, 'uTime');\r\n                gl.useProgram(null);\r\n\r\n                this.initGeo(gl);\r\n\r\n            }\r\n        } else {\r\n            console.error('vertex fragment shader error');\r\n        }\r\n    }\r\n    initGeo(gl: WebGL2RenderingContext) {\r\n        let aryVerts = new Float32Array([\r\n            -1.0, 1.0, 0,\r\n            1.0, -1.0, 0,\r\n            -1.0, -1.0, 0,\r\n\r\n            -1.0, 1.0, 0,\r\n            1.0, 1.0, 0,\r\n            1.0, -1.0, 0,\r\n        ]);\r\n        let bufVerts = gl.createBuffer();\r\n\r\n        gl.bindBuffer(gl.ARRAY_BUFFER, bufVerts);\r\n        gl.bufferData(gl.ARRAY_BUFFER, aryVerts, gl.STATIC_DRAW);\r\n        gl.bindBuffer(gl.ARRAY_BUFFER, null);\r\n\r\n        gl.useProgram(this.program);\r\n        gl.uniform2f(this.uMouseLoc, 10, 10);\r\n        gl.uniform1f(this.uTime, 0.0);\r\n\r\n        // how its down without VAOs\r\n        gl.bindBuffer(gl.ARRAY_BUFFER, bufVerts);\r\n        gl.enableVertexAttribArray(this.aPositionLoc);\r\n        gl.vertexAttribPointer(this.aPositionLoc, 3, gl.FLOAT, false, 0, 0);\r\n        gl.bindBuffer(gl.ARRAY_BUFFER, null);\r\n\r\n\r\n\r\n    }\r\n    Render(gl: WebGL2RenderingContext) {\r\n\r\n        // gl.uniform2f(this.uMouseLoc, this.scene.app.m[0] / gl.canvas.width, 1 - (this.scene.app.m[1] / gl.canvas.height));\r\n\r\n        // offset mouse pos\r\n        let x = ((this.scene.app.m[0] / gl.canvas.width) * 2) - 1;\r\n        let y = ( (1 - (this.scene.app.m[1] / gl.canvas.height)) * 2) - 1;\r\n        // console.log(x, y);\r\n        gl.uniform2f(this.uMouseLoc, x, y );\r\n\r\n        // gl.uniform2f(this.uMouseLoc, 15 + (this.size * (Math.cos(this.time) + 1)));\r\n\r\n        gl.uniform1f(this.uTime, this.time);\r\n        gl.drawArrays(gl.TRIANGLE_STRIP, 0, 6);\r\n        this.time += 0.01;\r\n    }\r\n    Dummy() {\r\n        //\r\n    }\r\n}","// import { Tri } from '../Geometry/Tri';\r\nimport { Quad } from '../Geometry/Quad_02';\r\n// import { QuadOther } from '../Geometry/QuadOther';\r\n\r\nimport { GeometryBase } from '../Geometry/Base/GeometryBase';\r\nimport { Demo12WebGLGLSLPlayground } from '..';\r\nexport class Scene {\r\n    app: Demo12WebGLGLSLPlayground;\r\n    list: GeometryBase[] = [];\r\n    constructor(app: Demo12WebGLGLSLPlayground) {\r\n        this.app = app;\r\n        this.app.coreWebg2.Render = this.Render.bind(this);\r\n        this.Init();\r\n    }\r\n    Init() {\r\n        // const d = new Tri(this, this.app.coreWebg2.gl);\r\n        // d.Dummy();\r\n        const d = new Quad(this, this.app.coreWebg2.gl);\r\n        d.Dummy();\r\n        // const d = new QuadOther(this, this.app.coreWebg2.gl);\r\n        // d.Dummy();\r\n\r\n        // console.log('init done');\r\n\r\n    }\r\n    Render(gl: WebGL2RenderingContext) {\r\n        for (let i = 0; i < this.list.length; ++i) {\r\n            this.list[i].Render(gl);\r\n        }\r\n    }\r\n}","import { CoreWebg2 } from './Core';\r\nimport { Scene } from './Scene';\r\nexport class Demo12WebGLGLSLPlayground {\r\n    divHost: HTMLElement;\r\n    coreWebg2: CoreWebg2;\r\n    scene: Scene;\r\n    m: number[] = [];\r\n    public static Init(id: string) {\r\n        // console.log(id);\r\n        new Demo12WebGLGLSLPlayground(id);\r\n    }\r\n    constructor(id: string) {\r\n        const divHost = document.getElementById(id);\r\n        if (divHost) {\r\n            this.divHost = divHost;\r\n            this.divHost.onmousemove = (e: MouseEvent) => {\r\n                this.m[0] = e.x;\r\n                this.m[1] = e.y;\r\n            };\r\n        }\r\n        this.coreWebg2 = new CoreWebg2(this);\r\n        this.scene = new Scene(this);\r\n        // console.log('Demo12WebGLGLSLPlayground');\r\n    }\r\n}\r\n\r\nexport class Solution {\r\n    public divHost: HTMLElement;\r\n\r\n    constructor(id: string) {\r\n        this.divHost = document.getElementById(id);\r\n\r\n        Demo12WebGLGLSLPlayground.Init(id)\r\n    }\r\n    public destroy() {\r\n        if (this.divHost) {\r\n            try {\r\n                while (this.divHost.firstChild) {\r\n                    this.divHost.removeChild(this.divHost.firstChild);\r\n                }\r\n            } catch (error) {\r\n                console.error('Error in destroy method:', error);\r\n            }\r\n        } else {\r\n            console.warn('divHost is undefined in destroy method');\r\n        }\r\n    }\r\n}"],"names":["CoreWebg2","constructor","app","gl","canvas","this","document","createElement","divHost","appendChild","width","clientWidth","height","clientHeight","getContext","loop","requestAnimationFrame","clear","Render","clearColor","COLOR_BUFFER_BIT","DEPTH_BUFFER_BIT","GLShaderCommon","static","type","source","shader","createShader","shaderSource","compileShader","getShaderParameter","COMPILE_STATUS","console","log","getShaderInfoLog","deleteShader","vertexShader","fragmentShader","needValidate","program","createProgram","attachShader","linkProgram","getProgramParameter","LINK_STATUS","error","getProgramInfoLog","deleteProgram","validateProgram","VALIDATE_STATUS","shaderString","url","getSourceSynch","req","XMLHttpRequest","open","send","status","responseText","callback","image","Image","onload","src","GeometryBase","scene","list","push","ctx","Quad","super","v","f","vShader","fShader","aPositionLoc","uMouseLoc","uTime","size","time","initShader","VERTEX_SHADER","FRAGMENT_SHADER","useProgram","getAttribLocation","getUniformLocation","initGeo","aryVerts","Float32Array","bufVerts","createBuffer","bindBuffer","ARRAY_BUFFER","bufferData","STATIC_DRAW","uniform2f","uniform1f","enableVertexAttribArray","vertexAttribPointer","FLOAT","x","m","y","drawArrays","TRIANGLE_STRIP","Dummy","Scene","coreWebg2","bind","Init","i","length","Demo12WebGLGLSLPlayground","id","getElementById","onmousemove","e","Solution","destroy","firstChild","removeChild","warn"],"sourceRoot":""}