{"version":3,"file":"static/js/96623.2d01c850.chunk.js","mappings":"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","sources":["njslab/Project/Project_15_Ready/01_ISP_inspector/lib/util/ColorUtil.ts","njslab/Project/Project_15_Ready/01_ISP_inspector/lib/util/VectorUtil.ts","njslab/Project/Project_15_Ready/01_ISP_inspector/lib/util/TurfUtil.ts","njslab/Project/Project_15_Ready/01_ISP_inspector/lib/DrawingPreest.ts","njslab/Project/Project_15_Ready/01_ISP_inspector/lib/constant.ts","njslab/Project/Project_15_Ready/01_ISP_inspector/lib/SceneManager.ts","njslab/Project/Project_15_Ready/01_ISP_inspector/Geometry/GeometryCanvas/Base/GeometryBase.ts","njslab/Project/Project_15_Ready/01_ISP_inspector/lib/util/Math.ts","njslab/Project/Project_15_Ready/01_ISP_inspector/Geometry/GeometryCanvas/GeometryArea/Geometry/index.ts","njslab/Project/Project_15_Ready/01_ISP_inspector/Geometry/GeometryCanvas/GeometryArea/Renderer/index.ts","njslab/Project/Project_15_Ready/01_ISP_inspector/Geometry/GeometryCanvas/GeometryArea/Transform/index.ts","njslab/Project/Project_15_Ready/01_ISP_inspector/lib/util/HexmapDynamic.ts","njslab/Project/Project_15_Ready/01_ISP_inspector/Geometry/GeometryCanvas/GeometryArea/index.ts","njslab/Project/Project_15_Ready/01_ISP_inspector/Geometry/GeometryCanvas/GeometryAreaPolygon/Geometry/index.ts","njslab/Project/Project_15_Ready/01_ISP_inspector/Geometry/GeometryCanvas/GeometryAreaPolygon/Renderer/index.ts","njslab/Project/Project_15_Ready/01_ISP_inspector/Geometry/GeometryCanvas/GeometryAreaPolygon/Transform/index.ts","njslab/Project/Project_15_Ready/01_ISP_inspector/Geometry/GeometryCanvas/GeometryAreaPolygon/index.ts","njslab/Project/Project_15_Ready/01_ISP_inspector/Common/index.ts","njslab/Project/Project_15_Ready/01_ISP_inspector/ActiveCommander/index.ts","njslab/Project/Project_15_Ready/01_ISP_inspector/RendererWrapper/MapboxGLWrapper/index.ts","njslab/Project/Project_15_Ready/01_ISP_inspector/lib/index.ts","njslab/Project/Project_15_Ready/01_ISP_inspector/RendererWrapper/DeckGL/index.ts","njslab/Project/Project_15_Ready/01_ISP_inspector/RendererWrapper/CanvasCustom/CanvasDynamic.ts","njslab/Project/Project_15_Ready/01_ISP_inspector/RendererWrapper/CanvasCustom/index.ts","njslab/Project/Project_15_Ready/01_ISP_inspector/RendererWrapper/index.ts","njslab/Project/Project_15_Ready/01_ISP_inspector/UI/index.ts","njslab/Project/Project_15_Ready/01_ISP_inspector/Scene/SceneState/index.ts","njslab/Project/Project_15_Ready/01_ISP_inspector/Scene/index.ts","njslab/Project/Project_15_Ready/01_ISP_inspector/ApiWrapper/index.ts","njslab/Project/Project_15_Ready/01_ISP_inspector/index.ts"],"sourcesContent":["export const hex2RGB = (hex: string, isGray: boolean = false) => {\n    hex = hex.replace('#', '');\n    let r = parseInt(hex.substring(0, 2), 16);\n    let g = parseInt(hex.substring(2, 4), 16);\n    let b = parseInt(hex.substring(4, 6), 16);\n    if (isGray) {\n        let v = (0.58 * r) + (0.17 * g) + (0.8 * b);\n        return [v, v, v];\n    } else {\n        return [r, g, b];\n    }\n}","export const distance = (v0: RVector3, v1: RVector3): number => {\n    return Math.sqrt((v0.x - v1.x) * (v0.x - v1.x) + (v0.y - v1.y) * (v0.y - v1.y) + (v0.z - v1.z) * (v0.z - v1.z));\n};\nexport const isInsideOfVecs = (v: RVector3, vecs: RVector3[]): boolean => {\n    // ray-casting algorithm based on https://github.com/substack/point-in-polygon\n    // http://www.ecse.rpi.edu/Homepages/wrf/Research/Short_Notes/pnpoly.html\n    let x = v.x, y = v.y;\n    let inside = false;\n    for (let i = 0, j = vecs.length - 1; i < vecs.length; j = i++) {\n        let xi = vecs[i].x, yi = vecs[i].y;\n        let xj = vecs[j].x, yj = vecs[j].y;\n        let intersect = yi > y !== yj > y && x < (xj - xi) * (y - yi) / (yj - yi) + xi;\n        if (intersect) {\n            inside = !inside;\n        }\n    }\n    return inside;\n};\nexport const isInsideEllipse = (cv: RVector3, m: RVector3, r0: number, r1: number, threshold: number = 5) => {\n    const x = Math.pow((m.x - cv.x), 2) / Math.pow(threshold + r0, 2);\n    const y = Math.pow((m.y - cv.y), 2) / Math.pow(threshold + r1, 2);\n    if (x + y <= 1) {\n        return true;\n    }\n    return false;\n};\nexport const closestPointOnLine = (pt: RVector3, p0: RVector3, p1: RVector3) => {\n    const A = p1.y - p0.y;\n    const B = p0.x - p1.x;\n    const C = p1.x * p0.y - p0.x * p1.y;\n    const dis = Math.abs(A * pt.x + B * pt.y + C) / Math.sqrt(A * A + B * B);\n    const proX = (B * (B * pt.x - A * pt.y) - A * C) / (A * A + B * B);\n    const proY = (A * (-B * pt.x + A * pt.y) - B * C) / (A * A + B * B);\n    return { x: proX, y: proY, dis: dis };\n};\nexport const getCosAngleByTwoVectors = (v0: RVector3, v1: RVector3): number => {\n    return dotProduct(normalize(v0), normalize(v1));\n};\nexport const getAngleByTwoVectorsRadian = (v0: RVector3, v1: RVector3): number => {\n    return Math.acos(getCosAngleByTwoVectors(v0, v1));\n};\nexport const getAngleByTwoVectors = (v0: RVector3, v1: RVector3): number => {\n    return getAngleByTwoVectorsRadian(v0, v1) * 180.0 / Math.PI;\n};\nexport const lengt = (v: RVector3): number => {\n    return Math.sqrt(v.x * v.x + v.y * v.y + v.z * v.z);\n};\nexport const normalize = (v: RVector3): RVector3 => {\n    let len: number = Math.sqrt(v.x * v.x + v.y * v.y + v.z * v.z);\n    if (len < 0.000001) {\n        return new RVector3(v.x, v.y, v.z);\n    }\n    return new RVector3(v.x / len, v.y / len, v.z / len);\n};\nexport const dotProduct = (v1: RVector3, v2: RVector3): number => {\n    return v1.x * v2.x + v1.y * v2.y + v1.z * v2.z;\n};\nexport const crossProduct = (v1: RVector3, v2: RVector3): RVector3 => {\n    return new RVector3(\n        v1.y * v2.z - v1.z * v2.y,\n        v1.z * v2.x - v1.x * v2.z,\n        v1.x * v2.y - v1.y * v2.x\n    );\n};\nexport const divideByNum = (v0: RVector3, v1: RVector3, n: number = 5): RVector3[] => {\n    const vs: RVector3[] = [];\n    const xOff = (v1.x - v0.x) / n;\n    const yOff = (v1.y - v0.y) / n;\n    const zOff = (v1.z - v0.z) / n;\n    for (let j = 0; j < n; ++j) {\n        let x = v0.x + xOff * j;\n        let y = v0.y + yOff * j;\n        let z = v0.z + zOff * j;\n        vs.push(new RVector3(x, y, z));\n    }\n    return vs;\n};\nexport const getCenterVec = (vs: RVector3[]) => {\n    const v = new RVector3(0, 0, 0)\n\n    for (let i = 0; i < vs.length; ++i) {\n        v.x += vs[i].x;\n        v.y += vs[i].y;\n        v.lng += vs[i].lng;\n        v.lat += vs[i].lat;\n    }\n    \n    v.x /= vs.length;\n    v.y /= vs.length;\n    v.lng /= vs.length;\n    v.lat /= vs.length;\n    return v;\n};\nexport class RVector3 {\n    x: number = 0.0;\n    y: number = 0.0;\n    z: number = 0.0;\n    lng: number = 0.0;\n    lat: number = 0.0;\n    ele: number = 0.0;\n    constructor(x: number = 0, y: number = 0, z: number = 0) {\n        this.x = x;\n        this.y = y;\n        this.z = z;\n    }\n};","import * as turf from '@turf/turf';\n\nexport const difference = (area: turf.Polygon | any, polygons: turf.Polygon[], boolean) => {\n    for (let i = 0; i < polygons.length; ++i) {\n        if (boolean[i]) {\n            area = turf.difference(area, polygons[i]);\n        }\n    };\n    return area;\n};\n\nexport const computePathPolygon = (object: turf.Polygon, projection: (lon: number, lat: number) => number[]): Path2D => {\n    const path = new Path2D();\n    let x, y;\n    for (let j = 0; j < object['geometry']['coordinates'].length; ++j) {\n        // if (j === 0) {\n        const pathOut = new Path2D();\n        for (let i = object['geometry']['coordinates'][j].length - 1; i > -1; --i) {\n\n            const p = object['geometry']['coordinates'][j][i];\n            if (i === object['geometry']['coordinates'][j].length - 1) {\n                const sp = projection(p[0], p[1])\n                pathOut.moveTo(sp[0], sp[1]);\n            } else {\n                const sp = projection(p[0], p[1])\n                pathOut.lineTo(sp[0], sp[1]);\n            }\n        }\n        pathOut.closePath();\n        path.addPath(pathOut);\n    }\n    return path;\n};\n","import { RVector3 } from './';\nexport const drawingPoint = (ctx: CanvasRenderingContext2D, x: number, y: number) => {\n    ctx.beginPath();\n    ctx.arc(x, y, 10, 0, Math.PI * 2.0);\n    ctx.closePath();\n    ctx.fill();\n};\nexport const renderControlPoint = (ctx: CanvasRenderingContext2D, vs: RVector3[], fillColor = 'rgba(200, 200, 200, 1.0)', strokeColor = 'rgba(50, 50, 50, 1.0)', lineWidth = 3 ) => {\n    ctx.fillStyle = fillColor;\n    ctx.strokeStyle = strokeColor;\n    ctx.lineWidth = lineWidth;\n    vs.forEach(v => {\n        ctx.beginPath();\n        ctx.arc(v.x, v.y, 8, 0, Math.PI * 2.0);\n        ctx.closePath();\n        ctx.fill();\n        ctx.stroke();\n    });\n};","export const LANDUSE_TYPE_MAPPING = {\n  R: { text: 'Residential', color: '#ffff6e' },\n  B: { text: 'Business', color: '#f59700' },\n  X: { text: 'Residential & Business', color: '#FFC25F' },\n  A: { text: 'Agriculture', color: '#9EFF99' },\n  LIBRARY: { text: 'Library', color: '#04E762' },\n  SCHOOL: { text: 'School', color: '#95E06C' },\n  GOVERNMENT: { text: 'Government', color: '#D741A7' },\n  HEALTH: { text: 'Health', color: '#008BF8' },\n  COMMUNITY: { text: 'Community', color: '#00CECB' },\n  RELIGION: { text: 'Religion', color: '#9BFFFD' },\n  C: { text: 'Other CAI', color: '#D544CC' },\n  O: { text: 'Other BSLs', color: 'gray' }\n}\nexport const FUNDING_STATUS_MAPPING = {\n  None: {\n    text: 'Not assigned',\n    color: 'gray'\n  },\n  default: {\n    text: 'Default',\n    color: '#5287E6'\n  },\n  pending: {\n    text: 'Pending',\n    color: '#746CDD'\n  },\n  assigned: {\n    text: 'Assigned',\n    color: '#A355D4'\n  }\n}\nexport const TYPE_GEOMETRY = {\n  RECT: 'RECT',\n  CIRCLE: 'CIRCLE',\n  POLYGON: 'POLYGON',\n}","export class SceneManager {\n  private histories: any = [];\n  private currentIndex = -1;\n  public reset() {\n    this.histories = [];\n    this.currentIndex = -1;\n  }\n  public push(data: any) {\n    if (this.currentIndex < this.histories.length - 1) {\n      this.histories.splice(this.currentIndex + 1, this.histories.length);\n    }\n    this.histories.push(data);\n    this.currentIndex = this.histories.length - 1;\n  }\n  public getCurrentIndex() {\n    return this.currentIndex;\n  }\n  public getHistoryLength() {\n    return this.histories.length;\n  }\n  public getCurrentState() {\n    return { currentIndex: this.getCurrentIndex(), historyNum: this.getHistoryLength() };\n  }\n  public undo() {\n    if (this.currentIndex === 0) { return undefined; }\n    this.currentIndex--;\n    return this.histories[this.currentIndex];\n  }\n  public redo() {\n    this.currentIndex++;\n    this.currentIndex = this.currentIndex < this.histories.length ? this.currentIndex : this.histories.length - 1;\n    return this.histories[this.currentIndex];\n  }\n}","import * as turf from '@turf/turf';\nimport { Scene } from '../../../Scene';\nimport { TYPE_GEOMETRY, getUUID } from '../../../lib';\n\nexport class GeometryBase {\n    public scene: Scene;\n    public TYPE = TYPE_GEOMETRY.RECT;\n    public t = 0.1;\n    public id: string;\n    public capturedVecId: number = -1;\n    public isHovered: boolean = false;\n    public hasAnimation: boolean = false;\n    public updateNeeded: boolean = false;\n    public captureNeeded: boolean = false;\n    public referPoint: any = [];\n    protected _isSelected: boolean = false;\n\n    public polygonTurfOriginal: turf.Polygon | any;\n    public polygonTurfSubtracted: turf.Polygon;\n\n    constructor(scene: Scene) {\n        this.scene = scene;\n        this.id = getUUID();\n\n        this.scene.push(this);\n    }\n    public get isSelected() {\n        return this._isSelected;\n    }\n    public set isSelected(v: boolean) {\n        this._isSelected = v;\n    }\n    public isInside(x: number, y: number) {\n        return false;\n    }\n    public translate(x: number, y: number) {\n        \n    }\n    public removeVertexLastVertex() {\n        \n    }\n    public update() {\n\n    }\n    public onMouseUp() {\n        \n    }\n    public onMouseClick(e) {\n\n    }\n    public onMouseDoubleClick(e) {\n\n    }\n    public shiftType() {\n        \n    }\n    public updateGeoProjection() {\n\n    }\n    public updateGhostPos(x: number, y: number) {\n\n    }\n    public render(ctx: CanvasRenderingContext2D) {\n        this.update();\n        this.renderPost(ctx);\n    }\n    public renderPost(ctx: CanvasRenderingContext2D) {\n\n    }\n    public toJson() {\n        \n    }\n    public updateWidthHight(width: number, height: number) {\n\n    }\n    public remove(): void {\n        this.scene.remove(this);\n    }\n    public toggleHexmap() {\n\n    }\n}","export const getUUID = () => {   // reference : https://jsfiddle.net/briguy37/2MVFd/\n    let d = new Date().getTime();\n    return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, (c: string) => {\n        let r = (d + Math.random() * 16) % 16 | 0;\n        d = Math.floor(d / 16);\n        return (c === 'x' ? r : (r & 0x3 | 0x8)).toString(16);\n    });\n}\nexport const remap = (val: number, oldMin: number, oldMax: number, newMin: number, newMax: number) => {\n    return (((val - oldMin) * (newMax - newMin)) / (oldMax - oldMin)) + newMin;\n};\nexport const remapNormalize = (CValue: number[]) => {\n    let valueOut = []\n    let domain = getDomain(CValue);\n    for (let d of CValue) {\n        valueOut.push(((d - domain[0]) / (domain[1] - domain[0])));\n    }\n    return valueOut;\n};\nexport const getDomain = (doubleList: number[]) => {\n    let domain = [];\n    let Min = Number.MAX_VALUE, Max = Number.MIN_VALUE;\n    for (let d of doubleList) {\n        if (Min > d) { Min = d; }\n        if (Max < d) { Max = d; }\n    }\n    domain.push(Min);\n    domain.push(Max);\n    return domain;\n};","import { RVector3, } from '../../../../lib';\n\nexport class AreaGeometry {\n\n    public vec: RVector3;\n\n    public vsRect: RVector3[] = [];\n\n    public segR = 36;\n    public vsCircle: RVector3[] = [];\n\n    public width = 200;\n    public height = 200;\n\n    constructor(vec: RVector3, width: number, height: number) {\n        this.vec = vec;\n        this.width = width;\n        this.height = height;\n        this.reset();\n        this.initRect();\n        this.initCircleVec();\n    }\n    public initRect() {\n        const widthHalf = this.width * 0.5;\n        const heightHalf = this.height * 0.5;\n        this.vsRect.push(new RVector3(this.vec.x - widthHalf, this.vec.y + heightHalf));\n        this.vsRect.push(new RVector3(this.vec.x + widthHalf, this.vec.y + heightHalf));\n        this.vsRect.push(new RVector3(this.vec.x + widthHalf, this.vec.y - heightHalf));\n        this.vsRect.push(new RVector3(this.vec.x - widthHalf, this.vec.y - heightHalf));\n    }\n    public initCircleVec() {\n        this.vsCircle = [];\n        const r = (Math.PI * 2) / this.segR\n        for (let i = 0; i < this.segR; ++i) {\n            const x = Math.cos(r * i) * this.width * 0.5;\n            const y = Math.sin(r * i) * this.height * 0.5;\n            const v = new RVector3(this.vec.x + x, this.vec.y + y, 0);\n            this.vsCircle.push(v)\n        }\n    }\n    public updateScreen(toScreen: (x: number, y: number)=> number[]) {\n        // console.log('update screen pos');\n\n        let sp = toScreen(this.vec.lng, this.vec.lat);\n        this.vec.x = sp[0];\n        this.vec.y = sp[1];\n\n        for (let i = 0; i < this.vsRect.length; ++i) {\n            sp = toScreen(this.vsRect[i].lng, this.vsRect[i].lat);\n            this.vsRect[i].x = sp[0];\n            this.vsRect[i].y = sp[1];\n        }\n\n        for (let i = 0; i < this.vsCircle.length; ++i) {\n            // console.log(this.vs[i].lng, this.vs[i].lat)\n            sp = toScreen(this.vsCircle[i].lng, this.vsCircle[i].lat);\n            this.vsCircle[i].x = sp[0];\n            this.vsCircle[i].y = sp[1];\n            // console.log(this.vsCircle[i].x, this.vsCircle[i].y);\n        }\n\n        this.width = Math.abs(this.vsRect[0].x - this.vsRect[2].x);\n        this.height = Math.abs(this.vsRect[0].y - this.vsRect[2].y);\n    }\n    public updateProjection(toMap: (x: number, y: number)=> number[]) {\n        // console.log('update map pos');\n        const mp = toMap(this.vec.x, this.vec.y);\n        this.vec.lng = mp[0];\n        this.vec.lat = mp[1];\n        for (let i = 0; i < this.vsRect.length; ++i) {\n            let mp = toMap(this.vsRect[i].x, this.vsRect[i].y);\n            this.vsRect[i].lng = mp[0];\n            this.vsRect[i].lat = mp[1];\n        }\n\n        for (let i = 0; i < this.vsCircle.length; ++i) {\n            let mp = toMap(this.vsCircle[i].x, this.vsCircle[i].y);\n            this.vsCircle[i].lng = mp[0];\n            this.vsCircle[i].lat = mp[1];\n        }\n        this.updateCenterVec();\n    }\n    public updateCenterVec() {\n        let xSum = 0;\n        let ySum = 0;\n        for (let i = 0; i < this.vsRect.length; ++i) {\n            xSum += this.vsRect[i].x;\n            ySum += this.vsRect[i].y;\n        }\n        this.vec.x = xSum / this.vsRect.length;\n        this.vec.y = ySum / this.vsRect.length;\n    }\n    public updateScreenPosCircle() {\n        const r = (Math.PI * 2) / this.segR\n        for (let i = 0; i < this.segR; ++i) {\n            const x = Math.cos(r * i) * this.width * 0.5;\n            const y = Math.sin(r * i) * this.height * 0.5;\n            // const v = new RVector3(this.vec.x + x, this.host.vec.y + y, 0);\n            // const [mx, my] = this.scene.common.toMap(x, y);\n            // this.vec.lng = mx;\n            // this.vec.lat = my;\n            this.vsCircle[i].x = this.vec.x + x;\n            this.vsCircle[i].y = this.vec.y + y;\n        }\n        // console.log('updateCircle');\n    }\n    public reset() {\n        this.vsRect = [];\n        this.vsCircle = [];\n    }\n    public updateWidthHight(width: number, height: number) {\n        this.width = width;\n        this.height = height;\n        this.reset();\n        this.initRect();\n        this.initCircleVec();\n    }\n}","import * as turf from '@turf/turf';\n\nimport { Area } from '..';\n\nimport { LANDUSE_TYPE_MAPPING, TYPE_GEOMETRY, renderControlPoint, difference, computePathPolygon } from '../../../../lib';\n\nexport class Renderer {\n    public host: Area;\n    public pathCroppedArea: Path2D\n    constructor(host: Area) {\n        this.host = host;\n    }\n    public renderPost(ctx: CanvasRenderingContext2D) {\n        this.renderAreaBounding(ctx);\n        this.renderCroppedArea(ctx);\n\n        if (this.host.isHovered || this.host.isSelected) {\n            this.renderControlPoint(ctx);\n            this.renderDim(ctx);\n\n            if (this.host.isSelected) {\n                this.renderSelected(ctx);\n            }\n        }\n        this.renderCenterPoint(ctx);\n        this.renderProperties(ctx);\n    }\n    private renderCenterPoint(ctx: CanvasRenderingContext2D) {\n        ctx.beginPath();\n        ctx.moveTo(this.host.vec.x - 5, this.host.vec.y);\n        ctx.lineTo(this.host.vec.x + 5, this.host.vec.y);\n        ctx.moveTo(this.host.vec.x, this.host.vec.y - 5);\n        ctx.lineTo(this.host.vec.x, this.host.vec.y + 5);\n        ctx.stroke();\n    }\n    private renderCroppedArea(ctx: CanvasRenderingContext2D) {\n        if (this.host.updateNeeded || this.host.scene.solution.rendererWrapper.mapBoxWrapper.map.isMoving()) {\n            const diff = difference(this.host.polygonTurfOriginal, this.host.scene.polygonsDifference, this.host.scene.ids);\n            this.host.polygonTurfSubtracted = diff;\n            this.pathCroppedArea = computePathPolygon(diff, this.host.scene.common.toScreen);\n            this.host.updateNeeded = false;\n            // console.log('updating');\n        }\n\n        ctx.setLineDash([5, 7]);\n        ctx.lineDashOffset = this.host.t;\n        ctx.lineWidth = 2;\n        ctx.strokeStyle = '#fff';\n\n        const op = 0.2 + Math.sin(this.host.t * 0.1) * 0.09;\n        ctx.fillStyle = `rgba(0, 255, 255, ${op} )`;\n\n        ctx.fill(this.pathCroppedArea, 'evenodd');\n        ctx.stroke(this.pathCroppedArea);\n\n        ctx.setLineDash([]);\n    }\n    private renderControlPoint(ctx: CanvasRenderingContext2D) {\n        ctx.fillStyle = 'rgba(200, 200, 200, 1.0)';\n        ctx.strokeStyle = 'rgba(50, 50, 50, 1.0)';\n        ctx.lineWidth = 3;\n\n        renderControlPoint(ctx, this.host.geometry.vsRect);\n        renderControlPoint(ctx, this.host.transform.cVecGhost);\n\n    }\n    private renderDim(ctx: CanvasRenderingContext2D) {\n        ctx.textAlign = 'center';\n        ctx.font = '14px arial';\n        ctx.fillStyle = '#fff';\n\n        if (this.host.TYPE === TYPE_GEOMETRY.CIRCLE) {\n            // ctx.ellipse(this.host.vec.x, this.host.vec.y, this.host.geometry.width * 0.5, this.host.geometry.height * 0.5, 0.0, 0.0, Math.PI * 2.0);\n\n            let line = turf.lineString([[this.host.geometry.vsRect[0].lng, this.host.geometry.vsRect[0].lat], [this.host.geometry.vsRect[1].lng, this.host.geometry.vsRect[1].lat]]);\n            let length = turf.length(line, { units: 'miles' }) * 0.5;\n\n            let x = this.host.geometry.vsRect[0].x + ((this.host.geometry.vsRect[1].x - this.host.geometry.vsRect[0].x) * 0.75);\n            let y = this.host.geometry.vec.y - 10;\n            ctx.fillText(`R1 : ${length.toFixed(5)} miles`, x, y);\n\n\n            line = turf.lineString([[this.host.geometry.vsRect[0].lng, this.host.geometry.vsRect[0].lat], [this.host.geometry.vsRect[3].lng, this.host.geometry.vsRect[3].lat]]);\n            length = turf.length(line, { units: 'miles' }) * 0.5;\n\n            x = this.host.geometry.vec.x - 10;\n            y = this.host.geometry.vsRect[0].y + ((this.host.geometry.vsRect[3].y - this.host.geometry.vsRect[0].y) * 0.75);\n\n            ctx.save();\n            ctx.translate(x, y);\n            ctx.rotate(-90 * Math.PI / 180);\n            ctx.fillText(`R2 : ${length.toFixed(5)} miles`, 0, 0);\n            ctx.restore();\n\n            ctx.strokeStyle = 'rgba(255, 255, 255, 0.5)';\n            ctx.lineWidth = 0.5;\n\n            ctx.beginPath();\n            ctx.moveTo(this.host.geometry.vec.x, this.host.geometry.vsRect[2].y);\n            ctx.lineTo(this.host.geometry.vec.x, this.host.geometry.vec.y);\n            ctx.stroke();\n\n            ctx.beginPath();\n            ctx.moveTo(this.host.geometry.vec.x, this.host.geometry.vec.y);\n            ctx.lineTo(this.host.geometry.vsRect[1].x, this.host.geometry.vec.y);\n            ctx.stroke();\n\n        } else {\n            let line = turf.lineString([[this.host.geometry.vsRect[0].lng, this.host.geometry.vsRect[0].lat], [this.host.geometry.vsRect[1].lng, this.host.geometry.vsRect[1].lat]]);\n            let length = turf.length(line, { units: 'miles' });\n\n            let x = this.host.geometry.vsRect[0].x + ((this.host.geometry.vsRect[1].x - this.host.geometry.vsRect[0].x) * 0.5);\n            let y = this.host.geometry.vsRect[0].y + 25;\n            ctx.fillText(`W : ${length.toFixed(5)} miles`, x, y);\n\n\n            line = turf.lineString([[this.host.geometry.vsRect[0].lng, this.host.geometry.vsRect[0].lat], [this.host.geometry.vsRect[3].lng, this.host.geometry.vsRect[3].lat]]);\n            length = turf.length(line, { units: 'miles' });\n\n            x = this.host.geometry.vsRect[0].x - 25;\n            y = this.host.geometry.vsRect[0].y + ((this.host.geometry.vsRect[3].y - this.host.geometry.vsRect[0].y) * 0.5);\n\n            ctx.save();\n            ctx.translate(x, y);\n            ctx.rotate(-90 * Math.PI / 180);\n\n            ctx.fillText(`H : ${length.toFixed(5)} miles`, 0, 0);\n\n            ctx.restore();\n        }\n\n        // ctx.globalCompositeOperation = 'source-over';\n        // ctx.stroke()\n    }\n    private renderAreaBounding(ctx: CanvasRenderingContext2D) {\n        ctx.beginPath();\n        if (this.host.TYPE === TYPE_GEOMETRY.CIRCLE) {\n            ctx.ellipse(this.host.vec.x, this.host.vec.y, this.host.geometry.width * 0.5, this.host.geometry.height * 0.5, 0.0, 0.0, Math.PI * 2.0);\n        } else {\n            ctx.rect(this.host.geometry.vsRect[3].x, this.host.geometry.vsRect[3].y, this.host.geometry.width, this.host.geometry.height);\n        }\n        ctx.lineWidth = 1;\n        ctx.strokeStyle = 'rgba(255, 255, 255, 0.4)';\n        ctx.stroke();\n    }\n    private renderProperties(ctx: CanvasRenderingContext2D) {\n        const area = turf.convertArea(turf.area(this.host.polygonTurfSubtracted), 'meters', 'miles')\n        ctx.textAlign = 'center';\n        ctx.font = '18px arial';\n        ctx.fillStyle = '#fff';\n        // ctx.globalCompositeOperation = 'source-over';\n        ctx.fillText(`ID: ${this.host.id.split('-')[0]}`, this.host.vec.x, this.host.vec.y - 90 - this.host.geometry.height * 0.5);\n\n        ctx.fillText(`Area in square miles: ${area.toFixed(5)}`, this.host.vec.x, this.host.vec.y - 60 - this.host.geometry.height * 0.5);\n        // console.log(this.host.cp.x, 50 - this.host.cp.y - this.host.geometry.height * 0.5);\n\n        const pts = turf.pointsWithinPolygon(this.host.scene.points, this.host.polygonTurfSubtracted)\n        // console.log(pts);\n\n        this.host.referPoint = pts;\n\n        let r = 0, b = 0, other = 0;\n        for (let i = 0; i < pts.features.length; ++i) {\n            if (pts.features[i].properties['landuse'] === 'R') {\n                r += 1;\n            } else if (pts.features[i].properties['landuse'] === 'B') {\n                b += 1;\n            } else {\n                other += 1;\n            }\n        }\n\n        ctx.fillStyle = LANDUSE_TYPE_MAPPING.R.color\n        ctx.fillText(`${LANDUSE_TYPE_MAPPING.R.text}: ${r},`, this.host.vec.x - 120, this.host.vec.y - 25 - this.host.geometry.height * 0.5);\n\n        ctx.fillStyle = LANDUSE_TYPE_MAPPING.B.color\n        ctx.fillText(`${LANDUSE_TYPE_MAPPING.B.text}: ${b},`, this.host.vec.x + 28, this.host.vec.y - 25 - this.host.geometry.height * 0.5);\n\n        ctx.fillStyle = 'rgb(0, 128, 0)';\n        ctx.fillText(`Other: ${other}`, this.host.vec.x + 140, this.host.vec.y - 25 - this.host.geometry.height * 0.5);\n        // console.log(r, b, other)\n    }\n    public renderSelected(ctx: CanvasRenderingContext2D) {\n        ctx.strokeStyle = 'rgba(255, 255, 255, 1)';\n        ctx.lineWidth = 1;\n\n        const offset = 13 + Math.sin(this.host.t * 0.2);\n        ctx.beginPath();\n        ctx.moveTo(this.host.geometry.vsRect[0].x - offset, this.host.geometry.vsRect[0].y - offset);\n        ctx.lineTo(this.host.geometry.vsRect[0].x - offset, this.host.geometry.vsRect[0].y + offset);\n        ctx.lineTo(this.host.geometry.vsRect[0].x + offset, this.host.geometry.vsRect[0].y + offset);\n\n        ctx.moveTo(this.host.geometry.vsRect[1].x + offset, this.host.geometry.vsRect[1].y - offset);\n        ctx.lineTo(this.host.geometry.vsRect[1].x + offset, this.host.geometry.vsRect[1].y + offset);\n        ctx.lineTo(this.host.geometry.vsRect[1].x - offset, this.host.geometry.vsRect[1].y + offset);\n\n        ctx.moveTo(this.host.geometry.vsRect[2].x + offset, this.host.geometry.vsRect[2].y + offset);\n        ctx.lineTo(this.host.geometry.vsRect[2].x + offset, this.host.geometry.vsRect[2].y - offset);\n        ctx.lineTo(this.host.geometry.vsRect[2].x - offset, this.host.geometry.vsRect[2].y - offset);\n\n        ctx.moveTo(this.host.geometry.vsRect[3].x - offset, this.host.geometry.vsRect[3].y + offset);\n        ctx.lineTo(this.host.geometry.vsRect[3].x - offset, this.host.geometry.vsRect[3].y - offset);\n        ctx.lineTo(this.host.geometry.vsRect[3].x + offset, this.host.geometry.vsRect[3].y - offset);\n\n        ctx.stroke();\n\n        // ctx.beginPath();\n        // ctx.moveTo(this.host.geometry.vec.x, this.host.geometry.vec.y);\n        // ctx.lineTo(this.host.geometry.vsRect[1].x, this.host.geometry.vec.y);\n        // ctx.stroke();\n    }\n}\n","import { RVector3, } from '../../../../lib';\nimport { Area } from '..';\n\nexport class Transform {\n    public host: Area;\n    public cVecGhost: RVector3[] = [];\n    constructor(host: Area) {\n        this.host = host;\n\n        const widthHalf = this.host.geometry.width * 0.5;\n        const heighthHalf = this.host.geometry.height * 0.5;\n\n        this.cVecGhost = [\n            new RVector3(this.host.vec.x - widthHalf, this.host.vec.y),\n            new RVector3(this.host.vec.x, this.host.vec.y + heighthHalf),\n            new RVector3(this.host.vec.x + widthHalf, this.host.vec.y),\n            new RVector3(this.host.vec.x, this.host.vec.y - heighthHalf),\n        ];\n    }\n    public translate(x: number, y: number): void {\n        this.host.captureNeeded = true;\n\n        const preX = this.host.scene.solution.activeCommander.mp[0] - this.host.scene.solution.activeCommander.mpPre[0];\n        const preY = this.host.scene.solution.activeCommander.mp[1] - this.host.scene.solution.activeCommander.mpPre[1];\n\n        if (this.host.capturedVecId > -1) {\n\n            if (this.host.capturedVecId < this.host.geometry.vsRect.length) {\n                this.host.geometry.vsRect[this.host.capturedVecId].x += preX;\n                this.host.geometry.vsRect[this.host.capturedVecId].y += preY;\n            }\n            // console.log(this.host.capturedVecId);\n            // console.log(this.host.capturedVecId)\n            if (this.host.capturedVecId === 0) {\n                this.host.geometry.vsRect[3].x = this.host.geometry.vsRect[0].x;\n                this.host.geometry.vsRect[1].y = this.host.geometry.vsRect[0].y;\n\n            } else if (this.host.capturedVecId === 1) {\n                this.host.geometry.vsRect[2].x = this.host.geometry.vsRect[1].x;\n                this.host.geometry.vsRect[0].y = this.host.geometry.vsRect[1].y;\n\n            } else if (this.host.capturedVecId === 2) {\n                this.host.geometry.vsRect[1].x = this.host.geometry.vsRect[2].x;\n                this.host.geometry.vsRect[3].y = this.host.geometry.vsRect[2].y;\n\n            } else if (this.host.capturedVecId === 3) {\n                this.host.geometry.vsRect[0].x = this.host.geometry.vsRect[3].x;\n                this.host.geometry.vsRect[2].y = this.host.geometry.vsRect[3].y;\n                ////\n            } else if (this.host.capturedVecId === 4) {\n                this.host.geometry.vsRect[3].x += preX; this.host.geometry.vsRect[0].x += preX;\n            } else if (this.host.capturedVecId === 5) {\n                this.host.geometry.vsRect[1].y += preY; this.host.geometry.vsRect[0].y += preY;\n            } else if (this.host.capturedVecId === 6) {\n                this.host.geometry.vsRect[1].x += preX; this.host.geometry.vsRect[2].x += preX;\n            } else if (this.host.capturedVecId === 7) {\n                this.host.geometry.vsRect[2].y += preY; this.host.geometry.vsRect[3].y += preY;\n            }\n\n\n            this.host.geometry.width = Math.abs(this.host.geometry.vsRect[0].x - this.host.geometry.vsRect[2].x);\n            this.host.geometry.height = Math.abs(this.host.geometry.vsRect[0].y - this.host.geometry.vsRect[2].y);\n\n            this.host.updateGeoProjection();\n            this.host.updateScreenPosCircle();\n            this.hexRebuild();\n            this.updateGhostVecs();\n            return;\n        }\n\n        this.host.vec.x += preX;\n        this.host.vec.y += preY;\n        for (let i = 0; i < this.host.geometry.vsRect.length; ++i) {\n            this.host.geometry.vsRect[i].x += preX;\n            this.host.geometry.vsRect[i].y += preY;\n        }\n\n        this.host.updateGeoProjection();\n        this.host.updateScreenPosCircle();\n        this.hexReposition(preX, preY);\n        this.updateGhostVecs();\n    }\n\n    public hexReposition(xOff: number, yOff: number) {\n        if (this.host.hexmap) {\n            this.host.hexmap.reposition(xOff, yOff);\n            this.host.hexmap.updateActiveHexByBoudnary(this.host.polygonTurfSubtracted);\n        }\n    }\n    public hexRebuild() {\n        if (this.host.hexmap) {\n            this.host.initHex();\n            this.host.hexmap.updateActiveHexByBoudnary(this.host.polygonTurfSubtracted);\n        }\n    }\n\n    public updateGhostVecs() {\n        const widthHalf = this.host.geometry.width * 0.5;\n        const heighthHalf = this.host.geometry.height * 0.5;\n        this.cVecGhost[0].x = this.host.vec.x - widthHalf;\n        this.cVecGhost[0].y = this.host.vec.y;\n        this.cVecGhost[1].x = this.host.vec.x;\n        this.cVecGhost[1].y = this.host.vec.y + heighthHalf;\n        this.cVecGhost[2].x = this.host.vec.x + widthHalf;\n        this.cVecGhost[2].y = this.host.vec.y;\n        this.cVecGhost[3].x = this.host.vec.x;\n        this.cVecGhost[3].y = this.host.vec.y - heighthHalf;\n    }\n}\n","import { RVector3, getCenterVec, isInsideOfVecs, distance, remap } from '..';\n\nimport * as turf from '@turf/turf';\n\nexport class HexMapDynamic {\n    public listPixel: Hexbin[];\n    public rx: number;\n    public ry: number;\n    public ddx: number;\n    public ddy: number;\n    public v0: RVector3;\n    public v1: RVector3;\n    public ptsCenter: RVector3;\n    public pts: RVector3[][];\n    public offScale: number;\n\n    public toMap: (x: number, y: number) => number[];\n    public toScreen: (lng: number, lat: number) => number[];\n\n    public referPoint: any = [];\n\n    constructor(v0: RVector3, v1: RVector3, rx: number = 100, ry: number = 100, toMap: any, toScreen: any) {\n        this.toMap = toMap;\n        this.toScreen = toScreen;\n\n        this.listPixel = [];\n        this.rx = rx;\n        this.ry = ry;\n        this.offScale = 0.9;\n        this.v0 = v0;\n        this.v1 = v1;\n        this.ptsCenter = new RVector3(0, 0, 0);\n        this.ddx = (this.v1.x - this.v0.x) / (this.rx - 1.0);\n        this.ddy = (this.v1.y - this.v0.y) / (this.ry - 1.0);\n        // this.Built();\n        this.init();\n    }\n    public init() {\n        this.initGrid();\n        // this.ComputeAtt();\n        this.computeHex();\n        this.computeHexOff();\n        // this.ComputeGeoVec();\n    }\n    public initWithR(r: number) {\n        this.initGrid();\n        this.computeHex();\n        this.filterWithinR(r);\n        this.computeHexOff();\n        this.computeGeoVec();\n    }\n    public initWithVecs(vs: RVector3[]) {\n        this.initGrid();\n        this.computeHex();\n        this.filterWithinVecs(vs);\n        this.computeHexOff();\n        this.computeGeoVec();\n    }\n    public initGrid() {\n        this.pts = [];\n        for (let j = 0; j < this.ry; ++j) {\n            let y = this.v0.y + j * this.ddy;\n            let xArray: RVector3[] = [];\n            for (let i = 0; i < this.rx; ++i) {\n                let x = this.v0.x + i * this.ddx;\n\n                let vec = new RVector3(x, y, 0);\n                const sp = this.toMap(vec.x, vec.y);\n                vec.lng = sp[0]; vec.lat = sp[1];\n\n                xArray.push(vec);\n            }\n            this.pts.push(xArray);\n        }\n    }\n    // ComputeAtt() {\n    //     for (let j = 0; j < this.ry; ++j) {\n    //         for (let i = 0; i < this.rx; ++i) {\n    //             //    let d = this.pts[j][i].FadeExp(new RVector3(0,0,0), 0.0000001);\n    //             //    this.pts[j][i].Mult(d*d); \n    //             let p0 = RVector3.Attractor(this.pts[j][i], new RVector3(50, 50, 0), 2, 0.001);\n    //             let p1 = RVector3.Attractor(this.pts[j][i], new RVector3(-50, 0, 0), 8, 0.89);\n    //             let p2 = RVector3.Attractor(this.pts[j][i], new RVector3(-0, 0, 0), 5, 0.99);\n    //             // console.log(p)  \n    //             this.pts[j][i].Add(p0);\n    //             this.pts[j][i].Add(p1);\n    //             this.pts[j][i].Add(p2);\n    //         }\n    //     }\n    // }\n    public computeHex() {\n        this.listPixel = [];\n        let alter = true;\n        for (let j = 0; j < this.ry; j += 2) {\n            for (let i = 0; i < this.rx; i += 2) {\n                if (alter) {\n                    if (i % 2 === 0 && i < this.rx - 2 && j % 2 === 0 && j < this.ry - 2) {\n                        let p = new Hexbin(this);\n                        p.bVec.push(this.pts[j][i + 1]);\n                        p.bVec.push(this.pts[j + 1][i + 2]);\n                        p.bVec.push(this.pts[j + 2][i + 2]);\n                        p.bVec.push(this.pts[j + 3][i + 1]);\n                        p.bVec.push(this.pts[j + 2][i]);\n                        p.bVec.push(this.pts[j + 1][i]);\n                        // p.bVec.push(this.pts[j][i+1]);\n                        p.updateCenVec();\n                        p.updatePolygon();\n                        this.listPixel.push(p);\n                    }\n                } else {\n                    if (i % 2 === 0 && i < this.rx - 2 && j % 2 === 0 && j < this.ry - 2) {\n                        let p = new Hexbin(this);\n                        p.bVec.push(this.pts[j][i + 2]);\n                        p.bVec.push(this.pts[j + 1][i + 3]);\n                        p.bVec.push(this.pts[j + 2][i + 3]);\n                        p.bVec.push(this.pts[j + 3][i + 2]);\n                        p.bVec.push(this.pts[j + 2][i + 1]);\n                        p.bVec.push(this.pts[j + 1][i + 1]);\n                        // p.vecs.push(this.pts[j][i+2]);\n                        p.updateCenVec();\n                        p.updatePolygon();\n                        this.listPixel.push(p);\n                    }\n                }\n            }\n            alter = !alter;\n        }\n        // console.log(\"done for grid\")\n        // this.InitGridNeighbor();\n    }\n    public filterWithinR(r: number) {\n        let c = new RVector3((this.v1.x + this.v0.x) * 0.5, (this.v1.y + this.v0.y) * 0.5, 0);\n        let temp: Hexbin[] = [];\n        let i = this.listPixel.length;\n        while (i--) {\n            let cv = getCenterVec(this.listPixel[i].bVec);\n            if (distance(c, cv) < r) {\n                temp.push(this.listPixel[i]);\n            }\n        }\n        this.listPixel = temp;\n    }\n    public filterWithinVecs(vs: RVector3[]) {\n        let temp: Hexbin[] = [];\n        let i = this.listPixel.length;\n        while (i--) {\n            let cv = getCenterVec(this.listPixel[i].bVec);\n            if (isInsideOfVecs(cv, vs)) {\n                temp.push(this.listPixel[i]);\n            }\n        }\n        this.listPixel = temp;\n    }\n    public computeHexOff() {\n        let i = this.listPixel.length;\n        while (i--) {\n            // let cv = getCenterVec(this.listPixel[i].bVec);\n            // this.listPixel[i].vec = cv;\n\n            // /*\n            // let goeCV = this.toMap(cv.x, cv.y);\n            // console.log(goeCV)\n\n            let value = 0;\n            // console.log(this.listPixel[i].bVec)\n\n            // if (CGeometry.appDrawing.graphicApp.appVisCanvas) {\n            // if (CGeometry.appDrawing.graphicApp.appVisCanvas.activeCommands.ex.dataPixelMap !== undefined) {\n\n            // let boundGeoVecs: RVector3[] = [];\n            // for (let j = 0; j < this.listPixel[i].bVec.length; ++j) {\n            //     let geoCVs = this.toMap(this.listPixel[i].bVec[j].x, this.listPixel[i].bVec[j].y);\n            //     boundGeoVecs.push(new RVector3(geoCVs[0], geoCVs[1], 0));\n            // }\n\n            // value += CGeometry.appDrawing.graphicApp.appVisCanvas.activeCommands.ex.dataPixelMap.ForwardPropagation(new RVector3(goeCV[0], goeCV[1], 0), boundGeoVecs);\n            // console.log(value);\n            // }\n\n            // console.log(goeCV);\n            // let scale = MathUtility.GetRandomArbitrary(0.1, 0.6);\n\n            // let d = GeoData.d1000.slice(1, 50);\n            // let value = 0;\n            // for (let k = 0; k < d.length; ++k) {\n            //     // let r = 1; //MathUtility.GetRandomArbitrary(0.5, 20);\n            //     // let c = ColorUtility.HexToCanvasColor('#9400D3', MathUtility.GetRandomArbitrary(0.3, 1));\n            //     // CVPoint.GetPointByGeoPos(d[i][1], d[i][0], r, c)\n\n            //     let dv = CGeometry.GetScreenVecByGeoVec(new RVector3(d[k][1], d[k][0], 0))\n\n            //     if (dv.Distance(cv) < 50) {\n            //         value += 0.1;\n            //     }\n\n            //     // if (isInsideOfVecs(dv, this.listPixel[i].bVec)) {\n            //     //     value += 0.1;\n            //     // }\n            // }\n            this.listPixel[i].temp = value;\n\n            // console.log(this.listPixel[i].bVec)\n            // console.log(value)\n\n            // */\n\n        }\n        i = this.listPixel.length;\n        let minNum = Number.MAX_SAFE_INTEGER;\n        let maxNum = Number.MIN_SAFE_INTEGER;\n        while (i--) {\n            if (minNum > this.listPixel[i].temp) { minNum = this.listPixel[i].temp; }\n            if (maxNum < this.listPixel[i].temp) { maxNum = this.listPixel[i].temp; }\n        }\n\n        i = this.listPixel.length;\n        // while (i--) {\n        //     let cv = getCenterVec(this.listPixel[i].bVec);\n        //     for (let j = 0; j < this.listPixel[i].bVec.length; ++j) {\n        //         let tv = this.listPixel[i].bVec[j];\n        //         let value = remap(this.listPixel[i].temp, minNum, maxNum, 0, 1);\n        //         // let x = ((tv.x - cv.x) * this.offScale) + cv.x;\n        //         // let y = ((tv.y - cv.y) * this.offScale) + cv.y;\n        //         let x = ((tv.x - cv.x) * value) + cv.x;\n        //         let y = ((tv.y - cv.y) * value) + cv.y;\n        //         this.listPixel[i].bVec[j] = new RVector3(x, y, 0);\n        //     }\n        // }\n    }\n    public computeGeoVec() {\n        let i = this.listPixel.length;\n        while (i--) {\n            for (let j = 0; j < this.listPixel[i].bVec.length; ++j) {\n\n                // console.log(this.listPixel[i].bVec[j].x, this.listPixel[i].bVec[j].y)\n\n                let v = this.toMap(this.listPixel[i].bVec[j].x, this.listPixel[i].bVec[j].y);\n                // this.listPixel[i].bVec[j].mPoint = v.clone();\n                this.listPixel[i].bVec[j].lng = v[0]; this.listPixel[i].bVec[j].lat = v[1];\n                this.listPixel[i].updateCenVec();\n            }\n        }\n    }\n    // ...................................................................\n    public render(ctx: CanvasRenderingContext2D) {\n        this.renderBins(ctx);\n        this.updatePre(100, 100);\n        // this.CVisPixels(ctx);\n        this.updatePost();\n\n    }\n    public updateGeoProjection() {\n        for (let i = 0; i < this.pts.length; ++i) {\n            for (let j = 0; j < this.pts[i].length; ++j) {\n                const vec = this.pts[i][j];\n                const sp = this.toMap(vec.x, vec.y);\n                vec.lng = sp[0]; vec.lat = sp[1];\n            }\n        }\n        // this.updatePolygonTurf();\n    }\n    public updateScreenPos() {\n        for (let i = 0; i < this.pts.length; ++i) {\n            for (let j = 0; j < this.pts[i].length; ++j) {\n                const v = this.pts[i][j];\n                const sp = this.toScreen(v.lng, v.lat);\n                v.x = sp[0]; v.y = sp[1];\n            }\n        }\n        // this.cen\n    }\n    public reposition(xOff: number, yOff: number) {\n        for (let i = 0; i < this.pts.length; ++i) {\n            for (let j = 0; j < this.pts[i].length; ++j) {\n                const vec = this.pts[i][j];\n                vec.x += xOff; vec.y += yOff;\n                const sp = this.toMap(vec.x, vec.y);\n                vec.lng = sp[0]; vec.lat = sp[1];\n\n            }\n        }\n        this.computeGeoVec();\n        this.updatePolygonTurf();\n    }\n    public updateActiveHexByBoudnary(boundary: any) {\n        for (let i = 0; i < this.listPixel.length; ++i) {\n            const bin = this.listPixel[i];\n            const p = turf.points([[bin.vec.lng, bin.vec.lat]]);\n            const v = turf.pointsWithinPolygon(p,boundary);\n            // console.log(v)\n            if (v['features'].length === 0) {\n                bin.isActive = false;\n            } else {\n                bin.isActive = true;\n            }\n            \n        }\n    }\n    public renderBins(ctx: CanvasRenderingContext2D) {\n        // console.log(this.listPixel);\n        for (let i = 0; i < this.listPixel.length; ++i) {\n            this.listPixel[i].renderPost(ctx);\n        }\n    }\n    public updatePre(x: number, y: number) {\n        let i = this.listPixel.length;\n        while (i--) {\n            this.listPixel[i].isHover = false;\n            this.listPixel[i].isVisit = false;\n        }\n        i = this.listPixel.length;\n        while (i--) {\n            this.listPixel[i].updateWithMouseInteraction(x, y);\n        }\n    }\n    public updatePost() {\n        // let i = this.listPixel.length;\n        // while (i--) {\n        //     this.listPixel[i].isHover = false;\n        //     this.listPixel[i].isVisit = false;\n        // }\n    }\n    public updatePolygonTurf() {\n        for (let i = 0; i < this.listPixel.length; ++i) {\n            this.listPixel[i].updatePolygon();\n        }\n    }\n}\n\n\nexport class Hexbin {\n    public map: HexMapDynamic;\n    public vec: RVector3;\n    public nPix: Hexbin[] = [];\n    public bVec: RVector3[] = [];\n    public i: number = -1;\n    public j: number = -1;\n    public k: number = -1;\n    public id: number;\n    public color: string;\n\n    public strokeStyle: string;\n    public isVisit: boolean;\n    public isOver: boolean;\n    public data: {};\n    public temp: number;\n    public polygonTurfOriginal: turf.Polygon | any;\n    public isActive: boolean = true;\n\n    constructor(map: HexMapDynamic, v: RVector3 = new RVector3(0, 0, 0), color: string = '#1267B0') {\n        this.map = map;\n        this.vec = v;\n        // this.geoVec = v;\n        this.updateGoeVec();\n        this.nPix = [];\n        this.bVec = [];\n        this.i = -1;\n        this.j = -1;\n        this.k = -1;\n        this.color = color; // ColorUtility.HexToCanvasColor(color, MathUtility.GetRandomArbitrary(0.01, 0.90));\n        // this.strokeStyle = ColorUtility.HexToCanvasColor('#ffffff', MathUtility.GetRandomArbitrary(0.5, 0.90));\n        // this.id = Hexbin.GetID();\n        this.isOver = false;\n        this.isVisit = false;\n\n        this.data = {};\n    }\n    public get isHover() {\n        return this.isOver;\n    }\n    public set isHover(v: boolean) {\n        if (!this.isActive) { return; }\n\n        // console.log(this.nPix.length)\n        if (this.isVisit) { return; }\n        this.isOver = v;\n\n        if (!this.isOver) { return; }\n        for (let i = 0; i < this.nPix.length; ++i) {\n            this.nPix[i].isOver = v;\n            this.nPix[i].isVisit = v;\n        }\n\n    }\n    public updateWithMouseInteraction(x: number, y: number) {\n        if (!this.isActive) { return; }\n\n        // if (CGeometry.appDrawing.graphicApp.ACController.isViewChanging) {\n        this.updateScreenVec();\n        for (let i = 0; i < this.bVec.length; ++i) {\n            //  = CVPoint.GetScreenVec(this.bVec[i].mPoint)\n            // let v = this.map.toScreen(this.bVec[i].lng, this.bVec[i].lat);\n            // this.bVec[i].x = v[0]; this.bVec[i].y = v[1];\n        }\n        // }\n        this.isMouseInside(x, y);\n    }\n    public isMouseInside(x: number, y: number) {\n        if (!this.isActive) { return; }\n\n        if (this.isVisit) { return false; }\n        if (isInsideOfVecs(new RVector3(x, y, 0), this.bVec)) {\n            this.isHover = true; return true;\n        } else {\n            this.isHover = false; return false;\n        }\n    }\n    public renderPost(ctx: CanvasRenderingContext2D) {\n        if (!this.isActive) { return; }\n\n        // console.log(this.bVec)\n        // console.log(this.vec.x, this.vec.y)\n        // \n        // ctx.arc(this.vec.x, this.vec.y, 10, 0, 3.14, false)\n        // ctx.globalAlpha = 1;\n\n        if (this.map.referPoint) {\n            const pts = turf.pointsWithinPolygon(this.map.referPoint, this.polygonTurfOriginal)\n            // console.log(pts['features'].length);\n\n            let col = (pts['features'].length * 0.1);\n            // col = col > 1.0 ? 1.0 : 0.0;\n            // console.log(col)\n\n            ctx.beginPath();\n            ctx.arc(this.vec.x, this.vec.y, 1, 0, 2 * Math.PI, false);\n            ctx.closePath();\n            ctx.fillStyle = `rgba(${col}, 0, 0, 1)`; // ColorUtility.HexToCanvasColor('#ffffff', 0.2); //style.fillColor\n            ctx.fill();\n            ctx.lineWidth = 2\n            ctx.strokeStyle = 'black'\n            // ctx.stroke();\n            // ctx.globalCompositeOperation = 'multiply';\n            // ctx.globalCompositeOperation = COLORBLENDING.MULTIPLY;\n            ctx.lineWidth = 0.5;\n\n            // console.log(this.bVec);\n\n            ctx.beginPath();\n            ctx.moveTo(this.bVec[0].x, this.bVec[0].y);\n            for (let i = 1; i < this.bVec.length; ++i) {\n                // console.log(this.bVec[i].x, this.bVec[i].y)\n                ctx.lineTo(this.bVec[i].x, this.bVec[i].y);\n            }\n            // ctx.moveTo(this.bVec[0].x, this.bVec[0].y);\n            ctx.closePath();\n\n            if (this.isOver) {\n                ctx.fillStyle = `rgba(255, 0, 0, ${col})`;\n            } else {\n                // ctx.fillStyle = this.color; // ColorUtility.HexToCanvasColor(this.c, MathUtility.GetRandomArbitrary(0.1, 0.9));\n                ctx.fillStyle = `rgba(255, 0, 0, ${col})`; // CGeometry.appDrawing.cGeometryRender.themeDrawing.cpolylineStyle.normal.fillColor;\n\n            }\n            ctx.strokeStyle = 'rgba(0, 0, 0, 0.5)';\n\n            ctx.stroke();\n            ctx.fill();\n\n            // ctx.globalCompositeOperation = 'source-over'; // COLORBLENDING.SOURCE_OVER;\n            // this.isCapturedbyPixel = false;\n        }\n    }\n    public updateGoeVec() {\n        let m = this.map.toMap(this.vec.x, this.vec.y);\n        this.vec.lng = m[0]; this.vec.lat = m[1];\n    }\n    public updateScreenVec() {\n        let p = this.map.toScreen(this.vec.lng, this.vec.lat);\n        this.vec.x = p[0]; this.vec.y = p[1];\n    }\n    public updateCenVec() {\n        if (!this.isActive) { return; }\n\n        this.vec = getCenterVec(this.bVec);\n        this.updateScreenVec();\n    }\n    public updatePolygon() {\n        // if (!this.isActive) { return; }\n\n        const pts = [];\n        for (let i = 0; i < this.bVec.length; i++) {\n            pts.push([this.bVec[i].lng, this.bVec[i].lat]);\n        }\n        pts.push([this.bVec[0].lng, this.bVec[0].lat]);\n\n        this.polygonTurfOriginal = turf.polygon([pts]);\n    }\n\n}","\nimport { Scene } from '../../../Scene';\nimport { GeometryBase } from '../Base/GeometryBase';\nimport { RVector3, distance, isInsideOfVecs, isInsideEllipse, TYPE_GEOMETRY } from '../../../lib';\n\nimport { AreaGeometry } from './Geometry';\nimport { Renderer } from './Renderer';\nimport { Transform } from './Transform';\n\nimport { HexMapDynamic } from '../../../lib/util/HexmapDynamic';\n\nimport * as turf from '@turf/turf';\n\nexport class Area extends GeometryBase {\n    public renderer: Renderer;\n    public transform: Transform;\n    public geometry: AreaGeometry;\n\n    public TYPE = TYPE_GEOMETRY.RECT;\n\n    public vec: RVector3;\n\n    public cp: RVector3[] = [];\n\n    public hexmap: HexMapDynamic | undefined = undefined;\n\n    constructor(scene: Scene, lng: number, lat: number, width: number = 400, height: number = 400, TYPE = TYPE_GEOMETRY.RECT) {\n        super(scene);\n\n        this.TYPE = TYPE;\n        const mp = this.scene.common.toScreen(lng, lat);\n\n        this.vec = new RVector3(mp[0], mp[1]);\n        this.geometry = new AreaGeometry(this.vec, width, height);\n\n        this.renderer = new Renderer(this);\n        this.transform = new Transform(this);\n        this.updateGeoProjection();\n\n        // this.initHex();\n    }\n    public initHex() {\n        this.hexmap = new HexMapDynamic(\n            this.geometry.vsRect[0], this.geometry.vsRect[2], 16, 20,\n            this.scene.common.toMap,\n            this.scene.common.toScreen,\n        );\n    }\n    public isInside(x: number, y: number) {\n        const mVec = new RVector3(x, y);\n        this.capturedVecId = -1;\n\n        for (let i = 0; i < this.transform.cVecGhost.length; ++i) {\n            if (distance(this.transform.cVecGhost[i], (mVec)) < 12) {\n                this.capturedVecId = i + 4;\n                this.isHovered = true;\n                return true;\n            }\n        }\n\n        for (let i = 0; i < this.geometry.vsRect.length; ++i) {\n            if (distance(this.geometry.vsRect[i], (mVec)) < 12) {\n                this.capturedVecId = i;\n                this.isHovered = true;\n                return true;\n            }\n        }\n\n\n        if (this.TYPE === TYPE_GEOMETRY.CIRCLE) {\n            if (isInsideEllipse(this.vec, mVec, this.geometry.width * 0.5, this.geometry.height * 0.5)) {\n                this.isHovered = true;\n                return true;\n            }\n        } else {\n            if (isInsideOfVecs(mVec, this.geometry.vsRect)) {\n                this.isHovered = true;\n                return true;\n            }\n        }\n\n        this.isHovered = false;\n        return false;\n    }\n    public translate(x: number, y: number): void {\n        this.transform.translate(x, y);\n    }\n    public update() {\n        if (this.scene.solution.rendererWrapper.mapBoxWrapper.map.isMoving()) {\n            this.updateScreenPos();\n            this.transform.updateGhostVecs();\n        }\n\n    }\n    public shiftType() {\n        if (this.TYPE === TYPE_GEOMETRY.CIRCLE) {\n            this.TYPE = TYPE_GEOMETRY.RECT;\n        } else if (this.TYPE === TYPE_GEOMETRY.RECT) {\n            this.TYPE = TYPE_GEOMETRY.CIRCLE;\n        }\n        this.updateGeoProjection();\n    }\n    public onMouseUp() {\n\n        if (this.isHovered) {\n            this.capturedVecId = -1;\n            this.updateGeoProjection();\n            // if ()\n            // console.log(this.isSelected);\n            if (this.captureNeeded) {\n                this.scene.common.captureScene();\n                this.captureNeeded = false;\n            }\n        }\n    }\n    public onMouseClick() {\n        this.isSelected = !this.isSelected;\n    }\n    public renderPost(ctx: CanvasRenderingContext2D) {\n        this.renderer.renderPost(ctx);\n\n        if (this.hasAnimation) {\n            this.t += 0.2;\n        }\n\n        if (this.hexmap) { \n            this.hexmap.referPoint = this.referPoint;\n            this.hexmap.render(ctx); \n        }\n    }\n    public updateScreenPos() {\n        this.geometry.updateScreen(this.scene.common.toScreen);\n\n        // console.log('screen');\n        if (this.hexmap) {\n            this.hexmap.updateScreenPos();\n        }\n    }\n    public updateScreenPosCircle() {\n        this.geometry.updateScreenPosCircle();\n\n    }\n    public updateGeoProjection() {\n        this.geometry.updateProjection(this.scene.common.toMap);\n\n        // console.log('geo');\n\n        \n\n        this.updatePolygonTurf();\n\n        if (this.hexmap) {\n            this.hexmap.updateGeoProjection();\n        }\n\n\n        this.updateNeeded = true;\n    }\n    public toJson() {\n        return {\n            TYPE: this.TYPE,\n            vs: [{ lng: this.geometry.vsRect[0].lng, lat: this.geometry.vsRect[0].lat }, { lng: this.geometry.vsRect[2].lng, lat: this.geometry.vsRect[2].lat }],\n        }\n    }\n    private updatePolygonTurf() {\n        const pts = [];\n\n        if (this.TYPE === TYPE_GEOMETRY.RECT) {\n            for (let i = 0; i < this.geometry.vsRect.length; i++) {\n                pts.push([this.geometry.vsRect[i].lng, this.geometry.vsRect[i].lat]);\n            }\n            pts.push([this.geometry.vsRect[0].lng, this.geometry.vsRect[0].lat]);\n        } else {\n            for (let i = 0; i < this.geometry.vsCircle.length; i++) {\n                pts.push([this.geometry.vsCircle[i].lng, this.geometry.vsCircle[i].lat]);\n            }\n            pts.push([this.geometry.vsCircle[0].lng, this.geometry.vsCircle[0].lat]);\n        }\n        // console.log(this.polygonTurfOriginal);\n        this.polygonTurfOriginal = turf.polygon([pts]);\n\n\n    }\n    public updateWidthHight(width: number, height: number) {\n        this.geometry.updateWidthHight(width, height);\n    }\n    public toggleHexmap() {\n        if (this.hexmap) {\n            this.hexmap = undefined\n        }else {\n            this.initHex();\n        }\n    }\n}\n","import { RVector3, closestPointOnLine } from '../../../../lib';\n\nexport class AreaPolygonGeometry {\n\n    public vs: RVector3[] = [];\n    public cv: RVector3 = new RVector3(0, 0, 0);\n\n    public v0: RVector3 = new RVector3(Number.MAX_VALUE, Number.MAX_VALUE);\n    public v1: RVector3 = new RVector3(Number.MIN_VALUE, Number.MIN_VALUE);\n\n    constructor() {\n\n    }\n\n    public push(x: number, y: number, lng: number, lat: number) {\n        const v = new RVector3(x, y, 0);\n        v.lat = lat;\n        v.lng = lng;\n        this.vs.push(v);\n        // console.log(this.vs);\n\n    }\n    public removeLast() {\n        this.vs.pop();\n    }\n    public updateScreen(toScreen: (x: number, y: number) => number[]) {\n        // console.log('update screen pos');\n        let sp;\n        for (let i = 0; i < this.vs.length; ++i) {\n            sp = toScreen(this.vs[i].lng, this.vs[i].lat);\n            this.vs[i].x = sp[0];\n            this.vs[i].y = sp[1];\n        }\n        this.updateCenterVec();\n    }\n    private resetBoundary() {\n        this.v0.x = Number.MAX_VALUE; this.v0.y = Number.MAX_VALUE;\n        this.v1.x = Number.MIN_VALUE; this.v1.y = Number.MIN_VALUE;\n    }\n    public updateProjection(toMap: (x: number, y: number) => number[]) {\n        // console.log('update map pos');\n        let mp;\n        for (let i = 0; i < this.vs.length; ++i) {\n            mp = toMap(this.vs[i].x, this.vs[i].y);\n            this.vs[i].lng = mp[0];\n            this.vs[i].lat = mp[1];\n        }\n        this.updateCenterVec();\n    }\n    public updateCenterVec() {\n        this.resetBoundary();\n        let xSum = 0, ySum = 0;\n        for (let i = 0; i < this.vs.length; ++i) {\n            xSum += this.vs[i].x;\n            ySum += this.vs[i].y;\n\n            if (this.v0.x > this.vs[i].x) { this.v0.x = this.vs[i].x; }\n            if (this.v0.y > this.vs[i].y) { this.v0.y = this.vs[i].y; }\n            if (this.v1.x < this.vs[i].x) { this.v1.x = this.vs[i].x; }\n            if (this.v1.y < this.vs[i].y) { this.v1.y = this.vs[i].y; }\n        }\n        this.cv.x = xSum / this.vs.length;\n        this.cv.y = ySum / this.vs.length;\n    }\n    public removeVecByIndex(index: number) {\n        this.vs.splice(index, 1);\n    }\n    public insertVec(x: number, y: number) {\n        const mp = new RVector3(x, y);\n        const sel = { x: 0, y: 0, dis: Number.MAX_VALUE, id: -1 };\n\n        for(let i = 0 ; i < this.vs.length -1; ++i) {\n            const result = closestPointOnLine(mp, this.vs[i], this.vs[1+i]);\n            if (sel.dis > result.dis) {\n                sel.x = result.x; sel.y = result.y; sel.dis = result.dis; sel.id = i;\n            }\n        }\n        const result = closestPointOnLine(mp, this.vs[this.vs.length -1], this.vs[0]);\n        if (sel.dis > result.dis) {\n            sel.x = result.x; sel.y = result.y; sel.dis = result.dis; sel.id = this.vs.length -1;\n        }\n\n        if (sel.dis < 10) {\n            this.vs.splice(sel.id + 1, 0, new RVector3(sel.x, sel.y));\n            // console.log('insertPT');\n            return true;\n        }\n        return false;\n    }\n    public toJson() {\n        const vs = [];\n        for (let i = 0; i < this.vs.length; ++i) {\n            vs.push({ lng: this.vs[i].lng, lat: this.vs[i].lat });\n        }\n        return vs;\n    }\n}","import * as turf from '@turf/turf';\nimport { renderControlPoint, difference, computePathPolygon, LANDUSE_TYPE_MAPPING, getAngleByTwoVectorsRadian, RVector3, normalize } from '../../../../lib';\nimport { AreaPolygon } from '..';\n\n\nexport class Renderer {\n    public host: AreaPolygon;\n    public pathCroppedArea: Path2D\n    constructor(host: AreaPolygon) {\n        this.host = host;\n    }\n    public renderPost(ctx: CanvasRenderingContext2D) {\n        // console.log(this.host.capturedVecId, this.host.isSelected, this.host.isHovered);\n        if (this.host.geometry.vs.length > 0) {\n            this.renderAreaBounding(ctx);\n            this.renderCroppedArea(ctx);\n            this.renderProperties(ctx);\n        }\n\n\n        if (this.host.underConstruction || this.host.isHovered || this.host.isSelected) {\n            renderControlPoint(ctx, this.host.geometry.vs);\n            this.renderDim(ctx);\n            if (this.host.isSelected) {\n                this.renderSelected(ctx);\n            }\n        }\n\n\n        if (this.host.capturedVecId > -1) {\n            ctx.beginPath();\n            ctx.arc(this.host.geometry.vs[this.host.capturedVecId].x, this.host.geometry.vs[this.host.capturedVecId].y, 10, 0, Math.PI * 2.0);\n            ctx.closePath();\n            ctx.fill();\n        }\n\n    }\n    public renderCroppedArea(ctx: CanvasRenderingContext2D) {\n\n        if (this.host.geometry.vs.length < 3) {\n            this.pathCroppedArea = new Path2D();\n            this.pathCroppedArea.moveTo(this.host.geometry.vs[0].x, this.host.geometry.vs[0].y);\n            for (let i = 1; i < this.host.geometry.vs.length; ++i) {\n                this.pathCroppedArea.lineTo(this.host.geometry.vs[i].x, this.host.geometry.vs[i].y);\n            }\n            this.pathCroppedArea.closePath();\n            // console.log(this.host.geometry.vs.length);\n            this.host.updateNeeded = true;\n\n        } else {\n            if (this.host.updateNeeded || this.host.scene.solution.rendererWrapper.mapBoxWrapper.map.isMoving()) {\n                const diff = difference(this.host.polygonTurfOriginal, this.host.scene.polygonsDifference, this.host.scene.ids);\n                this.host.polygonTurfSubtracted = diff;\n                this.pathCroppedArea = computePathPolygon(diff, this.host.scene.common.toScreen);\n                this.host.updateNeeded = false;\n                // console.log('updating');\n            }\n        }\n\n\n        ctx.setLineDash([5, 7]);\n        ctx.lineDashOffset = this.host.t;\n        ctx.lineWidth = 2;\n        ctx.strokeStyle = '#fff';\n\n        const op = 0.2 + Math.sin(this.host.t * 0.1) * 0.09;\n        ctx.fillStyle = `rgba(0, 255, 255, ${op} )`;\n\n        ctx.fill(this.pathCroppedArea, 'evenodd');\n        ctx.stroke(this.pathCroppedArea);\n        ctx.setLineDash([]);\n    }\n\n    public renderSelected(ctx: CanvasRenderingContext2D) {\n        ctx.strokeStyle = 'rgba(255, 255, 255, 1)';\n        ctx.lineWidth = 1;\n\n        const offset = 13 + Math.sin(this.host.t * 0.2);\n        ctx.beginPath();\n        ctx.moveTo(this.host.geometry.v0.x - offset, this.host.geometry.v0.y + offset);\n        ctx.lineTo(this.host.geometry.v0.x - offset, this.host.geometry.v0.y - offset);\n        ctx.lineTo(this.host.geometry.v0.x + offset, this.host.geometry.v0.y - offset);\n\n        ctx.moveTo(this.host.geometry.v1.x + offset, this.host.geometry.v0.y + offset);\n        ctx.lineTo(this.host.geometry.v1.x + offset, this.host.geometry.v0.y - offset);\n        ctx.lineTo(this.host.geometry.v1.x - offset, this.host.geometry.v0.y - offset);\n\n        ctx.moveTo(this.host.geometry.v1.x + offset, this.host.geometry.v1.y - offset);\n        ctx.lineTo(this.host.geometry.v1.x + offset, this.host.geometry.v1.y + offset);\n        ctx.lineTo(this.host.geometry.v1.x - offset, this.host.geometry.v1.y + offset);\n\n        ctx.moveTo(this.host.geometry.v0.x - offset, this.host.geometry.v1.y - offset);\n        ctx.lineTo(this.host.geometry.v0.x - offset, this.host.geometry.v1.y + offset);\n        ctx.lineTo(this.host.geometry.v0.x + offset, this.host.geometry.v1.y + offset);\n\n        ctx.stroke();\n\n        // ctx.beginPath();\n        // ctx.moveTo(this.host.geometry.vec.x, this.host.geometry.vec.y);\n        // ctx.lineTo(this.host.geometry.vsRect[1].x, this.host.geometry.vec.y);\n        // ctx.stroke();\n    }\n    private renderAreaBounding(ctx: CanvasRenderingContext2D) {\n        ctx.beginPath();\n        ctx.moveTo(this.host.geometry.vs[0].x, this.host.geometry.vs[0].y);\n        for (let i = 1; i < this.host.geometry.vs.length; ++i) {\n            ctx.lineTo(this.host.geometry.vs[i].x, this.host.geometry.vs[i].y);\n        }\n        ctx.lineWidth = 1;\n        ctx.strokeStyle = 'rgba(255, 255, 255, 0.4)';\n        ctx.stroke();\n    }\n    private renderProperties(ctx: CanvasRenderingContext2D) {\n        if (this.host.geometry.vs.length < 3) { return; }\n        // console.log(this.host.geometry.vs, this.host.polygonTurfSubtracted)\n        // if (this.host.polygonTurfSubtracted === undefined) { return; }\n\n        const area = turf.convertArea(turf.area(this.host.polygonTurfSubtracted), 'meters', 'miles')\n        // console.log(area)\n        const x = this.host.geometry.v0.x + ((this.host.geometry.v1.x - this.host.geometry.v0.x) * 0.5);\n        const y = this.host.geometry.v0.y;\n\n        ctx.textAlign = 'center';\n        ctx.font = '18px arial';\n        ctx.fillStyle = '#fff';\n        // ctx.globalCompositeOperation = 'source-over';\n        ctx.fillText(`ID: ${this.host.id.split('-')[0]}`, x, y - 90);\n\n        ctx.fillText(`Area in square miles: ${area.toFixed(5)}`, x, y - 60);\n        // console.log(this.host.cp.x, 50 - this.host.cp.y - this.host.geometry.height * 0.5);\n\n        const pts = turf.pointsWithinPolygon(this.host.scene.points, this.host.polygonTurfSubtracted)\n        // console.log(pts);\n        let r = 0, b = 0, other = 0;\n        for (let i = 0; i < pts.features.length; ++i) {\n            if (pts.features[i].properties['landuse'] === 'R') {\n                r += 1;\n            } else if (pts.features[i].properties['landuse'] === 'B') {\n                b += 1;\n            } else {\n                other += 1;\n            }\n        }\n\n        ctx.fillStyle = LANDUSE_TYPE_MAPPING.R.color\n        ctx.fillText(`${LANDUSE_TYPE_MAPPING.R.text}: ${r},`, x - 120, y - 25);\n\n        ctx.fillStyle = LANDUSE_TYPE_MAPPING.B.color\n        ctx.fillText(`${LANDUSE_TYPE_MAPPING.B.text}: ${b},`, x + 28, y - 25);\n\n        ctx.fillStyle = 'rgb(0, 128, 0)';\n        ctx.fillText(`Other: ${other}`, x + 140, y - 25);\n        // console.log(r, b, other)\n\n        // ctx.fillStyle = LANDUSE_TYPE_MAPPING.R.color\n        // ctx.fillText(`${LANDUSE_TYPE_MAPPING.R.text}: ${r},`, this.host.vec.x - 120, this.host.vec.y - 25 - this.host.geometry.height * 0.5);\n\n        // ctx.fillStyle = LANDUSE_TYPE_MAPPING.B.color\n        // ctx.fillText(`${LANDUSE_TYPE_MAPPING.B.text}: ${b},`, this.host.vec.x + 28, this.host.vec.y - 25 - this.host.geometry.height * 0.5);\n\n        // ctx.fillStyle = 'rgb(0, 128, 0)';\n        // ctx.fillText(`Other: ${other}`, this.host.vec.x + 140, this.host.vec.y - 25 - this.host.geometry.height * 0.5);\n    }\n    private renderDim(ctx: CanvasRenderingContext2D) {\n        ctx.textAlign = 'center';\n        ctx.font = '14px arial';\n        ctx.fillStyle = '#fff';\n\n        const vs = this.host.geometry.vs;\n\n        let v0 = new RVector3(1, 0, 0);\n\n        for (let i = 0; i < vs.length - 1; ++i) {\n\n            let line = turf.lineString([[vs[i].lng, vs[i].lat], [vs[1 + i].lng, vs[1 + i].lat]]);\n            let length = turf.length(line, { units: 'miles' });\n            let x = vs[i].x + ((vs[i + 1].x - vs[i].x) * 0.5);\n            let y = vs[i].y + ((vs[i + 1].y - vs[i].y) * 0.5);\n\n            let v1 = normalize(new RVector3(vs[i].x - vs[i + 1].x, vs[i].y - vs[i + 1].y, 0));\n            let deg = getAngleByTwoVectorsRadian(v0, v1);\n\n            if (vs[i].y < vs[i + 1].y) { deg *= -1; }\n            // console.log(deg)\n\n            ctx.save();\n            ctx.translate(x, y);\n            ctx.rotate(deg);\n            ctx.fillText(`${length.toFixed(5)} mi`, 0, 0);\n            ctx.restore();\n        }\n\n        if (vs.length > 2) {\n            let line = turf.lineString([[vs[vs.length - 1].lng, vs[vs.length - 1].lat], [vs[0].lng, vs[0].lat]]);\n            let length = turf.length(line, { units: 'miles' });\n            let x = vs[vs.length - 1].x + ((vs[0].x - vs[vs.length - 1].x) * 0.5);\n            let y = vs[vs.length - 1].y + ((vs[0].y - vs[vs.length - 1].y) * 0.5);\n\n            let v1 = normalize(new RVector3(vs[vs.length - 1].x - vs[0].x, vs[vs.length - 1].y - vs[0].y, 0));\n            let deg = getAngleByTwoVectorsRadian(v0, v1);\n            \n            if (vs[vs.length - 1].y < vs[0].y) { deg *= -1; }\n\n            ctx.save();\n            ctx.translate(x, y);\n            ctx.rotate(deg);\n            ctx.fillText(`${length.toFixed(5)} mi`, 0, 0);\n            ctx.restore();\n        }\n    }\n}","import * as turf from '@turf/turf';\n\nimport { AreaPolygon } from '..';\n\n\nexport class Transform {\n    public host: AreaPolygon;\n    public pathCroppedArea: Path2D\n    constructor(host: AreaPolygon) {\n        this.host = host;\n    }\n    public translate(x: number, y: number): void {\n        this.host.captureNeeded = true;\n\n        const preX = this.host.scene.solution.activeCommander.mp[0] - this.host.scene.solution.activeCommander.mpPre[0];\n        const preY = this.host.scene.solution.activeCommander.mp[1] - this.host.scene.solution.activeCommander.mpPre[1];\n\n        if (this.host.capturedVecId > -1) {\n\n            // if (this.host.capturedVecId < this.host.geometry.vsRect.length) {\n            this.host.geometry.vs[this.host.capturedVecId].x += preX;\n            this.host.geometry.vs[this.host.capturedVecId].y += preY;\n            // }\n\n\n            this.host.updateGeoProjection();\n            return;\n        }\n\n        // this.host.vec.x += preX;\n        // this.host.vec.y += preY;\n        for (let i = 0; i < this.host.geometry.vs.length; ++i) {\n            this.host.geometry.vs[i].x += preX;\n            this.host.geometry.vs[i].y += preY;\n        }\n\n        this.host.updateGeoProjection();\n    }\n}","import * as turf from '@turf/turf';\n\nimport { TYPE_GEOMETRY } from '../../../lib';\nimport { Scene } from '../../../Scene';\nimport { GeometryBase } from '../Base/GeometryBase';\nimport { AreaPolygonGeometry } from './Geometry';\nimport { Renderer } from './Renderer';\nimport { Transform } from './Transform';\nimport { isInsideOfVecs, distance, RVector3 } from '../../../lib';\n\nexport class AreaPolygon extends GeometryBase {\n    public renderer: Renderer;\n    public transform: Transform;\n    public geometry: AreaPolygonGeometry;\n\n    public underConstruction = true;\n    constructor(scene: Scene, vs: RVector3[] | undefined = undefined) {\n        super(scene)\n\n        this.TYPE = TYPE_GEOMETRY.POLYGON;\n        this.geometry = new AreaPolygonGeometry();\n        this.renderer = new Renderer(this);\n        this.transform = new Transform(this);\n\n        if (vs !== undefined) {\n            this.fromJson(vs);\n        }\n    }\n    public renderPost(ctx: CanvasRenderingContext2D) {\n        this.renderer.renderPost(ctx);\n\n        if (this.hasAnimation) {\n            this.t += 0.2;\n        }\n    }\n    public isInside(x: number, y: number) {\n        const mVec = new RVector3(x, y);\n        this.capturedVecId = -1;\n\n        for (let i = 0; i < this.geometry.vs.length; ++i) {\n            if (distance(this.geometry.vs[i], (mVec)) < 12) {\n                this.capturedVecId = i;\n                this.isHovered = true;\n                return true;\n            }\n        }\n\n        if (isInsideOfVecs(mVec, this.geometry.vs)) {\n            this.isHovered = true;\n            return true;\n        }\n\n        this.isHovered = false;\n        return false;\n    }\n    public translate(x: number, y: number): void {\n        this.transform.translate(x, y);\n    }\n    public update(): void {\n        if (this.scene.solution.rendererWrapper.mapBoxWrapper.map.isMoving()) {\n            this.geometry.updateScreen(this.scene.common.toScreen);\n        }\n    }\n    public onMouseClick(e) {\n\n        if (this.underConstruction) {\n            if (this.geometry.vs.length === 0) {\n                this.geometry.push(e.point.x, e.point.y, e.lngLat.lng, e.lngLat.lat);\n                this.geometry.push(e.point.x, e.point.y, e.lngLat.lng, e.lngLat.lat);\n            } else {\n                this.geometry.push(e.point.x, e.point.y, e.lngLat.lng, e.lngLat.lat);\n            }\n            if (this.geometry.vs.length > 2) {\n                this.geometry.updateCenterVec();\n                this.updatePolygonTurf();\n            }\n        } else {\n\n            // console.log(this.capturedVecId);\n            if (this.capturedVecId > -1) {\n                this.isSelected = true;\n                return;\n            }\n\n            // if (this.isHovered) {\n                // this.isSelected = true;\n            if (this.insertPt(e.point.x, e.point.y)) {\n                this.isSelected = true;\n                return;\n            }\n            //     return;\n            // }\n\n            this.isSelected = !this.isSelected;\n\n\n        }\n    }\n    public insertPt(x: number, y: number) {\n        return this.geometry.insertVec(x, y);\n    }\n    public updateGhostPos(x: number, y: number) {\n        if (this.geometry.vs.length === 0) { return; }\n        this.geometry.vs[this.geometry.vs.length - 1].x = x;\n        this.geometry.vs[this.geometry.vs.length - 1].y = y;\n\n        const mp = this.scene.common.toMap(x, y);\n        this.geometry.vs[this.geometry.vs.length - 1].lng = mp[0];\n        this.geometry.vs[this.geometry.vs.length - 1].lat = mp[1];\n\n        if (this.geometry.vs.length > 2) {\n            this.geometry.updateCenterVec();\n            this.updatePolygonTurf();\n        }\n    }\n    public onMouseDoubleClick(e) {\n        this.removeVertexLastVertex();\n        this.removeVertexLastVertex();\n        this.updateGeoProjection();\n        this.underConstruction = false;\n        this.scene.captured = undefined;\n        this.scene.common.captureScene();\n    }\n    public onMouseUp() {\n\n        if (this.isHovered) {\n            this.capturedVecId = -1;\n            this.updateGeoProjection();\n            // if ()\n            // console.log(this.isSelected);\n            if (this.captureNeeded) {\n                this.scene.common.captureScene();\n                this.captureNeeded = false;\n            }\n        }\n    }\n\n    public removeVertexLastVertex(): void {\n        this.geometry.removeLast();\n        if (this.geometry.vs.length < 2) {\n            this.remove();\n        }\n        // console.log(this.geometry.cv);\n        this.updatePolygonTurf()\n    }\n    public updateGeoProjection() {\n        this.geometry.updateProjection(this.scene.common.toMap);\n        this.updatePolygonTurf();\n\n    }\n    private updatePolygonTurf() {\n        if (this.geometry.vs.length < 3) { return; }\n        const pts = [];\n        for (let i = 0; i < this.geometry.vs.length; i++) {\n            pts.push([this.geometry.vs[i].lng, this.geometry.vs[i].lat]);\n        }\n        pts.push([this.geometry.vs[0].lng, this.geometry.vs[0].lat]);\n\n\n        this.polygonTurfOriginal = turf.polygon([pts]);\n        this.updateNeeded = true;\n        // console.log('updatePolygonTurf')\n    }\n    public toJson() {\n        return {\n            TYPE: this.TYPE,\n            vs: this.geometry.toJson(),\n        };\n    }\n    public fromJson(vs: RVector3[]) {\n        for (let i = 0; i < vs.length; ++i) {\n            const sp = this.scene.common.toScreen(vs[i].lng, vs[i].lat);\n            const v = new RVector3(sp[0], sp[1], 0);\n            v.lng = vs[i].lng;\n            v.lat = vs[i].lat;\n            this.geometry.vs.push(v);\n        }\n        this.updatePolygonTurf();\n    }\n    public remove(): void {\n        if (this.capturedVecId > -1) {\n            this.geometry.removeVecByIndex(this.capturedVecId);\n            this.updateGeoProjection();\n            this.capturedVecId = -1;\n            return;\n        }\n        this.scene.remove(this);\n    }\n}","import { getJSONFromURL } from 'njscore';\nimport { GeometryBase } from '../Geometry/GeometryCanvas/Base/GeometryBase';\nimport { Area, AreaPolygon } from '../Geometry/GeometryCanvas';\nimport { TYPE_GEOMETRY } from '../lib'\nimport { Solution } from '../';\n\nexport class ACCommon {\n    public solution: Solution;\n    constructor(solution: Solution) {\n        this.solution = solution;\n    }\n    public renderForceWithUpdate() {\n        this.solution.rendererWrapper.renderer.renderForce();\n\n        for (let i = 0; i < this.solution.scene.areas.length; ++i) {\n            this.solution.scene.areas[i].updateNeeded = true;\n        }\n    }\n    public downloadScreen() {\n        this.solution.rendererWrapper.downloadScreen();\n    }\n    public enablePan() {\n        this.solution.rendererWrapper.mapBoxWrapper.map.dragPan.enable();\n    }\n    public disablePan() {\n        this.solution.rendererWrapper.mapBoxWrapper.map.dragPan.disable();\n    }\n    public zoom = (z: number) => {\n        return this.solution.rendererWrapper.mapBoxWrapper.zoom(z)\n    }\n    public flyTo = (lng: number, lat: number) => {\n        return this.solution.rendererWrapper.mapBoxWrapper.flyTo(lng, lat)\n    }\n    public center = (lng: number = -99.292649, lat: number = 39.043903) => {\n        return this.solution.rendererWrapper.mapBoxWrapper.center(lng, lat);\n    }\n    public toMap = (x: number, y: number) => {\n        return this.solution.rendererWrapper.mapBoxWrapper.toMap(x, y);\n    }\n    public toScreen = (lon: number, lat: number) => {\n        return this.solution.rendererWrapper.mapBoxWrapper.toScreen(lon, lat);\n    }\n    public async loadDataLocal(path = 'funded_census_blocks.geojson') {\n        return getJSONFromURL(process.env.PUBLIC_URL + '/static/dataDummyReady/' + path);\n    }\n\n    public addScatterLayer(data: any) {\n        return this.solution.rendererWrapper.deckGL.addScatterLayer(data);\n    }\n    public addArcLayer(data: any) {\n        return this.solution.rendererWrapper.deckGL.addArcLayer(data);\n    }\n    public addPolygonLayer(data: any, onClick: (info, event) => void) {\n        return this.solution.rendererWrapper.deckGL.addPolygonLayer(data, onClick);\n    }\n    public addShape(type = TYPE_GEOMETRY.RECT) {\n        this.renderForce();\n        if (type === TYPE_GEOMETRY.POLYGON) {\n            this.solution.scene.captured = new AreaPolygon(this.solution.scene);\n            this.solution.activeCommander.drawMode = true;\n\n        } else {\n            const mp = this.toMap(this.solution.rendererWrapper.renderer.canvas.width * 0.5, this.solution.rendererWrapper.renderer.canvas.height * 0.5);\n            new Area(this.solution.scene, mp[0], mp[1], 200, 200);\n        }\n        this.captureScene();\n    }\n    public shiftShapeType() {\n        if (this.solution.scene.areas.length > 0) {\n\n            for (let i = 0; i < this.solution.scene.areas.length; ++i) {\n                if (this.solution.scene.areas[i].TYPE !== TYPE_GEOMETRY.POLYGON && this.solution.scene.areas[i].isSelected) {\n                    this.solution.scene.areas[i].shiftType();\n                }\n            }\n\n            this.captureScene();\n        }\n    }\n    public toggleAnimation() {\n        // this.solution.scene.captured.hasAnimation = !this.solution.scene.captured.hasAnimation;\n        for (let i = 0; i < this.solution.scene.areas.length; ++i) {\n            if (this.solution.scene.areas[i].isSelected) {\n                this.solution.scene.areas[i].hasAnimation = !this.solution.scene.areas[i].hasAnimation;\n            }\n        }\n    }\n    public deSelectedAll() {\n        for (let i = 0; i < this.solution.scene.areas.length; ++i) {\n            this.solution.scene.areas[i].isSelected = false;\n        }\n    }\n    public removeSelected() {\n        for (let i = 0; i < this.solution.scene.areas.length; ++i) {\n            if (this.solution.scene.areas[i].isSelected) {\n                this.solution.scene.areas[i].remove();\n            }\n        }\n    }\n    public checkHoverArea(x: number, y: number): GeometryBase | undefined {\n\n        for (let i = 0; i < this.solution.scene.areas.length; ++i) {\n            if (this.solution.scene.areas[i].isInside(x, y)) {\n                return this.solution.scene.areas[i];\n            }\n        }\n        return undefined;\n    }\n    public pickObject(obj: any) {\n        // console.log('index', obj.index);\n        // console.log(obj);\n    }\n    public getViewState() {\n        return this.solution.rendererWrapper.mapBoxWrapper.getViewState();\n    }\n    public getData() {\n        let areas = [];\n        //  console.log(this.solution.scene.areas);\n\n        for (let i = 0; i < this.solution.scene.areas.length; ++i) {\n            areas.push(this.solution.scene.areas[i].toJson())\n        }\n\n        return {\n            areas: areas,\n            extent: this.getViewState()\n        }\n    }\n    public captureScene() {\n        return this.solution.scene.stateManager.captureState();\n    }\n    public onExtentDone() {\n        // this.captureScene();\n    }\n    public renderForce() {\n        this.solution.rendererWrapper.renderer.renderForce();\n    }\n    public undo() {\n        this.renderForce();\n        return this.solution.scene.stateManager.undo();\n    }\n    public redo() {\n        this.renderForce();\n        return this.solution.scene.stateManager.redo();\n    }\n    public populateArea(data: any) {\n        this.solution.scene.areas = []\n\n        for (let i = 0; i < data.areas.length; ++i) {\n\n            const area = data.areas[i];\n            if (area.TYPE !== TYPE_GEOMETRY.POLYGON) {\n                const p0 = this.toScreen(area.vs[0].lng, area.vs[0].lat);\n                const p1 = this.toScreen(area.vs[1].lng, area.vs[1].lat);\n\n                const width = Math.abs(p1[0] - p0[0]);\n                const height = Math.abs(p1[1] - p0[1]);\n\n                // // console.log(width, height)\n\n                const lng = (area.vs[0].lng + area.vs[1].lng) * 0.5;\n                const lat = (area.vs[0].lat + area.vs[1].lat) * 0.5;\n\n                new Area(this.solution.scene, lng, lat, width, height, TYPE_GEOMETRY[area.TYPE]);\n            } else {\n                const pg = new AreaPolygon(this.solution.scene, area.vs);\n                pg.underConstruction = false;\n\n            }\n        }\n        this.solution.activeCommander.drawMode = false;\n        this.solution.scene.captured = undefined;\n\n        if (data.extent) {\n            this.center(data.extent.center['lng'], data.extent.center['lat']);\n            this.zoom(data.extent.zoom);\n        }\n        // console.log(this);\n    }\n    public toggleHexmap() {\n        for(let i = 0 ; i < this.solution.scene.areas.length; ++i) {\n            this.solution.scene.areas[i].toggleHexmap();\n        }\n    }\n}","import { Solution } from '../'\n\nexport class ActiveCommander {\n    public solution: Solution;\n    public mp = [0, 0, 0, 0];\n    public mpPre = [0, 0, 0, 0];\n    public drawMode: boolean = false;\n    constructor(solution: Solution) {\n        this.solution = solution;\n    }\n    private updateMousePos(e) {\n        this.mp[0] = e.point.x;\n        this.mp[1] = e.point.y;\n        this.mp[2] = e.lngLat.lng;\n        this.mp[3] = e.lngLat.lat;\n    }\n    public updateMousePrePos() {\n        this.mpPre[0] = this.mp[0];\n        this.mpPre[1] = this.mp[1];\n        this.mpPre[2] = this.mp[2];\n        this.mpPre[3] = this.mp[3];\n    }\n    public mouseDown = (e) => {\n        this.solution.common.renderForce();\n        this.updateMousePos(e);\n\n        if (this.drawMode) { return; }\n\n        this.solution.scene.captured = this.solution.common.checkHoverArea(this.mp[0], this.mp[1]);\n\n        if (this.solution.scene.captured) {\n            this.solution.common.disablePan();\n        }\n        // this.solution.scene.captured = this.solution.scene.areas;\n\n        // }\n        // TODO\n    }\n    public mouseUp = (e) => {\n        this.updateMousePos(e);\n        if (this.drawMode) { return; }\n\n        this.solution.common.enablePan();\n        this.solution.scene.captured?.onMouseUp();\n        this.solution.scene.captured = undefined;\n\n        // TODO\n    }\n    public mouseDClick = (e) => {\n        this.drawMode = false;\n        this.solution.scene.captured?.onMouseDoubleClick(e);\n        this.solution.rendererWrapper.mapBoxWrapper.map.doubleClickZoom.enable();\n\n    }\n    public mouseDrag = (e) => {\n        this.solution.common.renderForce();\n        this.updateMousePos(e);\n        if (this.solution.scene.captured) {\n            this.solution.scene.captured.translate(e.point.x, e.point.y);\n        }\n        // TODO\n        this.updateMousePrePos();\n    }\n    public mouseClick = (e) => {\n        this.updateMousePos(e);\n        if (this.drawMode) {\n            this.solution.scene.captured.onMouseClick(e);\n            this.solution.rendererWrapper.mapBoxWrapper.map.doubleClickZoom.disable();\n            // console.log('d', this.solution.rendererWrapper.mapBoxWrapper.map.doubleClickZoom.isEnabled());\n            return;\n        }\n\n\n        this.solution.scene.captured = this.solution.common.checkHoverArea(this.mp[0], this.mp[1]);\n\n        if (this.solution.scene.captured) {\n            // this.solution.scene.captured.isSelected = !this.solution.scene.captured.isSelected;\n            this.solution.scene.captured.onMouseClick(e);\n        } else {\n            this.solution.common.deSelectedAll();\n        }\n        // console.log(this.solution.scene.captured);\n        // TODO\n        // console.log(e);\n        // console.log(e['lngLat']);\n        this.solution.rendererWrapper.renderer.pts.push([e['lngLat']['lng'], e['lngLat']['lat']])\n        // this.renderer.pts.push([e.point.x, e.point.y])\n    }\n    public mouseMove = (e) => {\n        this.solution.common.renderForce();\n        this.updateMousePos(e);\n        if (this.drawMode && this.solution.scene.captured) {\n            this.solution.scene.captured.updateGhostPos(this.mp[0], this.mp[1]);\n\n            return;\n        }\n\n        this.solution.common.checkHoverArea(this.mp[0], this.mp[1]);\n\n        // console.log(e)\n\n        // TODO\n        this.updateMousePrePos();\n    }\n    public keyDown(k: KeyboardEvent) {\n        // TODO\n        // console.log(k);\n        switch (k.key) {\n            case 'Backspace':\n\n                if (this.drawMode && this.solution.scene.captured) {\n                    this.solution.scene.captured.removeVertexLastVertex();\n                    return;\n                }\n\n                this.solution.common.removeSelected();\n                this.solution.common.captureScene();\n                break;\n\n            default:\n                break;\n        }\n        this.solution.common.renderForce();\n    }\n}","import mapboxgl from \"mapbox-gl\";\r\nimport { RendererWrapper } from '../';\r\n\r\nimport { downloadImage } from '../../lib';\r\n\r\nexport class MapboxGLWrapper {\r\n    public rendererWrapper: RendererWrapper;\r\n    public map: mapboxgl.Map;\r\n    public canvasMapbox;\r\n    private isPressed: boolean = false;\r\n    constructor(rendererWrapper: RendererWrapper) {\r\n        this.rendererWrapper = rendererWrapper;\r\n\r\n        this.initMap(rendererWrapper.solution.divHost.id);\r\n    }\r\n    private initMap(id: string) {\r\n        // https://account.mapbox.com\r\n        mapboxgl.accessToken = process.env.REACT_APP_MAPBOX;\r\n        this.map = new mapboxgl.Map({\r\n            preserveDrawingBuffer: true,\r\n            container: id,\r\n            zoom: 3,\r\n            // pitch: 30,\r\n            // minZoom: 10,\r\n            // center: [-74.5, 40],\r\n            center: [-77.430815, 37.801833],\r\n            doubleClickZoom: false,\r\n            style: 'mapbox://styles/mapbox/dark-v10' // 'mapbox://styles/mapbox/streets-v11'\r\n\r\n        });\r\n        this.map.doubleClickZoom.disable();\r\n        this.map.dragRotate.disable();\r\n\r\n        this.map.on('moveend', () => { this.rendererWrapper.solution.common.onExtentDone(); });\r\n        this.map.on('zoom', () => { this.rendererWrapper.solution.common.renderForce(); });\r\n        this.map.on('click', 'polygon', (e: any) => { this.rendererWrapper.solution.common.pickObject(e) });\r\n\r\n        // https://docs.mapbox.com/mapbox-gl-js/api/events/#mapmouseevent#type\r\n        this.map.on('mousemove', (e: mapboxgl.MapMouseEvent) => {\r\n            if (this.isPressed) {\r\n                this.mouseDrag(e);\r\n            } else {\r\n                this.mouseMove(e);\r\n            }\r\n        });\r\n        this.map.on('click', (e: mapboxgl.MapMouseEvent) => { this.mouseClick(e); });\r\n        this.map.on('mousedown', (e: mapboxgl.MapMouseEvent) => { this.isPressed = true; this.mouseDown(e); });\r\n        this.map.on('dblclick', (e: mapboxgl.MapMouseEvent) => { this.mouseDClick(e); });\r\n        this.map.on('mouseup', (e: mapboxgl.MapMouseEvent) => { this.isPressed = false; this.mouseUp(e); });\r\n        window.addEventListener('keydown', (k) => { this.keyDown(k) });\r\n\r\n        let div = document.getElementsByClassName('mapboxgl-canvas')[0] as HTMLDivElement;\r\n        div.style.position = 'absolute';\r\n\r\n        div = document.getElementsByClassName('mapboxgl-control-container')[0] as HTMLDivElement;\r\n        div.style.display = 'none';\r\n\r\n        this.map.on('load', () => { this.initPost(); });\r\n    }\r\n    public initPost() {\r\n        this.rendererWrapper.initPost();\r\n        this.canvasMapbox = this.map.getCanvas();\r\n    }\r\n\r\n    public initCustomCanvas() {\r\n        this.rendererWrapper.renderer.canvas.width = this.canvasMapbox.width;\r\n        this.rendererWrapper.renderer.canvas.height = this.canvasMapbox.height;\r\n\r\n        this.rendererWrapper.renderer.canvas.style.display = 'none';\r\n\r\n        const bound: any = this.map.getBounds();\r\n        // console.log(bound);\r\n\r\n        this.map.addSource('canvas-source', {\r\n            type: 'canvas',\r\n            canvas: this.rendererWrapper.renderer.canvas,\r\n            coordinates: [\r\n\r\n                // [ 180, 90],\r\n                // [ 180, -90],\r\n                // [ -180, -90], \r\n                // [ -180, 90]\r\n\r\n\r\n                // [bound._sw[0], bound._sw[1]],\r\n                // [bound._sw[0], bound._ne[1]],\r\n                // [bound._ne[0], bound._ne[1]],\r\n                // [bound._ne[0], bound._sw[1]],\r\n\r\n                [-125.618336, 48.944262],\r\n                [-125.618336, 24.786775],\r\n                [-65.591812, 24.786775],\r\n                [-65.591812, 48.944262]\r\n\r\n                // [91.4461, 21.5006],\r\n                // [100.3541, 21.5006],\r\n                // [100.3541, 13.9706],\r\n                // [91.4461, 13.9706]\r\n            ],\r\n            // Set to true if the canvas source is animated. If the canvas is static, animate should be set to false to improve performance.\r\n            animate: true\r\n        });\r\n\r\n        this.map.addLayer({\r\n            id: 'canvas-layer',\r\n            type: 'raster',\r\n            source: 'canvas-source'\r\n        });\r\n\r\n    }\r\n    public zoom = (z: number) => {\r\n        // this.map.setZoom(z);\r\n        // return this.map.zoomTo(z, {animate:true} )\r\n        return this.map.zoomTo(z)\r\n    }\r\n    public flyTo = (lng: number, lat: number) => {\r\n        return this.map.flyTo({\r\n            center: [lng, lat],\r\n            // duration: 1200, // Animate over 12 seconds\r\n            // essential: true\r\n        });\r\n    }\r\n    public center = (lng: number = -99.292649, lat: number = 39.043903) => {\r\n        // const v = new mapboxgl.LngLat(lng, lat);\r\n        // console.log(v);\r\n        return this.map.setCenter({ lat, lng })\r\n    }\r\n    public toMap = (x: number, y: number) => {\r\n        const p = this.map.unproject({ x, y } as any)\r\n        return [p.lng, p.lat];\r\n    }\r\n    public toScreen = (lon: number, lat: number) => {\r\n        try {\r\n            const p = this.map.project([lon, lat])\r\n            return [p.x, p.y];\r\n        } catch (error) {\r\n            // console.error(error)\r\n        }\r\n        return [-1, -1];\r\n    }\r\n    public downloadImage() {\r\n        const canvasMapbox = this.map.getCanvas();\r\n        return downloadImage(canvasMapbox, this.rendererWrapper.renderer.canvas);\r\n    }\r\n    public getViewState() {\r\n        const center = this.map.getCenter();\r\n        // console.log(center);\r\n        return {\r\n            zoom: this.map.getZoom(),\r\n            center: center,\r\n        };\r\n    }\r\n    public mouseDown = (e) => { }\r\n    public mouseUp = (e) => { }\r\n    public mouseMove = (e) => { }\r\n    public mouseDrag = (e) => { }\r\n    public mouseClick = (e) => { }\r\n    public mouseDClick = (e) => { }\r\n    public keyDown = (e) => { }\r\n}\r\n","export * from './util/ColorUtil';\nexport * from './util/VectorUtil';\nexport * from './util/Math'\nexport * from './util/TurfUtil'\nexport * from './DrawingPreest';\nexport * from './constant';\nexport * from './SceneManager';\n\nexport const downloadImage = (canvasMapbox, customCanvas, fileName = 'map.png') => {\n    let canvasOut = document.createElement(\"canvas\");\n    canvasOut.width = canvasMapbox.width;\n    canvasOut.height = canvasMapbox.height;\n    let context = canvasOut.getContext(\"2d\");\n\n    // context.globalAlpha = 1.0;\n    context.globalAlpha = 1.0;\n    // context.drawImage(this.deckLayer.deck.canvas, 0, 0);\n    context.drawImage(canvasMapbox, 0, 0);\n    // context.drawImage(this.solution.renderer.canvas, 0, 0, canvasMapbox.width, canvasMapbox.height);\n    context.drawImage(customCanvas, 0, 0, canvasMapbox.width, canvasMapbox.height);\n\n    let img = new Image();\n    img.width = canvasMapbox.width;\n    img.height = canvasMapbox.height;\n    img.src = canvasOut.toDataURL();\n\n    let link = document.createElement('a');\n    link.download = fileName;\n    link.href = canvasOut.toDataURL();\n    link.click();    \n};\n\n","import { MapboxLayer } from '@deck.gl/mapbox';\nimport { ScatterplotLayer, ArcLayer, PolygonLayer } from '@deck.gl/layers';\n\nimport { RendererWrapper } from '../';\n\nexport class DeckGL {\n    public rendererWrapper: RendererWrapper;\n    public map: mapboxgl.Map;\n    public layers: MapboxLayer[] = [];\n    constructor(rendererWrapper: RendererWrapper) {\n        this.rendererWrapper = rendererWrapper;\n        this.map = this.rendererWrapper.mapBoxWrapper.map;\n    }\n    public initPost() {\n        // TODO:\n    }\n    // [ {position: [-74.5, 40], size: 10000}, ]\n    public addScatterLayer(data: any) {\n        const deckLayer = new MapboxLayer({\n            id: `scatter-${this.layers.length}`,\n            type: ScatterplotLayer,\n            data: data,\n            // @ts-ignore\n            getPosition: d => d.position,\n            getRadius: d => d.size,\n            getFillColor: d => {\n                if (d.color !== undefined) {\n                    return d.color;\n                } else {\n                    return [255, 255, 0];\n                }\n            },\n            getLineColor: d => [255, 255, 255],\n            onClick: (info, event) => console.log('Clicked:', info, event)\n        });\n        this.addLayer(deckLayer, 'waterway-label');\n    }\n    // https://deck.gl/docs/api-reference/layers/polygon-layer\n    public addPolygonLayer(data: any, onClick: (info, event) => void) {\n        const deckLayer = new MapboxLayer({\n            id: `polygon-${this.layers.length}`,\n            type: PolygonLayer,\n            data: data,\n            // @ts-ignore\n            pickable: true,\n            // @ts-ignore\n            stroked: true,\n            filled: true,\n            wireframe: true,\n            lineWidthMinPixels: 1,\n            getPolygon: d => d.contour,\n            getElevation: d => 1, //d.population / d.area / 10,\n            getFillColor: d => d.color, // [100, 100, 100], // [d.population / d.area / 60, 140, 0],\n            getLineColor: d => [0, 0, 0],\n            getLineWidth: 1,\n            onClick: (info, event) => {\n                // console.log('Clicked:', info, event)\n                // console.log(info.index)\n                onClick(info, event);\n            }\n        });\n        this.addLayer(deckLayer, 'waterway-label');\n    }\n    public addArcLayer(data: any) {\n        const deckLayer = new MapboxLayer({\n            id: `arc-${this.layers.length}`,\n            type: ArcLayer,\n            data: data,\n            // @ts-ignore\n            getSourcePosition: d => d.pickup,\n            getTargetPosition: d => d.dropoff,\n            getSourceColor: d => [255, 128, 0],\n            getTargetColor: d => [0, 128, 255],\n            strokeWidth: 5\n        });\n        this.addLayer(deckLayer, 'waterway-label');\n    }\n    private addLayer(deckLayer: MapboxLayer, label: string = 'waterway-label') {\n        this.map.addLayer(deckLayer, label);\n        this.layers.push(deckLayer)\n    }\n    public pick() {\n        // this.map.getob\n    }\n}","export class Deltatime {\n    public now: number;\n    public delta: number;\n    public frameRate: number;\n\n    private last: number = 0;\n    private timeLastRender: number;\n    msLoop: number;\n    constructor() {\n        //\n    }\n    public UpdateFPS() {\n        this.now = window.performance.now();\n        this.msLoop = this.now - this.last;\n        this.last = this.now;\n\n        this.delta = this.delta + Math.min(1, (this.msLoop) / 1000);\n\n        if (this.delta > this.frameRate) { this.delta = this.delta - this.frameRate; }\n\n        this.delta = (Date.now() - this.timeLastRender) / 1000;\n        this.timeLastRender = Date.now();\n        this.frameRate = (1 / this.delta);\n\n    }\n    public get dt() {\n        return this.delta;\n    }\n}\n\nexport class RendererCanvasDynamicLight {\n    public divHost: HTMLDivElement;\n    public canvas: HTMLCanvasElement;\n    public ctx: CanvasRenderingContext2D;\n    public isDown: boolean = false;\n    public debugMode: boolean = false;\n    public isStatic: boolean = false;\n    public log: string = '';\n\n    private prevent: boolean = false;\n    private animation: boolean = false;\n    private delay: number = 90;\n\n    private frameNum = 1;\n    private timer: NodeJS.Timer | number;\n    private isDrag: boolean = false;\n\n    deltaTime: Deltatime;\n\n    constructor(div: HTMLDivElement) {\n        this.divHost = div;\n        this.deltaTime = new Deltatime();\n        const bounding = this.divHost.getBoundingClientRect();\n        this.canvas = document.createElement('canvas') as HTMLCanvasElement;\n        // this.canvas.style.position = 'absolute';\n        this.canvas.width = bounding.width;\n        this.canvas.height = bounding.height;\n        this.divHost.appendChild(this.canvas);\n        this.ctx = this.canvas.getContext('2d') as CanvasRenderingContext2D;\n        this.canvas.onclick = (e: MouseEvent) => {\n            this.timer = setTimeout(() => {\n                if (!this.prevent) {\n                    this.mouseClick(e.offsetX, e.offsetY);\n                }\n                this.isDrag = false;\n                this.prevent = false;\n            },\n                this.delay);\n        };\n        this.canvas.onwheel = (e: WheelEvent) => {\n            this.mouseWheel(e);\n        };\n        this.canvas.ondblclick = (e: MouseEvent) => {\n            clearTimeout(this.timer as number);\n            this.prevent = true;\n            this.mouseDoubleClick(e.offsetX, e.offsetY);\n        };\n        this.canvas.onmousedown = (e: MouseEvent) => {\n            this.isDown = true;\n            this.mouseDown(e.offsetX, e.offsetY);\n        };\n        this.canvas.onmouseup = (e: MouseEvent) => {\n            this.isDown = false;\n            this.isDrag = false;\n            this.mouseUp(e.offsetX, e.offsetY);\n        };\n        this.canvas.onmousemove = (e: MouseEvent) => {\n            if (this.isDown) {\n                this.isDrag = true;\n                this.prevent = true;\n                this.mouseDrag(e.offsetX, e.offsetY);\n            } else {\n                this.mouseMove(e.offsetX, e.offsetY);\n            }\n        };\n        window.addEventListener('resize', this.resize);\n        // this.loop(this.ctx);\n    }\n    public start = () => {\n        this.loop(this.ctx);\n    }\n    private resize = () => {\n        const bounding = this.divHost.getBoundingClientRect();\n        this.canvas.width = bounding.width;\n        this.canvas.height = bounding.height;\n    }\n    public destroy() {\n        window.removeEventListener('resize', this.resize);\n        this.isStatic = true;\n        try {\n            while (this.divHost !== undefined && this.divHost.lastElementChild !== undefined) {\n                this.divHost.removeChild(this.divHost.lastElementChild);\n            }\n        } catch (error) { }\n    }\n    public loop = (ctx: CanvasRenderingContext2D) => {\n        if (this.isStatic) { return; }\n        let before = performance.now();\n        requestAnimationFrame(() => { this.loop(ctx); });\n        \n        this.deltaTime.UpdateFPS();\n        if (this.frameNum++ < 300 || this.animation) {\n            this.renderPre(ctx);\n        }\n        let after = performance.now();\n        this.log = `total frames: ${this.frameNum++} (FPS: ${this.deltaTime.frameRate.toFixed(0)}), a loop took: ${(after - before).toFixed(2)} ms to execute.`;\n    }\n    public renderForce = () => {\n        this.frameNum = 0;\n    }\n    public renderPre(ctx: CanvasRenderingContext2D) {\n        ctx.clearRect(0, 0, ctx.canvas.width, ctx.canvas.height);\n        this.render(ctx);\n    }\n    public render(ctx: CanvasRenderingContext2D) {\n        // Binding needed\n    }\n    public mouseClick(x: number, y: number) {\n        // Binding needed\n        if (this.debugMode) { console.log('click'); }\n    }\n    public mouseDoubleClick(x: number, y: number) {\n        // Binding needed\n        if (this.debugMode) { console.log('d-click'); }\n    }\n    public mouseDown(x: number, y: number) {\n        // Binding needed\n        if (this.debugMode) { console.log('down'); }\n    }\n    public mouseUp(x: number, y: number) {\n        // Binding needed\n        if (this.debugMode) { console.log('up'); }\n    }\n    public mouseMove(x: number, y: number) {\n        // Binding needed\n        if (this.debugMode) { console.log('move'); }\n    }\n    public mouseDrag(x: number, y: number) {\n        // Binding needed\n        if (this.debugMode) { console.log('drag'); }\n    }\n    public mouseWheel(v: WheelEvent) {\n        // Binding needed\n        if (this.debugMode) { console.log('wheel', v); }\n    }\n}","import { RendererCanvasDynamicLight } from './CanvasDynamic';\nimport { RendererWrapper } from '../';\n\nexport class Renderer extends RendererCanvasDynamicLight {\n    public rendererWrapper: RendererWrapper\n    public time: number = 0.0;\n    public pts: number[][] = [];\n    public isActive = false;\n\n    public log: string;\n    public needRenderLoop: boolean = true;\n    public loopNum: number = 0;\n    private loopNumMax = 90;\n\n    constructor(div: any, rendererWrapper: RendererWrapper) {\n        super(div);\n        this.rendererWrapper = rendererWrapper;\n        this.canvas.id = 'mapboxCustom'\n\n        // const dd = app.mapboxWrapper.map.getCanvas();\n\n        // this.canvas.width = dd.width;\n        // this.canvas.height = dd.height;\n        this.canvas.style.position = 'absolute';\n        // this.canvas.style.width = '100%';\n        // this.canvas.style.height = '100%';\n        this.canvas.style.pointerEvents = 'none';\n        // this.canvas.style.mixBlendMode = 'color-dodge'\n        \n        this.start();\n    }\n    public initPost() {\n        // this.ctx.globalCompositeOperation = 'color-dodge';\n        this.isActive = true;\n        // this.render(this.ctx);\n    }\n    public render(ctx: CanvasRenderingContext2D): void {\n        if (!this.isActive) { return; }\n        this.time += 0.1;\n\n        this.rendererWrapper.solution.scene.renderCanvas(ctx);\n\n        let pointRenderNeeded = false;\n        if (pointRenderNeeded) { this.renderPoint(ctx); }\n\n        // console.log(this.log);\n        this.renderLog(ctx);\n    }\n    public renderLog(ctx: CanvasRenderingContext2D) {\n        ctx.textAlign = 'center';\n        ctx.font = '14px arial';\n        ctx.fillStyle = '#fff';\n        // ctx.globalCompositeOperation = 'source-over';\n        ctx.fillText(`Lat: ${this.rendererWrapper.solution.activeCommander.mp[1].toFixed(5)},  Lng: ${this.rendererWrapper.solution.activeCommander.mp[0].toFixed(5)}`, (this.canvas.width * 0.5), 50);\n        // ctx.stroke()\n    }\n    public renderPoint(ctx: CanvasRenderingContext2D) {\n        const z = this.rendererWrapper.mapBoxWrapper.map.getZoom();\n        const zoomFactor = Math.pow(2, z) * 0.1\n\n        for (let i = 0; i < this.pts.length; ++i) {\n            const pt = this.pts[i];\n            const p = this.rendererWrapper.mapBoxWrapper.toScreen(pt[0], pt[1]);\n            // const p = this.app.mapboxWrapper.map.unproject({x: 10, y: 10})\n\n            const size = 0.001 * zoomFactor;\n\n            ctx.beginPath();\n            ctx.arc(p[0], p[1], size + ((Math.sin(this.time + i) + 3) / zoomFactor), 0, Math.PI * 2);\n            // ctx.arc(p[0], p[1], size + (size * (Math.sin(this.time + i) + 3) * zoomFactor / 10 ), 0, Math.PI * 2);\n            ctx.closePath();\n            ctx.fillStyle = 'rgba(0, 255, 0, 0.7)';\n            ctx.fill();\n        }\n    }\n}","import { MapboxGLWrapper } from './MapboxGLWrapper';\nimport { DeckGL } from './DeckGL';\nimport { Renderer } from './CanvasCustom';\nimport { Solution } from '../';\n\nexport class RendererWrapper {\n    public solution: Solution;\n    public mapBoxWrapper: MapboxGLWrapper;\n    public deckGL: DeckGL\n    public renderer: Renderer;\n    constructor(solution: Solution) {\n        this.solution = solution;      \n\n        this.mapBoxWrapper = new MapboxGLWrapper(this);\n        this.mapBoxWrapper.mouseDown = (e) => { this.solution.activeCommander.mouseDown(e);}\n        this.mapBoxWrapper.mouseUp = (e) => { this.solution.activeCommander.mouseUp(e);}\n        this.mapBoxWrapper.mouseClick = (e) => { this.solution.activeCommander.mouseClick(e);}\n        this.mapBoxWrapper.mouseDClick = (e) => { this.solution.activeCommander.mouseDClick(e);}\n        this.mapBoxWrapper.mouseMove = (e) => { this.solution.activeCommander.mouseMove(e);}\n        this.mapBoxWrapper.mouseDrag = (e) => { this.solution.activeCommander.mouseDrag(e);}\n        this.mapBoxWrapper.keyDown = (k) => { this.solution.activeCommander.keyDown(k);}\n        \n        this.deckGL = new DeckGL(this);\n        this.renderer = new Renderer(this.solution.divHost, this);\n    }\n    public initPost() {\n        this.renderer.initPost();\n        this.deckGL.initPost();\n    }\n    public downloadScreen() {\n        return this.mapBoxWrapper.downloadImage();\n    }\n    public destroy() {\n        this.renderer.destroy();\n    }\n}","import { Solution } from '../';\n\nimport { TYPE_GEOMETRY } from '../lib';\n\nexport class UIWrapper {\n    public solution: Solution;\n    public divHost: HTMLElement;\n    public div: HTMLElement;\n    constructor(solution: Solution) {\n        this.solution = solution;\n\n        this.divHost = solution.divHost;\n        this.divHost.style.position = 'absolute';\n        const divMenu = document.createElement('div');\n        this.divHost.appendChild(divMenu);\n\n        this.div = document.createElement('div');\n        this.div.style.width = '150px';\n        this.div.style.height = '300px';\n        this.divHost.appendChild(this.div);\n\n        this.initUI();\n    }\n    public async initUI() {\n\n        // const svg = await NJSLoader.LoadSVGFromHTTP(process.env.PUBLIC_URL + '/static/dataDummyReady/ready.svg');\n        // console.log(svg);\n\n        // const newElement = document.createElementNS(\"http://www.w3.org/2000/svg\", 'path'); //Create a path in SVG's namespace\n        // newElement.setAttribute(\"d\",\"M 0 0 L 10 10\"); //Set path's data\n        // newElement.style.stroke = \"#000\"; //Set stroke colour\n        // newElement.style.strokeWidth = \"5px\"; //Set stroke width\n        // this.div.appendChild(newElement);\n\n        const img = new Image();\n        img.src = process.env.PUBLIC_URL + '/static/dataDummyReady/readyLabs.png';\n        img.style.position = 'relative';\n        img.style.width = '150px';\n        img.style.margin = '15px';\n        img.style.marginTop = '30px';\n        img.style.marginBottom = '0px';\n        let a = document.createElement('a');\n        a.href='https://ready.net/';\n        a.appendChild(img);\n        this.div.appendChild(a);\n\n        let div = document.createElement('div');\n        div.textContent = 'Capture Map';\n        div.style.color = '#fff';\n        // div.style.width = '100px';\n        div.style.position = 'relative';\n        div.style.margin = '20px';\n        div.onclick = () => {\n            this.solution.common.downloadScreen();\n        }\n        this.div.appendChild(div);\n\n        div = document.createElement('div');\n        div.textContent = 'Set Extent';\n        div.style.color = '#fff';\n        // div.style.width = '100px';\n        div.style.position = 'relative';\n        div.style.margin = '20px';\n        div.onclick = () => {\n            this.solution.common.flyTo(-112.188375, 35.267735);\n        };\n        this.div.appendChild(div);\n\n        div = document.createElement('div');\n        div.textContent = 'Draw Area';\n        div.style.color = '#fff';\n        // div.style.width = '100px';\n        div.style.position = 'relative';\n        div.style.margin = '20px';\n        div.onclick = () => {\n            this.solution.common.addShape(TYPE_GEOMETRY.POLYGON);\n        };\n        this.div.appendChild(div);\n\n        div = document.createElement('div');\n        div.textContent = 'Add Shape';\n        div.style.color = '#fff';\n        // div.style.width = '100px';\n        div.style.position = 'relative';\n        div.style.margin = '20px';\n        div.onclick = () => {\n            this.solution.common.addShape(TYPE_GEOMETRY.RECT);\n        };\n        this.div.appendChild(div);\n\n        div = document.createElement('div');\n        div.textContent = 'Shape Type';\n        div.style.color = '#fff';\n        // div.style.width = '100px';\n        div.style.position = 'relative';\n        div.style.margin = '20px';\n        div.onclick = () => {\n            this.solution.common.shiftShapeType();\n        };\n        this.div.appendChild(div);\n\n        div = document.createElement('div');\n        div.textContent = 'Animation';\n        div.style.color = '#fff';\n        // div.style.width = '100px';\n        div.style.position = 'relative';\n        div.style.margin = '20px';\n        div.onclick = () => {\n            this.solution.common.toggleAnimation();\n        };\n        this.div.appendChild(div);\n\n        div = document.createElement('div');\n        div.textContent = 'Undo';\n        div.style.color = '#fff';\n        // div.style.width = '100px';\n        div.style.position = 'relative';\n        div.style.margin = '20px';\n        div.onclick = () => {\n            this.solution.common.undo();\n        };\n        this.div.appendChild(div);\n\n        div = document.createElement('div');\n        div.textContent = 'Redo';\n        div.style.color = '#fff';\n        // div.style.width = '100px';\n        div.style.position = 'relative';\n        div.style.margin = '20px';\n        div.onclick = () => {\n            this.solution.common.redo();\n        };\n        this.div.appendChild(div);\n\n        div = document.createElement('div');\n        div.textContent = 'Hex map';\n        div.style.color = '#fff';\n        // div.style.width = '100px';\n        div.style.position = 'relative';\n        div.style.margin = '20px';\n        div.onclick = () => {\n            this.solution.common.toggleHexmap();\n        };\n        this.div.appendChild(div);\n    }\n}","import { Scene } from '..';\nimport { SceneManager } from '../../lib';\nexport class SceneState {\n    public scene: Scene;\n    private manager: SceneManager;\n    constructor(scene: Scene) {\n        this.scene = scene;\n        this.manager = new SceneManager();\n    }\n    public resetState() {\n        this.manager.reset();\n        this.captureState();\n    }\n    public captureState() {\n        this.manager.push(this.scene.common.getData());\n        const state = this.manager.getCurrentState();\n        // console.log(state);\n        return state;\n    }\n    public undo() {\n        const state = this.manager.undo();\n        this.scene.common.populateArea(state);\n    }\n    public redo() {\n        const state = this.manager.redo();\n        this.scene.common.populateArea(state);\n    }\n}","import * as turf from '@turf/turf';\n\nimport { Solution } from '../';\nimport { SceneState } from './SceneState';\nimport { ACCommon } from '../Common';\nimport { ActiveCommander } from '../ActiveCommander';\nimport { GeometryBase } from '../Geometry/GeometryCanvas/Base/GeometryBase';\nimport { hex2RGB, drawingPoint } from '../lib';\n\nimport { LANDUSE_TYPE_MAPPING, FUNDING_STATUS_MAPPING } from '../lib/constant';\n\nexport class Scene {\n    public solution: Solution;\n    public ac: ActiveCommander;\n    public stateManager: SceneState;\n    public common: ACCommon;\n\n    public pts: number[] = [];\n\n    public areas: GeometryBase[] = [];\n    public captured: GeometryBase | undefined = undefined;\n\n    public points: any;\n    public polygonsDifference: any = [];\n    public ids: boolean[] =[];\n\n    constructor(solution: Solution) {\n        this.solution = solution;\n        this.stateManager =  new SceneState(this);\n        this.ac = solution.activeCommander;\n        this.common = solution.common;\n    }\n    public initPre() {\n        this.stateManager.captureState();\n    }\n    public push(g: GeometryBase) {\n        this.areas.push(g);\n    }\n    public remove(g: GeometryBase) {\n        this.areas.splice(this.areas.indexOf(g), 1);\n    }\n    public async init() {\n        this.common.center(-112.190375, 35.257177);\n        this.common.zoom(13);\n\n\n        // init starting\n\n        const polygons = await this.common.loadDataLocal('funded_census_blocks.geojson');\n        const gons = [];\n        const ids = [];\n        const colDefault = hex2RGB(FUNDING_STATUS_MAPPING.default.color);\n        const colAssigned = hex2RGB(FUNDING_STATUS_MAPPING.assigned.color);\n        // console.log(polygons);\n        for (let i of polygons['features']) {\n            const p = (i['geometry']['coordinates']);\n            let color = undefined;\n            const grantStatus = (i['properties']['grant_long_status']);\n            // console.log(grantStatus)\n            if (grantStatus === 'default') { color = colDefault; }\n            else { color = colAssigned; }\n            // if (Math.random() < 0.3) { color = ColorUtility.GetRandomRGBArray(); }\n            // console.log(color)\n            gons.push({ contour: p[0], size: 15, color: color });\n            ids.push(false);\n        }\n        // console.log(gons)\n        this.ids = ids;\n        const onClickEvent = (info, event) => {\n            // console.log('!', info)\n            // console.log('!', info.index)\n            this.ids[info.index] = !this.ids[info.index];\n            this.common.renderForce();\n        }\n        this.common.addPolygonLayer(gons, onClickEvent);\n\n\n        const polygonsDiff = await this.common.loadDataLocal('funded_census_blocks.geojson');\n        this.polygonsDifference = []\n        for (let i of polygonsDiff['features']) {\n            const p = (i['geometry']['coordinates']);\n            // console.log(p[0])\n            this.polygonsDifference.push(turf.polygon(p[0]));\n        }\n\n        // dummy\n        let data = [\n            { position: [-74.5, 40], size: 10000 },\n            { position: [-74.5, 40.5], size: 5000 },\n            { position: [-74.6, 40.5], size: 5800 },\n            { position: [-74.7, 40.5], size: 100 },\n        ];\n        this.common.addScatterLayer(data);\n\n        let data2 = [\n            { pickup: [-122.42, 37.8], dropoff: [-74.5, 40.5] },\n            { pickup: [-122.43, 37.8], dropoff: [-122.42, 37.75] }\n        ];\n        this.common.addArcLayer(data2);\n\n\n        const points = await this.common.loadDataLocal('underserved_locations.geojson');\n        // console.log(d);\n        const colR = hex2RGB(LANDUSE_TYPE_MAPPING.R.color);\n        const colB = hex2RGB(LANDUSE_TYPE_MAPPING.B.color);\n        const pts = []\n        for (let i of points['features']) {\n            const p = (i['geometry']['coordinates']);\n            const landuse = (i['properties']['landuse']);\n\n            let color = undefined;\n            if (landuse === 'R') { color = colR; }\n            else if (landuse === 'B') { color = colB; }\n            else { color = [0, 128, 0]; }\n\n            pts.push({ position: [p[0], p[1]], size: 15, color: color });\n        }\n        this.common.addScatterLayer(pts);\n        this.points = points;\n    }\n    public renderCanvas(ctx: CanvasRenderingContext2D) {\n\n        for(let i = 0 ; i < this.areas.length; ++i) {\n            this.areas[i].render(ctx);\n        }\n\n        ctx.fillStyle = '#f00';\n        for (let i = 0; i < this.pts.length; ++i) {\n            const p = this.pts[i];\n            drawingPoint(ctx, p[0], p[1]);\n        }\n    }\n}\n\n","import { Solution } from '../';\nexport class ApiWrapper {\n    public solution: Solution;\n    constructor(solution: Solution) {\n        this.solution = solution;\n    }\n}","import { ACCommon } from './Common';\r\nimport { ActiveCommander } from './ActiveCommander';\r\nimport { RendererWrapper } from './RendererWrapper';\r\nimport { UIWrapper } from './UI';\r\nimport { Scene } from './Scene';\r\nimport { ApiWrapper } from './ApiWrapper';\r\n\r\nexport class Solution {\r\n    public divHost: HTMLDivElement;\r\n    public common: ACCommon;\r\n    public activeCommander: ActiveCommander;\r\n    public uiWrapper: UIWrapper;\r\n    public rendererWrapper: RendererWrapper;\r\n    public scene: Scene;\r\n    public api: ApiWrapper;\r\n    constructor(id: string) {\r\n        this.divHost = document.createElement(id) as HTMLDivElement;\r\n        this.divHost.style.position = 'relative';\r\n        this.init();\r\n        this.initPost();\r\n    }\r\n    public init() {\r\n        this.common = new ACCommon(this);\r\n        this.activeCommander = new ActiveCommander(this);\r\n        this.scene = new Scene(this);\r\n        this.rendererWrapper = new RendererWrapper(this);\r\n        this.uiWrapper = new UIWrapper(this);\r\n        this.api = new ApiWrapper(this);\r\n    }\r\n    public destroy() {\r\n        this.rendererWrapper.destroy();\r\n        while (this.divHost.lastElementChild) {\r\n            this.divHost.removeChild(this.divHost.lastElementChild);\r\n        }\r\n    }\r\n    public async initPost() {\r\n        this.scene.initPre();\r\n        await this.scene.init();\r\n    }\r\n    \r\n}"],"names":["hex2RGB","hex","isGray","replace","r","parseInt","substring","g","b","v","distance","v0","v1","Math","sqrt","x","y","z","isInsideOfVecs","vecs","inside","i","j","length","xi","yi","xj","yj","closestPointOnLine","pt","p0","p1","A","B","C","dis","abs","getAngleByTwoVectorsRadian","acos","dotProduct","normalize","getCosAngleByTwoVectors","len","RVector3","v2","getCenterVec","vs","lng","lat","constructor","ele","this","difference","area","polygons","boolean","turf","computePathPolygon","object","projection","path","Path2D","pathOut","p","sp","moveTo","lineTo","closePath","addPath","drawingPoint","ctx","beginPath","arc","PI","fill","renderControlPoint","fillColor","strokeColor","lineWidth","fillStyle","strokeStyle","forEach","stroke","LANDUSE_TYPE_MAPPING","text","color","FUNDING_STATUS_MAPPING","TYPE_GEOMETRY","RECT","CIRCLE","POLYGON","SceneManager","histories","currentIndex","reset","push","data","splice","getCurrentIndex","getHistoryLength","getCurrentState","historyNum","undo","redo","GeometryBase","scene","TYPE","t","id","capturedVecId","isHovered","hasAnimation","updateNeeded","captureNeeded","referPoint","_isSelected","polygonTurfOriginal","polygonTurfSubtracted","d","Date","getTime","c","random","floor","toString","getUUID","isSelected","isInside","translate","removeVertexLastVertex","update","onMouseUp","onMouseClick","e","onMouseDoubleClick","shiftType","updateGeoProjection","updateGhostPos","render","renderPost","toJson","updateWidthHight","width","height","remove","toggleHexmap","AreaGeometry","vec","vsRect","segR","vsCircle","initRect","initCircleVec","widthHalf","heightHalf","cos","sin","updateScreen","toScreen","updateProjection","toMap","mp","updateCenterVec","xSum","ySum","updateScreenPosCircle","Renderer","host","pathCroppedArea","renderAreaBounding","renderCroppedArea","renderDim","renderSelected","renderCenterPoint","renderProperties","solution","rendererWrapper","mapBoxWrapper","map","isMoving","diff","polygonsDifference","ids","common","setLineDash","lineDashOffset","op","geometry","transform","cVecGhost","textAlign","font","line","units","fillText","toFixed","save","rotate","restore","ellipse","rect","split","pts","points","other","features","properties","offset","Transform","heighthHalf","preX","activeCommander","mpPre","preY","hexRebuild","updateGhostVecs","hexReposition","xOff","yOff","hexmap","reposition","updateActiveHexByBoudnary","initHex","HexMapDynamic","rx","ry","listPixel","ddx","ddy","ptsCenter","offScale","init","initGrid","computeHex","computeHexOff","initWithR","filterWithinR","computeGeoVec","initWithVecs","filterWithinVecs","xArray","alter","Hexbin","bVec","updateCenVec","updatePolygon","temp","cv","value","minNum","Number","MAX_SAFE_INTEGER","maxNum","MIN_SAFE_INTEGER","renderBins","updatePre","updatePost","updateScreenPos","updatePolygonTurf","boundary","bin","isActive","isHover","isVisit","updateWithMouseInteraction","nPix","k","isOver","updateGoeVec","updateScreenVec","isMouseInside","col","m","Area","super","renderer","cp","undefined","mVec","r0","r1","threshold","pow","isInsideEllipse","captureScene","AreaPolygonGeometry","MAX_VALUE","MIN_VALUE","removeLast","pop","resetBoundary","removeVecByIndex","index","insertVec","sel","result","underConstruction","deg","AreaPolygon","fromJson","point","lngLat","insertPt","captured","ACCommon","zoom","flyTo","center","lon","renderForceWithUpdate","renderForce","areas","downloadScreen","enablePan","dragPan","enable","disablePan","disable","getJSONFromURL","process","addScatterLayer","deckGL","addArcLayer","addPolygonLayer","onClick","addShape","type","drawMode","canvas","shiftShapeType","toggleAnimation","deSelectedAll","removeSelected","checkHoverArea","pickObject","obj","getViewState","getData","extent","stateManager","captureState","onExtentDone","populateArea","ActiveCommander","mouseDown","updateMousePos","mouseUp","mouseDClick","doubleClickZoom","mouseDrag","updateMousePrePos","mouseClick","mouseMove","keyDown","key","MapboxGLWrapper","canvasMapbox","isPressed","zoomTo","setCenter","unproject","project","error","initMap","divHost","mapboxgl","preserveDrawingBuffer","container","style","dragRotate","on","window","addEventListener","div","document","getElementsByClassName","position","display","initPost","getCanvas","initCustomCanvas","getBounds","addSource","coordinates","animate","addLayer","source","downloadImage","customCanvas","fileName","canvasOut","createElement","context","getContext","globalAlpha","drawImage","img","Image","src","toDataURL","link","download","href","click","getCenter","getZoom","DeckGL","layers","deckLayer","MapboxLayer","ScatterplotLayer","getPosition","getRadius","size","getFillColor","getLineColor","info","event","console","log","PolygonLayer","pickable","stroked","filled","wireframe","lineWidthMinPixels","getPolygon","contour","getElevation","getLineWidth","ArcLayer","getSourcePosition","pickup","getTargetPosition","dropoff","getSourceColor","getTargetColor","strokeWidth","label","pick","Deltatime","now","delta","frameRate","last","timeLastRender","msLoop","UpdateFPS","performance","min","dt","RendererCanvasDynamicLight","isDown","debugMode","isStatic","prevent","animation","delay","frameNum","timer","isDrag","deltaTime","start","loop","resize","bounding","getBoundingClientRect","before","requestAnimationFrame","renderPre","after","appendChild","onclick","setTimeout","offsetX","offsetY","onwheel","mouseWheel","ondblclick","clearTimeout","mouseDoubleClick","onmousedown","onmouseup","onmousemove","destroy","removeEventListener","lastElementChild","removeChild","clearRect","time","needRenderLoop","loopNum","loopNumMax","pointerEvents","renderCanvas","renderLog","renderPoint","zoomFactor","RendererWrapper","UIWrapper","divMenu","initUI","margin","marginTop","marginBottom","a","textContent","SceneState","manager","resetState","state","Scene","ac","initPre","indexOf","loadDataLocal","gons","colDefault","colAssigned","polygonsDiff","colR","colB","landuse","ApiWrapper","Solution","uiWrapper","api"],"sourceRoot":""}