{"version":3,"file":"static/js/95353.23d4e84f.chunk.js","mappings":"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","sources":["njslab/LabStarter/AppNGL3d/NGL3dApp_05/Geometry/PointShader.ts","njslab/LabStarter/AppNGL3d/NGL3dApp_05/Utility/GLShaderCommon.ts","njslab/LabStarter/AppNGL3d/NGL3dApp_05/WebGL/AttribLocations.ts","njslab/LabStarter/AppNGL3d/NGL3dApp_05/WebGL/Shader.ts"],"sourcesContent":["import { Shader } from '../WebGL/Shader';\r\n\r\nexport class PointShader extends Shader {\r\n\r\n    constructor(gl: WebGL2RenderingContext, vertSrc: string, fragSrc: string) {\r\n        super(gl, vertSrc, fragSrc);\t// Call the base class constructor which will setup most of what we need\r\n\r\n        // Our shader uses custom uniforms, this is the time to get its location for future use.\r\n        if (this.program ) {\r\n            this.uniformLoc.uPointSize = gl.getUniformLocation(this.program, 'uPointSize');\r\n            this.uniformLoc.uAngle = gl.getUniformLocation(this.program, 'uAngle');\r\n        }        \r\n        gl.useProgram(null); // Done setting up shader\r\n    }\r\n\r\n    // Simple function that passes in Angle and Pointsize uniform data to the shader program.\r\n    set(size: number, angle: number) {\r\n        this.gl.uniform1f(this.uniformLoc.uPointSize, size);\r\n        this.gl.uniform1f(this.uniformLoc.uAngle, angle);\r\n        return this;\r\n    }\r\n    \r\n}","\r\nexport class GLShaderCommon {\r\n\r\n    static getShaderProgram(gl: WebGL2RenderingContext, vertexShader: string, fragmentShader: string, needValidate: boolean = true) {\r\n        let vShader = GLShaderCommon.createShader(gl, gl.VERTEX_SHADER as unknown as WebGLShader, vertexShader);\r\n        let fShader = GLShaderCommon.createShader(gl, gl.FRAGMENT_SHADER as unknown as WebGLShader, fragmentShader);\r\n        if (vShader && fShader ) { \r\n            let program = GLShaderCommon.createProgram(gl, vShader, fShader, needValidate);\r\n\r\n            if (program) {\r\n                return program;\r\n\r\n            } else {\r\n                console.error('vertex fragment shader error'); return null;\r\n            }\r\n        } else { \r\n            console.error('vertex fragment shader error'); return null;\r\n        }\r\n    }\r\n    static getShader(gl: WebGL2RenderingContext, type: number, source: string) {\r\n        const shader = gl.createShader(type);\r\n        if (shader === null) {return null; }\r\n        gl.shaderSource(shader, source);\r\n        gl.compileShader(shader);\r\n\r\n        // Check if compiled successfully\r\n        if (!gl.getShaderParameter(shader, gl.COMPILE_STATUS)) {\r\n            console.log('An error occurred compiling the shaders:' + gl.getShaderInfoLog(shader));\r\n            gl.deleteShader(shader);\r\n            return null;\r\n        }\r\n        // Set the attributes, varying, and uniform to shader\r\n        // shader.attributes = this.attributesFromSource(source);\r\n        // shader.varyings = this.varyingsFromSource(source);\r\n        // shader.uniforms = this.uniformsFromSource(source);\r\n        return shader;\r\n    }\r\n    static createProgram(gl: WebGL2RenderingContext, vertexShader: WebGLShader, fragmentShader: WebGLShader, needValidate: boolean = true): WebGLProgram | null {\r\n        const program = gl.createProgram();\r\n        if (program === null ) {return null; }\r\n        gl.attachShader(program, vertexShader);\r\n        gl.attachShader(program, fragmentShader);\r\n        gl.linkProgram(program);\r\n\r\n        // Check that shader program was able to link to WebGL\r\n        if (!gl.getProgramParameter(program, gl.LINK_STATUS)) {\r\n            const error = gl.getProgramInfoLog(program);\r\n            console.log('Failed to link program: ' + error);\r\n            gl.deleteProgram(program);\r\n            gl.deleteShader(fragmentShader);\r\n            gl.deleteShader(vertexShader);\r\n            return null;\r\n        }\r\n        if (needValidate) {\r\n            gl.validateProgram(program);\r\n            if (!gl.getProgramParameter(program, gl.VALIDATE_STATUS)) {\r\n                console.error('Failed to validate program', gl.getProgramInfoLog(program));\r\n                gl.deleteProgram(program);\r\n                gl.deleteShader(fragmentShader);\r\n                gl.deleteShader(vertexShader);\r\n                return null;\r\n            }\r\n        }\r\n        gl.deleteShader(fragmentShader);\r\n        gl.deleteShader(vertexShader);\r\n        return program;\r\n    }\r\n\r\n    // ...............................\r\n\r\n    // static CreateShader(gl: WebGL2RenderingContext, type: WebGLShader, shaderString: string) {\r\n    //     let shader = gl.createShader(type as number);\r\n    //     gl.shaderSource(shader, shaderString);\r\n    //     gl.compileShader(shader);\r\n    //     gl.getShaderParameter(shader, gl.COMPILE_STATUS);\r\n    //     return shader as Webglsh;\r\n    //     // console.log(gl.getShaderInfoLog(shader));\r\n    //     // gl.deleteShader(shader);\r\n    //     // return null;\r\n    // }\r\n    static createShader(gl: WebGL2RenderingContext, type: WebGLShader, shaderString: string) {\r\n        // console.log(type);\r\n        const shader = gl.createShader(type as unknown as number);\r\n        if (shader === null) {return null; }\r\n        gl.shaderSource(shader, shaderString);\r\n        gl.compileShader(shader);\r\n        const suc = gl.getShaderParameter(shader, gl.COMPILE_STATUS);\r\n        if (suc) { return shader; }\r\n        console.log(gl.getShaderInfoLog(shader));\r\n        gl.deleteShader(shader);\r\n        return null;\r\n    }\r\n    static createShaderFromPath(gl: WebGL2RenderingContext, type: WebGLShader, url: string) {\r\n        const shader = gl.createShader(type as unknown as number);\r\n        if (shader === null) {return null; }\r\n        gl.shaderSource(shader, GLShaderCommon.getSourceSynch(url) as string);\r\n        gl.compileShader(shader);\r\n        const suc = gl.getShaderParameter(shader, gl.COMPILE_STATUS);\r\n        if (suc) { return shader; }\r\n        console.log(gl.getShaderInfoLog(shader));\r\n        gl.deleteShader(shader);\r\n        return null;\r\n    }\r\n\r\n    static getSourceSynch(url: string) {\r\n        const req = new XMLHttpRequest();\r\n        req.open('GET', url, false);\r\n        req.send(null);\r\n        return (req.status === 200) ? req.responseText : null;\r\n    }\r\n\r\n    // static LoadTextResource(url: string, callback:(data: any, d2:any) => void ) {\r\n    //     let request = new XMLHttpRequest();\r\n    //     request.open('GET', url + '?please-dont-cache=' + Math.random(), true);\r\n    //     request.onload = function () {\r\n    //         if (request.status < 200 || request.status > 299) {\r\n    //             callback('Error: HTTP Status ' + request.status + ' on resource ' + url);\r\n    //         } else {\r\n    //             callback(null, request.responseText);\r\n    //         }\r\n    //     };\r\n    //     request.send();\r\n    // }\r\n    // static LoadShader(url: string, callback:(data: null, callback:string) => void ) {\r\n    //     GLUtility.LoadTextResource(url, callback);\r\n    // }\r\n    static loadImage(url: string, callback: (data: null, image: HTMLElement) => void) {\r\n        const image = new Image();\r\n        image.onload = function () {\r\n            callback(null, image);\r\n        };\r\n        image.src = url;\r\n    }\r\n    // static LoadJSONResource(url: string, callback:(data: string, callback:string) => void ) {\r\n    //     GLUtility.LoadTextResource(url, function (err: Error, result) {\r\n    //         if (err) {\r\n    //             callback(err);\r\n    //         } else {\r\n    //             try {\r\n    //                 callback(null, JSON.parse(result));\r\n    //             } catch (e) {\r\n    //                 callback(e);\r\n    //             }\r\n    //         }\r\n    //     });\r\n    // }\r\n}\r\n","export enum ATTR {\r\n    ATTR_POSITION_NAME = 'a_position',\r\n    ATTR_POSITION_LOC = 0,\r\n    ATTR_NORMAL_NAME = 'a_norm',\r\n    ATTR_NORMAL_LOC = 1,\r\n    ATTR_UV_NAME = 'a_uv',\r\n    ATTR_UV_LOC = 2,\r\n\r\n    ATTR_COLOR_LOC = 4,\r\n    ATTR_COLOR_NAME = 'a_color',\r\n}\r\n\r\nexport class AttribLocations {\r\n    position: number;\r\n    normal: number;\r\n    uv: number;\r\n    constructor(gl: WebGL2RenderingContext, program: WebGLProgram) {\r\n        this.position = gl.getAttribLocation(program, ATTR.ATTR_NORMAL_NAME);\r\n        this.normal = gl.getAttribLocation(program, ATTR.ATTR_NORMAL_NAME);\r\n        this.uv = gl.getAttribLocation(program, ATTR.ATTR_UV_NAME);\r\n    }\r\n}\r\n\r\nexport class UniformLocations {\r\n    uPointSize: WebGLUniformLocation | null;\r\n    uAngle: WebGLUniformLocation | null;\r\n\r\n    perspective: WebGLUniformLocation | null;\r\n    modalMatrix: WebGLUniformLocation | null;\r\n    cameraMatrix: WebGLUniformLocation | null;\r\n    mainTexture: WebGLUniformLocation | null;\r\n    constructor(gl: WebGL2RenderingContext, program: WebGLProgram) {\r\n        this.perspective =\tgl.getUniformLocation(program, 'uPMatrix');\r\n        this.modalMatrix =\tgl.getUniformLocation(program, 'uMVMatrix');\r\n        this.cameraMatrix =\tgl.getUniformLocation(program, 'uCameraMatrix');\r\n        this.mainTexture =\tgl.getUniformLocation(program, 'uMainTex' );\r\n    }\r\n}","import { GLShaderCommon } from '../Utility/GLShaderCommon';\r\nimport { AttribLocations, UniformLocations } from './AttribLocations';\r\nimport { Modal } from './Modal';\r\n\r\nexport class Shader {\r\n\r\n    gl: WebGL2RenderingContext;\r\n    program: WebGLProgram | null;\r\n\r\n    attribLoc: AttribLocations;\r\n    uniformLoc: UniformLocations;\r\n\r\n    constructor(gl: WebGL2RenderingContext , vertShaderSrc: string, fragShaderSrc: string ) {\r\n        this.program = GLShaderCommon.getShaderProgram(gl, vertShaderSrc, fragShaderSrc, true);\r\n\r\n        if (this.program != null) {\r\n            this.gl = gl;\r\n            gl.useProgram(this.program);\r\n            this.attribLoc = new AttribLocations(gl, this.program);\r\n            this.uniformLoc = new UniformLocations(gl, this.program);\r\n            // this.uniformLoc = {};\t// TODO : Replace in later lessons with get standardUniformLocations.\r\n        }\r\n\r\n        // Note :: Extended shaders should deactivate shader when done calling super and setting up custom parts in the constructor.\r\n    }\r\n\r\n    // ...................................................\r\n    // Methods\r\n    activate() {\r\n         this.gl.useProgram(this.program); return this; \r\n    }\r\n    deactivate() { \r\n        this.gl.useProgram(null); return this; \r\n    }\r\n\r\n    // function helps clean up resources when shader is no longer needed.\r\n    dispose() {\r\n        // unbind the program if its currently active\r\n        if (this.gl.getParameter(this.gl.CURRENT_PROGRAM) === this.program) {this.gl.useProgram(null); }\r\n        this.gl.deleteProgram(this.program);\r\n    }\r\n    setPerspective(matData: Float32Array) {\r\n        this.gl.uniformMatrix4fv(this.uniformLoc.perspective, false, matData); \r\n        return this; \r\n    }\r\n    setModalMatrix(matData: Float32Array) {\r\n        this.gl.uniformMatrix4fv(this.uniformLoc.modalMatrix, false, matData); \r\n        return this; \r\n    }\r\n    setCameraMatrix(matData: Float32Array) {\r\n        this.gl.uniformMatrix4fv(this.uniformLoc.cameraMatrix, false, matData); \r\n        return this; \r\n    }\r\n    // ...................................................\r\n    // RENDER RELATED METHODS\r\n\r\n    // Setup custom properties\r\n    preRender() {\r\n        //\r\n    } \r\n    // Handle rendering a modal\r\n    renderModal(modal: Modal) {\r\n        this.gl.bindVertexArray(modal.mesh.vao);\t// Enable VAO, this will set all the predefined attributes for the shader\r\n        \r\n        if (modal.mesh.indexCount) {\r\n            this.gl.drawElements(modal.mesh.drawMode, modal.mesh.indexCount, this.gl.UNSIGNED_SHORT, 0); \r\n        } else {\r\n            this.gl.drawArrays(modal.mesh.drawMode, 0, modal.mesh.vertexCount);\r\n        }\r\n\r\n        this.gl.bindVertexArray(null);\r\n\r\n        return this;\r\n    }\r\n}"],"names":["PointShader","Shader","constructor","gl","vertSrc","fragSrc","super","this","program","uniformLoc","uPointSize","getUniformLocation","uAngle","useProgram","set","size","angle","uniform1f","GLShaderCommon","static","vertexShader","fragmentShader","needValidate","vShader","createShader","VERTEX_SHADER","fShader","FRAGMENT_SHADER","createProgram","console","error","type","source","shader","shaderSource","compileShader","getShaderParameter","COMPILE_STATUS","log","getShaderInfoLog","deleteShader","attachShader","linkProgram","getProgramParameter","LINK_STATUS","getProgramInfoLog","deleteProgram","validateProgram","VALIDATE_STATUS","shaderString","url","getSourceSynch","req","XMLHttpRequest","open","send","status","responseText","callback","image","Image","onload","src","ATTR","AttribLocations","position","normal","uv","getAttribLocation","ATTR_NORMAL_NAME","ATTR_UV_NAME","UniformLocations","perspective","modalMatrix","cameraMatrix","mainTexture","vertShaderSrc","fragShaderSrc","attribLoc","activate","deactivate","dispose","getParameter","CURRENT_PROGRAM","setPerspective","matData","uniformMatrix4fv","setModalMatrix","setCameraMatrix","preRender","renderModal","modal","bindVertexArray","mesh","vao","indexCount","drawElements","drawMode","UNSIGNED_SHORT","drawArrays","vertexCount"],"sourceRoot":""}