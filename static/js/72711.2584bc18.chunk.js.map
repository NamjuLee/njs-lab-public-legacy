{"version":3,"file":"static/js/72711.2584bc18.chunk.js","mappings":"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","sources":["njslab/Lab/Network-Grid/Graph.ts","njslab/Lab/Network-Grid/index.ts"],"sourcesContent":["import { NVector3 } from '../../../lib/NJSCore';\r\n\r\nexport class GridGraph {\r\n\r\n    width: number;\r\n    height: number;\r\n    nodes: Node[] = [];\r\n    edges: Edge[] = [];\r\n    dt: number = 0.0;\r\n\r\n    mouse: NVector3 = new NVector3(0, 0);\r\n\r\n    damping = 0.96;\r\n    gravity = -0.032;\r\n    timeStep = 0.16; // 0.316; // 0.18; // 0.26;\r\n    groundZ = -9.26;\r\n\r\n    capture: Node | undefined = undefined;\r\n\r\n    constructor(width: number, height: number) {\r\n\r\n        this.Init(width, height);\r\n    }\r\n    Init(width: number, height: number) {\r\n        this.InitGridR(width, height);\r\n        this.nodes[0].fixed = true;\r\n        this.nodes[9].fixed = true;\r\n        this.nodes[this.nodes.length - 1].fixed = true;\r\n        this.nodes[this.nodes.length - 1 - 9].fixed = true;\r\n    }\r\n    updateOptionA(v: number) {\r\n        this.damping = v * 0.1;\r\n        console.log(this.damping, 'damping');\r\n    }\r\n    updateOptionB(v: number) {\r\n        this.timeStep = v * 0.05;\r\n        console.log(this.timeStep, 'timeStep');\r\n    }\r\n    updateOptionC(v: number) {\r\n        // this.gravity = v * 0.1;\r\n        // console.log(this.gravity, 'gravity');\r\n    }\r\n    InitGridR(width: number, height: number, xNum: number = 10, yNum: number = 10) {\r\n        const xOff = 0;\r\n        const yOff = 0;\r\n        const xInterval = (width / xNum) + 1;\r\n        const yInterval = (height / yNum) + 1;\r\n        const nbase = this.nodes.length;\r\n        for (let i = 0; i < yNum; ++i) {\r\n            for (let j = 0; j < xNum; ++j) {\r\n                let x = xOff + xInterval * j - width * 0.5;\r\n                let y = yOff + yInterval * i - height * 0.5;\r\n                this.AddNode(new NVector3(x, 0, y), NVector3.Zero(), 1.0);\r\n                // this.nodes.push(new Node(new NVector3(x, y), new NVector3(0, 0), 1));\r\n            }\r\n        }\r\n        for (let j = 0; j < yNum; ++j) {\r\n            for (let i = 0; i < xNum; ++i) {\r\n                let k = j * xNum + i;\r\n\r\n                if (i !== 0) { this.AddEdge(this.nodes[nbase + k - 1], this.nodes[nbase + k]); }\r\n                if (j !== 0) { this.AddEdge(this.nodes[nbase + k - xNum], this.nodes[nbase + k]); }\r\n\r\n                // if (i !== 0 && j !== 0) {this.AddEdge(this.nodes[nbase + k - xNum - 1], this.nodes[nbase + k]); }\r\n\r\n                // if (i !== 0 && j !== yNum - 1) {this.AddEdge(this.nodes[nbase + k + xNum - 1], this.nodes[nbase + k]); }\r\n            }\r\n        }\r\n    }\r\n    public Clear() {\r\n        this.nodes = [];\r\n        this.edges = [];\r\n    }\r\n    public AddNode(_p0: NVector3, _u0: NVector3, _mass: number): Node {\r\n        const n = new Node(_p0, _u0, _mass);\r\n        this.nodes.push(n);\r\n        return n;\r\n    }\r\n    public AddEdge(n0: Node, n1: Node): Edge {\r\n        const e = new Edge(n0, n1);\r\n        this.edges.push(e);\r\n        return e;\r\n    }\r\n    MouseMove(x: number, y: number) {\r\n        this.mouse.x = x;\r\n        this.mouse.y = y;\r\n        // console.log('move', x, y);\r\n    }\r\n    MouseDClick(x: number, y: number) {\r\n        this.mouse.x = x;\r\n        this.mouse.y = y;\r\n        const n = this.FindNode(this.mouse);\r\n        if (n) {\r\n            n.fixed = !n.fixed;\r\n        }\r\n        // console.log('click', x, y);\r\n    }\r\n    MouseDown(x: number, y: number) {\r\n        this.mouse.x = x;\r\n        this.mouse.y = y;\r\n        this.capture = this.FindNode(this.mouse);\r\n        if (this.capture) {\r\n            this.capture.fixed = true;\r\n            this.capture.isCapture = true;\r\n        }\r\n        console.log('down', x, y, this.capture);\r\n    }\r\n    MouseLeftClick(x: number, y: number) {\r\n        console.log('click', x, y, this.capture);\r\n    }\r\n    MouseUp(x: number, y: number) {\r\n        this.mouse.x = x;\r\n        this.mouse.y = y;\r\n        if (this.capture) {\r\n            this.capture.isCapture = false;\r\n            this.capture = undefined;\r\n        }\r\n        console.log('up', x, y);\r\n    }\r\n    MouseDrag(x: number, y: number) {\r\n        this.mouse.x = x;\r\n        this.mouse.y = y;\r\n        if (this.capture) {\r\n            this.capture.v.x = x;\r\n            this.capture.v.y = y;\r\n        }\r\n        console.log('drag', x, y);\r\n    }\r\n    Render(ctx?: CanvasRenderingContext2D) {\r\n\r\n        this.dt += 0.1;\r\n        this.Move(this.mouse.x, this.mouse.y, this.mouse.z, this.damping, 0, this.timeStep, this.groundZ, 1);\r\n\r\n        // for (let e of this.edges) { e.Render(ctx); }\r\n        // for (let n of this.nodes) { n.Render(ctx, this.mouse); }\r\n    }\r\n    FindNode(mv: NVector3) {\r\n        for (let n of this.nodes) {\r\n            if (n.v.Distance(mv) < n.m + 3) {\r\n                return n;\r\n            }\r\n        }\r\n        return undefined;\r\n    }\r\n    public Move(x: number, y: number, z: number, damping: number, g: number = 0, dt: number = 0.01, groundZ: number = -10, step: number = 1) {\r\n        const atr = new NVector3(x, y, z);\r\n        for (let i = 0; i < step; ++i) {\r\n            for (const n of this.nodes) {\r\n                \r\n                // const dv: NVector3 = atr - n.p;\r\n                //  L = dv.Length;\r\n                // dv.Unitize();\r\n                // n.f = dv * Math.Exp(-0.1 * L * L) * 0.1 + Vector3d.ZAxis * g;\r\n\r\n                const dv = NVector3.Sub(atr, n.v);\r\n                const L = dv.Length();\r\n                dv.Unitize();\r\n                n.f = NVector3.Add(NVector3.Scale(dv, Math.exp(-0.1 * L * L) * 0.1), (NVector3.Scale(NVector3.YAxis(), g)));\r\n            }\r\n            for (const e of this.edges) { e.ApplySpringForce(); }\r\n            for (const n of this.nodes) { n.Move(dt, damping, groundZ); }\r\n        }\r\n    }\r\n}\r\nexport class Edge {\r\n    n0: Node;\r\n    n1: Node;\r\n    public targetLength: number = 0.0;\r\n    public springConstant: number = 0.8; // 1; // 0.8;\r\n    constructor(n0: Node, n1: Node) {\r\n        this.n0 = n0;\r\n        this.n1 = n1;\r\n        this.targetLength = this.n0.v.Distance(this.n1.v) * 1;\r\n    }\r\n    Render(ctx: CanvasRenderingContext2D) {\r\n        ctx.strokeStyle = '#ff0000';\r\n\r\n        if (NVector3.Distance(this.n0.v, this.n1.v) < this.targetLength * 2) {\r\n\r\n            ctx.strokeStyle = '#0000ff';\r\n            // this.n0.isShort = true;\r\n            // this.n1.isShort = true;\r\n        }\r\n\r\n        ctx.beginPath();\r\n        ctx.moveTo(this.n0.v.x, this.n0.v.y);\r\n        ctx.lineTo(this.n1.v.x, this.n1.v.y);\r\n        ctx.closePath();\r\n        ctx.stroke();\r\n    }\r\n    public ApplySpringForce() {\r\n        // Vector3d dp = n1.p - n0.p;\r\n        // double dist = dp.Length;\r\n        // dp.Unitize();\r\n\r\n        // n0.f += dp * (dist - TargetLength) * SpringConstant;\r\n        // n1.f -= dp * (dist - TargetLength) * SpringConstant;\r\n\r\n        // const dp: NVector3 = NVector3.Sub(this.n1.p, this.n0.p);\r\n        // const dist:number = dp.Length();\r\n        // dp.Unitize();\r\n\r\n        let dp = NVector3.Sub(this.n1.v, this.n0.v);\r\n        let dist = dp.Length();\r\n        dp.Unitize();\r\n\r\n        const length = NVector3.Scale(dp, (dist - this.targetLength) * this.springConstant);\r\n        this.n0.f = NVector3.Add(this.n0.f, length);\r\n        this.n1.f = NVector3.Sub(this.n1.f, length);\r\n\r\n    }\r\n}\r\nexport class Node {\r\n    public nNodes: Node[] = [];\r\n    public v: NVector3 = NVector3.Origin();\r\n    public f: NVector3 = NVector3.Origin();\r\n    public u: NVector3 = NVector3.Origin();\r\n    public m: number = 0.0;\r\n\r\n    public fixed: boolean = false;\r\n    public isCapture: boolean = false;\r\n    constructor(_p0: NVector3, _u0: NVector3, _mass: number) {\r\n        this.v = new NVector3(_p0.x, _p0.y, _p0.z);\r\n        this.u = new NVector3(_u0.x, _u0.y, _u0.z);\r\n        this.m = _mass;\r\n    }\r\n    public Move(dt: number, damping: number, groundZ: number = 0.0) {\r\n        if (this.fixed || this.isCapture) { return; }\r\n\r\n        // u *= damping;\r\n        // u += f * (dt / m);\r\n        // p += u * dt;\r\n\r\n        // this.u = NVector3.Scale(this.u , damping );\r\n        // this.u = NVector3.Add( this.u,  NVector3.Scale(this.f, dt / this.m));\r\n        // this.p  = NVector3.Add(this.p, NVector3.Scale(this.u, dt));\r\n\r\n        this.u.Mult(damping);\r\n        this.u.Add(NVector3.Scale(this.f, dt / this.m));\r\n\r\n        const v = NVector3.Scale(this.u, dt);\r\n        // this.v.Add( );\r\n        this.v.x += v.x;\r\n        this.v.y += v.y;\r\n\r\n        // if (this.p.y < groundZ) {\r\n        //     this.p.y = groundZ;\r\n        //     if (this.u.y < 0.0) {this.u.y = -this.u.y; }\r\n        // }\r\n    }\r\n    Render(ctx: CanvasRenderingContext2D, m: NVector3) {\r\n        ctx.beginPath();\r\n\r\n        if (m.Distance(this.v) < this.m + 3) {\r\n            ctx.fillStyle = '#000000';\r\n            ctx.arc(this.v.x, this.v.y, this.m + 6, 0.0, Math.PI * 2);\r\n        } else {\r\n            ctx.fillStyle = '#f90000';\r\n            ctx.arc(this.v.x, this.v.y, this.m + 3, 0.0, Math.PI * 2);\r\n        }\r\n\r\n        if (this.fixed) {\r\n            ctx.fillStyle = '#000000';\r\n            ctx.arc(this.v.x, this.v.y, this.m + 7.5, 0.0, Math.PI * 2);\r\n        }\r\n\r\n        ctx.closePath();\r\n        ctx.fill();\r\n    }\r\n}","import * as THREE from 'three';\r\nimport { RendererThree, getCSVFromURL } from '../../../lib';\r\n\r\nimport { GridGraph } from './Graph';\r\n\r\nexport class Solution extends RendererThree {\r\n\r\n    pointLight: THREE.PointLight;\r\n    pointer = new THREE.Vector2();\r\n    raycaster = new THREE.Raycaster();\r\n    sphere: THREE.Mesh;\r\n\r\n    mesh: THREE.Points;\r\n\r\n    graph: GridGraph;\r\n\r\n    constructor(id: string = 'main') {\r\n        super(id)\r\n\r\n        this.camera.position.set(0, 40, 48);\r\n\r\n        const ambientLight = new THREE.AmbientLight(0xcccccc, 0.25);\r\n        this.scene.add(ambientLight);\r\n\r\n        this.pointLight = new THREE.PointLight(0xffffff, 0.75);\r\n        this.pointLight.position.x = 10;\r\n        this.pointLight.castShadow = true;\r\n        this.scene.add(this.pointLight);\r\n\r\n        this.raycaster = new THREE.Raycaster();\r\n        this.raycaster.params.Points.threshold = 0.8;\r\n        this.raycaster.far = 1000;\r\n\r\n        const sphereGeometry = new THREE.SphereGeometry(0.1, 32, 32);\r\n        const sphereMaterial = new THREE.MeshBasicMaterial({ color: 0xffffff });\r\n        const sphere = new THREE.Mesh(sphereGeometry, sphereMaterial);\r\n        this.sphere = sphere;\r\n        this.scene.add(sphere);\r\n\r\n        this.graph = new GridGraph(20, 20);\r\n\r\n\r\n\r\n\r\n        const vertices = [];\r\n        const color = [];\r\n\r\n\r\n\r\n        for (let i = 0; i < this.graph.nodes.length; ++i) {\r\n            const x = this.graph.nodes[i].v.x;\r\n            const y = this.graph.nodes[i].v.y;\r\n            const z = this.graph.nodes[i].v.z;\r\n            vertices.push(x, y, z);\r\n\r\n            // this.graph.AddNode(x, y, z);\r\n\r\n            color.push(0.5, 0.5, 0.5);\r\n\r\n\r\n        }\r\n        // for (let i = 0; i < 10 -1; ++i) {\r\n\r\n        //     this.graph.AddEdge(this.graph.nodes[i], this.graph.nodes[i+1])\r\n        // }\r\n\r\n        const geometry = new THREE.BufferGeometry();\r\n\r\n        geometry.setAttribute('position', new THREE.Float32BufferAttribute(vertices, 3));\r\n        geometry.setAttribute('color', new THREE.Float32BufferAttribute(color, 3));\r\n        const material = new THREE.PointsMaterial({\r\n            // color: 0x00fff0 , \r\n            vertexColors: true,\r\n            size: 2,\r\n        });\r\n        const points = new THREE.Points(geometry, material);\r\n        geometry.computeBoundingSphere();\r\n        this.scene.add(points);\r\n        this.mesh = points;\r\n        this.start();\r\n\r\n\r\n    }\r\n    public mouseMove(e: MouseEvent): void {\r\n        this.pointer.x = (e.offsetX / this.hostDiv.clientWidth) * 2 - 1;\r\n        this.pointer.y = - (e.offsetY / this.hostDiv.clientHeight) * 2 + 1;\r\n    }\r\n    public mouseDown(e: MouseEvent): void {\r\n        this.pointer.x = (e.offsetX / this.hostDiv.clientWidth) * 2 - 1;\r\n        this.pointer.y = - (e.offsetY / this.hostDiv.clientHeight) * 2 + 1;\r\n\r\n        this.raycaster.setFromCamera(this.pointer, this.camera);\r\n        const intersections = this.raycaster.intersectObjects([this.mesh], false);\r\n        const intersection = (intersections.length) > 0 ? intersections[0] : null;\r\n\r\n        if (intersection !== null) {\r\n            // console.log(intersection.index);\r\n            this.sphere.position.set(intersection.point.x, intersection.point.y + 1, intersection.point.z);\r\n            // this.mesh.geometry.attributes.position.setXYZ(intersection.index ,intersection.point.x, intersection.point.y + 1, intersection.point.z);\r\n            this.graph.nodes[intersection.index].v.y += 5; \r\n        }\r\n        // this.mesh.geometry.attributes.position.needsUpdate = true;\r\n        // this.mesh.geometry.attributes.color.needsUpdate = true;\r\n        // this.mesh.geometry.computeVertexNormals();\r\n        // console.log('click')\r\n    }\r\n    public update(scene: THREE.Scene) {\r\n        // this.graph.Move(this.sphere.position.x, this.sphere.position.y, this.sphere.position.z, 0.998, 0, 0.001);\r\n        this.graph.Render();\r\n\r\n        let numVertices = this.mesh.geometry.attributes.position.count;\r\n        for (let i = 0; i < numVertices; i++) {\r\n            let o = this.mesh.geometry.attributes.position;\r\n\r\n            // let x = o.getX(i);\r\n            // let y = o.getY(i);\r\n            // let z = o.getZ(i)\r\n\r\n            let x = this.graph.nodes[i].v.x;\r\n            let y = this.graph.nodes[i].v.y;\r\n            let z = this.graph.nodes[i].v.z;\r\n\r\n            // y = Math.sin(9 * x * z + this.t * 5)\r\n\r\n            // y = y < 0 ? 0 : y;\r\n\r\n            // let p = new THREE.Vector3(x, y, z);\r\n\r\n            this.mesh.geometry.attributes.position.setXYZ(i, x, y, z);\r\n\r\n            this.mesh.geometry.attributes.color.setXYZ(i, 0.3, 0.3, 0.3);\r\n        }\r\n\r\n\r\n\r\n        this.raycaster.setFromCamera(this.pointer, this.camera);\r\n        const intersections = this.raycaster.intersectObjects([this.mesh], false);\r\n        const intersection = (intersections.length) > 0 ? intersections[0] : null;\r\n\r\n        if (intersection !== null) {\r\n            // console.log(intersection.index);\r\n            this.sphere.position.set(intersection.point.x, intersection.point.y, intersection.point.z);\r\n\r\n\r\n        }\r\n\r\n\r\n        this.mesh.geometry.attributes.position.needsUpdate = true;\r\n        this.mesh.geometry.attributes.color.needsUpdate = true;\r\n        this.mesh.geometry.computeVertexNormals();\r\n\r\n    }\r\n\r\n}\r\n\r\n\r\n"],"names":["GridGraph","constructor","width","height","nodes","edges","dt","mouse","NVector3","damping","gravity","timeStep","groundZ","capture","undefined","this","Init","InitGridR","fixed","length","updateOptionA","v","console","log","updateOptionB","updateOptionC","xNum","yNum","xInterval","yInterval","nbase","i","j","x","y","AddNode","k","AddEdge","Clear","_p0","_u0","_mass","n","Node","push","n0","n1","e","Edge","MouseMove","MouseDClick","FindNode","MouseDown","isCapture","MouseLeftClick","MouseUp","MouseDrag","Render","ctx","Move","z","mv","Distance","m","g","step","atr","dv","L","Length","Unitize","f","Math","exp","ApplySpringForce","targetLength","springConstant","strokeStyle","beginPath","moveTo","lineTo","closePath","stroke","dp","dist","nNodes","u","Mult","Add","fillStyle","arc","PI","fill","Solution","RendererThree","super","pointLight","pointer","THREE","raycaster","sphere","mesh","graph","camera","position","set","ambientLight","scene","add","castShadow","params","Points","threshold","far","sphereGeometry","sphereMaterial","color","vertices","geometry","setAttribute","material","vertexColors","size","points","computeBoundingSphere","start","mouseMove","offsetX","hostDiv","clientWidth","offsetY","clientHeight","mouseDown","setFromCamera","intersections","intersectObjects","intersection","point","index","update","numVertices","attributes","count","setXYZ","needsUpdate","computeVertexNormals"],"sourceRoot":""}