{"version":3,"file":"static/js/46974.0112b053.chunk.js","mappings":"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","sources":["njslab/LabStarter/AppNGL3d/NGL3dApp_02/Core/Canvas.ts","njslab/LabStarter/AppNGL3d/NGL3dApp_02/Core/Renderer.ts","njslab/LabStarter/AppNGL3d/NGL3dApp_02/Core/Scene.ts","njslab/LabStarter/AppNGL3d/NGL3dApp_02/Geometry/Point.ts","njslab/LabStarter/AppNGL3d/NGL3dApp_02/Utility/GLShaderCommon.ts","njslab/LabStarter/AppNGL3d/NGL3dApp_02/index.ts"],"sourcesContent":["import { NGL3dApp } from '..';\r\n\r\nexport class Canvas {\r\n    app: NGL3dApp;\r\n\r\n    gl: WebGL2RenderingContext;\r\n    canvas: HTMLCanvasElement;\r\n\r\n    constructor(app: NGL3dApp) {\r\n        this.app = app;\r\n\r\n        this.canvas = document.createElement('canvas');\r\n        if (this.app.host) {\r\n            this.app.host.appendChild(this.canvas);\r\n            this.canvas.width = this.app.host.clientWidth;\r\n            this.canvas.height = this.app.host.clientHeight;\r\n        }\r\n        const gl = this.canvas.getContext('webgl2');\r\n        if (gl !== null) { this.gl = gl; }\r\n\r\n        this.loop(this.gl);\r\n    }\r\n    loop(gl: WebGL2RenderingContext) {\r\n        // this.clear(gl);\r\n        requestAnimationFrame(() => { this.loop(gl); });\r\n\r\n        this.app.renderer.render(gl);\r\n        // console.log('working');\r\n    }\r\n    clear(gl: WebGL2RenderingContext) {\r\n        gl.clearColor(0.5, 1.0, 1.0, 1.0);\r\n        gl.clear(gl.COLOR_BUFFER_BIT | gl.DEPTH_BUFFER_BIT);\r\n    }\r\n}\r\n","import { NGL3dApp } from '..';\r\n\r\nexport class Renderer {\r\n    app: NGL3dApp;\r\n    constructor(app: NGL3dApp) {\r\n        this.app = app;\r\n    }\r\n    render(gl: WebGL2RenderingContext) {\r\n        // console.log(gl);\r\n\r\n        // console.log(this.app.scene.triList);\r\n\r\n        this.app.scene.triList.forEach((e) => { e.render(gl); });\r\n    }\r\n}","import { NGL3dApp } from '..';\r\n\r\nimport { Point } from '../Geometry/Point';\r\n\r\nexport class Scene {\r\n    NGL3dApp: NGL3dApp;\r\n\r\n    triList: Point[] = [];\r\n\r\n    constructor(NGL3dApp: NGL3dApp) {\r\n        this.NGL3dApp = NGL3dApp;\r\n    }\r\n}","import { NGL3dApp } from '..';\r\n\r\nimport { GLShaderCommon } from '../Utility/GLShaderCommon';\r\n\r\nexport class Point {\r\n    vOld = `#version 300 es\r\n        in vec3 a_position;\r\n\r\n        uniform float uPointSize;\r\n\r\n        void main(void) {\r\n            gl_PointSize = uPointSize;\r\n            gl_Position = vec4(a_position, 1.0);\r\n        }\r\n    `;\r\n    v = `#version 300 es\r\n\r\n        in vec3 a_position;\r\n\r\n        uniform float uPointSize;\r\n        uniform float uAngle;\r\n\r\n        void main(void) {\r\n            gl_PointSize = uPointSize;\r\n            gl_Position = vec4(cos(uAngle) * 0.8 + a_position.x, sin(uAngle) * 0.8 + a_position.y, a_position.z, 1.0);\r\n        }\r\n    `;\r\n    f = `#version 300 es\r\n        precision mediump float;\r\n\r\n        out vec4 finalColor;\r\n\r\n        void main(void) {\r\n            finalColor = vec4(1.0, 0.0, 0.0, 1.0);\r\n        }\r\n    `;\r\n\r\n    app: NGL3dApp;\r\n\r\n    gl: WebGL2RenderingContext;\r\n\r\n    vShader: WebGLShader;\r\n    fShader: WebGLShader;\r\n    program: WebGLProgram | null;\r\n\r\n    aPositionLoc: number;\r\n    uPointSizeLoc: WebGLUniformLocation | null;\r\n    uAngle: WebGLUniformLocation | null;\r\n\r\n    gVertCnt: number;\r\n    size: number = 2.5;\r\n\r\n    bufVerts: WebGLBuffer | null;\r\n\r\n    constructor(app: NGL3dApp) {\r\n        this.app = app;\r\n        this.gl = app.canvas.gl;\r\n        this.initShader(this.gl);\r\n    }\r\n    initShader(gl: WebGL2RenderingContext) {\r\n\r\n        this.program = GLShaderCommon.getShaderProgram(gl, this.v, this.f);\r\n        if (this.program) {\r\n            gl.useProgram(this.program);\r\n            this.aPositionLoc = gl.getAttribLocation(this.program, 'a_position');\r\n            this.uPointSizeLoc = gl.getUniformLocation(this.program, 'uPointSize');\r\n            this.uAngle = gl.getUniformLocation(this.program, 'uAngle');\r\n\r\n            gl.useProgram(null);\r\n            this.initBuffer(gl);\r\n        }\r\n    }\r\n    initBuffer(gl: WebGL2RenderingContext) {\r\n        let isStatic = false;\r\n        let aryVerts = new Float32Array([0, 0, 0]);\r\n\r\n        this.bufVerts = gl.createBuffer();\r\n        gl.bindBuffer(gl.ARRAY_BUFFER, this.bufVerts);\r\n        gl.bufferData(gl.ARRAY_BUFFER, aryVerts, (isStatic) ? gl.STATIC_DRAW : gl.DYNAMIC_DRAW);\r\n        gl.bindBuffer(gl.ARRAY_BUFFER, null);\r\n\r\n        this.gVertCnt = aryVerts.length / 3;\r\n\r\n        gl.useProgram(this.program);\r\n\r\n        gl.bindBuffer(gl.ARRAY_BUFFER, this.bufVerts);\r\n        gl.enableVertexAttribArray(this.aPositionLoc);\r\n        gl.vertexAttribPointer(this.aPositionLoc, 3, gl.FLOAT, false, 0, 0);\r\n        gl.bindBuffer(gl.ARRAY_BUFFER, null);\r\n\r\n        this.app.scene.triList.push(this);\r\n    }\r\n    render(gl: WebGL2RenderingContext) {\r\n        this.size += 0.01;\r\n        let size = (Math.sin(this.size) * 10.0) + 30.0;\r\n        gl.uniform1f(this.uPointSizeLoc, size);\r\n\r\n        gl.uniform1f(this.uAngle, this.size);\r\n        gl.drawArrays(gl.POINTS, 0, this.gVertCnt);\r\n    }\r\n}","\r\nexport class GLShaderCommon {\r\n\r\n    static getShaderProgram(gl: WebGL2RenderingContext, vertexShader: string, fragmentShader: string, needValidate: boolean = true) {\r\n        let vShader = GLShaderCommon.createShader(gl, gl.VERTEX_SHADER as unknown as WebGLShader, vertexShader);\r\n        let fShader = GLShaderCommon.createShader(gl, gl.FRAGMENT_SHADER as unknown as WebGLShader, fragmentShader);\r\n        if (vShader && fShader) {\r\n            let program = GLShaderCommon.createProgram(gl, vShader, fShader, needValidate);\r\n\r\n            if (program) {\r\n                return program;\r\n\r\n            } else {\r\n                console.error('vertex fragment shader error'); return null;\r\n            }\r\n        } else {\r\n            console.error('vertex fragment shader error'); return null;\r\n        }\r\n    }\r\n    static getShader(gl: WebGL2RenderingContext, type: number, source: string) {\r\n        const shader = gl.createShader(type);\r\n        if (shader === null) { return null; }\r\n        gl.shaderSource(shader, source);\r\n        gl.compileShader(shader);\r\n\r\n        // Check if compiled successfully\r\n        if (!gl.getShaderParameter(shader, gl.COMPILE_STATUS)) {\r\n            console.log('An error occurred compiling the shaders:' + gl.getShaderInfoLog(shader));\r\n            gl.deleteShader(shader);\r\n            return null;\r\n        }\r\n        // Set the attributes, varying, and uniform to shader\r\n        // shader.attributes = this.attributesFromSource(source);\r\n        // shader.varyings = this.varyingsFromSource(source);\r\n        // shader.uniforms = this.uniformsFromSource(source);\r\n        return shader;\r\n    }\r\n    static createProgram(gl: WebGL2RenderingContext, vertexShader: WebGLShader, fragmentShader: WebGLShader, needValidate: boolean = true): WebGLProgram | null {\r\n        const program = gl.createProgram();\r\n        if (program === null) { return null; }\r\n        gl.attachShader(program, vertexShader);\r\n        gl.attachShader(program, fragmentShader);\r\n        gl.linkProgram(program);\r\n\r\n        // Check that shader program was able to link to WebGL\r\n        if (!gl.getProgramParameter(program, gl.LINK_STATUS)) {\r\n            const error = gl.getProgramInfoLog(program);\r\n            console.log('Failed to link program: ' + error);\r\n            gl.deleteProgram(program);\r\n            gl.deleteShader(fragmentShader);\r\n            gl.deleteShader(vertexShader);\r\n            return null;\r\n        }\r\n        if (needValidate) {\r\n            gl.validateProgram(program);\r\n            if (!gl.getProgramParameter(program, gl.VALIDATE_STATUS)) {\r\n                console.error('Failed to validate program', gl.getProgramInfoLog(program));\r\n                gl.deleteProgram(program);\r\n                gl.deleteShader(fragmentShader);\r\n                gl.deleteShader(vertexShader);\r\n                return null;\r\n            }\r\n        }\r\n        gl.deleteShader(fragmentShader);\r\n        gl.deleteShader(vertexShader);\r\n        return program;\r\n    }\r\n\r\n    // ...............................\r\n\r\n    // static CreateShader(gl: WebGL2RenderingContext, type: WebGLShader, shaderString: string) {\r\n    //     let shader = gl.createShader(type as number);\r\n    //     gl.shaderSource(shader, shaderString);\r\n    //     gl.compileShader(shader);\r\n    //     gl.getShaderParameter(shader, gl.COMPILE_STATUS);\r\n    //     return shader as Webglsh;\r\n    //     // console.log(gl.getShaderInfoLog(shader));\r\n    //     // gl.deleteShader(shader);\r\n    //     // return null;\r\n    // }\r\n    static createShader(gl: WebGL2RenderingContext, type: WebGLShader, shaderString: string) {\r\n        console.log(type);\r\n        const shader = gl.createShader(type as unknown as number);\r\n        if (shader === null) { return null; }\r\n        gl.shaderSource(shader, shaderString);\r\n        gl.compileShader(shader);\r\n        const suc = gl.getShaderParameter(shader, gl.COMPILE_STATUS);\r\n        if (suc) { return shader; }\r\n        console.log(gl.getShaderInfoLog(shader));\r\n        gl.deleteShader(shader);\r\n        return null;\r\n    }\r\n    static createShaderFromPath(gl: WebGL2RenderingContext, type: WebGLShader, url: string) {\r\n        const shader = gl.createShader(type as unknown as number);\r\n        if (shader === null) { return null; }\r\n        gl.shaderSource(shader, GLShaderCommon.getSourceSynch(url) as string);\r\n        gl.compileShader(shader);\r\n        const suc = gl.getShaderParameter(shader, gl.COMPILE_STATUS);\r\n        if (suc) { return shader; }\r\n        console.log(gl.getShaderInfoLog(shader));\r\n        gl.deleteShader(shader);\r\n        return null;\r\n    }\r\n\r\n    static getSourceSynch(url: string) {\r\n        const req = new XMLHttpRequest();\r\n        req.open('GET', url, false);\r\n        req.send(null);\r\n        return (req.status === 200) ? req.responseText : null;\r\n    }\r\n\r\n    // static LoadTextResource(url: string, callback:(data: any, d2:any) => void ) {\r\n    //     let request = new XMLHttpRequest();\r\n    //     request.open('GET', url + '?please-dont-cache=' + Math.random(), true);\r\n    //     request.onload = function () {\r\n    //         if (request.status < 200 || request.status > 299) {\r\n    //             callback('Error: HTTP Status ' + request.status + ' on resource ' + url);\r\n    //         } else {\r\n    //             callback(null, request.responseText);\r\n    //         }\r\n    //     };\r\n    //     request.send();\r\n    // }\r\n    // static LoadShader(url: string, callback:(data: null, callback:string) => void ) {\r\n    //     GLUtility.LoadTextResource(url, callback);\r\n    // }\r\n    static loadImage(url: string, callback: (data: null, image: HTMLElement) => void) {\r\n        const image = new Image();\r\n        image.onload = function () {\r\n            callback(null, image);\r\n        };\r\n        image.src = url;\r\n    }\r\n    // static LoadJSONResource(url: string, callback:(data: string, callback:string) => void ) {\r\n    //     GLUtility.LoadTextResource(url, function (err: Error, result) {\r\n    //         if (err) {\r\n    //             callback(err);\r\n    //         } else {\r\n    //             try {\r\n    //                 callback(null, JSON.parse(result));\r\n    //             } catch (e) {\r\n    //                 callback(e);\r\n    //             }\r\n    //         }\r\n    //     });\r\n    // }\r\n}\r\n","import { Canvas } from './Core/Canvas';\r\nimport { Renderer } from './Core/Renderer';\r\nimport { Scene } from './Core/Scene';\r\nimport { Point } from './Geometry/Point';\r\nexport class NGL3dApp {\r\n\r\n    host: HTMLElement;\r\n    canvas: Canvas;\r\n    renderer: Renderer;\r\n    scene: Scene;\r\n\r\n    constructor(id: string) {\r\n        console.log('id: ' + id + ', NGL3dApp 02 Init!!!!!');\r\n        const host = document.getElementById(id);\r\n        if (host) { this.host = host; }\r\n\r\n        this.scene = new Scene(this);\r\n        this.renderer = new Renderer(this);\r\n        this.canvas = new Canvas(this);\r\n\r\n        new Point(this);\r\n    }\r\n\r\n}\r\n// init animated example"],"names":["Canvas","constructor","app","gl","canvas","this","document","createElement","host","appendChild","width","clientWidth","height","clientHeight","getContext","loop","requestAnimationFrame","renderer","render","clear","clearColor","COLOR_BUFFER_BIT","DEPTH_BUFFER_BIT","Renderer","scene","triList","forEach","e","Scene","NGL3dApp","Point","vOld","v","f","vShader","fShader","program","aPositionLoc","uPointSizeLoc","uAngle","gVertCnt","size","bufVerts","initShader","GLShaderCommon","useProgram","getAttribLocation","getUniformLocation","initBuffer","aryVerts","Float32Array","createBuffer","bindBuffer","ARRAY_BUFFER","bufferData","DYNAMIC_DRAW","length","enableVertexAttribArray","vertexAttribPointer","FLOAT","push","Math","sin","uniform1f","drawArrays","POINTS","static","vertexShader","fragmentShader","needValidate","createShader","VERTEX_SHADER","FRAGMENT_SHADER","createProgram","console","error","type","source","shader","shaderSource","compileShader","getShaderParameter","COMPILE_STATUS","log","getShaderInfoLog","deleteShader","attachShader","linkProgram","getProgramParameter","LINK_STATUS","getProgramInfoLog","deleteProgram","validateProgram","VALIDATE_STATUS","shaderString","url","getSourceSynch","req","XMLHttpRequest","open","send","status","responseText","callback","image","Image","onload","src","id","getElementById"],"sourceRoot":""}