{"version":3,"file":"static/js/13158.fc042ec6.chunk.js","mappings":";+xUAmBO,MAAMA,EAITC,YAAYC,GAAa,KAHlBC,aAAO,OACdC,cAAQ,OACRC,YAAM,EAEFC,KAAKH,QAAUI,SAASC,eAAeN,GAMvC,MAAMO,EAAMF,SAASG,cAAc,OACnCD,EAAIE,MAAMC,QAAU,OAMpBN,KAAKH,QAAQU,YAAYJ,GAEzBH,KAAKF,SAAWG,SAASG,cAAc,OACvCJ,KAAKF,SAASU,YAAc,mCAC5BR,KAAKF,SAASO,MAAMI,MAAQ,OAC5BN,EAAII,YAAYP,KAAKF,UAErBE,KAAKD,OAASE,SAASG,cAAc,OACrCJ,KAAKD,OAAOM,MAAMI,MAAQ,OAC1BN,EAAII,YAAYP,KAAKD,QAIrBC,KAAKU,YAIT,CACA,mBACI,MACMC,EAAQ,IAAIC,EAAmBC,2CACzBC,WAER,MAAMC,EAAQJ,EAAMK,mBAAmB,CAAED,MAJ3B,eAMRE,EAASjB,KAAKF,SAASU,YAEvBU,QAAeH,EAAMI,gBAAgBF,GAErCG,SADiBF,EAAOG,UACRD,OACtBpB,KAAKD,OAAOS,YAAcY,CAAI,EAGhCE,EACN,CACOC,UACH,KAAOvB,KAAKH,QAAQ2B,kBAChBxB,KAAKH,QAAQ4B,YAAYzB,KAAKH,QAAQ2B,iBAE9C","sources":["njslab/Workshop/workshop-ml/gemini/index.ts"],"sourcesContent":["import { GoogleGenerativeAI } from \"@google/generative-ai\";\r\n\r\nimport * as tf from '@tensorflow/tfjs'\r\nimport * as tfconv from '@tensorflow/tfjs-converter';\r\nimport * as deeplab from '@tensorflow-models/deeplab'\r\n\r\nimport {getLabels, getColormap} from '@tensorflow-models/deeplab';\r\n\r\nimport { RendererCanvas, Vector3, remap, getImgFromURL } from '../../../../lib';\r\n\r\nimport '@tensorflow/tfjs-backend-webgl';\r\n\r\nimport { PARAM } from 'App';\r\n\r\n// import { NVector3, MathUtility } from '../../../lib';\r\n\r\n// https://github.com/tensorflow/tfjs-models/tree/master/deeplab\r\n// https://github.com/tensorflow/tfjs-models/blob/master/deeplab/demo/src/index.js\r\n\r\nexport class Solution {\r\n    public divHost: HTMLElement;\r\n    divInput\r\n    divOut\r\n    constructor(id: string) {\r\n        this.divHost = document.getElementById(id);\r\n\r\n        // Center align\r\n        // this.divHost.style.display = 'flex';\r\n        // this.divHost.style.alignItems = 'center';\r\n\r\n        const div = document.createElement('div');\r\n        div.style.padding = '50px';\r\n        // div.style.marginLeft = 'auto';\r\n        // div.style.marginRight = 'auto';\r\n        // // div.style.width = '600px';\r\n        // // div.style.height = '350px';\r\n\r\n        this.divHost.appendChild(div);\r\n\r\n        this.divInput = document.createElement('div');\r\n        this.divInput.textContent = 'Q: What is Computational Design?';\r\n        this.divInput.style.color = '#bbb';\r\n        div.appendChild(this.divInput);\r\n\r\n        this.divOut = document.createElement('div');\r\n        this.divOut.style.color = '#777';\r\n        div.appendChild(this.divOut);\r\n        // TODO\r\n        // You code goes here for one time operation\r\n\r\n        this.initGemini();\r\n\r\n        // !! you should execute it for rendering\r\n        // this.start();\r\n    }\r\n    public async initGemini () {\r\n        const modelName = 'gemini-pro' //'gemini-pro'\r\n        const genAI = new GoogleGenerativeAI(process.env.REACT_APP_GOOGLE_AI_STUDIO_KEY);\r\n        const run = async () => {\r\n            // For text-only input, use the gemini-pro model\r\n            const model = genAI.getGenerativeModel({ model: modelName});\r\n            // console.log(this.divInput.textContent)\r\n            const prompt = this.divInput.textContent\r\n          \r\n            const result = await model.generateContent(prompt);\r\n            const response = await result.response;\r\n            const text = response.text();\r\n            this.divOut.textContent = text;\r\n          }\r\n          \r\n          run();\r\n    }\r\n    public destroy() {\r\n        while (this.divHost.lastElementChild) {\r\n            this.divHost.removeChild(this.divHost.lastElementChild);\r\n        }\r\n    }\r\n}\r\n\r\n"],"names":["Solution","constructor","id","divHost","divInput","divOut","this","document","getElementById","div","createElement","style","padding","appendChild","textContent","color","initGemini","genAI","GoogleGenerativeAI","process","async","model","getGenerativeModel","prompt","result","generateContent","text","response","run","destroy","lastElementChild","removeChild"],"sourceRoot":""}