{"version":3,"file":"static/js/14489.a37b130b.chunk.js","mappings":"yJAEO,MAAMA,EAMTC,YAAYC,GAAgB,KAL5BA,SAAG,OAEHC,QAAE,OACFC,YAAM,EAGFC,KAAKH,IAAMA,EAEXG,KAAKD,OAASE,SAASC,cAAc,UACjCF,KAAKH,IAAIM,OACTH,KAAKH,IAAIM,KAAKC,YAAYJ,KAAKD,QAC/BC,KAAKD,OAAOM,MAAQL,KAAKH,IAAIM,KAAKG,YAClCN,KAAKD,OAAOQ,OAASP,KAAKH,IAAIM,KAAKK,cAEvC,MAAMV,EAAKE,KAAKD,OAAOU,WAAW,UACvB,OAAPX,IACAE,KAAKF,GAAKA,EACVE,KAAKF,GAAGY,SAASZ,EAAGa,MACpBX,KAAKF,GAAGc,UAAUd,EAAGe,KACrBb,KAAKF,GAAGgB,OAAOhB,EAAGiB,YAClBf,KAAKF,GAAGgB,OAAOhB,EAAGkB,WAClBhB,KAAKF,GAAGmB,UAAUnB,EAAGoB,QACrBlB,KAAKF,GAAGqB,UAAUrB,EAAGsB,UAAWtB,EAAGuB,sBAGvCrB,KAAKsB,MACT,CAGAA,OACItB,KAAKuB,MAAMvB,KAAKF,IAChB0B,uBAAsB,KAAQxB,KAAKsB,MAAM,IAEzCtB,KAAKH,IAAI4B,SAASC,QAEtB,CACAH,MAAMzB,GAEFA,EAAGY,SAASZ,EAAGa,MACfb,EAAGc,UAAUd,EAAGe,KAChBf,EAAGgB,OAAOhB,EAAGiB,YACbjB,EAAGgB,OAAOhB,EAAGkB,WACblB,EAAGmB,UAAUnB,EAAGoB,QAChBpB,EAAGqB,UAAUrB,EAAGsB,UAAWtB,EAAGuB,qBAC9BvB,EAAG6B,WAAW,EAAK,EAAK,EAAK,EAIjC,E,iDCjDG,MAAMC,EAEThC,YAAYC,GAAgB,KAD5BA,SAAG,EAECG,KAAKH,IAAMA,CACf,CACA6B,SACQ1B,KAAKH,IAAIgC,QAAU7B,KAAKH,IAAIgC,OAAOC,mBAMvC9B,KAAKH,IAAIkC,MAAMC,WAAWC,SAASC,IAAQA,EAAER,QAAQ,GAEzD,E,8CCZG,MAAMS,EAKTvC,YAAYwC,GAAqB,KAJjCA,cAAQ,OAERJ,WAAyB,GAGrBhC,KAAKoC,SAAWA,CACpB,CACAC,IAAIC,GACAtC,KAAKgC,WAAWO,KAAKD,EACzB,E,4ECVG,MAAME,EAASC,EAAQ,OAEvB,MAAMC,EAKT9C,YAAYC,GAAgB,KAJ5BA,SAAG,OAEH8C,wBAAkB,EAGd3C,KAAKH,IAAMA,CAEf,CACA+C,oBAAoBC,GAEhB,OAAO7C,KAAK8C,YAAYD,GAAME,MAAMC,IAChC,MAAMC,EAAWC,EAAAA,cAAAA,YAA0BlD,KAAKH,IAAIE,OAAOD,GAAIkD,GAAS,GACpEC,IACAjD,KAAK2C,mBAAqBM,EAC9B,GAER,CACA,kBAA0BE,GACtB,OAAO,IAAIC,SAAQ,CAACC,EAASC,KACzB,IAAIC,EAAM,IAAIC,MACdD,EAAIE,OAAS,IAAMJ,EAAQE,GAC3BA,EAAIG,QAAUJ,EACdC,EAAIJ,IAAMA,CAAG,GAErB,E,iGCtBJ,MAAMQ,UAAuBC,EAAAA,OAKzBhE,YAAYE,EAA4B+D,EAAiBC,EAAiBC,EAAoBC,GAG1F,GAFAC,MAAMnE,EAAI+D,EAASC,GAAU,KAJjCI,gBAAU,OACVC,YAAM,EAKEnE,KAAKoE,QAAS,CACdpE,KAAKqE,eAAeL,GACpBlE,EAAGwE,WAAWtE,KAAKoE,SACnB,IAAIG,EAASzE,EAAG0E,mBAAmBxE,KAAKoE,QAAS,UACjDtE,EAAG2E,WAAWF,EAAQR,EAE1B,CAEJ,CACAW,YAAYC,GAUR,OATA3E,KAAK4E,eAAeD,EAAME,UAAUC,iBACpC9E,KAAKF,GAAGiF,gBAAgBJ,EAAMK,IAAIA,KAE9BL,EAAMK,IAAIC,WACVjF,KAAKF,GAAGoF,aAAaP,EAAMK,IAAIG,SAAUR,EAAMK,IAAIC,WAAYjF,KAAKF,GAAGsF,eAAgB,GAClFpF,KAAKF,GAAGuF,WAAWV,EAAMK,IAAIG,SAAU,EAAGR,EAAMK,IAAIM,aAE7DtF,KAAKF,GAAGiF,gBAAgB,MAEjB/E,IACX,EAEG,MAAMuF,UAAiBC,EAAAA,SAmC1B5F,YAAYC,GACRoE,MAAMpE,EAAIkC,OAAO,KAnCrB0D,EAAC,0lBAiBDC,EAAC,0JAQD7F,SAAG,OACHC,QAAE,OAEFkF,SAAG,OACHL,WAAK,OACLgB,YAAM,OAENC,GAAa,EAAE,KACfC,EAAY,EAGR7F,KAAKH,IAAMA,EACXG,KAAKF,GAAKD,EAAIE,OAAOD,GACrBE,KAAK8F,WAAW9F,KAAKF,GACzB,CACAiG,SAAiC,IAOzBC,EAPDC,IAAgB,yDACfC,EAAQ,GAIRC,EAAOC,GAGX,IAAK,IAAIC,EAAI,EAAGA,GALN,GAKgBA,IAEtBL,EANOI,IAMMC,EAAT,GACJH,EAAM3D,KAAKyD,GACXE,EAAM3D,KAAK,GACX2D,EAAM3D,KAAK4D,GACXD,EAAM3D,KAAK,GAEX2D,EAAM3D,KAAKyD,GACXE,EAAM3D,KAAK,GACX2D,EAAM3D,MAAK,IACX2D,EAAM3D,KAAK,GAGXyD,EAAIG,EAlBGC,IAkBKC,EACZH,EAAM3D,MAAK,IACX2D,EAAM3D,KAAK,GACX2D,EAAM3D,KAAKyD,GACXE,EAAM3D,KAAK,GAEX2D,EAAM3D,KAAK4D,GACXD,EAAM3D,KAAK,GACX2D,EAAM3D,KAAKyD,GACXE,EAAM3D,KAAK,GAGX0D,IAEAC,EAAM3D,MAAM,KACZ2D,EAAM3D,KAAK,GACX2D,EAAM3D,KAAK,GACX2D,EAAM3D,KAAK,GAEX2D,EAAM3D,KAAK,KACX2D,EAAM3D,KAAK,GACX2D,EAAM3D,KAAK,GACX2D,EAAM3D,KAAK,GAGX2D,EAAM3D,KAAK,GACX2D,EAAM3D,MAAM,KACZ2D,EAAM3D,KAAK,GACX2D,EAAM3D,KAAK,GAEX2D,EAAM3D,KAAK,GACX2D,EAAM3D,KAAK,KACX2D,EAAM3D,KAAK,GACX2D,EAAM3D,KAAK,GAGX2D,EAAM3D,KAAK,GACX2D,EAAM3D,KAAK,GACX2D,EAAM3D,MAAM,KACZ2D,EAAM3D,KAAK,GAEX2D,EAAM3D,KAAK,GACX2D,EAAM3D,KAAK,GACX2D,EAAM3D,KAAK,KACX2D,EAAM3D,KAAK,IAKfvC,KAAKgF,IAAM,IAAIsB,EAAAA,IAAItG,KAAKF,GAAI,OAAQoG,GACpClG,KAAKgF,IAAIG,SAAWnF,KAAKF,GAAGyG,MAC5BvG,KAAKgF,IAAIA,IAAMhF,KAAKF,GAAG0G,oBAGvBxG,KAAKgF,IAAIyB,mBAAqB,EAC9BzG,KAAKgF,IAAIM,YAAcY,EAAMQ,OAAS1G,KAAKgF,IAAIyB,mBAC/C,IAAIE,EAAYC,aAAaC,kBAAoB7G,KAAKgF,IAAIyB,mBAgC1D,OA7BAzG,KAAKgF,IAAI8B,YAAc9G,KAAKF,GAAGiH,eAC/B/G,KAAKF,GAAGiF,gBAAgB/E,KAAKgF,IAAIA,KACjChF,KAAKF,GAAGkH,WAAWhH,KAAKF,GAAGmH,aAAcjH,KAAKgF,IAAI8B,aAClD9G,KAAKF,GAAGoH,WAAWlH,KAAKF,GAAGmH,aAAc,IAAIL,aAAaV,GAAQlG,KAAKF,GAAGqH,aAC1EnH,KAAKF,GAAGsH,wBAAwBC,EAAAA,KAAAA,mBAChCrH,KAAKF,GAAGsH,wBAAwBC,EAAAA,KAAAA,gBAEhCrH,KAAKF,GAAGwH,oBACJD,EAAAA,KAAAA,kBACE,EACArH,KAAKF,GAAGyH,OACR,EACAZ,EACA,GAGN3G,KAAKF,GAAGwH,oBACJD,EAAAA,KAAAA,eACE,EACArH,KAAKF,GAAGyH,OACR,EACAZ,EACiC,EAAjCC,aAAaC,mBAInB7G,KAAKF,GAAGiF,gBAAgB,MACxB/E,KAAKF,GAAGkH,WAAWhH,KAAKF,GAAGmH,aAAc,MAElCjH,KAAKgF,GAChB,CACAc,WAAWhG,GAEPE,KAAK2F,OAAS,IAAIhC,EAAe7D,EAAIE,KAAKyF,EAAGzF,KAAK0F,EADtC,CAAC,GAAK,GAAK,GAAK,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,GACM1F,KAAKH,IAAIgC,OAAO2F,kBAC1ExH,KAAKgF,IAAMhF,KAAK+F,SAChB/F,KAAK2E,MAAQ,IAAI8C,EAAAA,MAAMzH,KAAKgF,IAChC,CACAtD,SAmBI1B,KAAK2F,OAAO+B,WAAWC,gBAAgB3H,KAAKH,IAAIgC,OAAO+F,YAAYlD,YAAY1E,KAAK2E,MAAMkD,aAC1F7H,KAAK6F,EAAI,GACb,E,wHChNJ,MAAMiC,UAAmBlE,EAAAA,OAMrBhE,YAAYE,EAA4B+D,EAAiBC,EAAiBE,GACtEC,MAAMnE,EAAI+D,EAASC,GAAS,KALhCI,gBAAU,OACVC,YAAM,OAENH,aAAO,EAGHhE,KAAKgE,QAAUA,EAGXhE,KAAKoE,UACLpE,KAAKqE,eAAeL,GAEpBhE,KAAKkE,WAAapE,EAAG0E,mBAAmBxE,KAAKoE,QAAS,cACtDpE,KAAKmE,OAASrE,EAAG0E,mBAAmBxE,KAAKoE,QAAS,UAGlDtE,EAAGwE,WAAW,MAEtB,CAEAyD,IAAI3B,EAAc4B,GAId,OAFAhI,KAAKF,GAAGmI,UAAUjI,KAAKmE,OAAQ6D,GAC/BhI,KAAKF,GAAGmI,UAAUjI,KAAKkE,WAAYkC,GAC5BpG,IACX,EAGG,MAAMkI,UAAkB1C,EAAAA,SA0D3B5F,YAAYC,GACRoE,MAAMpE,EAAIkC,OAAO,KA1DrB0D,EAAC,uYAiBDC,EAAC,0uBA8BD7F,SAAG,OACHmF,SAAG,OACHW,YAAM,OACNhB,WAAK,OAELwD,cAAQ,OAER/B,KAAe,KAAK,KACpBgC,SAAmB,EAIfpI,KAAKH,IAAMA,EAEXG,KAAKmI,SAAWE,EAAAA,SAAAA,eAOhBrI,KAAK2F,OAAS,IAAImC,EAAW9H,KAAKH,IAAIE,OAAOD,GAAIE,KAAKyF,EAAGzF,KAAK0F,EAAG1F,KAAKH,IAAIgC,OAAO2F,kBACjFxH,KAAKgF,IAAM,IAAIsB,EAAAA,IAAIzG,EAAIE,OAAOD,GAAI,YAAaE,KAAKmI,SAASG,KAAMtI,KAAKmI,SAASI,WAAOC,EAAWxI,KAAKmI,SAASM,IACjHzI,KAAKgF,IAAI0D,WAAY,EACrB1I,KAAKgF,IAAI2D,YAAa,EAEtB3I,KAAK2E,MAAQ,IAAI8C,EAAAA,MAAMzH,KAAKgF,IAEhC,CACAtD,SAEI1B,KAAKoG,MAAQ,IAGbpG,KAAK2E,MAAME,UAAU+D,SAAW,IAAIC,EAAAA,QAAQ,EAAG,EAAG7I,KAAK2E,MAAME,UAAU+D,SAASE,GAAK,KAErF9I,KAAK2F,OAAO+B,WACZ1H,KAAK2F,OAAOtB,eAAerE,KAAK2F,OAAO3B,SAGvChE,KAAK2F,OAAOgC,gBAAgB3H,KAAKH,IAAIgC,OAAO+F,YAC5C5H,KAAK2F,OAAOjB,YAAY1E,KAAK2E,MAAMkD,YAEvC,E,kHChIG,IAAKkB,GAIX,SAJWA,GAAAA,EAAAA,EAAW,eAAXA,EAAAA,EAAW,iBAItB,CAJWA,IAAAA,EAAW,KAMhB,MAAMC,EAQTpJ,YAAYE,GAAsF,IAA1DmJ,EAAW,uDAAG,GAAIC,EAAY,uDAAG,GAAKC,EAAW,uDAAG,IAAG,KAN/F3B,sBAAgB,OAChBI,gBAAU,OACV/C,eAAS,OAETuE,UAAI,EAIApJ,KAAKwH,iBAAmB,IAAIZ,aAAa,IACzC,IAAIyC,EAAQvJ,EAAGC,OAAOM,MAAQP,EAAGC,OAAOQ,OACxC+I,EAAAA,QAAAA,YAAoBtJ,KAAKwH,iBAAkByB,GAAO,GAAII,EAAOH,GAAQ,GAAKC,GAAO,KAEjFnJ,KAAK6E,UAAY,IAAI0E,EAAAA,UACrBvJ,KAAK4H,WAAa,IAAIhB,aAAa,IAEnC5G,KAAKoJ,KAAOL,EAAYS,KAC5B,CAEAC,KAAKhE,GACGzF,KAAKoJ,OAASL,EAAYS,QAC9BxJ,KAAK8B,mBACL9B,KAAK6E,UAAU+D,SAASc,GAAK1J,KAAK6E,UAAU8E,MAAM,GAAKlE,EACvDzF,KAAK6E,UAAU+D,SAASgB,GAAK5J,KAAK6E,UAAU8E,MAAM,GAAKlE,EACvDzF,KAAK6E,UAAU+D,SAASE,GAAK9I,KAAK6E,UAAU8E,MAAM,GAAKlE,EAC3D,CAEAoE,KAAKpE,GACDzF,KAAK8B,mBACL9B,KAAK6E,UAAU+D,SAASgB,GAAK5J,KAAK6E,UAAUiF,GAAG,GAAKrE,EAChDzF,KAAKoJ,OAASL,EAAYS,QAC9BxJ,KAAK6E,UAAU+D,SAASc,GAAK1J,KAAK6E,UAAUiF,GAAG,GAAKrE,EACpDzF,KAAK6E,UAAU+D,SAASE,GAAK9I,KAAK6E,UAAUiF,GAAG,GAAKrE,EACxD,CAEAsE,KAAKtE,GACDzF,KAAK8B,mBACD9B,KAAKoJ,OAASL,EAAYS,MAC1BxJ,KAAK6E,UAAU+D,SAASE,GAAKrD,GAG7BzF,KAAK6E,UAAU+D,SAASc,GAAK1J,KAAK6E,UAAUmF,QAAQ,GAAKvE,EACzDzF,KAAK6E,UAAU+D,SAASgB,GAAK5J,KAAK6E,UAAUmF,QAAQ,GAAKvE,EACzDzF,KAAK6E,UAAU+D,SAASE,GAAK9I,KAAK6E,UAAUmF,QAAQ,GAAKvE,EAEjE,CAGA3D,mBAoBI,OAlBI9B,KAAKoJ,OAASL,EAAYkB,KAC1BjK,KAAK6E,UAAUqF,QAAQC,QAClBC,WAAWpK,KAAK6E,UAAU+D,UAC1ByB,QAAQrK,KAAK6E,UAAUuD,SAASsB,EAAIH,EAAAA,UAAAA,SACpCe,QAAQtK,KAAK6E,UAAUuD,SAASwB,EAAIL,EAAAA,UAAAA,SAGzCvJ,KAAK6E,UAAUqF,QAAQC,QAClBE,QAAQrK,KAAK6E,UAAUuD,SAASsB,EAAIH,EAAAA,UAAAA,SACpCe,QAAQtK,KAAK6E,UAAUuD,SAASwB,EAAIL,EAAAA,UAAAA,SACpCa,WAAWpK,KAAK6E,UAAU+D,UAInC5I,KAAK6E,UAAU0F,kBAGfjB,EAAAA,QAAAA,OAAetJ,KAAK4H,WAAY5H,KAAK6E,UAAUqF,QAAQM,KAChDxK,KAAK4H,UAChB,CACA6C,yBACI,IAAIC,EAAM,IAAI9D,aAAa5G,KAAK4H,YAEhC,OADA8C,EAAI,IAAMA,EAAI,IAAMA,EAAI,IAAM,EACvBA,CACX,EA8CG,MAAMC,EAyBT/K,YAAYE,EAA4B+B,GAAiB,KAxBzD9B,YAAM,OACN8B,YAAM,OACN+I,gBAAU,OAEVC,iBAAW,OACXC,iBAAW,OACXC,cAAQ,OACRC,cAAQ,OACRC,cAAQ,OAERC,aAAO,OACPC,cAAQ,OACRC,aAAO,OACPC,aAAO,OACPC,WAAK,OACLC,WAAK,OACLC,WAAK,OACLC,WAAK,OAELC,WAAK,OAELC,iBAAW,OACXC,mBAAa,EAIT5L,KAAKD,OAASD,EAAGC,OACjBC,KAAK6B,OAASA,EAEd7B,KAAK4K,YAAc,IACnB5K,KAAKkL,QAAU,EACflL,KAAKmL,SAAW,IAEhBnL,KAAK6K,YAAc7K,KAAK4K,WAAa5K,KAAKD,OAAOM,MAAQwL,KAAKC,GAAK,IACnE9L,KAAK8K,YAAc9K,KAAK4K,WAAa5K,KAAKD,OAAOQ,OAASsL,KAAKC,GAAK,IACpE9L,KAAK+K,SAAW/K,KAAKkL,QAAUlL,KAAKD,OAAOM,MAC3CL,KAAKgL,SAAWhL,KAAKkL,QAAUlL,KAAKD,OAAOQ,OAC3CP,KAAKiL,SAAWjL,KAAKmL,SAAWnL,KAAKD,OAAOQ,OAE5CP,KAAKoL,QAAU,GACfpL,KAAKqL,QAAU,GAEfrL,KAAKsL,MAAQ,EACbtL,KAAKuL,MAAQ,EACbvL,KAAKwL,MAAQ,EACbxL,KAAKyL,MAAQ,EAGbzL,KAAK2L,YAAezJ,GAAmBlC,KAAK+L,UAAU7J,GACtDlC,KAAK4L,cAAiB1J,IAAoBlC,KAAKgM,YAAY9J,EAAE,EAE7DlC,KAAKD,OAAOkM,iBAAiB,aAAc/J,IAAQlC,KAAKkM,YAAYhK,EAAE,IACtElC,KAAKD,OAAOkM,iBAAiB,cAAe/J,IAAQlC,KAAKmM,aAAajK,EAAE,GAC5E,CAIAkK,aAAalK,GACT,MAAO,CAAEwH,EAAGxH,EAAEmK,MAAQrM,KAAKoL,QAASxB,EAAG1H,EAAEoK,MAAQtM,KAAKqL,QAC1D,CACAkB,gBAAgB7C,EAAWE,EAAWd,GACmD,OAArF9I,KAAK0L,MAAM3D,IAAI2B,EAAIH,EAAAA,UAAAA,QAAmBK,EAAIL,EAAAA,UAAAA,QAAmBT,EAAIS,EAAAA,UAAAA,SAA2BvJ,IAChG,CAGAkM,YAAYhK,GACRlC,KAAKsL,MAAQtL,KAAKwL,MAAQtJ,EAAEmK,MAAQrM,KAAKoL,QACzCpL,KAAKuL,MAAQvL,KAAKyL,MAAQvJ,EAAEoK,MAAQtM,KAAKqL,QAEzCrL,KAAKD,OAAOkM,iBAAiB,UAAWjM,KAAK2L,aAC7C3L,KAAKD,OAAOkM,iBAAiB,YAAajM,KAAK4L,cACnD,CAIAG,UAAU7J,GACNlC,KAAKD,OAAOyM,oBAAoB,UAAWxM,KAAK2L,aAChD3L,KAAKD,OAAOyM,oBAAoB,YAAaxM,KAAK4L,cACtD,CAEAO,aAAajK,GACT,IAAIuK,EAAQZ,KAAKa,KAAK,EAAGb,KAAKc,IAAI,EAAIzK,EAAE0K,aAAe1K,EAAE2K,SACzD7M,KAAK6B,OAAOkI,KAAK0C,GAASzM,KAAKmL,SAAWnL,KAAKD,OAAOQ,QAC1D,CAEAyL,YAAY9J,GACR,IAAIwH,EAAIxH,EAAEmK,MAAQrM,KAAKoL,QACnBxB,EAAI1H,EAAEoK,MAAQtM,KAAKqL,QACnByB,EAAKpD,EAAI1J,KAAKwL,MACduB,EAAKnD,EAAI5J,KAAKyL,MAGbvJ,EAAE8K,UAMHhN,KAAK6B,OAAO4H,MAAMqD,GAAM9M,KAAKkL,QAAUlL,KAAKD,OAAOM,QACnDL,KAAK6B,OAAOgI,KAAKkD,GAAM/M,KAAKkL,QAAUlL,KAAKD,OAAOQ,WAJlDP,KAAK6B,OAAOgD,UAAUuD,SAASwB,GAAKkD,GAAM9M,KAAK4K,WAAa5K,KAAKD,OAAOM,OACxEL,KAAK6B,OAAOgD,UAAUuD,SAASsB,GAAKqD,GAAM/M,KAAK4K,WAAa5K,KAAKD,OAAOQ,SAM5EP,KAAKwL,MAAQ9B,EACb1J,KAAKyL,MAAQ7B,CACjB,E,6IC1NG,MAAMxH,EAYTxC,YAAYqN,GAAa,KAVzB9M,UAAI,OACJJ,YAAM,OACN0B,cAAQ,OACRM,WAAK,OAELmL,aAAO,OAEPrL,YAAM,OACNsL,gBAAU,EAIN,MAAMhN,EAAOF,SAASmN,eAAeH,GACjC9M,IAAQH,KAAKG,KAAOA,GAExBH,KAAK+B,MAAQ,IAAII,EAAAA,MAAMnC,MACvBA,KAAKyB,SAAW,IAAIG,EAAAA,SAAS5B,MAC7BA,KAAKD,OAAS,IAAIJ,EAAAA,OAAOK,MAEzBA,KAAKkN,QAAU,IAAIxK,EAAAA,QAAQ1C,MAC3BA,KAAKkN,QAAQG,cAAc7K,EAAAA,QAAQO,MAAK,KAEpC/C,KAAK6B,OAAS,IAAImH,EAAAA,OAAOhJ,KAAKD,OAAOD,IACrCE,KAAK6B,OAAOgD,UAAU+D,SAASb,IAAI,EAAG,EAAG,GACzC/H,KAAKmN,WAAa,IAAIxC,EAAAA,iBAAiB3K,KAAKD,OAAOD,GAAIE,KAAK6B,QAE5D7B,KAAKsN,MAAM,GAEnB,CACAA,OACa,IAAI/H,EAAAA,SAASvF,MAeZ,IAAIkI,EAAAA,UAAUlI,MAGd,IAAIuN,EAAAA,KAAKvN,KAEvB,E","sources":["njslab/LabStarter/AppNGL3d/NGL3dApp_09/Core/Canvas.ts","njslab/LabStarter/AppNGL3d/NGL3dApp_09/Core/Renderer.ts","njslab/LabStarter/AppNGL3d/NGL3dApp_09/Core/Scene.ts","njslab/LabStarter/AppNGL3d/NGL3dApp_09/Core/Texture.ts","njslab/LabStarter/AppNGL3d/NGL3dApp_09/Mesh/Meshes/Primatives/GridAxis.ts","njslab/LabStarter/AppNGL3d/NGL3dApp_09/Mesh/Meshes/Primatives/MulitQuad.ts","njslab/LabStarter/AppNGL3d/NGL3dApp_09/WebGL/Camera.ts","njslab/LabStarter/AppNGL3d/NGL3dApp_09/index.ts"],"sourcesContent":["import { NGL3dApp } from '..';\r\n\r\nexport class Canvas {\r\n    app: NGL3dApp;\r\n\r\n    gl: WebGL2RenderingContext;\r\n    canvas: HTMLCanvasElement;\r\n\r\n    constructor(app: NGL3dApp) {\r\n        this.app = app;\r\n\r\n        this.canvas = document.createElement('canvas');\r\n        if (this.app.host) {\r\n            this.app.host.appendChild(this.canvas);\r\n            this.canvas.width = this.app.host.clientWidth;\r\n            this.canvas.height = this.app.host.clientHeight;\r\n        }\r\n        const gl = this.canvas.getContext('webgl2');\r\n        if (gl !== null) {\r\n            this.gl = gl;\r\n            this.gl.cullFace(gl.BACK);\t\t\t\t\t\t\t\t    // Back is also default\r\n            this.gl.frontFace(gl.CCW);\t\t\t\t\t\t\t\t    // Dont really need to set it, its ccw by default.\r\n            this.gl.enable(gl.DEPTH_TEST);\t\t\t\t\t\t\t    // Shouldn't use this, use something else to add depth detection\r\n            this.gl.enable(gl.CULL_FACE);\t\t\t\t\t\t\t    // Cull back face, so only show triangles that are created clockwise\r\n            this.gl.depthFunc(gl.LEQUAL);\t\t\t\t\t\t\t    // Near things obscure far things\r\n            this.gl.blendFunc(gl.SRC_ALPHA, gl.ONE_MINUS_SRC_ALPHA);\t// Setup default alpha blending\r\n        }\r\n\r\n        this.loop();\r\n    }\r\n    // fFitScreen = function(wp,hp) { return this.fSetSize(window.innerWidth * (wp || 1),window.innerHeight * (hp || 1)); }\r\n\r\n    loop() {\r\n        this.clear(this.gl);\r\n        requestAnimationFrame(() => { this.loop(); });\r\n\r\n        this.app.renderer.render();\r\n        // console.log('working');\r\n    }\r\n    clear(gl: WebGL2RenderingContext) {\r\n\r\n        gl.cullFace(gl.BACK);\t\t\t\t\t\t\t\t// Back is also default\r\n        gl.frontFace(gl.CCW);\t\t\t\t\t\t\t\t// Dont really need to set it, its ccw by default.\r\n        gl.enable(gl.DEPTH_TEST);\t\t\t\t\t\t\t// Shouldn't use this, use something else to add depth detection\r\n        gl.enable(gl.CULL_FACE);\t\t\t\t\t\t\t// Cull back face, so only show triangles that are created clockwise\r\n        gl.depthFunc(gl.LEQUAL);\t\t\t\t\t\t\t// Near things obscure far things\r\n        gl.blendFunc(gl.SRC_ALPHA, gl.ONE_MINUS_SRC_ALPHA);\t// Setup default alpha blending\r\n        gl.clearColor(1.0, 1.0, 1.0, 1.0);\t// Set clear color\r\n\r\n        // gl.clear(gl.COLOR_BUFFER_BIT | gl.DEPTH_BUFFER_BIT);\r\n        // gl.clearColor(1.0, 1.0, 1.0, 1.0);\r\n    }\r\n}\r\n","import { NGL3dApp } from '..';\r\n\r\nexport class Renderer {\r\n    app: NGL3dApp;\r\n    constructor(app: NGL3dApp) {\r\n        this.app = app;\r\n    }\r\n    render() {\r\n        if (this.app.camera) { this.app.camera.updateViewMatrix(); }\r\n\r\n        // console.log(gl);\r\n\r\n        // console.log(this.app.scene.geometries);\r\n\r\n        this.app.scene.geometries.forEach((e) => { e.render(); });\r\n\r\n    }\r\n}","import { NGL3dApp } from '..';\r\n\r\nimport { MeshBase } from '../Mesh/Meshes/Core/Base';\r\n\r\nexport class Scene {\r\n    NGL3dApp: NGL3dApp;\r\n\r\n    geometries: MeshBase[] = [];\r\n\r\n    constructor(NGL3dApp: NGL3dApp) {\r\n        this.NGL3dApp = NGL3dApp;\r\n    }\r\n    add(mesh: MeshBase) {\r\n        this.geometries.push(mesh);\r\n    }\r\n}","import { NGL3dApp } from '..';\r\n\r\nimport { ShaderUtility } from '../WebGL/Shader';\r\n\r\nexport const uvGrid = require('../Asset/UV_Grid_Lrg.jpg');\r\n\r\nexport class Texture {\r\n    app: NGL3dApp;\r\n\r\n    uvGridWebGLTexture: WebGLTexture;\r\n\r\n    constructor(app: NGL3dApp) {\r\n        this.app = app;\r\n\r\n    }\r\n    async UploadTexture(path: string) {\r\n        // tslint:disable-next-line:no-any\r\n        return this.LoadTexture(path).then((imgPath: any) => {\r\n            const webGLTex = ShaderUtility.LoadTexture(this.app.canvas.gl, imgPath, false);\r\n            if (webGLTex) {\r\n                this.uvGridWebGLTexture = webGLTex;\r\n            }\r\n        });\r\n    }\r\n    private async LoadTexture(src: string) {\r\n        return new Promise((resolve, reject) => {\r\n            let img = new Image();\r\n            img.onload = () => resolve(img);\r\n            img.onerror = reject;\r\n            img.src = src;\r\n        });\r\n    }\r\n}","\r\nimport { VAO } from '../../../WebGL/VAO';\r\nimport { Model } from '../../../WebGL/Model';\r\nimport { Shader, ATTR } from '../../../WebGL/Shader';\r\n\r\nimport { NGL3dApp } from '../../..';\r\nimport { MeshBase } from '../Core/Base';\r\n// import { vaoCommon } from '../../WebGL/vaoCommon';\r\n\r\nclass GridAxisShader extends Shader {\r\n\r\n    uPointSize: WebGLUniformLocation | null;\r\n    uAngle: WebGLUniformLocation | null;\r\n\r\n    constructor(gl: WebGL2RenderingContext, vertSrc: string, fragSrc: string, aryColor: number[], pMatrix: Float32Array) {\r\n        super(gl, vertSrc, fragSrc);\t// Call the base class constructor which will setup most of what we need\r\n\r\n        if (this.program) {\r\n            this.setPerspective(pMatrix);\r\n            gl.useProgram(this.program); // Done setting up shader\r\n            let uColor = gl.getUniformLocation(this.program, 'uColor');\r\n            gl.uniform3fv(uColor, aryColor);\r\n            // gl.useProgram(null); // Done setting up shader\r\n        }\r\n\r\n    }\r\n    renderModel(model: Model) {\r\n        this.setModelMatrix(model.transform.getViewMatrix());\t// Set the transform, so the shader knows where the model exists in 3d space\r\n        this.gl.bindVertexArray(model.vao.vao);\t// Enable VAO, this will set all the predefined attributes for the shader\r\n\r\n        if (model.vao.indexCount) {\r\n            this.gl.drawElements(model.vao.drawMode, model.vao.indexCount, this.gl.UNSIGNED_SHORT, 0);\r\n        } else { this.gl.drawArrays(model.vao.drawMode, 0, model.vao.vertexCount); }\r\n\r\n        this.gl.bindVertexArray(null);\r\n\r\n        return this;\r\n    }\r\n}\r\nexport class GridAxis extends MeshBase {\r\n    v = `#version 300 es\r\n    in vec3 a_position;\t//Standard position data.\r\n    layout(location=4) in float a_color;\t//Will hold the 4th custom position of the custom position buffer.\r\n\r\n    uniform mat4 uPMatrix;\r\n    uniform mat4 uMVMatrix;\r\n    uniform mat4 uCameraMatrix;\r\n\r\n    uniform vec3 uColor[4];\t//Color Array\r\n\r\n    out lowp vec4 color;\t//Color to send to fragment shader.\r\n\r\n    void main(void) {\r\n        color = vec4(uColor[ int(a_color) ],1.0); //Using the 4th float as a color index.\r\n        gl_Position = uPMatrix * uCameraMatrix * uMVMatrix * vec4(a_position, 1.0);\r\n    }\r\n    `;\r\n    f = `#version 300 es\r\n    precision mediump float;\r\n\r\n    in vec4 color;\r\n    out vec4 finalColor;\r\n\r\n    void main(void) { finalColor = color; }\r\n    `;\r\n    app: NGL3dApp;\r\n    gl: WebGL2RenderingContext;\r\n\r\n    vao: VAO;\r\n    model: Model;\r\n    shader: GridAxisShader;\r\n\r\n    ro: number = 0;\r\n    t: number = 0.0;\r\n    constructor(app: NGL3dApp) {\r\n        super(app.scene);\r\n        this.app = app;\r\n        this.gl = app.canvas.gl;\r\n        this.initShader(this.gl);\r\n    }\r\n    GetVAO(incAxis: boolean = true) {\r\n        let verts = [],\r\n            size = 1.8,\t\t\t// W/H of the outer box of the grid, from origin we can only go 1 unit in each direction, so from left to right is 2 units max\r\n            div = 10.0,\t\t\t// How to divide up the grid\r\n            step = size / div,\t// Steps between each line, just a number we increment by for each line in the grid.\r\n            half = size / 2;\t// From origin the starting position is half the size.\r\n\r\n        let p;\t// Temp letiable for position value.\r\n        for (let i = 0; i <= div; i++) {\r\n            // Vertical line\r\n            p = -half + (i * step);\r\n            verts.push(p);\t\t// x1\r\n            verts.push(0);\t\t// y1 verts.push(half);\r\n            verts.push(half);\t// z1 verts.push(0);\r\n            verts.push(0);\t\t// c2\r\n\r\n            verts.push(p);\t\t// x2\r\n            verts.push(0);\t\t// y2 verts.push(-half);\r\n            verts.push(-half);\t// z2 verts.push(0);\r\n            verts.push(0);\t\t// c2 verts.push(1);\r\n\r\n            // Horizontal line\r\n            p = half - (i * step);\r\n            verts.push(-half);\t// x1\r\n            verts.push(0);\t\t// y1 verts.push(p);\r\n            verts.push(p);\t\t// z1 verts.push(0);\r\n            verts.push(0);\t\t// c1\r\n\r\n            verts.push(half);\t// x2\r\n            verts.push(0);\t\t// y2 verts.push(p);\r\n            verts.push(p);\t\t// z2 verts.push(0);\r\n            verts.push(0);\t\t// c2 verts.push(1);\r\n        }\r\n\r\n        if (incAxis) {\r\n            // x axis\r\n            verts.push(-1.1);\t// x1\r\n            verts.push(0);\t\t// y1\r\n            verts.push(0);\t\t// z1\r\n            verts.push(1);\t\t// c2\r\n\r\n            verts.push(1.1);\t// x2\r\n            verts.push(0);\t\t// y2\r\n            verts.push(0);\t\t// z2\r\n            verts.push(1);\t\t// c2\r\n\r\n            // y axis\r\n            verts.push(0);      // x1\r\n            verts.push(-1.1);\t// y1\r\n            verts.push(0);\t\t// z1\r\n            verts.push(2);\t\t// c2\r\n\r\n            verts.push(0);\t\t// x2\r\n            verts.push(1.1);\t// y2\r\n            verts.push(0);\t\t// z2\r\n            verts.push(2);\t\t// c2\r\n\r\n            // z axis\r\n            verts.push(0);\t\t// x1\r\n            verts.push(0);\t\t// y1\r\n            verts.push(-1.1);\t// z1\r\n            verts.push(3);\t\t// c2\r\n\r\n            verts.push(0);\t\t// x2\r\n            verts.push(0);\t\t// y2\r\n            verts.push(1.1);\t// z2\r\n            verts.push(3);\t\t// c2\r\n        }\r\n\r\n        // Setup\r\n        // let attrColorLoc = 4;\r\n        this.vao = new VAO(this.gl, 'grid', verts); // { drawMode:gl.LINES, vao:gl.createVertexArray() };\r\n        this.vao.drawMode = this.gl.LINES;\r\n        this.vao.vao = this.gl.createVertexArray();\r\n\r\n        // Do some math\r\n        this.vao.vertexComponentLen = 4;\r\n        this.vao.vertexCount = verts.length / this.vao.vertexComponentLen;\r\n        let strideLen = Float32Array.BYTES_PER_ELEMENT * this.vao.vertexComponentLen; // Stride Length is the Vertex Size for the buffer in Bytes\r\n\r\n        // Setup our Buffer\r\n        this.vao.bufVertices = this.gl.createBuffer();\r\n        this.gl.bindVertexArray(this.vao.vao);\r\n        this.gl.bindBuffer(this.gl.ARRAY_BUFFER, this.vao.bufVertices);\r\n        this.gl.bufferData(this.gl.ARRAY_BUFFER, new Float32Array(verts), this.gl.STATIC_DRAW);\r\n        this.gl.enableVertexAttribArray(ATTR.ATTR_POSITION_LOC);\r\n        this.gl.enableVertexAttribArray(ATTR.ATTR_COLOR_LOC);\r\n\r\n        this.gl.vertexAttribPointer(\r\n            ATTR.ATTR_POSITION_LOC\t\t\t\t\t\t// Attribute Location\r\n            , 3\t\t\t\t\t\t\t\t\t\t// How big is the vector by number count\r\n            , this.gl.FLOAT \t\t\t\t\t\t\t\t// What type of number we passing in\r\n            , false\t\t\t\t\t\t\t\t\t// Does it need to be normalized?\r\n            , strideLen\t\t\t\t\t\t\t\t// How big is a vertex chunk of data.\r\n            , 0\t\t\t\t\t\t\t\t\t\t// Offset by how much\r\n        );\r\n\r\n        this.gl.vertexAttribPointer(\r\n            ATTR.ATTR_COLOR_LOC\t\t\t\t\t\t\t// new shader has \"in float a_color\" as the second attrib\r\n            , 1\t\t\t\t\t\t\t\t\t\t// This atttrib is just a single float\r\n            , this.gl.FLOAT\r\n            , false\r\n            , strideLen\t\t\t\t\t\t\t\t// Each vertex chunk is 4 floats long\r\n            , Float32Array.BYTES_PER_ELEMENT * 3\t\t// skip first 3 floats in our vertex chunk, its like str.substr(3,1) in theory.\r\n        );\r\n\r\n        // Cleanup and Finalize\r\n        this.gl.bindVertexArray(null);\r\n        this.gl.bindBuffer(this.gl.ARRAY_BUFFER, null);\r\n        // this.gl.mvaoCache[\"grid\"] = this.vao;\r\n        return this.vao;\r\n    }\r\n    initShader(gl: WebGL2RenderingContext) {\r\n        const col = [0.8, 0.8, 0.8, 1, 0, 0, 0, 1, 0, 0, 0, 1];\r\n        this.shader = new GridAxisShader(gl, this.v, this.f, col, this.app.camera.projectionMatrix);\r\n        this.vao = this.GetVAO();\r\n        this.model = new Model(this.vao);\r\n    }\r\n    render() {\r\n        // his.shader.activate();\r\n        // this.ro += 0.04;\r\n        // this.shader.set(this.ro);\r\n        // this.shader.renderModel(this.model);\r\n\r\n        // let p = this.model.transform.position;\t\t// Just an pointer to transform position, make code smaller\r\n        // console.log(p);\r\n        // let angle = Math.atan2(p.y, p.x)  + (1 * this.t);\t\t// Calc the current angle plus 1 degree per second rotation\r\n        // let radius = Math.sqrt(p.x * p.x + p.y * p.y);\t// Calc the distance from origin.\r\n        // let scale = Math.max(0.2,  Math.abs(Math.sin(angle)) * 1.2  );   // Just messing with numbers and seeing what happens :)\r\n        // console.log(angle, radius);\r\n\r\n        // this.model.setScale(scale, scale, 1);\r\n        // this.model.setPosition( radius * Math.cos(angle), radius * Math.sin(angle), 0 );\r\n        // this.model.transform.rotation.z += 15 * this.t;\r\n        // this.model.transform.rotation.x += 30 * this.t;\r\n        // this.model.transform.rotation.y += 60 * this.t;\r\n\r\n        this.shader.activate().setCameraMatrix(this.app.camera.viewMatrix).renderModel(this.model.preRender());\r\n        this.t = 0.01;\r\n    }\r\n}","import { Vector3 } from '../../../Utility/Vector3';\r\n\r\nimport { VAO } from '../../../WebGL/VAO';\r\nimport { Model } from '../../../WebGL/Model';\r\n\r\nimport { NGL3dApp } from '../../..';\r\n\r\nimport { Geometry } from '../../Geometry';\r\nimport { Shader } from '../../../WebGL/Shader';\r\nimport { MeshBase } from '../Core/Base';\r\n\r\nclass ShaderQuad extends Shader {\r\n\r\n    uPointSize: WebGLUniformLocation | null;\r\n    uAngle: WebGLUniformLocation | null;\r\n\r\n    pMatrix: Float32Array;\r\n    constructor(gl: WebGL2RenderingContext, vertSrc: string, fragSrc: string, pMatrix: Float32Array) {\r\n        super(gl, vertSrc, fragSrc);\r\n        this.pMatrix = pMatrix;\r\n\r\n        // Our shader uses custom uniforms, this is the time to get its location for future use.\r\n        if (this.program) {\r\n            this.setPerspective(pMatrix);\r\n\r\n            this.uPointSize = gl.getUniformLocation(this.program, 'uPointSize');\r\n            this.uAngle = gl.getUniformLocation(this.program, 'uAngle');\r\n\r\n            // gl.useProgram(this.program);\r\n            gl.useProgram(null); // Done setting up shader\r\n        }\r\n    }\r\n    // Simple function that passes in Angle and Pointsize uniform data to the shader program.\r\n    set(size: number, angle: number) {\r\n        // this.gl.useProgram(null);\r\n        this.gl.uniform1f(this.uAngle, angle);\r\n        this.gl.uniform1f(this.uPointSize, size);\r\n        return this;\r\n    }\r\n}\r\n\r\nexport class MulitQuad extends MeshBase {\r\n    v = `#version 300 es\r\n\r\n        in vec3 a_position;\t//Standard position data.\r\n        in vec2 a_uv;\r\n\r\n        uniform mat4 uPMatrix;\r\n        uniform mat4 uMVMatrix;\r\n        uniform mat4 uCameraMatrix;\r\n\r\n        out vec2 uv;\r\n\r\n        void main(void) {\r\n            uv = a_uv;\r\n            gl_Position = uPMatrix * uCameraMatrix * uMVMatrix * vec4(a_position, 1.0);\r\n        }\r\n    `;\r\n\r\n    f = `#version 300 es\r\n\r\n    precision mediump float;\r\n    in vec2 uv;\r\n\r\n    out vec4 finalColor;\r\n\r\n    void main(void) {\r\n\r\n        //Square Border\r\n        // float c = (uv.x <= 0.1 || uv.x >=0.9 || uv.y <= 0.1 || uv.y >= 0.9)? 0.0 : 1.0;\r\n\r\n        // finalColor = vec4(c,c,c,1.0-c);\r\n        // finalColor = vec4(1.0, 0.0, 1.0, 1.0);\r\n\r\n        // //Circle\r\n        // //  /*\r\n        vec2 delta = uv - vec2(0.5,0.5); //delta position from center;\r\n        float dist = 0.5 - sqrt(delta.x*delta.x + delta.y*delta.y);\r\n\r\n        float border = 0.01;\r\n        float a = 0.0;\r\n\r\n        if(dist > border) a = 1.0;\r\n        else if(dist > 0.0) a = dist / border;\r\n\r\n        finalColor = vec4(0.0, 0.0, 0.0, a);\r\n        // //  */\r\n    }\r\n    `;\r\n    app: NGL3dApp;\r\n    vao: VAO;\r\n    shader: ShaderQuad;\r\n    model: Model;\r\n\r\n    geometry: Geometry;\r\n\r\n    size: number = 20.5;\r\n    rotation: number = 0.0;\r\n\r\n    constructor(app: NGL3dApp) {\r\n        super(app.scene);\r\n        this.app = app;\r\n\r\n        this.geometry = Geometry.GetMulitQuad();\r\n\r\n        // var mesh = this.app.canvas.gl.fCreateMeshVAO('MultiQuad', aIndex, aVert, null, aUV);\r\n        // mesh.noCulling = true;\r\n        // mesh.doBlending = true;\r\n        // return mesh;\r\n\r\n        this.shader = new ShaderQuad(this.app.canvas.gl, this.v, this.f, this.app.camera.projectionMatrix);\r\n        this.vao = new VAO(app.canvas.gl, 'MultiQuad', this.geometry.vert, this.geometry.index, undefined, this.geometry.UV);\r\n        this.vao.noCulling = true;\r\n        this.vao.doBlending = true;\r\n\r\n        this.model = new Model(this.vao);\r\n\r\n    }\r\n    render() {\r\n        // console.log(this);\r\n        this.size += 0.01;\r\n        // let size = (Math.sin(this.size) * 10.0) + 20.0;\r\n\r\n        this.model.transform.position = new Vector3(0, 0, this.model.transform.position.z + -0.01);\r\n\r\n        this.shader.activate();\r\n        this.shader.setPerspective(this.shader.pMatrix);\r\n        // this.shader.set(size,  this.rotation);\r\n        // this.shader.activate().setCameraMatrix(this.app.camera.viewMatrix).renderModel(this.model.preRender());\r\n        this.shader.setCameraMatrix(this.app.camera.viewMatrix);\r\n        this.shader.renderModel(this.model.preRender());\r\n\r\n    }\r\n}","import { Matrix4 } from '../Utility/Matrix4';\r\nimport { Vector3 } from '../Utility/Vector3';\r\nimport { Transform } from './Transform';\r\n\r\nexport enum CAMERA_MODE {\r\n    FREE = 0,\r\n    ORBIT = 1\r\n\r\n}\r\n\r\nexport class Camera {\r\n\r\n    projectionMatrix: Float32Array;\r\n    viewMatrix: Float32Array;\r\n    transform: Transform;\r\n\r\n    mode: CAMERA_MODE;\r\n\r\n    constructor(gl: WebGL2RenderingContext, fov: number = 45, near: number = 0.1, far: number = 100) {\r\n        // Setup the perspective matrix\r\n        this.projectionMatrix = new Float32Array(16);\r\n        let ratio = gl.canvas.width / gl.canvas.height;\r\n        Matrix4.perspective(this.projectionMatrix, fov || 45, ratio, near || 0.1, far || 100.0);\r\n\r\n        this.transform = new Transform();\t\t// Setup transform to control the position of the camera\r\n        this.viewMatrix = new Float32Array(16);\t// Cache the matrix that will hold the inverse of the transform.\r\n\r\n        this.mode = CAMERA_MODE.ORBIT;\t\t// Set what sort of control mode to use.\r\n    }\r\n\r\n    panX(v: number) {\r\n        if (this.mode === CAMERA_MODE.ORBIT) { return; } //  Panning on the X Axis is only allowed when in free mode\r\n        this.updateViewMatrix();\r\n        this.transform.position.x += this.transform.right[0] * v;\r\n        this.transform.position.y += this.transform.right[1] * v;\r\n        this.transform.position.z += this.transform.right[2] * v;\r\n    }\r\n\r\n    panY(v: number) {\r\n        this.updateViewMatrix();\r\n        this.transform.position.y += this.transform.up[1] * v;\r\n        if (this.mode === CAMERA_MODE.ORBIT) { return; } // Can only move up and down the y axix in orbit mode\r\n        this.transform.position.x += this.transform.up[0] * v;\r\n        this.transform.position.z += this.transform.up[2] * v;\r\n    }\r\n\r\n    panZ(v: number) {\r\n        this.updateViewMatrix();\r\n        if (this.mode === CAMERA_MODE.ORBIT) {\r\n            this.transform.position.z += v; // orbit mode does translate after rotate, so only need to set Z, the rotate will handle the rest.\r\n        } else {\r\n            // in freemode to move forward, we need to move based on our forward which is relative to our current rotation\r\n            this.transform.position.x += this.transform.forward[0] * v;\r\n            this.transform.position.y += this.transform.forward[1] * v;\r\n            this.transform.position.z += this.transform.forward[2] * v;\r\n        }\r\n    }\r\n\r\n    // To have different modes of movements, this function handles the view matrix update for the transform object.\r\n    updateViewMatrix() {\r\n        // Optimize camera transform update, no need for scale nor rotateZ\r\n        if (this.mode === CAMERA_MODE.FREE) {\r\n            this.transform.matView.reset()\r\n                .vtranslate(this.transform.position)\r\n                .rotateX(this.transform.rotation.x * Transform.deg2Rad)\r\n                .rotateY(this.transform.rotation.y * Transform.deg2Rad);\r\n\r\n        } else {\r\n            this.transform.matView.reset()\r\n                .rotateX(this.transform.rotation.x * Transform.deg2Rad)\r\n                .rotateY(this.transform.rotation.y * Transform.deg2Rad)\r\n                .vtranslate(this.transform.position);\r\n\r\n        }\r\n\r\n        this.transform.updateDirection();\r\n\r\n        // Cameras work by doing the inverse transformation on all meshes, the camera itself is a lie :)\r\n        Matrix4.invert(this.viewMatrix, this.transform.matView.raw);\r\n        return this.viewMatrix;\r\n    }\r\n    GetTranslatelessMatrix() {\r\n        let mat = new Float32Array(this.viewMatrix);\r\n        mat[12] = mat[13] = mat[14] = 0.0; // Reset Translation position in the Matrix to zero.\r\n        return mat;\r\n    }\r\n}\r\n\r\n// export class CameraOrbit extends Transform {\r\n//     constructor(gl: WebGL2RenderingContext, fov: number = 45, near: number = 0.1, far: number = 100) {\r\n//         super();\r\n//         // Setup the projection and invert matrices\r\n//         this.ubo = Fungi.Res.Ubo[Fungi.UBO_TRANSFORM];\r\n//         this.projectionMatrix = new Float32Array(16);\r\n//         this.invertedLocalMatrix = new Float32Array(16);\r\n\r\n//         var ratio = gl.canvas.width / gl.canvas.height;\r\n//         Matrix4.perspective(this.projectionMatrix, fov || 45, ratio, near || 0.1, far || 100.0);\r\n//         this.ubo.update(\"matProjection\",this.projectionMatrix); // Initialize The Transform UBO.\r\n\r\n//         // Orbit Camera will control things based on euler, its cheating but not ready for quaternions\r\n//         this.euler = new Vec3();\r\n//     }\r\n\r\n//     // Override how this transfer creates the localMatrix : Call Update, not this function in render loop.\r\n//     updateMatrix() {\r\n//         // Only Update the Matrix if its needed.\r\n//         // if(!this.position.isModified && !this.rotation.isModified && !this.euler.isModified) return this.localMatrix;\r\n\r\n//         Quaternion.setFromEuler(this.rotation,this.euler.x,this.euler.y,this.euler.z,\"YXZ\");\r\n//         Matrix4.fromQuaternion(this.localMatrix,this.rotation);\r\n//         this.localMatrix.resetTranslation().translate(this.position);\r\n\r\n//         // Set the modified indicator to false on all the transforms.\r\n//         this.position.isModified\t= false;\r\n//         this.rotation.isModified\t= false;\r\n//         this.euler.isModified\t\t= false;\r\n//         return this.localMatrix;\r\n//     }\r\n\r\n//     // Update the Matrices and UBO.\r\n//     update() {\r\n//         if(this.position.isModified || this.scale.isModified || this.euler.isModified) this.updateMatrix();\r\n\r\n//         Matrix4.invert(this.invertedLocalMatrix,this.localMatrix);\r\n//         this.ubo.update(\"matCameraView\",this.invertedLocalMatrix);\r\n//     }\r\n\r\n//     setEulerDegrees(x,y,z) { this.euler.set(x * DEG2RAD,y * DEG2RAD,z * DEG2RAD); return this; }\r\n// }\r\n\r\nexport class CameraController {\r\n    canvas: HTMLCanvasElement;\r\n    camera: Camera;\r\n    rotateRate: number;\r\n\r\n    yRotateRate: number;\r\n    xRotateRate: number;\r\n    xPanRate: number;\r\n    yPanRate: number;\r\n    zPanRate: number;\r\n\r\n    panRate: number;\r\n    zoomRate: number;\r\n    offsetX: number;\r\n    offsetY: number;\r\n    initX: number;\r\n    initY: number;\r\n    prevX: number;\r\n    prevY: number;\r\n\r\n    euler: Vector3;\r\n\r\n    onUpHandler: (e: MouseEvent) => void;\r\n    onMoveHandler: (e: MouseEvent) => void;\r\n\r\n    constructor(gl: WebGL2RenderingContext, camera: Camera) {\r\n        // let box = gl.canvas.getBoundingClientRect();\r\n        this.canvas = gl.canvas as HTMLCanvasElement;\t\t\t\t\t\t// Need access to the canvas html element, main to access events\r\n        this.camera = camera;\t\t\t\t\t\t\t// Reference to the camera to control\r\n\r\n        this.rotateRate = -300;\t\t\t\t\t\t\t// How fast to rotate, degrees per dragging delta\r\n        this.panRate = 5;\t\t\t\t\t\t\t\t// How fast to pan, max unit per dragging delta\r\n        this.zoomRate = 200;\t\t\t\t\t\t\t// How fast to zoom or can be viewed as forward/backward movement\r\n\r\n        this.yRotateRate = this.rotateRate / this.canvas.width * Math.PI / 180;\r\n        this.xRotateRate = this.rotateRate / this.canvas.height * Math.PI / 180;\r\n        this.xPanRate = this.panRate / this.canvas.width;\r\n        this.yPanRate = this.panRate / this.canvas.height;\r\n        this.zPanRate = this.zoomRate / this.canvas.height;\r\n\r\n        this.offsetX = 10; // box.left;\t\t\t\t\t\t// Help calc global x,y mouse cords.\r\n        this.offsetY = 10; // box.top;\r\n\r\n        this.initX = 0;\t\t\t\t\t\t\t\t\t// Starting X,Y position on mouse down\r\n        this.initY = 0;\r\n        this.prevX = 0;\t\t\t\t\t\t\t\t\t// Previous X,Y position on mouse move\r\n        this.prevY = 0;\r\n\r\n        // // tslint:disable-next-line:no-any\r\n        this.onUpHandler = (e: MouseEvent) => (this.onMouseUp(e));\t// Cache func reference that gets bound and unbound a lot\r\n        this.onMoveHandler = (e: MouseEvent) => { this.onMouseMove(e); };\r\n\r\n        this.canvas.addEventListener('mousedown', (e) => { this.onMouseDown(e); });\t\t// Initializes the up and move events\r\n        this.canvas.addEventListener('mousewheel', (e) => { this.onMouseWheel(e); });\t// Handles zoom/forward movement\r\n    }\r\n\r\n    // Transform mouse x,y cords to something useable by the canvas.\r\n    // tslint:disable-next-line:no-any\r\n    getMouseVec2(e: any) {\r\n        return { x: e.pageX - this.offsetX, y: e.pageY - this.offsetY };\r\n    }\r\n    setEulerDegrees(x: number, y: number, z: number) {\r\n        this.euler.set(x * Transform.deg2Rad, y * Transform.deg2Rad, z * Transform.deg2Rad); return this;\r\n    }\r\n    // Begin listening for dragging movement\r\n    // tslint:disable-next-line:no-any\r\n    onMouseDown(e: any) {\r\n        this.initX = this.prevX = e.pageX - this.offsetX;\r\n        this.initY = this.prevY = e.pageY - this.offsetY;\r\n\r\n        this.canvas.addEventListener('mouseup', this.onUpHandler);\r\n        this.canvas.addEventListener('mousemove', this.onMoveHandler);\r\n    }\r\n\r\n    // End listening for dragging movement\r\n    // tslint:disable-next-line:no-any\r\n    onMouseUp(e: any) {\r\n        this.canvas.removeEventListener('mouseup', this.onUpHandler);\r\n        this.canvas.removeEventListener('mousemove', this.onMoveHandler);\r\n    }\r\n    // tslint:disable-next-line:no-any\r\n    onMouseWheel(e: any) {\r\n        let delta = Math.max(-1, Math.min(1, (e.wheelDelta || -e.detail))); // Try to map wheel movement to a number between -1 and 1\r\n        this.camera.panZ(delta * (this.zoomRate / this.canvas.height));\t\t// Keep the movement speed the same, no matter the height diff\r\n    }\r\n    // tslint:disable-next-line:no-any\r\n    onMouseMove(e: any) {\r\n        let x = e.pageX - this.offsetX,\t// Get X,y where the canvas's position is origin.\r\n            y = e.pageY - this.offsetY,\r\n            dx = x - this.prevX,\t\t// Difference since last mouse move\r\n            dy = y - this.prevY;\r\n\r\n        // When shift is being helt down, we pan around else we rotate.\r\n        if (!e.shiftKey) {\r\n            // this.camera.euler.y += dx * this.yRotateRate;\r\n            // this.camera.euler.x += dy * this.xRotateRate;\r\n            this.camera.transform.rotation.y += dx * (this.rotateRate / this.canvas.width);\r\n            this.camera.transform.rotation.x += dy * (this.rotateRate / this.canvas.height);\r\n        } else {\r\n            this.camera.panX(-dx * (this.panRate / this.canvas.width));\r\n            this.camera.panY(dy * (this.panRate / this.canvas.height));\r\n        }\r\n\r\n        this.prevX = x;\r\n        this.prevY = y;\r\n    }\r\n}","import { Canvas } from './Core/Canvas';\r\nimport { Renderer } from './Core/Renderer';\r\nimport { Scene } from './Core/Scene';\r\n\r\nimport { Camera, CameraController } from './WebGL/Camera';\r\nimport { Texture, uvGrid } from './Core/Texture';\r\n\r\nimport { GridAxis } from './Mesh/Meshes/Primatives/GridAxis';\r\n\r\n// import { PointScreen } from './Mesh/Meshes/Primatives/PointScreen';\r\n// import { PointWorld } from './Mesh/Meshes/Primatives/PointWorld';\r\n// import { Quad } from './Mesh/Meshes/Primatives/Quad';\r\nimport { MulitQuad } from './Mesh/Meshes/Primatives/MulitQuad';\r\nimport { Cube } from './Mesh/Meshes/Primatives/Cube';\r\n\r\n// import { RectScreen } from './Geometry/CustomGeometry/RectScreen';\r\n// import { Rect } from './Mesh/Meshes/CustomGeometry/Rect';\r\n\r\nexport class NGL3dApp {\r\n\r\n    host: HTMLElement;\r\n    canvas: Canvas;\r\n    renderer: Renderer;\r\n    scene: Scene;\r\n\r\n    texture: Texture;\r\n\r\n    camera: Camera;\r\n    cameraCtrl: CameraController;\r\n\r\n    constructor(id: string) {\r\n        // console.log('id: ' + id + ', NGL3dApp 09 Init!!!!!');\r\n        const host = document.getElementById(id);\r\n        if (host) { this.host = host; }\r\n\r\n        this.scene = new Scene(this);\r\n        this.renderer = new Renderer(this);\r\n        this.canvas = new Canvas(this);\r\n\r\n        this.texture = new Texture(this);\r\n        this.texture.UploadTexture(uvGrid).then(() => {\r\n\r\n            this.camera = new Camera(this.canvas.gl);\r\n            this.camera.transform.position.set(0, 1, 3);\r\n            this.cameraCtrl = new CameraController(this.canvas.gl, this.camera);\r\n\r\n            this.Init();\r\n        });\r\n    }\r\n    Init() {\r\n        let dd = new GridAxis(this);\r\n        // console.log(dd);\r\n\r\n        // let d = new PointScreen(this);\r\n        // console.log(d);\r\n\r\n        // let d1 = new PointWorld(this);\r\n        // console.log(d1);\r\n\r\n        // let dd2 = new Quad(this);\r\n        // console.log(dd2);\r\n\r\n        // let dd3 = new Rect(this);\r\n        // console.log(dd3);\r\n\r\n        let dd5 = new MulitQuad(this);\r\n        // console.log(dd5);\r\n\r\n        let dd6 = new Cube(this);\r\n        // console.log(dd6);\r\n    }\r\n\r\n}\r\n\r\n// quad"],"names":["Canvas","constructor","app","gl","canvas","this","document","createElement","host","appendChild","width","clientWidth","height","clientHeight","getContext","cullFace","BACK","frontFace","CCW","enable","DEPTH_TEST","CULL_FACE","depthFunc","LEQUAL","blendFunc","SRC_ALPHA","ONE_MINUS_SRC_ALPHA","loop","clear","requestAnimationFrame","renderer","render","clearColor","Renderer","camera","updateViewMatrix","scene","geometries","forEach","e","Scene","NGL3dApp","add","mesh","push","uvGrid","require","Texture","uvGridWebGLTexture","async","path","LoadTexture","then","imgPath","webGLTex","ShaderUtility","src","Promise","resolve","reject","img","Image","onload","onerror","GridAxisShader","Shader","vertSrc","fragSrc","aryColor","pMatrix","super","uPointSize","uAngle","program","setPerspective","useProgram","uColor","getUniformLocation","uniform3fv","renderModel","model","setModelMatrix","transform","getViewMatrix","bindVertexArray","vao","indexCount","drawElements","drawMode","UNSIGNED_SHORT","drawArrays","vertexCount","GridAxis","MeshBase","v","f","shader","ro","t","initShader","GetVAO","p","incAxis","verts","half","size","i","VAO","LINES","createVertexArray","vertexComponentLen","length","strideLen","Float32Array","BYTES_PER_ELEMENT","bufVertices","createBuffer","bindBuffer","ARRAY_BUFFER","bufferData","STATIC_DRAW","enableVertexAttribArray","ATTR","vertexAttribPointer","FLOAT","projectionMatrix","Model","activate","setCameraMatrix","viewMatrix","preRender","ShaderQuad","set","angle","uniform1f","MulitQuad","geometry","rotation","Geometry","vert","index","undefined","UV","noCulling","doBlending","position","Vector3","z","CAMERA_MODE","Camera","fov","near","far","mode","ratio","Matrix4","Transform","ORBIT","panX","x","right","y","panY","up","panZ","forward","FREE","matView","reset","vtranslate","rotateX","rotateY","updateDirection","raw","GetTranslatelessMatrix","mat","CameraController","rotateRate","yRotateRate","xRotateRate","xPanRate","yPanRate","zPanRate","panRate","zoomRate","offsetX","offsetY","initX","initY","prevX","prevY","euler","onUpHandler","onMoveHandler","Math","PI","onMouseUp","onMouseMove","addEventListener","onMouseDown","onMouseWheel","getMouseVec2","pageX","pageY","setEulerDegrees","removeEventListener","delta","max","min","wheelDelta","detail","dx","dy","shiftKey","id","texture","cameraCtrl","getElementById","UploadTexture","Init","Cube"],"sourceRoot":""}