{"version":3,"file":"static/js/2960.d729e07a.chunk.js","mappings":"wLAIO,MAAMA,UAAiBC,EAAAA,GAO1BC,cACIC,MADkB,uDAAG,QACZ,KANbC,UAAiB,GAAG,KACpBC,cAAqB,GAAG,KACxBC,cAAqB,GAAG,KACxBC,QAAe,GAKX,MAAMC,EAAQ,IAAIC,EAAAA,IAAiB,SAAU,IAC7CC,KAAKC,OAAOC,IAAIJ,GAChBE,KAAKG,MAAMD,IAAIJ,GAGfE,KAAKC,OAAOG,SAASC,IAAI,EAAG,GAAI,KAGhCC,EAAAA,EAAAA,gBAAe,mFAAmFC,MAAMC,IACpG,IAAK,IAAIC,EAAI,EAAGA,EAAID,EAAe,SAAEE,SAAUD,EAC3CT,KAAKN,UAAUiB,KAAKH,EAAe,SAAEC,GAAa,SAAe,aAErEG,EAAYZ,KAAKG,MAAOH,KAAKN,UAAW,CAAC,EAAG,EAAG,KAE/CY,EAAAA,EAAAA,gBAAe,mFAAmFC,MAAMC,IACpG,IAAK,IAAIC,EAAI,EAAGA,EAAID,EAAe,SAAEE,SAAUD,EAC3CT,KAAKL,cAAcgB,KAAKH,EAAe,SAAEC,GAAa,SAAe,aAEzEG,EAAYZ,KAAKG,MAAOH,KAAKL,cAAe,CAAC,EAAG,EAAG,GAAG,KAG1DW,EAAAA,EAAAA,gBAAe,mFAAmFC,MAAMC,IACpG,IAAK,IAAIC,EAAI,EAAGA,EAAID,EAAe,SAAEE,SAAUD,EAC3CT,KAAKJ,cAAce,KAAKH,EAAe,SAAEC,GAAa,SAAe,aAEzEG,EAAYZ,KAAKG,MAAOH,KAAKJ,cAAe,CAAC,EAAG,EAAG,GAAG,IAG1DI,KAAKa,OAAO,GAEpB,EAEG,MAAMD,EAAc,CAACT,EAAoBW,EAAYC,KACxD,MAAMC,EAAW,IAAIjB,EAAAA,IACfkB,EAAW,IAAIlB,EAAAA,IAAwB,CAAEmB,cAAc,IAEvDC,EAAY,GACZC,EAAS,GACTC,EAAU,GAMhB,IAAIC,EAAK,EACLC,EAAK,EACLC,EAAQ,EAEZ,IAAK,IAAIf,EAAI,EAAGA,EAAIK,EAAMJ,SAAUD,EAAG,CACnC,MAAMgB,EAAQX,EAAML,GAEpB,IAAK,IAAIiB,EAAI,EAAGA,EAAID,EAAMf,SAAUgB,EAChC,IAAK,IAAIC,EAAI,EAAGA,EAAIF,EAAMC,GAAGhB,SAAUiB,EAAG,CAEtC,MAAOC,EAAMC,IAAQC,EAAAA,EAAAA,oBAAmBL,EAAMC,GAAGC,GAAG,GAAIF,EAAMC,GAAGC,GAAG,IACpEL,GAAMM,EACNL,GAAMM,EACNL,GAAS,EAET,MAAMO,EAjBJ,KAiBSH,GAnBV,mBAoBKI,EAlBJ,KAkBSH,GAnBV,mBAoBDV,EAAUR,KAAKoB,EAAG,EAAGC,GACrBZ,EAAOT,KAAKI,EAAM,GAAIA,EAAM,GAAIA,EAAM,IAElCY,EAAIF,EAAMC,GAAGhB,OAAS,GACtBW,EAAQV,KAAKsB,KAAKC,MAAMf,EAAUT,OAAS,GAAK,EAAGuB,KAAKC,MAAMf,EAAUT,OAAS,GAEzF,CAER,CACAM,EAASmB,SAASd,GAClBL,EAASoB,aAAa,WAAY,IAAIrC,EAAAA,IAA6BoB,EAAW,IAC9EH,EAASoB,aAAa,QAAS,IAAIrC,EAAAA,IAA6BqB,EAAQ,IACxEJ,EAASqB,wBACT,MAAMC,EAAO,IAAIvC,EAAAA,IAAmBiB,EAAUC,GAE9C,OADAd,EAAMD,IAAIoC,GACHA,CAAI,C","sources":["njslab/Workshop/workshop-three/Slowzone_Polyline/index.ts"],"sourcesContent":["import * as THREE from 'three';\r\nimport { RendererThree, } from '../../../../lib';\r\nimport { getJSONFromURL, MercatorProjection, } from 'njscore';\r\n\r\nexport class Solution extends RendererThree {\r\n\r\n    streetOSM: any = [];\r\n    routesTreated: any = [];\r\n    routesControl: any = [];\r\n    zones30: any = [];\r\n\r\n    constructor(id: string = 'main') {\r\n        super(id)\r\n\r\n        const light = new THREE.PointLight(0xffffff, 0.8);\r\n        this.camera.add(light);\r\n        this.scene.add(light);\r\n  \r\n\r\n        this.camera.position.set(0, 40, 48);\r\n\r\n        const path = '/static/research/slow-zone/';\r\n        getJSONFromURL('https://raw.githubusercontent.com/NamjuLee/data/master/Paris/street_osm.geojson').then((data) => {\r\n            for (let i = 0; i < data['features'].length; ++i) {\r\n                this.streetOSM.push(data['features'][i]['geometry']['coordinates']);\r\n            }\r\n            renderLines(this.scene, this.streetOSM, [0, 1, 1]);\r\n\r\n            getJSONFromURL('https://raw.githubusercontent.com/NamjuLee/data/master/Paris/treated-st.geojson').then((data) => {\r\n                for (let i = 0; i < data['features'].length; ++i) {\r\n                    this.routesTreated.push(data['features'][i]['geometry']['coordinates']);\r\n                }\r\n                renderLines(this.scene, this.routesTreated, [1, 0, 0]);\r\n            });\r\n\r\n            getJSONFromURL('https://raw.githubusercontent.com/NamjuLee/data/master/Paris/control-st.geojson').then((data) => {\r\n                for (let i = 0; i < data['features'].length; ++i) {\r\n                    this.routesControl.push(data['features'][i]['geometry']['coordinates']);\r\n                }\r\n                renderLines(this.scene, this.routesControl, [0, 1, 0]);\r\n            });\r\n\r\n            this.start();\r\n        });\r\n    }\r\n}\r\nexport const renderLines = (scene: THREE.Scene, paths: any, color: number[]) => {\r\n    const geometry = new THREE.BufferGeometry();\r\n    const material = new THREE.LineBasicMaterial({ vertexColors: true });\r\n\r\n    const positions = [];\r\n    const colors = [];\r\n    const indices = [];\r\n\r\n    const xOFf = -15478803.88731685;\r\n    const yOFf = -4766681.448690384;\r\n    const scale = 0.01;\r\n\r\n    let xC = 0\r\n    let yC = 0\r\n    let Count = 0\r\n\r\n    for (let i = 0; i < paths.length; ++i) {\r\n        const route = paths[i]\r\n\r\n        for (let j = 0; j < route.length; ++j) {\r\n            for (let k = 0; k < route[j].length; ++k) {\r\n\r\n                const [xPro, yPro] = MercatorProjection(route[j][k][0], route[j][k][1]);\r\n                xC += xPro;\r\n                yC += yPro;\r\n                Count += 1;\r\n\r\n                const x = (xPro + xOFf) * scale\r\n                const y = (yPro + yOFf) * scale\r\n                positions.push(x, 0, y)\r\n                colors.push(color[0], color[1], color[2]);\r\n\r\n                if (k < route[j].length - 1) {\r\n                    indices.push(Math.floor(positions.length / 3) - 1, Math.floor(positions.length / 3));\r\n                }\r\n            }\r\n        }\r\n    }\r\n    geometry.setIndex(indices);\r\n    geometry.setAttribute('position', new THREE.Float32BufferAttribute(positions, 3));\r\n    geometry.setAttribute('color', new THREE.Float32BufferAttribute(colors, 3));\r\n    geometry.computeBoundingSphere();\r\n    const line = new THREE.LineSegments(geometry, material);\r\n    scene.add(line);\r\n    return line;\r\n};"],"names":["Solution","RendererThree","constructor","super","streetOSM","routesTreated","routesControl","zones30","light","THREE","this","camera","add","scene","position","set","getJSONFromURL","then","data","i","length","push","renderLines","start","paths","color","geometry","material","vertexColors","positions","colors","indices","xC","yC","Count","route","j","k","xPro","yPro","MercatorProjection","x","y","Math","floor","setIndex","setAttribute","computeBoundingSphere","line"],"sourceRoot":""}