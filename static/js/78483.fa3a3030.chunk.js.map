{"version":3,"file":"static/js/78483.fa3a3030.chunk.js","mappings":"2KAAO,MA4CMA,EAAsBC,IAY/B,IAAIC,EAAID,EAAEE,QAAU,EAChBC,EAAIH,EAAE,aAAcI,MAAQJ,EAAE,GAAGE,OAAS,EAG9C,GAAU,IAANC,GAAiB,IAANF,EAAW,MAAO,GAOjC,IAAII,EAAGC,EAAI,EAEPC,EAAgB,GAGpB,IAAKF,EAAI,EAAGA,EAAIF,EAAGE,IAMf,IAHAE,EAAEF,GAAK,GAGFC,EAAI,EAAGA,EAAIL,EAAGK,IAGfC,EAAEF,GAAGC,GAAKN,EAAEM,GAAGD,GAIvB,OAAOE,CAAC,ECjFL,MAAMC,EASTC,YAAYC,EAAwBC,EAAkBC,EAAmBC,EAAWC,GAAY,KARhGJ,gBAAU,OACVK,OAAqB,GAAG,KACxBC,SAAG,OACHL,cAAQ,OAAUC,eAAS,OAC3BK,WAAqB,EAAE,KACvBC,YAAsB,EAAE,KACxBC,eAAS,OACTC,iBAAW,EAEPC,KAAKX,WAAaA,EAClBW,KAAKL,IAAM,IAAIM,EAAAA,GAAST,EAAGC,GAC3BO,KAAKF,UAAYI,EAAAA,GAAAA,iBACjBF,KAAKD,YAAc,kBACnBC,KAAKV,SAAWA,EAChBU,KAAKT,UAAYA,EACjBS,KAAKG,WACT,CACAA,YACIH,KAAKN,OAAOU,KAAK,CAAC,IAClBJ,KAAKN,OAAOU,KAAK,CAAC,IAClBJ,KAAKN,OAAOU,KAAK,CAAC,IAClBJ,KAAKN,OAAOU,KAAK,CAAC,GACtB,CACAC,WAAWC,GACP,OAAIA,EAAKC,OAAOP,OACZA,KAAKL,IAAIF,GAAK,GACP,KAGNO,KAAKL,IAAIF,EAAI,EAAKO,KAAKT,UAKhC,CACAiB,SACI,OAAOR,KAAKN,MAChB,CACAe,UAAUjB,EAAYc,GAClB,GAAIN,KAAKU,qBAAqBJ,GAAS,OACvC,IAAIK,EAAO,EACX,GAAInB,GAEA,GADAmB,EAAO,EAAIX,KAAKL,IAAIH,EAChBmB,GAAQX,KAAKV,SAAWU,KAAKN,OAAOb,OAAQ,CAC5C,GAAImB,KAAKY,mBAAmBpB,EAAGc,GAAS,OACxCN,KAAKL,IAAIH,GACb,OAIA,GADAmB,GAAQ,EAAIX,KAAKL,IAAIH,EACjBmB,GAAQ,EAAG,CACX,GAAIX,KAAKY,mBAAmBpB,EAAGc,GAAS,OACxCN,KAAKL,IAAIH,GACb,CAER,CACAoB,mBAAmBC,EAAgBP,GAC/B,MAAMQ,EAAMd,KAAKQ,SACjB,GAAIK,EACA,IAAK,IAAIpB,EAAI,EAAGA,EAAIqB,EAAIjC,SAAUY,EAC9B,IAAK,IAAID,EAAI,EAAGA,EAAIsB,EAAIrB,GAAGZ,SAAUW,EAAG,CAGpC,GAAe,IAFAsB,EAAIrB,GAAGD,GAEJ,CAEd,IAAIuB,EAASf,KAAKL,IAAIH,EAAIA,EAAI,EAC1BwB,EAAShB,KAAKL,IAAIF,EAAIA,EAC1B,GAAIsB,EAASf,KAAKX,WAAW4B,UAAW,CACpC,MAAMC,EAAQZ,EAAKZ,OAAOsB,GAAQD,GAElC,GAAIG,GAASA,EAAMC,OACf,OAAO,CAEf,CACJ,CACJ,MAGJ,IAAK,IAAI1B,EAAI,EAAGA,EAAIqB,EAAIjC,SAAUY,EAC9B,IAAK,IAAID,EAAI,EAAGA,EAAIsB,EAAIrB,GAAGZ,SAAUW,EAAG,CAEpC,GAAe,IADAsB,EAAIrB,GAAGD,GACJ,CAEd,IAAIuB,EAASf,KAAKL,IAAIH,EAAIA,EAAI,EAC1BwB,EAAShB,KAAKL,IAAIF,EAAIA,EAC1B,MAAMyB,EAAQZ,EAAKZ,OAAOsB,GAAQD,GAElC,GAAIG,GAASA,EAAMC,OACf,OAAO,CAEf,CACJ,CAGR,OAAO,CACX,CACAC,UAAUd,GACN,OAAO,CACX,CACAI,qBAAqBJ,GACjB,MAAMQ,EAAMd,KAAKQ,SACjB,IAAK,IAAIf,EAAI,EAAGA,EAAIqB,EAAIjC,SAAUY,EAC9B,IAAK,IAAID,EAAI,EAAGA,EAAIsB,EAAIrB,GAAGZ,SAAUW,EAAG,CAGpC,GAAe,IAFAsB,EAAIrB,GAAGD,GAEJ,CAEd,IAAIwB,EAAShB,KAAKL,IAAIF,EAAI,EAE1B,KAAIuB,EAAShB,KAAKX,WAAW4B,WAQzB,OAAO,EAR6B,CACpC,MAAMC,EAAQZ,EAAKZ,OAAOsB,GAAQhB,KAAKL,IAAIH,GAC3C,GAAIQ,KAAKL,IAAIF,EAAI,EAAIuB,GACbE,GAASA,EAAMC,OACf,OAAO,CAGnB,CAGJ,CACJ,CAGJ,OAAO,CACX,CACAE,OAAOC,GAEH,IAAK,IAAItC,EAAI,EAAGA,EAAIgB,KAAKN,OAAOb,SAAUG,EACtC,IAAK,IAAIC,EAAI,EAAGA,EAAIe,KAAKN,OAAOV,GAAGH,SAAUI,EAAG,CAC5C,IAAIsC,EAAMvB,KAAKL,IAAI6B,QACnBD,EAAI/B,GAAKP,EACTsC,EAAI9B,GAAKT,EACTgB,KAAKyB,YAAYH,EAAKC,EAC1B,CAER,CACAE,YAAYH,EAA+BC,GACvCD,EAAII,YACJJ,EAAIK,KACAJ,EAAI/B,EAAIQ,KAAKX,WAAWuC,eACxBL,EAAI9B,EAAIO,KAAKX,WAAWuC,eACxB5B,KAAKJ,WAAaI,KAAKX,WAAWuC,eAClC5B,KAAKH,YAAcG,KAAKX,WAAWuC,gBAGvCN,EAAIO,YACJP,EAAIQ,UAAY9B,KAAKF,UACrBwB,EAAIS,OACJT,EAAIU,YAAchC,KAAKD,YACvBuB,EAAIW,QACR,ECrJG,MAAMC,UAAe/C,EAQxBC,YAAYC,EAAwBC,EAAkBC,EAAmBC,EAAWC,GAChF0C,MAAM9C,EAAYC,EAAUC,EAAWC,EAAGC,GAAG,KARjDJ,gBAAU,OACVM,SAAG,OACHL,cAAQ,OAAUC,eAAS,OAC3BK,WAAqB,EAAE,KACvBC,YAAsB,EAAE,KACxBC,eAAS,OACTC,iBAAW,CAGX,CACAI,YACIH,KAAKN,OAAOU,KAAK,CAAC,IAClBJ,KAAKN,OAAOU,KAAK,CAAC,IAClBJ,KAAKN,OAAOU,KAAK,CAAC,IAClBJ,KAAKN,OAAOU,KAAK,CAAC,GACtB,CACAC,WAAWC,GACP,OAAIA,EAAKC,OAAOP,OACZA,KAAKL,IAAIF,GAAK,GACP,KAGNO,KAAKL,IAAIF,EAAI,EAAKO,KAAKT,UAKhC,CACAiB,SACI,OAAOR,KAAKN,MAChB,CACAe,UAAUjB,EAAYc,GAClB,GAAIN,KAAKU,qBAAqBJ,GAAS,OACvC,IAAIK,EAAO,EACX,GAAInB,GAEA,GADAmB,EAAO,EAAIX,KAAKL,IAAIH,EAChBmB,GAAQX,KAAKV,SAAWU,KAAKN,OAAO,GAAGb,OAAQ,CAC/C,GAAImB,KAAKY,mBAAmBpB,EAAGc,GAAS,OACxCN,KAAKL,IAAIH,GACb,OAGA,GADAmB,GAAQ,EAAIX,KAAKL,IAAIH,EACjBmB,GAAQ,EAAG,CACX,GAAIX,KAAKY,mBAAmBpB,EAAGc,GAAS,OACxCN,KAAKL,IAAIH,GACb,CAER,CACA4C,YAAYC,GAwBR,CAEJzB,mBAAmBC,EAAgBP,GAC/B,MAAMQ,EAAMd,KAAKQ,SACjB,GAAIK,EACA,IAAK,IAAIpB,EAAI,EAAGA,EAAIqB,EAAIjC,SAAUY,EAC9B,IAAK,IAAID,EAAI,EAAGA,EAAIsB,EAAIrB,GAAGZ,SAAUW,EAAG,CAGpC,GAAe,IAFAsB,EAAIrB,GAAGD,GAEJ,CAEd,IAAIuB,EAASf,KAAKL,IAAIH,EAAIA,EAAI,EAC1BwB,EAAShB,KAAKL,IAAIF,EAAIA,EAC1B,GAAIsB,EAASf,KAAKX,WAAW4B,UAAW,CACpC,MAAMC,EAAQZ,EAAKZ,OAAOsB,GAAQD,GAElC,GAAIG,GAASA,EAAMC,OACf,OAAO,CAEf,CACJ,CACJ,MAGJ,IAAK,IAAI1B,EAAI,EAAGA,EAAIqB,EAAIjC,SAAUY,EAC9B,IAAK,IAAID,EAAI,EAAGA,EAAIsB,EAAIrB,GAAGZ,SAAUW,EAAG,CAEpC,GAAe,IADAsB,EAAIrB,GAAGD,GACJ,CAEd,IAAIuB,EAASf,KAAKL,IAAIH,EAAIA,EAAI,EAC1BwB,EAAShB,KAAKL,IAAIF,EAAIA,EAC1B,MAAMyB,EAAQZ,EAAKZ,OAAOsB,GAAQD,GAElC,GAAIG,GAASA,EAAMC,OACf,OAAO,CAEf,CACJ,CAGR,OAAO,CACX,CACAC,UAAUd,GACN,MAAMQ,EAAMpC,EAAmBsB,KAAKN,QAIpC,GADA4C,QAAQC,IAAIzB,GACRA,EAAI,GAAGjC,OAAS,GAAKyB,EAAKkC,MAAQ,EAAIxC,KAAKL,IAAIH,EAC/CQ,KAAKL,IAAIH,GAAK,OAMd,GAAIQ,KAAKL,IAAIF,EAAIa,EAAKkC,MAAO,CAGzB,IAAIC,GAAQ,EACZ,IAAK,IAAIzD,EAAI,EAAGA,EAAI8B,EAAIjC,SAAUG,EAC1BsB,EAAKZ,OAAOM,KAAKL,IAAIF,EAAIT,GAAGgB,KAAKL,IAAIH,GAAG2B,SACxCsB,GAAQ,GAGhB,IAAKA,EACD,OAAO,CAGf,CAQJ,OALAzC,KAAKN,OAASoB,GAKP,CACX,CACAJ,qBAAqBJ,GACjB,MAAMQ,EAAMd,KAAKQ,SACjB,IAAK,IAAIf,EAAI,EAAGA,EAAIqB,EAAIjC,SAAUY,EAC9B,IAAK,IAAID,EAAI,EAAGA,EAAIsB,EAAIrB,GAAGZ,SAAUW,EAAG,CAGpC,GAAe,IAFAsB,EAAIrB,GAAGD,GAEJ,CAEd,IAAIwB,EAAShB,KAAKL,IAAIF,EAAI,EAE1B,KAAIuB,EAAShB,KAAKX,WAAW4B,WAQzB,OAAO,EAR6B,CACpC,MAAMC,EAAQZ,EAAKZ,OAAOsB,GAAQhB,KAAKL,IAAIH,GAC3C,GAAIQ,KAAKL,IAAIF,EAAI,EAAIuB,GACbE,GAASA,EAAMC,OACf,OAAO,CAGnB,CAGJ,CACJ,CAGJ,OAAO,CACX,CACAE,OAAOC,GACH,IAAK,IAAItC,EAAI,EAAGA,EAAIgB,KAAKN,OAAOb,SAAUG,EACtC,IAAK,IAAIC,EAAI,EAAGA,EAAIe,KAAKN,OAAOV,GAAGH,SAAUI,EAAG,CAC5C,IAAIsC,EAAMvB,KAAKL,IAAI6B,QACnBD,EAAI/B,GAAKP,EACTsC,EAAI9B,GAAKT,EACTgB,KAAKyB,YAAYH,EAAKC,EAC1B,CAER,CACAE,YAAYH,EAA+BC,GACvCD,EAAII,YACJJ,EAAIK,KACAJ,EAAI/B,EAAIQ,KAAKX,WAAWuC,eACxBL,EAAI9B,EAAIO,KAAKX,WAAWuC,eACxB5B,KAAKJ,WAAaI,KAAKX,WAAWuC,eAClC5B,KAAKH,YAAcG,KAAKX,WAAWuC,gBAGvCN,EAAIO,YACJP,EAAIQ,UAAY9B,KAAKF,UACrBwB,EAAIS,OACJT,EAAIU,YAAchC,KAAKD,YACvBuB,EAAIW,QACR,ECxMG,MAAMS,UAAevD,EAQxBC,YAAYC,EAAwBC,EAAkBC,EAAmBC,EAAWC,GAChF0C,MAAM9C,EAAYC,EAAUC,EAAWC,EAAGC,GAAG,KARjDJ,gBAAU,OACVM,SAAG,OACHL,cAAQ,OAAUC,eAAS,OAC3BK,WAAqB,EAAE,KACvBC,YAAsB,EAAE,KACxBC,eAAS,OACTC,iBAAW,CAGX,CACAI,YACIH,KAAKN,OAAOU,KAAK,CAAC,EAAG,IACrBJ,KAAKN,OAAOU,KAAK,CAAC,EAAG,GAGzB,CACAC,WAAWC,GACP,OAAIA,EAAKC,OAAOP,OACZA,KAAKL,IAAIF,GAAK,GACP,KAGNO,KAAKL,IAAIF,EAAI,EAAKO,KAAKT,UAKhC,CACAiB,SACI,OAAOR,KAAKN,MAChB,CACAe,UAAUjB,EAAYc,GAClB,GAAIN,KAAKU,qBAAqBJ,GAAS,OACvC,IAAIK,EAAO,EACX,GAAInB,GAEA,GADAmB,EAAO,EAAIX,KAAKL,IAAIH,EAChBmB,GAAQX,KAAKV,SAAWU,KAAKN,OAAO,GAAGb,OAAQ,CAC/C,GAAImB,KAAKY,mBAAmBpB,EAAGc,GAAS,OACxCN,KAAKL,IAAIH,GACb,OAGA,GADAmB,GAAQ,EAAIX,KAAKL,IAAIH,EACjBmB,GAAQ,EAAG,CACX,GAAIX,KAAKY,mBAAmBpB,EAAGc,GAAS,OACxCN,KAAKL,IAAIH,GACb,CAER,CACA4C,YAAYC,GAwBR,CAEJzB,mBAAmBC,EAAgBP,GAC/B,MAAMQ,EAAMd,KAAKQ,SACjB,GAAIK,EACA,IAAK,IAAIpB,EAAI,EAAGA,EAAIqB,EAAIjC,SAAUY,EAC9B,IAAK,IAAID,EAAI,EAAGA,EAAIsB,EAAIrB,GAAGZ,SAAUW,EAAG,CAGpC,GAAe,IAFAsB,EAAIrB,GAAGD,GAEJ,CAEd,IAAIuB,EAASf,KAAKL,IAAIH,EAAIA,EAAI,EAC1BwB,EAAShB,KAAKL,IAAIF,EAAIA,EAC1B,GAAIsB,EAASf,KAAKX,WAAW4B,UAAW,CACpC,MAAMC,EAAQZ,EAAKZ,OAAOsB,GAAQD,GAElC,GAAIG,GAASA,EAAMC,OACf,OAAO,CAEf,CACJ,CACJ,MAGJ,IAAK,IAAI1B,EAAI,EAAGA,EAAIqB,EAAIjC,SAAUY,EAC9B,IAAK,IAAID,EAAI,EAAGA,EAAIsB,EAAIrB,GAAGZ,SAAUW,EAAG,CAEpC,GAAe,IADAsB,EAAIrB,GAAGD,GACJ,CAEd,IAAIuB,EAASf,KAAKL,IAAIH,EAAIA,EAAI,EAC1BwB,EAAShB,KAAKL,IAAIF,EAAIA,EAC1B,MAAMyB,EAAQZ,EAAKZ,OAAOsB,GAAQD,GAElC,GAAIG,GAASA,EAAMC,OACf,OAAO,CAEf,CACJ,CAGR,OAAO,CACX,CACAC,UAAUd,GACN,MAAMQ,EAAMpC,EAAmBsB,KAAKN,QAIpC,GADA4C,QAAQC,IAAIzB,GACRA,EAAI,GAAGjC,OAAS,GAAKyB,EAAKkC,MAAQ,EAAIxC,KAAKL,IAAIH,EAC/CQ,KAAKL,IAAIH,GAAK,OAMd,GAAIQ,KAAKL,IAAIF,EAAIa,EAAKkC,MAAO,CAGzB,IAAIC,GAAQ,EACZ,IAAK,IAAIzD,EAAI,EAAGA,EAAI8B,EAAIjC,SAAUG,EAC1BsB,EAAKZ,OAAOM,KAAKL,IAAIF,EAAIT,GAAGgB,KAAKL,IAAIH,GAAG2B,SACxCsB,GAAQ,GAGhB,IAAKA,EACD,OAAO,CAGf,CAQJ,OALAzC,KAAKN,OAASoB,GAKP,CACX,CACAJ,qBAAqBJ,GACjB,MAAMQ,EAAMd,KAAKQ,SACjB,IAAK,IAAIf,EAAI,EAAGA,EAAIqB,EAAIjC,SAAUY,EAC9B,IAAK,IAAID,EAAI,EAAGA,EAAIsB,EAAIrB,GAAGZ,SAAUW,EAAG,CAGpC,GAAe,IAFAsB,EAAIrB,GAAGD,GAEJ,CAEd,IAAIwB,EAAShB,KAAKL,IAAIF,EAAI,EAE1B,KAAIuB,EAAShB,KAAKX,WAAW4B,WAQzB,OAAO,EAR6B,CACpC,MAAMC,EAAQZ,EAAKZ,OAAOsB,GAAQhB,KAAKL,IAAIH,GAC3C,GAAIQ,KAAKL,IAAIF,EAAI,EAAIuB,GACbE,GAASA,EAAMC,OACf,OAAO,CAGnB,CAGJ,CACJ,CAGJ,OAAO,CACX,CACAE,OAAOC,GACH,IAAK,IAAItC,EAAI,EAAGA,EAAIgB,KAAKN,OAAOb,SAAUG,EACtC,IAAK,IAAIC,EAAI,EAAGA,EAAIe,KAAKN,OAAOV,GAAGH,SAAUI,EAAG,CAC5C,IAAIsC,EAAMvB,KAAKL,IAAI6B,QACnBD,EAAI/B,GAAKP,EACTsC,EAAI9B,GAAKT,EACTgB,KAAKyB,YAAYH,EAAKC,EAC1B,CAER,CACAE,YAAYH,EAA+BC,GACvCD,EAAII,YACJJ,EAAIK,KACAJ,EAAI/B,EAAIQ,KAAKX,WAAWuC,eACxBL,EAAI9B,EAAIO,KAAKX,WAAWuC,eACxB5B,KAAKJ,WAAaI,KAAKX,WAAWuC,eAClC5B,KAAKH,YAAcG,KAAKX,WAAWuC,gBAGvCN,EAAIO,YACJP,EAAIQ,UAAY9B,KAAKF,UACrBwB,EAAIS,OACJT,EAAIU,YAAchC,KAAKD,YACvBuB,EAAIW,QACR,ECxMG,MAAMU,UAAexD,EAQxBC,YAAYC,EAAwBC,EAAkBC,EAAmBC,EAAWC,GAChF0C,MAAM9C,EAAYC,EAAUC,EAAWC,EAAGC,GAAG,KARjDJ,gBAAU,OACVM,SAAG,OACHL,cAAQ,OAAUC,eAAS,OAC3BK,WAAqB,EAAE,KACvBC,YAAsB,EAAE,KACxBC,eAAS,OACTC,iBAAW,CAGX,CACAI,YACIH,KAAKN,OAAOU,KAAK,CAAC,IAClBJ,KAAKN,OAAOU,KAAK,CAAC,IAClBJ,KAAKN,OAAOU,KAAK,CAAC,IAClBJ,KAAKN,OAAOU,KAAK,CAAC,GACtB,CACAC,WAAWC,GACP,OAAIA,EAAKC,OAAOP,OACZA,KAAKL,IAAIF,GAAK,GACP,KAGNO,KAAKL,IAAIF,EAAI,EAAKO,KAAKT,UAKhC,CACAiB,SACI,OAAOR,KAAKN,MAChB,CACAe,UAAUjB,EAAYc,GAClB,GAAIN,KAAKU,qBAAqBJ,GAAS,OACvC,IAAIK,EAAO,EACX,GAAInB,GAEA,GADAmB,EAAO,EAAIX,KAAKL,IAAIH,EAChBmB,GAAQX,KAAKV,SAAWU,KAAKN,OAAO,GAAGb,OAAQ,CAC/C,GAAImB,KAAKY,mBAAmBpB,EAAGc,GAAS,OACxCN,KAAKL,IAAIH,GACb,OAGA,GADAmB,GAAQ,EAAIX,KAAKL,IAAIH,EACjBmB,GAAQ,EAAG,CACX,GAAIX,KAAKY,mBAAmBpB,EAAGc,GAAS,OACxCN,KAAKL,IAAIH,GACb,CAER,CACA4C,YAAYC,GAwBR,CAEJzB,mBAAmBC,EAAgBP,GAC/B,MAAMQ,EAAMd,KAAKQ,SACjB,GAAIK,EACA,IAAK,IAAIpB,EAAI,EAAGA,EAAIqB,EAAIjC,SAAUY,EAC9B,IAAK,IAAID,EAAI,EAAGA,EAAIsB,EAAIrB,GAAGZ,SAAUW,EAAG,CAGpC,GAAe,IAFAsB,EAAIrB,GAAGD,GAEJ,CAEd,IAAIuB,EAASf,KAAKL,IAAIH,EAAIA,EAAI,EAC1BwB,EAAShB,KAAKL,IAAIF,EAAIA,EAC1B,GAAIsB,EAASf,KAAKX,WAAW4B,UAAW,CACpC,MAAMC,EAAQZ,EAAKZ,OAAOsB,GAAQD,GAElC,GAAIG,GAASA,EAAMC,OACf,OAAO,CAEf,CACJ,CACJ,MAGJ,IAAK,IAAI1B,EAAI,EAAGA,EAAIqB,EAAIjC,SAAUY,EAC9B,IAAK,IAAID,EAAI,EAAGA,EAAIsB,EAAIrB,GAAGZ,SAAUW,EAAG,CAEpC,GAAe,IADAsB,EAAIrB,GAAGD,GACJ,CAEd,IAAIuB,EAASf,KAAKL,IAAIH,EAAIA,EAAI,EAC1BwB,EAAShB,KAAKL,IAAIF,EAAIA,EAC1B,MAAMyB,EAAQZ,EAAKZ,OAAOsB,GAAQD,GAElC,GAAIG,GAASA,EAAMC,OACf,OAAO,CAEf,CACJ,CAGR,OAAO,CACX,CACAC,UAAUd,GACN,MAAMQ,EAAMpC,EAAmBsB,KAAKN,QAIpC,GADA4C,QAAQC,IAAIzB,GACRA,EAAI,GAAGjC,OAAS,GAAKyB,EAAKkC,MAAQ,EAAIxC,KAAKL,IAAIH,EAC/CQ,KAAKL,IAAIH,GAAK,OAMd,GAAIQ,KAAKL,IAAIF,EAAIa,EAAKkC,MAAO,CAGzB,IAAIC,GAAQ,EACZ,IAAK,IAAIzD,EAAI,EAAGA,EAAI8B,EAAIjC,SAAUG,EAC1BsB,EAAKZ,OAAOM,KAAKL,IAAIF,EAAIT,GAAGgB,KAAKL,IAAIH,GAAG2B,SACxCsB,GAAQ,GAGhB,IAAKA,EACD,OAAO,CAGf,CAQJ,OALAzC,KAAKN,OAASoB,GAKP,CACX,CACAJ,qBAAqBJ,GACjB,MAAMQ,EAAMd,KAAKQ,SACjB,IAAK,IAAIf,EAAI,EAAGA,EAAIqB,EAAIjC,SAAUY,EAC9B,IAAK,IAAID,EAAI,EAAGA,EAAIsB,EAAIrB,GAAGZ,SAAUW,EAAG,CAGpC,GAAe,IAFAsB,EAAIrB,GAAGD,GAEJ,CAEd,IAAIwB,EAAShB,KAAKL,IAAIF,EAAI,EAE1B,KAAIuB,EAAShB,KAAKX,WAAW4B,WAQzB,OAAO,EAR6B,CACpC,MAAMC,EAAQZ,EAAKZ,OAAOsB,GAAQhB,KAAKL,IAAIH,GAC3C,GAAIQ,KAAKL,IAAIF,EAAI,EAAIuB,GACbE,GAASA,EAAMC,OACf,OAAO,CAGnB,CAGJ,CACJ,CAGJ,OAAO,CACX,CACAE,OAAOC,GACH,IAAK,IAAItC,EAAI,EAAGA,EAAIgB,KAAKN,OAAOb,SAAUG,EACtC,IAAK,IAAIC,EAAI,EAAGA,EAAIe,KAAKN,OAAOV,GAAGH,SAAUI,EAAG,CAC5C,IAAIsC,EAAMvB,KAAKL,IAAI6B,QACnBD,EAAI/B,GAAKP,EACTsC,EAAI9B,GAAKT,EACTgB,KAAKyB,YAAYH,EAAKC,EAC1B,CAER,CACAE,YAAYH,EAA+BC,GACvCD,EAAII,YACJJ,EAAIK,KACAJ,EAAI/B,EAAIQ,KAAKX,WAAWuC,eACxBL,EAAI9B,EAAIO,KAAKX,WAAWuC,eACxB5B,KAAKJ,WAAaI,KAAKX,WAAWuC,eAClC5B,KAAKH,YAAcG,KAAKX,WAAWuC,gBAGvCN,EAAIO,YACJP,EAAIQ,UAAY9B,KAAKF,UACrBwB,EAAIS,OACJT,EAAIU,YAAchC,KAAKD,YACvBuB,EAAIW,QACR,EC3MG,MAAMW,EAMTxD,YAAYC,EAAwBmD,EAAeK,GAAiB,KALpExD,gBAAU,OACVmD,WAAK,OACLK,YAAM,OACNnD,OAAoB,GAAG,KACvBoD,YAAsB,EAElB9C,KAAKX,WAAaA,EAClBW,KAAK8C,WAAaD,EAClB7C,KAAKwC,MAAQA,EACbxC,KAAK6C,OAASA,EACd7C,KAAK+C,MACT,CACAA,OACI,IAAK,IAAItD,EAAI,EAAGA,EAAIO,KAAK6C,SAAUpD,EAAG,CAClC,IAAIuD,EAAqB,GACzB,IAAK,IAAIxD,EAAI,EAAGA,EAAIQ,KAAKwC,QAAShD,EAC9BwD,EAAU5C,KAAK,IAAI6C,EAAMjD,KAAM,gBAAiB,qBAEpDA,KAAKN,OAAOU,KAAK4C,EACrB,CACJ,CACAzC,OAAO2C,GACH,OAAIlD,KAAKmD,eAAeD,KAGpBlD,KAAKX,WAAWc,aACT,EAIf,CACAiD,SACI,OAAwB,IAApBpD,KAAK8C,UAkBb,CACAO,eACI,IAAIC,EAAkB,GAClBN,EAAqB,GACzB,IAAK,IAAIxD,EAAI,EAAGA,EAAIQ,KAAKwC,QAAShD,EAC9BwD,EAAU5C,KAAK,IAAI6C,EAAMjD,KAAM,gBAAiB,qBAEpDsD,EAAKlD,KAAK4C,GACVM,EAAKC,OAAOvD,KAAKN,QACjB4C,QAAQC,IAAIe,GACZtD,KAAKN,OAAS4D,CAClB,CAQAE,aACI,MAAMC,EAAQzD,KAAK0D,aACnB,GAAqB,IAAjBD,EAAM5E,OAAgB,OAAO,EACjC,IAAI8E,EAAY,EAChB,MAAMC,EAAuB,GAE7B,IAAK,IAAI5E,EAAI,EAAGA,EAAIyE,EAAM5E,SAAUG,EAAG,CACnC,IAAIgE,EAAqB,GACzB,IAAK,IAAIxD,EAAI,EAAGA,EAAIQ,KAAKwC,QAAShD,EAC9BwD,EAAU5C,KAAK,IAAI6C,EAAMjD,KAAM,gBAAiB,qBAEpD4D,EAAUxD,KAAK4C,GACfhD,KAAKX,WAAWwE,mBACpB,CAEA,IAAK,IAAI7E,EAAI,EAAGA,EAAIgB,KAAKN,OAAOb,SAAUG,EAClCyE,EAAME,KAAe3E,EACrB2E,IAEAC,EAAUxD,KAAKJ,KAAKN,OAAOV,IAInC,OADAgB,KAAKN,OAASkE,GACP,CACX,CACAE,SACI,CAEJJ,aACI,MAAMD,EAAQ,GACd,IAAK,IAAIhE,EAAI,EAAGA,EAAIO,KAAKN,OAAOb,SAAUY,EAAG,CAEzC,IAAIsE,GAAa,EACjB,IAAK,IAAIvE,EAAI,EAAGA,EAAIQ,KAAKN,OAAOD,GAAGZ,SAAUW,EACpCQ,KAAKN,OAAOD,GAAGD,GAAG2B,SAAU4C,GAAa,GAE9CA,GACAN,EAAMrD,KAAKX,EAEnB,CACA,OAAOgE,CACX,CACAN,eAAeD,GACX,GAA2B,IAAvBlD,KAAKN,OAAOb,OAAgB,OAChC,MAAMiC,EAAMoC,EAAM1C,SAElB,IAAIwD,GAAoB,EACxB,IAAK,IAAIvE,EAAI,EAAGA,EAAIqB,EAAIjC,SAAUY,EAC9B,IAAK,IAAID,EAAI,EAAGA,EAAIsB,EAAIrB,GAAGZ,SAAUW,EAAG,CAEpC,GAAe,IADAsB,EAAIrB,GAAGD,GACJ,CAEd,IAAIuB,EAASmC,EAAMvD,IAAIH,EAAIA,EACvBwB,EAASkC,EAAMvD,IAAIF,EAAIA,EAAI,GAG3BuB,EAAShB,KAAK6C,OAAS,GAAK7C,KAAKN,OAAOsB,GAAQD,IAAWf,KAAKN,OAAOsB,GAAQD,GAAQI,UACvF6C,GAAW,EAEnB,CACJ,CAGJ,GAAIA,EAAU,CACV,IAAK,IAAIvE,EAAI,EAAGA,EAAIqB,EAAIjC,SAAUY,EAC9B,IAAK,IAAID,EAAI,EAAGA,EAAIsB,EAAIrB,GAAGZ,SAAUW,EAAG,CAEpC,GAAe,IADAsB,EAAIrB,GAAGD,GACJ,CACd,MAAMuB,EAASmC,EAAMvD,IAAIH,EAAIA,EACvBwB,EAASkC,EAAMvD,IAAIF,EAAIA,EAAI,EAEjC6C,QAAQC,IAAIvB,EAAQD,GACpBuB,QAAQC,IAAIvC,KAAKN,QAEbsB,EAAShB,KAAK6C,OAAS,IACvB7C,KAAKN,OAAOsB,EAAS,GAAGD,GAAQI,QAAS,EACzCnB,KAAKN,OAAOsB,EAAS,GAAGD,GAAQjB,UAAYoD,EAAMpD,UAE1D,CACJ,CAEJ,OAAO,CACX,CACA,OAAO,CACX,CACAmE,cACI,MAAMX,EAAO,GACb,IAAK,IAAI7D,EAAI,EAAGA,EAAIO,KAAKN,OAAOb,SAAUY,EAAG,CACzC,MAAMyE,EAAU,GAChB,IAAK,IAAI1E,EAAI,EAAGA,EAAIQ,KAAKN,OAAOD,GAAGZ,SAAUW,EACzC0E,EAAQ9D,KAAKJ,KAAKN,OAAOD,GAAGD,GAAG2E,YAEnCb,EAAKlD,KAAK8D,EACd,CACA,OAAOZ,CACX,CACAjC,OAAOC,GAGH,IAAI8C,GAAqB,EAGzB,IAAK,IAAI3E,EAAI,EAAGA,EAAIO,KAAKN,OAAOb,SAAUY,EACtC,IAAK,IAAID,EAAI,EAAGA,EAAIQ,KAAKN,OAAOD,GAAGZ,SAAUW,EAGrCQ,KAAKN,OAAOD,GAAGD,GAAG2B,QAAUiD,IAC5BpE,KAAK8C,WAAarD,EAClB2E,GAAqB,GAIzBpE,KAAKN,OAAOD,GAAGD,GAAG6B,OAAOC,EAAK9B,EAAGC,EAI7C,EAEG,MAAMwD,EAOT7D,YAAYiF,EAAoBvE,EAAmBC,GAAsB,KANzEsE,cAAQ,OACRlD,QAAkB,EAAM,KACxBrB,eAAS,OACTC,iBAAW,OACXyC,MAAgB,EAAE,KAClBK,OAAiB,EAEb7C,KAAKqE,SAAWA,EAChBrE,KAAKF,UAAYA,EACjBE,KAAKD,YAAcA,CACvB,CACAoE,WACI,MAAMG,EAAI,IAAIrB,EAAMjD,KAAKqE,SAAUrE,KAAKF,UAAWE,KAAKD,aAExD,OADAuE,EAAEnD,OAASnB,KAAKmB,OACTmD,CACX,CACAjD,OAAOC,EAA+B9B,EAAWC,GAC7C6B,EAAII,YAEJJ,EAAIK,KAAKnC,EAAIQ,KAAKqE,SAAShF,WAAWuC,eAAgBnC,EAAIO,KAAKqE,SAAShF,WAAWuC,eAAgB5B,KAAKwC,MAAQxC,KAAKqE,SAAShF,WAAWuC,eAAgB5B,KAAK6C,OAAS7C,KAAKqE,SAAShF,WAAWuC,gBAChMN,EAAIO,YACJP,EAAIQ,UAAY9B,KAAKF,UACrBwB,EAAIS,OACJT,EAAIU,YAAchC,KAAKD,YACvBuB,EAAIW,QACR,ECrNG,IAAKsC,GAKX,SALWA,GAAAA,EAAM,YAANA,EAAM,cAANA,EAAM,gBAANA,EAAM,YAKjB,CALWA,IAAAA,EAAM,KAOX,MAAMC,EAITpF,YAAYC,GAAyB,KAHrCA,gBAAU,OACVoF,QAAoB,GAGhBzE,KAAKX,WAAaA,CAEtB,CACAqF,UAAUC,GACN3E,KAAKyE,QAAQrE,KAAKuE,EACtB,CACAC,kBACI,OAAO5E,KAAKyE,QAAQI,OACxB,CACAtE,OAAO2C,GACH,MAAMpC,EAAMoC,EAAM1C,SACZsE,EAAM9E,KAAKX,WAAWgF,SAAS3E,OAGrC,IAAIqF,EAAY/E,KAAKX,WAAWgF,SAASvB,WAAa,EAAI,EAAI,EAAI9C,KAAKX,WAAWgF,SAASvB,WAAa,EACxGR,QAAQC,IAAI,YAAawC,GAEzB,IAAIC,EAAe,EAEnB,IAAK,IAAIvF,EAAIsF,EAAWtF,EAAIqF,EAAIjG,OAAS,IAAKY,EAC1C,IAAK,IAAID,EAAI,EAAGA,EAAIsF,EAAIrF,GAAGZ,OAAS,IAAKW,EAAG,CAExC,IAAIyF,GAAW,EACf,IAAK,IAAIC,EAAO,EAAGA,EAAOpE,EAAIjC,SAAUqG,EACpC,IAAK,IAAIC,EAAO,EAAGA,EAAOrE,EAAIoE,GAAMrG,SAAUsG,EAAM,CAChD,MAAMC,EAAK5F,EAAI2F,EAGTjE,EAAQ4D,EAFHrF,EAAIyF,GAEOE,GAGP,IAFAtE,EAAIoE,GAAMC,IAELjE,EAAMC,SACtB8D,GAAW,EAInB,CAGAA,GAEAD,GAKR,CAGJ1C,QAAQC,IAAI,YAAawC,EAAW,eAAgBC,GACpDhF,KAAKqF,cACT,CACAC,KAAK9F,EAAWC,EAAWqB,GAEvB,CAEJuE,eAGI,GAFYE,KAAKC,SAEP,GAAK,CAEX,MAAMC,EAAOF,KAAKC,SACdC,EAAO,GACPzF,KAAK0E,UAAUH,EAAOmB,MACf,GAAMD,GAAQA,EAAO,GAC5BzF,KAAK0E,UAAUH,EAAO1D,OACf,GAAM4E,GAAQA,EAAO,GAC5BzF,KAAK0E,UAAUH,EAAOoB,QAEtB3F,KAAK0E,UAAUH,EAAOqB,KAE9B,CAGJ,ECjFG,MAAMC,EAmCTzG,YAAY0G,EAA4BC,EAAkB9E,EAAmB+E,EAAeC,GAAgB,KAlC5GH,kBAAY,OAEZI,YAAM,OACNC,GAAK,EAAE,KACPC,IAAM,EAAE,KACRC,aAAe,GAAG,KAClBC,YAAc,GAAG,KACjBC,QAAU,GAAG,KACbC,cAAe,EAAM,KACrBC,aAAc,EAAM,KASpBC,eAAS,OACTrC,cAAQ,OACRsC,YAAM,OAENC,MAAgB,EAAE,KAClBhF,eAAyB,GAAG,KAC5BqE,MAAgB,GAAG,KACnBF,cAAQ,OACR9E,eAAS,OACT4F,kBAA4B,EAAM,KAElCC,WAAa,EAAE,KACfC,UAAY,EAAE,KAEdC,OAAiB,EAGbhH,KAAK8F,aAAeA,EACpB9F,KAAK4B,eAAiBoE,EACtBhG,KAAK+F,SAAWA,EAChB/F,KAAKiB,UAAYA,EAEjBjB,KAAKkG,OAASlG,KAAK8F,aAAamB,WAAWf,OAC3ClG,KAAKuG,SAAWvG,KAAKkG,OAAO1D,MAAQxC,KAAKsG,aAAe,EACxDtG,KAAKiG,MAAQA,EAEbiB,SAASC,UAAaC,GAAqBpH,KAAKqH,eAAeD,GAC/DF,SAASI,QAAWF,GAAqBpH,KAAKuH,aAAaH,GAI3DpH,KAAK+C,MACT,CACOsE,eAAeD,GAClBpH,KAAK6G,kBAAmB,EACpB7G,KAAKgH,QAEK,UAAVI,EAAEI,KAA6B,eAAVJ,EAAEI,KACvBxH,KAAKwG,cAAe,EACpBxG,KAAK0G,UAAUjG,WAAU,EAAMT,KAAKqE,WAErB,SAAV+C,EAAEI,KAA4B,cAAVJ,EAAEI,KAC3BxH,KAAKyG,aAAc,EACnBzG,KAAK0G,UAAUjG,WAAU,EAAOT,KAAKqE,WAEtB,OAAV+C,EAAEI,KAA0B,YAAVJ,EAAEI,KACzBxH,KAAKyG,aAAc,EACnBzG,KAAK0G,UAAUtF,UAAUpB,KAAKqE,WAEf,SAAV+C,EAAEI,KAA4B,cAAVJ,EAAEI,MAC3BxH,KAAKyG,aAAc,EACnBzG,KAAK0G,UAAUrG,WAAWL,KAAKqE,WAEvC,CAEOkD,aAAaH,GACF,UAAVA,EAAEI,KAA6B,eAAVJ,EAAEI,IACvBxH,KAAKwG,cAAe,EAEL,SAAVY,EAAEI,KAA4B,cAAVJ,EAAEI,MAC3BxH,KAAKyG,aAAc,EAE3B,CAcAgB,qBACIzH,KAAK8G,aACL9G,KAAK8F,aAAamB,WAAWS,GAAGC,UAAS,kBAAc3H,KAAK8G,WAChE,CACAjD,oBACI7D,KAAK+G,YACL/G,KAAK8F,aAAamB,WAAWW,GAAGD,UAAS,yBAAqB3H,KAAK+G,UACvE,CACAhE,OACI/C,KAAKgH,OAAQ,EACbhH,KAAKqE,SAAW,IAAIzB,EAAS5C,KAAMA,KAAK+F,SAAU/F,KAAKiB,WACvDjB,KAAK2G,OAAS,IAAInC,EAAOxE,MACzBA,KAAKG,YACLH,KAAK6H,QACT,CACAA,SACI7H,KAAK8G,WAAa,EAClB9G,KAAK+G,UAAY,EACjB/G,KAAK8F,aAAamB,WAAWS,GAAGC,UAAS,kBAAc3H,KAAK8G,YAC5D9G,KAAK8F,aAAamB,WAAWW,GAAGD,UAAS,yBAAqB3H,KAAK+G,UACvE,CACA5G,YAEI,GADAH,KAAKqE,SAASb,aACVxD,KAAKqE,SAASjB,SAEd,YADAd,QAAQC,IAAI,aAGhB,MAAMuF,EAAOvC,KAAKC,SACdsC,EAAO,GACP9H,KAAK0G,UAAY,IAAIxE,EAAOlC,KAAMA,KAAK+F,SAAU/F,KAAKiB,UAAWsE,KAAKwC,MAAsB,GAAhB/H,KAAK+F,UAAiB,GAC3F,GAAM+B,GAAQA,EAAO,GAC5B9H,KAAK0G,UAAY,IAAIhE,EAAO1C,KAAMA,KAAK+F,SAAU/F,KAAKiB,UAAWsE,KAAKwC,MAAsB,GAAhB/H,KAAK+F,UAAiB,GAC3F,GAAM+B,IACb9H,KAAK0G,UAAY,IAAI/D,EAAO3C,KAAMA,KAAK+F,SAAU/F,KAAKiB,UAAWsE,KAAKwC,MAAsB,GAAhB/H,KAAK+F,UAAiB,IAGtG/F,KAAKyH,oBACT,CACApG,OAAOC,GAUH,GAJAtB,KAAKqE,SAAShD,OAAOC,GAErBtB,KAAK0G,UAAUrF,OAAOC,IAEjBtB,KAAK6G,kBACF7G,KAAK4G,MAAQ,IAAM,EAAG,CACtB,MAAMjC,EAAS3E,KAAK2G,OAAO/B,kBAC3B,GAAID,EAAQ,CAGR,OAFcA,GAGV,KAAKJ,EAAOmB,KACR1F,KAAK0G,UAAUjG,WAAU,EAAOT,KAAKqE,UACrC,MACJ,KAAKE,EAAO1D,MACRb,KAAK0G,UAAUjG,WAAU,EAAMT,KAAKqE,UACpC,MACJ,KAAKE,EAAOoB,OACR3F,KAAK0G,UAAUtF,UAAUpB,KAAKqE,UAC9B,MACJ,KAAKE,EAAOqB,KACR5F,KAAK0G,UAAUrG,WAAWL,KAAKqE,UAM3C,CACJ,CAIArE,KAAK4G,MAAQ,MAAQ,GACrB5G,KAAK2G,OAAOpG,OAAOP,KAAK0G,WAIvB1G,KAAKgH,OAAShH,KAAK4G,MAAQ5G,KAAKiG,QAAU,GAEtCjG,KAAK0G,UAAUrG,WAAWL,KAAKqE,WAChCrE,KAAK+C,OAIb/C,KAAK4G,OACT,EChMG,MAAMK,EA0BT7H,YAAY4I,GAA8F,IAAlExF,EAAa,uDAAG,IAAKK,EAAc,uDAAG,IAAKoF,EAAY,uDAAG,MAAK,KAzBvGD,kBAAY,OACZ9B,YAAM,OACNgC,UAAI,OAEJC,kBAAY,OACZC,eAAS,OACTC,WAAK,OAEL/G,SAAG,OACHsF,WAAK,OACL0B,OAAiB,EAAM,KACvBC,SAAmB,EAAM,KACzBC,SAAmB,EAAM,KACzBC,MAAgB,IAAI,KACpB7C,MAAgB,EAAM,KACtB1G,EAAY,EAAI,KAEhBsD,WAAK,OACLK,YAAM,OACNoF,UAAI,OAEJS,WAAK,OACLhB,QAAE,OACFE,QAAE,OACFe,QAAE,EAEE3I,KAAKgI,aAAeA,EACpBhI,KAAKwC,MAAQA,EACbxC,KAAK6C,OAASA,EACd7C,KAAKiI,KAAOA,EAEZ,MAAMC,EAAOhB,SAAS0B,eAAeZ,EAAaa,IAC7CX,IAAkBlI,KAAKkI,KAAOA,EAEnClI,KAAK8I,aACT,CACAA,aACI,MAAMX,EAAejB,SAAS6B,cAAc,OAC5C,IAAKZ,EAAgB,OAAUnI,KAAKmI,aAAeA,EAEnDnI,KAAKmI,aAAaa,MAAMC,QAAU,cAElCjJ,KAAKmI,aAAaa,MAAMxG,MAAQxC,KAAKwC,MAAQ,KAC7CxC,KAAKmI,aAAaa,MAAMnG,OAAS7C,KAAK6C,OAAS,KAC/C7C,KAAKmI,aAAaa,MAAME,OAAS,OACjClJ,KAAKmI,aAAaa,MAAMG,QAAU,OAClCnJ,KAAKkI,KAAKkB,OAAOjB,GAEjB,MAAMC,EAAYlB,SAAS6B,cAAc,OACzC,IAAKX,EAAa,OAAUpI,KAAKoI,UAAYA,EAE7CpI,KAAKmI,aAAaiB,OAAOhB,GAEzB,MAAMlC,EAASgB,SAAS6B,cAAc,UACtC,GAAI7C,EAAQ,CACRlG,KAAKkG,OAASA,EACdlG,KAAKoI,UAAUgB,OAAOpJ,KAAKkG,QAE3BlG,KAAKkG,OAAO1D,MAAQxC,KAAKwC,MACzBxC,KAAKkG,OAAOrD,OAAS7C,KAAK6C,OAC1B7C,KAAKkG,OAAO8C,MAAMK,gBAAkB,UACpC,MAAM/H,EAAMtB,KAAKkG,OAAOoD,WAAW,MAC/BhI,IACAtB,KAAKsB,IAAMA,EACXtB,KAAK6H,SACL7H,KAAK+C,OAEb,CACJ,CACA8E,SACI,MAAMQ,EAAQnB,SAAS6B,cAAc,OACrC,IAAKV,EAAS,OAAUrI,KAAKqI,MAAQA,EACrCrI,KAAKmI,aAAaiB,OAAOf,GAEzBrI,KAAKqI,MAAMW,MAAMxG,MAAQ,OACzBxC,KAAKqI,MAAMW,MAAMC,QAAU,OAE3B,MAAMM,EAAMrC,SAAS6B,cAAc,UACnCQ,EAAIC,YAAc,QAClBD,EAAIE,QAAU,KAAQzJ,KAAKgI,aAAa0B,UAAU,EAClD1J,KAAKqI,MAAMe,OAAOG,GAElBvJ,KAAK0I,MAAQxB,SAAS6B,cAAc,KAC/B/I,KAAK0I,QAAmB1I,KAAKqI,MAAMe,OAAOpJ,KAAK0I,OACpD1I,KAAK0I,MAAMM,MAAMxG,MAAQ,cACzBxC,KAAK0I,MAAMiB,UAAS,kBAAc3J,KAAKiI,MAEvCjI,KAAK0H,GAAKR,SAAS6B,cAAc,KAC5B/I,KAAK0H,KAAgB1H,KAAKqI,MAAMe,OAAOpJ,KAAK0H,IACjD1H,KAAK0H,GAAGsB,MAAMxG,MAAQ,cACtBxC,KAAK0H,GAAGiC,UAAY,SAEpB3J,KAAK4H,GAAKV,SAAS6B,cAAc,KAC5B/I,KAAK4H,KAAgB5H,KAAKqI,MAAMe,OAAOpJ,KAAK4H,IACjD5H,KAAK4H,GAAGoB,MAAMxG,MAAQ,kBACtBxC,KAAK4H,GAAG+B,UAAY,GAEpB3J,KAAK2I,GAAKzB,SAAS6B,cAAc,KAC5B/I,KAAK2I,KAAgB3I,KAAKqI,MAAMe,OAAOpJ,KAAK2I,IACjD3I,KAAK2I,GAAGK,MAAMxG,MAAQ,cACtBxC,KAAK2I,GAAGgB,UAAY,MACxB,CACA5G,OAGI/C,KAAKsB,IAAI0E,MAAM,EAAG,GAClBhG,KAAK4J,YACL5J,KAAK6J,MACT,CACAD,YACI5J,KAAKkG,OAAOuD,QAAWrC,IACnBpH,KAAKwI,SAAU,EACfxI,KAAK4G,MAAQkD,YACT,KACI,IAAK9J,KAAKwI,QAAS,CACf,IAAKxI,KAAKsI,MAAS,OACnBtI,KAAK+J,WAAW3C,EACpB,CACApH,KAAKwI,SAAU,CAAK,GAExBxI,KAAKyI,MAAM,EAEnBzI,KAAKkG,OAAO8D,WAAc5C,IACtB6C,aAAajK,KAAK4G,OAClB5G,KAAKwI,SAAU,EACfxI,KAAKkK,iBAAiB9C,EAAE,EAE5BpH,KAAKkG,OAAOiE,iBAAiB,SAAU/C,GAAkBpH,KAAKoK,WAAWhD,EAAGA,EAAEiD,UAa9ErK,KAAKkG,OAAOoE,YAAelD,IACvBpH,KAAKsI,OAAQ,EACbtI,KAAKuI,SAAU,EACfvI,KAAKuK,UAAUnD,EAAE,EAErBpH,KAAKkG,OAAOsE,UAAapD,IACrBpH,KAAKuI,SAAU,EACfvI,KAAKyK,QAAQrD,EAAE,EAEnBpH,KAAKkG,OAAOwE,YAAetD,IACnBpH,KAAKuI,UAAWvI,KAAKsI,OAAQ,EAAOtI,KAAK2K,UAAUvD,IACvDpH,KAAK4K,UAAUxD,EAAE,EAErByD,OAAOC,SAAY1D,GAAepH,KAAK+K,OAAO3D,EAElD,CACA2D,OAAO3D,GAGH,CAEJyC,OACImB,uBAAsB,KAAQhL,KAAK6J,MAAM,IAEzC7J,KAAKsB,IAAI2J,UAAU,EAAG,EAAGjL,KAAKsB,IAAI4E,OAAO1D,MAAOxC,KAAKsB,IAAI4E,OAAOrD,QAChE7C,KAAKsB,IAAIQ,UAAY,UACrB9B,KAAKsB,IAAII,YACT1B,KAAKsB,IAAIK,KAAK,EAAG,EAAG3B,KAAKsB,IAAI4E,OAAO1D,MAAOxC,KAAKsB,IAAI4E,OAAOrD,QAC3D7C,KAAKsB,IAAIO,YACT7B,KAAKsB,IAAIS,OACT/B,KAAKqB,OAAOrB,KAAKsB,IACrB,CACAD,OAAOC,GACH,CAEJyI,WAAW3C,GACP,CAEJ8C,iBAAiB9C,GACb,CAEJmD,UAAUnD,GACN,CAEJqD,QAAQrD,GACJ,CAEJwD,UAAUxD,GACN,CAEJuD,UAAUvD,GACN,CAEJgD,WAAWhD,EAAeiD,GACtB,ECjMD,MAAMrC,EAUT5I,YAAYyJ,EAAYZ,GAAgG,IAAlFzF,EAAa,uDAAG,GAAIK,EAAc,uDAAG,GAAImD,EAAa,uDAAG,GAAIC,EAAa,uDAAG,GAAE,KATrHgB,gBAAU,OACV5H,gBAAU,OACVH,EAAI,GAAI,KACR2J,QAAE,OACF7C,MAAgB,GAAG,KACnBxD,MAAgB,GAAG,KACnBK,OAAiB,GAAG,KACpBoD,MAAgB,GAAG,KACnBiF,EAAc,IAAIjL,EAAAA,GAAS,EAAG,EAAG,GAE7BD,KAAK6I,GAAKA,EACV7I,KAAKgG,MAAQA,EACbhG,KAAKwC,MAAQA,EACbxC,KAAK6C,OAASA,EACd7C,KAAKiG,MAAQA,EACbjG,KAAKiH,WAAa,IAAIA,EAAWjH,KAAMA,KAAKwC,MAAQxC,KAAKgG,MAAOhG,KAAK6C,OAAS7C,KAAKgG,MAAOiC,GAC1FjI,KAAK+C,OACL/C,KAAK0J,UACT,CACA3G,OACI/C,KAAKiH,WAAW5F,OAAUC,GAAkCtB,KAAKqB,OAAOC,GACxEtB,KAAKiH,WAAWsD,UAAanD,GAAkBpH,KAAKuK,UAAUnD,GAC9DpH,KAAKiH,WAAW8C,WAAc3C,GAAkBpH,KAAK+J,WAAW3C,GAChEpH,KAAKiH,WAAWiD,iBAAoB9C,GAAkBpH,KAAKkK,iBAAiB9C,GAC5EpH,KAAKiH,WAAWwD,QAAWrD,GAAkBpH,KAAKyK,QAAQrD,GAC1DpH,KAAKiH,WAAW2D,UAAaxD,GAAkBpH,KAAK4K,UAAUxD,GAC9DpH,KAAKiH,WAAW0D,UAAavD,GAAkBpH,KAAK2K,UAAUvD,EAClE,CACAsC,WACI1J,KAAKX,WAAa,IAAIwG,EAAW7F,KAAMA,KAAKwC,MAAOxC,KAAK6C,OAAQ7C,KAAKgG,MAAOhG,KAAKiG,MACrF,CACA5E,OAAOC,GACCtB,KAAKX,YACLW,KAAKX,WAAWgC,OAAOC,EAE/B,CAEAiJ,UAAUnD,GACNpH,KAAKkL,EAAE1L,EAAuF,GAAjF4H,EAAE5H,EAAIQ,KAAKiH,WAAWf,OAAOiF,WAA6C,GAA/BnL,KAAKiH,WAAWf,OAAO1D,OAC/ExC,KAAKkL,EAAEzL,EAAuF,GAAjF2H,EAAE3H,EAAIO,KAAKiH,WAAWf,OAAOkF,UAA6C,GAAhCpL,KAAKiH,WAAWf,OAAOrD,OAElF,CACA4H,QAAQrD,GACJ,CAEJwD,UAAUxD,GACN,CAEJuD,UAAUvD,GACN,CAEJ2C,WAAW3C,GACP,CAEJ8C,iBAAiB9C,GACb,EC1DD,MAAMiE,EACTjM,YAAYyJ,GAMR,IAAIyC,EAAQ,CACRrD,KAAM,KACNzF,MAAO,EACPK,OAAQ,GACRmD,MAAO,GACPC,MAAO,IAEX,IAAI+B,EAAaa,EAAIyC,EAAMrD,KAAMqD,EAAM9I,MAAO8I,EAAMzI,OAAQyI,EAAMtF,MAAOsF,EAAMrF,OAE/EqF,EAAQ,CACJrD,KAAM,OACNzF,MAAO,GACPK,OAAQ,GACRmD,MAAO,GACPC,MAAO,GAEX,IAAI+B,EAAaa,EAAIyC,EAAMrD,KAAMqD,EAAM9I,MAAO8I,EAAMzI,OAAQyI,EAAMtF,MAAOsF,EAAMrF,OAC/EqF,EAAQ,CACJrD,KAAM,KACNzF,MAAO,EACPK,OAAQ,GACRmD,MAAO,GACPC,MAAO,GAEX,IAAI+B,EAAaa,EAAIyC,EAAMrD,KAAMqD,EAAM9I,MAAO8I,EAAMzI,OAAQyI,EAAMtF,MAAOsF,EAAMrF,OAE/EqF,EAAQ,CACJrD,KAAM,OACNzF,MAAO,GACPK,OAAQ,GACRmD,MAAO,GACPC,MAAO,GAEX,IAAI+B,EAAaa,EAAIyC,EAAMrD,KAAMqD,EAAM9I,MAAO8I,EAAMzI,OAAQyI,EAAMtF,MAAOsF,EAAMrF,OAC/EqF,EAAQ,CACJrD,KAAM,OACNzF,MAAO,GACPK,OAAQ,GACRmD,MAAO,GACPC,MAAO,GAEX,IAAI+B,EAAaa,EAAIyC,EAAMrD,KAAMqD,EAAM9I,MAAO8I,EAAMzI,OAAQyI,EAAMtF,MAAOsF,EAAMrF,OAC/EqF,EAAQ,CACJrD,KAAM,KACNzF,MAAO,EACPK,OAAQ,GACRmD,MAAO,GACPC,MAAO,GAEX,IAAI+B,EAAaa,EAAIyC,EAAMrD,KAAMqD,EAAM9I,MAAO8I,EAAMzI,OAAQyI,EAAMtF,MAAOsF,EAAMrF,OAE/EqF,EAAQ,CACJrD,KAAM,OACNzF,MAAO,GACPK,OAAQ,GACRmD,MAAO,GACPC,MAAO,GAEX,IAAI+B,EAAaa,EAAIyC,EAAMrD,KAAMqD,EAAM9I,MAAO8I,EAAMzI,OAAQyI,EAAMtF,MAAOsF,EAAMrF,OAE/EqF,EAAQ,CACJrD,KAAM,OACNzF,MAAO,GACPK,OAAQ,GACRmD,MAAO,GACPC,MAAO,GAEX,IAAI+B,EAAaa,EAAIyC,EAAMrD,KAAMqD,EAAM9I,MAAO8I,EAAMzI,OAAQyI,EAAMtF,MAAOsF,EAAMrF,OAC/EqF,EAAQ,CACJrD,KAAM,KACNzF,MAAO,EACPK,OAAQ,GACRmD,MAAO,GACPC,MAAO,GAEX,IAAI+B,EAAaa,EAAIyC,EAAMrD,KAAMqD,EAAM9I,MAAO8I,EAAMzI,OAAQyI,EAAMtF,MAAOsF,EAAMrF,OAE/EqF,EAAQ,CACJrD,KAAM,OACNzF,MAAO,GACPK,OAAQ,GACRmD,MAAO,GACPC,MAAO,GAEX,IAAI+B,EAAaa,EAAIyC,EAAMrD,KAAMqD,EAAM9I,MAAO8I,EAAMzI,OAAQyI,EAAMtF,MAAOsF,EAAMrF,OAC/EqF,EAAQ,CACJrD,KAAM,OACNzF,MAAO,GACPK,OAAQ,GACRmD,MAAO,GACPC,MAAO,GAEX,IAAI+B,EAAaa,EAAIyC,EAAMrD,KAAMqD,EAAM9I,MAAO8I,EAAMzI,OAAQyI,EAAMtF,MAAOsF,EAAMrF,OAC/EqF,EAAQ,CACJrD,KAAM,KACNzF,MAAO,EACPK,OAAQ,GACRmD,MAAO,GACPC,MAAO,GAEX,IAAI+B,EAAaa,EAAIyC,EAAMrD,KAAMqD,EAAM9I,MAAO8I,EAAMzI,OAAQyI,EAAMtF,MAAOsF,EAAMrF,OAE/EqF,EAAQ,CACJrD,KAAM,OACNzF,MAAO,GACPK,OAAQ,GACRmD,MAAO,GACPC,MAAO,GAEX,IAAI+B,EAAaa,EAAIyC,EAAMrD,KAAMqD,EAAM9I,MAAO8I,EAAMzI,OAAQyI,EAAMtF,MAAOsF,EAAMrF,OAC/EqF,EAAQ,CACJrD,KAAM,MACNzF,MAAO,GACPK,OAAQ,GACRmD,MAAO,GACPC,MAAO,GAEX,IAAI+B,EAAaa,EAAIyC,EAAMrD,KAAMqD,EAAM9I,MAAO8I,EAAMzI,OAAQyI,EAAMtF,MAAOsF,EAAMrF,MACnF,EC7HG,MAAMsF,EAGTC,YAAY3C,GACE,IAAI0C,EAAqB1C,GACjC4C,OACN,CACArM,cAAqC,IAAzByJ,EAAU,uDAAG,UAAS,KANlC6C,oBAAc,OACdxD,UAAI,EAMA,MAAMA,EAAOhB,SAAS0B,eAAeC,GACjCX,IACAlI,KAAKkI,KAAOA,EACZlI,KAAKkI,KAAKc,MAAM2C,SAAW,QAE/B3L,KAAK0L,eAAiB,IAAIL,EAAexC,EAC7C,CACA4C,QACI,EAID,MAAMG,EAGTxM,YAAYyJ,GAAc,KAFnBgD,aAAO,EAGV7L,KAAK6L,QAAU3E,SAAS0B,eAAeC,GAEvC0C,EAAqBxI,KAAK8F,EAC9B,CACOiD,UACH,GAAI9L,KAAK6L,QACL,IACI,KAAO7L,KAAK6L,QAAQE,YAChB/L,KAAK6L,QAAQG,YAAYhM,KAAK6L,QAAQE,WAI9C,CAFE,MAAOE,GACL3J,QAAQ2J,MAAM,2BAA4BA,EAC9C,MAEA3J,QAAQ4J,KAAK,yCAErB,E","sources":["lib/NJSCore/Core/Geometry/NGeometry/MatUtility.ts","njslab/Tools/AppTetrisGame/Implementation/TetrisSystem/Core/Block/Blockbase.ts","njslab/Tools/AppTetrisGame/Implementation/TetrisSystem/Core/Block/BlocKA.ts","njslab/Tools/AppTetrisGame/Implementation/TetrisSystem/Core/Block/BlocKB.ts","njslab/Tools/AppTetrisGame/Implementation/TetrisSystem/Core/Block/BlocKC.ts","njslab/Tools/AppTetrisGame/Implementation/TetrisSystem/Core/Pixel/PixelMap.ts","njslab/Tools/AppTetrisGame/Implementation/TetrisSystem/Core/Player/player.ts","njslab/Tools/AppTetrisGame/Implementation/TetrisSystem/Core/TetrisGame.ts","njslab/Tools/AppTetrisGame/Implementation/TetrisSystem/CanvasCore/index.ts","njslab/Tools/AppTetrisGame/Implementation/TetrisSystem/index.ts","njslab/Tools/AppTetrisGame/Implementation/index.ts","njslab/Tools/AppTetrisGame/index.ts"],"sourcesContent":["export const getMatrixFromFloat = (list: Float32Array) => {\r\n    let n = Math.sqrt(list.length);\r\n    const temp = [];\r\n    for (let i = 0; i < n; i++) {\r\n        const subTemp = [];\r\n        for (let j = 0; j < n; j++) {\r\n            const num = list[i * n + j];\r\n            subTemp.push(num);\r\n        }\r\n        temp.push(subTemp);\r\n    }\r\n    return temp;\r\n};\r\nexport const getFlat3dFromMatrix = (mat: number[][]) => {\r\n    const temp = new Float32Array(mat.length * mat[0].length);\r\n    for (let i = 0; i < mat.length; i++) {\r\n        for (let j = 0; j < mat[i].length; j++) {\r\n            temp[i * mat.length + j] = mat[i][j];\r\n        }\r\n    }\r\n    return temp;\r\n};\r\nexport const CheckEmptyFromMatrix = (mat: number[][]) => {\r\n    // console.log(mat);\r\n    let left = 0;\r\n    let right = 0;\r\n    for (let i = 0; i < mat.length; i++) {\r\n        if (mat[i][0] === 0) {\r\n            left++;\r\n        }\r\n        if (mat[i][mat[i].length - 1] === 0) {\r\n            right++;\r\n        }\r\n\r\n    }\r\n    // console.log('left: ', left, '+ right: ', right, '=== length', mat.length);\r\n    if (left === mat.length) {\r\n        return -1;\r\n    } else if (right === mat.length) {\r\n        return +1;\r\n    } else {\r\n        return 0;\r\n    }\r\n};\r\nexport const getTransposeMatrix = (a: number[][]) => {\r\n\r\n    // let temp: number[][] = [];\r\n    // for (let i = 0; i < mat.length; ++i) {\r\n    //     for (let j = 0; j < mat[i].length; ++j) {\r\n\r\n    //     }\r\n    // }\r\n\r\n    // function transpose(a) {\r\n\r\n    // Calculate the width and height of the Array\r\n    let w = a.length || 0;\r\n    let h = a[0] instanceof Array ? a[0].length : 0;\r\n\r\n    // In case it is a zero matrix, no transpose routine needed.\r\n    if (h === 0 || w === 0) { return []; }\r\n\r\n    /**\r\n     * @var {Number} i Counter\r\n     * @var {Number} j Counter\r\n     * @var {Array} t Transposed data is stored in this array.\r\n     */\r\n    let i, j = 0;\r\n\r\n    let t: number[][] = [];\r\n\r\n    // Loop through every item in the outer array (height)\r\n    for (i = 0; i < h; i++) {\r\n\r\n        // Insert a new row (array)\r\n        t[i] = [];\r\n\r\n        // Loop through every item per item in outer array (width)\r\n        for (j = 0; j < w; j++) {\r\n\r\n            // Save transposed data.\r\n            t[i][j] = a[j][i];\r\n        }\r\n    }\r\n\r\n    return t;\r\n};\r\n\r\n// function transpose(a) {\r\n//     return Object.keys(a[0]).map(function(c) {\r\n//         return a.map(function(r) { return r[c]; });\r\n//     });\r\n// }\r\n\r\n// https://www.geeksforgeeks.org/inplace-rotate-square-matrix-by-90-degrees/\r\nexport const rotateMatrix = (mat: number[][]) => {\r\n    const N = mat.length;\r\n    // Consider all\r\n    // squares one by one\r\n    for (let x = 0; x < N / 2; x++) {\r\n        // Consider elements\r\n        // in group of 4 in\r\n        // current square\r\n        for (let y = x; y < N - x - 1; y++) {\r\n            // store current cell\r\n            // in temp variable\r\n            let temp = mat[x][y];\r\n\r\n            // move values from\r\n            // right to top\r\n            mat[x][y] = mat[y][N - 1 - x];\r\n\r\n            // move values from\r\n            // bottom to right\r\n            mat[y][N - 1 - x] = mat[N - 1 - x][N - 1 - y];\r\n\r\n            // move values from\r\n            // left to bottom\r\n            mat[N - 1 - x][N - 1 - y] = mat[N - 1 - y][x];\r\n\r\n            // assign temp to left\r\n            mat[N - 1 - y][x] = temp;\r\n        }\r\n    }\r\n    return mat;\r\n};","import { NVector3, ColorUtility } from '../../../lib';\r\nimport { TetrisGame } from '../TetrisGame';\r\nimport { PixelMap } from '../Pixel/PixelMap';\r\n\r\nexport class Blockbase {\r\n    tetrisGame: TetrisGame;\r\n    pixels: number[][] = [];\r\n    vec: NVector3;\r\n    widthMap: number; heightMap: number;\r\n    widthPixel: number = 1;\r\n    heightPixel: number = 1;\r\n    colorFill: string;\r\n    colorStroke: string;\r\n    constructor(tetrisGame: TetrisGame, widthMap: number, heightMap: number, x: number, y: number) {\r\n        this.tetrisGame = tetrisGame;\r\n        this.vec = new NVector3(x, y);\r\n        this.colorFill = ColorUtility.GetRandomColor();\r\n        this.colorStroke = 'rgba(0,0,0,0.5)';\r\n        this.widthMap = widthMap;\r\n        this.heightMap = heightMap;\r\n        this.InitBlock();\r\n    }\r\n    InitBlock() {\r\n        this.pixels.push([1]);\r\n        this.pixels.push([1]);\r\n        this.pixels.push([1]);\r\n        this.pixels.push([1]);\r\n    }\r\n    UpdateMove(pMap: PixelMap) {\r\n        if (pMap.Update(this)) {\r\n            this.vec.y += 1;\r\n            return true;\r\n        }\r\n\r\n        if ((this.vec.y + 3) > this.heightMap) {\r\n            return false;\r\n        }\r\n        return true;\r\n\r\n    }\r\n    GetMat() {\r\n        return this.pixels;\r\n    }\r\n    UpdatePos(x: boolean, pMap: PixelMap) {\r\n        if (this.CheckValidatedGround(pMap)) { return; }\r\n        let theX = 0;\r\n        if (x) {\r\n            theX = 1 + this.vec.x;\r\n            if (theX <= this.widthMap - this.pixels.length) {\r\n                if (this.UpdateCheckWithMap(x, pMap)) { return; }\r\n                this.vec.x++;\r\n            }\r\n        } else {\r\n            // check\r\n            theX = -1 + this.vec.x;\r\n            if (theX > -1) {\r\n                if (this.UpdateCheckWithMap(x, pMap)) { return; }\r\n                this.vec.x--;\r\n            }\r\n        }\r\n    }\r\n    UpdateCheckWithMap(right: boolean, pMap: PixelMap) {\r\n        const mat = this.GetMat();\r\n        if (right) {\r\n            for (let y = 0; y < mat.length; ++y) {\r\n                for (let x = 0; x < mat[y].length; ++x) {\r\n                    const isFill = mat[y][x];\r\n\r\n                    if (isFill === 1) {\r\n\r\n                        let xIndex = this.vec.x + x + 1;\r\n                        let yIndex = this.vec.y + y;\r\n                        if (xIndex < this.tetrisGame.heightNum) {\r\n                            const pixel = pMap.pixels[yIndex][xIndex];\r\n\r\n                            if (pixel && pixel.isFill) {\r\n                                return true;\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        } else {\r\n            for (let y = 0; y < mat.length; ++y) {\r\n                for (let x = 0; x < mat[y].length; ++x) {\r\n                    const isFill = mat[y][x];\r\n                    if (isFill === 1) {\r\n\r\n                        let xIndex = this.vec.x + x - 1;\r\n                        let yIndex = this.vec.y + y;\r\n                        const pixel = pMap.pixels[yIndex][xIndex];\r\n\r\n                        if (pixel && pixel.isFill) {\r\n                            return true;\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        return false;\r\n    }\r\n    UpdateRot(pMap: PixelMap) {\r\n        return false;\r\n    }\r\n    CheckValidatedGround(pMap: PixelMap) {\r\n        const mat = this.GetMat();\r\n        for (let y = 0; y < mat.length; ++y) {\r\n            for (let x = 0; x < mat[y].length; ++x) {\r\n                const isFill = mat[y][x];\r\n\r\n                if (isFill === 1) {\r\n\r\n                    let yIndex = this.vec.y + 3;\r\n\r\n                    if (yIndex < this.tetrisGame.heightNum) {\r\n                        const pixel = pMap.pixels[yIndex][this.vec.x];\r\n                        if (this.vec.y + 1 > yIndex) {\r\n                            if (pixel && pixel.isFill) {\r\n                                return true;\r\n                            }\r\n                        }\r\n                    } else {\r\n                        return false; // you cannot rotate it on the ground\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n        return false;\r\n    }\r\n    Render(ctx: CanvasRenderingContext2D) {\r\n\r\n        for (let i = 0; i < this.pixels.length; ++i) {\r\n            for (let j = 0; j < this.pixels[i].length; ++j) {\r\n                let pos = this.vec.Clone();\r\n                pos.x += j;\r\n                pos.y += i;\r\n                this.RenderPixel(ctx, pos);\r\n            }\r\n        }\r\n    }\r\n    RenderPixel(ctx: CanvasRenderingContext2D, pos: NVector3) {\r\n        ctx.beginPath();\r\n        ctx.rect(\r\n            pos.x * this.tetrisGame.scaleForRender,\r\n            pos.y * this.tetrisGame.scaleForRender,\r\n            this.widthPixel * this.tetrisGame.scaleForRender,\r\n            this.heightPixel * this.tetrisGame.scaleForRender\r\n        );\r\n        // console.log(pos.x * this.scale, pos.y * this.scale);\r\n        ctx.closePath();\r\n        ctx.fillStyle = this.colorFill;\r\n        ctx.fill();\r\n        ctx.strokeStyle = this.colorStroke;\r\n        ctx.stroke();\r\n    }\r\n}","import { getTransposeMatrix, NVector3 } from '../../../lib';\r\nimport { TetrisGame } from '../TetrisGame';\r\nimport { PixelMap } from '../Pixel/PixelMap';\r\n\r\nimport { Blockbase } from './Blockbase';\r\n\r\nexport class BlocKA extends Blockbase {\r\n    tetrisGame: TetrisGame;\r\n    vec: NVector3;\r\n    widthMap: number; heightMap: number;\r\n    widthPixel: number = 1;\r\n    heightPixel: number = 1;\r\n    colorFill: string;\r\n    colorStroke: string;\r\n    constructor(tetrisGame: TetrisGame, widthMap: number, heightMap: number, x: number, y: number) {\r\n        super(tetrisGame, widthMap, heightMap, x, y);\r\n    }\r\n    InitBlock() {\r\n        this.pixels.push([1]);\r\n        this.pixels.push([1]);\r\n        this.pixels.push([1]);\r\n        this.pixels.push([1]);\r\n    }\r\n    UpdateMove(pMap: PixelMap) {\r\n        if (pMap.Update(this)) {\r\n            this.vec.y += 1;\r\n            return true;\r\n        }\r\n\r\n        if ((this.vec.y + 3) > this.heightMap) {\r\n            return false;\r\n        }\r\n        return true;\r\n\r\n    }\r\n    GetMat() {\r\n        return this.pixels;\r\n    }\r\n    UpdatePos(x: boolean, pMap: PixelMap) {\r\n        if (this.CheckValidatedGround(pMap)) { return; }\r\n        let theX = 0;\r\n        if (x) {\r\n            theX = 1 + this.vec.x;\r\n            if (theX <= this.widthMap - this.pixels[0].length) {\r\n                if (this.UpdateCheckWithMap(x, pMap)) { return; }\r\n                this.vec.x++;\r\n            }\r\n        } else {\r\n            theX = -1 + this.vec.x;\r\n            if (theX > -1) {\r\n                if (this.UpdateCheckWithMap(x, pMap)) { return; }\r\n                this.vec.x--;\r\n            }\r\n        }\r\n    }\r\n    ShiftMatrix(direction: number) {\r\n        // const mat = this.GetMat();\r\n\r\n        // if (direction === -1) {\r\n        //     const temp: number[][] = [];\r\n        //     for (let y = 0; y < mat.length; ++y) {\r\n        //         const tempSub: number[] = [];\r\n        //         for (let x = 0; x < mat[y].length - 1; ++x) {\r\n        //             tempSub.push(mat[y][x + 1]);\r\n        //         }\r\n        //         tempSub.push(0);\r\n        //         temp.push(tempSub);\r\n        //     }\r\n        //     this.pixels = getFlat3dFromMatrix(temp);\r\n        // } else if (direction === 1) {\r\n        //     const temp: number[][] = [];\r\n        //     for (let y = 0; y < mat.length; ++y) {\r\n        //         const tempSub: number[] = [0];\r\n        //         for (let x = 0; x < mat[y].length - 1; ++x) {\r\n        //             tempSub.push(mat[y][x]);\r\n        //         }\r\n        //         temp.push(tempSub);\r\n        //     }\r\n        //     this.pixels = getFlat3dFromMatrix(temp);\r\n        // }\r\n    }\r\n    UpdateCheckWithMap(right: boolean, pMap: PixelMap) {\r\n        const mat = this.GetMat();\r\n        if (right) {\r\n            for (let y = 0; y < mat.length; ++y) {\r\n                for (let x = 0; x < mat[y].length; ++x) {\r\n                    const isFill = mat[y][x];\r\n\r\n                    if (isFill === 1) {\r\n\r\n                        let xIndex = this.vec.x + x + 1;\r\n                        let yIndex = this.vec.y + y;\r\n                        if (xIndex < this.tetrisGame.heightNum) {\r\n                            const pixel = pMap.pixels[yIndex][xIndex];\r\n\r\n                            if (pixel && pixel.isFill) {\r\n                                return true;\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        } else {\r\n            for (let y = 0; y < mat.length; ++y) {\r\n                for (let x = 0; x < mat[y].length; ++x) {\r\n                    const isFill = mat[y][x];\r\n                    if (isFill === 1) {\r\n\r\n                        let xIndex = this.vec.x + x - 1;\r\n                        let yIndex = this.vec.y + y;\r\n                        const pixel = pMap.pixels[yIndex][xIndex];\r\n\r\n                        if (pixel && pixel.isFill) {\r\n                            return true;\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        return false;\r\n    }\r\n    UpdateRot(pMap: PixelMap) {\r\n        const mat = getTransposeMatrix(this.pixels);\r\n\r\n\r\n        console.log(mat);\r\n        if (mat[0].length > 3 && pMap.width - 4 < this.vec.x) {\r\n            this.vec.x -= 3;\r\n\r\n\r\n\r\n\r\n        } else {\r\n            if (this.vec.y > pMap.width) {\r\n\r\n\r\n                let isCol = true;\r\n                for (let i = 0; i < mat.length; ++i) {\r\n                    if (pMap.pixels[this.vec.y + i][this.vec.x].isFill) {\r\n                        isCol = false;\r\n                    }\r\n                }\r\n                if (!isCol) {\r\n                    return false;\r\n                }\r\n\r\n            }\r\n        }\r\n\r\n        this.pixels = mat;\r\n        // if (this.CheckValidatedGround(pMap)) { return; }\r\n        // let mat = getMatrixFromFloat(this.pixels);\r\n        // let matResult = rotateMatrix(mat);\r\n        // this.pixels = getFlat3dFromMatrix(matResult);\r\n        return false;\r\n    }\r\n    CheckValidatedGround(pMap: PixelMap) {\r\n        const mat = this.GetMat();\r\n        for (let y = 0; y < mat.length; ++y) {\r\n            for (let x = 0; x < mat[y].length; ++x) {\r\n                const isFill = mat[y][x];\r\n\r\n                if (isFill === 1) {\r\n\r\n                    let yIndex = this.vec.y + 3;\r\n\r\n                    if (yIndex < this.tetrisGame.heightNum) {\r\n                        const pixel = pMap.pixels[yIndex][this.vec.x];\r\n                        if (this.vec.y + 1 > yIndex) {\r\n                            if (pixel && pixel.isFill) {\r\n                                return true;\r\n                            }\r\n                        }\r\n                    } else {\r\n                        return false; // you cannot rotate it on the ground\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n        return false;\r\n    }\r\n    Render(ctx: CanvasRenderingContext2D) {\r\n        for (let i = 0; i < this.pixels.length; ++i) {\r\n            for (let j = 0; j < this.pixels[i].length; ++j) {\r\n                let pos = this.vec.Clone();\r\n                pos.x += j;\r\n                pos.y += i;\r\n                this.RenderPixel(ctx, pos);\r\n            }\r\n        }\r\n    }\r\n    RenderPixel(ctx: CanvasRenderingContext2D, pos: NVector3) {\r\n        ctx.beginPath();\r\n        ctx.rect(\r\n            pos.x * this.tetrisGame.scaleForRender,\r\n            pos.y * this.tetrisGame.scaleForRender,\r\n            this.widthPixel * this.tetrisGame.scaleForRender,\r\n            this.heightPixel * this.tetrisGame.scaleForRender\r\n        );\r\n        // console.log(pos.x * this.scale, pos.y * this.scale);\r\n        ctx.closePath();\r\n        ctx.fillStyle = this.colorFill;\r\n        ctx.fill();\r\n        ctx.strokeStyle = this.colorStroke;\r\n        ctx.stroke();\r\n    }\r\n\r\n}","import { getTransposeMatrix, NVector3 } from '../../../lib';\r\nimport { TetrisGame } from '../TetrisGame';\r\nimport { PixelMap } from '../Pixel/PixelMap';\r\n\r\nimport { Blockbase } from './Blockbase';\r\n\r\nexport class BlocKB extends Blockbase {\r\n    tetrisGame: TetrisGame;\r\n    vec: NVector3;\r\n    widthMap: number; heightMap: number;\r\n    widthPixel: number = 1;\r\n    heightPixel: number = 1;\r\n    colorFill: string;\r\n    colorStroke: string;\r\n    constructor(tetrisGame: TetrisGame, widthMap: number, heightMap: number, x: number, y: number) {\r\n        super(tetrisGame, widthMap, heightMap, x, y);\r\n    }\r\n    InitBlock() {\r\n        this.pixels.push([1, 1]);\r\n        this.pixels.push([1, 1]);\r\n        // this.pixels.push([1]);\r\n        // this.pixels.push([1]);\r\n    }\r\n    UpdateMove(pMap: PixelMap) {\r\n        if (pMap.Update(this)) {\r\n            this.vec.y += 1;\r\n            return true;\r\n        }\r\n\r\n        if ((this.vec.y + 3) > this.heightMap) {\r\n            return false;\r\n        }\r\n        return true;\r\n\r\n    }\r\n    GetMat() {\r\n        return this.pixels;\r\n    }\r\n    UpdatePos(x: boolean, pMap: PixelMap) {\r\n        if (this.CheckValidatedGround(pMap)) { return; }\r\n        let theX = 0;\r\n        if (x) {\r\n            theX = 1 + this.vec.x;\r\n            if (theX <= this.widthMap - this.pixels[0].length) {\r\n                if (this.UpdateCheckWithMap(x, pMap)) { return; }\r\n                this.vec.x++;\r\n            }\r\n        } else {\r\n            theX = -1 + this.vec.x;\r\n            if (theX > -1) {\r\n                if (this.UpdateCheckWithMap(x, pMap)) { return; }\r\n                this.vec.x--;\r\n            }\r\n        }\r\n    }\r\n    ShiftMatrix(direction: number) {\r\n        // const mat = this.GetMat();\r\n\r\n        // if (direction === -1) {\r\n        //     const temp: number[][] = [];\r\n        //     for (let y = 0; y < mat.length; ++y) {\r\n        //         const tempSub: number[] = [];\r\n        //         for (let x = 0; x < mat[y].length - 1; ++x) {\r\n        //             tempSub.push(mat[y][x + 1]);\r\n        //         }\r\n        //         tempSub.push(0);\r\n        //         temp.push(tempSub);\r\n        //     }\r\n        //     this.pixels = getFlat3dFromMatrix(temp);\r\n        // } else if (direction === 1) {\r\n        //     const temp: number[][] = [];\r\n        //     for (let y = 0; y < mat.length; ++y) {\r\n        //         const tempSub: number[] = [0];\r\n        //         for (let x = 0; x < mat[y].length - 1; ++x) {\r\n        //             tempSub.push(mat[y][x]);\r\n        //         }\r\n        //         temp.push(tempSub);\r\n        //     }\r\n        //     this.pixels = getFlat3dFromMatrix(temp);\r\n        // }\r\n    }\r\n    UpdateCheckWithMap(right: boolean, pMap: PixelMap) {\r\n        const mat = this.GetMat();\r\n        if (right) {\r\n            for (let y = 0; y < mat.length; ++y) {\r\n                for (let x = 0; x < mat[y].length; ++x) {\r\n                    const isFill = mat[y][x];\r\n\r\n                    if (isFill === 1) {\r\n\r\n                        let xIndex = this.vec.x + x + 1;\r\n                        let yIndex = this.vec.y + y;\r\n                        if (xIndex < this.tetrisGame.heightNum) {\r\n                            const pixel = pMap.pixels[yIndex][xIndex];\r\n\r\n                            if (pixel && pixel.isFill) {\r\n                                return true;\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        } else {\r\n            for (let y = 0; y < mat.length; ++y) {\r\n                for (let x = 0; x < mat[y].length; ++x) {\r\n                    const isFill = mat[y][x];\r\n                    if (isFill === 1) {\r\n\r\n                        let xIndex = this.vec.x + x - 1;\r\n                        let yIndex = this.vec.y + y;\r\n                        const pixel = pMap.pixels[yIndex][xIndex];\r\n\r\n                        if (pixel && pixel.isFill) {\r\n                            return true;\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        return false;\r\n    }\r\n    UpdateRot(pMap: PixelMap) {\r\n        const mat = getTransposeMatrix(this.pixels);\r\n\r\n\r\n        console.log(mat);\r\n        if (mat[0].length > 3 && pMap.width - 4 < this.vec.x) {\r\n            this.vec.x -= 3;\r\n\r\n\r\n\r\n\r\n        } else {\r\n            if (this.vec.y > pMap.width) {\r\n\r\n\r\n                let isCol = true;\r\n                for (let i = 0; i < mat.length; ++i) {\r\n                    if (pMap.pixels[this.vec.y + i][this.vec.x].isFill) {\r\n                        isCol = false;\r\n                    }\r\n                }\r\n                if (!isCol) {\r\n                    return false;\r\n                }\r\n\r\n            }\r\n        }\r\n\r\n        this.pixels = mat;\r\n        // if (this.CheckValidatedGround(pMap)) { return; }\r\n        // let mat = getMatrixFromFloat(this.pixels);\r\n        // let matResult = rotateMatrix(mat);\r\n        // this.pixels = getFlat3dFromMatrix(matResult);\r\n        return false;\r\n    }\r\n    CheckValidatedGround(pMap: PixelMap) {\r\n        const mat = this.GetMat();\r\n        for (let y = 0; y < mat.length; ++y) {\r\n            for (let x = 0; x < mat[y].length; ++x) {\r\n                const isFill = mat[y][x];\r\n\r\n                if (isFill === 1) {\r\n\r\n                    let yIndex = this.vec.y + 3;\r\n\r\n                    if (yIndex < this.tetrisGame.heightNum) {\r\n                        const pixel = pMap.pixels[yIndex][this.vec.x];\r\n                        if (this.vec.y + 1 > yIndex) {\r\n                            if (pixel && pixel.isFill) {\r\n                                return true;\r\n                            }\r\n                        }\r\n                    } else {\r\n                        return false; // you cannot rotate it on the ground\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n        return false;\r\n    }\r\n    Render(ctx: CanvasRenderingContext2D) {\r\n        for (let i = 0; i < this.pixels.length; ++i) {\r\n            for (let j = 0; j < this.pixels[i].length; ++j) {\r\n                let pos = this.vec.Clone();\r\n                pos.x += j;\r\n                pos.y += i;\r\n                this.RenderPixel(ctx, pos);\r\n            }\r\n        }\r\n    }\r\n    RenderPixel(ctx: CanvasRenderingContext2D, pos: NVector3) {\r\n        ctx.beginPath();\r\n        ctx.rect(\r\n            pos.x * this.tetrisGame.scaleForRender,\r\n            pos.y * this.tetrisGame.scaleForRender,\r\n            this.widthPixel * this.tetrisGame.scaleForRender,\r\n            this.heightPixel * this.tetrisGame.scaleForRender\r\n        );\r\n        // console.log(pos.x * this.scale, pos.y * this.scale);\r\n        ctx.closePath();\r\n        ctx.fillStyle = this.colorFill;\r\n        ctx.fill();\r\n        ctx.strokeStyle = this.colorStroke;\r\n        ctx.stroke();\r\n    }\r\n\r\n}","import { NVector3, getTransposeMatrix } from '../../../lib';\r\nimport { TetrisGame } from '../TetrisGame';\r\nimport { PixelMap } from '../Pixel/PixelMap';\r\n\r\nimport { Blockbase } from './Blockbase';\r\n\r\nexport class BlocKC extends Blockbase {\r\n    tetrisGame: TetrisGame;\r\n    vec: NVector3;\r\n    widthMap: number; heightMap: number;\r\n    widthPixel: number = 1;\r\n    heightPixel: number = 1;\r\n    colorFill: string;\r\n    colorStroke: string;\r\n    constructor(tetrisGame: TetrisGame, widthMap: number, heightMap: number, x: number, y: number) {\r\n        super(tetrisGame, widthMap, heightMap, x, y);\r\n    }\r\n    InitBlock() {\r\n        this.pixels.push([1]);\r\n        this.pixels.push([1]);\r\n        this.pixels.push([1]);\r\n        this.pixels.push([1]);\r\n    }\r\n    UpdateMove(pMap: PixelMap) {\r\n        if (pMap.Update(this)) {\r\n            this.vec.y += 1;\r\n            return true;\r\n        }\r\n\r\n        if ((this.vec.y + 3) > this.heightMap) {\r\n            return false;\r\n        }\r\n        return true;\r\n\r\n    }\r\n    GetMat() {\r\n        return this.pixels;\r\n    }\r\n    UpdatePos(x: boolean, pMap: PixelMap) {\r\n        if (this.CheckValidatedGround(pMap)) { return; }\r\n        let theX = 0;\r\n        if (x) {\r\n            theX = 1 + this.vec.x;\r\n            if (theX <= this.widthMap - this.pixels[0].length) {\r\n                if (this.UpdateCheckWithMap(x, pMap)) { return; }\r\n                this.vec.x++;\r\n            }\r\n        } else {\r\n            theX = -1 + this.vec.x;\r\n            if (theX > -1) {\r\n                if (this.UpdateCheckWithMap(x, pMap)) { return; }\r\n                this.vec.x--;\r\n            }\r\n        }\r\n    }\r\n    ShiftMatrix(direction: number) {\r\n        // const mat = this.GetMat();\r\n\r\n        // if (direction === -1) {\r\n        //     const temp: number[][] = [];\r\n        //     for (let y = 0; y < mat.length; ++y) {\r\n        //         const tempSub: number[] = [];\r\n        //         for (let x = 0; x < mat[y].length - 1; ++x) {\r\n        //             tempSub.push(mat[y][x + 1]);\r\n        //         }\r\n        //         tempSub.push(0);\r\n        //         temp.push(tempSub);\r\n        //     }\r\n        //     this.pixels = getFlat3dFromMatrix(temp);\r\n        // } else if (direction === 1) {\r\n        //     const temp: number[][] = [];\r\n        //     for (let y = 0; y < mat.length; ++y) {\r\n        //         const tempSub: number[] = [0];\r\n        //         for (let x = 0; x < mat[y].length - 1; ++x) {\r\n        //             tempSub.push(mat[y][x]);\r\n        //         }\r\n        //         temp.push(tempSub);\r\n        //     }\r\n        //     this.pixels = getFlat3dFromMatrix(temp);\r\n        // }\r\n    }\r\n    UpdateCheckWithMap(right: boolean, pMap: PixelMap) {\r\n        const mat = this.GetMat();\r\n        if (right) {\r\n            for (let y = 0; y < mat.length; ++y) {\r\n                for (let x = 0; x < mat[y].length; ++x) {\r\n                    const isFill = mat[y][x];\r\n\r\n                    if (isFill === 1) {\r\n\r\n                        let xIndex = this.vec.x + x + 1;\r\n                        let yIndex = this.vec.y + y;\r\n                        if (xIndex < this.tetrisGame.heightNum) {\r\n                            const pixel = pMap.pixels[yIndex][xIndex];\r\n\r\n                            if (pixel && pixel.isFill) {\r\n                                return true;\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        } else {\r\n            for (let y = 0; y < mat.length; ++y) {\r\n                for (let x = 0; x < mat[y].length; ++x) {\r\n                    const isFill = mat[y][x];\r\n                    if (isFill === 1) {\r\n\r\n                        let xIndex = this.vec.x + x - 1;\r\n                        let yIndex = this.vec.y + y;\r\n                        const pixel = pMap.pixels[yIndex][xIndex];\r\n\r\n                        if (pixel && pixel.isFill) {\r\n                            return true;\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        return false;\r\n    }\r\n    UpdateRot(pMap: PixelMap) {\r\n        const mat = getTransposeMatrix(this.pixels);\r\n\r\n\r\n        console.log(mat);\r\n        if (mat[0].length > 3 && pMap.width - 4 < this.vec.x) {\r\n            this.vec.x -= 3;\r\n\r\n\r\n\r\n\r\n        } else {\r\n            if (this.vec.y > pMap.width) {\r\n\r\n\r\n                let isCol = true;\r\n                for (let i = 0; i < mat.length; ++i) {\r\n                    if (pMap.pixels[this.vec.y + i][this.vec.x].isFill) {\r\n                        isCol = false;\r\n                    }\r\n                }\r\n                if (!isCol) {\r\n                    return false;\r\n                }\r\n\r\n            }\r\n        }\r\n\r\n        this.pixels = mat;\r\n        // if (this.CheckValidatedGround(pMap)) { return; }\r\n        // let mat = getMatrixFromFloat(this.pixels);\r\n        // let matResult = rotateMatrix(mat);\r\n        // this.pixels = getFlat3dFromMatrix(matResult);\r\n        return false;\r\n    }\r\n    CheckValidatedGround(pMap: PixelMap) {\r\n        const mat = this.GetMat();\r\n        for (let y = 0; y < mat.length; ++y) {\r\n            for (let x = 0; x < mat[y].length; ++x) {\r\n                const isFill = mat[y][x];\r\n\r\n                if (isFill === 1) {\r\n\r\n                    let yIndex = this.vec.y + 3;\r\n\r\n                    if (yIndex < this.tetrisGame.heightNum) {\r\n                        const pixel = pMap.pixels[yIndex][this.vec.x];\r\n                        if (this.vec.y + 1 > yIndex) {\r\n                            if (pixel && pixel.isFill) {\r\n                                return true;\r\n                            }\r\n                        }\r\n                    } else {\r\n                        return false; // you cannot rotate it on the ground\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n        return false;\r\n    }\r\n    Render(ctx: CanvasRenderingContext2D) {\r\n        for (let i = 0; i < this.pixels.length; ++i) {\r\n            for (let j = 0; j < this.pixels[i].length; ++j) {\r\n                let pos = this.vec.Clone();\r\n                pos.x += j;\r\n                pos.y += i;\r\n                this.RenderPixel(ctx, pos);\r\n            }\r\n        }\r\n    }\r\n    RenderPixel(ctx: CanvasRenderingContext2D, pos: NVector3) {\r\n        ctx.beginPath();\r\n        ctx.rect(\r\n            pos.x * this.tetrisGame.scaleForRender,\r\n            pos.y * this.tetrisGame.scaleForRender,\r\n            this.widthPixel * this.tetrisGame.scaleForRender,\r\n            this.heightPixel * this.tetrisGame.scaleForRender\r\n        );\r\n        // console.log(pos.x * this.scale, pos.y * this.scale);\r\n        ctx.closePath();\r\n        ctx.fillStyle = this.colorFill;\r\n        ctx.fill();\r\n        ctx.strokeStyle = this.colorStroke;\r\n        ctx.stroke();\r\n    }\r\n\r\n}","// import { NVector3 } from '../../../../../../../NJSCore';\r\nimport { Blockbase } from '../Block/Blockbase';\r\nimport { TetrisGame } from '../TetrisGame';\r\nexport class PixelMap {\r\n    tetrisGame: TetrisGame;\r\n    width: number;\r\n    height: number;\r\n    pixels: Pixel[][] = [];\r\n    numLineMax: number = -1;\r\n    constructor(tetrisGame: TetrisGame, width: number, height: number) {\r\n        this.tetrisGame = tetrisGame;\r\n        this.numLineMax = height;\r\n        this.width = width;\r\n        this.height = height;\r\n        this.Init();\r\n    }\r\n    Init() {\r\n        for (let y = 0; y < this.height; ++y) {\r\n            let pixelList: Pixel[] = [];\r\n            for (let x = 0; x < this.width; ++x) {\r\n                pixelList.push(new Pixel(this, 'rgba(0,0,0,0)', 'rgba(0,0,0,0.15)'));\r\n            }\r\n            this.pixels.push(pixelList);\r\n        }\r\n    }\r\n    Update(block: Blockbase) {\r\n        if (this.CheckCollision(block)) {\r\n            // this.thisUpdateMat(block);\r\n\r\n            this.tetrisGame.InitBlock();\r\n            return false;\r\n        }\r\n\r\n        return true;\r\n    }\r\n    isDone() {\r\n        if (this.numLineMax === 0) { return true; }\r\n        // let numFill = 0;\r\n        // for (let y = 0; y < 3; ++y) {\r\n        //     let isFill = false;\r\n        //     for (let x = 0; x < this.width; ++x) {\r\n        //         if (this.pixels[y][x].isFill) {\r\n        //             isFill = true;\r\n        //         }\r\n        //     }\r\n        //     if (isFill) {\r\n        //         numFill++;\r\n        //     }\r\n        // }\r\n        // if (numFill > 2) {\r\n        //     // console.log('done', numFill);\r\n        //     return true;\r\n        // }\r\n        return false;\r\n    }\r\n    AddEmptyLine() {\r\n        let temp: Pixel[][] = [];\r\n        let pixelList: Pixel[] = [];\r\n        for (let x = 0; x < this.width; ++x) {\r\n            pixelList.push(new Pixel(this, 'rgba(0,0,0,0)', 'rgba(0,0,0,0.15)'));\r\n        }\r\n        temp.push(pixelList);\r\n        temp.concat(this.pixels);\r\n        console.log(temp);\r\n        this.pixels = temp;\r\n    }\r\n\r\n    // thisUpdateMat(block: Blockbase) {\r\n    //     const xIndex = block.vec.x + x;\r\n    //     const yIndex = block.vec.y + y + 1;\r\n\r\n\r\n    // }\r\n    RemoveLine() {\r\n        const lines = this.CheckLines();\r\n        if (lines.length === 0) { return false; }\r\n        let indexLine = 0;\r\n        const tempPixel: Pixel[][] = [];\r\n\r\n        for (let i = 0; i < lines.length; ++i) {\r\n            let pixelList: Pixel[] = [];\r\n            for (let x = 0; x < this.width; ++x) {\r\n                pixelList.push(new Pixel(this, 'rgba(0,0,0,0)', 'rgba(0,0,0,0.15)'));\r\n            }\r\n            tempPixel.push(pixelList);\r\n            this.tetrisGame.UpdateUINumofLine();\r\n        }\r\n\r\n        for (let i = 0; i < this.pixels.length; ++i) {\r\n            if (lines[indexLine] === i) {\r\n                indexLine++;\r\n            } else {\r\n                tempPixel.push(this.pixels[i]);\r\n            }\r\n        }\r\n        this.pixels = tempPixel;\r\n        return true;\r\n    }\r\n    IsOver() {\r\n        // this.pixels[0][this.pixels[0]]\r\n    }\r\n    CheckLines() {\r\n        const lines = [];\r\n        for (let y = 0; y < this.pixels.length; ++y) {\r\n\r\n            let needRemove = true;\r\n            for (let x = 0; x < this.pixels[y].length; ++x) {\r\n                if (!this.pixels[y][x].isFill) { needRemove = false; }\r\n            }\r\n            if (needRemove) {\r\n                lines.push(y);\r\n            }\r\n        }\r\n        return lines;\r\n    }\r\n    CheckCollision(block: Blockbase) {\r\n        if (this.pixels.length === 0) { return undefined; }\r\n        const mat = block.GetMat();\r\n\r\n        let collided: boolean = false;\r\n        for (let y = 0; y < mat.length; ++y) {\r\n            for (let x = 0; x < mat[y].length; ++x) {\r\n                const isFill = mat[y][x];\r\n                if (isFill === 1) {\r\n                    // check blow\r\n                    let xIndex = block.vec.x + x;\r\n                    let yIndex = block.vec.y + y + 1;\r\n                    // console.log(yIndex, xIndex);\r\n                    // console.log(this.pixels);\r\n                    if (yIndex > this.height - 1 || this.pixels[yIndex][xIndex] && this.pixels[yIndex][xIndex].isFill) {\r\n                        collided = true;\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n        if (collided) {\r\n            for (let y = 0; y < mat.length; ++y) {\r\n                for (let x = 0; x < mat[y].length; ++x) {\r\n                    const isFill = mat[y][x];\r\n                    if (isFill === 1) {\r\n                        const xIndex = block.vec.x + x;\r\n                        const yIndex = block.vec.y + y + 1;\r\n\r\n                        console.log(yIndex, xIndex);\r\n                        console.log(this.pixels);\r\n\r\n                        if (yIndex < this.height + 1) {\r\n                            this.pixels[yIndex - 1][xIndex].isFill = true;\r\n                            this.pixels[yIndex - 1][xIndex].colorFill = block.colorFill;\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n            return true;\r\n        }\r\n        return false;\r\n    }\r\n    ClonePixels() {\r\n        const temp = [];\r\n        for (let y = 0; y < this.pixels.length; ++y) {\r\n            const tempSub = [];\r\n            for (let x = 0; x < this.pixels[y].length; ++x) {\r\n                tempSub.push(this.pixels[y][x].DeepCopy());\r\n            }\r\n            temp.push(tempSub);\r\n        }\r\n        return temp;\r\n    }\r\n    Render(ctx: CanvasRenderingContext2D) {\r\n        // console.log(this.pixels);\r\n\r\n        let needComputeMaxLine = true;\r\n\r\n\r\n        for (let y = 0; y < this.pixels.length; ++y) {\r\n            for (let x = 0; x < this.pixels[y].length; ++x) {\r\n\r\n\r\n                if (this.pixels[y][x].isFill && needComputeMaxLine) {\r\n                    this.numLineMax = y;\r\n                    needComputeMaxLine = false;\r\n                }\r\n\r\n\r\n                this.pixels[y][x].Render(ctx, x, y);\r\n            }\r\n        }\r\n        // console.log(this.numLineMax);\r\n    }\r\n}\r\nexport class Pixel {\r\n    pixelMap: PixelMap;\r\n    isFill: boolean = false;\r\n    colorFill: string;\r\n    colorStroke: string;\r\n    width: number = 1;\r\n    height: number = 1;\r\n    constructor(pixelMap: PixelMap, colorFill: string, colorStroke: string) {\r\n        this.pixelMap = pixelMap;\r\n        this.colorFill = colorFill;\r\n        this.colorStroke = colorStroke;\r\n    }\r\n    DeepCopy() {\r\n        const p = new Pixel(this.pixelMap, this.colorFill, this.colorStroke);\r\n        p.isFill = this.isFill;\r\n        return p;\r\n    }\r\n    Render(ctx: CanvasRenderingContext2D, x: number, y: number) {\r\n        ctx.beginPath();\r\n        // console.log(this.vec.x * this.scale, this.vec.y * this.scale);\r\n        ctx.rect(x * this.pixelMap.tetrisGame.scaleForRender, y * this.pixelMap.tetrisGame.scaleForRender, this.width * this.pixelMap.tetrisGame.scaleForRender, this.height * this.pixelMap.tetrisGame.scaleForRender);\r\n        ctx.closePath();\r\n        ctx.fillStyle = this.colorFill;\r\n        ctx.fill();\r\n        ctx.strokeStyle = this.colorStroke;\r\n        ctx.stroke();\r\n    }\r\n}","import { Blockbase } from '../Block/Blockbase';\r\nimport { TetrisGame } from '../TetrisGame';\r\n\r\n\r\nexport enum ACTION {\r\n    left = 'left',\r\n    right = 'right',\r\n    rotate = 'rotate',\r\n    down = 'down',\r\n}\r\n\r\nexport class Player {\r\n    tetrisGame: TetrisGame;\r\n    actions: ACTION[] = [];\r\n\r\n    constructor(tetrisGame: TetrisGame) {\r\n        this.tetrisGame = tetrisGame;\r\n\r\n    }\r\n    AddAction(action: ACTION) {\r\n        this.actions.push(action);\r\n    }\r\n    GetActionuQueue() {\r\n        return this.actions.shift();\r\n    }\r\n    Update(block: Blockbase) {\r\n        const mat = block.GetMat();\r\n        const map = this.tetrisGame.pixelMap.pixels;\r\n\r\n        // scan lines\r\n        let startLine = this.tetrisGame.pixelMap.numLineMax - 3 < 0 ? 0 : this.tetrisGame.pixelMap.numLineMax - 3;\r\n        console.log('startLine', startLine);\r\n\r\n        let possbilities = 0;\r\n\r\n        for (let y = startLine; y < map.length - 3; ++y) {\r\n            for (let x = 0; x < map[y].length - 2; ++x) {\r\n\r\n                let possible = true;\r\n                for (let yOff = 0; yOff < mat.length; ++yOff) {\r\n                    for (let xOff = 0; xOff < mat[yOff].length; ++xOff) {\r\n                        const x1 = x + xOff;\r\n                        const y1 = y + yOff;\r\n\r\n                        const pixel = map[y1][x1];\r\n                        const kernel = mat[yOff][xOff];\r\n\r\n                        if (kernel === 1 && pixel.isFill) {\r\n                            possible = false;\r\n                            // debugger\r\n                        }\r\n\r\n                    }\r\n                }\r\n                // console.log(possible);\r\n                if (possible) {\r\n                    // console.log(x, y);\r\n                    possbilities++;\r\n\r\n                    // this.Cost(x, y, mat);\r\n                }\r\n\r\n            }\r\n        }\r\n\r\n        console.log('startLine', startLine, 'possbilities', possbilities);\r\n        this.UpdateAction();\r\n    }\r\n    Cost(x: number, y: number, mat: number[][]) {\r\n        // const pMap = this.tetrisGame.pixelMap.ClonePixels();\r\n        // console.log(pMap);\r\n    }\r\n    UpdateAction() {\r\n        const rnd = Math.random();\r\n\r\n        if (rnd < 0.9) {\r\n\r\n            const rnd2 = Math.random();\r\n            if (rnd2 < 0.3) {\r\n                this.AddAction(ACTION.left);\r\n            } else if (0.3 < rnd2 && rnd2 < 0.6) {\r\n                this.AddAction(ACTION.right);\r\n            } else if (0.6 < rnd2 && rnd2 < 0.9) {\r\n                this.AddAction(ACTION.rotate);\r\n            } else {\r\n                this.AddAction(ACTION.down);\r\n            }\r\n        }\r\n\r\n\r\n    }\r\n}","// import { NVector3 } from '../../../../../../NJSCore';\r\n// import { Blockbase } from './Block/Blockbase';\r\nimport { BlocKA } from './Block/BlocKA';\r\nimport { BlocKB } from './Block/BlocKB';\r\nimport { BlocKC } from './Block/BlocKC';\r\n// import { BlocKA } from './Block/BlocKA';\r\nimport { PixelMap } from './Pixel/PixelMap';\r\nimport { Player, ACTION } from './Player/player';\r\nimport { TetrisSystem } from '..';\r\nexport class TetrisGame {\r\n    tetrisSystem: TetrisSystem;\r\n\r\n    canvas: HTMLCanvasElement;\r\n    dx = 2;\r\n    dy = -2;\r\n    paddleHeight = 10;\r\n    paddleWidth = 75;\r\n    paddleX = 10;\r\n    rightPressed = false;\r\n    leftPressed = false;\r\n    // brickRowCount = 3;\r\n    // brickColumnCount = 5;\r\n    // brickWidth = 75;\r\n    // brickHeight = 20;\r\n    // brickPadding = 10;\r\n    // brickOffsetTop = 30;\r\n    // brickOffsetLeft = 30;\r\n\r\n    blockbase: BlocKA;\r\n    pixelMap: PixelMap;\r\n    player: Player;\r\n\r\n    timer: number = 0;\r\n    scaleForRender: number = 10;\r\n    speed: number = 10;\r\n    widthNum: number;\r\n    heightNum: number;\r\n    hasKeyboardInput: boolean = false;\r\n\r\n    numOfBlock = 0;\r\n    numOfLine = 0;\r\n\r\n    pause: boolean = false;\r\n\r\n    constructor(tetrisSystem: TetrisSystem, widthNum: number, heightNum: number, scale: number, speed: number) {\r\n        this.tetrisSystem = tetrisSystem;\r\n        this.scaleForRender = scale;\r\n        this.widthNum = widthNum;\r\n        this.heightNum = heightNum;\r\n\r\n        this.canvas = this.tetrisSystem.CanvasCore.canvas;\r\n        this.paddleX = (this.canvas.width - this.paddleWidth) / 2;\r\n        this.speed = speed;\r\n\r\n        document.onkeydown = (e: KeyboardEvent) => this.keyDownHandler(e);\r\n        document.onkeyup = (e: KeyboardEvent) => this.keyUpHandler(e);\r\n\r\n        // document.addEventListener('keydown', this.keyDownHandler, false);\r\n        // document.addEventListener('keyup', this.keyUpHandler, false);\r\n        this.Init();\r\n    }\r\n    public keyDownHandler(e: KeyboardEvent) {\r\n        this.hasKeyboardInput = true;\r\n        if (this.pause) { return; }\r\n        // console.log(e.key)\r\n        if (e.key === 'Right' || e.key === 'ArrowRight') {\r\n            this.rightPressed = true;\r\n            this.blockbase.UpdatePos(true, this.pixelMap);\r\n        }\r\n        else if (e.key === 'Left' || e.key === 'ArrowLeft') {\r\n            this.leftPressed = true;\r\n            this.blockbase.UpdatePos(false, this.pixelMap);\r\n        }\r\n        else if (e.key === 'Up' || e.key === 'ArrowUp') {\r\n            this.leftPressed = true;\r\n            this.blockbase.UpdateRot(this.pixelMap);\r\n        }\r\n        else if (e.key === 'Down' || e.key === 'ArrowDown') {\r\n            this.leftPressed = true;\r\n            this.blockbase.UpdateMove(this.pixelMap);\r\n        }\r\n    }\r\n\r\n    public keyUpHandler(e: KeyboardEvent) {\r\n        if (e.key === 'Right' || e.key === 'ArrowRight') {\r\n            this.rightPressed = false;\r\n        }\r\n        else if (e.key === 'Left' || e.key === 'ArrowLeft') {\r\n            this.leftPressed = false;\r\n        }\r\n    }\r\n    // collisionDetection() {\r\n    //     for (let c = 0; c < this.brickColumnCount; c++) {\r\n    //         for (let r = 0; r < this.brickRowCount; r++) {\r\n    //             let b = this.bricks[c][r];\r\n    //             if (b.status === 1) {\r\n    //                 if (this.ball.pos.x > b.pos.x && this.ball.pos.x < b.pos.x + this.brickWidth && this.ball.pos.y > b.pos.y && this.ball.pos.y < b.pos.y + this.brickHeight) {\r\n    //                     this.dy = -this.dy;\r\n    //                     b.status = 0;\r\n    //                 }\r\n    //             }\r\n    //         }\r\n    //     }\r\n    // }\r\n    UpdateUINumofBlock() {\r\n        this.numOfBlock++;\r\n        this.tetrisSystem.CanvasCore.p0.innerText = `Blocks: ${this.numOfBlock}`;\r\n    }\r\n    UpdateUINumofLine() {\r\n        this.numOfLine++;\r\n        this.tetrisSystem.CanvasCore.p1.innerText = `Lines removed: ${this.numOfLine}`;\r\n    }\r\n    Init() {\r\n        this.pause = false;\r\n        this.pixelMap = new PixelMap(this, this.widthNum, this.heightNum);\r\n        this.player = new Player(this);\r\n        this.InitBlock();\r\n        this.InitUI();\r\n    }\r\n    InitUI() {\r\n        this.numOfBlock = 0;\r\n        this.numOfLine = 0;\r\n        this.tetrisSystem.CanvasCore.p0.innerText = `Blocks: ${this.numOfBlock}`;\r\n        this.tetrisSystem.CanvasCore.p1.innerText = `Lines removed: ${this.numOfLine}`;\r\n    }\r\n    InitBlock() {\r\n        this.pixelMap.RemoveLine();\r\n        if (this.pixelMap.isDone()) {\r\n            console.log('done!!!!!');\r\n            return;\r\n        }\r\n        const prob = Math.random();\r\n        if (prob < 0.3) {\r\n            this.blockbase = new BlocKA(this, this.widthNum, this.heightNum, Math.floor(this.widthNum * 0.5), 0);\r\n        } else if (0.3 < prob && prob < 0.6) {\r\n            this.blockbase = new BlocKB(this, this.widthNum, this.heightNum, Math.floor(this.widthNum * 0.5), 0);\r\n        } else if (0.6 < prob) {\r\n            this.blockbase = new BlocKC(this, this.widthNum, this.heightNum, Math.floor(this.widthNum * 0.5), 0);\r\n        }\r\n\r\n        this.UpdateUINumofBlock();\r\n    }\r\n    Render(ctx: CanvasRenderingContext2D) {\r\n        // this.RenderBricks(ctx);\r\n\r\n        // this.collisionDetection();\r\n\r\n\r\n        this.pixelMap.Render(ctx);\r\n\r\n        this.blockbase.Render(ctx);\r\n\r\n        if (!this.hasKeyboardInput) {\r\n            if (this.timer % 2 === 0) {\r\n                const action = this.player.GetActionuQueue();\r\n                if (action) {\r\n                    const queue = action as ACTION;\r\n                    // console.log(queue);\r\n                    switch (queue) {\r\n                        case ACTION.left:\r\n                            this.blockbase.UpdatePos(false, this.pixelMap);\r\n                            break;\r\n                        case ACTION.right:\r\n                            this.blockbase.UpdatePos(true, this.pixelMap);\r\n                            break;\r\n                        case ACTION.rotate:\r\n                            this.blockbase.UpdateRot(this.pixelMap);\r\n                            break;\r\n                        case ACTION.down:\r\n                            this.blockbase.UpdateMove(this.pixelMap);\r\n                            break;\r\n                        default:\r\n                            break;\r\n                    }\r\n\r\n                }\r\n            }\r\n        }\r\n\r\n\r\n        if (this.timer % 100 === 0) {\r\n            this.player.Update(this.blockbase);\r\n        }\r\n\r\n\r\n        if (!this.pause && this.timer % this.speed === 0) {\r\n            // console.log(this.speed);\r\n            if (!this.blockbase.UpdateMove(this.pixelMap)) {\r\n                this.Init();\r\n            }\r\n        }\r\n\r\n        this.timer++;\r\n    }\r\n\r\n}","import { TetrisSystem } from '..';\r\nexport class CanvasCore {\r\n    TetrisSystem: TetrisSystem;\r\n    canvas: HTMLCanvasElement;\r\n    host: HTMLElement;\r\n\r\n    divLocalMain: HTMLElement;\r\n    divCanvas: HTMLElement;\r\n    divUI: HTMLElement;\r\n\r\n    ctx: CanvasRenderingContext2D;\r\n    timer: NodeJS.Timer | number;\r\n    click: boolean = false;\r\n    pressed: boolean = false;\r\n    prevent: boolean = false;\r\n    delay: number = 500;\r\n    down: boolean = false;\r\n    t: number = 0.0;\r\n\r\n    width: number;\r\n    height: number;\r\n    name: string;\r\n\r\n    pName: HTMLElement;\r\n    p0: HTMLElement;\r\n    p1: HTMLElement;\r\n    p2: HTMLElement;\r\n    constructor(TetrisSystem: TetrisSystem, width: number = 150, height: number = 300, name: string = 'You') {\r\n        this.TetrisSystem = TetrisSystem;\r\n        this.width = width;\r\n        this.height = height;\r\n        this.name = name;\r\n\r\n        const host = document.getElementById(TetrisSystem.id);\r\n        if (!host) { return; } this.host = host;\r\n\r\n        this.InitCanvas();\r\n    }\r\n    InitCanvas() {\r\n        const divLocalMain = document.createElement('div');\r\n        if (!divLocalMain) { return; } this.divLocalMain = divLocalMain;\r\n        // this.divLocalMain.style.display = 'flex';\r\n        this.divLocalMain.style.display = 'inline-grid';\r\n        // this.divLocalMain.style.width = '100%';\r\n        this.divLocalMain.style.width = this.width + 'px'; // this.host.clientWidth;\r\n        this.divLocalMain.style.height = this.height + 'px'; // this.host.clientHeight;\r\n        this.divLocalMain.style.margin = '10px';\r\n        this.divLocalMain.style.padding = '10px';\r\n        this.host.append(divLocalMain);\r\n\r\n        const divCanvas = document.createElement('div');\r\n        if (!divCanvas) { return; } this.divCanvas = divCanvas;\r\n        // this.divCanvas.style.width = '50%';\r\n        this.divLocalMain.append(divCanvas);\r\n\r\n        const canvas = document.createElement('canvas');\r\n        if (canvas) {\r\n            this.canvas = canvas;\r\n            this.divCanvas.append(this.canvas);\r\n\r\n            this.canvas.width = this.width; // this.host.clientWidth;\r\n            this.canvas.height = this.height; // this.host.clientHeight;\r\n            this.canvas.style.backgroundColor = '#dddddd';\r\n            const ctx = this.canvas.getContext('2d');\r\n            if (ctx) {\r\n                this.ctx = ctx;\r\n                this.InitUI();\r\n                this.Init();\r\n            }\r\n        }\r\n    }\r\n    InitUI() {\r\n        const divUI = document.createElement('div');\r\n        if (!divUI) { return; } this.divUI = divUI;\r\n        this.divLocalMain.append(divUI);\r\n        // this.divUI.style.marginLeft = '10px';\r\n        this.divUI.style.width = '100%';\r\n        this.divUI.style.display = 'grid';\r\n\r\n        const btn = document.createElement('button');\r\n        btn.textContent = 'reset';\r\n        btn.onclick = () => { this.TetrisSystem.InitGame(); };\r\n        this.divUI.append(btn);\r\n\r\n        this.pName = document.createElement('p');\r\n        if (!this.pName) { return; } this.divUI.append(this.pName);\r\n        this.pName.style.width = 'max-content';\r\n        this.pName.innerHTML = `Player: ${this.name}`;\r\n\r\n        this.p0 = document.createElement('p');\r\n        if (!this.p0) { return; } this.divUI.append(this.p0);\r\n        this.p0.style.width = 'max-content';\r\n        this.p0.innerHTML = 'Blocks';\r\n\r\n        this.p1 = document.createElement('p');\r\n        if (!this.p1) { return; } this.divUI.append(this.p1);\r\n        this.p1.style.width = 'Lines removed: ';\r\n        this.p1.innerHTML = '';\r\n\r\n        this.p2 = document.createElement('p');\r\n        if (!this.p2) { return; } this.divUI.append(this.p2);\r\n        this.p2.style.width = 'max-content';\r\n        this.p2.innerHTML = '';\r\n    }\r\n    Init() {\r\n        // this.ctx.translate(this.ctx.canvas.width * 0.5, this.ctx.canvas.height * 0.5);\r\n        // this.ctx.scale(2, 2);\r\n        this.ctx.scale(1, 1);\r\n        this.EventBind();\r\n        this.Loop();\r\n    }\r\n    EventBind() {\r\n        this.canvas.onclick = (e: MouseEvent) => {\r\n            this.prevent = false;\r\n            this.timer = setTimeout(\r\n                () => {\r\n                    if (!this.prevent) {\r\n                        if (!this.click) { return; }\r\n                        this.MouseClick(e);\r\n                    }\r\n                    this.prevent = false;\r\n                },\r\n                this.delay);\r\n        };\r\n        this.canvas.ondblclick = (e: MouseEvent) => {\r\n            clearTimeout(this.timer as number);\r\n            this.prevent = true;\r\n            this.MouseDoubleClick(e);\r\n        };\r\n        this.canvas.addEventListener('wheel', (e: WheelEvent) => this.MouseWheel(e, e.deltaY));\r\n\r\n        // this.canvas.onclick = (e: MouseEvent) => {\r\n        //     this.timer = setTimeout(() => {\r\n        //         if (!this.prevent) { this.MouseClick(e); }\r\n        //         this.prevent = false;\r\n        //     }, this.delay);\r\n        // };\r\n        // this.canvas.ondblclick = (e: MouseEvent) => {\r\n        //     clearTimeout(this.timer as number);\r\n        //     this.prevent = true;\r\n        //     this.MouseDoubleClick(e);\r\n        // };\r\n        this.canvas.onmousedown = (e: MouseEvent) => {\r\n            this.click = true;\r\n            this.pressed = true;\r\n            this.MouseDown(e);\r\n        };\r\n        this.canvas.onmouseup = (e: MouseEvent) => {\r\n            this.pressed = false;\r\n            this.MouseUp(e);\r\n        };\r\n        this.canvas.onmousemove = (e: MouseEvent) => {\r\n            if (this.pressed) { this.click = false; this.MouseDrag(e); }\r\n            this.MouseMove(e);\r\n        };\r\n        window.onresize = (e: UIEvent) => this.Resize(e);\r\n\r\n    }\r\n    Resize(e: UIEvent) {\r\n        // console.log(e);\r\n        // this.canvas.width = this.divCanvas.clientWidth;\r\n        // this.canvas.height = this.divCanvas.clientHeight;\r\n    }\r\n    Loop() {\r\n        requestAnimationFrame(() => { this.Loop(); });\r\n\r\n        this.ctx.clearRect(0, 0, this.ctx.canvas.width, this.ctx.canvas.height);\r\n        this.ctx.fillStyle = '#dddddd';\r\n        this.ctx.beginPath();\r\n        this.ctx.rect(0, 0, this.ctx.canvas.width, this.ctx.canvas.height);\r\n        this.ctx.closePath();\r\n        this.ctx.fill();\r\n        this.Render(this.ctx);\r\n    }\r\n    Render(ctx: CanvasRenderingContext2D) {\r\n        // console.log(ctx);\r\n    }\r\n    MouseClick(e: MouseEvent) {\r\n        // console.log(e);\r\n    }\r\n    MouseDoubleClick(e: MouseEvent) {\r\n        // console.log(e);\r\n    }\r\n    MouseDown(e: MouseEvent) {\r\n        // console.log(e);\r\n    }\r\n    MouseUp(e: MouseEvent) {\r\n        // console.log(e);\r\n    }\r\n    MouseMove(e: MouseEvent) {\r\n        // console.log(e);\r\n    }\r\n    MouseDrag(e: MouseEvent) {\r\n        //\r\n    }\r\n    MouseWheel(e: WheelEvent, deltaY: number) {\r\n        // console.log(e);\r\n    }\r\n}","import { TetrisGame } from './Core/TetrisGame';\r\nimport { NVector3 } from '../lib';\r\nimport { CanvasCore } from './CanvasCore';\r\nexport class TetrisSystem {\r\n    CanvasCore: CanvasCore;\r\n    tetrisGame: TetrisGame;\r\n    t = 0.9;\r\n    id: string;\r\n    scale: number = 10;\r\n    width: number = 15;\r\n    height: number = 30;\r\n    speed: number = 30;\r\n    m: NVector3 = new NVector3(0, 0, 0);\r\n    constructor(id: string, name: string, width: number = 10, height: number = 10, scale: number = 10, speed: number = 30) {\r\n        this.id = id;\r\n        this.scale = scale;\r\n        this.width = width;\r\n        this.height = height;\r\n        this.speed = speed;\r\n        this.CanvasCore = new CanvasCore(this, this.width * this.scale, this.height * this.scale, name);\r\n        this.Init();\r\n        this.InitGame();\r\n    }\r\n    Init() {\r\n        this.CanvasCore.Render = (ctx: CanvasRenderingContext2D) => this.Render(ctx);\r\n        this.CanvasCore.MouseDown = (e: MouseEvent) => this.MouseDown(e);\r\n        this.CanvasCore.MouseClick = (e: MouseEvent) => this.MouseClick(e);\r\n        this.CanvasCore.MouseDoubleClick = (e: MouseEvent) => this.MouseDoubleClick(e);\r\n        this.CanvasCore.MouseUp = (e: MouseEvent) => this.MouseUp(e);\r\n        this.CanvasCore.MouseMove = (e: MouseEvent) => this.MouseMove(e);\r\n        this.CanvasCore.MouseDrag = (e: MouseEvent) => this.MouseDrag(e);\r\n    }\r\n    InitGame() {\r\n        this.tetrisGame = new TetrisGame(this, this.width, this.height, this.scale, this.speed);\r\n    }\r\n    Render(ctx: CanvasRenderingContext2D) {\r\n        if (this.tetrisGame) {\r\n            this.tetrisGame.Render(ctx);\r\n        }\r\n    }\r\n    // .......................................................................................\r\n    MouseDown(e: MouseEvent) {\r\n        this.m.x = ((e.x - this.CanvasCore.canvas.offsetLeft) - this.CanvasCore.canvas.width * 0.5) * 1;\r\n        this.m.y = ((e.y - this.CanvasCore.canvas.offsetTop) - this.CanvasCore.canvas.height * 0.5) * 1;\r\n        // this.tetrisGame.MouseDown(this.m.x, this.m.y);\r\n    }\r\n    MouseUp(e: MouseEvent) {\r\n        //\r\n    }\r\n    MouseMove(e: MouseEvent) {\r\n        //\r\n    }\r\n    MouseDrag(e: MouseEvent) {\r\n        //\r\n    }\r\n    MouseClick(e: MouseEvent) {\r\n        //\r\n    }\r\n    MouseDoubleClick(e: MouseEvent) {\r\n        //\r\n    }\r\n}","import { TetrisSystem } from './TetrisSystem';\r\nexport class Implementation {\r\n    constructor(id: string) {\r\n        // new TetrisSystem(id);\r\n        // new TetrisSystem(id);\r\n        // new TetrisSystem(id);\r\n        // new TetrisSystem(id);\r\n\r\n        let param = {\r\n            name: 'NJ',\r\n            width: 6,\r\n            height: 10,\r\n            scale: 40,\r\n            speed: 12,\r\n        };\r\n        new TetrisSystem(id, param.name, param.width, param.height, param.scale, param.speed);\r\n\r\n        param = {\r\n            name: 'Kuan',\r\n            width: 15,\r\n            height: 10,\r\n            scale: 40,\r\n            speed: 5,\r\n        };\r\n        new TetrisSystem(id, param.name, param.width, param.height, param.scale, param.speed);\r\n        param = {\r\n            name: 'NJ',\r\n            width: 6,\r\n            height: 10,\r\n            scale: 40,\r\n            speed: 9,\r\n        };\r\n        new TetrisSystem(id, param.name, param.width, param.height, param.scale, param.speed);\r\n\r\n        param = {\r\n            name: 'Kuan',\r\n            width: 15,\r\n            height: 10,\r\n            scale: 40,\r\n            speed: 6,\r\n        };\r\n        new TetrisSystem(id, param.name, param.width, param.height, param.scale, param.speed);\r\n        param = {\r\n            name: 'Kuan',\r\n            width: 15,\r\n            height: 10,\r\n            scale: 40,\r\n            speed: 5,\r\n        };\r\n        new TetrisSystem(id, param.name, param.width, param.height, param.scale, param.speed);\r\n        param = {\r\n            name: 'NJ',\r\n            width: 6,\r\n            height: 10,\r\n            scale: 40,\r\n            speed: 9,\r\n        };\r\n        new TetrisSystem(id, param.name, param.width, param.height, param.scale, param.speed);\r\n\r\n        param = {\r\n            name: 'Kuan',\r\n            width: 15,\r\n            height: 10,\r\n            scale: 40,\r\n            speed: 6,\r\n        };\r\n        new TetrisSystem(id, param.name, param.width, param.height, param.scale, param.speed);\r\n\r\n        param = {\r\n            name: 'Kuan',\r\n            width: 15,\r\n            height: 10,\r\n            scale: 40,\r\n            speed: 5,\r\n        };\r\n        new TetrisSystem(id, param.name, param.width, param.height, param.scale, param.speed);\r\n        param = {\r\n            name: 'NJ',\r\n            width: 6,\r\n            height: 10,\r\n            scale: 40,\r\n            speed: 9,\r\n        };\r\n        new TetrisSystem(id, param.name, param.width, param.height, param.scale, param.speed);\r\n\r\n        param = {\r\n            name: 'Kuan',\r\n            width: 15,\r\n            height: 10,\r\n            scale: 40,\r\n            speed: 6,\r\n        };\r\n        new TetrisSystem(id, param.name, param.width, param.height, param.scale, param.speed);\r\n        param = {\r\n            name: 'Kuan',\r\n            width: 15,\r\n            height: 10,\r\n            scale: 40,\r\n            speed: 5,\r\n        };\r\n        new TetrisSystem(id, param.name, param.width, param.height, param.scale, param.speed);\r\n        param = {\r\n            name: 'NJ',\r\n            width: 6,\r\n            height: 10,\r\n            scale: 40,\r\n            speed: 9,\r\n        };\r\n        new TetrisSystem(id, param.name, param.width, param.height, param.scale, param.speed);\r\n\r\n        param = {\r\n            name: 'Kuan',\r\n            width: 15,\r\n            height: 10,\r\n            scale: 40,\r\n            speed: 6,\r\n        };\r\n        new TetrisSystem(id, param.name, param.width, param.height, param.scale, param.speed);\r\n        param = {\r\n            name: 'You',\r\n            width: 50,\r\n            height: 20,\r\n            scale: 40,\r\n            speed: 5,\r\n        };\r\n        new TetrisSystem(id, param.name, param.width, param.height, param.scale, param.speed);\r\n    }\r\n}","import { Implementation } from './Implementation';\r\nexport class Demo250AppTetrisGame {\r\n    implementation: Implementation;\r\n    host: HTMLElement;\r\n    static Init(id: string) {\r\n        const n = new Demo250AppTetrisGame(id);\r\n        n.Dummy();\r\n    }\r\n    constructor(id: string = 'SandBox') {\r\n        const host = document.getElementById(id);\r\n        if (host) {\r\n            this.host = host;\r\n            this.host.style.overflow = 'auto';\r\n        }\r\n        this.implementation = new Implementation(id);\r\n    }\r\n    Dummy() {\r\n        //\r\n    }\r\n}\r\n\r\nexport class Solution {\r\n    public divHost: HTMLElement;\r\n\r\n    constructor(id: string ) {\r\n        this.divHost = document.getElementById(id);\r\n\r\n        Demo250AppTetrisGame.Init(id)\r\n    }\r\n    public destroy() {\r\n        if (this.divHost) {\r\n            try {\r\n                while (this.divHost.firstChild) {\r\n                    this.divHost.removeChild(this.divHost.firstChild);\r\n                }\r\n            } catch (error) {\r\n                console.error('Error in destroy method:', error);\r\n            }\r\n        } else {\r\n            console.warn('divHost is undefined in destroy method');\r\n        }\r\n    }\r\n}"],"names":["getTransposeMatrix","a","w","length","h","Array","i","j","t","Blockbase","constructor","tetrisGame","widthMap","heightMap","x","y","pixels","vec","widthPixel","heightPixel","colorFill","colorStroke","this","NVector3","ColorUtility","InitBlock","push","UpdateMove","pMap","Update","GetMat","UpdatePos","CheckValidatedGround","theX","UpdateCheckWithMap","right","mat","xIndex","yIndex","heightNum","pixel","isFill","UpdateRot","Render","ctx","pos","Clone","RenderPixel","beginPath","rect","scaleForRender","closePath","fillStyle","fill","strokeStyle","stroke","BlocKA","super","ShiftMatrix","direction","console","log","width","isCol","BlocKB","BlocKC","PixelMap","height","numLineMax","Init","pixelList","Pixel","block","CheckCollision","isDone","AddEmptyLine","temp","concat","RemoveLine","lines","CheckLines","indexLine","tempPixel","UpdateUINumofLine","IsOver","needRemove","collided","ClonePixels","tempSub","DeepCopy","needComputeMaxLine","pixelMap","p","ACTION","Player","actions","AddAction","action","GetActionuQueue","shift","map","startLine","possbilities","possible","yOff","xOff","x1","UpdateAction","Cost","Math","random","rnd2","left","rotate","down","TetrisGame","tetrisSystem","widthNum","scale","speed","canvas","dx","dy","paddleHeight","paddleWidth","paddleX","rightPressed","leftPressed","blockbase","player","timer","hasKeyboardInput","numOfBlock","numOfLine","pause","CanvasCore","document","onkeydown","e","keyDownHandler","onkeyup","keyUpHandler","key","UpdateUINumofBlock","p0","innerText","p1","InitUI","prob","floor","TetrisSystem","name","host","divLocalMain","divCanvas","divUI","click","pressed","prevent","delay","pName","p2","getElementById","id","InitCanvas","createElement","style","display","margin","padding","append","backgroundColor","getContext","btn","textContent","onclick","InitGame","innerHTML","EventBind","Loop","setTimeout","MouseClick","ondblclick","clearTimeout","MouseDoubleClick","addEventListener","MouseWheel","deltaY","onmousedown","MouseDown","onmouseup","MouseUp","onmousemove","MouseDrag","MouseMove","window","onresize","Resize","requestAnimationFrame","clearRect","m","offsetLeft","offsetTop","Implementation","param","Demo250AppTetrisGame","static","Dummy","implementation","overflow","Solution","divHost","destroy","firstChild","removeChild","error","warn"],"sourceRoot":""}