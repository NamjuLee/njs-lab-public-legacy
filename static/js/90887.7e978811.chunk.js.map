{"version":3,"file":"static/js/90887.7e978811.chunk.js","mappings":"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","sources":["njslab/LabStarter/AppNGL3d/NGL3dApp_06/Utility/Matrix4.ts","njslab/LabStarter/AppNGL3d/NGL3dApp_06/Utility/Vector3.ts","njslab/LabStarter/AppNGL3d/NGL3dApp_06/WebGL/Modal.ts","njslab/LabStarter/AppNGL3d/NGL3dApp_06/WebGL/Transform.ts"],"sourcesContent":["import { Vector3 } from './Vector3';\r\n\r\nexport class Matrix4 {\r\n    raw: Float32Array;\r\n    // ....................................................................\r\n    // Static Data Methods\r\n    static identity() {\r\n        let a = new Float32Array(16);\r\n        a[0] = a[5] = a[10] = a[15] = 1;\r\n        return a;\r\n    }\r\n\r\n    // from glMatrix\r\n    static perspective(out: Float32Array, fovy: number, aspect: number, near: number, far: number) {\r\n        let f = 1.0 / Math.tan(fovy / 2), nf = 1 / (near - far);\r\n        out[0] = f / aspect;\r\n        out[1] = 0;\r\n        out[2] = 0;\r\n        out[3] = 0;\r\n        out[4] = 0;\r\n        out[5] = f;\r\n        out[6] = 0;\r\n        out[7] = 0;\r\n        out[8] = 0;\r\n        out[9] = 0;\r\n        out[10] = (far + near) * nf;\r\n        out[11] = -1;\r\n        out[12] = 0;\r\n        out[13] = 0;\r\n        out[14] = (2 * far * near) * nf;\r\n        out[15] = 0;\r\n    }\r\n\r\n    static ortho(out: number[], left: number, right: number, bottom: number, top: number, near: number, far: number) {\r\n        let lr = 1 / (left - right),\r\n            bt = 1 / (bottom - top),\r\n            nf = 1 / (near - far);\r\n        out[0] = -2 * lr;\r\n        out[1] = 0;\r\n        out[2] = 0;\r\n        out[3] = 0;\r\n        out[4] = 0;\r\n        out[5] = -2 * bt;\r\n        out[6] = 0;\r\n        out[7] = 0;\r\n        out[8] = 0;\r\n        out[9] = 0;\r\n        out[10] = 2 * nf;\r\n        out[11] = 0;\r\n        out[12] = (left + right) * lr;\r\n        out[13] = (top + bottom) * bt;\r\n        out[14] = (far + near) * nf;\r\n        out[15] = 1;\r\n    }\r\n    // https:// github.com/toji/gl-matrix/blob/master/src/gl-matrix/mat4.js\r\n    // make the rows into the columns\r\n    static transpose(out: number[], a: number[]) {\r\n        // If we are transposing ourselves we can skip a few steps but have to cache some values\r\n        if (out === a) {\r\n            let a01 = a[1], a02 = a[2], a03 = a[3], a12 = a[6], a13 = a[7], a23 = a[11];\r\n            out[1] = a[4];\r\n            out[2] = a[8];\r\n            out[3] = a[12];\r\n            out[4] = a01;\r\n            out[6] = a[9];\r\n            out[7] = a[13];\r\n            out[8] = a02;\r\n            out[9] = a12;\r\n            out[11] = a[14];\r\n            out[12] = a03;\r\n            out[13] = a13;\r\n            out[14] = a23;\r\n        } else {\r\n            out[0] = a[0];\r\n            out[1] = a[4];\r\n            out[2] = a[8];\r\n            out[3] = a[12];\r\n            out[4] = a[1];\r\n            out[5] = a[5];\r\n            out[6] = a[9];\r\n            out[7] = a[13];\r\n            out[8] = a[2];\r\n            out[9] = a[6];\r\n            out[10] = a[10];\r\n            out[11] = a[14];\r\n            out[12] = a[3];\r\n            out[13] = a[7];\r\n            out[14] = a[11];\r\n            out[15] = a[15];\r\n        }\r\n\r\n        return out;\r\n    }\r\n\r\n    // Calculates a 3x3 normal matrix (transpose inverse) from the 4x4 matrix\r\n    static normalMat3(out: Float32Array, a: Float32Array) {\r\n        let a00 = a[0], a01 = a[1], a02 = a[2], a03 = a[3],\r\n            a10 = a[4], a11 = a[5], a12 = a[6], a13 = a[7],\r\n            a20 = a[8], a21 = a[9], a22 = a[10], a23 = a[11],\r\n            a30 = a[12], a31 = a[13], a32 = a[14], a33 = a[15],\r\n\r\n            b00 = a00 * a11 - a01 * a10,\r\n            b01 = a00 * a12 - a02 * a10,\r\n            b02 = a00 * a13 - a03 * a10,\r\n            b03 = a01 * a12 - a02 * a11,\r\n            b04 = a01 * a13 - a03 * a11,\r\n            b05 = a02 * a13 - a03 * a12,\r\n            b06 = a20 * a31 - a21 * a30,\r\n            b07 = a20 * a32 - a22 * a30,\r\n            b08 = a20 * a33 - a23 * a30,\r\n            b09 = a21 * a32 - a22 * a31,\r\n            b10 = a21 * a33 - a23 * a31,\r\n            b11 = a22 * a33 - a23 * a32,\r\n\r\n            //  Calculate the determinant\r\n            det = b00 * b11 - b01 * b10 + b02 * b09 + b03 * b08 - b04 * b07 + b05 * b06;\r\n\r\n        if (!det) { return null; }\r\n\r\n        det = 1.0 / det;\r\n\r\n        out[0] = (a11 * b11 - a12 * b10 + a13 * b09) * det;\r\n        out[1] = (a12 * b08 - a10 * b11 - a13 * b07) * det;\r\n        out[2] = (a10 * b10 - a11 * b08 + a13 * b06) * det;\r\n\r\n        out[3] = (a02 * b10 - a01 * b11 - a03 * b09) * det;\r\n        out[4] = (a00 * b11 - a02 * b08 + a03 * b07) * det;\r\n        out[5] = (a01 * b08 - a00 * b10 - a03 * b06) * det;\r\n\r\n        out[6] = (a31 * b05 - a32 * b04 + a33 * b03) * det;\r\n        out[7] = (a32 * b02 - a30 * b05 - a33 * b01) * det;\r\n        out[8] = (a30 * b04 - a31 * b02 + a33 * b00) * det;\r\n        return out;\r\n    }\r\n\r\n    // ....................................................................\r\n    // Static Operation\r\n\r\n    // https:// github.com/gregtatum/mdn-model-view-projection/blob/master/shared/matrices.js\r\n    static multiplyVector(mat4: Matrix4, v: number[]) {\r\n        let x = v[0], y = v[1], z = v[2], w = v[3];\r\n        let c1r1 = mat4[0], c2r1 = mat4[1], c3r1 = mat4[2], c4r1 = mat4[3],\r\n            c1r2 = mat4[4], c2r2 = mat4[5], c3r2 = mat4[6], c4r2 = mat4[7],\r\n            c1r3 = mat4[8], c2r3 = mat4[9], c3r3 = mat4[10], c4r3 = mat4[11],\r\n            c1r4 = mat4[12], c2r4 = mat4[13], c3r4 = mat4[14], c4r4 = mat4[15];\r\n\r\n        return [\r\n            x * c1r1 + y * c1r2 + z * c1r3 + w * c1r4,\r\n            x * c2r1 + y * c2r2 + z * c2r3 + w * c2r4,\r\n            x * c3r1 + y * c3r2 + z * c3r3 + w * c3r4,\r\n            x * c4r1 + y * c4r2 + z * c4r3 + w * c4r4\r\n        ];\r\n    }\r\n\r\n    // https:// github.com/toji/gl-matrix/blob/master/src/gl-matrix/vec4.js, vec4.transformMat4\r\n    static transformVec4(out: Float32Array, v: number[], m: Float32Array) {\r\n        out[0] = m[0] * v[0] + m[4] * v[1] + m[8] * v[2] + m[12] * v[3];\r\n        out[1] = m[1] * v[0] + m[5] * v[1] + m[9] * v[2] + m[13] * v[3];\r\n        out[2] = m[2] * v[0] + m[6] * v[1] + m[10] * v[2] + m[14] * v[3];\r\n        out[3] = m[3] * v[0] + m[7] * v[1] + m[11] * v[2] + m[15] * v[3];\r\n        return out;\r\n    }\r\n\r\n    // From glMatrix\r\n    // Multiple two mat4 together\r\n    static mult(out: Float32Array, a: Float32Array, b: Float32Array) {\r\n        let a00 = a[0], a01 = a[1], a02 = a[2], a03 = a[3],\r\n            a10 = a[4], a11 = a[5], a12 = a[6], a13 = a[7],\r\n            a20 = a[8], a21 = a[9], a22 = a[10], a23 = a[11],\r\n            a30 = a[12], a31 = a[13], a32 = a[14], a33 = a[15];\r\n\r\n        //  Cache only the current line of the second matrix\r\n        let b0 = b[0], b1 = b[1], b2 = b[2], b3 = b[3];\r\n        out[0] = b0 * a00 + b1 * a10 + b2 * a20 + b3 * a30;\r\n        out[1] = b0 * a01 + b1 * a11 + b2 * a21 + b3 * a31;\r\n        out[2] = b0 * a02 + b1 * a12 + b2 * a22 + b3 * a32;\r\n        out[3] = b0 * a03 + b1 * a13 + b2 * a23 + b3 * a33;\r\n\r\n        b0 = b[4]; b1 = b[5]; b2 = b[6]; b3 = b[7];\r\n        out[4] = b0 * a00 + b1 * a10 + b2 * a20 + b3 * a30;\r\n        out[5] = b0 * a01 + b1 * a11 + b2 * a21 + b3 * a31;\r\n        out[6] = b0 * a02 + b1 * a12 + b2 * a22 + b3 * a32;\r\n        out[7] = b0 * a03 + b1 * a13 + b2 * a23 + b3 * a33;\r\n\r\n        b0 = b[8]; b1 = b[9]; b2 = b[10]; b3 = b[11];\r\n        out[8] = b0 * a00 + b1 * a10 + b2 * a20 + b3 * a30;\r\n        out[9] = b0 * a01 + b1 * a11 + b2 * a21 + b3 * a31;\r\n        out[10] = b0 * a02 + b1 * a12 + b2 * a22 + b3 * a32;\r\n        out[11] = b0 * a03 + b1 * a13 + b2 * a23 + b3 * a33;\r\n\r\n        b0 = b[12]; b1 = b[13]; b2 = b[14]; b3 = b[15];\r\n        out[12] = b0 * a00 + b1 * a10 + b2 * a20 + b3 * a30;\r\n        out[13] = b0 * a01 + b1 * a11 + b2 * a21 + b3 * a31;\r\n        out[14] = b0 * a02 + b1 * a12 + b2 * a22 + b3 * a32;\r\n        out[15] = b0 * a03 + b1 * a13 + b2 * a23 + b3 * a33;\r\n        return out;\r\n    }\r\n\r\n    // ....................................................................\r\n    // Static Transformation\r\n    static scale(out: Float32Array, x: number, y: number, z: number) {\r\n        out[0] *= x;\r\n        out[1] *= x;\r\n        out[2] *= x;\r\n        out[3] *= x;\r\n        out[4] *= y;\r\n        out[5] *= y;\r\n        out[6] *= y;\r\n        out[7] *= y;\r\n        out[8] *= z;\r\n        out[9] *= z;\r\n        out[10] *= z;\r\n        out[11] *= z;\r\n        return out;\r\n    }\r\n\r\n    static rotateY(out: Float32Array, rad: number) {\r\n        let s = Math.sin(rad),\r\n            c = Math.cos(rad),\r\n            a00 = out[0],\r\n            a01 = out[1],\r\n            a02 = out[2],\r\n            a03 = out[3],\r\n            a20 = out[8],\r\n            a21 = out[9],\r\n            a22 = out[10],\r\n            a23 = out[11];\r\n\r\n        //  Perform axis-specific matrix multiplication\r\n        out[0] = a00 * c - a20 * s;\r\n        out[1] = a01 * c - a21 * s;\r\n        out[2] = a02 * c - a22 * s;\r\n        out[3] = a03 * c - a23 * s;\r\n        out[8] = a00 * s + a20 * c;\r\n        out[9] = a01 * s + a21 * c;\r\n        out[10] = a02 * s + a22 * c;\r\n        out[11] = a03 * s + a23 * c;\r\n        return out;\r\n    }\r\n\r\n    static rotateX(out: Float32Array, rad: number) {\r\n        let s = Math.sin(rad),\r\n            c = Math.cos(rad),\r\n            a10 = out[4],\r\n            a11 = out[5],\r\n            a12 = out[6],\r\n            a13 = out[7],\r\n            a20 = out[8],\r\n            a21 = out[9],\r\n            a22 = out[10],\r\n            a23 = out[11];\r\n\r\n        //  Perform axis-specific matrix multiplication\r\n        out[4] = a10 * c + a20 * s;\r\n        out[5] = a11 * c + a21 * s;\r\n        out[6] = a12 * c + a22 * s;\r\n        out[7] = a13 * c + a23 * s;\r\n        out[8] = a20 * c - a10 * s;\r\n        out[9] = a21 * c - a11 * s;\r\n        out[10] = a22 * c - a12 * s;\r\n        out[11] = a23 * c - a13 * s;\r\n        return out;\r\n    }\r\n\r\n    static rotateZ(out: Float32Array, rad: number) {\r\n        let s = Math.sin(rad),\r\n            c = Math.cos(rad),\r\n            a00 = out[0],\r\n            a01 = out[1],\r\n            a02 = out[2],\r\n            a03 = out[3],\r\n            a10 = out[4],\r\n            a11 = out[5],\r\n            a12 = out[6],\r\n            a13 = out[7];\r\n\r\n        //  Perform axis-specific matrix multiplication\r\n        out[0] = a00 * c + a10 * s;\r\n        out[1] = a01 * c + a11 * s;\r\n        out[2] = a02 * c + a12 * s;\r\n        out[3] = a03 * c + a13 * s;\r\n        out[4] = a10 * c - a00 * s;\r\n        out[5] = a11 * c - a01 * s;\r\n        out[6] = a12 * c - a02 * s;\r\n        out[7] = a13 * c - a03 * s;\r\n        return out;\r\n    }\r\n\r\n    static rotate(out: Float32Array, rad: number, axis: number) {\r\n        let x = axis[0], y = axis[1], z = axis[2],\r\n            len = Math.sqrt(x * x + y * y + z * z),\r\n            s, c, t,\r\n            a00, a01, a02, a03,\r\n            a10, a11, a12, a13,\r\n            a20, a21, a22, a23,\r\n            b00, b01, b02,\r\n            b10, b11, b12,\r\n            b20, b21, b22;\r\n\r\n        if (Math.abs(len) < 0.000001) { return null; }\r\n\r\n        len = 1 / len;\r\n        x *= len;\r\n        y *= len;\r\n        z *= len;\r\n\r\n        s = Math.sin(rad);\r\n        c = Math.cos(rad);\r\n        t = 1 - c;\r\n\r\n        a00 = out[0]; a01 = out[1]; a02 = out[2]; a03 = out[3];\r\n        a10 = out[4]; a11 = out[5]; a12 = out[6]; a13 = out[7];\r\n        a20 = out[8]; a21 = out[9]; a22 = out[10]; a23 = out[11];\r\n\r\n        //  Construct the elements of the rotation matrix\r\n        b00 = x * x * t + c; b01 = y * x * t + z * s; b02 = z * x * t - y * s;\r\n        b10 = x * y * t - z * s; b11 = y * y * t + c; b12 = z * y * t + x * s;\r\n        b20 = x * z * t + y * s; b21 = y * z * t - x * s; b22 = z * z * t + c;\r\n\r\n        //  Perform rotation-specific matrix multiplication\r\n        out[0] = a00 * b00 + a10 * b01 + a20 * b02;\r\n        out[1] = a01 * b00 + a11 * b01 + a21 * b02;\r\n        out[2] = a02 * b00 + a12 * b01 + a22 * b02;\r\n        out[3] = a03 * b00 + a13 * b01 + a23 * b02;\r\n        out[4] = a00 * b10 + a10 * b11 + a20 * b12;\r\n        out[5] = a01 * b10 + a11 * b11 + a21 * b12;\r\n        out[6] = a02 * b10 + a12 * b11 + a22 * b12;\r\n        out[7] = a03 * b10 + a13 * b11 + a23 * b12;\r\n        out[8] = a00 * b20 + a10 * b21 + a20 * b22;\r\n        out[9] = a01 * b20 + a11 * b21 + a21 * b22;\r\n        out[10] = a02 * b20 + a12 * b21 + a22 * b22;\r\n        out[11] = a03 * b20 + a13 * b21 + a23 * b22;\r\n        return out;\r\n    }\r\n\r\n    static invert(out: Float32Array, mat?: Float32Array) {\r\n        if (mat === undefined) { mat = out; }// If input isn't sent, then output is also input\r\n\r\n        let a00 = mat[0], a01 = mat[1], a02 = mat[2], a03 = mat[3],\r\n            a10 = mat[4], a11 = mat[5], a12 = mat[6], a13 = mat[7],\r\n            a20 = mat[8], a21 = mat[9], a22 = mat[10], a23 = mat[11],\r\n            a30 = mat[12], a31 = mat[13], a32 = mat[14], a33 = mat[15],\r\n\r\n            b00 = a00 * a11 - a01 * a10,\r\n            b01 = a00 * a12 - a02 * a10,\r\n            b02 = a00 * a13 - a03 * a10,\r\n            b03 = a01 * a12 - a02 * a11,\r\n            b04 = a01 * a13 - a03 * a11,\r\n            b05 = a02 * a13 - a03 * a12,\r\n            b06 = a20 * a31 - a21 * a30,\r\n            b07 = a20 * a32 - a22 * a30,\r\n            b08 = a20 * a33 - a23 * a30,\r\n            b09 = a21 * a32 - a22 * a31,\r\n            b10 = a21 * a33 - a23 * a31,\r\n            b11 = a22 * a33 - a23 * a32,\r\n\r\n            //  Calculate the determinant\r\n            det = b00 * b11 - b01 * b10 + b02 * b09 + b03 * b08 - b04 * b07 + b05 * b06;\r\n\r\n        if (!det) { return false; }\r\n        det = 1.0 / det;\r\n\r\n        out[0] = (a11 * b11 - a12 * b10 + a13 * b09) * det;\r\n        out[1] = (a02 * b10 - a01 * b11 - a03 * b09) * det;\r\n        out[2] = (a31 * b05 - a32 * b04 + a33 * b03) * det;\r\n        out[3] = (a22 * b04 - a21 * b05 - a23 * b03) * det;\r\n        out[4] = (a12 * b08 - a10 * b11 - a13 * b07) * det;\r\n        out[5] = (a00 * b11 - a02 * b08 + a03 * b07) * det;\r\n        out[6] = (a32 * b02 - a30 * b05 - a33 * b01) * det;\r\n        out[7] = (a20 * b05 - a22 * b02 + a23 * b01) * det;\r\n        out[8] = (a10 * b10 - a11 * b08 + a13 * b06) * det;\r\n        out[9] = (a01 * b08 - a00 * b10 - a03 * b06) * det;\r\n        out[10] = (a30 * b04 - a31 * b02 + a33 * b00) * det;\r\n        out[11] = (a21 * b02 - a20 * b04 - a23 * b00) * det;\r\n        out[12] = (a11 * b07 - a10 * b09 - a12 * b06) * det;\r\n        out[13] = (a00 * b09 - a01 * b07 + a02 * b06) * det;\r\n        out[14] = (a31 * b01 - a30 * b03 - a32 * b00) * det;\r\n        out[15] = (a20 * b03 - a21 * b01 + a22 * b00) * det;\r\n\r\n        return true;\r\n    }\r\n\r\n    // https:// github.com/toji/gl-matrix/blob/master/src/gl-matrix/mat4.js  mat4.scalar.translate = function (out, a, v) {\r\n    static translate(out: Float32Array, x: number, y: number, z: number) {\r\n        out[12] = out[0] * x + out[4] * y + out[8] * z + out[12];\r\n        out[13] = out[1] * x + out[5] * y + out[9] * z + out[13];\r\n        out[14] = out[2] * x + out[6] * y + out[10] * z + out[14];\r\n        out[15] = out[3] * x + out[7] * y + out[11] * z + out[15];\r\n    }\r\n    constructor() {\r\n        this.raw = Matrix4.identity();\r\n    }\r\n    // ....................................................................\r\n    // Transformations Methods\r\n    vtranslate(v: Vector3) {\r\n        Matrix4.translate(this.raw, v.x, v.y, v.z);\r\n        return this;\r\n    }\r\n    translate(x: number, y: number, z: number) {\r\n        Matrix4.translate(this.raw, x, y, z);\r\n        return this;\r\n    }\r\n    rotateY(rad: number) { Matrix4.rotateY(this.raw, rad); return this; }\r\n    rotateX(rad: number) { Matrix4.rotateX(this.raw, rad); return this; }\r\n    rotateZ(rad: number) { Matrix4.rotateZ(this.raw, rad); return this; }\r\n\r\n    vscale(vec3: Vector3) { Matrix4.scale(this.raw, vec3.x, vec3.y, vec3.z); return this; }\r\n    scale(x: number, y: number, z: number) {\r\n        Matrix4.scale(this.raw, x, y, z);\r\n        return this;\r\n    }\r\n\r\n    invert() {\r\n        Matrix4.invert(this.raw);\r\n        return this;\r\n    }\r\n\r\n    // ....................................................................\r\n    // Methods\r\n    // Bring is back to identity without changing the transform values.\r\n    resetRotation() {\r\n        for (let i = 0; i < this.raw.length; i++) {\r\n            if (i >= 12 && i <= 14) { continue; }\r\n            this.raw[i] = (i % 5 === 0) ? 1 : 0;  // only positions 0,5,10,15 need to be 1 else 0.\r\n        }\r\n        return this;\r\n    }\r\n\r\n    // reset data back to identity.\r\n    reset() {\r\n        for (let i = 0; i < this.raw.length; i++) { this.raw[i] = (i % 5 === 0) ? 1 : 0; } // only positions 0,5,10,15 need to be 1 else 0.\r\n        return this;\r\n    }\r\n}","\r\nexport class Vector3 {\r\n    x: number;\r\n    y: number;\r\n    z: number;\r\n    constructor(x: number = 0, y: number = 0, z: number = 0) {\r\n        this.x = x;\r\n        this.y = y;\r\n        this.z = z;\r\n    }\r\n    magnitude(v?: Vector3) {\r\n        if (v === undefined) { return Math.sqrt(this.x * this.x + this.y * this.y + this.z * this.z); }\r\n        let x = v.x - this.x, y = v.y - this.y, z = v.y - this.z;\r\n        return Math.sqrt(x * x + y * y + z * z);\r\n    }\r\n\r\n    normalize() {\r\n        let mag = this.magnitude();\r\n        this.x /= mag; this.y /= mag; this.z /= mag;\r\n        return this;\r\n    }\r\n    set(x: number, y: number, z: number) {\r\n        this.x = x; this.y = y; this.z = z;\r\n        return this;\r\n    }\r\n    multiScalar(v: number) {\r\n        this.x *= v; this.y *= v; this.z *= v; return this;\r\n    }\r\n    getArray() {\r\n        return [this.x, this.y, this.z];\r\n    }\r\n    getFloatArray() {\r\n        return new Float32Array([this.x, this.y, this.z]);\r\n    }\r\n    clone() {\r\n        return new Vector3(this.x, this.y, this.z);\r\n    }\r\n}","import { RTN } from './VAO';\r\nimport { Transform } from './Transform';\r\n\r\nexport class Modal {\r\n    mesh: RTN;\r\n    transform: Transform;\r\n    constructor(meshData: RTN) {\r\n        this.transform = new Transform();\r\n        this.mesh = meshData;\r\n    }\r\n\r\n    setScale(x: number, y: number, z: number) {\r\n        this.transform.scale.set(x, y, z);\r\n        return this;\r\n    }\r\n    setPosition(x: number, y: number, z: number) {\r\n        this.transform.position.set(x, y, z);\r\n        return this;\r\n    }\r\n    setRotation(x: number, y: number, z: number) {\r\n        this.transform.rotation.set(x, y, z);\r\n        return this;\r\n    }\r\n\r\n    addScale(x: number, y: number, z: number) {\r\n        this.transform.scale.x += x; this.transform.scale.y += y; this.transform.scale.y += y;\r\n        return this;\r\n    }\r\n    addPosition(x: number, y: number, z: number) {\r\n        this.transform.position.x += x; this.transform.position.y += y; this.transform.position.z += z;\r\n        return this;\r\n    }\r\n    addRotation(x: number, y: number, z: number) {\r\n        this.transform.rotation.x += x; this.transform.rotation.y += y; this.transform.rotation.z += z;\r\n        return this;\r\n    }\r\n\r\n    preRender() {\r\n        this.transform.updateMatrix();\r\n        return this;\r\n    }\r\n}","import { Vector3 } from '../Utility/Vector3';\r\nimport { Matrix4 } from '../Utility/Matrix4';\r\n\r\nexport class Transform {\r\n    static deg2Rad = Math.PI / 180; // Cache result, one less operation to do for each update.\r\n\r\n    position: Vector3;\r\n    scale: Vector3;\r\n    rotation: Vector3;\r\n    matView: Matrix4;\r\n    matNormal: Float32Array;\r\n\r\n    forward: Float32Array;\r\n    up: Float32Array;\r\n    right: Float32Array;\r\n\r\n    constructor() {\r\n        this.position = new Vector3(0, 0, 0);\t// Traditional X,Y,Z 3d position\r\n        this.scale = new Vector3(1, 1, 1);\t// How much to scale a mesh. Having a 1 means no scaling is done.\r\n        this.rotation = new Vector3(0, 0, 0);\t// Hold rotation values based on degrees, Object will translate it to radians\r\n        this.matView = new Matrix4();\t\t// Cache the results when calling updateMatrix\r\n        this.matNormal = new Float32Array(9);\t// This is a Mat3, raw array to hold the values is enough for what its used for\r\n\r\n        // Direction Vectors\r\n        this.forward = new Float32Array(4);\t// When rotating, keep track of what the forward direction is\r\n        this.up = new Float32Array(4);\t// what the up direction is, invert to get bottom\r\n        this.right = new Float32Array(4);\t// what the right direction is, invert to get left\r\n    }\r\n    updateMatrix() {\r\n        this.matView.reset() // Order is very important!!\r\n            .vtranslate(this.position)\r\n            .rotateX(this.rotation.x * Transform.deg2Rad)\r\n            .rotateZ(this.rotation.z * Transform.deg2Rad)\r\n            .rotateY(this.rotation.y * Transform.deg2Rad)\r\n            .vscale(this.scale);\r\n\r\n        // Calcuate the Normal Matrix which doesn't need translate, then transpose and inverses the mat4 to mat3\r\n        Matrix4.normalMat3(this.matNormal, this.matView.raw);\r\n\r\n        // Determine Direction after all the transformations.\r\n        Matrix4.transformVec4(this.forward, [0, 0, 1, 0], this.matView.raw); // Z\r\n        Matrix4.transformVec4(this.up, [0, 1, 0, 0], this.matView.raw); // Y\r\n        Matrix4.transformVec4(this.right, [1, 0, 0, 0], this.matView.raw); // X\r\n\r\n        return this.matView.raw;\r\n    }\r\n\r\n    updateDirection() {\r\n        Matrix4.transformVec4(this.forward, [0, 0, 1, 0], this.matView.raw);\r\n        Matrix4.transformVec4(this.up, [0, 1, 0, 0], this.matView.raw);\r\n        Matrix4.transformVec4(this.right, [1, 0, 0, 0], this.matView.raw);\r\n        return this;\r\n    }\r\n\r\n    getViewMatrix() { return this.matView.raw; }\r\n    getNormalMatrix() { return this.matNormal; }\r\n\r\n    reset() {\r\n        this.position.set(0, 0, 0);\r\n        this.scale.set(1, 1, 1);\r\n        this.rotation.set(0, 0, 0);\r\n    }\r\n}\r\n"],"names":["Matrix4","static","a","Float32Array","out","fovy","aspect","near","far","f","Math","tan","nf","left","right","bottom","top","lr","bt","a01","a02","a03","a12","a13","a23","a00","a10","a11","a20","a21","a22","a30","a31","a32","a33","b00","b01","b02","b03","b04","b05","b06","b07","b08","b09","b10","b11","det","mat4","v","x","y","z","w","c1r1","c2r1","c3r1","c4r1","c1r2","c2r2","c3r2","c4r2","c1r3","c2r3","c3r3","c4r3","m","b","b0","b1","b2","b3","rad","s","sin","c","cos","axis","t","b12","b20","b21","b22","len","sqrt","abs","mat","undefined","constructor","raw","this","identity","vtranslate","translate","rotateY","rotateX","rotateZ","vscale","vec3","scale","invert","resetRotation","i","length","reset","Vector3","magnitude","normalize","mag","set","multiScalar","getArray","getFloatArray","clone","Modal","meshData","mesh","transform","Transform","setScale","setPosition","position","setRotation","rotation","addScale","addPosition","addRotation","preRender","updateMatrix","matView","matNormal","forward","up","deg2Rad","updateDirection","getViewMatrix","getNormalMatrix","PI"],"sourceRoot":""}