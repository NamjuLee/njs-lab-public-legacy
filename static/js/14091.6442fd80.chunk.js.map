{"version":3,"file":"static/js/14091.6442fd80.chunk.js","mappings":"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","sources":["njslab/Raster/image-distortion/Distort/Controller/index.ts","njslab/Raster/image-distortion/Distort/Projection/index.ts","njslab/Raster/image-distortion/Distort/ProjectionSubdiv/index.ts","njslab/Raster/image-distortion/Distort/index.ts","njslab/Raster/image-distortion/index.ts"],"sourcesContent":["import { Distort } from '..';\r\nexport class Controller {\r\n    public distort: Distort;\r\n    public width = 20;\r\n    public height = 20;\r\n    public id: number;\r\n    public x: number;\r\n    public y: number;\r\n    public dom: SVGSVGElement;\r\n    constructor(distort: Distort, id: number, x: number, y: number) {\r\n        this.distort = distort;\r\n        this.id = id;\r\n        this.x = x;\r\n        this.y = y;\r\n        this.dom = getRectSVG(this.width, this.height, 5);\r\n        this.dom.style.pointerEvents = 'none';\r\n        this.distort.hostDiv.appendChild(this.dom);\r\n        this.move(x, y);\r\n    }\r\n    public translation(x: number, y: number) {\r\n        this.x = parseInt(this.dom.style.left) + x;\r\n        this.y = parseInt(this.dom.style.top) + y;\r\n        this.dom.style.left = this.x + 'px';\r\n        this.dom.style.top = this.y + 'px';\r\n        // console.log(this.dom.style.left);\r\n    }\r\n    public move(x: number, y: number) {\r\n        this.x = x - this.width * 0.5;\r\n        this.y = y - this.height * 0.5;\r\n        this.dom.style.left = this.x + 'px';\r\n        this.dom.style.top = this.y + 'px';\r\n    }\r\n    public destroy() {\r\n        this.dom.parentElement.removeChild(this.dom);\r\n    }   \r\n}\r\nexport const getRectSVG = (width: number = 8, height: number = 8, fillet: number = 2, fillStyle: string = '#ffffff', strokeWidth: number = 1, strokeStyle: string = '#CBDAE2' ) => {\r\n    let rect = document.createElementNS('http://www.w3.org/2000/svg', 'rect');\r\n    rect.setAttribute('x','1');\r\n    rect.setAttribute('y','1');\r\n    rect.setAttribute('width', `${width}`);\r\n    rect.setAttribute('height',`${height}`);\r\n    rect.setAttribute('stroke-width', `${strokeWidth}`);\r\n    rect.setAttribute('rx', `${fillet}`);\r\n    rect.setAttribute('fill', `${fillStyle}`);\r\n    rect.setAttribute('stroke', `${strokeStyle}`);\r\n\r\n    let rectSVG = document.createElementNS('http://www.w3.org/2000/svg', 'svg');\r\n    rectSVG.appendChild(rect);\r\n    rectSVG.setAttribute('width', `${width + strokeWidth * 2}`);\r\n    rectSVG.setAttribute('height', `${height + strokeWidth * 2}`);\r\n    rectSVG.style.position = 'absolute';\r\n    return rectSVG;\r\n};","import { Distort } from '..';\r\nexport class ProjectionBase {\r\n    public distort: Distort;\r\n    constructor() {\r\n\r\n    }\r\n    public distortPerspective(v: number) {\r\n        this.distort.Controllers[0].translation(v, 0);\r\n        this.distort.Controllers[1].translation(-v, 0);\r\n        this.distort.Controllers[2].translation(v, 0);\r\n        this.distort.Controllers[3].translation(-v, 0);\r\n    }\r\n    public renderDistortion(ctx: CanvasRenderingContext2D, img: HTMLImageElement) {\r\n        // TODO\r\n    }\r\n}\r\n\r\n// reference: https://codepen.io/TP24/pen/zVWYGX\r\nexport const distance = (x0: number, y0: number, x1: number, y1: number) => {\r\n    return Math.sqrt((x0 - x1) * (x0 - x1) + (y0 - y1) * (y0 - y1));\r\n}\r\nexport class Projection extends ProjectionBase {\r\n    constructor(distort: Distort) {\r\n        super();\r\n        this.distort = distort;\r\n    }\r\n    public renderDistortion(ctx: CanvasRenderingContext2D, img: HTMLImageElement) {\r\n        const corners: number[][] = [];\r\n        let xSum = 0;\r\n        let ySum = 0;\r\n        for (let i = 0 ; i < this.distort.Controllers.length; ++i) {\r\n            const x = (this.distort.Controllers[i].x - this.distort.domRect.x) * this.distort.domRect.width / this.distort.hostImg.width;\r\n            const y = (this.distort.Controllers[i].y - this.distort.domRect.y) * this.distort.domRect.height / this.distort.hostImg.height;\r\n            xSum += x;\r\n            ySum += y;\r\n            corners.push([x, y]);\r\n        }\r\n        corners.push([xSum / this.distort.Controllers.length, ySum / this.distort.Controllers.length]);\r\n\r\n        // 0   1\r\n        //   4\r\n        // 3   2\r\n        const w = this.distort.hosCanvas.width;\r\n        const h = this.distort.hosCanvas.height;\r\n        drawTriangle(ctx, img, [0, 0], [w / 2, h / 2], [0, h],  corners[0], corners[4], corners[3]);\r\n        drawTriangle(ctx, img, [0, 0], [w / 2, h / 2], [w, 0],  corners[0], corners[4], corners[1]);\r\n        drawTriangle(ctx, img, [w, 0], [w / 2, h / 2], [w, h],  corners[1], corners[4], corners[2]);\r\n        drawTriangle(ctx, img, [0, h], [w / 2, h / 2], [w, h],  corners[3], corners[4], corners[2]);\r\n    }\r\n}\r\nconst drawImageTriangle = (ctx: CanvasRenderingContext2D, img: HTMLImageElement, s1: number[], s2: number[], s3: number[], d1: number[], d2: number[], d3: number[]) => {\r\n    const xm = linearSolution(s1[0], s1[1], d1[0],  s2[0], s2[1], d2[0],  s3[0], s3[1], d3[0]);\r\n    const ym = linearSolution(s1[0], s1[1], d1[1],  s2[0], s2[1], d2[1],  s3[0], s3[1], d3[1]);\r\n\r\n    ctx.save();\r\n    ctx.setTransform(xm[0], ym[0], xm[1], ym[1], xm[2], ym[2]);\r\n    ctx.beginPath();\r\n    ctx.moveTo(s1[0], s1[1]);\r\n    ctx.lineTo(s2[0], s2[1]);\r\n    ctx.lineTo(s3[0], s3[1]);\r\n    ctx.closePath();\r\n    // //Leaves a faint black (or whatever .fillStyle) border around the drawn triangle\r\n    // //  ctx.fill();\r\n    ctx.clip();\r\n    ctx.drawImage(img, 0, 0, img.width, img.height);\r\n    ctx.restore();\r\n};\r\nconst drawTriangle = (ctx: CanvasRenderingContext2D, img: HTMLImageElement, s1: number[], s2: number[], s3: number[], d1: number[], d2: number[], d3: number[]) => {\r\n    const [d1x, d2x, d3x] = expandTriangle(d1, d2, d3, .3);\r\n    const [s1x, s2x, s3x] = expandTriangle(s1, s2, s3, .3);\r\n    drawImageTriangle(ctx, img, s1x, s2x, s3x, d1x, d2x, d3x);\r\n};\r\nconst extendPoint = (p: number[], inCir: Float32Array, dffset: number) => {\r\n    const dx = p[0] - inCir[0];\r\n    const dy = p[1] - inCir[1];\r\n    const x2 = (dx * dffset) + inCir[0];\r\n    const y2 = (dy * dffset) + inCir[1];\r\n    return [x2, y2];\r\n};\r\nconst expandTriangle = (A: number[], B: number[], C: number[], offset: number) => {\r\n    const incircle: Float32Array = getInnerCircle(A, B, C);\r\n    const factor = (incircle[2] + offset) / (incircle[2]);\r\n\r\n    const A2 = extendPoint(A, incircle, factor);\r\n    const B2 = extendPoint(B, incircle, factor);\r\n    const C2 = extendPoint(C, incircle, factor);\r\n    return [A2, B2, C2];\r\n};\r\nconst getInnerCircle = (A: number[], B: number[], C: number[]) => {\r\n    /*\r\n    function lineLen(p1, p2) {\r\n      const dx = p2[0] - p1[0],\r\n      dy = p2[1] - p1[1];\r\n      return Math.sqrt(dx * dx + dy * dy);\r\n    }\r\n */\r\n    //Side lengths, perimiter p and semiperimiter s:\r\n    const a = distance(B[0], B[1], C[0], C[1]);\r\n    const b = distance(C[0], C[1], A[0], A[1]);\r\n    const c = distance(A[0], A[1], B[0], B[1]);\r\n    const p = a + b + c;\r\n    const s = p / 2;\r\n\r\n    //Heron's formula\r\n    //https://www.wikihow.com/Calculate-the-Area-of-a-Triangle#Using_Side_Lengths\r\n    const area = Math.sqrt(s * (s - a) * (s - b) * (s - c));\r\n    //Faster(?) alternative:\r\n    //http://geomalgorithms.com/a01-_area.html#Modern-Triangles\r\n    //const area = Math.abs( (B[0]-A[0])*(C[1]-A[1]) - (C[0]-A[0])*(B[1]-A[1]) )/2;\r\n\r\n    //Incircle radius r\r\n    //  https://en.wikipedia.org/wiki/Incircle_and_excircles_of_a_triangle#Relation_to_area_of_the_triangle\r\n    //..and center [cx, cy]\r\n    //  https://en.wikipedia.org/wiki/Incircle_and_excircles_of_a_triangle#Cartesian_coordinates\r\n    //  https://www.mathopenref.com/coordincenter.html\r\n    const r = area / s;\r\n    const cx = (a * A[0] + b * B[0] + c * C[0]) / p;\r\n    const cy = (a * A[1] + b * B[1] + c * C[1]) / p;\r\n    return new Float32Array([cx, cy, r]);\r\n};\r\n/**\r\n *  Solves a system of linear equations.\r\n *\r\n *  t1 = (a * r1) + (b + s1) + c\r\n *  t2 = (a * r2) + (b + s2) + c\r\n *  t3 = (a * r3) + (b + s3) + c\r\n *\r\n *  r1 - t3 are the known values.\r\n *  a, b, c are the unknowns to be solved.\r\n *  returns the a, b, c coefficients.\r\n */\r\nconst linearSolution = (r1: number, s1: number, t1: number, r2: number, s2: number, t2: number, r3: number, s3: number, t3: number): number[] => {\r\n    const a = (((t2 - t3) * (s1 - s2)) - ((t1 - t2) * (s2 - s3))) / (((r2 - r3) * (s1 - s2)) - ((r1 - r2) * (s2 - s3)));\r\n    const b = (((t2 - t3) * (r1 - r2)) - ((t1 - t2) * (r2 - r3))) / (((s2 - s3) * (r1 - r2)) - ((s1 - s2) * (r2 - r3)));\r\n    const c = t1 - (r1 * a) - (s1 * b);\r\n    return [a, b, c];\r\n};","import { ProjectionBase } from '../Projection';\r\nimport { Distort } from '..';\r\n\r\n// reference: http://jsfiddle.net/xzL58dha/3/\r\n// https://stackoverflow.com/questions/4097688/draw-distorted-image-on-html5s-canvas\r\n\r\nexport class ProjectionSubdiv extends ProjectionBase {\r\n    constructor(distort: Distort) {\r\n        super();\r\n        this.distort = distort;\r\n    }\r\n    public renderDistortion(ctx: CanvasRenderingContext2D, img: HTMLImageElement) {\r\n        const corners: number[][] = [];\r\n        let xSum = 0;\r\n        let ySum = 0;\r\n        for (let i = 0 ; i < this.distort.Controllers.length; ++i) {\r\n            const x = (this.distort.Controllers[i].x - this.distort.domRect.x) * this.distort.domRect.width / this.distort.hostImg.width;\r\n            const y = (this.distort.Controllers[i].y - this.distort.domRect.y) * this.distort.domRect.height / this.distort.hostImg.height;\r\n            xSum += x;\r\n            ySum += y;\r\n            corners.push([x, y]);\r\n        }\r\n        corners.push([xSum / this.distort.Controllers.length, ySum / this.distort.Controllers.length]);\r\n\r\n        // 0   1\r\n        //   4\r\n        // 3   2\r\n        const w = this.distort.hosCanvas.width;\r\n        const h = this.distort.hosCanvas.height;\r\n        // drawTriangle(ctx, img, [0, 0], [w / 2, h / 2], [0, h],  corners[0], corners[4], corners[3]);\r\n        // drawTriangle(ctx, img, [0, 0], [w / 2, h / 2], [w, 0],  corners[0], corners[4], corners[1]);\r\n        // drawTriangle(ctx, img, [w, 0], [w / 2, h / 2], [w, h],  corners[1], corners[4], corners[2]);\r\n        // drawTriangle(ctx, img, [0, h], [w / 2, h / 2], [w, h],  corners[3], corners[4], corners[2]);\r\n    }\r\n}\r\n\r\n\r\n// const calculateGeometry = () => {\r\n//     // clear triangles out\r\n//     const triangles = [];\r\n\r\n//     // generate subdivision\r\n//     var subs = 7; // vertical subdivisions\r\n//     var divs = 7; // horizontal subdivisions\r\n\r\n//     var p1 = new Point(parseInt($(controls[0]).css('left')) + 6, parseInt($(controls[0]).css('top')) + 6);\r\n//     var p2 = new Point(parseInt($(controls[1]).css('left')) + 6, parseInt($(controls[1]).css('top')) + 6);\r\n//     var p3 = new Point(parseInt($(controls[2]).css('left')) + 6, parseInt($(controls[2]).css('top')) + 6);\r\n//     var p4 = new Point(parseInt($(controls[3]).css('left')) + 6, parseInt($(controls[3]).css('top')) + 6);\r\n\r\n//     var dx1 = p4.x - p1.x;\r\n//     var dy1 = p4.y - p1.y;\r\n//     var dx2 = p3.x - p2.x;\r\n//     var dy2 = p3.y - p2.y;\r\n\r\n//     var imgW = image.naturalWidth;\r\n//     var imgH = image.naturalHeight;\r\n\r\n//     for (var sub = 0; sub < subs; ++sub) {\r\n//         var curRow = sub / subs;\r\n//         var nextRow = (sub + 1) / subs;\r\n\r\n//         var curRowX1 = p1.x + dx1 * curRow;\r\n//         var curRowY1 = p1.y + dy1 * curRow;\r\n        \r\n//         var curRowX2 = p2.x + dx2 * curRow;\r\n//         var curRowY2 = p2.y + dy2 * curRow;\r\n\r\n//         var nextRowX1 = p1.x + dx1 * nextRow;\r\n//         var nextRowY1 = p1.y + dy1 * nextRow;\r\n        \r\n//         var nextRowX2 = p2.x + dx2 * nextRow;\r\n//         var nextRowY2 = p2.y + dy2 * nextRow;\r\n\r\n//         for (var div = 0; div < divs; ++div) {\r\n//             var curCol = div / divs;\r\n//             var nextCol = (div + 1) / divs;\r\n\r\n//             var dCurX = curRowX2 - curRowX1;\r\n//             var dCurY = curRowY2 - curRowY1;\r\n//             var dNextX = nextRowX2 - nextRowX1;\r\n//             var dNextY = nextRowY2 - nextRowY1;\r\n\r\n//             var p1x = curRowX1 + dCurX * curCol;\r\n//             var p1y = curRowY1 + dCurY * curCol;\r\n\r\n//             var p2x = curRowX1 + (curRowX2 - curRowX1) * nextCol;\r\n//             var p2y = curRowY1 + (curRowY2 - curRowY1) * nextCol;\r\n\r\n//             var p3x = nextRowX1 + dNextX * nextCol;\r\n//             var p3y = nextRowY1 + dNextY * nextCol;\r\n\r\n//             var p4x = nextRowX1 + dNextX * curCol;\r\n//             var p4y = nextRowY1 + dNextY * curCol;\r\n\r\n//             var u1 = curCol * imgW;\r\n//             var u2 = nextCol * imgW;\r\n//             var v1 = curRow * imgH;\r\n//             var v2 = nextRow * imgH;\r\n\r\n//             var triangle1 = new Triangle(\r\n//                 new Point(p1x-1, p1y),\r\n//                 new Point(p3x+2, p3y+1),\r\n//                 new Point(p4x-1, p4y+1),\r\n//                 new TextCoord(u1, v1),\r\n//                 new TextCoord(u2, v2),\r\n//                 new TextCoord(u1, v2)\r\n//             );\r\n\r\n//             var triangle2 = new Triangle(\r\n//                 new Point(p1x-2, p1y),\r\n//                 new Point(p2x+1, p2y),\r\n//                 new Point(p3x+1, p3y+1),\r\n//                 new TextCoord(u1, v1),\r\n//                 new TextCoord(u2, v1),\r\n//                 new TextCoord(u2, v2)\r\n//             );\r\n\r\n//             triangles.push(triangle1);\r\n//             triangles.push(triangle2);\r\n//         }\r\n//     }\r\n// }","\r\nimport { Controller } from './Controller';\r\nimport { Projection, distance } from './Projection';\r\nimport { ProjectionSubdiv } from './ProjectionSubdiv';\r\nexport enum DISTORTION_TYPE {\r\n    Projection = 'projection',\r\n    Subdivision = 'subdivision'\r\n}\r\n\r\nexport class Distort {\r\n\r\n    public projection: Projection;\r\n    public Controllers: Controller[] = [];\r\n    public hostDiv: HTMLElement;\r\n    public hosCanvas: HTMLCanvasElement;\r\n    public hostImg: HTMLImageElement;\r\n    public domRect: DOMRect;\r\n    public id = -1;\r\n    public DISTORTION_TYPE: DISTORTION_TYPE;\r\n    private mPre = [0, 0];\r\n\r\n    constructor(div: HTMLDivElement, img: HTMLImageElement, canvas: HTMLCanvasElement, type = DISTORTION_TYPE.Subdivision) {\r\n \r\n        this.DISTORTION_TYPE = type;\r\n\r\n        this.hostDiv = div;\r\n        this.hosCanvas = canvas;\r\n        this.hostImg = img;\r\n\r\n        if (this.DISTORTION_TYPE === DISTORTION_TYPE.Projection) {\r\n            this.projection = new ProjectionSubdiv(this);\r\n        } else {\r\n            this.projection = new Projection(this);\r\n        }\r\n\r\n        this.init();\r\n    }\r\n    public reset() {\r\n        this.destroy();\r\n        this.init();\r\n    }\r\n    public init() {\r\n        const domRect = this.hostDiv.getBoundingClientRect();\r\n        this.domRect = domRect;\r\n        // console.log(this.core.canvas.canvas.style.left);\r\n        // console.log(domRect)\r\n\r\n        this.Controllers = [\r\n            new Controller(this, 0, domRect.x, domRect.y),\r\n            new Controller(this, 1, domRect.x + domRect.width, domRect.y),\r\n            new Controller(this, 2, domRect.x + domRect.width, domRect.y + domRect.height),\r\n            new Controller(this, 3, domRect.x, domRect.y + domRect.height),\r\n        ]\r\n    }\r\n    public distortPerspective(v: number) {\r\n        this.projection.distortPerspective(v);\r\n        this.renderForce();\r\n    }\r\n    public updateCaptured(x: number, y: number) {\r\n        this.id = -1;\r\n        for (let i = 0 ; i < this.Controllers.length; ++i) {\r\n            if (distance(x + this.domRect.x , y + this.domRect.y, this.Controllers[i].x, this.Controllers[i].y) < 50) {\r\n                this.id = this.Controllers[i].id;\r\n            }\r\n        }\r\n    }\r\n    public mouseDown(x: number, y: number) {\r\n        this.updateCaptured(x,y)\r\n        this.mPre = [x, y] \r\n    }\r\n    public mouseUp(x: number, y: number) {\r\n        this.id = -1;\r\n    }\r\n    public mouseMove(x: number, y: number) {\r\n        if (this.id > -1) {\r\n            const xOff = x - this.mPre[0];\r\n            const yOff = y - this.mPre[1];\r\n            this.Controllers[this.id].translation(xOff, yOff);\r\n            this.mPre = [x, y] \r\n        }\r\n    }\r\n    public render(ctx: CanvasRenderingContext2D) {\r\n\r\n        // ctx.\r\n\r\n        this.projection.renderDistortion(ctx, this.hostImg);\r\n    }\r\n    public renderForce() {\r\n        // this.core.canvas.renderForce();\r\n    }\r\n    public destroy() {\r\n        this.Controllers.forEach((e: Controller) => {\r\n            e.destroy();\r\n        });\r\n    }\r\n}\r\n\r\n\r\n\r\n","import { RendererCanvas, getImgFromURL } from '../../../lib'\r\nimport { Distort } from './Distort'\r\nexport class Solution {\r\n    public divHost: HTMLElement;\r\n    public renderer: Renderer;\r\n    constructor(id: string) {\r\n        this.divHost = document.getElementById(id)\r\n\r\n        // Center align\r\n        // this.divHost.style.display = 'flex';\r\n        // this.divHost.style.alignItems = 'center';\r\n\r\n        const div = document.createElement('div');\r\n        div.style.marginLeft = 'auto';\r\n        div.style.marginRight = 'auto';\r\n        div.style.backgroundColor = '#555';\r\n        div.style.width = '1200px';\r\n        div.style.height = '1000px';\r\n\r\n        this.divHost.appendChild(div);\r\n\r\n        // TODO\r\n        // You code goes here for one time operation\r\n\r\n        this.renderer = new Renderer(div);\r\n\r\n\r\n    //     console.log(this.renderer);\r\n        // !! you should execute it for rendering\r\n        // this.start();\r\n    }\r\n    public destroy() {\r\n        this.renderer.destroy();\r\n        while (this.divHost.lastElementChild) {\r\n            this.divHost.removeChild(this.divHost.lastElementChild);\r\n        }\r\n    }\r\n}\r\n\r\nexport class Renderer extends RendererCanvas {\r\n    img: HTMLImageElement | undefined = undefined\r\n    rotation = 0.0;\r\n\r\n    x: number;\r\n    y: number;\r\n    width: number;\r\n    height: number;\r\n\r\n    m = [0, 0];\r\n\r\n    distort: Distort;\r\n\r\n    constructor(div: any) {\r\n        super(div);\r\n\r\n        // this.canvas.style.position = 'relative';\r\n\r\n        // this.canvas.style.width = '100%';\r\n        // this.canvas.style.height = '100%';\r\n\r\n        // TODO\r\n        // You code goes here for one time operation\r\n        // \r\n\r\n        // getImgFromURL('https://raw.githubusercontent.com/NamjuLee/data/master/img/person/HaminHaram.jpg').then( (img: HTMLImageElement) => {\r\n        getImgFromURL('https://raw.githubusercontent.com/NamjuLee/data/master/img/MITBuilding7_small.jpg').then( (img: HTMLImageElement) => {\r\n            // console.log(img)\r\n            \r\n            \r\n            img.onload = () => {\r\n\r\n                this.img = img;\r\n            //     console.log(img.width, img.height);\r\n                this.x = 100\r\n                this.y = 100\r\n                this.width = img.width;\r\n                this.height = img.height;\r\n\r\n                this.distort = new Distort(div, img, this.canvas);\r\n            }\r\n\r\n\r\n\r\n            // };\r\n\r\n            // this.width = 100; //+img.style.width;\r\n            // this.height =100; // +img.style.height;\r\n            \r\n            // this.canvas.width = img.width;\r\n            // this.canvas.height = img.height;\r\n\r\n            \r\n            // this.hostDiv.style.width = img.width + 'px';\r\n            // this.hostDiv.style.height = img.height + 'px';\r\n\r\n            // this.ctx.canvas.width = img.width;\r\n            // this.ctx.canvas.height = img.height;\r\n            // this.ctx.beginPath();\r\n            // this.ctx.arc(100, 100, 150, 0, Math.PI * 2);\r\n            // this.ctx.closePath();\r\n            // this.ctx.fill()\r\n            // this.ctx.drawImage(img, 0, 0);\r\n            // this.hostDiv.appendChild(img)\r\n\r\n\r\n        });\r\n\r\n        // const divRotate = document.createElement('div');\r\n        // this.hostDiv.appendChild(divRotate);\r\n        // divRotate.textContent = 'rotate';\r\n        // divRotate.style.position = 'absolute';\r\n        // divRotate.style.color = 'aqua';\r\n\r\n        // divRotate.onclick = () => {\r\n        // }\r\n\r\n        this.start();\r\n    }\r\n    public render(ctx: CanvasRenderingContext2D): void {\r\n        // TODO\r\n        // You code goes here for the rending loop\r\n        this.ctx.save();\r\n        this.ctx.translate(this.canvas.width * 0.5, this.canvas.height * 0.5)\r\n        this.ctx.rotate(this.rotation)\r\n        if(this.img) {\r\n            this.ctx.drawImage(this.img, -this.img.width * 0.5, -this.img.height * 0.5);\r\n        }\r\n        this.ctx.restore();\r\n\r\n    //     console.log(this.x, this.y, this.width, this.height);\r\n\r\n\r\n\r\n        ctx.beginPath();\r\n        ctx.rect(this.x, this.y, this.width, this.height);\r\n        ctx.closePath();\r\n        ctx.lineWidth = 5;\r\n\r\n        ctx.stroke();\r\n\r\n        ctx.beginPath();\r\n        ctx.arc(this.m[0], this.m[1], 5, 0, Math.PI * 2);\r\n        ctx.closePath();\r\n        ctx.lineWidth = 5;\r\n\r\n        ctx.stroke();\r\n        \r\n\r\n        // !! can stop render after this frame.\r\n        // this.isStatic = true;\r\n\r\n        if (this.distort) {\r\n            this.distort.render(ctx);\r\n        }\r\n    }\r\n    public mouseDown(x: number, y: number): void {\r\n        this.distort.mouseDown(x, y)\r\n        // TODO\r\n    }\r\n    public mouseUp(x: number, y: number): void {\r\n        this.distort.mouseUp(x, y)\r\n    }\r\n    public mouseDrag(x: number, y: number): void {\r\n\r\n        // TODO\r\n    }\r\n    public mouseClick(x: number, y: number): void {\r\n        // TODO\r\n    }\r\n    public mouseMove(x: number, y: number) {\r\n        this.m = [x, y];\r\n        // TODO\r\n        this.distort.mouseMove(x, y)\r\n    }\r\n    public keyDown(k: KeyboardEvent): void {\r\n        // TODO\r\n    }\r\n}"],"names":["Controller","constructor","distort","id","x","y","width","height","dom","this","getRectSVG","style","pointerEvents","hostDiv","appendChild","move","translation","parseInt","left","top","destroy","parentElement","removeChild","fillet","fillStyle","strokeWidth","strokeStyle","rect","document","createElementNS","setAttribute","rectSVG","position","ProjectionBase","distortPerspective","v","Controllers","renderDistortion","ctx","img","distance","x0","y0","x1","y1","Math","sqrt","Projection","super","corners","xSum","ySum","i","length","domRect","hostImg","push","w","hosCanvas","h","drawTriangle","s1","s2","s3","d1","d2","d3","d1x","d2x","d3x","expandTriangle","s1x","s2x","s3x","xm","linearSolution","ym","save","setTransform","beginPath","moveTo","lineTo","closePath","clip","drawImage","restore","drawImageTriangle","extendPoint","p","inCir","dffset","dx","dy","A","B","C","offset","incircle","getInnerCircle","factor","a","b","c","s","r","cx","cy","Float32Array","r1","t1","r2","t2","r3","t3","ProjectionSubdiv","DISTORTION_TYPE","Distort","div","canvas","type","Subdivision","projection","mPre","init","reset","getBoundingClientRect","renderForce","updateCaptured","mouseDown","mouseUp","mouseMove","xOff","yOff","render","forEach","e","Solution","divHost","renderer","getElementById","createElement","marginLeft","marginRight","backgroundColor","Renderer","lastElementChild","RendererCanvas","undefined","rotation","m","getImgFromURL","then","onload","start","translate","rotate","lineWidth","stroke","arc","PI","mouseDrag","mouseClick","keyDown","k"],"sourceRoot":""}