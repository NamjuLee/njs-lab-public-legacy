{"version":3,"file":"static/js/41931.f767f125.chunk.js","mappings":"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","sources":["njslab/Workshop/workshop-three/Slowzone_Polygon/index.ts","njslab/Workshop/workshop-three/Slowzone_Polyline/index.ts"],"sourcesContent":["import * as THREE from 'three';\r\nimport { RendererThree } from '../../../../lib';\r\nimport { getJSONFromURL, MercatorProjection } from 'njscore';\r\nimport { renderLines } from '../Slowzone_Polyline';\r\n\r\n\r\nexport class Solution extends RendererThree {\r\n\r\n    streetOSM: any = [];\r\n    routesTreated: any = [];\r\n    routesControl: any = [];\r\n    zones30: any = [];\r\n\r\n    constructor(id: string = 'main') {\r\n        super(id)\r\n\r\n        const light = new THREE.PointLight(0xffffff, 0.8);\r\n        this.camera.add(light);\r\n        this.scene.add(light);\r\n\r\n        const canvasGL = document.createElement('canvas');\r\n        canvasGL.style.position = 'absolute';\r\n        canvasGL.style.pointerEvents = 'none';\r\n        canvasGL.style.mixBlendMode = 'darken';\r\n        canvasGL.width = this.hostDiv.clientWidth;\r\n        canvasGL.height = this.hostDiv.clientHeight;\r\n        this.hostDiv.appendChild(canvasGL);\r\n        const glCtx = canvasGL.getContext('webgl');\r\n\r\n\r\n        this.camera.position.set(0, 40, 48);\r\n\r\n        const path = '/static/research/slow-zone/';\r\n        getJSONFromURL('https://raw.githubusercontent.com/NamjuLee/data/master/Paris/street_osm.geojson').then((data) => {\r\n            for (let i = 0; i < data['features'].length; ++i) {\r\n                this.streetOSM.push(data['features'][i]['geometry']['coordinates']);\r\n            }\r\n            renderLines(this.scene, this.streetOSM, [0.3, 0.3, 0.3]);\r\n\r\n            getJSONFromURL('https://raw.githubusercontent.com/NamjuLee/data/master/Paris/zones-30.geojson').then((data) => {\r\n                for (let i = 0; i < data['features'].length; ++i) {\r\n                    this.zones30.push(data['features'][i]['geometry']['coordinates']);\r\n                }\r\n                renderMultiPolygon(this.scene, this.zones30, [0, 1, 0]);\r\n\r\n            });\r\n\r\n            this.start();\r\n        });\r\n    }\r\n}\r\nconst renderMultiPolygon = (scene: THREE.Scene, paths: any, colorArray: number[]) => {\r\n    const xOFf = -15478803.88731685;\r\n    const yOFf = -4766681.448690384;\r\n    const scale = 0.01;\r\n\r\n    const positions = [];\r\n\r\n    for (let multi = 0; multi < paths.length; ++multi) {\r\n        const multiPolygon = paths[multi];\r\n\r\n        for (let polyI = 0; polyI < multiPolygon.length; ++polyI) {\r\n            const polygon = multiPolygon[polyI];\r\n\r\n\r\n            if (polygon.length === 1) {\r\n                const thePolygon = polygon[0];\r\n\r\n                const shape = [];\r\n\r\n                for (let i = 0; i < thePolygon.length; ++i) {\r\n\r\n                    const [xPro, yPro] = MercatorProjection(thePolygon[i][0], thePolygon[i][1]);\r\n\r\n                    const x = (xPro + xOFf) * scale\r\n                    const y = (yPro + yOFf) * scale\r\n                    // console.log(x, y)\r\n                    positions.push(x, 0, y)\r\n\r\n                    shape.push(new THREE.Vector2(x, y));\r\n                }\r\n\r\n                let geometry = new THREE.ShapeGeometry(new THREE.Shape(shape));\r\n                let mat = new THREE.MeshBasicMaterial({\r\n                    side: THREE.DoubleSide, color: 0x00ff00,\r\n                    transparent: true,\r\n                    opacity: 0.3\r\n                });\r\n                let mesh = new THREE.Mesh(geometry, mat);\r\n                scene.add(mesh);\r\n                mesh.rotateOnAxis(new THREE.Vector3(1, 0, 0), Math.PI * 0.5);\r\n\r\n            }\r\n        }\r\n    }\r\n};","import * as THREE from 'three';\r\nimport { RendererThree, } from '../../../../lib';\r\nimport { getJSONFromURL, MercatorProjection, } from 'njscore';\r\n\r\nexport class Solution extends RendererThree {\r\n\r\n    streetOSM: any = [];\r\n    routesTreated: any = [];\r\n    routesControl: any = [];\r\n    zones30: any = [];\r\n\r\n    constructor(id: string = 'main') {\r\n        super(id)\r\n\r\n        const light = new THREE.PointLight(0xffffff, 0.8);\r\n        this.camera.add(light);\r\n        this.scene.add(light);\r\n  \r\n\r\n        this.camera.position.set(0, 40, 48);\r\n\r\n        const path = '/static/research/slow-zone/';\r\n        getJSONFromURL('https://raw.githubusercontent.com/NamjuLee/data/master/Paris/street_osm.geojson').then((data) => {\r\n            for (let i = 0; i < data['features'].length; ++i) {\r\n                this.streetOSM.push(data['features'][i]['geometry']['coordinates']);\r\n            }\r\n            renderLines(this.scene, this.streetOSM, [0, 1, 1]);\r\n\r\n            getJSONFromURL('https://raw.githubusercontent.com/NamjuLee/data/master/Paris/treated-st.geojson').then((data) => {\r\n                for (let i = 0; i < data['features'].length; ++i) {\r\n                    this.routesTreated.push(data['features'][i]['geometry']['coordinates']);\r\n                }\r\n                renderLines(this.scene, this.routesTreated, [1, 0, 0]);\r\n            });\r\n\r\n            getJSONFromURL('https://raw.githubusercontent.com/NamjuLee/data/master/Paris/control-st.geojson').then((data) => {\r\n                for (let i = 0; i < data['features'].length; ++i) {\r\n                    this.routesControl.push(data['features'][i]['geometry']['coordinates']);\r\n                }\r\n                renderLines(this.scene, this.routesControl, [0, 1, 0]);\r\n            });\r\n\r\n            this.start();\r\n        });\r\n    }\r\n}\r\nexport const renderLines = (scene: THREE.Scene, paths: any, color: number[]) => {\r\n    const geometry = new THREE.BufferGeometry();\r\n    const material = new THREE.LineBasicMaterial({ vertexColors: true });\r\n\r\n    const positions = [];\r\n    const colors = [];\r\n    const indices = [];\r\n\r\n    const xOFf = -15478803.88731685;\r\n    const yOFf = -4766681.448690384;\r\n    const scale = 0.01;\r\n\r\n    let xC = 0\r\n    let yC = 0\r\n    let Count = 0\r\n\r\n    for (let i = 0; i < paths.length; ++i) {\r\n        const route = paths[i]\r\n\r\n        for (let j = 0; j < route.length; ++j) {\r\n            for (let k = 0; k < route[j].length; ++k) {\r\n\r\n                const [xPro, yPro] = MercatorProjection(route[j][k][0], route[j][k][1]);\r\n                xC += xPro;\r\n                yC += yPro;\r\n                Count += 1;\r\n\r\n                const x = (xPro + xOFf) * scale\r\n                const y = (yPro + yOFf) * scale\r\n                positions.push(x, 0, y)\r\n                colors.push(color[0], color[1], color[2]);\r\n\r\n                if (k < route[j].length - 1) {\r\n                    indices.push(Math.floor(positions.length / 3) - 1, Math.floor(positions.length / 3));\r\n                }\r\n            }\r\n        }\r\n    }\r\n    geometry.setIndex(indices);\r\n    geometry.setAttribute('position', new THREE.Float32BufferAttribute(positions, 3));\r\n    geometry.setAttribute('color', new THREE.Float32BufferAttribute(colors, 3));\r\n    geometry.computeBoundingSphere();\r\n    const line = new THREE.LineSegments(geometry, material);\r\n    scene.add(line);\r\n    return line;\r\n};"],"names":["Solution","RendererThree","constructor","super","streetOSM","routesTreated","routesControl","zones30","light","THREE","this","camera","add","scene","canvasGL","document","createElement","style","position","pointerEvents","mixBlendMode","width","hostDiv","clientWidth","height","clientHeight","appendChild","getContext","set","getJSONFromURL","then","data","i","length","push","renderLines","renderMultiPolygon","start","paths","colorArray","positions","multi","multiPolygon","polyI","polygon","thePolygon","shape","xPro","yPro","MercatorProjection","x","y","geometry","mat","side","color","transparent","opacity","mesh","rotateOnAxis","Math","PI","material","vertexColors","colors","indices","xC","yC","Count","route","j","k","floor","setIndex","setAttribute","computeBoundingSphere","line"],"sourceRoot":""}