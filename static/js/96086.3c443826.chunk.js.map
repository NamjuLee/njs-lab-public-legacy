{"version":3,"file":"static/js/96086.3c443826.chunk.js","mappings":"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","sources":["njslab/Workshop/workshop-ml/AppTFEnv/Implementation/TFProject/Core/DefinitionIndeCanvasCore.ts","njslab/Workshop/workshop-ml/AppTFEnv/Implementation/TFProject/Definition/TFModel03SmartDrawing.ts"],"sourcesContent":["import { IndependentPanelCanvas } from '../../../../../../../lib/NJSCore/App/NUI/WrapperIndependentPanel/Panel/Common/IndependentPanelCanvas';\r\n\r\nimport { TFProject } from '..';\r\nexport class DefinitionIndeCanvasCore {\r\n    scene: TFProject;\r\n    indeCanvas: IndependentPanelCanvas;\r\n    mOffX = -12;\r\n    mOffY = -12;\r\n    constructor(scene: TFProject, width: number = 650, height: number = 350) {\r\n        this.scene = scene;\r\n        this.scene.definitions.push(this);\r\n        this.InitIndeCanvas(width, height);\r\n    }\r\n    InitIndeCanvas(width: number = 650, height: number = 350) {\r\n        if (this.scene.implementation.app.needUI) {\r\n            this.indeCanvas = new IndependentPanelCanvas(this.scene.implementation.app.viewController.NUIWrapper.NUI.independentPanelWrapper, 50, 50, width, height, true);\r\n        } else {\r\n            this.indeCanvas = new IndependentPanelCanvas(this.scene.implementation.app.viewController.NUIWrapper.NUI.independentPanelWrapper, 1, -25, width, height, true);\r\n        }\r\n        this.indeCanvas.title = 'TF Env';\r\n        this.indeCanvas.btnHam.isHidden = true;\r\n        this.indeCanvas.btnMini.isHidden = true;\r\n        this.indeCanvas.RenderIndependentCanvas = (ctx: CanvasRenderingContext2D) => (this.RenderIndependentCanvas(ctx));\r\n    }\r\n    get width() {\r\n        return this.indeCanvas.canvas.width;\r\n    }\r\n    get height() {\r\n        return this.indeCanvas.canvas.height;\r\n    }\r\n    Init(ctx: CanvasRenderingContext2D) {\r\n        //\r\n    }\r\n    RenderIndependentCanvas(ctx: CanvasRenderingContext2D) {\r\n        //\r\n    }\r\n    MouseMove(x: number, y: number) { /* */ }\r\n    MouseMovePre(x: number, y: number) {\r\n        if (!this.indeCanvas.IsMouseInsidePanel(x, y)) { return; }\r\n        this.MouseMove(x - this.indeCanvas.vec.x + this.mOffX, y - this.indeCanvas.vec.y - this.indeCanvas.HeadHeight + this.mOffY);\r\n    }\r\n    MouseDown(x: number, y: number) { /* */ }\r\n    MouseDownPre(x: number, y: number) {\r\n        if (!this.indeCanvas.IsMouseInsidePanel(x, y)) { return; }\r\n        this.MouseDown(x - this.indeCanvas.vec.x + this.mOffX, y - this.indeCanvas.vec.y - this.indeCanvas.HeadHeight + this.mOffY);\r\n    }\r\n    MouseUp(x: number, y: number) { /* */ }\r\n    MouseUpPre(x: number, y: number) {\r\n        if (!this.indeCanvas.IsMouseInsidePanel(x, y)) { return; }\r\n        this.MouseUp(x - this.indeCanvas.vec.x + this.mOffX, y - this.indeCanvas.vec.y - this.indeCanvas.HeadHeight + this.mOffY);\r\n    }\r\n    MouseDrag(x: number, y: number) { /* */ }\r\n    MouseDragPre(x: number, y: number) {\r\n        if (!this.indeCanvas.IsMouseInsidePanel(x, y)) { return; }\r\n        this.MouseDrag(x - this.indeCanvas.vec.x + this.mOffX, y - this.indeCanvas.vec.y - this.indeCanvas.HeadHeight + this.mOffY);\r\n    }\r\n    MouseLeftClick(x: number, y: number) { /* */ }\r\n    MouseLeftClickPre(x: number, y: number) {\r\n        if (!this.indeCanvas.IsMouseInsidePanel(x, y)) { return; }\r\n        this.MouseLeftClick(x - this.indeCanvas.vec.x + this.mOffX, y - this.indeCanvas.vec.y - this.indeCanvas.HeadHeight + this.mOffY);\r\n    }\r\n    MouseMiddleClick(x: number, y: number) { /* */ }\r\n    MouseMiddleClickPre(x: number, y: number) {\r\n        if (!this.indeCanvas.IsMouseInsidePanel(x, y)) { return; }\r\n        this.MouseMiddleClick(x - this.indeCanvas.vec.x + this.mOffX, y - this.indeCanvas.vec.y - this.indeCanvas.HeadHeight + this.mOffY);\r\n    }\r\n    MouseRightClick(x: number, y: number) { /* */ }\r\n    MouseRightClickPre(x: number, y: number) {\r\n        if (!this.indeCanvas.IsMouseInsidePanel(x, y)) { return; }\r\n        this.MouseRightClick(x - this.indeCanvas.vec.x + this.mOffX, y - this.indeCanvas.vec.y - this.indeCanvas.HeadHeight + this.mOffY);\r\n    }\r\n    MouseDoubleClick(x: number, y: number) { /* */ }\r\n    MouseDoubleClickPre(x: number, y: number) {\r\n        if (!this.indeCanvas.IsMouseInsidePanel(x, y)) { return; }\r\n        this.MouseDoubleClick(x - this.indeCanvas.vec.x + this.mOffX, y - this.indeCanvas.vec.y - this.indeCanvas.HeadHeight + this.mOffY);\r\n    }\r\n    MouseWheel(x: number, y: number, v: number) { /* */ }\r\n    MouseWheelPre(x: number, y: number, v: number) {\r\n        if (!this.indeCanvas.IsMouseInsidePanel(x, y)) { return; }\r\n        this.MouseWheel(x - this.indeCanvas.vec.x + this.mOffX, y - this.indeCanvas.vec.y - this.indeCanvas.HeadHeight + this.mOffY, v);\r\n    }\r\n\r\n}","import * as tf from '@tensorflow/tfjs';\r\n// import * as tfvis from '@tensorflow/tfjs-vis';\r\nimport { TFProject } from '..';\r\nimport { DefinitionIndeCanvasCore } from '../Core/DefinitionIndeCanvasCore';\r\n\r\n// import { NVector3, MathUtility } from '../../../lib';\r\n\r\n// import { csv } from './smartDrawingTrainData.csv';\r\n\r\n// import { TFDataUtility } from '../../../../../../NJSCore/ML/NMacineLearning';\r\n\r\n// const csv = require('./smartDrawingTrainData.csv');\r\n\r\n// https://editor.p5js.org/codingtrain/sketches/UdXRZxF7e\r\n\r\nexport class TFModel03SmartDrawing extends DefinitionIndeCanvasCore {\r\n\r\n    xpos: number = 100;\r\n    ypos: number = 100;\r\n\r\n    xspeed: number = 10;\r\n    yspeed: number = 10;\r\n\r\n    xdirection: number = 1;\r\n    ydirection: number = 1;\r\n\r\n    rad: number = 50;\r\n    // vs: NVector3[] = [];\r\n    // selVec: NVector3 | undefined = undefined;\r\n\r\n    tfModel: TFModel;\r\n    xPredict: any; // tf.Tensor<tf.Rank>;\r\n    inputs: number[] = [];\r\n\r\n    constructor(tfProjct: TFProject, width: number = 650, height: number = 350) {\r\n        super(tfProjct, width, height);\r\n        this.indeCanvas.title = 'TF Horsepower and Miles Per Gallon';\r\n        this.Init();\r\n\r\n    }\r\n    async Init() {\r\n        const d = new DataProcess();\r\n        await d.Init().then(() => {\r\n            this.tfModel = new TFModel('model1', d.inputsTensor, d.labelsTensor);\r\n            this.tfModel.CreateModel01();\r\n\r\n            this.tfModel = new TFModel('model2', d.inputsTensor, d.labelsTensor);\r\n            this.tfModel.CreateModel02();\r\n\r\n        });\r\n    }\r\n    RenderIndependentCanvas(ctx: CanvasRenderingContext2D) {\r\n\r\n        tf.tidy(() => {\r\n            //\r\n        });\r\n        // console.log(tf.memory().numTensors);\r\n    }\r\n}\r\n\r\nclass DataProcess {\r\n    raw: any;\r\n    inputsTensor: tf.Tensor<tf.Rank.R2>;\r\n    labelsTensor: tf.Tensor<tf.Rank.R2>;\r\n    constructor() {\r\n        //\r\n    }\r\n    async Init() {\r\n        const d = await this.OpenCSV();\r\n        if (d) {\r\n            this.raw = this.processData(d);\r\n            tf.util.shuffle(this.raw);\r\n            // console.log(this.raw);\r\n\r\n            const inputs = [];\r\n            const labelsTemp = [];\r\n            for (let i = 0; i < this.raw.length; ++i) {\r\n                let row = [];\r\n                for (let j = 0; j < this.raw[i].length - 1; ++j) { row.push(this.raw[i][j]); }\r\n                inputs.push(row);\r\n                labelsTemp.push(this.raw[i][this.raw[i].length - 1]);\r\n            }\r\n            console.log(inputs);\r\n            console.log(labelsTemp);\r\n            const max = tf.max(labelsTemp);\r\n            const maxNum = max.dataSync();\r\n\r\n            const labels = [];\r\n            for (let i = 0; i < labelsTemp.length; ++i) {\r\n                const label = [];\r\n                for (let j = 0; j <= maxNum[0]; ++j) {\r\n                    if (j === labelsTemp[i]) {\r\n                        label.push(1);\r\n                    } else {\r\n                        label.push(0);\r\n                    }\r\n                }\r\n                labels.push(label);\r\n            }\r\n            console.log(labels);\r\n\r\n            this.inputsTensor = tf.tensor2d(inputs);\r\n            this.labelsTensor = tf.tensor2d(labels);\r\n\r\n            this.inputsTensor.print();\r\n            this.labelsTensor.print();\r\n        }\r\n    }\r\n    private processData(allText: any) {\r\n        const allTextLines = allText.split(/\\r\\n|\\n/);\r\n        const headers = allTextLines[0].split(',');\r\n        const lines = [];\r\n\r\n        for (let i = 1; i < allTextLines.length; i++) {\r\n            const data = allTextLines[i].split(',');\r\n            if (data.length === headers.length) {\r\n\r\n                const tarr = [];\r\n                for (let j = 0; j < headers.length; j++) {\r\n                    const dataTemp = +data[j];\r\n                    if (isNaN(dataTemp)) {\r\n                        tarr.push(data[j]);\r\n                    } else {\r\n                        tarr.push(dataTemp);\r\n                    }\r\n                }\r\n                lines.push(tarr);\r\n            }\r\n        }\r\n        return lines;\r\n    }\r\n    public async OpenCSV() {\r\n        // if (njslabSandboxStatic.app) { if (njslabSandboxStatic.app.isProduction) { return; } }\r\n        let file = 'smartDrawingTrainData.csv';\r\n        // console.log(location.host);\r\n        return fetch(`njslabSandboxStatic/ML/SmartDrawing/${file}`)\r\n            .then((response: Response) => {\r\n                console.log(response);\r\n                return response.text();\r\n            })\r\n            .catch((err: Error) => {\r\n                console.log(err);\r\n            });\r\n    }\r\n}\r\n\r\nclass TFModel {\r\n    t0: number;\r\n    t1: number;\r\n    name: string;\r\n    model: tf.Sequential;\r\n    inputsTensor: tf.Tensor<tf.Rank.R2>;\r\n    labelsTensor: tf.Tensor<tf.Rank.R2>;\r\n    constructor(name: string, inputsTensor: tf.Tensor<tf.Rank.R2>, labelsTensor: tf.Tensor<tf.Rank.R2>) {\r\n        this.name = name;\r\n        this.inputsTensor = inputsTensor;\r\n        this.labelsTensor = labelsTensor;\r\n    }\r\n    CreateModel01() {\r\n        this.model = tf.sequential();\r\n        const hidden01 = tf.layers.dense({\r\n            inputShape: [this.inputsTensor.shape[1]],\r\n            units: 20,\r\n            activation: 'sigmoid',\r\n        });\r\n        const output = tf.layers.dense({\r\n            // inputShape: [10],\r\n            units: this.labelsTensor.shape[1],\r\n            activation: 'softmax',\r\n        });\r\n        this.model.add(hidden01);\r\n        this.model.add(output);\r\n        this.Compile();\r\n    }\r\n    CreateModel02() {\r\n        this.model = tf.sequential();\r\n        const hidden01 = tf.layers.dense({\r\n            inputShape: [this.inputsTensor.shape[1]],\r\n            units: 20,\r\n            activation: 'sigmoid',\r\n        });\r\n        const hidden02 = tf.layers.dense({\r\n            // inputShape: [this.inputsTensor.shape[1]],\r\n            units: 15,\r\n            activation: 'sigmoid',\r\n        });\r\n        const output = tf.layers.dense({\r\n            // inputShape: [10],\r\n            units: this.labelsTensor.shape[1],\r\n            activation: 'softmax',\r\n        });\r\n        this.model.add(hidden01);\r\n        this.model.add(hidden02);\r\n        this.model.add(output);\r\n        this.Compile();\r\n    }\r\n    Compile() {\r\n        this.model.compile({\r\n            optimizer: tf.train.adam(),\r\n            // loss: tf.losses.meanSquaredError,\r\n            // metrics: ['mse'],\r\n            loss: tf.losses.softmaxCrossEntropy,  // 'categoricalCrossentropy',\r\n            metrics: ['accuracy'],\r\n        });\r\n        this.model.summary();\r\n        // tfvis.show.modelSummary({ name: 'Model Summary' }, this.model);\r\n\r\n        this.trainLoop();\r\n    }\r\n    public async trainLoop() {\r\n        this.t0 = performance.now();\r\n\r\n        await this.model.save('downloads://my-model');\r\n        // const saveResults = await this.model.save('localstorage://ml/my-model-1');\r\n        // console.log(saveResults);\r\n        this.train().then((result: any) => {\r\n            this.t1 = performance.now();\r\n            console.log(`${this.name}: ${result.history.loss[0]}, ${this.t1 - this.t0} `);\r\n            setTimeout(() => this.trainLoop(), 1);\r\n        });\r\n    }\r\n    public async train() {\r\n        // return await this.model.fit(this.inputsTensor, this.labelsTensor, {\r\n        //     batchSize: 100,\r\n        //     epochs: 10,\r\n        //     shuffle: true,\r\n        //     validationData: [this.inputsTensor, this.labelsTensor],\r\n        // });\r\n    }\r\n}"],"names":["DefinitionIndeCanvasCore","constructor","scene","width","height","indeCanvas","mOffX","mOffY","this","definitions","push","InitIndeCanvas","implementation","app","needUI","IndependentPanelCanvas","viewController","NUIWrapper","NUI","independentPanelWrapper","title","btnHam","isHidden","btnMini","RenderIndependentCanvas","ctx","canvas","Init","MouseMove","x","y","MouseMovePre","IsMouseInsidePanel","vec","HeadHeight","MouseDown","MouseDownPre","MouseUp","MouseUpPre","MouseDrag","MouseDragPre","MouseLeftClick","MouseLeftClickPre","MouseMiddleClick","MouseMiddleClickPre","MouseRightClick","MouseRightClickPre","MouseDoubleClick","MouseDoubleClickPre","MouseWheel","v","MouseWheelPre","TFModel03SmartDrawing","tfProjct","super","xpos","ypos","xspeed","yspeed","xdirection","ydirection","rad","tfModel","xPredict","inputs","async","d","DataProcess","then","TFModel","inputsTensor","labelsTensor","CreateModel01","CreateModel02","tf","raw","OpenCSV","processData","labelsTemp","i","length","row","j","console","log","maxNum","dataSync","labels","label","print","allText","allTextLines","split","headers","lines","data","tarr","dataTemp","isNaN","fetch","response","text","catch","err","name","t0","t1","model","hidden01","inputShape","shape","units","activation","output","add","Compile","hidden02","compile","optimizer","loss","metrics","summary","trainLoop","performance","now","save","train","result","history","setTimeout"],"sourceRoot":""}