{"version":3,"file":"static/js/55180.539f17e0.chunk.js","mappings":"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","sources":["njslab/Workshop/workshop-mapping/UrbanNetwork/01_Interaction.ts","njslab/Workshop/workshop-mapping/UrbanNetwork/02_Network.ts"],"sourcesContent":["import { RendererJSAPI } from '../../../../lib'\r\n\r\nimport { distanceTo } from 'njscore';\r\n\r\nexport class Solution extends RendererJSAPI {\r\n\r\n    pts: Point[] = [];\r\n    lns: Line[] = [];\r\n\r\n    path: any;\r\n\r\n    previousPt: Point | undefined = undefined;\r\n\r\n    ptStart: InteractivePoint;\r\n    ptEnd: InteractivePoint;\r\n    captured: InteractivePoint | undefined = undefined;\r\n\r\n    constructor(id: string) {\r\n        super(id);\r\n    }\r\n    public initPost(): void {\r\n        // TODO\r\n        // You code goes here for one time operation\r\n\r\n        // disable interaction with a base map\r\n        // https://developers.arcgis.com/javascript/latest/api-reference/esri-views-MapView.html\r\n        this.mView.on(\"drag\", (event) => {\r\n            event.stopPropagation();\r\n        });\r\n        this.mView.navigation.mouseWheelZoomEnabled = false;\r\n        this.center(-71.102761, 42.366946);\r\n        this.zoom(15)\r\n\r\n\r\n        this.ptStart = new InteractivePoint(315, 90);\r\n        this.ptEnd = new InteractivePoint(1268, 1120);\r\n\r\n        // !! you should execute it for rendering\r\n        this.start();\r\n    }\r\n    public render(ctx: CanvasRenderingContext2D): void {\r\n        // TODO\r\n        // You code goes here for the rending loop\r\n\r\n\r\n        this.lns.map( (l: Line) => {\r\n            return l.render(ctx, this.time);\r\n        });\r\n        this.pts.map( (p: Point) => {\r\n            return  p.render(ctx, this.time);\r\n        });\r\n\r\n\r\n        if (this.path) {\r\n\r\n            ctx.beginPath();\r\n            ctx.moveTo(this.path[0].x, this.path[0].y);\r\n            for(let i = 1; i < this.path.length; ++i) {\r\n                ctx.lineTo(this.path[i].x, this.path[i].y);\r\n            }\r\n            ctx.lineWidth = 2;\r\n            ctx.strokeStyle = '#f00';\r\n            ctx.stroke();\r\n\r\n        }\r\n\r\n        this.ptStart.Render(ctx, this.time);\r\n        this.ptEnd.Render(ctx, this.time);\r\n\r\n        // !! can stop render after this frame.\r\n        // this.isStatic = true;\r\n    }\r\n    public mouseDown(x: number, y: number): void {\r\n        if (this.ptStart.inInside(x,y)) {\r\n            this.captured = this.ptStart;\r\n            return;\r\n        }\r\n        if (this.ptEnd.inInside(x,y)) {\r\n            this.captured = this.ptEnd;\r\n            return;\r\n        }\r\n       \r\n    }\r\n    public mouseUp(x: number, y: number): void {\r\n        this.captured = undefined;\r\n    }\r\n    public mouseDrag(x: number, y: number): void {\r\n        // TODO\r\n    }\r\n    public mouseClick(x: number, y: number): void {\r\n\r\n        if (this.previousPt === undefined) {\r\n            const p = new Point(x, y);\r\n            this.previousPt = p\r\n            this.pts.push(p);\r\n        } else {\r\n            const p = new Point(x, y);\r\n            this.pts.push(p);\r\n            \r\n            this.lns.push(new Line(this.previousPt, p));\r\n            this.previousPt = undefined;\r\n\r\n\r\n       }\r\n\r\n\r\n    }\r\n    public mouseMove(x: number, y: number) {\r\n        if (this.captured) {\r\n        //     console.log(x, y)\r\n            this.captured.x = x;\r\n            this.captured.y = y;\r\n        }    \r\n    }\r\n}\r\n\r\n\r\nexport class InteractivePoint {\r\n    x: number;\r\n    y: number;\r\n    r: number = 10;\r\n    constructor(x: number, y: number) {\r\n        this.x = x;\r\n        this.y = y;\r\n    }\r\n    public Render(ctx: CanvasRenderingContext2D, t: number) {\r\n        ctx.beginPath();\r\n        ctx.arc(this.x, this.y, Math.sin(t) + this.r, 0, Math.PI * 2);\r\n        ctx.closePath();\r\n        ctx.fillStyle = '#00f'\r\n        ctx.fill();\r\n\r\n        ctx.strokeStyle = '#fff'\r\n        ctx.stroke();\r\n    }\r\n    public inInside(x: number, y: number) {\r\n        if (distanceTo(x, y, 0, this.x, this.y, 0) < this.r + 2){\r\n            return true;\r\n        } else {\r\n            return false;\r\n        }\r\n    }\r\n}\r\n\r\nexport class Line {\r\n    public p0: Point;\r\n    public p1: Point;\r\n    public lineWidth = 2;\r\n    constructor(p0: Point, p1: Point) {\r\n        this.p0 = p0;\r\n        this.p1 = p1;\r\n    }\r\n    render(ctx: CanvasRenderingContext2D, t: number) {\r\n        ctx.beginPath();\r\n        ctx.moveTo(this.p0.x, this.p0.y);\r\n        ctx.lineTo(this.p1.x, this.p1.y);\r\n        ctx.closePath();\r\n\r\n        ctx.lineWidth = this.lineWidth;\r\n        ctx.strokeStyle = '#fff';\r\n        ctx.stroke();\r\n\r\n    }\r\n}\r\nexport class Point {\r\n    x: number;\r\n    y: number;\r\n    z: number = 0;\r\n    r: number = 6;\r\n    constructor(x: number, y: number)  {\r\n        this.x = x;\r\n        this.y = y;\r\n    }\r\n    render(ctx: CanvasRenderingContext2D, t: number) {\r\n        ctx.beginPath();\r\n        ctx.arc(this.x, this.y, Math.sin(t) + this.r, 0, Math.PI * 2);\r\n        ctx.closePath();\r\n        ctx.fillStyle = '#0f0'\r\n        ctx.fill();\r\n        ctx.strokeStyle = '#fff'\r\n        ctx.stroke();\r\n    }\r\n}","import { RendererJSAPI } from '../../../../lib'\r\n\r\n// import { getLineSeg, distanceTo, Graph, Node } from 'njscore';\r\n\r\nimport { getLineSeg, distanceTo, Graph, Node, AStart, NodeAStar, buildNetwork } from '../../../../lib';\r\n\r\n\r\nimport { Point, Line, InteractivePoint } from './01_Interaction';\r\n\r\nexport class Solution extends RendererJSAPI {\r\n    network: Network;\r\n\r\n    pts: Point[] = [];\r\n    lns: Line[] = [];\r\n\r\n    path: any;\r\n\r\n    previousPt: Point | undefined = undefined;\r\n\r\n    ptStart: InteractivePoint;\r\n    ptEnd: InteractivePoint;\r\n    captured: InteractivePoint | undefined = undefined;\r\n\r\n\r\n    nodeAStart: NodeAStar[] = [];\r\n\r\n    constructor(id: string) {\r\n        super(id);\r\n    }\r\n    public initPost(): void {\r\n        // TODO\r\n        // You code goes here for one time operation\r\n\r\n        // disable interaction with a base map\r\n        // https://developers.arcgis.com/javascript/latest/api-reference/esri-views-MapView.html\r\n        this.mView.on(\"drag\", (event) => {\r\n            event.stopPropagation();\r\n        });\r\n        this.mView.navigation.mouseWheelZoomEnabled = false;\r\n        this.center(-71.102761, 42.366946);\r\n        this.zoom(15)\r\n\r\n        this.network = new Network();\r\n\r\n        this.ptStart = new InteractivePoint(315, 90);\r\n        this.ptEnd = new InteractivePoint(1268, 1120);\r\n\r\n        // !! you should execute it for rendering\r\n        this.start();\r\n    }\r\n    public render(ctx: CanvasRenderingContext2D): void {\r\n        // TODO\r\n        // You code goes here for the rending loop\r\n\r\n        this.lns.map((l: Line) => {\r\n            return l.render(ctx, this.time);\r\n        });\r\n        this.pts.map((p: Point) => {\r\n            return p.render(ctx, this.time);\r\n        });\r\n\r\n\r\n        this.network.render(ctx);\r\n\r\n        if (this.path) {\r\n\r\n            ctx.beginPath();\r\n            ctx.moveTo(this.path[0].x, this.path[0].y);\r\n            for (let i = 1; i < this.path.length; ++i) {\r\n                ctx.lineTo(this.path[i].x, this.path[i].y);\r\n            }\r\n            ctx.lineWidth = 2;\r\n            ctx.strokeStyle = '#f00';\r\n            ctx.stroke();\r\n\r\n        }\r\n\r\n        this.ptStart.Render(ctx, this.time);\r\n        this.ptEnd.Render(ctx, this.time);\r\n\r\n\r\n        \r\n\r\n        // !! can stop render after this frame.\r\n        // this.isStatic = true;\r\n    }\r\n    public mouseDown(x: number, y: number): void {\r\n        if (this.ptStart.inInside(x, y)) {\r\n            this.captured = this.ptStart;\r\n            return;\r\n        }\r\n        if (this.ptEnd.inInside(x, y)) {\r\n            this.captured = this.ptEnd;\r\n            return;\r\n        }\r\n\r\n    }\r\n    public mouseUp(x: number, y: number): void {\r\n        this.captured = undefined;\r\n    }\r\n    public mouseDrag(x: number, y: number): void {\r\n        // TODO\r\n    }\r\n    public mouseClick(x: number, y: number): void {\r\n\r\n        if (this.previousPt === undefined) {\r\n            const p = new Point(x, y);\r\n            this.previousPt = p\r\n            this.pts.push(p);\r\n        } else {\r\n            const p = new Point(x, y);\r\n            this.pts.push(p);\r\n\r\n            this.lns.push(new Line(this.previousPt, p));\r\n            this.previousPt = undefined;\r\n\r\n            const obj = (JSON.parse(JSON.stringify(this.lns)));\r\n            console.log(getLineSeg(obj))\r\n\r\n            this.network = new Network();\r\n            this.network.addLine(obj);\r\n\r\n            this.path = this.network.getPath(\r\n                { x: this.ptStart.x, y: this.ptStart.y, z: 0 },\r\n                {\r\n                    x: this.ptEnd.x, y: this.ptEnd.y, z: 0\r\n                });\r\n\r\n\r\n\r\n                this.nodeAStart = buildNetwork(getLineSeg(obj));\r\n\r\n        }\r\n\r\n    }\r\n    public mouseMove(x: number, y: number) {\r\n        if (this.captured) {\r\n            this.captured.x = x;\r\n            this.captured.y = y;\r\n\r\n            if (this.network.isActivated) {\r\n                this.path = this.network.getPath(\r\n                    { x: this.ptStart.x, y: this.ptStart.y, z: 0 },\r\n                    {\r\n                        x: this.ptEnd.x, y: this.ptEnd.y, z: 0\r\n                    });\r\n\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\nclass Network {\r\n    graph: Graph;\r\n    isActivated = false;\r\n    constructor() {\r\n        this.graph = new Graph();\r\n    }\r\n    public addLine(lns: any) {\r\n        const lineSeg = getLineSeg(lns);\r\n        this.graph.initByLines(lineSeg)\r\n        //     console.log(this.graph);\r\n        this.isActivated = true;\r\n    }\r\n    public render(ctx: CanvasRenderingContext2D): void {\r\n\r\n        this.graph.edges.map((e, i) => {\r\n            ctx.beginPath();\r\n            ctx.moveTo(e.n0.x, e.n0.y);\r\n            ctx.lineTo(e.n1.x, e.n1.y);\r\n            ctx.lineWidth = 1;\r\n            ctx.strokeStyle = '#fff';\r\n            ctx.stroke();\r\n            return undefined;\r\n        });\r\n\r\n        this.graph.nodes.map((n) => {\r\n            ctx.beginPath();\r\n            ctx.arc(n.x, n.y, 5, 0, Math.PI * 2);\r\n            ctx.fillStyle = '#fff';\r\n            ctx.fill();\r\n            return undefined;\r\n        });\r\n\r\n        if (this.graph.nodeOrigin) {\r\n            ctx.beginPath();\r\n            ctx.arc(this.graph.nodeOrigin.x, this.graph.nodeOrigin.y, 7, 0, Math.PI * 2);\r\n            ctx.closePath();\r\n            ctx.fillStyle = '#f00';\r\n            ctx.fill();\r\n        }\r\n\r\n        if (this.graph.nodeTarget) {\r\n            ctx.beginPath();\r\n            ctx.arc(this.graph.nodeTarget.x, this.graph.nodeTarget.y, 7, 0, Math.PI * 2);\r\n            ctx.closePath();\r\n            ctx.fillStyle = '#f00';\r\n            ctx.fill();\r\n        }\r\n    }\r\n    public getPath(p0, p1) {\r\n        const nodeStart = this.graph.findClosestNode(p0);\r\n        const nodeEnd = this.graph.findClosestNode(p1);\r\n\r\n        this.graph.propagationByNode(nodeStart);\r\n        // this.graph.propagationByNode(nodeStart, costFnDistance, 0.1);\r\n\r\n        const nodes = this.graph.backpropagation(nodeEnd);\r\n        return nodes;\r\n    }\r\n}\r\nconst costFnDistance = (p0: Node, p1: Node, beta: number = 0.0002) => {\r\n    return distanceTo(p0.x, p0.y, p0.z, p1.x, p1.y, p1.z);\r\n}\r\n\r\n\r\n\r\n\r\n\r\n"],"names":["Solution","RendererJSAPI","constructor","id","super","pts","lns","path","previousPt","undefined","ptStart","ptEnd","captured","initPost","this","mView","on","event","stopPropagation","navigation","mouseWheelZoomEnabled","center","zoom","InteractivePoint","start","render","ctx","map","l","time","p","beginPath","moveTo","x","y","i","length","lineTo","lineWidth","strokeStyle","stroke","Render","mouseDown","inInside","mouseUp","mouseDrag","mouseClick","Point","push","Line","mouseMove","r","t","arc","Math","sin","PI","closePath","fillStyle","fill","distanceTo","p0","p1","z","network","nodeAStart","Network","obj","JSON","parse","stringify","console","log","getLineSeg","addLine","getPath","buildNetwork","isActivated","graph","Graph","lineSeg","initByLines","edges","e","n0","n1","nodes","n","nodeOrigin","nodeTarget","nodeStart","findClosestNode","nodeEnd","propagationByNode","backpropagation"],"sourceRoot":""}