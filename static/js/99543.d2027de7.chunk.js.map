{"version":3,"file":"static/js/99543.d2027de7.chunk.js","mappings":"4IAoBO,MAAMA,EAITC,YAAYC,GAAa,KAHlBC,aAAO,OACdC,cAAQ,OACRC,YAAM,EAEFC,KAAKH,QAAUI,SAASC,eAAeN,GAMvC,MAAMO,EAAMF,SAASG,cAAc,OACnCD,EAAIE,MAAMC,QAAU,OAMpBN,KAAKH,QAAQU,YAAYJ,GAEzBH,KAAKF,SAAWG,SAASG,cAAc,OACvCJ,KAAKF,SAASU,YAAc,mCAC5BR,KAAKF,SAASO,MAAMI,MAAQ,OAC5BN,EAAII,YAAYP,KAAKF,UAErBE,KAAKD,OAASE,SAASG,cAAc,OACrCJ,KAAKD,OAAOM,MAAMI,MAAQ,OAC1BN,EAAII,YAAYP,KAAKD,QAIrBC,KAAKU,YAIT,CACA,mBAyCIC,YAAW,QAGR,IACP,CACOC,UACH,KAAOZ,KAAKH,QAAQgB,kBAChBb,KAAKH,QAAQiB,YAAYd,KAAKH,QAAQgB,iBAE9C,E","sources":["njslab/Workshop/workshop-ml/chatGPT/index.ts"],"sourcesContent":["import { GoogleGenerativeAI } from '@google/generative-ai';\r\nimport OpenAI from 'openai';\r\n// import { Configuration } from 'openai'\r\nimport * as tf from '@tensorflow/tfjs'\r\nimport * as tfconv from '@tensorflow/tfjs-converter';\r\nimport * as deeplab from '@tensorflow-models/deeplab'\r\n\r\nimport { getLabels, getColormap } from '@tensorflow-models/deeplab';\r\n\r\nimport { RendererCanvas, Vector3, remap, getImgFromURL } from '../../../../lib';\r\n\r\nimport '@tensorflow/tfjs-backend-webgl';\r\n\r\nimport { PARAM } from 'App';\r\n\r\n// import { NVector3, MathUtility } from '../../../lib';\r\n\r\n// https://github.com/tensorflow/tfjs-models/tree/master/deeplab\r\n// https://github.com/tensorflow/tfjs-models/blob/master/deeplab/demo/src/index.js\r\n\r\nexport class Solution {\r\n    public divHost: HTMLElement;\r\n    divInput\r\n    divOut\r\n    constructor(id: string) {\r\n        this.divHost = document.getElementById(id);\r\n\r\n        // Center align\r\n        // this.divHost.style.display = 'flex';\r\n        // this.divHost.style.alignItems = 'center';\r\n\r\n        const div = document.createElement('div');\r\n        div.style.padding = '50px';\r\n        // div.style.marginLeft = 'auto';\r\n        // div.style.marginRight = 'auto';\r\n        // // div.style.width = '600px';\r\n        // // div.style.height = '350px';\r\n\r\n        this.divHost.appendChild(div);\r\n\r\n        this.divInput = document.createElement('div');\r\n        this.divInput.textContent = 'Q: What is Computational Design?';\r\n        this.divInput.style.color = '#999';\r\n        div.appendChild(this.divInput);\r\n\r\n        this.divOut = document.createElement('div');\r\n        this.divOut.style.color = '#555';\r\n        div.appendChild(this.divOut);\r\n        // TODO\r\n        // You code goes here for one time operation\r\n\r\n        this.initGemini();\r\n\r\n        // !! you should execute it for rendering\r\n        // this.start();\r\n    }\r\n    public async initGemini() {\r\n        // https://platform.openai.com/docs/quickstart?context=node\r\n        // const apiKey = process.env.REACT_APP_OPEN_AI_CHAT_GPT;\r\n        // // console.log(apiKey)\r\n\r\n        // // const configuration = new Configuration({\r\n        // //     organization: 'org-hVb9jLGgEG18b8M3S4DskHc9',\r\n        // //     apiKey: process.env.OPENAI_API_KEY,\r\n        // //   });\r\n\r\n        // const openai = new OpenAI({apiKey, dangerouslyAllowBrowser: true, organization: ''});\r\n\r\n        // const main = async () => {\r\n\r\n        //     const completion = await openai.chat.completions.create({\r\n        //         model: 'gpt-3.5-turbo',\r\n        //         messages: [\r\n        //             { role: 'system', content: this.divInput.textContent},\r\n        //             { role: 'user', content: 'message.content' },\r\n        //         ],\r\n                \r\n        //     });\r\n        //     console.log(completion.choices[0]);\r\n        // }\r\n\r\n\r\n\r\n        // const testResponse = await openai.createChatCompletion({\r\n        //     model: 'gpt-3.5-turbo',\r\n        //     messages: [\r\n        //       {\r\n        //         role: 'system',\r\n        //         content:\r\n        //           '모든 대답은 yes or no로만 답해줘. 그 외에는 아무 말도 하지 마.',\r\n        //       },\r\n        //       { role: 'user', content: message.content },\r\n        //     ],\r\n        //   });\r\n\r\n\r\n\r\n        setTimeout(() => {\r\n            // main()\r\n            // console.log('-----')\r\n        }, 1000);\r\n    }\r\n    public destroy() {\r\n        while (this.divHost.lastElementChild) {\r\n            this.divHost.removeChild(this.divHost.lastElementChild);\r\n        }\r\n    }\r\n}\r\n\r\n"],"names":["Solution","constructor","id","divHost","divInput","divOut","this","document","getElementById","div","createElement","style","padding","appendChild","textContent","color","initGemini","setTimeout","destroy","lastElementChild","removeChild"],"sourceRoot":""}