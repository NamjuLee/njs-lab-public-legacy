{"version":3,"file":"static/js/94858.44723d36.chunk.js","mappings":"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","sources":["njslab/Infrastructure/WebGPU/Util/MatUtil.ts","njslab/Infrastructure/WebGPU/WebGPU_10_Geometry/shaders/shaders.ts","njslab/Infrastructure/WebGPU/WebGPU_10_Geometry/Geometry/Sphere.ts","njslab/Infrastructure/WebGPU/WebGPU_10_Geometry/Geometry/Cylinder.ts","njslab/Infrastructure/WebGPU/WebGPU_10_Geometry/Geometry/Cone.ts","njslab/Infrastructure/WebGPU/WebGPU_10_Geometry/Geometry/Torus.ts","njslab/Infrastructure/WebGPU/WebGPU_10_Geometry/camera.ts","njslab/Infrastructure/WebGPU/WebGPU_10_Geometry/index.ts","../node_modules/gl-matrix/esm/vec3.js"],"sourcesContent":["import { vec3, mat4 } from 'gl-matrix';\n\nexport const createTransforms = (modelMat:mat4, translation:vec3 = [0,0,0], rotation:vec3 = [0,0,0], scaling:vec3 = [1,1,1]) => {\n    const rotateXMat = mat4.create();\n    const rotateYMat = mat4.create();\n    const rotateZMat = mat4.create();   \n    const translateMat = mat4.create();\n    const scaleMat = mat4.create();\n\n    //perform individual transformations\n    mat4.fromTranslation(translateMat, translation);\n    mat4.fromXRotation(rotateXMat, rotation[0]);\n    mat4.fromYRotation(rotateYMat, rotation[1]);\n    mat4.fromZRotation(rotateZMat, rotation[2]);\n    mat4.fromScaling(scaleMat, scaling);\n\n    //combine all transformation matrices together to form a final transform matrix: modelMat\n    mat4.multiply(modelMat, rotateXMat, scaleMat);\n    mat4.multiply(modelMat, rotateYMat, modelMat);        \n    mat4.multiply(modelMat, rotateZMat, modelMat);\n    mat4.multiply(modelMat, translateMat, modelMat);\n};\n\nexport const createViewProjection = (respectRatio = 1.0, cameraPosition:vec3 = [2, 2, 4], lookDirection:vec3 = [0, 0, 0], \n    upDirection:vec3 = [0, 1, 0]) => {\n\n    const viewMatrix = mat4.create();\n    const projectionMatrix = mat4.create();       \n    const viewProjectionMatrix = mat4.create();\n    mat4.perspective(projectionMatrix, 2*Math.PI/5, respectRatio, 0.1, 100.0);\n\n    mat4.lookAt(viewMatrix, cameraPosition, lookDirection, upDirection);\n    mat4.multiply(viewProjectionMatrix, projectionMatrix, viewMatrix);\n\n    const cameraOption = {\n        eye: cameraPosition,\n        center: lookDirection,\n        zoomMax: 100,\n        zoomSpeed: 2\n    };\n\n    return {\n        viewMatrix,\n        projectionMatrix,\n        viewProjectionMatrix,\n        cameraOption\n    }\n};","export const CreateGPUBufferUint = (device:GPUDevice, data:Uint32Array, \n    usageFlag:GPUBufferUsageFlags = GPUBufferUsage.INDEX | GPUBufferUsage.COPY_DST) => {\n    const buffer = device.createBuffer({\n        size: data.byteLength,\n        usage: usageFlag,\n        mappedAtCreation: true\n    });\n    new Uint32Array(buffer.getMappedRange()).set(data);\n    buffer.unmap();\n    return buffer;\n}\n\nexport const CreateGPUBuffer = (device:GPUDevice, data:Float32Array, \n    usageFlag:GPUBufferUsageFlags = GPUBufferUsage.VERTEX | GPUBufferUsage.COPY_DST) => {\n    const buffer = device.createBuffer({\n        size: data.byteLength,\n        usage: usageFlag,\n        mappedAtCreation: true\n    });\n    new Float32Array(buffer.getMappedRange()).set(data);\n    buffer.unmap();\n    return buffer;\n}\n\nexport const Shaders = () => {\n    const vertex = `\n        struct Output {\n            @builtin(position) Position : vec4<f32>,\n            @location(0) vColor : vec4<f32>,\n        };\n        @vertex\n        fn main(@location(0) pos: vec4<f32>, @location(1) color: vec4<f32>) -> Output {\n            var output: Output;\n            output.Position = pos;\n            output.vColor = color;\n            return output;\n        }`;\n\n    const fragment = `\n        @fragment\n        fn main(@location(0) vColor: vec4<f32>) -> @location(0) vec4<f32> {\n            return vColor;\n        }`;\n\n    return {\n        vertex, \n        fragment\n    };\n}\n\nexport const ShadersOld = () => {\n    const vertex = `\n        [[location(0)]] var<in> position : vec4<f32>;\n        [[location(1)]] var<in> color : vec4<f32>;\n        [[builtin(position)]] var<out> Position : vec4<f32>;\n        [[location(0)]] var<out> vColor : vec4<f32>;\n\n        [[stage(vertex)]]\n        fn main() -> void {\n            Position = position;\n            vColor = color;\n            return;\n        }`;\n\n    const fragment = `\n        [[location(0)]] var<in> vColor : vec4<f32>;\n        [[location(0)]] var<out> fragColor : vec4<f32>;\n\n        [[stage(fragment)]]\n        fn main() -> void {\n            fragColor = vColor;\n            return;\n        }`;\n\n    return {\n        vertex, \n        fragment\n    };\n}\n","import { vec3 } from 'gl-matrix';\n\nexport const SpherePosition = (radius:number, theta:number, phi:number, center:vec3 = [0,0,0]) => {\n    const snt = Math.sin(theta*Math.PI/180);\n    const cnt = Math.cos(theta*Math.PI/180);\n    const snp = Math.sin(phi*Math.PI/180);\n    const cnp = Math.cos(phi*Math.PI/180);\n    return vec3.fromValues(radius*snt*cnp + center[0], radius*cnt + center[1], -radius*snt*snp + center[2]);     \n}\nexport const SphereWireframeData = (radius:number, u:number, v:number, center:vec3 =[0,0,0]) => {\n    if(u<2 || v<2) return;\n    let pts = [];\n    let pt:vec3;\n    for(let i = 0;i<u;i++){\n        let pt1:vec3[] = [];\n        for(let j=0;j<v;j++){\n            pt = SpherePosition(radius, i*180/(u-1), j*360/(v-1), center);\n            pt1.push(pt);\n        }\n        pts.push(pt1);\n    }\n\n    let p = [] as any;\n    let p0, p1, p2, p3;\n    for(let i=0;i<u-1;i++){\n        for(let j=0; j<v-1; j++){\n            p0 = pts[i][j];\n            p1 = pts[i+1][j];\n            //p2 = pts[i+1][j+1];\n            p3 = pts[i][j+1];\n            p.push([\n                p0[0],p0[1],p0[2],p1[0],p1[1],p1[2],\n                p0[0],p0[1],p0[2],p3[0],p3[1],p3[2]\n            ]);\n        }\n    }\n    return new Float32Array(p.flat());\n}\nexport const Shaders = () => {\n    const vertex = `\n        struct Uniforms {\n            mvpMatrix : mat4x4<f32>,\n        };\n        @binding(0) @group(0) var<uniform> uniforms : Uniforms;\n        \n        @vertex\n        fn main(@location(0) pos: vec4<f32>) ->  @builtin(position) vec4<f32> {\n            return uniforms.mvpMatrix * pos;     \n        }`;\n\n    const fragment = `\n        @fragment\n        fn main() -> @location(0) vec4<f32> {\n            return vec4<f32>(1.0, 1.0, 0.0, 1.0);            \n        }`;\n\n    return {\n        vertex, \n        fragment\n    };\n}\nexport const getSphere = () => {\n    return {\n        shader: Shaders(),\n        vertex: SphereWireframeData(1,20, 20, [0,0,0])\n    }\n}\n","import { vec3 } from 'gl-matrix';\n\n\nexport const CylinderWireframeData = (rin:number,rout:number, height:number, n:number, center:vec3 =[0,0,0]) => {\n    if(n<2 || rin>=rout) return;\n    let pts = [] as any, h = height/2;\n    \n    for(let i = 0;i<n;i++){\n        pts.push([\n            CylinderPosition(rout,i*360/(n-1), h, center),\n            CylinderPosition(rout,i*360/(n-1), -h, center),\n            CylinderPosition(rin,i*360/(n-1), -h, center),\n            CylinderPosition(rin,i*360/(n-1), h, center)\n        ]);\n    }\n\n    let p = [] as any;\n    let p0, p1, p2, p3, p4, p5, p6, p7;\n    for(let i = 0; i < n-1; i++){\n        p0 = pts[i][0];\n        p1 = pts[i][1];\n        p2 = pts[i][2];\n        p3 = pts[i][3];\n        p4 = pts[i+1][0];\n        p5 = pts[i+1][1];\n        p6 = pts[i+1][2];\n        p7 = pts[i+1][3];\n\n        p.push([\n            //top face – 3 lines\n            p0[0],p0[1],p0[2],p3[0],p3[1],p3[2],\n            p3[0],p3[1],p3[2],p7[0],p7[1],p7[2],\n            p4[0],p4[1],p4[2],p0[0],p0[1],p0[2],\n\n            //bottom face – 3 lines\n            p1[0],p1[1],p1[2],p2[0],p2[1],p2[2],\n            p2[0],p2[1],p2[2],p6[0],p6[1],p6[2],\n            p5[0],p5[1],p5[2],p1[0],p1[1],p1[2],\n\n            //side – 2 lines\n            p0[0],p0[1],p0[2],p1[0],p1[1],p1[2],\n            p3[0],p3[1],p3[2],p2[0],p2[1],p2[2]\n        ]);\n    }        \n    return new Float32Array(p.flat());\n};\n\nexport const CylinderPosition = (radius:number, theta:number, y:number, center:vec3 = [0,0,0]) => {\n    let sn = Math.sin(theta*Math.PI/180);\n    let cn = Math.cos(theta*Math.PI/180);\n    return vec3.fromValues(radius*cn + center[0], y+center[1], -radius*sn + center[2]);\n}\n\nexport const Shaders = () => {\n    const vertex = `\n        struct Uniforms {\n            mvpMatrix : mat4x4<f32>,\n        };\n        @binding(0) @group(0) var<uniform> uniforms : Uniforms;\n        \n        @vertex\n        fn main(@location(0) pos: vec4<f32>) ->  @builtin(position) vec4<f32> {\n            return uniforms.mvpMatrix * pos;     \n        }`;\n\n    const fragment = `\n        @fragment\n        fn main() -> @location(0) vec4<f32> {\n            return vec4<f32>(1.0, 1.0, 0.0, 1.0);            \n        }`;\n\n    return {\n        vertex, \n        fragment\n    };\n}\n\nexport const getCylinder = () => {\n    return {\n        shader: Shaders(),\n        vertex: CylinderWireframeData(1, 2, 2, 20, [0,0,0])\n    }\n}\n","import { vec3 } from 'gl-matrix';\n\nexport const ConeWireframeData = (rtop:number, rbottom:number, height:number, n:number, center:vec3 = [0,0,0]) => {\n    if(n<2) return;\n    let pts = [] as any, h = height/2;\n\n    for(let i = 0;i<n+1;i++){\n        pts.push([\n            ConePosition(rtop, i*360/(n-1), h, center),\n            ConePosition(rbottom, i*360/(n-1), -h, center),\n            ConePosition(0, i*360/(n-1), -h, center),\n            ConePosition(0, i*360/(n-1), h, center)]);\n     }\n\n    let p = [] as any;\n    let p0, p1, p2, p3, p4, p5;\n    for(let i=0;i<n-1;i++){\n        p0 = pts[i][0];\n        p1 = pts[i][1];\n        p2 = pts[i][2];\n        p3 = pts[i][3];\n        p4 = pts[i+1][0];\n        p5 = pts[i+1][1];\n\n        p.push([\n            //top \n            p0[0],p0[1],p0[2],p3[0],p3[1],p3[2],\n            p4[0],p4[1],p4[2],p0[0],p0[1],p0[2],\n\n            //bottom \n            p1[0],p1[1],p1[2],p2[0],p2[1],p2[2],\n            p5[0],p5[1],p5[2],p1[0],p1[1],p1[2],\n\n            //side \n            p0[0],p0[1],p0[2],p1[0],p1[1],p1[2]\n        ]);\n    }        \n\n    return new Float32Array(p.flat());\n};\n\nexport const ConePosition = (radius:number, theta:number, y:number, center:vec3 = [0,0,0]) => {\n    let sn = Math.sin(theta*Math.PI/180);\n    let cn = Math.cos(theta*Math.PI/180);\n    return vec3.fromValues(radius*cn + center[0], y + center[1], -radius*sn + center[2]);        \n}\n\nexport const Shaders = () => {\n    const vertex = `\n        struct Uniforms {\n            mvpMatrix : mat4x4<f32>,\n        };\n        @binding(0) @group(0) var<uniform> uniforms : Uniforms;\n        \n        @vertex\n        fn main(@location(0) pos: vec4<f32>) ->  @builtin(position) vec4<f32> {\n            return uniforms.mvpMatrix * pos;     \n        }`;\n\n    const fragment = `\n        @fragment\n        fn main() -> @location(0) vec4<f32> {\n            return vec4<f32>(1.0, 0.0, 0.0, 1.0);            \n        }`;\n\n    return {\n        vertex, \n        fragment\n    };\n}\n\nexport const getCone = () => {\n    return {\n        shader: Shaders(),\n        vertex: ConeWireframeData(1, 2, 2, 20, [0,0,0])\n    }\n}\n","import { vec3 } from 'gl-matrix';\n\nexport const TorusWireframeData = (R:number, r:number, N:number, n:number, center:vec3 = [0,0,0]) => {\n    if(n<2 || N<2) return;\n    let pts = [];\n    let pt:vec3;\n    for(let i = 0;i<N;i++){\n        let pt1:vec3[] = [];\n        for(let j=0;j<n;j++){\n            pt = TorusPosition(R, r, i*360/(N-1),j*360/(n-1), center);               \n            pt1.push(pt);\n        }\n        pts.push(pt1);\n    }\n\n    let pp = [] as any;\n    let p0, p1, p2, p3;\n    for(let i=0;i<N-1;i++){\n        for(let j=0;j<n-1;j++){\n            p0 = pts[i][j];\n            p1 = pts[i+1][j];\n            p2 = pts[i+1][j+1];\n            p3 = pts[i][j+1];\n            pp.push([\n                p0[0],p0[1],p0[2],p1[0],p1[1],p1[2],                   \n                p3[0],p3[1],p3[2],p0[0],p0[1],p0[2]\n            ]);\n        }\n    }\n\n    return new Float32Array(pp.flat());\n};\n\nexport const TorusPosition = (R:number, r:number, u:number, v:number, center:vec3 = [0,0,0]) => {\n    let snu = Math.sin(u*Math.PI/180);\n    let cnu = Math.cos(u*Math.PI/180);\n    let snv = Math.sin(v*Math.PI/180);\n    let cnv = Math.cos(v*Math.PI/180);\n    return vec3.fromValues((R+r*cnv)*cnu + center[0], r*snv + center[1], -(R+r*cnv)*snu + center[2]);        \n}\n\nexport const Shaders = () => {\n    const vertex = `\n        struct Uniforms {\n            mvpMatrix : mat4x4<f32>,\n        };\n        @binding(0) @group(0) var<uniform> uniforms : Uniforms;\n        \n        @vertex\n        fn main(@location(0) pos: vec4<f32>) ->  @builtin(position) vec4<f32> {\n            return uniforms.mvpMatrix * pos;     \n        }`;\n\n    const fragment = `\n        @fragment\n        fn main() -> @location(0) vec4<f32> {\n            return vec4<f32>(1.0, 0.0, 0.0, 1.0);            \n        }`;\n\n    return {\n        vertex, \n        fragment\n    };\n}\n\nexport const getTorus = () => {\n    return {\n        shader: Shaders(),\n        vertex: TorusWireframeData(2, 0.75, 50, 20, [0,0,0])\n    }\n}\n","import { vec3, mat4 } from \"gl-matrix\";\nimport { Solution } from './'\n\n\nimport { createTransforms, createViewProjection } from '../Util';\n\nexport function Deg2Rad(theta: number) : number {\n    return theta * Math.PI / 180;\n}\n\nexport class CameraTT {\n\n    position: vec3;\n    eulers: vec3;\n    view: mat4;\n    forwards: vec3;\n    right: vec3;\n    up: vec3;\n\n\n    constructor(position: vec3, theta: number, phi: number) {\n        this.position = position;\n        this.eulers = [0, phi, theta];\n        this.forwards = vec3.create();\n        this.right = vec3.create();\n        this.up = vec3.create();\n        console.log(this.up)\n    }\n\n    update() {\n        this.position[0] += -0.01;\n        // this.eulers[2] += 0.1;\n\n        this.forwards = [\n            Math.cos(Deg2Rad(this.eulers[2])) * Math.cos(Deg2Rad(this.eulers[1])),\n            Math.sin(Deg2Rad(this.eulers[2])) * Math.cos(Deg2Rad(this.eulers[1])),\n            Math.sin(Deg2Rad(this.eulers[1]))\n        ];\n\n        vec3.cross(this.right, this.forwards, [0,1,0]);\n\n        vec3.cross(this.up, this.right, this.forwards);\n\n        var target: vec3 = vec3.create();\n        vec3.add(target, this.position, this.forwards);\n\n        this.view = mat4.create();\n        mat4.lookAt(this.view, this.position, target, this.up);\n    }\n\n    get_view(): mat4 {\n        return this.view;\n    }\n}\n\n\nexport class Camera {\n    public solution: Solution;\n    public canvas: HTMLCanvasElement\n    public modelMatrix: mat4 // const\n    public mvpMatrix: mat4 // const\n\n    public vMatrix: mat4;\n    public vpMatrix: mat4;\n    public rotation = vec3.fromValues(0, 0, 0);\n    public translation = vec3.fromValues(0, 0, 0);\n    public camera: CameraTT;\n\n    public vp: any // const\n    constructor(solution: Solution) {\n        this.solution = solution;\n        this.canvas = solution.canvas;\n\n        this.modelMatrix = mat4.create();\n        this.mvpMatrix = mat4.create();\n        this.vMatrix = mat4.create();\n        this.vpMatrix = mat4.create();\n        this.vp = createViewProjection(this.canvas.width / this.canvas.height);\n        this.vpMatrix = this.vp.viewProjectionMatrix;\n\n        // add rotation and camera:\n        this.camera = new CameraTT([-5, 0, 0] as vec3, 1, 1);\n        // this.camera.mode = 'turntable' // https://github.com/mikolalysenko/3d-view-controls\n    }\n    public update() {\n        this.camera.update();\n\n        const pMatrix = this.vp.projectionMatrix;\n        this.vMatrix = this.camera.view;\n        mat4.multiply(this.vpMatrix, pMatrix, this.vMatrix);\n\n        createTransforms(this.modelMatrix, this.translation, this.rotation);\n        mat4.multiply(this.mvpMatrix, this.vpMatrix, this.modelMatrix);\n    }\n}","// import positionVert from './shaders/position.vert.wgsl?raw';\r\n// import colorFrag from './shaders/color.frag.wgsl';\r\nimport { vec3, mat4 } from 'gl-matrix';\r\n\r\nimport { CreateGPUBuffer, CreateGPUBufferUint } from './shaders/shaders';\r\n\r\nimport { createTransforms, createViewProjection } from '../Util';\r\n\r\nimport { CubeData, CubeData1 } from './shaders/cube';\r\n\r\nimport { getSphere } from './Geometry/Sphere'\r\nimport { getCylinder } from './Geometry/Cylinder';\r\nimport { getCone } from './Geometry/Cone';\r\nimport { getTorus } from './Geometry/Torus';\r\n\r\n// const createCamera = require('3d-view-controls');\r\n\r\nimport { Camera} from './camera';\r\n\r\nexport class Solution {\r\n    divHost: HTMLElement;\r\n    canvas: HTMLCanvasElement;\r\n    ctx: GPUCanvasContext;\r\n    device: GPUDevice;\r\n    format: GPUTextureFormat;\r\n    size: any;\r\n    pipeline: GPURenderPipeline;\r\n    isAnimation: boolean = true;\r\n\r\n    camera: Camera;\r\n\r\n    uniformBuffer: GPUBuffer\r\n    uniformBindGroup: GPUBindGroup\r\n    textureView: GPUTextureView\r\n    depthTexture: GPUTexture;\r\n    renderPassDescription: GPURenderPassDescriptor\r\n\r\n    numberOfVertices: number;\r\n    vertexBuffer: GPUBuffer;\r\n    colorBuffer: GPUBuffer;\r\n\r\n    rotation = vec3.fromValues(0, 0, 0);\r\n\r\n    // requestAnimationFrame = window.requestAnimationFrame;\r\n    // cancelAnimationFrame = window.cancelAnimationFrame;\r\n    requestAni: any;\r\n\r\n    constructor(id: string) {\r\n        this.divHost = document.getElementById(id);\r\n\r\n        //     console.log(id, 'webGPU', navigator.gpu);\r\n        this.canvas = document.createElement('canvas');\r\n        this.divHost.appendChild(this.canvas);\r\n\r\n        this.initWebGPU();\r\n    }\r\n    async initWebGPU() {\r\n        if (!navigator.gpu) { throw new Error('Not Support WebGPU'); }\r\n\r\n        const adapter = await navigator.gpu.requestAdapter({\r\n            powerPreference: 'high-performance'\r\n            // powerPreference: 'low-power'\r\n        })\r\n\r\n        if (!adapter) { throw new Error('No Adapter Found'); }\r\n\r\n        const device = await adapter.requestDevice()\r\n        this.ctx = this.canvas.getContext('webgpu') as GPUCanvasContext\r\n        // @ts-ignore\r\n        const format = navigator.gpu.getPreferredCanvasFormat ? navigator.gpu.getPreferredCanvasFormat() : this.ctx.getPreferredFormat(adapter)\r\n        const devicePixelRatio = window.devicePixelRatio || 1\r\n        this.canvas.width = this.divHost.clientWidth;\r\n        this.canvas.height = this.divHost.clientHeight;\r\n        this.ctx.configure({\r\n            // json specific format when key and value are the same\r\n            device, format,\r\n            // prevent chrome warning\r\n            alphaMode: 'opaque'\r\n        })\r\n\r\n        this.size = { width: this.canvas.width, height: this.canvas.height }\r\n        this.device = device;\r\n        this.format = format;\r\n\r\n        this.camera = new Camera(this);\r\n\r\n        this.initPipeline(this.device, this.format);\r\n    }\r\n\r\n    async initPipeline(device: GPUDevice, format: GPUTextureFormat, primitiveType = 'triangle-list') { // triangle-list , triangle-strip\r\n        // create vertex buffers\r\n        // const cubeData = CubeData0();\r\n        // this.numberOfVertices = cubeData.positions.length / 3;\r\n        // this.vertexBuffer = CreateGPUBuffer(device, cubeData.positions);\r\n        // this.colorBuffer = CreateGPUBuffer(device, cubeData.colors);\r\n\r\n        // const cubeData = CubeData1();\r\n\r\n        let geo = getTorus();\r\n        if (Math.random() > 0.8) {\r\n            geo = getSphere();\r\n        } else if (Math.random() < 0.2) {\r\n            geo = getCylinder();\r\n        } else if (Math.random() < 0.5) {\r\n            geo = getCone();\r\n        } \r\n\r\n        // console.log(geo)\r\n\r\n        this.vertexBuffer = CreateGPUBuffer(device, geo.vertex);\r\n        // this.colorBuffer = CreateGPUBufferUint(device, cubeData.indexData);\r\n\r\n        this.numberOfVertices = geo.vertex.length/3;\r\n        const shader = geo.shader;\r\n\r\n        this.pipeline = device.createRenderPipeline({\r\n            layout: 'auto',\r\n            vertex: {\r\n                module: device.createShaderModule({\r\n                    code: shader.vertex\r\n                }),\r\n                entryPoint: \"main\",\r\n                // @ts-ignore\r\n                buffers: [\r\n                    {\r\n                        arrayStride: 12,\r\n                        attributes: [{\r\n                            shaderLocation: 0,\r\n                            format: \"float32x3\",\r\n                            offset: 0\r\n                        }]\r\n                    }\r\n                //     {\r\n                //         arrayStride: 12,\r\n                //         attributes: [{\r\n                //             shaderLocation: 1,\r\n                //             format: \"float32x3\",\r\n                //             offset: 0\r\n                //         }]\r\n                //     }\r\n                ]\r\n                // buffers:[\r\n                //     {\r\n                //         arrayStride: 24,\r\n                //         attributes: [\r\n                //             {\r\n                //                 shaderLocation: 0,\r\n                //                 format: \"float32x3\",\r\n                //                 offset: 0\r\n                //             },\r\n                //             {\r\n                //                 shaderLocation: 1,\r\n                //                 format: \"float32x3\",\r\n                //                 offset: 12\r\n                //             }\r\n                //         ]\r\n                //     }\r\n                // ]\r\n            },\r\n            fragment: {\r\n                module: device.createShaderModule({\r\n                    code: shader.fragment\r\n                }),\r\n                entryPoint: \"main\",\r\n                targets: [\r\n                    {\r\n                        format: this.format as GPUTextureFormat\r\n                    }\r\n                ]\r\n            },\r\n            primitive: {\r\n                topology: \"line-list\",\r\n                // cullMode: 'back'\r\n            },\r\n            // depthStencil: {\r\n            //     format: \"depth24plus\",\r\n            //     depthWriteEnabled: true,\r\n            //     depthCompare: \"less\"\r\n            // }\r\n        });\r\n\r\n        // create uniform buffer and layout\r\n        this.uniformBuffer = device.createBuffer({\r\n            size: 64,\r\n            usage: GPUBufferUsage.UNIFORM | GPUBufferUsage.COPY_DST\r\n        });\r\n\r\n\r\n        this.uniformBindGroup = device.createBindGroup({\r\n            layout: this.pipeline.getBindGroupLayout(0),\r\n            entries: [{\r\n                binding: 0,\r\n                resource: {\r\n                    buffer: this.uniformBuffer,\r\n                    offset: 0,\r\n                    size: 64\r\n                }\r\n            }]\r\n        });\r\n\r\n        this.textureView = this.ctx.getCurrentTexture().createView();\r\n        // this.depthTexture = device.createTexture({\r\n        //     size: [this.canvas.width, this.canvas.height, 1],\r\n        //     format: \"depth24plus\",\r\n        //     usage: GPUTextureUsage.RENDER_ATTACHMENT\r\n        // });\r\n        this.renderPassDescription = {\r\n            //@ts-ignore\r\n            colorAttachments: [{\r\n                view: this.textureView,\r\n                clearValue: { r: 0.0, g: 0.0, b: 0.0, a: 1.0 }, //background color\r\n                loadOp: 'clear',\r\n                storeOp: 'store'\r\n                //@ts-ignore\r\n                // loadValue: { r: 0.0, g: 0.0, b: 0.0, a: 1.0 },\r\n            }],\r\n            // depthStencilAttachment: {\r\n            //     view: this.depthTexture.createView(),\r\n            //     depthClearValue: 1.0,\r\n            //     depthLoadOp: 'clear',\r\n            //     depthStoreOp: \"store\",\r\n            //     //stencilClearValue: 0,\r\n            //     //stencilLoadOp: 'clear',\r\n            //     //stencilStoreOp: \"store\"\r\n            // }\r\n        };\r\n\r\n        this.requestAni = requestAnimationFrame(this.loop);\r\n    }\r\n    public loop = () => {\r\n        // console.log(this.rotation);\r\n\r\n        if (this.isAnimation) {\r\n            this.rotation[0] += 0.01;\r\n            this.rotation[1] += 0.01;\r\n            this.rotation[2] += 0.01;\r\n        } else {\r\n            this.rotation = [0, 0, 0];\r\n        }\r\n\r\n        this.drawing();\r\n        if (this.isAnimation) {\r\n            this.requestAni = requestAnimationFrame(this.loop);\r\n        }\r\n\r\n    }\r\n    public drawing() {\r\n        this.camera.update();\r\n\r\n        this.device.queue.writeBuffer(this.uniformBuffer, 0, this.camera.mvpMatrix as ArrayBuffer);\r\n        this.textureView = this.ctx.getCurrentTexture().createView();\r\n        this.renderPassDescription.colorAttachments[0].view = this.textureView;\r\n        const commandEncoder = this.device.createCommandEncoder();\r\n        const renderPass = commandEncoder.beginRenderPass(this.renderPassDescription as GPURenderPassDescriptor);\r\n\r\n        renderPass.setPipeline(this.pipeline);\r\n        renderPass.setVertexBuffer(0, this.vertexBuffer);\r\n        renderPass.setBindGroup(0, this.uniformBindGroup);\r\n        // renderPass.setIndexBuffer(this.colorBuffer, 'uint32');\r\n        // renderPass.setVertexBuffer(1, this.colorBuffer);\r\n        // renderPass.drawIndexed(this.numberOfVertices);\r\n        renderPass.draw(this.numberOfVertices);\r\n        renderPass.end();\r\n\r\n        this.device.queue.submit([commandEncoder.finish()]);\r\n    }\r\n    public destroy() {\r\n        this.device.destroy();\r\n        // this.isAnimation = false;\r\n        cancelAnimationFrame(this.requestAni);\r\n        // this.requestAni = undefined;\r\n        while (this.divHost.lastElementChild) {\r\n            this.divHost.removeChild(this.divHost.lastElementChild);\r\n        }\r\n    }\r\n}\r\n\r\n","import * as glMatrix from \"./common.js\";\n/**\n * 3 Dimensional Vector\n * @module vec3\n */\n\n/**\n * Creates a new, empty vec3\n *\n * @returns {vec3} a new 3D vector\n */\n\nexport function create() {\n  var out = new glMatrix.ARRAY_TYPE(3);\n\n  if (glMatrix.ARRAY_TYPE != Float32Array) {\n    out[0] = 0;\n    out[1] = 0;\n    out[2] = 0;\n  }\n\n  return out;\n}\n/**\n * Creates a new vec3 initialized with values from an existing vector\n *\n * @param {ReadonlyVec3} a vector to clone\n * @returns {vec3} a new 3D vector\n */\n\nexport function clone(a) {\n  var out = new glMatrix.ARRAY_TYPE(3);\n  out[0] = a[0];\n  out[1] = a[1];\n  out[2] = a[2];\n  return out;\n}\n/**\n * Calculates the length of a vec3\n *\n * @param {ReadonlyVec3} a vector to calculate length of\n * @returns {Number} length of a\n */\n\nexport function length(a) {\n  var x = a[0];\n  var y = a[1];\n  var z = a[2];\n  return Math.hypot(x, y, z);\n}\n/**\n * Creates a new vec3 initialized with the given values\n *\n * @param {Number} x X component\n * @param {Number} y Y component\n * @param {Number} z Z component\n * @returns {vec3} a new 3D vector\n */\n\nexport function fromValues(x, y, z) {\n  var out = new glMatrix.ARRAY_TYPE(3);\n  out[0] = x;\n  out[1] = y;\n  out[2] = z;\n  return out;\n}\n/**\n * Copy the values from one vec3 to another\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a the source vector\n * @returns {vec3} out\n */\n\nexport function copy(out, a) {\n  out[0] = a[0];\n  out[1] = a[1];\n  out[2] = a[2];\n  return out;\n}\n/**\n * Set the components of a vec3 to the given values\n *\n * @param {vec3} out the receiving vector\n * @param {Number} x X component\n * @param {Number} y Y component\n * @param {Number} z Z component\n * @returns {vec3} out\n */\n\nexport function set(out, x, y, z) {\n  out[0] = x;\n  out[1] = y;\n  out[2] = z;\n  return out;\n}\n/**\n * Adds two vec3's\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a the first operand\n * @param {ReadonlyVec3} b the second operand\n * @returns {vec3} out\n */\n\nexport function add(out, a, b) {\n  out[0] = a[0] + b[0];\n  out[1] = a[1] + b[1];\n  out[2] = a[2] + b[2];\n  return out;\n}\n/**\n * Subtracts vector b from vector a\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a the first operand\n * @param {ReadonlyVec3} b the second operand\n * @returns {vec3} out\n */\n\nexport function subtract(out, a, b) {\n  out[0] = a[0] - b[0];\n  out[1] = a[1] - b[1];\n  out[2] = a[2] - b[2];\n  return out;\n}\n/**\n * Multiplies two vec3's\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a the first operand\n * @param {ReadonlyVec3} b the second operand\n * @returns {vec3} out\n */\n\nexport function multiply(out, a, b) {\n  out[0] = a[0] * b[0];\n  out[1] = a[1] * b[1];\n  out[2] = a[2] * b[2];\n  return out;\n}\n/**\n * Divides two vec3's\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a the first operand\n * @param {ReadonlyVec3} b the second operand\n * @returns {vec3} out\n */\n\nexport function divide(out, a, b) {\n  out[0] = a[0] / b[0];\n  out[1] = a[1] / b[1];\n  out[2] = a[2] / b[2];\n  return out;\n}\n/**\n * Math.ceil the components of a vec3\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a vector to ceil\n * @returns {vec3} out\n */\n\nexport function ceil(out, a) {\n  out[0] = Math.ceil(a[0]);\n  out[1] = Math.ceil(a[1]);\n  out[2] = Math.ceil(a[2]);\n  return out;\n}\n/**\n * Math.floor the components of a vec3\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a vector to floor\n * @returns {vec3} out\n */\n\nexport function floor(out, a) {\n  out[0] = Math.floor(a[0]);\n  out[1] = Math.floor(a[1]);\n  out[2] = Math.floor(a[2]);\n  return out;\n}\n/**\n * Returns the minimum of two vec3's\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a the first operand\n * @param {ReadonlyVec3} b the second operand\n * @returns {vec3} out\n */\n\nexport function min(out, a, b) {\n  out[0] = Math.min(a[0], b[0]);\n  out[1] = Math.min(a[1], b[1]);\n  out[2] = Math.min(a[2], b[2]);\n  return out;\n}\n/**\n * Returns the maximum of two vec3's\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a the first operand\n * @param {ReadonlyVec3} b the second operand\n * @returns {vec3} out\n */\n\nexport function max(out, a, b) {\n  out[0] = Math.max(a[0], b[0]);\n  out[1] = Math.max(a[1], b[1]);\n  out[2] = Math.max(a[2], b[2]);\n  return out;\n}\n/**\n * Math.round the components of a vec3\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a vector to round\n * @returns {vec3} out\n */\n\nexport function round(out, a) {\n  out[0] = Math.round(a[0]);\n  out[1] = Math.round(a[1]);\n  out[2] = Math.round(a[2]);\n  return out;\n}\n/**\n * Scales a vec3 by a scalar number\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a the vector to scale\n * @param {Number} b amount to scale the vector by\n * @returns {vec3} out\n */\n\nexport function scale(out, a, b) {\n  out[0] = a[0] * b;\n  out[1] = a[1] * b;\n  out[2] = a[2] * b;\n  return out;\n}\n/**\n * Adds two vec3's after scaling the second operand by a scalar value\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a the first operand\n * @param {ReadonlyVec3} b the second operand\n * @param {Number} scale the amount to scale b by before adding\n * @returns {vec3} out\n */\n\nexport function scaleAndAdd(out, a, b, scale) {\n  out[0] = a[0] + b[0] * scale;\n  out[1] = a[1] + b[1] * scale;\n  out[2] = a[2] + b[2] * scale;\n  return out;\n}\n/**\n * Calculates the euclidian distance between two vec3's\n *\n * @param {ReadonlyVec3} a the first operand\n * @param {ReadonlyVec3} b the second operand\n * @returns {Number} distance between a and b\n */\n\nexport function distance(a, b) {\n  var x = b[0] - a[0];\n  var y = b[1] - a[1];\n  var z = b[2] - a[2];\n  return Math.hypot(x, y, z);\n}\n/**\n * Calculates the squared euclidian distance between two vec3's\n *\n * @param {ReadonlyVec3} a the first operand\n * @param {ReadonlyVec3} b the second operand\n * @returns {Number} squared distance between a and b\n */\n\nexport function squaredDistance(a, b) {\n  var x = b[0] - a[0];\n  var y = b[1] - a[1];\n  var z = b[2] - a[2];\n  return x * x + y * y + z * z;\n}\n/**\n * Calculates the squared length of a vec3\n *\n * @param {ReadonlyVec3} a vector to calculate squared length of\n * @returns {Number} squared length of a\n */\n\nexport function squaredLength(a) {\n  var x = a[0];\n  var y = a[1];\n  var z = a[2];\n  return x * x + y * y + z * z;\n}\n/**\n * Negates the components of a vec3\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a vector to negate\n * @returns {vec3} out\n */\n\nexport function negate(out, a) {\n  out[0] = -a[0];\n  out[1] = -a[1];\n  out[2] = -a[2];\n  return out;\n}\n/**\n * Returns the inverse of the components of a vec3\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a vector to invert\n * @returns {vec3} out\n */\n\nexport function inverse(out, a) {\n  out[0] = 1.0 / a[0];\n  out[1] = 1.0 / a[1];\n  out[2] = 1.0 / a[2];\n  return out;\n}\n/**\n * Normalize a vec3\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a vector to normalize\n * @returns {vec3} out\n */\n\nexport function normalize(out, a) {\n  var x = a[0];\n  var y = a[1];\n  var z = a[2];\n  var len = x * x + y * y + z * z;\n\n  if (len > 0) {\n    //TODO: evaluate use of glm_invsqrt here?\n    len = 1 / Math.sqrt(len);\n  }\n\n  out[0] = a[0] * len;\n  out[1] = a[1] * len;\n  out[2] = a[2] * len;\n  return out;\n}\n/**\n * Calculates the dot product of two vec3's\n *\n * @param {ReadonlyVec3} a the first operand\n * @param {ReadonlyVec3} b the second operand\n * @returns {Number} dot product of a and b\n */\n\nexport function dot(a, b) {\n  return a[0] * b[0] + a[1] * b[1] + a[2] * b[2];\n}\n/**\n * Computes the cross product of two vec3's\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a the first operand\n * @param {ReadonlyVec3} b the second operand\n * @returns {vec3} out\n */\n\nexport function cross(out, a, b) {\n  var ax = a[0],\n      ay = a[1],\n      az = a[2];\n  var bx = b[0],\n      by = b[1],\n      bz = b[2];\n  out[0] = ay * bz - az * by;\n  out[1] = az * bx - ax * bz;\n  out[2] = ax * by - ay * bx;\n  return out;\n}\n/**\n * Performs a linear interpolation between two vec3's\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a the first operand\n * @param {ReadonlyVec3} b the second operand\n * @param {Number} t interpolation amount, in the range [0-1], between the two inputs\n * @returns {vec3} out\n */\n\nexport function lerp(out, a, b, t) {\n  var ax = a[0];\n  var ay = a[1];\n  var az = a[2];\n  out[0] = ax + t * (b[0] - ax);\n  out[1] = ay + t * (b[1] - ay);\n  out[2] = az + t * (b[2] - az);\n  return out;\n}\n/**\n * Performs a hermite interpolation with two control points\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a the first operand\n * @param {ReadonlyVec3} b the second operand\n * @param {ReadonlyVec3} c the third operand\n * @param {ReadonlyVec3} d the fourth operand\n * @param {Number} t interpolation amount, in the range [0-1], between the two inputs\n * @returns {vec3} out\n */\n\nexport function hermite(out, a, b, c, d, t) {\n  var factorTimes2 = t * t;\n  var factor1 = factorTimes2 * (2 * t - 3) + 1;\n  var factor2 = factorTimes2 * (t - 2) + t;\n  var factor3 = factorTimes2 * (t - 1);\n  var factor4 = factorTimes2 * (3 - 2 * t);\n  out[0] = a[0] * factor1 + b[0] * factor2 + c[0] * factor3 + d[0] * factor4;\n  out[1] = a[1] * factor1 + b[1] * factor2 + c[1] * factor3 + d[1] * factor4;\n  out[2] = a[2] * factor1 + b[2] * factor2 + c[2] * factor3 + d[2] * factor4;\n  return out;\n}\n/**\n * Performs a bezier interpolation with two control points\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a the first operand\n * @param {ReadonlyVec3} b the second operand\n * @param {ReadonlyVec3} c the third operand\n * @param {ReadonlyVec3} d the fourth operand\n * @param {Number} t interpolation amount, in the range [0-1], between the two inputs\n * @returns {vec3} out\n */\n\nexport function bezier(out, a, b, c, d, t) {\n  var inverseFactor = 1 - t;\n  var inverseFactorTimesTwo = inverseFactor * inverseFactor;\n  var factorTimes2 = t * t;\n  var factor1 = inverseFactorTimesTwo * inverseFactor;\n  var factor2 = 3 * t * inverseFactorTimesTwo;\n  var factor3 = 3 * factorTimes2 * inverseFactor;\n  var factor4 = factorTimes2 * t;\n  out[0] = a[0] * factor1 + b[0] * factor2 + c[0] * factor3 + d[0] * factor4;\n  out[1] = a[1] * factor1 + b[1] * factor2 + c[1] * factor3 + d[1] * factor4;\n  out[2] = a[2] * factor1 + b[2] * factor2 + c[2] * factor3 + d[2] * factor4;\n  return out;\n}\n/**\n * Generates a random vector with the given scale\n *\n * @param {vec3} out the receiving vector\n * @param {Number} [scale] Length of the resulting vector. If ommitted, a unit vector will be returned\n * @returns {vec3} out\n */\n\nexport function random(out, scale) {\n  scale = scale || 1.0;\n  var r = glMatrix.RANDOM() * 2.0 * Math.PI;\n  var z = glMatrix.RANDOM() * 2.0 - 1.0;\n  var zScale = Math.sqrt(1.0 - z * z) * scale;\n  out[0] = Math.cos(r) * zScale;\n  out[1] = Math.sin(r) * zScale;\n  out[2] = z * scale;\n  return out;\n}\n/**\n * Transforms the vec3 with a mat4.\n * 4th vector component is implicitly '1'\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a the vector to transform\n * @param {ReadonlyMat4} m matrix to transform with\n * @returns {vec3} out\n */\n\nexport function transformMat4(out, a, m) {\n  var x = a[0],\n      y = a[1],\n      z = a[2];\n  var w = m[3] * x + m[7] * y + m[11] * z + m[15];\n  w = w || 1.0;\n  out[0] = (m[0] * x + m[4] * y + m[8] * z + m[12]) / w;\n  out[1] = (m[1] * x + m[5] * y + m[9] * z + m[13]) / w;\n  out[2] = (m[2] * x + m[6] * y + m[10] * z + m[14]) / w;\n  return out;\n}\n/**\n * Transforms the vec3 with a mat3.\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a the vector to transform\n * @param {ReadonlyMat3} m the 3x3 matrix to transform with\n * @returns {vec3} out\n */\n\nexport function transformMat3(out, a, m) {\n  var x = a[0],\n      y = a[1],\n      z = a[2];\n  out[0] = x * m[0] + y * m[3] + z * m[6];\n  out[1] = x * m[1] + y * m[4] + z * m[7];\n  out[2] = x * m[2] + y * m[5] + z * m[8];\n  return out;\n}\n/**\n * Transforms the vec3 with a quat\n * Can also be used for dual quaternions. (Multiply it with the real part)\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a the vector to transform\n * @param {ReadonlyQuat} q quaternion to transform with\n * @returns {vec3} out\n */\n\nexport function transformQuat(out, a, q) {\n  // benchmarks: https://jsperf.com/quaternion-transform-vec3-implementations-fixed\n  var qx = q[0],\n      qy = q[1],\n      qz = q[2],\n      qw = q[3];\n  var x = a[0],\n      y = a[1],\n      z = a[2]; // var qvec = [qx, qy, qz];\n  // var uv = vec3.cross([], qvec, a);\n\n  var uvx = qy * z - qz * y,\n      uvy = qz * x - qx * z,\n      uvz = qx * y - qy * x; // var uuv = vec3.cross([], qvec, uv);\n\n  var uuvx = qy * uvz - qz * uvy,\n      uuvy = qz * uvx - qx * uvz,\n      uuvz = qx * uvy - qy * uvx; // vec3.scale(uv, uv, 2 * w);\n\n  var w2 = qw * 2;\n  uvx *= w2;\n  uvy *= w2;\n  uvz *= w2; // vec3.scale(uuv, uuv, 2);\n\n  uuvx *= 2;\n  uuvy *= 2;\n  uuvz *= 2; // return vec3.add(out, a, vec3.add(out, uv, uuv));\n\n  out[0] = x + uvx + uuvx;\n  out[1] = y + uvy + uuvy;\n  out[2] = z + uvz + uuvz;\n  return out;\n}\n/**\n * Rotate a 3D vector around the x-axis\n * @param {vec3} out The receiving vec3\n * @param {ReadonlyVec3} a The vec3 point to rotate\n * @param {ReadonlyVec3} b The origin of the rotation\n * @param {Number} rad The angle of rotation in radians\n * @returns {vec3} out\n */\n\nexport function rotateX(out, a, b, rad) {\n  var p = [],\n      r = []; //Translate point to the origin\n\n  p[0] = a[0] - b[0];\n  p[1] = a[1] - b[1];\n  p[2] = a[2] - b[2]; //perform rotation\n\n  r[0] = p[0];\n  r[1] = p[1] * Math.cos(rad) - p[2] * Math.sin(rad);\n  r[2] = p[1] * Math.sin(rad) + p[2] * Math.cos(rad); //translate to correct position\n\n  out[0] = r[0] + b[0];\n  out[1] = r[1] + b[1];\n  out[2] = r[2] + b[2];\n  return out;\n}\n/**\n * Rotate a 3D vector around the y-axis\n * @param {vec3} out The receiving vec3\n * @param {ReadonlyVec3} a The vec3 point to rotate\n * @param {ReadonlyVec3} b The origin of the rotation\n * @param {Number} rad The angle of rotation in radians\n * @returns {vec3} out\n */\n\nexport function rotateY(out, a, b, rad) {\n  var p = [],\n      r = []; //Translate point to the origin\n\n  p[0] = a[0] - b[0];\n  p[1] = a[1] - b[1];\n  p[2] = a[2] - b[2]; //perform rotation\n\n  r[0] = p[2] * Math.sin(rad) + p[0] * Math.cos(rad);\n  r[1] = p[1];\n  r[2] = p[2] * Math.cos(rad) - p[0] * Math.sin(rad); //translate to correct position\n\n  out[0] = r[0] + b[0];\n  out[1] = r[1] + b[1];\n  out[2] = r[2] + b[2];\n  return out;\n}\n/**\n * Rotate a 3D vector around the z-axis\n * @param {vec3} out The receiving vec3\n * @param {ReadonlyVec3} a The vec3 point to rotate\n * @param {ReadonlyVec3} b The origin of the rotation\n * @param {Number} rad The angle of rotation in radians\n * @returns {vec3} out\n */\n\nexport function rotateZ(out, a, b, rad) {\n  var p = [],\n      r = []; //Translate point to the origin\n\n  p[0] = a[0] - b[0];\n  p[1] = a[1] - b[1];\n  p[2] = a[2] - b[2]; //perform rotation\n\n  r[0] = p[0] * Math.cos(rad) - p[1] * Math.sin(rad);\n  r[1] = p[0] * Math.sin(rad) + p[1] * Math.cos(rad);\n  r[2] = p[2]; //translate to correct position\n\n  out[0] = r[0] + b[0];\n  out[1] = r[1] + b[1];\n  out[2] = r[2] + b[2];\n  return out;\n}\n/**\n * Get the angle between two 3D vectors\n * @param {ReadonlyVec3} a The first operand\n * @param {ReadonlyVec3} b The second operand\n * @returns {Number} The angle in radians\n */\n\nexport function angle(a, b) {\n  var ax = a[0],\n      ay = a[1],\n      az = a[2],\n      bx = b[0],\n      by = b[1],\n      bz = b[2],\n      mag1 = Math.sqrt(ax * ax + ay * ay + az * az),\n      mag2 = Math.sqrt(bx * bx + by * by + bz * bz),\n      mag = mag1 * mag2,\n      cosine = mag && dot(a, b) / mag;\n  return Math.acos(Math.min(Math.max(cosine, -1), 1));\n}\n/**\n * Set the components of a vec3 to zero\n *\n * @param {vec3} out the receiving vector\n * @returns {vec3} out\n */\n\nexport function zero(out) {\n  out[0] = 0.0;\n  out[1] = 0.0;\n  out[2] = 0.0;\n  return out;\n}\n/**\n * Returns a string representation of a vector\n *\n * @param {ReadonlyVec3} a vector to represent as a string\n * @returns {String} string representation of the vector\n */\n\nexport function str(a) {\n  return \"vec3(\" + a[0] + \", \" + a[1] + \", \" + a[2] + \")\";\n}\n/**\n * Returns whether or not the vectors have exactly the same elements in the same position (when compared with ===)\n *\n * @param {ReadonlyVec3} a The first vector.\n * @param {ReadonlyVec3} b The second vector.\n * @returns {Boolean} True if the vectors are equal, false otherwise.\n */\n\nexport function exactEquals(a, b) {\n  return a[0] === b[0] && a[1] === b[1] && a[2] === b[2];\n}\n/**\n * Returns whether or not the vectors have approximately the same elements in the same position.\n *\n * @param {ReadonlyVec3} a The first vector.\n * @param {ReadonlyVec3} b The second vector.\n * @returns {Boolean} True if the vectors are equal, false otherwise.\n */\n\nexport function equals(a, b) {\n  var a0 = a[0],\n      a1 = a[1],\n      a2 = a[2];\n  var b0 = b[0],\n      b1 = b[1],\n      b2 = b[2];\n  return Math.abs(a0 - b0) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a0), Math.abs(b0)) && Math.abs(a1 - b1) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a1), Math.abs(b1)) && Math.abs(a2 - b2) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a2), Math.abs(b2));\n}\n/**\n * Alias for {@link vec3.subtract}\n * @function\n */\n\nexport var sub = subtract;\n/**\n * Alias for {@link vec3.multiply}\n * @function\n */\n\nexport var mul = multiply;\n/**\n * Alias for {@link vec3.divide}\n * @function\n */\n\nexport var div = divide;\n/**\n * Alias for {@link vec3.distance}\n * @function\n */\n\nexport var dist = distance;\n/**\n * Alias for {@link vec3.squaredDistance}\n * @function\n */\n\nexport var sqrDist = squaredDistance;\n/**\n * Alias for {@link vec3.length}\n * @function\n */\n\nexport var len = length;\n/**\n * Alias for {@link vec3.squaredLength}\n * @function\n */\n\nexport var sqrLen = squaredLength;\n/**\n * Perform some operation over an array of vec3s.\n *\n * @param {Array} a the array of vectors to iterate over\n * @param {Number} stride Number of elements between the start of each vec3. If 0 assumes tightly packed\n * @param {Number} offset Number of elements to skip at the beginning of the array\n * @param {Number} count Number of vec3s to iterate over. If 0 iterates over entire array\n * @param {Function} fn Function to call for each vector in the array\n * @param {Object} [arg] additional argument to pass to fn\n * @returns {Array} a\n * @function\n */\n\nexport var forEach = function () {\n  var vec = create();\n  return function (a, stride, offset, count, fn, arg) {\n    var i, l;\n\n    if (!stride) {\n      stride = 3;\n    }\n\n    if (!offset) {\n      offset = 0;\n    }\n\n    if (count) {\n      l = Math.min(count * stride + offset, a.length);\n    } else {\n      l = a.length;\n    }\n\n    for (i = offset; i < l; i += stride) {\n      vec[0] = a[i];\n      vec[1] = a[i + 1];\n      vec[2] = a[i + 2];\n      fn(vec, vec, arg);\n      a[i] = vec[0];\n      a[i + 1] = vec[1];\n      a[i + 2] = vec[2];\n    }\n\n    return a;\n  };\n}();"],"names":["createTransforms","modelMat","translation","rotation","scaling","rotateXMat","mat4","rotateYMat","rotateZMat","translateMat","scaleMat","createViewProjection","respectRatio","cameraPosition","lookDirection","upDirection","viewMatrix","projectionMatrix","viewProjectionMatrix","Math","PI","cameraOption","eye","center","zoomMax","zoomSpeed","SpherePosition","radius","theta","phi","snt","sin","cnt","cos","snp","cnp","vec3","SphereWireframeData","u","v","pt","pts","i","pt1","j","push","p0","p1","p3","p","Float32Array","flat","CylinderWireframeData","rin","rout","height","n","h","CylinderPosition","p2","p4","p5","p6","p7","y","sn","cn","ConeWireframeData","rtop","rbottom","ConePosition","TorusWireframeData","R","r","N","TorusPosition","pp","snu","cnu","snv","cnv","Deg2Rad","CameraTT","constructor","position","eulers","view","forwards","right","up","this","console","log","update","target","get_view","Camera","solution","canvas","modelMatrix","mvpMatrix","vMatrix","vpMatrix","camera","vp","width","pMatrix","Solution","id","divHost","ctx","device","format","size","pipeline","isAnimation","uniformBuffer","uniformBindGroup","textureView","depthTexture","renderPassDescription","numberOfVertices","vertexBuffer","colorBuffer","requestAni","loop","drawing","requestAnimationFrame","document","getElementById","createElement","appendChild","initWebGPU","async","navigator","gpu","Error","adapter","requestAdapter","powerPreference","requestDevice","getContext","getPreferredCanvasFormat","getPreferredFormat","window","devicePixelRatio","clientWidth","clientHeight","configure","alphaMode","initPipeline","geo","shader","vertex","fragment","random","data","usageFlag","GPUBufferUsage","VERTEX","COPY_DST","buffer","createBuffer","byteLength","usage","mappedAtCreation","getMappedRange","set","unmap","CreateGPUBuffer","length","createRenderPipeline","layout","module","createShaderModule","code","entryPoint","buffers","arrayStride","attributes","shaderLocation","offset","targets","primitive","topology","UNIFORM","createBindGroup","getBindGroupLayout","entries","binding","resource","getCurrentTexture","createView","colorAttachments","clearValue","g","b","a","loadOp","storeOp","queue","writeBuffer","commandEncoder","createCommandEncoder","renderPass","beginRenderPass","setPipeline","setVertexBuffer","setBindGroup","draw","end","submit","finish","destroy","cancelAnimationFrame","lastElementChild","removeChild","create","out","glMatrix","fromValues","x","z","add","subtract","scaleAndAdd","scale","negate","normalize","len","sqrt","cross","ax","ay","az","bx","by","bz","transformMat4","m","w","transformMat3","transformQuat","q","qx","qy","qz","qw","uvx","uvy","uvz","uuvx","uuvy","uuvz","w2","rotateX","rad","rotateY","rotateZ","angle","mag","cosine","dot","acos","min","max","sub","vec"],"sourceRoot":""}