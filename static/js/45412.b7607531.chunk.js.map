{"version":3,"file":"static/js/45412.b7607531.chunk.js","mappings":"6JAIO,MAAMA,UAAiBC,EAAAA,GAI1BC,cACIC,MADkB,uDAAG,QACZ,KAHbC,gBAAU,EAIN,MAAMC,EAAQC,KAAKD,MAEnBC,KAAKC,OAAOC,SAASC,IAAI,EAAG,GAAI,IAEhC,MAAMC,EAAe,IAAIC,EAAAA,IAAmB,SAAU,KACtDL,KAAKD,MAAMO,IAAIF,GAEfJ,KAAKF,WAAa,IAAIO,EAAAA,IAAiB,SAAU,KACjDL,KAAKF,WAAWI,SAASK,EAAI,GAC7BP,KAAKF,WAAWI,SAASM,EAAI,GAC7BR,KAAKF,WAAWW,YAAa,EAC7BT,KAAKD,MAAMO,IAAIN,KAAKF,YAEpB,MAAMY,EAAW,GACjB,IAAK,IAAIC,EAAI,EAAGA,EAAI,IAAKA,IAAO,CAC5B,MAAMJ,EAA4B,IAAvBK,KAAKC,SAAW,IACrBL,EAA4B,IAAvBI,KAAKC,SAAW,IACrBC,EAA4B,IAAvBF,KAAKC,SAAW,IAC3BH,EAASK,KAAMR,EAAGC,EAAGM,EACzB,CAEA,MAAME,EAAW,IAAIX,EAAAA,IACrBW,EAASC,aAAc,WAAY,IAAIZ,EAAAA,IAA8BK,EAAU,IAC/E,MAAMQ,EAAW,IAAIb,EAAAA,IAAsB,CAAEc,MAAO,QAC9CC,EAAS,IAAIf,EAAAA,IAAcW,EAAUE,GAC3CnB,EAAMO,IAAKc,GAGXpB,KAAKqB,OACT,CACOC,OAAOvB,GACV,IAAIwB,EAAS,IAAIlB,EAAAA,IACjBkB,EAAOC,cAAwB,KAAVZ,KAAKa,IAC1BzB,KAAKF,WAAWI,SAASwB,aAAaH,EAC1C,E","sources":["njslab/Workshop/workshop-three/LAB_Web_03_Point/index.ts"],"sourcesContent":["import * as THREE from 'three';\r\nimport { RendererThree, getCSVFromURL } from '../../../../lib';\r\n\r\n\r\nexport class Solution extends RendererThree {\r\n\r\n    pointLight: THREE.PointLight\r\n\r\n    constructor(id: string = 'main') {\r\n        super(id)\r\n        const scene = this.scene;\r\n\r\n        this.camera.position.set(0, 50, 50);\r\n\r\n        const ambientLight = new THREE.AmbientLight(0xcccccc, 0.25);\r\n        this.scene.add(ambientLight);\r\n\r\n        this.pointLight = new THREE.PointLight(0xffffff, 0.75);\r\n        this.pointLight.position.x = 10;\r\n        this.pointLight.position.y = 10;\r\n        this.pointLight.castShadow = true;\r\n        this.scene.add(this.pointLight);\r\n\r\n        const vertices = [];\r\n        for( let i = 0; i < 100; i ++ ) {\r\n            const x = (Math.random() - 0.5) * 15;\r\n            const y = (Math.random() - 0.5) * 15;\r\n            const z = (Math.random() - 0.5) * 15;\r\n            vertices.push( x, y, z );\r\n        }\r\n        \r\n        const geometry = new THREE.BufferGeometry();\r\n        geometry.setAttribute( 'position', new THREE.Float32BufferAttribute( vertices, 3 ) );\r\n        const material = new THREE.PointsMaterial( { color: 0x00fff0 } );\r\n        const points = new THREE.Points( geometry, material );\r\n        scene.add( points );\r\n\r\n\r\n        this.start();\r\n    }\r\n    public update(scene: THREE.Scene) {\r\n        let matrix = new THREE.Matrix4();\r\n        matrix.makeRotationY(Math.PI * 0.011);\r\n        this.pointLight.position.applyMatrix4(matrix);\r\n    }\r\n}\r\n"],"names":["Solution","RendererThree","constructor","super","pointLight","scene","this","camera","position","set","ambientLight","THREE","add","x","y","castShadow","vertices","i","Math","random","z","push","geometry","setAttribute","material","color","points","start","update","matrix","makeRotationY","PI","applyMatrix4"],"sourceRoot":""}