{"version":3,"file":"static/js/83311.cef57a8d.chunk.js","mappings":"6JAIO,MAAMA,UAAiBC,EAAAA,GAI1BC,cACIC,MADkB,uDAAG,QACZ,KAHbC,gBAAU,EAIN,MAAMC,EAAQC,KAAKD,MACnBC,KAAKC,OAAOC,SAASC,IAAI,EAAG,EAAG,GAE/B,MAAMC,EAAe,IAAIC,EAAAA,IAAmB,SAAU,KACtDL,KAAKD,MAAMO,IAAIF,GAEfJ,KAAKF,WAAa,IAAIO,EAAAA,IAAiB,SAAU,KACjDL,KAAKF,WAAWI,SAASK,EAAI,GAC7BP,KAAKD,MAAMO,IAAIN,KAAKF,YAGpB,MAAMU,EAAY,IAAIH,EAAAA,IAAsB,SAAU,SAAU,KAChEG,EAAUC,MAAMC,OAAO,GAAK,EAAG,IAC/BF,EAAUG,YAAYD,OAAO,KAAO,EAAG,KACvCF,EAAUN,SAASC,IAAI,EAAG,GAAI,GAC9BJ,EAAMO,IAAIE,GAEV,MAAMI,EAAW,IAAIP,EAAAA,IAAuB,SAAU,IACtDO,EAASH,MAAMC,OAAO,EAAG,EAAG,GAC5BE,EAASV,SAASC,KAAM,EAAG,KAAM,GACjCS,EAASV,SAASW,eAAe,IACjCD,EAASE,YAAa,EAGtBF,EAASG,OAAOd,OAAOe,MADX,GAEZJ,EAASG,OAAOd,OAAOgB,MAFX,GAGZL,EAASG,OAAOd,OAAOiB,IAHX,GAIZN,EAASG,OAAOd,OAAOkB,QAJX,GAMZP,EAASG,OAAOd,OAAOmB,IAAM,IAC7BR,EAASG,OAAOM,MAAS,KACzBT,EAASG,OAAOO,QAAQC,MAAQ,KAChCX,EAASG,OAAOO,QAAQE,OAAS,KACjCzB,EAAMO,IAAIM,EAed,CAEOa,OAAO1B,GACV,IAAI2B,EAAS,IAAIrB,EAAAA,IACjBqB,EAAOC,cAAwB,KAAVC,KAAKC,IAC1B7B,KAAKF,WAAWI,SAAS4B,aAAaJ,EAC1C,E","sources":["njslab/Workshop/workshop-three/LAB_Web_12_Bunny/index.ts"],"sourcesContent":["import * as THREE from 'three';\r\nimport { RendererThree, getCSVFromURL } from '../../../../lib';\r\n\r\n\r\nexport class Solution extends RendererThree {\r\n\r\n    pointLight: THREE.PointLight\r\n\r\n    constructor(id: string = 'main') {\r\n        super(id)\r\n        const scene = this.scene;\r\n        this.camera.position.set(0, 9, 9);\r\n\r\n        const ambientLight = new THREE.AmbientLight(0xcccccc, 0.55);\r\n        this.scene.add(ambientLight);\r\n\r\n        this.pointLight = new THREE.PointLight(0xffffff, 0.75);\r\n        this.pointLight.position.x = 10;\r\n        this.scene.add(this.pointLight);\r\n\r\n\r\n        const hemiLight = new THREE.HemisphereLight(0xffffff, 0xffffff, 0.55);\r\n        hemiLight.color.setHSL(0.6, 1, 0.6);\r\n        hemiLight.groundColor.setHSL(0.095, 1, 0.75);\r\n        hemiLight.position.set(0, 50, 0);\r\n        scene.add(hemiLight);\r\n\r\n        const dirLight = new THREE.DirectionalLight(0xffffff, 0.8);\r\n        dirLight.color.setHSL(1, 1, 1);\r\n        dirLight.position.set(- 1, 1.75, 1);\r\n        dirLight.position.multiplyScalar(30);\r\n        dirLight.castShadow = true;\r\n\r\n        const val = 10; // for quality of the shawdow in the scene\r\n        dirLight.shadow.camera.left = - val;\r\n        dirLight.shadow.camera.right = val;\r\n        dirLight.shadow.camera.top = val;\r\n        dirLight.shadow.camera.bottom = - val;\r\n\r\n        dirLight.shadow.camera.far = 100;\r\n        dirLight.shadow.bias = - 0.00001;\r\n        dirLight.shadow.mapSize.width = 2048;\r\n        dirLight.shadow.mapSize.height = 2048;\r\n        scene.add(dirLight);\r\n\r\n\r\n\r\n        // ................................................................................\r\n        // your code goes here\r\n\r\n\r\n        // ................................................................................ \r\n        // const loader = new THREE.ObjectLoader();\r\n        // loader.load('https://raw.githubusercontent.com/alecjacobson/common-3d-test-models/master/data/stanford-bunny.obj', (object) => {\r\n        //     scene.add(object);\r\n        // });\r\n\r\n        // this.start();\r\n    }\r\n\r\n    public update(scene: THREE.Scene) {\r\n        var matrix = new THREE.Matrix4();\r\n        matrix.makeRotationY(Math.PI * 0.011);\r\n        this.pointLight.position.applyMatrix4(matrix);\r\n    }\r\n}\r\n"],"names":["Solution","RendererThree","constructor","super","pointLight","scene","this","camera","position","set","ambientLight","THREE","add","x","hemiLight","color","setHSL","groundColor","dirLight","multiplyScalar","castShadow","shadow","left","right","top","bottom","far","bias","mapSize","width","height","update","matrix","makeRotationY","Math","PI","applyMatrix4"],"sourceRoot":""}