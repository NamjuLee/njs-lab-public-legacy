{"version":3,"file":"static/js/90001.07b79709.chunk.js","mappings":"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","sources":["njslab/Workshop/workshop-color/ColorSimilarity/index.ts","njslab/Workshop/workshop-color/base/NRenderer/Renderer/Base/Base.ts","njslab/Workshop/workshop-color/base/NRenderer/Renderer/index.ts","njslab/Workshop/workshop-color/base/NRenderer/Scene/index.ts","njslab/Workshop/workshop-color/base/NRenderer/Common/index.ts","njslab/Workshop/workshop-color/base/NRenderer/Geometry/Vector3.ts","njslab/Workshop/workshop-color/base/NRenderer/Geometry/Point3.ts","njslab/Workshop/workshop-color/base/NRenderer/Geometry/Arrow.ts","njslab/Workshop/workshop-color/base/NRenderer/index.ts","njslab/Workshop/workshop-color/base/util/index.ts"],"sourcesContent":["import * as THREE from 'three'\r\n\r\nimport { NRenderer, Point3, Arrow, Vector3, getSlider } from '../base';\r\n\r\n\r\nimport { ColorUtility, getColorCosineSimilarity, getColorDistance, getColorDifferenceByDeltaE } from '../../../../lib/NJSCore'\r\n\r\n// import { RendererThree } from './base/RendererThree';\r\n// import { getCheckBox } from '../../Workshop/workshop-vector-dynamics/base/util'\r\n\r\nexport class Solution {\r\n\r\n    public div: HTMLDivElement\r\n    public renderer: NRenderer;\r\n    public m: number[] = [0, 0];\r\n    public t: number = 0.0;\r\n    public pts: Point[] = [];\r\n    public p: Point = undefined;\r\n\r\n    public divColB: HTMLDivElement;\r\n    public divColorResultText: HTMLDivElement;\r\n    public colorValueT = [255, 0 , 0];\r\n    public colorValue = [Math.random() * 255, Math.random() * 255, Math.random() * 255];\r\n    public arrow: Arrow;\r\n\r\n    constructor(id: string) {\r\n        this.div = document.getElementById(id) as HTMLDivElement;\r\n        this.renderer = new NRenderer(id);\r\n        this.renderer.updateBinding = () => this.render();\r\n        this.renderer.onMouseClick = (e) => this.mouseClick(e);\r\n\r\n        this.initDom();\r\n        this.init();\r\n    }\r\n    public initDom() {\r\n        const div = document.createElement('div');\r\n        div.style.position = 'absolute';\r\n        div.style.margin = '15px';\r\n        this.div.appendChild(div);\r\n\r\n        // const resetBtn = document.createElement('button');\r\n        // resetBtn.textContent = 'reset';\r\n        // resetBtn.onclick = () => {\r\n        //     this.reset();\r\n        //     this.init();\r\n        // }\r\n        // div.append(resetBtn);\r\n\r\n\r\n        // const cBox = getCheckBox('grid');\r\n        // div.append(cBox.div);\r\n        // cBox.checkBox.checked = true;\r\n        // cBox.checkBox.onchange = () => {\r\n        //     this.renderer.showGrid = cBox.checkBox.checked;\r\n        // }\r\n\r\n        this.renderer.showGrid = false;\r\n\r\n        // const axis = getCheckBox('axis');\r\n        // div.append(axis.div);\r\n        // axis.checkBox.checked = true;\r\n        // axis.checkBox.onchange = () => {\r\n        //     this.renderer.showAxis = axis.checkBox.checked;\r\n\r\n        // }\r\n\r\n        this.renderer.renderer.axis.scale.x = 51;\r\n        this.renderer.renderer.axis.scale.y = 51;\r\n        this.renderer.renderer.axis.scale.z = 51;\r\n        this.renderer.renderer.camera.far = 500;\r\n        \r\n        this.renderer.renderer.camera.position.set(900, -300, 700)\r\n        this.renderer.renderer.controls.target.set(255 * 0.5, 255 * 0.5, 255 * 0.5)\r\n\r\n\r\n\r\n\r\n\r\n        const geometry = new THREE.BoxGeometry( 255, 255, 255 );\r\n        const wireframe = new THREE.EdgesGeometry( geometry );\r\n        const line = new THREE.LineSegments( wireframe );\r\n        line.position.set(255 * 0.5, 255 * 0.5, 255 * 0.5)\r\n        // @ts-expect-error\r\n        line.material.color.r = 0.3; line.material.color.g = 0.3; line.material.color.b = 0.3;\r\n        // @ts-expect-error\r\n        line.material.depthTest = false;\r\n        // @ts-expect-error\r\n        line.material.opacity = 0.25;\r\n        // @ts-expect-error\r\n        line.material.transparent = true;\r\n        this.renderer.renderer.scene.add( line );\r\n\r\n\r\n\r\n\r\n\r\n        const rlType = getSlider(`r: ${Math.floor(this.colorValue[0])}`, 0, 255)\r\n        rlType.slider.defaultValue = `${this.colorValue[0]}`;\r\n        div.appendChild(rlType.div);\r\n        rlType.slider.oninput = () => {\r\n            const value = parseInt(rlType.slider.value);\r\n            this.colorValue[0] = value;\r\n            rlType.text.textContent = 'r: ' + value\r\n            this.updateColor();\r\n        };\r\n\r\n        const glType = getSlider(`g: ${Math.floor(this.colorValue[1])}`, 0, 255)\r\n        glType.slider.defaultValue = `${this.colorValue[1]}`;\r\n        div.appendChild(glType.div);\r\n        glType.slider.oninput = () => {\r\n            const value = parseInt(glType.slider.value);\r\n            this.colorValue[1] = value;\r\n            glType.text.textContent = 'g: ' + value\r\n            this.updateColor();\r\n        };\r\n\r\n        const blType = getSlider(`b: ${Math.floor(this.colorValue[2])}`, 0, 255)\r\n        blType.slider.defaultValue = `${this.colorValue[2]}`;\r\n        div.appendChild(blType.div);\r\n        blType.slider.oninput = () => {\r\n            const value = parseInt(blType.slider.value);\r\n            this.colorValue[2] = value;\r\n            blType.text.textContent = 'b: ' + value\r\n            this.updateColor();\r\n        };\r\n\r\n        const divColorContainer = document.createElement('div');\r\n        divColorContainer.style.display = 'flex';\r\n        div.appendChild(divColorContainer);\r\n\r\n        const divColA = document.createElement('div');\r\n        divColA.style.background = `rgba(${this.colorValueT[0]}, ${this.colorValueT[1]}, ${this.colorValueT[2]})`;\r\n        divColA.style.width = '50px';\r\n        divColA.style.height = '50px';\r\n        divColorContainer.appendChild(divColA);\r\n\r\n        this.divColB = document.createElement('div');\r\n        this.divColB.style.background = `rgba(${this.colorValue[0]}, ${this.colorValue[1]}, ${this.colorValue[2]})`;\r\n        this.divColB.style.width = '50px';\r\n        this.divColB.style.height = '50px';\r\n        divColorContainer.appendChild(this.divColB);\r\n\r\n        this.divColorResultText = document.createElement('div');\r\n        this.divColorResultText.style.fontSize = 'large';\r\n        this.divColorResultText.style.margin = '4px';\r\n        // divColorResultText.style.display = 'flex';\r\n        div.appendChild(this.divColorResultText);\r\n\r\n    }\r\n    public reset() {\r\n        this.renderer.reset();\r\n        this.t = 0.0;\r\n        this.pts = [];\r\n        this.p = undefined;\r\n    }\r\n    public updateColor() {\r\n        this.p.pt.mesh.position.set(this.colorValue[0], this.colorValue[1], this.colorValue[2]);\r\n        this.p.pt.material.color.set(new THREE.Color(this.colorValue[0] / 255, this.colorValue[1] / 255, this.colorValue[2] / 255));\r\n\r\n        const result = getColorCosineSimilarity(this.colorValue, this.colorValueT);\r\n        const resultDis = getColorDistance(this.colorValue, this.colorValueT);\r\n        const resultDisLab = getColorDifferenceByDeltaE(this.colorValue, this.colorValueT);\r\n\r\n        this.divColB.style.background = `rgba(${this.colorValue[0]}, ${this.colorValue[1]}, ${this.colorValue[2]})`;\r\n\r\n        const resultText = {result, resultDis, resultDisLab}\r\n\r\n        this.divColorResultText.innerHTML = \r\n            `CosineSimilarity: ${resultText.result.toFixed(2)} <br/> Distance: ${resultText.resultDis.toFixed(2)} <br/> DeltaE: ${resultText.resultDisLab.toFixed(2)}  ` // JSON.stringify(resultText)\r\n\r\n        // console.log(resultText)\r\n\r\n\r\n        this.arrow.vec.x = this.colorValue[0];\r\n        this.arrow.vec.y = this.colorValue[1];\r\n        this.arrow.vec.z = this.colorValue[2];\r\n\r\n        this.arrow.dir.x = this.colorValueT[0] - this.colorValue[0];\r\n        this.arrow.dir.y = this.colorValueT[1] - this.colorValue[1];\r\n        this.arrow.dir.z = this.colorValueT[2] - this.colorValue[2];\r\n\r\n\r\n        this.arrow.update();\r\n    }\r\n    public init() {\r\n        \r\n\r\n        let needGrid = false;\r\n\r\n        if (needGrid) {\r\n            const num = 12;\r\n\r\n            const interval = 255 / (num - 1);\r\n            for(let z = 0; z < num; z++) {\r\n                for(let y = 0; y < num; y++) {\r\n                    for(let x = 0; x < num; x++) {\r\n    \r\n                        const r = x * interval;\r\n                        const g = y * interval;\r\n                        const b = z * interval;\r\n                \r\n                        this.p = new Point(r,g,b, 0, -2, 2);\r\n                        this.pts.push(this.p);\r\n                    }\r\n                }\r\n            }\r\n\r\n        } else {\r\n\r\n            this.p = new Point(this.colorValueT[0], this.colorValueT[1], this.colorValueT[2], 0, -2, 2)\r\n            this.pts.push(this.p);\r\n\r\n            const r = this.colorValue[0];\r\n            const g = this.colorValue[1];\r\n            const b = this.colorValue[2];\r\n            this.p = new Point(r,g,b, 0, -2, 2)\r\n            this.pts.push(this.p);\r\n        }\r\n\r\n\r\n        this.arrow = new Arrow(new Vector3(0,0,0), new  Vector3(100,100,100))\r\n        this.arrow.meshArrow.setColor(new THREE.Color(.5,0,0))\r\n\r\n        this.updateColor();\r\n    }\r\n    public render(): void {\r\n        if (this.p){\r\n            // this.p.move(this.t, 0.985)\r\n        }\r\n\r\n        // this.pts.forEach((v)=>{\r\n        //     v.move(this.t, 0.985)\r\n        // });\r\n\r\n        // console.log(this)\r\n\r\n\r\n        this.t += 0.001;\r\n    }\r\n    public mouseMove(e: MouseEvent): void {\r\n        // this.m[0] = x - this.canvas.width * 0.5;\r\n        // this.m[1] = y - this.canvas.height * 0.5;\r\n    }\r\n    public renderMouse(ctx) {\r\n        // ctx.fillStyle = '#eee';\r\n        // ctx.beginPath();\r\n        // ctx.arc(this.m[0], this.m[1], 3, 0, Math.PI * 2.0)\r\n        // ctx.closePath();\r\n        // ctx.fill();\r\n    }\r\n    public mouseClick(e: MouseEvent): void {\r\n\r\n        // const v = new Point(x - this.canvas.width * 0.5, y - this.canvas.height * 0.5, 0);\r\n        // this.pts.push(v);\r\n\r\n        const r = Math.random() * 255;\r\n        const g = Math.random() * 255;\r\n        const b = Math.random() * 255;\r\n        this.p = new Point(r,g,b, 0, -2, 2)\r\n        this.pts.push(this.p);\r\n\r\n    }\r\n    public destroy() {\r\n        this.renderer.destroy();\r\n    }\r\n}\r\n\r\nclass Point {\r\n    public vec: Vector3;\r\n    public velocity: Vector3;\r\n    public force: Vector3 = new Vector3(0,0,0);\r\n    public mass = 10;\r\n    public r: number = 10;\r\n\r\n    public pt: Point3;\r\n\r\n    constructor(x, y, z ,ux = 0, uy = 0, uz = 0) {\r\n        this.vec =      new Vector3(x, y, z)\r\n        this.velocity = new Vector3(ux, uy, uz)\r\n\r\n        this.pt = new Point3(this.vec, 7);\r\n        this.pt.onClick = (e) => this.onClick(e)\r\n        this.pt.material.color.set(new THREE.Color(x / 255, y / 255, z / 255 ))\r\n    }\r\n    public onClick(e) {\r\n        // console.log(e);\r\n    }\r\n    // public render(ctx: CanvasRenderingContext2D) {\r\n    //     ctx.beginPath();\r\n    //     ctx.arc(this.vec.x, this.vec.y, this.r, 0, Math.PI * 2.0)\r\n    //     ctx.closePath();\r\n    //     ctx.fill()\r\n    // }\r\n    \r\n}\r\n\r\n\r\n// ......................\r\nconst xAxis = () => {\r\n    return new Vector3(1, 0, 0);\r\n}\r\nconst yAxis = () => {\r\n    return new Vector3(0, 1, 0);\r\n}\r\nconst zAxis = () => {\r\n    return new Vector3(0, 0, 1);\r\n}\r\nconst zero = () => {\r\n    return new Vector3(0, 0, 0);\r\n}\r\nconst origin = () => {\r\n    return new Vector3(0, 0, 0);\r\n}\r\n// ......................\r\n\r\nconst distance = (v0: Vector3, v1: Vector3) => {\r\n    return Math.sqrt(distance2(v0, v1));\r\n}\r\nconst distance2 = (v0: Vector3, v1: Vector3) => {\r\n    return (v0.x - v1.x) * (v0.x - v1.x) + (v0.y - v1.y) * (v0.y - v1.y) + (v0.z - v1.z) * (v0.z - v1.z);\r\n}\r\nconst dotProduct = (v1: Vector3, v2: Vector3) => {\r\n    return v1.x * v2.x + v1.y * v2.y + v1.z * v2.z;\r\n}\r\nconst crossProduct = (v1: Vector3, v2: Vector3) => {\r\n    return new Vector3(\r\n        v1.y * v2.z - v1.z * v2.y,\r\n        v1.z * v2.x - v1.x * v2.z,\r\n        v1.x * v2.y - v1.y * v2.x\r\n    );\r\n}\r\nconst normalize = (v: Vector3) => {\r\n    let len: number = Math.sqrt(v.x * v.x + v.y * v.y + v.z * v.z);\r\n    if (len < 0.0001) {\r\n        return new Vector3(v.x, v.y, v.z);\r\n    }\r\n    return new Vector3(v.x / len, v.y / len, v.z / len);\r\n}\r\nconst length = (v: Vector3) => {\r\n    return Math.sqrt(v.x * v.x + v.y * v.y + v.z * v.z);\r\n}\r\n\r\n// ......................\r\nconst multiply = (v: Vector3, s: number) => {\r\n    return scale(v, s);\r\n}\r\nconst scale = (v: Vector3, s: number) => {\r\n    return new Vector3(v.x * s, v.y * s, v.z * s);\r\n}\r\nconst sub = (v0: Vector3, v1: Vector3) => {\r\n    return new Vector3(v0.x - v1.x, v0.y - v1.y, v0.z - v1.z);\r\n}\r\nconst add = (v0: Vector3, v1: Vector3) => {\r\n    return new Vector3(v0.x + v1.x, v0.y + v1.y, v0.z + v1.z);\r\n}\r\n\r\n// class Vector3 {\r\n//     public x: number = 0.0;\r\n//     public y: number = 0.0;\r\n//     public z: number = 0.0;\r\n//     constructor(x, y, z) {\r\n//         this.x = x;\r\n//         this.y = y;\r\n//         this.z = z;\r\n//     }\r\n//     // public multiply(v: number) {\r\n//     //     this.x *= v;\r\n//     //     this.y *= v;\r\n//     //     this.z *= v;\r\n//     // }\r\n//     // public add(v: Vector3) {\r\n//     //     this.x += v.x;\r\n//     //     this.y += v.y;\r\n//     //     this.z += v.z;\r\n//     // }\r\n// }\r\n\r\n","import * as THREE from 'three';\nimport { OrbitControls } from 'three-orbitcontrols-ts';\n\nexport class RendererThreeVectorSandboxBase {\n    public canvas: HTMLCanvasElement;\n    public hostDiv: HTMLElement;\n    public ctx: CanvasRenderingContext2D;\n    public t: number = 0.0;\n    public camera: THREE.PerspectiveCamera;\n    public scene: THREE.Scene;\n    public renderer: THREE.WebGLRenderer;\n    public controls: OrbitControls;\n    private requestFrame: number;\n    constructor(id: string) {\n        this.hostDiv = document.getElementById(id);\n        this.initCanvas();\n    }\n    private initCanvas() {\n        this.scene = new THREE.Scene();\n        this.setBG(null)\n        this.scene.castShadow = true;\n\n        THREE.Object3D.DEFAULT_UP.set(0, 0, 1);\n\n        this.renderer = new THREE.WebGLRenderer({ antialias: true, alpha: true });\n        this.renderer.setPixelRatio(this.hostDiv.clientWidth / this.hostDiv.clientHeight);\n        this.renderer.domElement.id = 'Three';\n        this.renderer.domElement.style.position = 'absolute';\n        this.renderer.shadowMap.enabled = true;\n        this.renderer.setSize(this.hostDiv.clientWidth, this.hostDiv.clientHeight);\n        this.hostDiv.appendChild(this.renderer.domElement);\n\n        this.camera = new THREE.PerspectiveCamera(30, this.hostDiv.clientWidth / this.hostDiv.clientHeight, 1, 5000);\n        this.controls = new OrbitControls(this.camera, this.renderer.domElement);\n        this.camera.position.set(20, -20, 20);\n        this.controls.update();\n\n        this.canvas = this.renderer.domElement;\n\n        this.init();\n    }\n    public setBG(hexColor: string | null) {\n        if (hexColor!== null) {\n            this.scene.background = new THREE.Color(hexColor);\n        } else {\n            this.scene.background = null;\n        }\n    }\n    private init() {\n        this.eventBind();\n\n    }\n    private eventBind() {\n        this.renderer.domElement.onmousedown = (e: MouseEvent) => this.mouseDownPre(e);\n        this.renderer.domElement.onmouseup = (e: MouseEvent) => this.mouseUpPre(e);\n        this.renderer.domElement.onmousemove = (e: MouseEvent) => this.mouseMovePre(e);\n        this.renderer.domElement.addEventListener('click', (e: MouseEvent) => this.mouseClickPre(e))\n\n        window.addEventListener('resize', () => this.onWindowResize());\n\n    }\n    private onWindowResize() {\n        this.camera.aspect = this.hostDiv.clientWidth / this.hostDiv.clientHeight;\n        this.camera.updateProjectionMatrix();\n        this.renderer.setSize(this.hostDiv.clientWidth, this.hostDiv.clientHeight);\n    }\n    private loop = () => {\n        this.requestFrame = requestAnimationFrame(this.loop);\n        this.controls.update();\n        this.update(this.scene);\n        this.renderer.render(this.scene, this.camera);\n        this.t += 0.01;\n\n        // console.log('rendering...');\n    }\n    // .............................................................................\n    public start() {\n        this.loop();\n    }\n    public mouseDownPre(e: MouseEvent) {\n        // console.log(e);\n    }\n    public mouseUpPre(e: MouseEvent) {\n        // console.log(e);\n    }\n    public mouseClickPre(e: MouseEvent) {\n        // console.log(e);\n    }\n    public mouseDClickPre(e: MouseEvent) {\n        // console.log(e);\n    }\n    public mouseMovePre(e: MouseEvent) {\n        // console.log(e);\n    }\n    public mouseDragPre(e: MouseEvent) {\n        // console.log(e);\n    }\n    public update(scene: THREE.Scene) {\n        // console.log(e);\n    }\n    public destroy() {\n        window.removeEventListener('resize', () => this.onWindowResize());\n        cancelAnimationFrame(this.requestFrame);\n        this.requestFrame = undefined;\n        while (this.hostDiv.lastChild) {\n            this.hostDiv.removeChild(this.hostDiv.lastChild);\n        }\n    }\n}\n\n\n","import * as THREE from 'three';\nimport { NRenderer } from '..';\nimport { RendererThreeVectorSandboxBase } from './Base/Base'\n\nexport class RendererThreeVecSandbox extends RendererThreeVectorSandboxBase {\n    public sandboxVector: NRenderer\n    public pointLight: THREE.PointLight\n\n    public rayCaster = new THREE.Raycaster();\n    public mouse = new THREE.Vector2();\n    public m = new THREE.Vector3();\n\n    public sphere: THREE.Mesh;\n    public ground: THREE.Mesh;\n\n    public axis: THREE.AxesHelper;\n    public grid: THREE.GridHelper;\n\n\n    constructor(sandboxVector: NRenderer, id: string = 'main', color = '#00000000') {\n        super(id)\n        THREE.Object3D.DEFAULT_UP.set(0, 1, 0);\n        this.sandboxVector = sandboxVector;\n        // this.setBG(color);\n\n        this.initPost();\n        this.start();\n    }\n    public initPost() {\n\n        const ambientLight = new THREE.AmbientLight(0x555555);\n        this.scene.add(ambientLight);\n\n        this.pointLight = new THREE.PointLight(0xffffff, 100);\n        this.pointLight.position.x = 10;\n        this.pointLight.castShadow = true;\n        this.scene.add(this.pointLight);\n\n        this.axis = new THREE.AxesHelper(5);\n        this.axis.position.z = 0.001;\n        // this.axis.rotation.y = -Math.PI / 2;\n        this.scene.add(this.axis);\n\n        const sizeGrid = 50\n        this.grid = new THREE.GridHelper(sizeGrid, 100, 0x444444, 0x323232);\n        this.grid.rotation.x = -Math.PI / 2;\n        this.scene.add(this.grid);\n\n        const geometry = new THREE.PlaneGeometry(sizeGrid, sizeGrid);\n        const materialG = new THREE.MeshBasicMaterial({color: 0x010101, side: THREE.DoubleSide, \n            transparent: true, opacity: 0\n        });\n        this.ground = new THREE.Mesh(geometry, materialG);\n        // this.ground.rotation.x = -Math.PI / 2; // Rotate to make it flat\n        // this.ground.position.set(0,-1,0)\n        this.scene.add(this.ground);\n\n        \n        // @ts-ignore\n        const material = new THREE.MeshBasicMaterial({ color: 0x00ff00 });\n        const geometrySphere = new THREE.SphereGeometry(0.05, 50, 50);\n        const objectSphere = new THREE.Mesh(geometrySphere, material);\n        objectSphere.translateX(1)\n        this.sphere = objectSphere\n        this.scene.add(objectSphere);\n\n\n        // let geometry = new THREE.SphereGeometry(1, 50, 50);\n        // let object = new THREE.Mesh(geometry, new THREE.MeshPhongMaterial());\n        // object.translateX(-1)\n        // this.add(object);\n\n        // geometry = new THREE.SphereGeometry(1, 50, 50);\n        // object = new THREE.Mesh(geometry, new THREE.MeshPhongMaterial());\n        // object.translateX(1)\n        // this.add(object);\n        // this.setBGT();\n    }\n    public reset() {\n\n    }\n    set showGrid(v: boolean) {\n        this.grid.visible = v;\n    }\n    set showAxis(v: boolean) {\n        this.axis.visible = v;\n    }\n    public picking(e: MouseEvent, arrayMesh) {\n        this.mouse.x = (e.offsetX / this.renderer.domElement.clientWidth) * 2 - 1;\n        this.mouse.y = -(e.offsetY / this.renderer.domElement.clientHeight) * 2 + 1;\n\n        this.rayCaster.setFromCamera(this.mouse, this.camera);\n\n        const intersects = this.rayCaster.intersectObjects([ ...arrayMesh]);\n        if (intersects.length > 0) {\n            // console.log(intersects[0].object);\n            // console.log(intersects[0].point.x, intersects[0].point.y, intersects[0].point.z)\n            this.m.set(intersects[0].point.x, intersects[0].point.y, intersects[0].point.z);\n\n            if (intersects[0].object !== this.sphere) {\n                this.sphere.position.set(intersects[0].point.x, intersects[0].point.y, intersects[0].point.z)\n            }\n            // console.log(intersects[0].object.userData);\n            return { \n                intersects, \n                ground: undefined \n            };\n\n        }\n\n        const intersectGround = this.rayCaster.intersectObjects([this.ground]);\n        if (intersectGround.length > 0) {\n            // console.log(intersectGround)\n            this.m.set(intersectGround[0].point.x, intersectGround[0].point.y, intersectGround[0].point.z);\n            this.sphere.position.set(intersectGround[0].point.x, intersectGround[0].point.y, intersectGround[0].point.z)\n            return {intersects: undefined, ground :intersectGround};\n        }\n\n        return undefined;\n    }\n    public update(scene: THREE.Scene) {\n        this.updatePost(scene)\n\n        // if (this.sandboxVector.scene) {\n        //     this.sandboxVector.scene.mesh.forEach((m: THREE.Mesh, i) => {\n        //         m.position.x = this.sandboxVector.scene.arrayPoint[i].vec.x;\n        //         m.position.y = this.sandboxVector.scene.arrayPoint[i].vec.y;\n        //         m.position.z = this.sandboxVector.scene.arrayPoint[i].vec.z;\n        //     })\n\n        //     this.sandboxVector.scene.arrayArrow.forEach((m: THREE.ArrowHelper, i) => {\n        //         m.position.x = this.sandboxVector.scene.arrayPoint[i].vec.x;\n        //         m.position.y = this.sandboxVector.scene.arrayPoint[i].vec.y;\n        //         m.position.z = this.sandboxVector.scene.arrayPoint[i].vec.z;\n        //         const vec = new THREE.Vector3(this.sandboxVector.scene.arrayPoint[i].velocity.x, this.sandboxVector.scene.arrayPoint[i].velocity.y, this.sandboxVector.scene.arrayPoint[i].velocity.z)\n        //         const len = vec.length() * 0.5\n        //         m.setLength(len, 0.1,  0.1)\n        //         m.setDirection(vec)\n        //     })\n\n        //     this.sandboxVector.scene.arrayLineMesh.forEach((ln, i) => {\n        //         const lnObj = this.sandboxVector.scene.arrayLine[i];\n        //         ln.geometry.attributes.position.setXYZ(0, lnObj.p0.vec.x, lnObj.p0.vec.y, lnObj.p0.vec.z);\n        //         ln.geometry.attributes.position.setXYZ(1, lnObj.p1.vec.x, lnObj.p1.vec.y, lnObj.p1.vec.z);\n        //         ln.geometry.attributes.position.needsUpdate = true;\n        //     })\n        // }\n\n        const matrix = new THREE.Matrix4();\n        matrix.makeRotationY(Math.PI * 0.011);\n        this.pointLight.position.applyMatrix4(matrix);\n    }\n    public updatePost = (scene: THREE.Scene) => { \n        \n    }\n    // .................................................... Event\n    public onMouseClick = (e) => {}\n    public mouseClickPre(e: MouseEvent): void {\n        const intersect = this.picking(e, this.sandboxVector.scene.mesh);\n\n        if (intersect.intersects && intersect.intersects[0]) {\n            // console.log('---------------');\n            intersect.intersects[0].object.userData.onClick(intersect.intersects[0])\n        }\n\n        // this.sandboxVector.common.updateSelectedData(intersect);\n        // this.onMouseClick({e, intersect});\n    }\n    public onMouseMove = (e) => {}\n    public mouseMovePre= (e: MouseEvent) => {\n        const intersect = this.picking(e, this.sandboxVector.scene.mesh);\n        this.onMouseMove({e, intersect});\n    }\n\n}\n","import * as THREE from 'three';\nimport SandboxVector from '..';\n\nexport class Scene {\n    public sandboxVector: SandboxVector;\n    public scene: THREE.Scene;\n\n    mesh: THREE.Mesh[] = [];\n    // arrayPoint: any = [];\n    // arrayArrow: any = [];\n\n    // arrayLine: any = []\n    // arrayLineMesh: THREE.Mesh[]  = []\n\n    constructor(sandboxVector: SandboxVector) {\n        this.sandboxVector = sandboxVector;\n        this.scene = sandboxVector.renderer.scene;\n    }\n    public reset() {\n        for (let i = this.mesh.length - 1; i >= 0; i--) {\n            let obj = this.mesh[i];\n            this.scene.remove(obj);\n        }\n\n        // for (let i = this.arrayArrow.length - 1; i >= 0; i--) {\n        //     let obj = this.arrayArrow[i];\n        //     this.scene.remove(obj);\n        // }\n\n        // this.mesh = [];\n        // this.arrayPoint = [];\n        // this.arrayArrow = [];\n\n        // this.arrayLine = []\n        // //    this.initPost()\n    }\n    public add(mesh: THREE.Mesh, picking = true) {\n        this.scene.add(mesh);\n        if (picking) {\n            this.mesh.push(mesh)\n        }\n    }\n    public remove(mesh: THREE.Mesh) {\n        this.scene.remove(mesh);\n        this.mesh.splice(this.mesh.indexOf(mesh), 1);\n    }\n    // public addArrow(vec, velocity) {\n    //     const arrowHelper = new THREE.ArrowHelper(velocity, vec, 1, '#f00');\n    //     this.arrayArrow.push(arrowHelper)\n    //     this.scene.add(arrowHelper);\n    // }\n    // public addPoint(v: any) {\n    //     // @ts-ignore\n    //     const material = new THREE.MeshBasicMaterial({ color: 0xffffff });\n    //     const geometry = new THREE.SphereGeometry(0.1, 20, 20);\n    //     const object = new THREE.Mesh(geometry, material);\n    //     object.translateX(v.vec.x);\n    //     object.translateY(v.vec.z);\n    //     object.translateZ(v.vec.y);\n    //     this.add(object, v);\n    //     this.addArrow(v.vec, v.velocity);\n\n    // }\n    // public addLine(ln: any) {\n    //     this.arrayLine.push(ln)\n\n    //     const material = new THREE.LineBasicMaterial( { color: 0xffffff } );\n\n    //     const points = [];\n    //     points.push( new THREE.Vector3(ln.p0.vec.x, ln.p0.vec.y, ln.p0.vec.z ) );\n    //     points.push( new THREE.Vector3(ln.p1.vec.x, ln.p1.vec.y, ln.p1.vec.z ) );\n\n    //     const geometry = new THREE.BufferGeometry().setFromPoints( points );\n    //     const line = new THREE.Line( geometry, material );\n    //     // @ts-ignore\n    //     this.arrayLineMesh.push(line)\n    //     this.scene.add(line)\n    // }\n}","import * as THREE from 'three';\nimport SandboxVector from '..';\n\nexport class Common {\n    public app: SandboxVector\n    constructor(app: SandboxVector) {\n        this.app = app;\n    }\n    public pick() {\n\n    }\n}","export class Vector3 {\n    public x: number = 0.0;\n    public y: number = 0.0;\n    public z: number = 0.0;\n    constructor(x, y, z) {\n        this.x = x;\n        this.y = y;\n        this.z = z;\n    }\n}\n\n\n// ..................................................................\nexport const xAxis = () => {\n    return new Vector3(1, 0, 0);\n}\nexport const yAxis = () => {\n    return new Vector3(0, 1, 0);\n}\nexport const zAxis = () => {\n    return new Vector3(0, 0, 1);\n}\nexport const zero = () => {\n    return new Vector3(0, 0, 0);\n}\nexport const origin = () => {\n    return new Vector3(0, 0, 0);\n}\n// ..................................................................\n\nexport const distance = (v0: Vector3, v1: Vector3) => {\n    return Math.sqrt(distance2(v0, v1));\n}\nexport const distance2 = (v0: Vector3, v1: Vector3) => {\n    return (v0.x - v1.x) * (v0.x - v1.x) + (v0.y - v1.y) * (v0.y - v1.y) + (v0.z - v1.z) * (v0.z - v1.z);\n}\nexport const dotProduct = (v1: Vector3, v2: Vector3) => {\n    return v1.x * v2.x + v1.y * v2.y + v1.z * v2.z;\n}\nexport const crossProduct = (v1: Vector3, v2: Vector3) => {\n    return new Vector3(\n        v1.y * v2.z - v1.z * v2.y,\n        v1.z * v2.x - v1.x * v2.z,\n        v1.x * v2.y - v1.y * v2.x\n    );\n}\nexport const normalize = (v: Vector3) => {\n    let len: number = Math.sqrt(v.x * v.x + v.y * v.y + v.z * v.z);\n    if (len < 0.0001) {\n        return new Vector3(v.x, v.y, v.z);\n    }\n    return new Vector3(v.x / len, v.y / len, v.z / len);\n}\nexport const length = (v: Vector3) => {\n    return Math.sqrt(v.x * v.x + v.y * v.y + v.z * v.z);\n}\n\n// ..................................................................\nexport const multiply = (v: Vector3, s: number) => {\n    return scale(v, s);\n}\nexport const scale = (v: Vector3, s: number) => {\n    return new Vector3(v.x * s, v.y * s, v.z * s);\n}\nexport const sub = (v0: Vector3, v1: Vector3) => {\n    return new Vector3(v0.x - v1.x, v0.y - v1.y, v0.z - v1.z);\n}\nexport const add = (v0: Vector3, v1: Vector3) => {\n    return new Vector3(v0.x + v1.x, v0.y + v1.y, v0.z + v1.z);\n}\n","import * as THREE from 'three';\nimport { NRenderer } from '..';\nimport { Vector3 } from './Vector3'\n\nexport class Point3 {\n    // private _x: number;\n    // private _y: number;\n    // private _z: number;\n\n    public vec: Vector3;\n    public radius: number = 0.5;\n\n    public material: THREE.MeshBasicMaterial;\n    public geometry: THREE.SphereGeometry;\n    public mesh: THREE.Mesh;\n\n    // constructor(x: number, y: number, z: number, radius = 0.1) {\n    constructor(v: Vector3, radius = 0.1) {\n        // this._x = x;\n        // this._y = y;\n        // this._z = z;\n        this.vec = v;\n        this.radius = radius;\n        this.init();\n    }\n    // public get x () { return this._x; }\n    // public set x (v) { this._x = v; this.updateVec();}\n    // public get y () { return this._y; }\n    // public set y (v) { this._y = v; this.updateVec();}\n    // public get z () { return this._z; }\n    // public set z (v) { this._z = v; this.updateVec();}\n    // public set(x: number, y: number, z: number) {\n    //     this._x = x; this._y = y; this._z = z;\n    //     this.updateVec();\n    // }\n    public destroy() {\n        NRenderer.app.scene.remove(this.mesh);\n    }\n    public onClick(data: any) {\n\n        this.update();\n    }\n    // ...........................................................\n    public update() {\n        this.mesh.position.set(this.vec.x, this.vec.y, this.vec.z);\n    }\n    private init() {\n        this.material = new THREE.MeshBasicMaterial({ color: 0xffffff });\n        this.geometry = new THREE.SphereGeometry(this.radius, 20, 20);\n        this.mesh = new THREE.Mesh(this.geometry, this.material);\n        this.mesh.position.set(this.vec.x, this.vec.y, this.vec.z);\n        this.mesh.userData = this;\n        NRenderer.app.scene.add(this.mesh);\n    }   \n}","import { Vector3 } from '../';\nimport * as THREE from 'three';\nimport { NRenderer } from '..';\n\nexport class Arrow {\n    public vec: Vector3;\n    public dir: Vector3;\n    public meshArrow: THREE.ArrowHelper;\n    constructor(vec: Vector3, dir: Vector3) {\n        this.vec = vec;\n        this.dir = dir;\n        this.init();\n    }\n    public onClick(data: any) {\n        console.log(data)\n        /* */\n    }\n    public update() {\n        this.meshArrow.position.x = this.vec.x;\n        this.meshArrow.position.y = this.vec.y;\n        this.meshArrow.position.z = this.vec.z;\n        \n        const dir = new THREE.Vector3(this.dir.x, this.dir.y, this.dir.z);\n        const len = dir.length();\n        \n        this.meshArrow.setLength(len, 0.1,  0.1);\n        this.meshArrow.setDirection(dir.normalize());\n    }\n    private init() {\n        const dir = new THREE.Vector3(this.dir.x, this.dir.y, this.dir.z);\n        const len = dir.length();\n\n        this.meshArrow = new THREE.ArrowHelper(\n            dir.normalize(), \n            new THREE.Vector3(this.vec.x, this.vec.y, this.vec.z), \n            len, '#f00'\n        );\n\n        // console.log(len)\n        // this.meshArrow.setLength(len, 0.1,  0.1)\n        // this.meshArrow.setDirection(dir);\n        // this.arrayArrow.push(arrowHelper)\n\n        this.meshArrow.userData = this;\n        // @ts-ignore\n        NRenderer.app.scene.add(this.meshArrow);\n    }\n}","import { RendererThreeVecSandbox } from './Renderer';\nimport { Scene } from './Scene';\nimport { Common } from './Common';\n\nexport * from './Geometry';\n\nexport class NRenderer {\n    public static app: NRenderer;\n    public id: string;\n    public renderer: RendererThreeVecSandbox;\n    public common: Common;\n    public scene: Scene;\n    public themeColor = '#222';\n\n    constructor(id: string, themeColor = '#00000000') {\n        NRenderer.app = this;\n        this.id = id;\n        this.themeColor = themeColor;\n\n        this.initRenderer();\n    }\n    public destroy() {\n        this.renderer.destroy();\n    }\n    private initRenderer() {\n        this.renderer = new RendererThreeVecSandbox(this, this.id, this.themeColor);\n        this.renderer.updatePost = (scene) => this.updateBinding();\n        this.renderer.onMouseMove = (e) => this.onMouseMove(e);\n        this.renderer.onMouseClick = (e) => this.onMouseClick(e);\n        this.scene = new Scene(this);\n        this.common = new Common(this)\n\n    }\n    public set showAxis(v){\n        this.renderer.showAxis = v;\n    }\n    public set showGrid(v) {\n        this.renderer.showGrid = v;\n    }\n    public reset() {\n        this.renderer.reset();\n        this.scene.reset();\n\n        this.start();\n    }\n    // ..........................\n    public start() {\n        // TODO: \n    }\n    public updateBinding() {\n        // TODO: \n    }\n    public onMouseMove(e: any) { }\n    public onMouseClick(e: any) { }\n}","export const getSlider = (title: string, min: number, max: number) => {\n    // <input type=\"range\" min=\"1\" max=\"100\" value=\"50\" class=\"slider\" id=\"myRange\">\n    const div = document.createElement('div');\n    div.style.display = 'flex';\n\n    const slider = document.createElement('input');\n    slider.type = 'range';\n    slider.min = `${min}`;\n    slider.max = `${max}`;\n\n    const text = document.createElement('div');\n    text.textContent = title;\n    text.style.color = '#aaa';\n    div.appendChild(slider);\n    div.appendChild(text);\n    return {\n        div, slider, text\n    }\n};\nexport const getCheckBox = (title: string) => {\n    const div = document.createElement('div');\n    div.style.display = 'flex';\n\n    const checkBox = document.createElement('input');\n    checkBox.type = 'checkbox';\n    checkBox.defaultChecked = false;\n    const text = document.createElement('div');\n    text.textContent = title;\n    text.style.color = '#aaa';\n    div.appendChild(checkBox);\n    div.appendChild(text);\n\n    return {\n        div, checkBox\n    }\n};\n\n\n\n\nexport const getDropdown = (items = [\"Link 1\", \"Link 2\", \"Link 3\"], callBack: (param: string)=> void) => {\n\n    const dropdown = document.createElement('div');\n    dropdown.classList.add('dropdown');\n\n    const dropdownToggle = document.createElement('button');\n    dropdownToggle.classList.add('dropdown-toggle');\n    dropdownToggle.textContent = 'Dropdown Menu';\n    dropdown.appendChild(dropdownToggle);\n\n    const dropdownMenu = document.createElement('div');\n    dropdownMenu.classList.add('dropdown-menu');\n    dropdown.appendChild(dropdownMenu);\n\n    items.forEach(item => {\n        const anchor = document.createElement('a');\n        anchor.href = \"#\";\n        anchor.textContent = item;\n        anchor.addEventListener('click', (event) => {\n            event.preventDefault();\n            // console.log(`Selected: ${item}`);\n            dropdownToggle.textContent = `Selected: ${item}`\n            dropdownMenu.style.display = 'none';\n            callBack(item);\n        });\n        dropdownMenu.appendChild(anchor);\n    });\n\n\n\n    dropdownToggle.addEventListener('click', () => {\n        dropdownMenu.style.display = dropdownMenu.style.display === 'block' ? 'none' : 'block';\n    });\n\n    window.addEventListener('click', (event) => {\n        // @ts-expect-error\n        if (!event.target.matches('.dropdown-toggle')) {\n            if (dropdownMenu.style.display === 'block') {\n                dropdownMenu.style.display = 'none';\n            }\n        }\n    });\n\n    document.body.style.fontFamily = 'Arial, sans-serif';\n\n    dropdown.style.position = 'relative';\n    dropdown.style.display = 'inline-block';\n\n    // dropdownToggle.style.backgroundColor = '#3498db';\n    // dropdownToggle.style.color = 'white';\n    dropdownToggle.style.padding = '10px 20px';\n    dropdownToggle.style.border = 'none';\n    dropdownToggle.style.cursor = 'pointer';\n\n    dropdownToggle.addEventListener('mouseover', () => {\n        dropdownToggle.style.backgroundColor = '#eee';\n    });\n\n    dropdownToggle.addEventListener('mouseout', () => {\n        dropdownToggle.style.backgroundColor = '#ccc';\n    });\n\n    dropdownMenu.style.display = 'none';\n    dropdownMenu.style.position = 'absolute';\n    dropdownMenu.style.backgroundColor = '#ccc';\n    dropdownMenu.style.boxShadow = '0px 8px 16px 0px rgba(0,0,0,0.2)';\n    dropdownMenu.style.zIndex = '1';\n\n    dropdownMenu.querySelectorAll('a').forEach(anchor => {\n        anchor.style.color = 'black';\n        anchor.style.padding = '12px 16px';\n        anchor.style.textDecoration = 'none';\n        anchor.style.display = 'block';\n\n        anchor.addEventListener('mouseover', () => {\n            anchor.style.backgroundColor = '#f1f1f1';\n        });\n\n        anchor.addEventListener('mouseout', () => {\n            anchor.style.backgroundColor = '#ccc';\n        });\n    });\n\n    // container.appendChild(dropdown);\n    return dropdown;\n};"],"names":["Solution","constructor","id","div","renderer","m","t","pts","p","undefined","divColB","divColorResultText","colorValueT","colorValue","Math","random","arrow","this","document","getElementById","NRenderer","updateBinding","render","onMouseClick","e","mouseClick","initDom","init","createElement","style","position","margin","appendChild","showGrid","axis","scale","x","y","z","camera","far","set","controls","target","geometry","THREE","wireframe","line","material","color","r","g","b","depthTest","opacity","transparent","scene","add","rlType","getSlider","floor","slider","defaultValue","oninput","value","parseInt","text","textContent","updateColor","glType","blType","divColorContainer","display","divColA","background","width","height","fontSize","reset","pt","mesh","result","getColorCosineSimilarity","resultDis","getColorDistance","resultDisLab","getColorDifferenceByDeltaE","resultText","innerHTML","toFixed","vec","dir","update","Point","push","Arrow","Vector3","meshArrow","setColor","mouseMove","renderMouse","ctx","destroy","ux","uy","uz","velocity","force","mass","Point3","onClick","RendererThreeVectorSandboxBase","canvas","hostDiv","requestFrame","loop","requestAnimationFrame","initCanvas","setBG","castShadow","antialias","alpha","setPixelRatio","clientWidth","clientHeight","domElement","shadowMap","enabled","setSize","OrbitControls","hexColor","eventBind","onmousedown","mouseDownPre","onmouseup","mouseUpPre","onmousemove","mouseMovePre","addEventListener","mouseClickPre","window","onWindowResize","aspect","updateProjectionMatrix","start","mouseDClickPre","mouseDragPre","removeEventListener","cancelAnimationFrame","lastChild","removeChild","RendererThreeVecSandbox","sandboxVector","super","pointLight","rayCaster","mouse","sphere","ground","grid","updatePost","onMouseMove","intersect","picking","initPost","ambientLight","rotation","PI","materialG","side","geometrySphere","objectSphere","translateX","v","visible","showAxis","arrayMesh","offsetX","offsetY","setFromCamera","intersects","intersectObjects","length","point","object","intersectGround","matrix","makeRotationY","applyMatrix4","userData","Scene","i","obj","remove","splice","indexOf","Common","app","pick","radius","data","console","log","len","setLength","setDirection","normalize","themeColor","common","initRenderer","title","min","max","type","getCheckBox","checkBox","defaultChecked","getDropdown","items","callBack","dropdown","classList","dropdownToggle","dropdownMenu","forEach","item","anchor","href","event","preventDefault","matches","body","fontFamily","padding","border","cursor","backgroundColor","boxShadow","zIndex","querySelectorAll","textDecoration"],"sourceRoot":""}