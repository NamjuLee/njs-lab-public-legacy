{"version":3,"file":"static/js/23745.7e8225ad.chunk.js","mappings":"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","sources":["njslab/LabStarter/Starter-WebGL/Camera/Cameras.ts","njslab/LabStarter/Starter-WebGL/Camera/CameraController.ts","njslab/LabStarter/Starter-WebGL/lib/index.ts","njslab/LabStarter/Starter-WebGL/index.ts"],"sourcesContent":["import { vec2, vec3, mat4 } from 'gl-matrix';\n// import { } from '../../lib';\n\nexport class Camera {\n    public viewMatrix = mat4.create();\n    public projectionMatrix = mat4.create(); \n    public viewProjectionMatrix = mat4.create();\n\n    public zoomMax = 100;\n    public zoomSpeed = 2;\n\n    public near = 0.01;\n    public far = 10000;\n\n    public mvpMatrix = mat4.create();\n\n    public eye = vec3.fromValues(0,0,0);\n    // public eye = vec3.fromValues(0, 1, 0);\n    public center = vec3.fromValues(0, 0, 0);\n    public up = vec3.fromValues(0, 1, 0);\n\n    public type ='camera';\n\n    public respectRatio: number;\n    public width: number;\n    public height: number;\n\n    public angleXY = Math.PI; \n    public angleZ = Math.PI * 0.25;\n    public distance = 1;\n\n    constructor(width: number = 100, height: number = 100, cameraPosition: vec3 = [2, 2, 4], center: vec3 = [0, 0, 0],  up: vec3 = [0, 1, 0], distance: number = 5) {\n        this.distance = distance; this.width = width; this.height = height; this.respectRatio = width / height\n        this.eye = cameraPosition;\n        this.center = center;\n        this.up = up;\n    }\n    public zoom(v: number) { \n        //\n    }\n    public update() {\n        mat4.lookAt(this.viewMatrix, this.eye, this.center, this.up);\n        mat4.multiply(this.viewProjectionMatrix, this.projectionMatrix, this.viewMatrix);\n\n        // createTransforms(this.modelMatrix, this.translation, this.rotation);\n        // mat4.multiply(this.mvpMatrix, this.viewProjectionMatrix, this.viewMatrix);\n        // console.log(this.type);\n    }\n    \n}\n\nexport class CameraPerspective extends Camera {\n    constructor(width = 100, height = 100, cameraPosition: vec3 = [2, 2, 4], center: vec3 = [0, 0, 0],  up: vec3 = [0, 1, 0], distance = 3){\n        super(width, height, cameraPosition, center, up, distance);\n        this.type = 'CameraPerspective';\n        this.init();\n    }\n    public init() {\n        mat4.perspective(this.projectionMatrix, 2 * Math.PI / 5, this.respectRatio, this.near, this.far);\n        this.update();\n    }\n    public zoom (v: number ) {\n        this.distance += v * 0.01;\n    }\n\n}\nexport class CameraOrth extends Camera {\n    constructor(width = 100, height = 100, cameraPosition: vec3 = [0 ,0, 1], center: vec3 = [0, 0, 0],  up: vec3 = [0, 1, 0], distance = 300.1){\n        super(width, height, cameraPosition, center, up, distance);\n        this.type = 'CameraOrth';\n        this.init()\n    }\n    public init() {\n        projection(this.projectionMatrix, this.width, this.height, this.near , this.far, this.distance);\n\n        // const aspectRatio = width / height;\n        // const zoomFactor = 0.1; //this.distance;\n        // const projectionMatrix = mat4.ortho(\n        //   -aspectRatio * zoomFactor,\n        //   aspectRatio * zoomFactor,\n        //   -1 * zoomFactor,\n        //   1 * zoomFactor,\n        //   0.1,\n        //   100.0\n        // );\n\n        // mat4.ortho(this.projectionMatrix, -aspectRatio * zoomFactor, aspectRatio * zoomFactor,  -1 * zoomFactor, 1 * zoomFactor, this.near, this.far);\n        // mat4.ortho(this.projectionMatrix, 0, 500, 800, 0, 0.1, 5000);\n        // mat4.ortho(this.projectionMatrix, 0, 0, 800, 800, -400 , 400);\n        // mat4.frustum(this.projectionMatrix, 0, 800, 800, 0, -400, 400);\n\n\n        this.angleXY = 0;\n        this.angleZ = 0;\n        this.update();\n    }\n    public zoom(v: number) {\n        this.distance += v + 50 / this.distance;\n        if (this.distance < 0.000001) { this.distance = 0.000001; }\n        if (this.distance > 100000) { this.distance = 100000; }\n        projection(this.projectionMatrix, this.width, this.height, this.near, this.far, this.distance);\n    }\n}\n\nconst projection = (dst, width, height, near , far, scale) => {\n    // Note: This matrix flips the Y axis so that 0 is at the top.\n    // dst = dst || new Float32Array(16);\n    dst[ 0] = 2 / width * scale;    dst[ 1] = 0;                    dst[ 2] = 0;                        dst[ 3] = 0;\n    dst[ 4] = 0;                    dst[ 5] = 2 / height * scale;   dst[ 6] = 0;                        dst[ 7] = 0;\n    dst[ 8] = 0;                    dst[ 9] = 0;                    dst[10] = -2 / (far - near);       dst[11] = 0;\n    dst[12] = 0;                    dst[13] = 0;                    dst[14] = 0.1;                      dst[15] = 1;\n    // dst[12] = -1;                dst[13] = 1;                    dst[14] = 0.5;                      dst[15] = 1;\n    return dst;\n};\n\n// const createOrthographicMatrix = (left, right, bottom, top, near, far) => {\n//     const tx = -(right + left) / (right - left);\n//     const ty = -(top + bottom) / (top - bottom);\n//     const tz = -(far + near) / (far - near);\n  \n//     return [\n//       2 / (right - left), 0, 0, 0,\n//       0, 2 / (top - bottom), 0, 0,\n//       0, 0, -2 / (far - near), 0,\n//       tx, ty, tz, 1,\n//     ];\n//   }","import { vec2, vec3, mat4 } from 'gl-matrix';\nimport { Camera, CameraPerspective, CameraOrth } from './Cameras';\nimport { Solution } from '..';\n\nexport class CameraController {\n    public solution: Solution;\n    public canvas: HTMLCanvasElement\n\n    public cameraOrth: Camera;\n    public cameraPerspective: Camera;\n\n    public camera: Camera;\n\n    private modelMatrix: mat4 = mat4.create();\n    private mvpMatrix: mat4 = mat4.create();\n\n    // public vMatrix: mat4;\n    // public vpMatrix: mat4;\n    public rotation =vec3.fromValues(0, 0, 0); \n    public translation =vec3.fromValues(0, 0, 0);\n    public screen2 = vec2.fromValues(0, 0);\n\n    public pos = [0, 0];\n    public isDown: boolean = false;\n\n    constructor(solution: Solution) {\n        this.solution = solution;\n        this.canvas = solution.canvas;\n\n        const eye = vec3.fromValues(2.6451475620269775, 3.130298137664795, 2.864337205886841); // 1.6399056911468506, 1.1976807117462158, 1.162699580192566\n        // const eye = vec3.fromValues(10, -10, 2);\n        const center = vec3.fromValues(0, 0, 0);\n        const up = vec3.fromValues(0, 0, 1);\n\n        this.cameraPerspective = new CameraPerspective(this.canvas.width, this.canvas.height, eye, center, up);\n        this.camera = this.cameraPerspective; \n        this.arcRotation(0, 0);\n\n        this.cameraOrth = new CameraOrth(this.canvas.width, this.canvas.height);\n        this.camera = this.cameraOrth; // this.cameraPerspective // this.cameraOrth;\n\n        this.appendEvent(this.canvas);\n        this.update();\n    }\n    public update() {\n        // mat4.lookAt(this.vMatrix, this.eye, this.center, this.up);\n        this.camera.update();\n\n        // mat4.multiply(this.camera.viewProjectionMatrix, this.camera.projectionMatrix, this.camera.viewMatrix);\n        createTransforms(this.modelMatrix, this.translation, this.rotation);\n        mat4.multiply(this.mvpMatrix, this.camera.viewProjectionMatrix, this.modelMatrix);\n        // console.log('camera updated...');\n    }\n    public rotateZ(val = 0.1) {\n        this.rotation[2] += val;\n        this.update();\n    }\n    public translateX(val = 0.1) {\n        this.translation[0] += val;\n        this.update();\n    }\n    public get getMatrix() {\n        return this.mvpMatrix;\n    }\n    public shiftCamera() {\n        // console.log('shiftCamera');\n        if (this.camera === this.cameraPerspective){\n            this.camera = this.cameraOrth;\n        } else {\n            this.camera = this.cameraPerspective;\n        }\n        this.update();\n    }\n    public moveCamera(x: number, y: number) {\n        if (this.camera === this.cameraPerspective){\n            this.arcRotation(x, y);\n        } else {\n            this.pan(x, y);\n        }\n    }\n    public arcRotation(x: number, y: number) {\n        x = x * -0.01;\n        y = y * -0.01;\n        this.camera.angleXY += x;\n        this.camera.angleZ += y;\n        this.camera.eye[0] = this.camera.center[0] + (Math.sin(this.camera.angleXY) * Math.cos(this.camera.angleZ)) * this.camera.distance;\n        this.camera.eye[1] = this.camera.center[1] + (Math.cos(this.camera.angleXY) * Math.cos(this.camera.angleZ)) * this.camera.distance;\n        this.camera.eye[2] = this.camera.center[2] + (Math.sin(this.camera.angleZ) * this.camera.distance);\n\n        // console.log('angleXY', this.camera.angleXY, 'angleZ', this.camera.angleZ, this.camera.distance, 'distance' )\n        // console.log('camera.eye', this.camera.eye )\n\n\n        this.update();\n    }\n    public zoomWheel(v: number) {\n\n        if (this.camera === this.cameraPerspective){\n            this.camera.zoom(v)\n            this.arcRotation(0, 0);\n        } else {\n            this.camera.zoom(v)\n        }\n        \n        // \n\n        // console.log(this.scale);\n\n        this.update();\n    }\n    public pan(x: number, y: number) {\n        const scale = 0.01\n        this.camera.center[0] += x / this.camera.distance ;\n        this.camera.center[1] -= y / this.camera.distance;\n        this.camera.eye[0] += x / this.camera.distance;\n        this.camera.eye[1] -= y / this.camera.distance;\n        this.update();\n\n    }\n    // public arcRotation(x: number, y: number) {\n    //     x = x * 0.01;\n    //     y = y * 0.01;\n    //     this.angleXY += x;\n    //     this.angleZ += y;\n    //     this.camera.eye[0] = this.camera.center[0] + (Math.sin(this.angleXY) * Math.cos(this.angleZ)) * this.distance;\n    //     this.camera.eye[1] = this.camera.center[1] + (Math.cos(this.angleXY) * Math.cos(this.angleZ)) * this.distance;\n    //     this.camera.eye[2] = this.camera.center[2] + (Math.sin(this.angleZ) * this.distance);\n\n    //     console.log('angleXY', this.angleXY, 'angleZ', this.angleZ, this.distance, 'distance' )\n    //     console.log('camera.eye', this.camera.eye )\n    //     this.update();\n    // }\n\n    public appendEvent(canvas: HTMLCanvasElement) {\n        canvas.addEventListener('ondrag', (e: MouseEvent) => {\n            // console.log('click', e);\n        }, false);\n        canvas.addEventListener('click', (e: MouseEvent) => {\n            // console.log('click', e);\n        }, false);\n        canvas.addEventListener('dblclick', (e: MouseEvent) => {\n            // console.log('d-click', e);\n        }, false);\n        canvas.addEventListener('drag', (e: MouseEvent) => {\n            // console.log('drag', e);\n        }, true);\n        canvas.addEventListener('mouseup', (e: MouseEvent) => {\n            // console.log('mouse up', e);\n        }, false);\n        canvas.addEventListener('mousedown', (e: MouseEvent) => {\n            this.isDown = true;\n            this.pos[0] = e.offsetX;\n            this.pos[1] = e.offsetY;\n\n        }, false);\n        canvas.addEventListener('mouseup', (e: MouseEvent) => {\n            // console.log('pointer up', e);\n            this.isDown = false;\n        }, false);\n        canvas.addEventListener('mousemove', (e: MouseEvent) => {\n            if (this.isDown) {\n                // console.log('move dragging')\n                const xOff = this.pos[0] - e.offsetX;\n                const yOff = this.pos[1] - e.offsetY;\n\n                this.moveCamera(xOff, yOff)\n                this.pos[0] = e.offsetX;\n                this.pos[1] = e.offsetY;\n            } else {\n                // console.log('move')\n                const rect = canvas.getBoundingClientRect();\n                // this.mNormalized[0] = (e.clientX - rect.left) / canvas.width;\n                // this.mNormalized[1] = (e.clientY - rect.top) / canvas.height;\n                // console.log(this.mNormalized)\n            \n\n            }\n\n            // console.log('mousemove', e);\n        }, false);\n        canvas.addEventListener('wheel', (e:  WheelEvent) => {\n            // console.log('wheel', e.deltaY);\n            this.zoomWheel(e.deltaY)\n        }, false);\n\n        window.addEventListener('keydown', (k:  KeyboardEvent) => {\n            if(k.key === 'p') {\n                this.shiftCamera();\n             }\n        }, false);\n    }\n}\n\nconst createTransforms = (modelMat:mat4, translation:vec3 = [0,0,0], rotation:vec3 = [0,0,0], scaling:vec3 = [1,1,1]) => {\n    const rotateXMat = mat4.create();\n    const rotateYMat = mat4.create();\n    const rotateZMat = mat4.create();   \n    const translateMat = mat4.create();\n    const scaleMat = mat4.create();\n\n    //perform individual transformations\n    mat4.fromTranslation(translateMat, translation);\n    mat4.fromXRotation(rotateXMat, rotation[0]);\n    mat4.fromYRotation(rotateYMat, rotation[1]);\n    mat4.fromZRotation(rotateZMat, rotation[2]);\n    mat4.fromScaling(scaleMat, scaling);\n\n    //combine all transformation matrices together to form a final transform matrix: modelMat\n    mat4.multiply(modelMat, rotateXMat, scaleMat);\n    mat4.multiply(modelMat, rotateYMat, modelMat);        \n    mat4.multiply(modelMat, rotateZMat, modelMat);\n    mat4.multiply(modelMat, translateMat, modelMat);\n};","export const loadWGSL = async (path: string) => {\n    return fetch(`${path}`)\n        .then((response: Response) => {\n            return response.text();\n        }).catch((err: Error) => {\n            console.debug(err);\n        });\n\n}","// import positionVert from './shaders/position.vert.wgsl?raw';\r\n// import colorFrag from './shaders/color.frag.wgsl';\r\n\r\nimport { CameraController } from './Camera/CameraController';\r\n// import { loadWGSL } from 'njscore';\r\n\r\nimport { loadWGSL } from './lib';\r\n\r\nimport * as triangle from './triangle';\r\nimport { mat4 } from 'gl-matrix';\r\n\r\nconst vertPath = require('./shaders/vert.glsl');\r\nconst fragPath = require('./shaders/frag.glsl');\r\n\r\nexport class Solution {\r\n    divHost: HTMLElement;\r\n    canvas: HTMLCanvasElement;\r\n    ctx: GPUCanvasContext;\r\n    device: GPUDevice;\r\n    format: GPUTextureFormat;\r\n    size: any;\r\n    pipelineObj: any;\r\n\r\n    cameraController: CameraController;\r\n\r\n    constructor(id: string) {\r\n        this.divHost = document.getElementById(id);\r\n        \r\n        // tslint:disable: no-console\r\n        this.canvas = document.createElement('canvas');\r\n        this.divHost.appendChild(this.canvas);\r\n        this.canvas.width = this.divHost.clientWidth ;\r\n        this.canvas.height = this.divHost.clientHeight;\r\n\r\n        this.init();\r\n    }\r\n    async init() {\r\n        this.cameraController = new CameraController(this);\r\n\r\n        const vertShader = await loadWGSL(vertPath);\r\n        const fragShader = await loadWGSL(fragPath);\r\n\r\n\r\n        const gl = this.canvas.getContext('webgl2');\r\n\r\n        const program = gl.createProgram();\r\n\r\n        const vertexShader = gl.createShader(gl.VERTEX_SHADER);\r\n        gl.shaderSource(vertexShader, vertShader as string);\r\n        gl.compileShader(vertexShader);\r\n        gl.attachShader(program, vertexShader);\r\n\r\n        const fragmentShader = gl.createShader(gl.FRAGMENT_SHADER);\r\n        gl.shaderSource(fragmentShader, fragShader as string);\r\n        gl.compileShader(fragmentShader);\r\n        gl.attachShader(program, fragmentShader);\r\n\r\n        gl.linkProgram(program);\r\n\r\n        if (!gl.getProgramParameter(program, gl.LINK_STATUS)) {\r\n            console.log(gl.getShaderInfoLog(vertexShader));\r\n            console.log(gl.getShaderInfoLog(fragmentShader));\r\n        }\r\n\r\n        gl.useProgram(program);\r\n\r\n        gl.enable(gl.DEPTH_TEST);\r\n\r\n        const vertexData = new Float32Array([\r\n            -.5,-.5,-.5,   0,1,1,\r\n            -.5, .5, .5,   0,1,1,\r\n            -.5, .5,-.5,   0,1,1,\r\n            -.5,-.5, .5,   0,1,1,\r\n            -.5, .5, .5,   0,1,1,\r\n            -.5,-.5,-.5,   0,1,1,\r\n    \r\n            .5 ,-.5,-.5,   1,0,1,\r\n            .5 , .5,-.5,   1,0,1,\r\n            .5 , .5, .5,   1,0,1,\r\n            .5 , .5, .5,   1,0,1,\r\n            .5 ,-.5, .5,   1,0,1,\r\n            .5 ,-.5,-.5,   1,0,1,\r\n    \r\n            -.5,-.5,-.5,   0,1,0,\r\n            .5,-.5,-.5,   0,1,0,\r\n            .5,-.5, .5,   0,1,0,\r\n            .5,-.5, .5,   0,1,0,\r\n            -.5,-.5, .5,   0,1,0,\r\n            -.5,-.5,-.5,   0,1,0,\r\n    \r\n            -.5, .5,-.5,   1,1,0,\r\n            .5, .5, .5,   1,1,0,\r\n            .5, .5,-.5,   1,1,0,\r\n            -.5, .5, .5,   1,1,0,\r\n            .5, .5, .5,   1,1,0,\r\n            -.5, .5,-.5,   1,1,0,\r\n    \r\n            .5,-.5,-.5,   0,0,1,\r\n            -.5,-.5,-.5,   0,0,1,\r\n            .5, .5,-.5,   0,0,1,\r\n            -.5, .5,-.5,   0,0,1,\r\n            .5, .5,-.5,   0,0,1,\r\n            -.5,-.5,-.5,   0,0,1,\r\n    \r\n            -.5,-.5, .5,   1,0,0,\r\n            .5,-.5, .5,   1,0,0,\r\n            .5, .5, .5,   1,0,0,\r\n            .5, .5, .5,   1,0,0,\r\n            -.5, .5, .5,   1,0,0,\r\n            -.5,-.5, .5,   1,0,0,\r\n        ]);\r\n    \r\n        const vertexBuffer = gl.createBuffer();\r\n        gl.bindBuffer(gl.ARRAY_BUFFER, vertexBuffer);\r\n        gl.bufferData(gl.ARRAY_BUFFER, vertexData, gl.STATIC_DRAW);\r\n        gl.vertexAttribPointer(0, 3, gl.FLOAT, false, 24, 0);\r\n        gl.vertexAttribPointer(1, 3, gl.FLOAT, false, 24, 12);\r\n        gl.enableVertexAttribArray(0);\r\n        gl.enableVertexAttribArray(1);\r\n        \r\n        const modelLoc = gl.getUniformLocation(program, 'uModel');\r\n        const viewLoc = gl.getUniformLocation(program, 'uView');\r\n        const projectionLoc = gl.getUniformLocation(program, 'uProjection');\r\n        const cameraLoc = gl.getUniformLocation(program, 'cameraProjection');\r\n\r\n        const model = mat4.create();\r\n        const view = mat4.create();\r\n        const projection = mat4.create();\r\n\r\n        mat4.rotateZ(model, model, 0.0);\r\n        mat4.scale(model, model, [.8, .8, .8]);\r\n        mat4.lookAt(view, [1,1,0], [0,0,0], [0,1,0]);\r\n\r\n        mat4.perspective(projection, Math.PI / 1.5, gl.canvas.width / gl.canvas.height, .1, 10);\r\n        // mat4.ortho(projection, -1,1, -1,1, -1,2);\r\n\r\n        gl.uniformMatrix4fv(viewLoc, false, view);\r\n        gl.uniformMatrix4fv(projectionLoc, false, projection);\r\n\r\n        const draw = () => {\r\n            requestAnimationFrame(draw);\r\n\r\n            // gl.viewport(0, 0, gl.canvas.width, gl.canvas.height);\r\n\r\n            // gl.enable(gl.CULL_FACE);\r\n            // gl.enable(gl.DEPTH_TEST);\r\n        \r\n            // // Clear the canvas AND the depth buffer.\r\n            // gl.clear(gl.COLOR_BUFFER_BIT | gl.DEPTH_BUFFER_BIT);\r\n            \r\n            this.cameraController.update();\r\n\r\n            mat4.rotate(model, model, 0.01, [0,0,1]);\r\n            gl.uniformMatrix4fv(modelLoc, false, model);\r\n            gl.uniformMatrix4fv(cameraLoc, false, this.cameraController.getMatrix);\r\n\r\n            gl.drawArrays(gl.TRIANGLES, 0, 36);\r\n        };\r\n\r\n        draw();\r\n    }\r\n    public destroy() {\r\n        // console.log('destroy!!');\r\n        this.divHost.removeChild(this.canvas);\r\n    }\r\n}"],"names":["Camera","constructor","width","height","cameraPosition","center","up","distance","viewMatrix","mat4","projectionMatrix","viewProjectionMatrix","zoomMax","zoomSpeed","near","far","mvpMatrix","eye","vec3","type","respectRatio","angleXY","Math","PI","angleZ","this","zoom","v","update","CameraPerspective","super","init","CameraOrth","projection","dst","scale","CameraController","solution","canvas","cameraOrth","cameraPerspective","camera","modelMatrix","rotation","translation","screen2","vec2","pos","isDown","arcRotation","appendEvent","createTransforms","rotateZ","val","translateX","getMatrix","shiftCamera","moveCamera","x","y","pan","sin","cos","zoomWheel","addEventListener","e","offsetX","offsetY","xOff","yOff","getBoundingClientRect","deltaY","window","k","key","modelMat","scaling","rotateXMat","rotateYMat","rotateZMat","translateMat","scaleMat","loadWGSL","async","fetch","path","then","response","text","catch","err","console","debug","vertPath","require","fragPath","Solution","id","divHost","ctx","device","format","size","pipelineObj","cameraController","document","getElementById","createElement","appendChild","clientWidth","clientHeight","vertShader","fragShader","gl","getContext","program","createProgram","vertexShader","createShader","VERTEX_SHADER","shaderSource","compileShader","attachShader","fragmentShader","FRAGMENT_SHADER","linkProgram","getProgramParameter","LINK_STATUS","log","getShaderInfoLog","useProgram","enable","DEPTH_TEST","vertexData","Float32Array","vertexBuffer","createBuffer","bindBuffer","ARRAY_BUFFER","bufferData","STATIC_DRAW","vertexAttribPointer","FLOAT","enableVertexAttribArray","modelLoc","getUniformLocation","viewLoc","projectionLoc","cameraLoc","model","view","uniformMatrix4fv","draw","requestAnimationFrame","drawArrays","TRIANGLES","destroy","removeChild"],"sourceRoot":""}