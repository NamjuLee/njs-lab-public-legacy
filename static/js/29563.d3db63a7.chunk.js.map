{"version":3,"file":"static/js/29563.d3db63a7.chunk.js","mappings":"kMAUO,MAAMA,EAGTC,YAAYC,GAAa,KAFlBC,aAAO,OACPC,cAAQ,EAEXC,KAAKF,QAAUG,SAASC,eAAeL,GAMvC,MAAMM,EAAMF,SAASG,cAAc,OAMnCJ,KAAKF,QAAQO,YAAYF,GAKzBH,KAAKD,SAAW,IAAIO,EAASH,EAIjC,CACOI,UAEH,IADAP,KAAKD,SAASQ,UACPP,KAAKF,QAAQU,kBAChBR,KAAKF,QAAQW,YAAYT,KAAKF,QAAQU,iBAE9C,EAIG,MAAMF,UAAiBI,EAAAA,GAI1Bd,YAAYE,GACRa,MAAMb,GAEN,KALJc,QAAoB,GAAE,KACtBC,SAAqB,GAKjBb,KAAKc,MACT,CACAC,aAEQC,EAAAA,GAAAA,IACAhB,KAAKiB,QAAQD,EAAAA,GAAAA,KAEbhB,KAAKiB,SAIb,CACAA,UAAyK,IAAjKC,EAAI,uDAAG,yJACXC,EAAAA,EAAAA,IAAcD,GAAME,MAAMC,IAGtBA,EAAIC,OAAS,KACTtB,KAAKuB,OAAOC,MAAQH,EAAIG,MACxBxB,KAAKuB,OAAOE,OAASJ,EAAII,OACzBzB,KAAK0B,IAAIC,UAAUN,EAAK,EAAG,GAE3BO,EAAiB5B,KAAK0B,KAItB1B,KAAK6B,OAAO,CACf,IAGL7B,KAAK8B,UAAW,CACpB,EAGJ,MAAMF,EAAmBb,UAGrB,MAAMgB,QAAgBC,EAAAA,GAAa,CAC/BC,aAAc,WACdC,aAAc,GACdC,WAAY,IAEVC,QAAqBL,EAAQM,cAAcX,EAAIH,OACjD,CACIe,mBAAoB,SACpBC,sBAAuB,GAEvBC,cAAe,KAKjBC,EAAUf,EAAIgB,aAAa,EAAG,EAAGhB,EAAIH,OAAOC,MAAOE,EAAIH,OAAOE,QAE9DkB,EAASjB,EAAIkB,gBAAgBlB,EAAIH,OAAOC,MAAOE,EAAIH,OAAOE,QAIhEW,EAAaS,KAAKC,SAAQ,CAACC,EAAOC,KAChB,IAAVD,IACAJ,EAAOE,KAAS,EAAJG,GAASP,EAAQI,KAAS,EAAJG,GAClCL,EAAOE,KAAS,EAAJG,EAAQ,GAAKP,EAAQI,KAAS,EAAJG,EAAQ,GAC9CL,EAAOE,KAAS,EAAJG,EAAQ,GAAKP,EAAQI,KAAS,EAAJG,EAAQ,GAC9CL,EAAOE,KAAS,EAAJG,EAAQ,GAAKP,EAAQI,KAAS,EAAJG,EAAQ,GAClD,IAGJtB,EAAIuB,aAAaN,EAAQ,EAAG,EAAE,C","sources":["njslab/Workshop/workshop-ml/Image-bg-Extraction/index.ts"],"sourcesContent":["\r\nimport * as tf from '@tensorflow/tfjs'\r\nimport { RendererCanvas, Vector3, remap, getImgFromURL } from '../../../../lib';\r\n\r\nimport '@tensorflow/tfjs-backend-webgl';\r\nimport * as bodyPix from '@tensorflow-models/body-pix';\r\nimport { PARAM } from 'App';\r\n\r\n// import { NVector3, MathUtility } from '../../../lib';\r\n\r\nexport class Solution {\r\n    public divHost: HTMLElement;\r\n    public renderer: Renderer;\r\n    constructor(id: string) {\r\n        this.divHost = document.getElementById(id);\r\n\r\n        // Center align\r\n        // this.divHost.style.display = 'flex';\r\n        // this.divHost.style.alignItems = 'center';\r\n\r\n        const div = document.createElement('div');\r\n        // div.style.marginLeft = 'auto';\r\n        // div.style.marginRight = 'auto';\r\n        // // div.style.width = '600px';\r\n        // // div.style.height = '350px';\r\n\r\n        this.divHost.appendChild(div);\r\n\r\n        // TODO\r\n        // You code goes here for one time operation\r\n\r\n        this.renderer = new Renderer(div);\r\n\r\n        // !! you should execute it for rendering\r\n        // this.start();\r\n    }\r\n    public destroy() {\r\n        this.renderer.destroy();\r\n        while (this.divHost.lastElementChild) {\r\n            this.divHost.removeChild(this.divHost.lastElementChild);\r\n        }\r\n    }\r\n}\r\n\r\n\r\nexport class Renderer extends RendererCanvas {\r\n\r\n    accList: number[] = []\r\n    lossList: number[] = []\r\n    constructor(divHost: HTMLDivElement) {\r\n        super(divHost);\r\n        // TODO\r\n        // You code goes here for one time operation\r\n        this.init();\r\n    }\r\n    async init() {\r\n\r\n        if (PARAM.url) {\r\n            this.loadImg(PARAM.url);\r\n        } else {\r\n            this.loadImg();\r\n        }\r\n\r\n\r\n    }\r\n    loadImg(path = 'https://images.unsplash.com/photo-1438761681033-6461ffad8d80?ixlib=rb-4.0.3&ixid=MnwxMjA3fDB8MHxzZWFyY2h8Mnx8cGVyc29ufGVufDB8fDB8fA%3D%3D&w=1000&q=80') {\r\n        getImgFromURL(path).then((img: HTMLImageElement) => {\r\n            // getImgFromURL('https://raw.githubusercontent.com/NamjuLee/data/master/img/person/Haram_small.jpg').then((img: HTMLImageElement) => {\r\n\r\n            img.onload = () => {\r\n                this.canvas.width = img.width\r\n                this.canvas.height = img.height\r\n                this.ctx.drawImage(img, 0, 0)\r\n\r\n                personExtraction(this.ctx)\r\n\r\n                // console.log('execute...');\r\n\r\n                this.start();\r\n            };\r\n            \r\n        });\r\n        this.isStatic = true;\r\n    }\r\n}\r\n\r\nconst personExtraction = async (ctx: CanvasRenderingContext2D) => {\r\n\r\n    // https://blog.tensorflow.org/2019/11/updated-bodypix-2.html\r\n    const network = await bodyPix.load({\r\n        architecture: 'ResNet50',\r\n        outputStride: 32,\r\n        quantBytes: 4\r\n    })\r\n    const segmentation = await network.segmentPerson(ctx.canvas,\r\n        {\r\n            internalResolution: 'medium',\r\n            segmentationThreshold: 0.9,\r\n            //@ts-ignore\r\n            scoreTreshold: 0.9\r\n        }\r\n    );\r\n\r\n\r\n    const imgData = ctx.getImageData(0, 0, ctx.canvas.width, ctx.canvas.height)\r\n    // https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/createImageData\r\n    const newImg = ctx.createImageData(ctx.canvas.width, ctx.canvas.height)\r\n\r\n    // for (let i = 0; i < segmentation.data.length; ++i) {\r\n    // const pixel = segmentation[i]\r\n    segmentation.data.forEach((pixel, i) => {\r\n        if (pixel === 1) {\r\n            newImg.data[i * 4] = imgData.data[i * 4]\r\n            newImg.data[i * 4 + 1] = imgData.data[i * 4 + 1]\r\n            newImg.data[i * 4 + 2] = imgData.data[i * 4 + 2]\r\n            newImg.data[i * 4 + 3] = imgData.data[i * 4 + 3]\r\n        }\r\n    });\r\n\r\n    ctx.putImageData(newImg, 0, 0)\r\n}\r\n\r\n"],"names":["Solution","constructor","id","divHost","renderer","this","document","getElementById","div","createElement","appendChild","Renderer","destroy","lastElementChild","removeChild","RendererCanvas","super","accList","lossList","init","async","PARAM","loadImg","path","getImgFromURL","then","img","onload","canvas","width","height","ctx","drawImage","personExtraction","start","isStatic","network","bodyPix","architecture","outputStride","quantBytes","segmentation","segmentPerson","internalResolution","segmentationThreshold","scoreTreshold","imgData","getImageData","newImg","createImageData","data","forEach","pixel","i","putImageData"],"sourceRoot":""}