{"version":3,"file":"static/js/75687.55bad115.chunk.js","mappings":"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","sources":["njslab/Infrastructure/WebGL/WebGL_NJS_Sandbox_01/Controller/index.ts","njslab/Infrastructure/WebGL/WebGL_NJS_Sandbox_01/Renderer/CameraController.ts","njslab/Infrastructure/WebGL/WebGL_NJS_Sandbox_01/Renderer/WebGPU.ts","njslab/Infrastructure/WebGL/WebGL_NJS_Sandbox_01/Renderer/index.ts","njslab/Infrastructure/WebGL/WebGL_NJS_Sandbox_01/Geometry/Base/index.ts","njslab/Infrastructure/WebGL/WebGL_NJS_Sandbox_01/Object/TriMeshUniform/index.ts","njslab/Infrastructure/WebGL/WebGL_NJS_Sandbox_01/lib/index.ts","njslab/Infrastructure/WebGL/WebGL_NJS_Sandbox_01/Scene/index.ts","njslab/Infrastructure/WebGL/WebGL_NJS_Sandbox_01/index.ts"],"sourcesContent":["import { App } from \"..\";\nexport class Controller {\n    app: App;\n    pos = [0, 0]\n    isDown = false\n    constructor(app: App) {\n        this.app = app;\n    }\n    public init() {\n        this.appendEvent();\n    }\n    public appendEvent() {\n        this.app.renderer.canvas.addEventListener('ondrag', (e: MouseEvent) => {\n            // console.log('click', e);\n        }, false);\n        this.app.renderer.canvas.addEventListener('click', (e: MouseEvent) => {\n            // console.log('click', e);\n        }, false);\n        this.app.renderer.canvas.addEventListener('dblclick', (e: MouseEvent) => {\n            // console.log('d-click', e);\n        }, false);\n        this.app.renderer.canvas.addEventListener('drag', (e: MouseEvent) => {\n            // console.log('drag', e);\n        }, true);\n        this.app.renderer.canvas.addEventListener('mouseup', (e: MouseEvent) => {\n            // console.log('mouse up', e);\n        }, false);\n        this.app.renderer.canvas.addEventListener('mousedown', (e: MouseEvent) => {\n            this.isDown = true;\n            this.pos[0] = e.offsetX;\n            this.pos[1] = e.offsetY;\n            // this.app.renderer.camera.translateX(0.25)\n            // this.app.renderer.cameraController.translateX();\n            // this.app.renderer.cameraController.rotateZ();\n            // console.log('pointer down', e);\n        }, false);\n        this.app.renderer.canvas.addEventListener('mouseup', (e: MouseEvent) => {\n            // console.log('pointer up', e);\n            this.isDown = false;\n        }, false);\n        this.app.renderer.canvas.addEventListener('mousemove', (e: MouseEvent) => {\n            if (this.isDown) {\n                // console.log('move dragging')\n                const xOff = this.pos[0] - e.offsetX;\n                const yOff = this.pos[1] - e.offsetY;\n\n                this.app.renderer.cameraController.arcRotation(xOff, yOff)\n                this.pos[0] = e.offsetX;\n                this.pos[1] = e.offsetY;\n\n            } else {\n                // console.log('move')\n            }\n\n            // console.log('mousemove', e);\n        }, false);\n        this.app.renderer.canvas.addEventListener('wheel', (e:  WheelEvent) => {\n            // console.log('wheel', e.deltaY);\n            this.app.renderer.cameraController.zoomWheel(e.deltaY)\n        }, false);\n    }\n}","import { vec2, vec3, mat4 } from 'gl-matrix';\nimport { } from '../lib';\n\nimport { Renderer } from '.';\n\nexport class CameraController {\n    public solution: Renderer;\n    public canvas: HTMLCanvasElement\n\n    public camera: Camera;\n\n    private modelMatrix: mat4 = mat4.create();\n    private mvpMatrix: mat4 = mat4.create();\n\n    // public vMatrix: mat4;\n    // public vpMatrix: mat4;\n    public rotation =vec3.fromValues(0, 0, 0); \n    public translation =vec3.fromValues(0, 0, 0); \n\n\n    // public projectionMatrix = mat4.create();\n\n    // public eye = vec3.fromValues(0,10,0);\n\n    public screen2 = vec2.fromValues(0, 0);\n\n    angleXY = 2.5;\n    angleZ = 0.6;\n    distance = 5;\n\n    constructor(solution: Renderer) {\n        this.solution = solution;\n        this.canvas = solution.canvas;\n\n        const eye = vec3.fromValues(2.6451475620269775, -3.130298137664795, 2.864337205886841);\n        const center = vec3.fromValues(0, 0, 0);\n        const up = vec3.fromValues(0, 0, 1);\n\n        this.camera = new Camera(this.canvas.width / this.canvas.height, eye, center, up);\n        this.update();\n    }\n    public zoomWheel(v: number) {\n        this.distance += v * 0.01;\n        this.arcRotation(0, 0);\n    }\n    public update() {\n        // mat4.lookAt(this.vMatrix, this.eye, this.center, this.up);\n        this.camera.update();\n\n        // mat4.multiply(this.camera.viewProjectionMatrix, this.camera.projectionMatrix, this.camera.viewMatrix);\n        createTransforms(this.modelMatrix, this.translation, this.rotation);\n        mat4.multiply(this.mvpMatrix, this.camera.viewProjectionMatrix, this.modelMatrix);\n        // console.log('camera updated...');\n    }\n    public rotateZ(val = 0.1) {\n        this.rotation[2] += val;\n        this.update();\n    }\n    public translateX(val = 0.1) {\n        this.translation[0] += val;\n        this.update();\n    }\n    public get getMatrix() {\n        return this.mvpMatrix;\n    }\n    public arcRotation(x: number, y: number) {\n        x = x * 0.01;\n        y = y * 0.01;\n        this.angleXY -= x;\n        this.angleZ -= y;\n        this.camera.eye[0] = this.camera.center[0] + (Math.sin(this.angleXY) * Math.cos(this.angleZ)) * this.distance;\n        this.camera.eye[1] = this.camera.center[1] + (Math.cos(this.angleXY) * Math.cos(this.angleZ)) * this.distance;\n        this.camera.eye[2] = this.camera.center[2] + (Math.sin(this.angleZ) * this.distance);\n        this.update();\n    }\n}\n\n\nexport class Camera {\n    public viewMatrix = mat4.create();\n    public projectionMatrix = mat4.create(); \n    public viewProjectionMatrix = mat4.create();\n\n    public zoomMax = 100;\n    public zoomSpeed = 2;\n\n    public near = 0.01;\n    public far = 10000;\n\n    public mvpMatrix = mat4.create();\n\n    public eye = vec3.fromValues(2.6451475620269775, -3.130298137664795, 2.864337205886841);\n    public center = vec3.fromValues(0, 0, 0);\n    public up = vec3.fromValues(0, 1, 0);\n\n    constructor(respectRatio = 1.0, cameraPosition:vec3 = [2, 2, 4], lookDirection:vec3 = [0, 0, 0],  upDirection:vec3 = [0, 1, 0]){\n        this.eye = cameraPosition;\n        this.center = lookDirection;\n        this.up = upDirection;\n\n        mat4.perspective(this.projectionMatrix, 2 * Math.PI / 5, respectRatio, this.near, this.far);\n        // mat4.ortho(this.projectionMatrix, 0, 0, 800, 800, -400 , 400);\n        // mat4.frustum(projectionMatrix, 0, 800, 800, 0, -400, 400);\n\n        this.update();\n    }\n    public update() {\n        mat4.lookAt(this.viewMatrix, this.eye, this.center, this.up);\n        mat4.multiply(this.viewProjectionMatrix, this.projectionMatrix, this.viewMatrix);\n\n        // createTransforms(this.modelMatrix, this.translation, this.rotation);\n        // mat4.multiply(this.mvpMatrix, this.viewProjectionMatrix, this.viewMatrix);\n    }\n}\n\nexport const createTransforms = (modelMat:mat4, translation:vec3 = [0,0,0], rotation:vec3 = [0,0,0], scaling:vec3 = [1,1,1]) => {\n    const rotateXMat = mat4.create();\n    const rotateYMat = mat4.create();\n    const rotateZMat = mat4.create();   \n    const translateMat = mat4.create();\n    const scaleMat = mat4.create();\n\n    //perform individual transformations\n    mat4.fromTranslation(translateMat, translation);\n    mat4.fromXRotation(rotateXMat, rotation[0]);\n    mat4.fromYRotation(rotateYMat, rotation[1]);\n    mat4.fromZRotation(rotateZMat, rotation[2]);\n    mat4.fromScaling(scaleMat, scaling);\n\n    //combine all transformation matrices together to form a final transform matrix: modelMat\n    mat4.multiply(modelMat, rotateXMat, scaleMat);\n    mat4.multiply(modelMat, rotateYMat, modelMat);        \n    mat4.multiply(modelMat, rotateZMat, modelMat);\n    mat4.multiply(modelMat, translateMat, modelMat);\n};","import { Renderer } from '.';\n\nexport enum PrimitiveTopology {\n    PointList = 'point-list',\n    LineList = 'line-list',\n    LineStrip = 'line-strip',\n    TriangleList = 'triangle-list',\n    TriangleStrip = 'triangle-strip',\n}\n\nexport class WebGPU {\n    public renderer: Renderer;\n\n    ctx: GPUCanvasContext;\n    device: GPUDevice;\n    format: GPUTextureFormat;\n\n    commandEncoder: GPUCommandEncoder;\n\n    PrimitiveTopology = PrimitiveTopology;\n\n\n    constructor(renderer: Renderer) {\n        this.renderer = renderer;\n    }\n    public async initWebGPU() {\n        if (!navigator.gpu) { throw new Error('Not Support WebGPU'); }\n        const adapter = await navigator.gpu.requestAdapter({\n            powerPreference: 'high-performance'\n            // powerPreference: 'low-power'\n        })\n        if (!adapter) { throw new Error('No Adapter Found'); }\n\n        const device = await adapter.requestDevice()\n        this.ctx = this.renderer.canvas.getContext('webgpu') as GPUCanvasContext\n        // this.format = navigator.gpu.getPreferredCanvasFormat ? navigator.gpu.getPreferredCanvasFormat() : this.ctx.getPreferredFormat(adapter)\n        this.format = \"bgra8unorm\";\n\n        this.ctx.configure({\n            device: device, \n            format: this.format,\n            // prevent chrome warning\n            alphaMode: 'opaque'\n        });\n\n        // this.size = { width: this.canvas.width, height: this.canvas.height }\n        this.device = device;\n\n    }\n    public destroy() {\n        this.device.destroy();\n    }\n}","import { App } from '..';\nimport { CameraController } from './CameraController';\nimport { WebGPU } from './WebGPU';\n\nexport class Renderer {\n    public app: App;\n    public canvas: HTMLCanvasElement;\n\n    public cameraController: CameraController;\n    public webGPU: WebGPU;\n\n    public isAnimation: boolean = true;\n    private requestAni: any;\n\n    constructor(app: App) {\n        this.app = app;\n\n        this.canvas = document.createElement('canvas');\n        this.canvas.width = this.app.divHost.clientWidth;\n        this.canvas.height = this.app.divHost.clientHeight;\n        this.app.divHost.appendChild(this.canvas);\n\n        this.canvas.addEventListener('resize', () => {\n            \n        })\n\n        this.webGPU = new WebGPU(this);\n    }\n    async init() {\n        await this.webGPU.initWebGPU();\n\n        this.cameraController = new CameraController(this);\n        this.requestAni = requestAnimationFrame(this.loop);\n    }\n\n    public loop = () => {\n        if (this.isAnimation) {\n            this.requestAni = requestAnimationFrame(this.loop);\n        }\n        // this.cameraController.update();\n        this.drawing();\n    }\n    public drawing() {\n        this.app.scene.render();\n    }\n    public destroy() {\n        this.webGPU.destroy();\n        // this.isAnimation = false;\n        cancelAnimationFrame(this.requestAni);\n        // this.requestAni = undefined;\n        while (this.app.divHost.lastElementChild) {\n            this.app.divHost.removeChild(this.app.divHost.lastElementChild);\n        }\n    }\n}\n\n","import { Scene } from '../../Scene';\nimport { WebGPU } from '../../Renderer/WebGPU';\nexport class ObjectBase {\n    public scene: Scene;\n    public webGPU: WebGPU;\n    constructor(scene: Scene) {\n        this.scene = scene;\n        this.webGPU = scene.app.renderer.webGPU;\n        this.scene.objects.push(this);\n\n    }\n    public async initPipeline() {\n\n    }\n    public update() {\n\n    }\n    public render() {\n\n    }\n}","import { loadWGSL } from '../../lib';\r\nimport { mat4, vec3 } from \"gl-matrix\";\r\n\r\nimport { Scene } from '../../Scene';\r\nimport { ObjectBase } from '../../Geometry/Base';\r\n\r\nconst shaderPath = require('./shaders.wgsl');\r\n\r\nexport class TriMeshUniform extends ObjectBase {\r\n\r\n\r\n    buffer: GPUBuffer\r\n    bufferLayout: GPUVertexBufferLayout\r\n    uniformBuffer;\r\n\r\n    pipeline;\r\n    bindGroup;\r\n\r\n    t = 0.0;\r\n\r\n    isRenderable= false;\r\n\r\n    constructor(scene: Scene) {\r\n        super(scene)\r\n\r\n        // x y r g b\r\n        const vertices: Float32Array = new Float32Array(\r\n            [\r\n                0.0,  0.0,  1.5, 1.0, 0.0, 0.0,\r\n                0.0, -1.5, -1.5, 0.0, 1.0, 0.0,\r\n                0.0,  1.5, -1.5, 0.0, 0.0, 1.0\r\n            ]\r\n        );\r\n\r\n        const usage: GPUBufferUsageFlags = GPUBufferUsage.VERTEX | GPUBufferUsage.COPY_DST;\r\n        //VERTEX: the buffer can be used as a vertex buffer\r\n        //COPY_DST: data can be copied to the buffer\r\n\r\n        const descriptor: GPUBufferDescriptor = {\r\n            size: vertices.byteLength,\r\n            usage: usage,\r\n            mappedAtCreation: true // similar to HOST_VISIBLE, allows buffer to be written by the CPU\r\n        };\r\n\r\n        this.buffer = this.webGPU.device.createBuffer(descriptor);\r\n\r\n        //Buffer has been created, now load in the vertices\r\n        new Float32Array(this.buffer.getMappedRange()).set(vertices);\r\n        this.buffer.unmap();\r\n\r\n        //now define the buffer layout\r\n        this.bufferLayout = {\r\n            arrayStride: 24,\r\n            // @ts-ignore\r\n            attributes: [\r\n                {\r\n                    shaderLocation: 0,\r\n                    format: \"float32x3\",\r\n                    offset: 0\r\n                },\r\n                {\r\n                    shaderLocation: 1,\r\n                    format: \"float32x3\",\r\n                    offset: 12\r\n                }\r\n            ]\r\n        }\r\n        this.initPipeline();\r\n    }\r\n    async initPipeline () {\r\n\r\n        this.uniformBuffer = this.webGPU.device.createBuffer({\r\n            size: 64 * 3,\r\n            usage: GPUBufferUsage.UNIFORM | GPUBufferUsage.COPY_DST\r\n        });\r\n\r\n        // const bindGroupLayout = this.webGPU.device.createBindGroupLayout({\r\n        //     entries: [],\r\n        // });\r\n\r\n        const bindGroupLayout = this.webGPU.device.createBindGroupLayout({\r\n            entries: [\r\n                {\r\n                    binding: 0,\r\n                    visibility: GPUShaderStage.VERTEX,\r\n                    buffer: {}\r\n                }\r\n            ]\r\n\r\n        });\r\n    \r\n        // this.bindGroup = this.webGPU.device.createBindGroup({\r\n        //     layout: bindGroupLayout,\r\n        //     entries: []\r\n        // });\r\n\r\n        this.bindGroup = this.webGPU.device.createBindGroup({\r\n            layout: bindGroupLayout,\r\n            entries: [\r\n                {\r\n                    binding: 0,\r\n                    resource: {\r\n                        buffer: this.uniformBuffer\r\n                    }\r\n                }\r\n            ]\r\n        });\r\n        \r\n        const pipelineLayout = this.webGPU.device.createPipelineLayout({\r\n            bindGroupLayouts: [bindGroupLayout]\r\n        });\r\n    \r\n        const shader = await loadWGSL(shaderPath);\r\n\r\n        this.pipeline = this.webGPU.device.createRenderPipeline({\r\n            vertex : {\r\n                module : this.webGPU.device.createShaderModule({\r\n                    // @ts-ignore\r\n                    code : shader\r\n                }),\r\n                entryPoint : \"vs_main\",\r\n                buffers: [this.bufferLayout,]\r\n            },\r\n    \r\n            fragment : {\r\n                module : this.webGPU.device.createShaderModule({\r\n                    // @ts-ignore\r\n                    code : shader\r\n                }),\r\n                entryPoint : \"fs_main\",\r\n                targets : [{\r\n                    format : this.webGPU.format\r\n                }]\r\n            },\r\n    \r\n            primitive : {\r\n                topology : \"triangle-list\"\r\n            },\r\n    \r\n            layout: pipelineLayout\r\n        });\r\n        this.isRenderable = true;\r\n    }\r\n    render() {\r\n        if (!this.isRenderable) { return; }\r\n\r\n        this.t += 0.01;\r\n        if (this.t > 2.0 * Math.PI) {\r\n            // this.t -= 2.0 * Math.PI;\r\n        }\r\n        \r\n\r\n        //make transforms\r\n        let projection = mat4.create();\r\n        // load perspective projection into the projection matrix,\r\n        // Field of view = 45 degrees (pi/4)\r\n        // Aspect ratio = 800/600\r\n        // near = 0.1, far = 10 \r\n        const fovy = Math.PI/4;\r\n        const aspect = this.webGPU.renderer.canvas.width/this.webGPU.renderer.canvas.height\r\n        const near = 0.1\r\n        const far = 10\r\n        mat4.perspective(projection, fovy, aspect, near,far );\r\n\r\n\r\n        let view = mat4.create();\r\n        // console.log(view)\r\n        //load lookat matrix into the view matrix,\r\n        //looking from [-2, 0, 2]\r\n        //looking at [0, 0, 0]\r\n        //up vector is [0, 0, 1]\r\n        const eye = vec3.fromValues(-2, 0, 2);\r\n        const center = vec3.fromValues(0, 0, 0);\r\n        const up = vec3.fromValues(0, 0, 1)\r\n        mat4.lookAt(view, eye, center, up);\r\n\r\n\r\n\r\n        \r\n        const model = mat4.create();\r\n        //Store, in the model matrix, the model matrix after rotating it by t radians around the z axis.\r\n        //(yeah, I know, kinda weird.)\r\n\r\n        // mat4.rotate(model, model, this.t, [0,1,0]);\r\n        mat4.translate(model, model, [Math.sin(this.t ),0,0]);\r\n\r\n        let hasCamera = true;\r\n        if (hasCamera){\r\n            projection = this.webGPU.renderer.cameraController.camera.projectionMatrix;\r\n            view = this.webGPU.renderer.cameraController.camera.viewMatrix;\r\n        } \r\n        \r\n\r\n        this.webGPU.device.queue.writeBuffer(this.uniformBuffer, 0, model as ArrayBuffer); \r\n        this.webGPU.device.queue.writeBuffer(this.uniformBuffer, 64, view as ArrayBuffer); \r\n        this.webGPU.device.queue.writeBuffer(this.uniformBuffer, 128, projection as ArrayBuffer); \r\n\r\n\r\n        //command encoder: records draw commands for submission\r\n        const commandEncoder : GPUCommandEncoder = this.webGPU.device.createCommandEncoder();\r\n        //texture view: image view to the color buffer in this case\r\n        const textureView : GPUTextureView = this.webGPU.ctx.getCurrentTexture().createView();\r\n        //renderpass: holds draw commands, allocated from command encoder\r\n        const renderpass : GPURenderPassEncoder = commandEncoder.beginRenderPass({\r\n            // @ts-ignore\r\n            colorAttachments: [{\r\n                view: textureView,\r\n                clearValue: {r: 0.0, g: 0.0, b: 0.0, a: 1.0},\r\n                loadOp: \"clear\",\r\n                storeOp: \"store\"\r\n            }]\r\n        });\r\n        // renderpass.setPipeline(this.pipeline);\r\n        // renderpass.setVertexBuffer(0, this.buffer);\r\n        // renderpass.setBindGroup(0, this.bindGroup)\r\n        // renderpass.draw(3, 1, 0, 0);\r\n        // renderpass.end();\r\n    \r\n        // this.webGPU.device.queue.submit([commandEncoder.finish()]);\r\n\r\n\r\n\r\n        renderpass.setPipeline(this.pipeline);\r\n        renderpass.setVertexBuffer(0, this.buffer);\r\n        renderpass.setBindGroup(0, this.bindGroup);\r\n        renderpass.draw(3, 1, 0, 0);\r\n        renderpass.end();\r\n    \r\n        this.webGPU.device.queue.submit([commandEncoder.finish()]);\r\n    }\r\n}","import { vec3, mat4 } from 'gl-matrix';\n\nexport const loadWGSL = async (path: string) => {\n    return fetch(`${path}`)\n        .then((response: Response) => {\n            return response.text();\n        }).catch((err: Error) => {\n            console.debug(err);\n        });\n\n}\n\nexport const createViewProjection = (respectRatio = 1.0, cameraPosition:vec3 = [2, 2, 4], lookDirection:vec3 = [0, 0, 0], \n    upDirection:vec3 = [0, 1, 0]) => {\n\n    const viewMatrix = mat4.create();\n    const projectionMatrix = mat4.create();       \n    const viewProjectionMatrix = mat4.create();\n\n    // mat4.perspective(projectionMatrix, 2 * Math.PI / 5, respectRatio, 0.1, 100.0);\n    mat4.ortho(projectionMatrix, 0, 0, 800, 800, -400 , 400);\n    // mat4.frustum(projectionMatrix, 0, 800, 800, 0, -400, 400);\n\n    mat4.lookAt(viewMatrix, cameraPosition, lookDirection, upDirection);\n    mat4.multiply(viewProjectionMatrix, projectionMatrix, viewMatrix);\n\n    const cameraOption = {\n        eye: cameraPosition,\n        center: lookDirection,\n        zoomMax: 100,\n        zoomSpeed: 2\n    };\n\n    return {\n        viewMatrix,\n        projectionMatrix,\n        viewProjectionMatrix,\n        cameraOption\n    }\n};\n\nexport const createTransforms = (modelMat:mat4, translation:vec3 = [0,0,0], rotation:vec3 = [0,0,0], scaling:vec3 = [1,1,1]) => {\n    const rotateXMat = mat4.create();\n    const rotateYMat = mat4.create();\n    const rotateZMat = mat4.create();   \n    const translateMat = mat4.create();\n    const scaleMat = mat4.create();\n\n    //perform individual transformations\n    mat4.fromTranslation(translateMat, translation);\n    mat4.fromXRotation(rotateXMat, rotation[0]);\n    mat4.fromYRotation(rotateYMat, rotation[1]);\n    mat4.fromZRotation(rotateZMat, rotation[2]);\n    mat4.fromScaling(scaleMat, scaling);\n\n    //combine all transformation matrices together to form a final transform matrix: modelMat\n    mat4.multiply(modelMat, rotateXMat, scaleMat);\n    mat4.multiply(modelMat, rotateYMat, modelMat);        \n    mat4.multiply(modelMat, rotateZMat, modelMat);\n    mat4.multiply(modelMat, translateMat, modelMat);\n};\n\nexport const createGPUBuffer = (device:GPUDevice, data:Float32Array, \n    usageFlag:GPUBufferUsageFlags = GPUBufferUsage.VERTEX | GPUBufferUsage.COPY_DST) => {\n    const buffer = device.createBuffer({\n        size: data.byteLength,\n        usage: usageFlag,\n        mappedAtCreation: true\n    });\n    new Float32Array(buffer.getMappedRange()).set(data);\n    buffer.unmap();\n    return buffer;\n};","import { App } from \"..\";\n\nimport { ObjectBase } from '../Geometry/Base';\n\n\nimport { Line } from '../Geometry/Line';\nimport { Tri } from '../Geometry/Tri';\nimport { TriangleMesh } from \"../Geometry/TriMesh\";\n\nimport { TriMeshUniform } from \"../Object/TriMeshUniform\";\nimport { SphereWire } from '../Object/SphereWire';\nimport { Box } from \"../Object/Box\";\nimport { BoxF } from \"../Object/BoxF\";\nimport { PolylineRandom } from \"../Object/PolylineRandom\";\n\nexport class Scene {\n    public app: App;\n    public objects: ObjectBase[] = [];\n    \n    public t = 0.0;\n    constructor(app: App) {\n        this.app = app;\n    }\n    async init() {\n        new TriMeshUniform(this);\n\n        // new Box(this);\n        // new BoxF(this);\n\n        // new SphereWire(this);\n\n        // new PolylineRandom(this);\n    }\n    public render() {\n\n        for (let i = 0 ; i < this.objects.length; ++i) {\n            this.objects[i].update();\n            this.objects[i].render();\n        }\n\n\n\n        if (this.t % 300 === 0) {\n            // new TriMeshUniform(this);\n        }\n\n        this.t+= 0.1;\n    }\n}","import { Controller } from './Controller';\r\nimport { Renderer } from './Renderer';\r\nimport { Scene } from './Scene';\r\n\r\n// https://www.youtube.com/playlist?list=PLn3eTxaOtL2Ns3wkxdyS3CiqkJuwQdZzn\r\n// https://www.youtube.com/playlist?list=PL_UrKDEhALdKh0118flOjuAnVIGKFUJXN\r\n\r\n// https://webgpufundamentals.org/\r\n// https://webgpu.github.io/webgpu-samples/\r\n\r\n// https://antongerdelan.net/opengl/raycasting.html\r\n\r\nexport class App {\r\n    public divHost: HTMLElement;\r\n\r\n    public controller: Controller;\r\n    public renderer: Renderer;\r\n    public scene: Scene;\r\n\r\n    constructor(id: string) {\r\n        this.divHost = document.getElementById(id);\r\n\r\n        this.renderer = new Renderer(this)\r\n        this.controller = new Controller(this);\r\n        this.scene = new Scene(this);\r\n\r\n        this.init();\r\n    }\r\n    public async init() {\r\n        this.controller.init();\r\n        await this.renderer.init();\r\n        await this.scene.init();\r\n    };\r\n    public destroy() {\r\n        this.renderer.destroy();\r\n        while (this.divHost.lastElementChild) {\r\n            this.divHost.removeChild(this.divHost.lastElementChild);\r\n        }\r\n    }\r\n}\r\n\r\n\r\nexport class Solution {\r\n    public app: App\r\n    constructor(id: string) {\r\n        this.app = new App(id)\r\n    }\r\n    public destroy() {\r\n        this.app.destroy();\r\n    }\r\n}"],"names":["Controller","constructor","app","pos","isDown","this","init","appendEvent","renderer","canvas","addEventListener","e","offsetX","offsetY","xOff","yOff","cameraController","arcRotation","zoomWheel","deltaY","CameraController","solution","camera","modelMatrix","mat4","mvpMatrix","rotation","vec3","translation","screen2","vec2","angleXY","angleZ","distance","eye","center","up","Camera","width","height","update","v","createTransforms","viewProjectionMatrix","rotateZ","val","translateX","getMatrix","x","y","Math","sin","cos","respectRatio","cameraPosition","lookDirection","upDirection","viewMatrix","projectionMatrix","zoomMax","zoomSpeed","near","far","PI","modelMat","scaling","rotateXMat","rotateYMat","rotateZMat","translateMat","scaleMat","PrimitiveTopology","WebGPU","ctx","device","format","commandEncoder","navigator","gpu","Error","adapter","requestAdapter","powerPreference","requestDevice","getContext","configure","alphaMode","destroy","Renderer","webGPU","isAnimation","requestAni","loop","requestAnimationFrame","drawing","document","createElement","divHost","clientWidth","clientHeight","appendChild","async","initWebGPU","scene","render","cancelAnimationFrame","lastElementChild","removeChild","ObjectBase","objects","push","shaderPath","require","TriMeshUniform","super","buffer","bufferLayout","uniformBuffer","pipeline","bindGroup","t","isRenderable","vertices","Float32Array","usage","GPUBufferUsage","VERTEX","COPY_DST","descriptor","size","byteLength","mappedAtCreation","createBuffer","getMappedRange","set","unmap","arrayStride","attributes","shaderLocation","offset","initPipeline","UNIFORM","bindGroupLayout","createBindGroupLayout","entries","binding","visibility","GPUShaderStage","createBindGroup","layout","resource","pipelineLayout","createPipelineLayout","bindGroupLayouts","shader","fetch","path","then","response","text","catch","err","console","debug","loadWGSL","createRenderPipeline","vertex","module","createShaderModule","code","entryPoint","buffers","fragment","targets","primitive","topology","projection","fovy","aspect","view","model","queue","writeBuffer","createCommandEncoder","textureView","getCurrentTexture","createView","renderpass","beginRenderPass","colorAttachments","clearValue","r","g","b","a","loadOp","storeOp","setPipeline","setVertexBuffer","setBindGroup","draw","end","submit","finish","Scene","i","length","App","id","controller","getElementById","Solution"],"sourceRoot":""}