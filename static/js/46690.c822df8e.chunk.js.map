{"version":3,"file":"static/js/46690.c822df8e.chunk.js","mappings":"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","sources":["njslab/Workshop/workshop-ml/TSNE-Viz/Graph.ts"],"sourcesContent":["import { NVector3 } from '../../../../lib/NJSCore';\r\n\r\nexport class Graph {\r\n\r\n    nodes: Node[] = [];\r\n    edges: Edge[] = [];\r\n    dt: number = 0.0;\r\n\r\n    mouse: NVector3 = new NVector3(0, 0);\r\n\r\n    damping = 0.96;\r\n    gravity = -0.032;\r\n    timeStep = 0.16; // 0.316; // 0.18; // 0.26;\r\n    groundZ = -9.26;\r\n\r\n    capture: Node | undefined = undefined;\r\n\r\n    constructor() {\r\n        // \r\n    }\r\n    Init(width: number, height: number) {\r\n        this.InitGridR(width, height);\r\n        this.nodes[0].fixed = true;\r\n        this.nodes[9].fixed = true;\r\n        this.nodes[this.nodes.length - 1].fixed = true;\r\n        this.nodes[this.nodes.length - 1 - 9].fixed = true;\r\n    }\r\n    updateOptionA(v: number) {\r\n        this.damping = v * 0.1;\r\n        console.log(this.damping, 'damping');\r\n    }\r\n    updateOptionB(v: number) {\r\n        this.timeStep = v * 0.05;\r\n        console.log(this.timeStep, 'timeStep');\r\n    }\r\n    updateOptionC(v: number) {\r\n        // this.gravity = v * 0.1;\r\n        // console.log(this.gravity, 'gravity');\r\n    }\r\n    shrinkage(id: number, v: number) {\r\n        this.nodes[id].fixed = true;\r\n        for (let i = 0; i < this.nodes[id].edge.length; ++i) {\r\n            this.nodes[id].edge[i].targetLengthShrinkage(v)\r\n        }\r\n    }\r\n    InitGridR(width: number, height: number, xNum: number = 10, yNum: number = 10) {\r\n        const xOff = 0;\r\n        const yOff = 0;\r\n        const xInterval = (width / xNum) + 1;\r\n        const yInterval = (height / yNum) + 1;\r\n        const nbase = this.nodes.length;\r\n        for (let i = 0; i < yNum; ++i) {\r\n            for (let j = 0; j < xNum; ++j) {\r\n                let x = xOff + xInterval * j - width * 0.5;\r\n                let y = yOff + yInterval * i - height * 0.5;\r\n                this.AddNode(x, 0, y, NVector3.Zero(), 1.0);\r\n                // this.nodes.push(new Node(new NVector3(x, y), new NVector3(0, 0), 1));\r\n            }\r\n        }\r\n        for (let j = 0; j < yNum; ++j) {\r\n            for (let i = 0; i < xNum; ++i) {\r\n                let k = j * xNum + i;\r\n\r\n                if (i !== 0) { this.AddEdge(this.nodes[nbase + k - 1], this.nodes[nbase + k]); }\r\n                if (j !== 0) { this.AddEdge(this.nodes[nbase + k - xNum], this.nodes[nbase + k]); }\r\n\r\n                // if (i !== 0 && j !== 0) {this.AddEdge(this.nodes[nbase + k - xNum - 1], this.nodes[nbase + k]); }\r\n\r\n                // if (i !== 0 && j !== yNum - 1) {this.AddEdge(this.nodes[nbase + k + xNum - 1], this.nodes[nbase + k]); }\r\n            }\r\n        }\r\n    }\r\n    public Clear() {\r\n        this.nodes = [];\r\n        this.edges = [];\r\n    }\r\n    public AddNode(x: number, y: number, z: number, _u0: NVector3 = new NVector3(0, 0, 0), _mass: number = 1): Node {\r\n        const n = new Node(new NVector3(x, y, z), _u0, _mass);\r\n        this.nodes.push(n);\r\n        n.id = this.nodes.length - 1;\r\n        return n;\r\n    }\r\n    public AddEdge(n0: Node, n1: Node): Edge {\r\n        const e = new Edge(n0, n1);\r\n        n0.edge.push(e);\r\n        n1.edge.push(e);\r\n        this.edges.push(e);\r\n        return e;\r\n    }\r\n    MouseMove(x: number, y: number) {\r\n        this.mouse.x = x;\r\n        this.mouse.y = y;\r\n        // console.log('move', x, y);\r\n    }\r\n    MouseDClick(x: number, y: number) {\r\n        this.mouse.x = x;\r\n        this.mouse.y = y;\r\n        const n = this.FindNode(this.mouse);\r\n        if (n) {\r\n            n.fixed = !n.fixed;\r\n        }\r\n        // console.log('click', x, y);\r\n    }\r\n    MouseDown(x: number, y: number) {\r\n        this.mouse.x = x;\r\n        this.mouse.y = y;\r\n        this.capture = this.FindNode(this.mouse);\r\n        if (this.capture) {\r\n            this.capture.fixed = true;\r\n            this.capture.isCapture = true;\r\n        }\r\n        console.log('down', x, y, this.capture);\r\n    }\r\n    MouseLeftClick(x: number, y: number) {\r\n        console.log('click', x, y, this.capture);\r\n    }\r\n    MouseUp(x: number, y: number) {\r\n        this.mouse.x = x;\r\n        this.mouse.y = y;\r\n        if (this.capture) {\r\n            this.capture.isCapture = false;\r\n            this.capture = undefined;\r\n        }\r\n        console.log('up', x, y);\r\n    }\r\n    MouseDrag(x: number, y: number) {\r\n        this.mouse.x = x;\r\n        this.mouse.y = y;\r\n        if (this.capture) {\r\n            this.capture.v.x = x;\r\n            this.capture.v.y = y;\r\n        }\r\n        console.log('drag', x, y);\r\n    }\r\n    Render(ctx?: CanvasRenderingContext2D) {\r\n\r\n        this.dt += 0.1;\r\n        this.Move(this.mouse.x, this.mouse.y, this.mouse.z, this.damping, 0, this.timeStep, this.groundZ, 1);\r\n\r\n        // for (let e of this.edges) { e.Render(ctx); }\r\n        // for (let n of this.nodes) { n.Render(ctx, this.mouse); }\r\n    }\r\n    FindNode(mv: NVector3) {\r\n        for (let n of this.nodes) {\r\n            if (n.v.Distance(mv) < n.m + 3) {\r\n                return n;\r\n            }\r\n        }\r\n        return undefined;\r\n    }\r\n    public Move(x: number, y: number, z: number, damping: number, g: number = 0, dt: number = 0.01, groundZ: number = -10, step: number = 1) {\r\n        const atr = new NVector3(x, y, z);\r\n        for (let i = 0; i < step; ++i) {\r\n            for (const n of this.nodes) {\r\n\r\n                // const dv: NVector3 = atr - n.p;\r\n                //  L = dv.Length;\r\n                // dv.Unitize();\r\n                // n.f = dv * Math.Exp(-0.1 * L * L) * 0.1 + Vector3d.ZAxis * g;\r\n\r\n                const dv = NVector3.Sub(atr, n.v);\r\n                const L = dv.Length();\r\n                dv.Unitize();\r\n                n.f = NVector3.Add(NVector3.Scale(dv, Math.exp(-0.1 * L * L) * 0.1), (NVector3.Scale(NVector3.YAxis(), g)));\r\n            }\r\n            for (const e of this.edges) { e.ApplySpringForce(); }\r\n            for (const n of this.nodes) { n.Move(dt, damping, groundZ); }\r\n        }\r\n    }\r\n}\r\nexport class Edge {\r\n    n0: Node;\r\n    n1: Node;\r\n    public targetLength: number = 0.0;\r\n    public isModified = false;\r\n    public springConstant: number = 0.8; // 1; // 0.8;\r\n    private _targetLengthOriginal = 0;\r\n    constructor(n0: Node, n1: Node) {\r\n        this.n0 = n0;\r\n        this.n1 = n1;\r\n        this.targetLength = this.n0.v.Distance(this.n1.v) * 0.95;\r\n        this._targetLengthOriginal = this.targetLength;\r\n    }\r\n    Render(ctx: CanvasRenderingContext2D) {\r\n        ctx.strokeStyle = '#ff0000';\r\n\r\n        if (NVector3.Distance(this.n0.v, this.n1.v) < this.targetLength * 2) {\r\n\r\n            ctx.strokeStyle = '#0000ff';\r\n            // this.n0.isShort = true;\r\n            // this.n1.isShort = true;\r\n        }\r\n\r\n        ctx.beginPath();\r\n        ctx.moveTo(this.n0.v.x, this.n0.v.y);\r\n        ctx.lineTo(this.n1.v.x, this.n1.v.y);\r\n        ctx.closePath();\r\n        ctx.stroke();\r\n    }\r\n    targetLengthShrinkage(n: number) {\r\n        if (!this.isModified) {\r\n            this.isModified = true;\r\n            this.targetLength *= n;\r\n        }\r\n    }\r\n\r\n    public ApplySpringForce() {\r\n        // Vector3d dp = n1.p - n0.p;\r\n        // double dist = dp.Length;\r\n        // dp.Unitize();\r\n\r\n        // n0.f += dp * (dist - TargetLength) * SpringConstant;\r\n        // n1.f -= dp * (dist - TargetLength) * SpringConstant;\r\n\r\n        // const dp: NVector3 = NVector3.Sub(this.n1.p, this.n0.p);\r\n        // const dist:number = dp.Length();\r\n        // dp.Unitize();\r\n\r\n        let dp = NVector3.Sub(this.n1.v, this.n0.v);\r\n        let dist = dp.Length();\r\n        dp.Unitize();\r\n\r\n        const length = NVector3.Scale(dp, (dist - this.targetLength) * this.springConstant);\r\n        this.n0.f = NVector3.Add(this.n0.f, length);\r\n        this.n1.f = NVector3.Sub(this.n1.f, length);\r\n\r\n    }\r\n}\r\nexport class Node {\r\n    public id: number = -1;\r\n    public edge: Edge[] = [];\r\n    public nNodes: Node[] = [];\r\n    public v: NVector3 = NVector3.Origin();\r\n    public f: NVector3 = NVector3.Origin();\r\n    public u: NVector3 = NVector3.Origin();\r\n    public m: number = 0.0;\r\n\r\n    public fixed: boolean = false;\r\n    public isCapture: boolean = false;\r\n    constructor(_p0: NVector3, _u0: NVector3, _mass: number) {\r\n        this.v = new NVector3(_p0.x, _p0.y, _p0.z);\r\n        this.u = new NVector3(_u0.x, _u0.y, _u0.z);\r\n        this.m = _mass;\r\n    }\r\n    public Move(dt: number, damping: number, groundZ: number = 0.0) {\r\n        if (this.fixed || this.isCapture) { return; }\r\n\r\n        // u *= damping;\r\n        // u += f * (dt / m);\r\n        // p += u * dt;\r\n\r\n        // this.u = NVector3.Scale(this.u , damping );\r\n        // this.u = NVector3.Add( this.u,  NVector3.Scale(this.f, dt / this.m));\r\n        // this.p  = NVector3.Add(this.p, NVector3.Scale(this.u, dt));\r\n\r\n        this.u.Mult(damping);\r\n        this.u.Add(NVector3.Scale(this.f, dt / this.m));\r\n\r\n        const v = NVector3.Scale(this.u, dt);\r\n        // this.v.Add( );\r\n        this.v.x += v.x;\r\n        this.v.y += v.y;\r\n\r\n        // if (this.p.y < groundZ) {\r\n        //     this.p.y = groundZ;\r\n        //     if (this.u.y < 0.0) {this.u.y = -this.u.y; }\r\n        // }\r\n    }\r\n    Render(ctx: CanvasRenderingContext2D, m: NVector3) {\r\n        ctx.beginPath();\r\n\r\n        if (m.Distance(this.v) < this.m + 3) {\r\n            ctx.fillStyle = '#000000';\r\n            ctx.arc(this.v.x, this.v.y, this.m + 6, 0.0, Math.PI * 2);\r\n        } else {\r\n            ctx.fillStyle = '#f90000';\r\n            ctx.arc(this.v.x, this.v.y, this.m + 3, 0.0, Math.PI * 2);\r\n        }\r\n\r\n        if (this.fixed) {\r\n            ctx.fillStyle = '#000000';\r\n            ctx.arc(this.v.x, this.v.y, this.m + 7.5, 0.0, Math.PI * 2);\r\n        }\r\n\r\n        ctx.closePath();\r\n        ctx.fill();\r\n    }\r\n}"],"names":["Graph","constructor","nodes","edges","dt","mouse","NVector3","damping","gravity","timeStep","groundZ","capture","undefined","Init","width","height","this","InitGridR","fixed","length","updateOptionA","v","console","log","updateOptionB","updateOptionC","shrinkage","id","i","edge","targetLengthShrinkage","xNum","yNum","xInterval","yInterval","nbase","j","x","y","AddNode","k","AddEdge","Clear","z","_u0","_mass","n","Node","push","n0","n1","e","Edge","MouseMove","MouseDClick","FindNode","MouseDown","isCapture","MouseLeftClick","MouseUp","MouseDrag","Render","ctx","Move","mv","Distance","m","g","step","atr","dv","L","Length","Unitize","f","Math","exp","ApplySpringForce","targetLength","isModified","springConstant","_targetLengthOriginal","strokeStyle","beginPath","moveTo","lineTo","closePath","stroke","dp","dist","_p0","nNodes","u","Mult","Add","fillStyle","arc","PI","fill"],"sourceRoot":""}