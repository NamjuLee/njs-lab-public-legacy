{"version":3,"file":"static/js/97261.74eb5df1.chunk.js","mappings":"6JAGO,MAAMA,UAAiBC,EAAAA,GAM1BC,YAAYC,GACRC,MAAMD,GAAI,KALdE,UAAwB,GAAG,KAC3BC,OAAmB,GAAG,KACtBC,MAAkB,EAIlB,CACOC,WAIH,MAAMC,EACO,UADPA,EAEM,UAFNA,EAGS,UAHTA,EAIQ,UAJRA,EAKS,WAIfC,EAAAA,EAAAA,gBAAeC,iDAA2DC,MAAMC,IAC5E,IAAIC,EAAS,EACTC,EAAS,EACTC,EAAQ,EAEZ,IAAK,IAAIC,EAAI,EAAIA,EAAIJ,EAAY,SAAEK,SAAUD,EAAG,CAC5C,MAAME,EAAMN,EAAY,SAAEI,GAAa,SAAe,YAEtDG,KAAKf,UAAUgB,KAAKF,GACpBL,GAAUK,EAAI,GACdJ,GAAUI,EAAI,GACdH,IAEAI,KAAKb,MAAMc,KAAKR,EAAY,SAAEI,GAAe,WAAQ,MAErD,MAAMK,EAAiBT,EAAY,SAAEI,GAAe,WAAS,MAE7D,GAAIK,EAAKC,SAAS,QACdH,KAAKd,OAAOe,KAAKZ,OACd,IAAIa,EAAKC,SAAS,OAAQ,CAC7BH,KAAKd,OAAOe,KAAKZ,GAAuB,QAC5C,CAAO,GAAIa,EAAKC,SAAS,UAAW,CAChCH,KAAKd,OAAOe,KAAKZ,GAA0B,QAC/C,CAAO,GAAIa,EAAKC,SAAS,SAAU,CAC/BH,KAAKd,OAAOe,KAAKZ,GAAyB,QAC9C,CACIW,KAAKd,OAAOe,KAAKZ,EACrB,CAEJ,CACAW,KAAKI,OAAOV,EAASE,EAAOD,EAASC,GAErCI,KAAKK,OAAO,GAEpB,CACOC,OAAOC,GAIV,IAAK,IAAIV,EAAI,EAAGA,EAAIG,KAAKf,UAAUa,SAAUD,EAAG,CAC5C,MAAMW,EAAYR,KAAKS,SAAST,KAAKf,UAAUY,GAAG,GAAIG,KAAKf,UAAUY,GAAG,IACxEa,EAAYH,EAAKC,EAAU,GAAIA,EAAU,GAAIR,KAAKW,KAAMX,KAAKd,OAAOW,IACpEe,EAAWL,EAAKC,EAAU,GAAIA,EAAU,GAAIR,KAAKb,MAAMU,GAAIG,KAAKd,OAAOW,GAC3E,CAIJ,EAEJ,MAAMa,EAAc,CAACH,EAA+BM,EAAWC,EAAWC,EAAWC,KACjFT,EAAIU,UAAYD,EAChBT,EAAIW,YAAc,OAClBX,EAAIY,UAAY,IAChBZ,EAAIa,YACJb,EAAIc,IAAIR,EAAGC,EAA6B,GAAzBQ,KAAKC,IAAQ,GAAJR,GAAW,GAAQ,EAAa,EAAVO,KAAKE,IACnDjB,EAAIkB,YACJlB,EAAImB,OACJnB,EAAIoB,QAAQ,EAEVf,EAAa,CAACL,EAA+BM,EAAWC,EAAWc,EAAcZ,KACnFT,EAAIW,YAAcF,EAClBT,EAAIY,UAAY,GAChBZ,EAAIsB,WAAWD,EAAMf,EAAI,GAAIC,EAAE,C","sources":["njslab/Workshop/workshop-mapping/09_JSON/index.ts"],"sourcesContent":["import { RendererJSAPI } from '../../../../lib'\r\nimport { getJSONFromURL } from 'njscore';\r\n\r\nexport class Solution extends RendererJSAPI {\r\n\r\n    locations: number[][] = [];\r\n    colors: string[] = [];\r\n    names: string[] = [];\r\n\r\n    constructor(id: string) {\r\n        super(id);\r\n    }\r\n    public initPost(): void {\r\n        // TODO\r\n        // You code goes here for one time operation\r\n\r\n        const colorsTempate = {\r\n            'blue' : \"#0683d2\",\r\n            'red' : \"#ec2f3d\",\r\n            'orange' : \"#ff961e\",\r\n            'green' : \"#049564\",\r\n            'silver' : \"#959597\",\r\n        }\r\n\r\n        \r\n        getJSONFromURL(process.env.PUBLIC_URL + '/static/data/MBTA_stop.geojson').then((d) => {\r\n            let lonSum = 0;\r\n            let latSum = 0;\r\n            let count = 0;\r\n\r\n            for (let i = 0 ; i < d['features'].length; ++i) {\r\n                const loc = d['features'][i]['geometry']['coordinates'];\r\n\r\n                this.locations.push(loc);\r\n                lonSum += loc[0];\r\n                latSum += loc[1];\r\n                count++;\r\n\r\n                this.names.push(d['features'][i]['properties']['name']);\r\n\r\n                const line: string[] = d['features'][i]['properties']['lines'];\r\n\r\n                if (line.includes('blue')) {\r\n                    this.colors.push(colorsTempate['blue']);\r\n                } else if (line.includes('red')) {\r\n                    this.colors.push(colorsTempate['red']); continue;\r\n                } else if (line.includes('orange')) {\r\n                    this.colors.push(colorsTempate['orange']); continue;\r\n                } else if (line.includes('green')) {\r\n                    this.colors.push(colorsTempate['green']); continue;\r\n                } else {\r\n                    this.colors.push(colorsTempate['silver']);\r\n                }\r\n\r\n            }\r\n            this.center(lonSum / count, latSum / count);\r\n\r\n            this.start();\r\n        });\r\n    }\r\n    public render(ctx: CanvasRenderingContext2D): void {\r\n        // TODO\r\n        // You code goes here for the rending loop\r\n\r\n        for (let i = 0; i < this.locations.length; ++i) { \r\n            const projected = this.toScreen(this.locations[i][0], this.locations[i][1]); \r\n            renderPoint(ctx, projected[0], projected[1], this.time, this.colors[i]);\r\n            renderText(ctx, projected[0], projected[1], this.names[i], this.colors[i]);\r\n        }\r\n\r\n        // // !! can stop render after this frame.\r\n        // this.isStatic = true;\r\n    }\r\n}\r\nconst renderPoint = (ctx: CanvasRenderingContext2D, x: number, y: number, t: number, color: string) => {\r\n    ctx.fillStyle = color;\r\n    ctx.strokeStyle = '#fff';\r\n    ctx.lineWidth = 0.75;\r\n    ctx.beginPath();\r\n    ctx.arc(x, y, (Math.sin(t * 0.8) + 4) * 2, 0, Math.PI * 2);\r\n    ctx.closePath();\r\n    ctx.fill();\r\n    ctx.stroke();\r\n};\r\nconst renderText = (ctx: CanvasRenderingContext2D, x: number, y: number, name: string, color: string) => {\r\n    ctx.strokeStyle = color;\r\n    ctx.lineWidth = 0.5;\r\n    ctx.strokeText(name, x + 13, y);\r\n};\r\n\r\n\r\n"],"names":["Solution","RendererJSAPI","constructor","id","super","locations","colors","names","initPost","colorsTempate","getJSONFromURL","process","then","d","lonSum","latSum","count","i","length","loc","this","push","line","includes","center","start","render","ctx","projected","toScreen","renderPoint","time","renderText","x","y","t","color","fillStyle","strokeStyle","lineWidth","beginPath","arc","Math","sin","PI","closePath","fill","stroke","name","strokeText"],"sourceRoot":""}