{"version":3,"file":"static/js/28902.915deca5.chunk.js","mappings":"kJAGO,MAAMA,EAQTC,YAAYC,GAAa,KAPlBC,cAAQ,OACRC,UAAI,OAEJC,SAAG,OAEHC,WAAK,EAGRC,KAAKF,IAAMG,SAASC,eAAeP,GAO/BK,KAAKJ,SAAW,IAAIO,EAAAA,GAAcR,GAGtCK,KAAKI,MACT,CACOA,OACH,OAAO,iCAQLC,MAAK,IAAgB,IAAf,MAAEC,GAAO,EACbN,KAAKD,MAAQ,IAAIO,EACjBN,KAAKJ,SAASW,cAAgB,IAAMP,KAAKQ,QAAQ,IAClDC,OAAOC,IACNC,QAAQC,IAAI,sBAAuBD,QAAQC,IAAIF,EAAI,GAG3D,CACOF,SACHR,KAAKD,MAAMc,QAEf,CACOC,UACHd,KAAKJ,SAASkB,SAClB,E","sources":["njslab/Workshop/workshop-vector-Sandbox/workshop-vector-sandbox.ts"],"sourcesContent":["import SandboxVector from './NRenderer';\r\nimport { View } from './UI';\r\n\r\nexport class Solution {\r\n    public renderer: SandboxVector;\r\n    public view: View;\r\n\r\n    public div: HTMLDivElement;\r\n\r\n    public scene: any;\r\n\r\n    constructor(id: string) {\r\n        this.div = document.getElementById(id) as HTMLDivElement;\r\n\r\n        let needUI = false;\r\n        if (needUI) {\r\n            this.view = new View(this);\r\n            this.renderer = new SandboxVector(this.view.renderId);\r\n        } else {\r\n            this.renderer = new SandboxVector(id);\r\n        }\r\n\r\n        this.init();\r\n    }\r\n    public init() {\r\n        return import(\r\n            // './Scene/01_Point'\r\n            // './Scene/02_Points'\r\n            // './Scene/03_Line'\r\n            // './Scene/04_Arrow'\r\n            // './Scene/05_ArrowTwoPts'\r\n            './Scene/06_Spline'\r\n            // './Scene/02_Line'\r\n        ).then(({ Scene }) => {\r\n            this.scene = new Scene();\r\n            this.renderer.updateBinding = () => this.render();\r\n        }).catch((err) => {\r\n            console.log('Stop loading Apps.'); console.log(err);\r\n        });\r\n\r\n    }\r\n    public render() {\r\n        this.scene.update();\r\n\r\n    }\r\n    public destroy() {\r\n        this.renderer.destroy();\r\n    }\r\n\r\n}\r\n\r\n// class SandboxVectorImplementation extends SandboxVector {\r\n//     constructor(id: string) {\r\n//         super(id);\r\n//         this.start();\r\n//     }\r\n//     // ................................ global variable\r\n//     t: number = 0.0;\r\n//     m: number[] = [0, 0];\r\n//     pts: NPoint[] = [];\r\n//     lns: NLine[] = [];\r\n\r\n//     public start() {\r\n//         // ................................ start\r\n\r\n//         // const p = new Point(0,0,5, 3,0,2);\r\n//         // // p.force = new Vector3(0.0, 0.0, -9.81)\r\n//         // this.pts.push(p);\r\n//         // this.scene.addPoint(p)\r\n\r\n//         // const p2 = new Point(0,0,6, 1,0,2);\r\n//         // // p.force = new Vector3(0.0, 0.0, -9.81)\r\n//         // this.pts.push(p2);\r\n//         // this.scene.addPoint(p2)\r\n\r\n\r\n//         // const ln = new Line(p, p2);\r\n//         // // p.force = new Vector3(0.0, 0.0, -9.81)\r\n//         // this.lns.push(ln);\r\n//         // this.scene.addLine(ln)\r\n\r\n//         const p = new Point3(3 ,3 ,0);\r\n\r\n//         const p0 = new Point3(3 ,2 ,0);\r\n//         new Point3(3 ,1 ,0);\r\n//         new Point3(3 ,4 ,0);\r\n//         console.log(p, p0)\r\n\r\n\r\n//         // for(let i = -10; i < 25; i++) {\r\n//         //     for(let j = -10; j < 10; j++) {\r\n//         //         const p = new NPoint(i ,j ,Math.sin(i * j * 0.1) + 10 );\r\n//         //         this.pts.push(p);\r\n//         //         this.scene.addPoint(p);\r\n//         //     }\r\n//         // }\r\n\r\n\r\n//         // for(let i = 0 ; i < this.pts.length - 1; ++i) {\r\n//         //     const line = new NLine(this.pts[i], this.pts[i+1]);\r\n//         //     // p.force = new Vector3(0.0, 0.0, -9.81)\r\n//         //     this.lns.push(line);\r\n//         //     this.scene.addLine(line);\r\n//         // }\r\n//     }\r\n//     public update() {\r\n//         // ................................ update loop\r\n//         // this.pts.forEach((v)=>{\r\n//         //     v.move(this.t, 0.985)\r\n//         // });\r\n\r\n//         this.t +=0.0001\r\n//     }\r\n//     // ................................ event\r\n//     public onMouseMove(e): void {\r\n//         // console.log('move', e)\r\n\r\n//     }\r\n//     public onMouseClick(e): void {\r\n//         this.common.pick()\r\n\r\n//         // console.log(e)\r\n\r\n//         // const v = new Point(x, y, 0);\r\n//         // console.log(v)\r\n//         // this.pts.push(v);\r\n//         // console.log('ddd')\r\n\r\n//         // console.log(this.sandboxVector.m)\r\n\r\n//         // const v = this.sandboxVector.m;\r\n//         // const p = new Point(v.x, v.z, v.y)\r\n//         // this.pts.push(p);\r\n//         // this.sandboxVector.addPoint(p);\r\n\r\n//         // if (e.intersect?.ground && e.intersect.ground[0].point) {\r\n//         //     this.addPoint(e.intersect.ground[0].point)\r\n//         // }\r\n//     }\r\n//     public addPoint(v) {\r\n//         const p = new NPoint(v.x, v.y, v.z, 0, 0, 10);\r\n//         this.pts.push(p);\r\n//         this.scene.addPoint(p)\r\n//     }\r\n// }\r\n// ...........................................................\r\n"],"names":["Solution","constructor","id","renderer","view","div","scene","this","document","getElementById","SandboxVector","init","then","Scene","updateBinding","render","catch","err","console","log","update","destroy"],"sourceRoot":""}