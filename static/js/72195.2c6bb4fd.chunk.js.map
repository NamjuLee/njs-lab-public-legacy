{"version":3,"file":"static/js/72195.2c6bb4fd.chunk.js","mappings":"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","sources":["njslab/Workshop/workshop-graph/06_Graph-edge-split/index.ts"],"sourcesContent":["import { RendererCanvas } from '../../../../lib';\r\n\r\nexport class Solution extends RendererCanvas {\r\n    divText: HTMLDivElement\r\n    graph: Graph;\r\n    m = new Vector3(0, 0, 0)\r\n\r\n    needPopulate = false\r\n    constructor(id: string) {\r\n        super(document.getElementById(id) as HTMLDivElement);\r\n\r\n        this.canvas.style.position = 'absolute'\r\n        const divMenu = document.createElement('div');\r\n        divMenu.style.position = 'absolute'\r\n        this.divHost.appendChild(divMenu);\r\n\r\n        const divBtn = document.createElement('button');\r\n        divBtn.textContent = 'run'\r\n        divBtn.onclick = () => {\r\n            this.needPopulate = !this.needPopulate;\r\n        }\r\n        divMenu.appendChild(divBtn);\r\n\r\n        const divText = document.createElement('div');\r\n        divText.textContent = 'N:0, E:0'\r\n        divMenu.appendChild(divText);\r\n        this.divText = divText;\r\n\r\n        const divDes = document.createElement('div');\r\n        divDes.innerHTML = '1 Edge splitting <br> 2 Drag a node ';\r\n        divMenu.appendChild(divDes);\r\n\r\n\r\n        this.init();\r\n    }\r\n    public init() {\r\n        // TODO\r\n        this.graph = new Graph();\r\n        this.graph.divLog = this.divText;\r\n        this.mouseClick(300, 300);\r\n\r\n        this.start()\r\n    }\r\n    public populate() {\r\n        const x = Math.random() * this.canvas.width\r\n        const y = Math.random() * this.canvas.height\r\n        this.mouseClick(x, y);\r\n    }\r\n    public render(ctx: CanvasRenderingContext2D): void {\r\n        if (this.needPopulate) {\r\n            this.populate()\r\n        }\r\n\r\n        this.graph.render(ctx);\r\n\r\n        ctx.beginPath();\r\n        ctx.arc(this.m.x, this.m.y, 2, 0, 3.14 * 2)\r\n        ctx.closePath();\r\n        ctx.fillStyle = '#888';\r\n        ctx.fill();\r\n    }\r\n    public mouseClick(x: number, y: number): void {\r\n        const node = this.graph.addNode(x, y, 0);\r\n        this.graph.addEdgeClosestByNode(node);\r\n    }\r\n    public mouseDown(x: number, y: number): void {\r\n        const node = this.graph.getNodeVec(x, y);\r\n        this.graph.captured = node\r\n    }\r\n    public mouseMove(x: number, y: number): void {\r\n        this.m.x = x;\r\n        this.m.y = y;\r\n    }\r\n    public mouseDrag(x: number, y: number): void {\r\n        if (this.graph.captured) {\r\n            this.graph.captured.vec.x = x;\r\n            this.graph.captured.vec.y = y;\r\n        }\r\n    }\r\n    public mouseUp() {\r\n        this.graph.mouseUp();\r\n    }\r\n    public keyDown(e: KeyboardEvent): void {\r\n        console.log(e)\r\n    }\r\n}\r\n\r\n\r\n\r\n\r\n\r\nclass Graph {\r\n    divLog: HTMLDivElement;\r\n    public captured: Node | undefined = undefined;\r\n    public nodes: Node[] = [];\r\n    public edges: Edge[] = [];\r\n    constructor() {\r\n\r\n    }\r\n    public mouseUp() {\r\n        if (this.captured) {\r\n            this.captured.edges.forEach((e, i) => {\r\n                setTimeout(() => {\r\n                    this.edgeSplitByEdge(e)\r\n                }, 100);\r\n            })\r\n        }\r\n    }\r\n    public updatePost() {\r\n        this.divLog.textContent = `N:${this.nodes.length}, E:${this.edges.length}`;\r\n    }\r\n    public addNode(x: number, y: number, z: number) {\r\n        const node = new Node(x, y, 0);\r\n        this.nodes.push(node);\r\n        this.updatePost()\r\n        return node;\r\n    }\r\n    public addEdgeClosestByNode(node: Node) {\r\n        const nn = this.getNode(node);\r\n        if (nn) {\r\n            this.addEdge(node, nn);\r\n        }\r\n    }\r\n    public addEdge(n0: Node, n1: Node) {\r\n        const edge = new Edge(n0, n1);\r\n        n0.edges.push(edge);\r\n        n1.edges.push(edge);\r\n        this.edges.push(edge);\r\n\r\n        this.edgeSplitByEdge(edge)\r\n        this.updatePost();\r\n        return edge;\r\n    }\r\n    public edgeSplitByEdge(edge: Edge) {\r\n        const nodes: Node[] = [];\r\n        for (let i = this.edges.length - 1; i > -1; --i) {\r\n            const other = this.edges[i];\r\n            // if (edge === other) continue;\r\n            if (edge.n0 !== other.n0 && edge.n0 !== other.n1 && edge.n1 !== other.n0 && edge.n1 !== other.n1) {\r\n                const inter = getIntersectEdge(edge, other);\r\n                if (inter) {\r\n                    const nn = new Node(inter[0], inter[1])\r\n                    this.nodes.push(nn);\r\n                    this.addEdgeSlipt(nn, other.n0);\r\n                    this.addEdgeSlipt(nn, other.n1);\r\n                    this.removeEdge(other);\r\n                    nodes.push(nn);\r\n                }\r\n            }\r\n        }\r\n\r\n        if (nodes.length > 0) {\r\n            let nodeFirst = edge.n0;\r\n            nodes.push(edge.n1);\r\n            const disList = nodes.map((n) => { return distance(n.vec, edge.n0.vec); });\r\n            const indices = disList.map((val, index) => index);\r\n            const sortedDis = indices.sort((a, b) => disList[a] - disList[b]);\r\n            this.addEdgeSlipt(nodeFirst, nodes[sortedDis[0]]);\r\n            for (let i = 0; i < sortedDis.length - 1; ++i) {\r\n                this.addEdgeSlipt(nodes[sortedDis[i]], nodes[sortedDis[i + 1]]);\r\n            }\r\n            this.removeEdge(edge);\r\n        }\r\n    }\r\n    public addEdgeSlipt(n0: Node, n1: Node) {\r\n        const edge = new Edge(n0, n1);\r\n        n0.edges.push(edge);\r\n        n1.edges.push(edge);\r\n        this.edges.push(edge);\r\n        return edge;\r\n    }\r\n    public removeEdge(other) {\r\n        other.n0.removeEdge(other)\r\n        other.n1.removeEdge(other)\r\n        this.edges.splice(this.edges.indexOf(other), 1);\r\n    }\r\n    public getNode(node: Node) {\r\n        let theDis = Number.MAX_VALUE;\r\n        let index = -1;\r\n        for (let i = 0; i < this.nodes.length; ++i) {\r\n            if (this.nodes[i] === node) continue;\r\n            const vec = this.nodes[i].vec;\r\n            const dis = distance(vec, node.vec)\r\n            if (theDis > dis) {\r\n                theDis = dis;\r\n                index = i;\r\n            }\r\n        }\r\n        if (index > -1) { return this.nodes[index]; }\r\n        return undefined;\r\n    }\r\n    public getNodeVec(x: number, y: number, minDis = 8) {\r\n        let theDis = Number.MAX_VALUE;\r\n        let index = -1;\r\n        const v = new Vector3(x, y)\r\n        for (let i = 0; i < this.nodes.length; ++i) {\r\n            const vec = this.nodes[i].vec;\r\n            const dis = distance(vec, v)\r\n            if (theDis > dis) {\r\n                theDis = dis;\r\n                index = i;\r\n            }\r\n        }\r\n        if (index > -1 && theDis < minDis) { return this.nodes[index]; }\r\n        return undefined;\r\n    }\r\n    public render(ctx: CanvasRenderingContext2D): void {\r\n        // console.log(`N:${this.nodes.length}, E:${this.edges.length}`)\r\n        this.edges.forEach((e: Edge) => { e.render(ctx); })\r\n        this.nodes.forEach((n: Node) => { n.render(ctx); })\r\n    }\r\n}\r\n\r\nclass Edge {\r\n    public n0: Node;\r\n    public n1: Node;\r\n    constructor(n0: Node, n1: Node) {\r\n        this.n0 = n0;\r\n        this.n1 = n1;\r\n    }\r\n    public render(ctx) {\r\n        ctx.beginPath();\r\n        ctx.moveTo(this.n0.vec.x, this.n0.vec.y)\r\n        ctx.lineTo(this.n1.vec.x, this.n1.vec.y)\r\n        ctx.strokeStyle = '#0f0';\r\n        ctx.stroke();\r\n    }\r\n}\r\n\r\nclass Node {\r\n    public vec: Vector3;\r\n    public r: number = 5;\r\n    public edges: Edge[] = []\r\n    constructor(x: number, y: number, z: number = 0) {\r\n        this.vec = new Vector3(x, y, z)\r\n    }\r\n    public removeEdge(other) {\r\n        this.edges.splice(this.edges.indexOf(other), 1);\r\n    }\r\n    public render(ctx: CanvasRenderingContext2D) {\r\n        ctx.beginPath();\r\n        ctx.arc(this.vec.x, this.vec.y, this.r, 0, 3.14 * 2)\r\n        ctx.closePath();\r\n        ctx.fillStyle = '#ff0000';\r\n        ctx.fill();\r\n    }\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\nclass Vector3 {\r\n    public x: number;\r\n    public y: number;\r\n    public z: number;\r\n    constructor(x: number, y: number, z: number = 0) {\r\n        this.x = x;\r\n        this.y = y;\r\n        this.z = z\r\n    }\r\n}\r\n\r\nconst distance = (v0: Vector3, v1: Vector3) => {\r\n    return Math.sqrt(distance2(v0, v1));\r\n}\r\nconst distance2 = (v0: Vector3, v1: Vector3) => {\r\n    return (v0.x - v1.x) * (v0.x - v1.x) + (v0.y - v1.y) * (v0.y - v1.y) + (v0.z - v1.z) * (v0.z - v1.z);\r\n}\r\n\r\nconst getIntersectEdge = (e0: Edge, e1: Edge) => {\r\n    return getIntersect(e0.n0, e0.n1, e1.n0, e1.n1)\r\n}\r\n\r\nconst getIntersect = (n0: Node, n1: Node, n2: Node, n3: Node) => {\r\n    return getLineIntersectPlane(n0.vec.x, n0.vec.y, n1.vec.x, n1.vec.y, n2.vec.x, n2.vec.y, n3.vec.x, n3.vec.y)\r\n}\r\n\r\nconst getLineIntersectPlane = (x1: number, y1: number, x2: number, y2: number, x3: number, y3: number, x4: number, y4: number) => {\r\n    // Check if none of the lines are of length 0\r\n    if ((x1 === x2 && y1 === y2) || (x3 === x4 && y3 === y4)) {\r\n        return undefined;\r\n    }\r\n\r\n    const denominator = ((y4 - y3) * (x2 - x1) - (x4 - x3) * (y2 - y1));\r\n\r\n    // Lines are parallel\r\n    if (denominator === 0) {\r\n        return undefined;\r\n    }\r\n\r\n    const ua = ((x4 - x3) * (y1 - y3) - (y4 - y3) * (x1 - x3)) / denominator;\r\n    const ub = ((x2 - x1) * (y1 - y3) - (y2 - y1) * (x1 - x3)) / denominator;\r\n\r\n    // is the intersection along the segments\r\n    if (ua < 0 || ua > 1 || ub < 0 || ub > 1) {\r\n        return undefined;\r\n    }\r\n\r\n    // Return a object with the x and y coordinates of the intersection\r\n    const x = x1 + ua * (x2 - x1);\r\n    const y = y1 + ua * (y2 - y1);\r\n\r\n    return [x, y];\r\n};\r\n\r\n\r\n"],"names":["Solution","RendererCanvas","constructor","id","super","document","getElementById","divText","graph","m","Vector3","needPopulate","this","canvas","style","position","divMenu","createElement","divHost","appendChild","divBtn","textContent","onclick","divDes","innerHTML","init","Graph","divLog","mouseClick","start","populate","x","Math","random","width","y","height","render","ctx","beginPath","arc","closePath","fillStyle","fill","node","addNode","addEdgeClosestByNode","mouseDown","getNodeVec","captured","mouseMove","mouseDrag","vec","mouseUp","keyDown","e","console","log","undefined","nodes","edges","forEach","i","setTimeout","edgeSplitByEdge","updatePost","length","z","Node","push","nn","getNode","addEdge","n0","n1","edge","Edge","other","inter","getIntersectEdge","addEdgeSlipt","removeEdge","nodeFirst","disList","map","n","distance","sortedDis","val","index","sort","a","b","splice","indexOf","theDis","Number","MAX_VALUE","dis","minDis","v","moveTo","lineTo","strokeStyle","stroke","r","v0","v1","sqrt","distance2","e0","e1","getIntersect","n2","n3","getLineIntersectPlane","x1","y1","x2","y2","x3","y3","x4","y4","denominator","ua","ub"],"sourceRoot":""}