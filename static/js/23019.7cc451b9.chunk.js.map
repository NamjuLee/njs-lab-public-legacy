{"version":3,"file":"static/js/23019.7cc451b9.chunk.js","mappings":"mIAAA,MAAMA,EAAS,IAAIC,aAAa,CAC5B,EAAO,GAAM,GACZ,IAAM,GAAM,EACb,IAAO,GAAM,IAIXC,EAAY,qIAMZC,EAAS,oIAQR,MAAMC,EASTC,YAAYC,GAAa,KARzBC,aAAO,OACPC,YAAM,OACNC,SAAG,OACHC,YAAM,OACNC,YAAM,OACNC,UAAI,OACJC,iBAAW,OACXC,0BAAoB,EAEhBC,KAAKR,QAAUS,SAASC,eAAeX,GACvCS,KAAKP,OAASQ,SAASE,cAAc,UACrCH,KAAKR,QAAQY,YAAYJ,KAAKP,QAE9BO,KAAKK,YACT,CACAC,mBACI,IAAKC,UAAUC,IAAO,MAAM,IAAIC,MAAM,sBAEtC,MAAMC,QAAgBH,UAAUC,IAAIG,eAAe,CAC/CC,gBAAiB,qBAIrB,IAAKF,EAAW,MAAM,IAAID,MAAM,oBAEhC,MAAMd,QAAee,EAAQG,gBAC7Bb,KAAKN,IAAMM,KAAKP,OAAOqB,WAAW,UAElC,MAAMlB,EAASW,UAAUC,IAAIO,yBAA2BR,UAAUC,IAAIO,2BAA6Bf,KAAKN,IAAIsB,mBAAmBN,GACtGO,OAAOC,iBAChClB,KAAKP,OAAO0B,MAAQnB,KAAKR,QAAQ4B,YACjCpB,KAAKP,OAAO4B,OAASrB,KAAKR,QAAQ8B,aAClCtB,KAAKN,IAAI6B,UAAU,CAEf5B,SAAQC,SAER4B,UAAW,WAGfxB,KAAKH,KAAO,CAAEsB,MAAOnB,KAAKP,OAAO0B,MAAOE,OAAQrB,KAAKP,OAAO4B,QAC5DrB,KAAKL,OAASA,EACdK,KAAKJ,OAASA,EAEd6B,QAAQC,IAAItC,EAAWD,GAEvBa,KAAK2B,aAAa3B,KAAKL,OAAQK,KAAKJ,OACxC,CACAU,mBAAmBX,EAAmBC,GAElC,MAAMgC,QAAiBjC,EAAOkC,0BAA0B,CACpDC,MAAO,gBACPC,OAAQ,OACR9C,OAAQ,CACJ+C,OAAQrC,EAAOsC,mBAAmB,CAC9BC,KAAM/C,IAEVgD,WAAY,OACZC,QAAS,CAAC,CACNC,YAAa,GACbC,WAAY,CACR,CAEIC,eAAgB,EAChBC,OAAQ,EACR5C,OAAQ,iBAKxB6C,SAAU,CACNT,OAAQrC,EAAOsC,mBAAmB,CAC9BC,KAAM9C,IAEV+C,WAAY,OACZO,QAAS,CACL,CACI9C,OAAQA,KAIpB+C,UAAW,CACPC,SAAU,mBAKZC,EAAelD,EAAOmD,aAAa,CACrChB,MAAO,yBACPjC,KAAMZ,EAAO8D,WACbC,MAAOC,eAAeC,OAASD,eAAeE,WAGlDxD,EAAOyD,MAAMC,YAAYR,EAAc,EAAG5D,GAE1C,MAAMqE,EAAc3D,EAAOmD,aAAa,CACpChB,MAAO,6BACPjC,KAAM,GACNmD,MAAOC,eAAeM,QAAUN,eAAeE,WAEnDxD,EAAOyD,MAAMC,YAAYC,EAAa,EAAG,IAAIpE,aAAa,CAAC,EAAG,EAAG,EAAG,KAGpE,MAAMsE,EAAe7D,EAAO8D,gBAAgB,CACxC3B,MAAO,iCACPC,OAAQH,EAAS8B,mBAAmB,GACpCC,QAAS,CACL,CACIC,QAAS,EACTC,SAAU,CACNC,OAAQR,OASlBS,EAAO/D,KAAKN,IAAIsE,oBAAoBC,aAC1CjE,KAAKD,qBAAuB,CAExBmE,iBAAkB,CACd,CACIH,KAAMA,EACNI,WAAY,CAAEC,EAAG,EAAGC,EAAG,EAAGC,EAAG,EAAGC,EAAG,GACnCC,OAAQ,QACRC,QAAS,WAMrBzE,KAAKF,YAAc,CAAE8B,WAAUiB,eAAcS,cAAaE,gBAC1DxD,KAAK0E,KACT,CACOA,MACH1E,KAAK2E,KAAK3E,KAAKL,OAAQK,KAAKF,YAChC,CACA6E,KAAKhF,EAAmBG,GAOpB,MAAM8E,EAAiBjF,EAAOkF,uBACxBC,EAAcF,EAAeG,gBAAgB/E,KAAKD,sBAExD+E,EAAYE,YAAYlF,EAAY8B,UACpCkD,EAAYG,aAAa,EAAGnF,EAAY0D,cACxCsB,EAAYI,gBAAgB,EAAGpF,EAAY+C,cAC3CiC,EAAYH,KAxKA,GAyKZG,EAAYK,MAGZxF,EAAOyD,MAAMgC,OAAO,CAACR,EAAeS,UACxC,CACOC,UAEH,IADAtF,KAAKL,OAAO2F,UACLtF,KAAKR,QAAQ+F,kBAChBvF,KAAKR,QAAQgG,YAAYxF,KAAKR,QAAQ+F,iBAE9C,E","sources":["njslab/Infrastructure/WebGPU/WebGPU_00_Basic/index.ts"],"sourcesContent":["const vertex = new Float32Array([\r\n    0.0,   0.5,  0.0,\r\n    -0.5, -0.5,  0.0,\r\n    0.5,  -0.5,  0.0\r\n]);\r\nconst vertexCount = 3;\r\n\r\nconst positionVert = `\r\n@vertex\r\nfn main(@location(0) position : vec3<f32>) -> @builtin(position) vec4<f32> {\r\n    return vec4<f32>(position, 1.0);\r\n}\r\n`;\r\nconst colorFrag = `\r\n@group(0) @binding(0) var<uniform> color : vec4<f32>;\r\n@fragment\r\nfn main() -> @location(0) vec4<f32> {\r\n    return color;\r\n}\r\n`;\r\n\r\nexport class Solution {\r\n    divHost: HTMLElement;\r\n    canvas: HTMLCanvasElement;\r\n    ctx: GPUCanvasContext;\r\n    device: GPUDevice;\r\n    format: GPUTextureFormat;\r\n    size: any;\r\n    pipelineObj: any;\r\n    renderPassDescriptor: GPURenderPassDescriptor;\r\n    constructor(id: string) {\r\n        this.divHost = document.getElementById(id);\r\n        this.canvas = document.createElement('canvas');\r\n        this.divHost.appendChild(this.canvas);\r\n\r\n        this.initWebGPU();\r\n    }\r\n    async initWebGPU() {\r\n        if (!navigator.gpu) { throw new Error('Not Support WebGPU'); }\r\n\r\n        const adapter = await navigator.gpu.requestAdapter({\r\n            powerPreference: 'high-performance'\r\n            // powerPreference: 'low-power'\r\n        })\r\n\r\n        if (!adapter) { throw new Error('No Adapter Found'); }\r\n\r\n        const device = await adapter.requestDevice()\r\n        this.ctx = this.canvas.getContext('webgpu') as GPUCanvasContext;\r\n        // @ts-ignore\r\n        const format = navigator.gpu.getPreferredCanvasFormat ? navigator.gpu.getPreferredCanvasFormat() : this.ctx.getPreferredFormat(adapter)\r\n        const devicePixelRatio = window.devicePixelRatio || 1\r\n        this.canvas.width = this.divHost.clientWidth;\r\n        this.canvas.height = this.divHost.clientHeight;\r\n        this.ctx.configure({\r\n            // json specific format when key and value are the same\r\n            device, format,\r\n            // prevent chrome warning\r\n            alphaMode: 'opaque'\r\n        })\r\n\r\n        this.size = { width: this.canvas.width, height: this.canvas.height }\r\n        this.device = device;\r\n        this.format = format;\r\n\r\n        console.log(colorFrag, positionVert)\r\n\r\n        this.initPipeline(this.device, this.format);\r\n    }\r\n    async initPipeline(device: GPUDevice, format: GPUTextureFormat) {\r\n\r\n        const pipeline = await device.createRenderPipelineAsync({\r\n            label: 'Basic Pipline',\r\n            layout: 'auto',\r\n            vertex: {\r\n                module: device.createShaderModule({\r\n                    code: positionVert,\r\n                }),\r\n                entryPoint: 'main',\r\n                buffers: [{\r\n                    arrayStride: 3 * 4, // 3 float32,\r\n                    attributes: [\r\n                        {\r\n                            // position xyz\r\n                            shaderLocation: 0,\r\n                            offset: 0,\r\n                            format: 'float32x3',\r\n                        }\r\n                    ]\r\n                }]\r\n            },\r\n            fragment: {\r\n                module: device.createShaderModule({\r\n                    code: colorFrag,\r\n                }),\r\n                entryPoint: 'main',\r\n                targets: [\r\n                    {\r\n                        format: format\r\n                    }\r\n                ]\r\n            },\r\n            primitive: {\r\n                topology: 'triangle-list' // try point-list, line-list, line-strip, triangle-strip?\r\n            }\r\n        } as GPURenderPipelineDescriptor);\r\n\r\n        // create vertex buffer\r\n        const vertexBuffer = device.createBuffer({\r\n            label: 'GPUBuffer store vertex',\r\n            size: vertex.byteLength,\r\n            usage: GPUBufferUsage.VERTEX | GPUBufferUsage.COPY_DST,\r\n            //mappedAtCreation: true\r\n        })\r\n        device.queue.writeBuffer(vertexBuffer, 0, vertex)\r\n        // create color buffer\r\n        const colorBuffer = device.createBuffer({\r\n            label: 'GPUBuffer store rgba color',\r\n            size: 4 * 4, // 4 * float32\r\n            usage: GPUBufferUsage.UNIFORM | GPUBufferUsage.COPY_DST,\r\n        })\r\n        device.queue.writeBuffer(colorBuffer, 0, new Float32Array([1, 1, 0, 1]))\r\n\r\n        // create a uniform group for color\r\n        const uniformGroup = device.createBindGroup({\r\n            label: 'Uniform Group with colorBuffer',\r\n            layout: pipeline.getBindGroupLayout(0),\r\n            entries: [\r\n                {\r\n                    binding: 0,\r\n                    resource: {\r\n                        buffer: colorBuffer\r\n                    }\r\n                }\r\n            ]\r\n        })\r\n        // return all vars\r\n        //     console.log('working');\r\n\r\n\r\n        const view = this.ctx.getCurrentTexture().createView()\r\n        this.renderPassDescriptor = {\r\n            //@ts-ignore\r\n            colorAttachments: [\r\n                {\r\n                    view: view,\r\n                    clearValue: { r: 0, g: 0, b: 0, a: 1.0 },\r\n                    loadOp: 'clear',\r\n                    storeOp: 'store'\r\n                }\r\n            ]\r\n        }\r\n\r\n\r\n        this.pipelineObj = { pipeline, vertexBuffer, colorBuffer, uniformGroup }\r\n        this.run();\r\n    }\r\n    public run() {\r\n        this.draw(this.device, this.pipelineObj)\r\n    }\r\n    draw(device: GPUDevice, pipelineObj: { \r\n            pipeline: GPURenderPipeline, \r\n            vertexBuffer: GPUBuffer, \r\n            colorBuffer: GPUBuffer, \r\n            uniformGroup: GPUBindGroup}\r\n        ) {\r\n        // console.log('run...');\r\n        const commandEncoder = device.createCommandEncoder();\r\n        const passEncoder = commandEncoder.beginRenderPass(this.renderPassDescriptor);\r\n\r\n        passEncoder.setPipeline(pipelineObj.pipeline);\r\n        passEncoder.setBindGroup(0, pipelineObj.uniformGroup); // set uniformGroup\r\n        passEncoder.setVertexBuffer(0, pipelineObj.vertexBuffer); // set vertex\r\n        passEncoder.draw(vertexCount); // 3 vertex form a triangle\r\n        passEncoder.end();\r\n\r\n        // webgpu run in a separate process, all the commands will be executed after submit\r\n        device.queue.submit([commandEncoder.finish()]);\r\n    }\r\n    public destroy() {\r\n        this.device.destroy();\r\n        while (this.divHost.lastElementChild) {\r\n            this.divHost.removeChild(this.divHost.lastElementChild);\r\n        }\r\n    }\r\n}"],"names":["vertex","Float32Array","positionVert","colorFrag","Solution","constructor","id","divHost","canvas","ctx","device","format","size","pipelineObj","renderPassDescriptor","this","document","getElementById","createElement","appendChild","initWebGPU","async","navigator","gpu","Error","adapter","requestAdapter","powerPreference","requestDevice","getContext","getPreferredCanvasFormat","getPreferredFormat","window","devicePixelRatio","width","clientWidth","height","clientHeight","configure","alphaMode","console","log","initPipeline","pipeline","createRenderPipelineAsync","label","layout","module","createShaderModule","code","entryPoint","buffers","arrayStride","attributes","shaderLocation","offset","fragment","targets","primitive","topology","vertexBuffer","createBuffer","byteLength","usage","GPUBufferUsage","VERTEX","COPY_DST","queue","writeBuffer","colorBuffer","UNIFORM","uniformGroup","createBindGroup","getBindGroupLayout","entries","binding","resource","buffer","view","getCurrentTexture","createView","colorAttachments","clearValue","r","g","b","a","loadOp","storeOp","run","draw","commandEncoder","createCommandEncoder","passEncoder","beginRenderPass","setPipeline","setBindGroup","setVertexBuffer","end","submit","finish","destroy","lastElementChild","removeChild"],"sourceRoot":""}