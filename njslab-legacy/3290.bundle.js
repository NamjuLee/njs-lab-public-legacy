/*! For license information please see 3290.bundle.js.LICENSE.txt */
(self.webpackChunk=self.webpackChunk||[]).push([[3290],{1897:(e,t,n)=>{"use strict";n.d(t,{YL:()=>Be,gJ:()=>Pe});var s={};n.r(s),n.d(s,{json:()=>O});var a={};n.r(a),n.d(a,{json:()=>M});var r={};n.r(r),n.d(r,{json:()=>z});var i={};n.r(i),n.d(i,{json:()=>L});var o={};n.r(o),n.d(o,{json:()=>B});var l={};n.r(l),n.d(l,{json:()=>P});var u={};n.r(u),n.d(u,{json:()=>V});var c={};n.r(c),n.d(c,{json:()=>W});var h={};n.r(h),n.d(h,{json:()=>U});var p={};n.r(p),n.d(p,{json:()=>G});var d={};n.r(d),n.d(d,{json:()=>H});var f={};n.r(f),n.d(f,{json:()=>q});var m={};n.r(m),n.d(m,{json:()=>X});var g={};n.r(g),n.d(g,{json:()=>j});var y={};n.r(y),n.d(y,{json:()=>K});var b={};n.r(b),n.d(b,{json:()=>Y});var x={};n.r(x),n.d(x,{json:()=>Z});var v={};n.r(v),n.d(v,{json:()=>Q});var w={};n.r(w),n.d(w,{json:()=>J});var k={};n.r(k),n.d(k,{OP_SCOPE_SUFFIX:()=>ge.zvA,abs:()=>ge.WnP,acos:()=>ge.Khb,acosh:()=>ge.__u,add:()=>ge.IHx,addN:()=>ge.QBD,all:()=>ge.$6P,any:()=>ge.YjB,argMax:()=>ge.NqF,argMin:()=>ge.vHJ,asin:()=>ge.ZRM,asinh:()=>ge.VfV,atan:()=>ge.z4N,atan2:()=>ge.fvJ,atanh:()=>ge.C80,avgPool:()=>ge.wS1,avgPool3d:()=>ge.uR5,basicLSTMCell:()=>ge.zEQ,batchNorm:()=>ge.tgs,batchNorm2d:()=>ge.Dxk,batchNorm3d:()=>ge.JY5,batchNorm4d:()=>ge.p3b,batchToSpaceND:()=>ge.E4h,bincount:()=>ge.yE8,booleanMaskAsync:()=>ge.anm,broadcastArgs:()=>ge.XsQ,broadcastTo:()=>ge.UFq,buffer:()=>ge.f3b,cast:()=>ge.pju,ceil:()=>ge.mDi,clipByValue:()=>ge.iUl,clone:()=>ge.d9v,complex:()=>ge.PYB,concat:()=>ge.zoF,concat1d:()=>ge.gME,concat2d:()=>ge.Izb,concat3d:()=>ge.MNy,concat4d:()=>ge.ZaL,conv1d:()=>ge.PAt,conv2d:()=>ge.Tek,conv2dTranspose:()=>ge.bc,conv3d:()=>ge.pdZ,conv3dTranspose:()=>ge.$QV,cos:()=>ge.mCk,cosh:()=>ge.f9Y,cosineWindow:()=>ge.mew,cumprod:()=>ge.$Gn,cumsum:()=>ge.zbp,denseBincount:()=>ge.ppE,depthToSpace:()=>ge.nTT,depthwiseConv2d:()=>ge.B10,diag:()=>ge.Ka3,dilation2d:()=>ge.WmZ,div:()=>ge.hiC,divNoNan:()=>ge.NTj,dot:()=>ge.AKD,dropout:()=>ge.rvX,einsum:()=>ge.WYO,elu:()=>ge.pyx,enclosingPowerOfTwo:()=>ge.GRh,equal:()=>ge.DgJ,erf:()=>ge.qNN,euclideanNorm:()=>ge.d2q,exp:()=>ge.Qqt,expandDims:()=>ge.dt4,expm1:()=>ge.t$B,eye:()=>ge.iyy,fft:()=>ge.kp_,fill:()=>ge.hlL,floor:()=>ge.GWj,floorDiv:()=>ge.qPi,fused:()=>ge.imm,gather:()=>ge.Iqj,gatherND:()=>ge.dbB,greater:()=>ge.pjt,greaterEqual:()=>ge.brS,ifft:()=>ge.Sxn,imag:()=>ge.asL,image:()=>ge.BHj,inTopKAsync:()=>ge.V3u,irfft:()=>ge.wx0,isFinite:()=>ge.xVT,isInf:()=>ge.UWc,isNaN:()=>ge.i2d,leakyRelu:()=>ge.hi7,less:()=>ge.d9m,lessEqual:()=>ge.zN1,linalg:()=>ge.$r2,linspace:()=>ge.SX3,localResponseNormalization:()=>ge.G9k,log:()=>ge.cM7,log1p:()=>ge.Krr,logSigmoid:()=>ge.e_t,logSoftmax:()=>ge.CmS,logSumExp:()=>ge.l_t,logicalAnd:()=>ge.HvI,logicalNot:()=>ge.hJK,logicalOr:()=>ge.K5V,logicalXor:()=>ge.egP,losses:()=>ge.MB5,lowerBound:()=>ge.eab,matMul:()=>ge.OI3,max:()=>ge.Fp7,maxPool:()=>ge._sB,maxPool3d:()=>ge.YQQ,maxPoolWithArgmax:()=>ge.Ip$,maximum:()=>ge.gWQ,mean:()=>ge.J69,meshgrid:()=>ge.ry_,min:()=>ge.VV$,minimum:()=>ge.LTh,mirrorPad:()=>ge.VdP,mod:()=>ge.wQq,moments:()=>ge.Gi7,movingAverage:()=>ge.p_,mul:()=>ge.dC7,multiRNNCell:()=>ge.rq4,multinomial:()=>ge.SJ_,neg:()=>ge.W76,norm:()=>ge.KOy,notEqual:()=>ge.Quu,oneHot:()=>ge.lfX,ones:()=>ge.iUs,onesLike:()=>ge.JpU,op:()=>ge.op,outerProduct:()=>ge.N2O,pad:()=>ge.vku,pad1d:()=>ge.pNR,pad2d:()=>ge.koy,pad3d:()=>ge.t1L,pad4d:()=>ge.lGY,pool:()=>ge.d_R,pow:()=>ge.sQ3,prelu:()=>ge.AL3,print:()=>ge.S0v,prod:()=>ge.WVs,raggedGather:()=>ge.$gW,raggedTensorToTensor:()=>ge.N89,rand:()=>ge.TN_,randomGamma:()=>ge.wzB,randomNormal:()=>ge.nGf,randomStandardNormal:()=>ge.ruB,randomUniform:()=>ge.LGj,range:()=>ge.w6H,real:()=>ge.kwC,reciprocal:()=>ge.M25,relu:()=>ge.UYe,relu6:()=>ge.btT,reshape:()=>ge.XLQ,reverse:()=>ge.GYS,reverse1d:()=>ge.SDf,reverse2d:()=>ge.diP,reverse3d:()=>ge.sx7,reverse4d:()=>ge.mG2,rfft:()=>ge.QEs,round:()=>ge.NMM,rsqrt:()=>ge.bp0,scalar:()=>ge.iD$,scatterND:()=>ge.snQ,searchSorted:()=>ge.zcT,selu:()=>ge.U8D,separableConv2d:()=>ge.U_I,setdiff1dAsync:()=>ge.ODp,sigmoid:()=>ge.XD2,sign:()=>ge.Xxe,signal:()=>ge.tdS,sin:()=>ge.O$l,sinh:()=>ge.R_K,slice:()=>ge.tPi,slice1d:()=>ge.jZU,slice2d:()=>ge.SmN,slice3d:()=>ge.CnO,slice4d:()=>ge.p0P,softmax:()=>ge.XAC,softplus:()=>ge.Wvh,spaceToBatchND:()=>ge.fBT,sparse:()=>ge.rVs,sparseToDense:()=>ge.ers,spectral:()=>ge.uN7,split:()=>ge.Vl2,sqrt:()=>ge._b3,square:()=>ge.h62,squaredDifference:()=>ge.$i,squeeze:()=>ge.L9e,stack:()=>ge.knu,step:()=>ge.Nbs,stridedSlice:()=>ge.NXj,string:()=>ge.Z_8,sub:()=>ge.luU,sum:()=>ge.Smz,tan:()=>ge.ORZ,tanh:()=>ge.AEp,tensor:()=>ge.XeE,tensor1d:()=>ge.RRF,tensor2d:()=>ge.odF,tensor3d:()=>ge.wOQ,tensor4d:()=>ge.yXz,tensor5d:()=>ge.Bfx,tensor6d:()=>ge.xZs,tile:()=>ge.Gg6,topk:()=>ge.hg7,transpose:()=>ge.p4s,truncatedNormal:()=>ge.Xu6,unique:()=>ge.Two,unsortedSegmentSum:()=>ge.pUJ,unstack:()=>ge.HHK,upperBound:()=>ge.GaM,variable:()=>ge.VD$,where:()=>ge.arb,whereAsync:()=>ge.itS,zeros:()=>ge.lls,zerosLike:()=>ge.P84});var I,S,N=n(743);(0,N.env)().registerFlag("KEEP_INTERMEDIATE_TENSORS",(()=>!1),(e=>{e&&console.warn("Keep intermediate tensors is ON. This will print the values of all intermediate tensors during model inference. Not all models support this mode. For details, check e2e/benchmarks/ model_config.js. This significantly impacts performance.")})),function(e){e[e.DT_INVALID=0]="DT_INVALID",e[e.DT_FLOAT=1]="DT_FLOAT",e[e.DT_DOUBLE=2]="DT_DOUBLE",e[e.DT_INT32=3]="DT_INT32",e[e.DT_UINT8=4]="DT_UINT8",e[e.DT_INT16=5]="DT_INT16",e[e.DT_INT8=6]="DT_INT8",e[e.DT_STRING=7]="DT_STRING",e[e.DT_COMPLEX64=8]="DT_COMPLEX64",e[e.DT_INT64=9]="DT_INT64",e[e.DT_BOOL=10]="DT_BOOL",e[e.DT_QINT8=11]="DT_QINT8",e[e.DT_QUINT8=12]="DT_QUINT8",e[e.DT_QINT32=13]="DT_QINT32",e[e.DT_BFLOAT16=14]="DT_BFLOAT16",e[e.DT_QINT16=15]="DT_QINT16",e[e.DT_QUINT16=16]="DT_QUINT16",e[e.DT_UINT16=17]="DT_UINT16",e[e.DT_COMPLEX128=18]="DT_COMPLEX128",e[e.DT_HALF=19]="DT_HALF",e[e.DT_RESOURCE=20]="DT_RESOURCE",e[e.DT_VARIANT=21]="DT_VARIANT",e[e.DT_UINT32=22]="DT_UINT32",e[e.DT_UINT64=23]="DT_UINT64",e[e.DT_FLOAT_REF=101]="DT_FLOAT_REF",e[e.DT_DOUBLE_REF=102]="DT_DOUBLE_REF",e[e.DT_INT32_REF=103]="DT_INT32_REF",e[e.DT_UINT8_REF=104]="DT_UINT8_REF",e[e.DT_INT16_REF=105]="DT_INT16_REF",e[e.DT_INT8_REF=106]="DT_INT8_REF",e[e.DT_STRING_REF=107]="DT_STRING_REF",e[e.DT_COMPLEX64_REF=108]="DT_COMPLEX64_REF",e[e.DT_INT64_REF=109]="DT_INT64_REF",e[e.DT_BOOL_REF=110]="DT_BOOL_REF",e[e.DT_QINT8_REF=111]="DT_QINT8_REF",e[e.DT_QUINT8_REF=112]="DT_QUINT8_REF",e[e.DT_QINT32_REF=113]="DT_QINT32_REF",e[e.DT_BFLOAT16_REF=114]="DT_BFLOAT16_REF",e[e.DT_QINT16_REF=115]="DT_QINT16_REF",e[e.DT_QUINT16_REF=116]="DT_QUINT16_REF",e[e.DT_UINT16_REF=117]="DT_UINT16_REF",e[e.DT_COMPLEX128_REF=118]="DT_COMPLEX128_REF",e[e.DT_HALF_REF=119]="DT_HALF_REF",e[e.DT_RESOURCE_REF=120]="DT_RESOURCE_REF",e[e.DT_VARIANT_REF=121]="DT_VARIANT_REF",e[e.DT_UINT32_REF=122]="DT_UINT32_REF",e[e.DT_UINT64_REF=123]="DT_UINT64_REF"}(I||(I={})),function(e){let t;!function(e){e[e.LEGACY=0]="LEGACY",e[e.V1=1]="V1",e[e.V2=2]="V2"}(t=e.CheckpointFormatVersion||(e.CheckpointFormatVersion={}))}(S||(S={}));const T={};function C(e){return T[e]}function $(e,t,n,s,a){const r=t.inputParams[e];if(r&&void 0!==r.inputIndexStart){const e=r.inputIndexStart,i=0===r.inputIndexEnd?void 0:void 0===r.inputIndexEnd?e+1:r.inputIndexEnd;if("tensor"===r.type)return E(t.inputNames[r.inputIndexStart],n,s,a);if("tensors"===r.type)return t.inputNames.slice(e,i).map((e=>E(e,n,s,a)));const o=E(t.inputNames.slice(e)[0],n,s,a),l=o.dataSync();return"number"===r.type?l[0]:N.util.toNestedArray(o.shape,l)}const i=t.attrParams[e];return i&&i.value}function E(e,t,n,s){const[a,r]=R(e);if(null!=s){const e=s.getHashTableHandleByName(a);if(null!=e)return e}const i=n.currentContextIds.find((e=>!!t[A(a,e)]));return void 0!==i?t[A(a,i)][r]:void 0}function _(e,t){const[n,s,a]=R(e);return[A(n,t&&t.currentContextId),s,a]}function A(e,t){return t?`${e}-${t}`:e}function R(e){const t=e.split(":");if(1===t.length)return[e,0,void 0];const n=t[0],s=3===t.length?t[1]:void 0;return[n,Number(t[t.length-1]),s]}function F(e,t,n){let s=$("pad",e,t,n);if("explicit"===s){s=$("explicitPaddings",e,t,n);const a=[[0,0],[0,0],[0,0],[0,0]];for(let e=0;e<4;e++)a[e][0]=s[2*e],a[e][1]=s[2*e+1];return a}return s}function D(e){return e.kept?e:(0,N.clone)(e)}const O=[{tfOpName:"Add",category:"arithmetic",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"AddV2",category:"arithmetic",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"AddN",category:"arithmetic",inputs:[{start:0,end:0,name:"tensors",type:"tensors"}]},{tfOpName:"BiasAdd",category:"arithmetic",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0},{tfName:"data_format",name:"dataFormat",type:"string",notSupported:!0}]},{tfOpName:"Sub",category:"arithmetic",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"RealDiv",category:"arithmetic",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Div",category:"arithmetic",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"DivNoNan",category:"arithmetic",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"FloorDiv",category:"arithmetic",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Mul",category:"arithmetic",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Maximum",category:"arithmetic",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Minimum",category:"arithmetic",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Pow",category:"arithmetic",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"SquaredDifference",category:"arithmetic",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Mod",category:"arithmetic",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"FloorMod",category:"arithmetic",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]}],M=[{tfOpName:"Abs",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Acos",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Asin",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Atan",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Atan2",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"y",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Ceil",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"ClipByValue",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"clipValueMin",type:"number"},{start:2,name:"clipValueMax",type:"number"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Complex",category:"basic_math",inputs:[{start:0,name:"real",type:"tensor"},{start:1,name:"imag",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"ComplexAbs",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Cos",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Cosh",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Elu",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Exp",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Floor",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Log",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Imag",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0},{tfName:"Tout",name:"outputType",type:"dtype",notSupported:!0}]},{tfOpName:"Neg",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Real",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0},{tfName:"Tout",name:"outputType",type:"dtype",notSupported:!0}]},{tfOpName:"Prelu",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"alpha",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Relu",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Relu6",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Selu",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Sigmoid",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Sin",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Sinh",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Sqrt",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Rsqrt",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Square",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Tan",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Tanh",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Sign",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Round",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Expm1",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Log1p",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Reciprocal",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Softplus",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Asinh",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Acosh",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Atanh",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Erf",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Prod",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"axes",type:"number[]"}],attrs:[{tfName:"keep_dims",name:"keepDims",type:"bool",notSupported:!0},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"LeakyRelu",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"alpha",name:"alpha",type:"number",defaultValue:.2},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"IsNan",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]}],z=[{tfOpName:"EmptyTensorList",category:"control",inputs:[{start:0,name:"elementShape",type:"shape"},{start:1,name:"maxNumElements",type:"number"}],attrs:[{tfName:"element_dtype",name:"elementDType",type:"dtype"}]},{tfOpName:"LoopCond",category:"control",inputs:[{start:0,name:"pred",type:"tensor"}]},{tfOpName:"Switch",category:"control",inputs:[{start:0,name:"data",type:"tensor"},{start:1,name:"pred",type:"tensor"}]},{tfOpName:"Merge",category:"control",inputs:[{start:0,end:0,name:"tensors",type:"tensors"}]},{tfOpName:"Enter",category:"control",inputs:[{start:0,name:"tensor",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0},{tfName:"frame_name",name:"frameName",type:"string"},{tfName:"is_constant",name:"isConstant",type:"bool"}]},{tfOpName:"Exit",category:"control",inputs:[{start:0,name:"tensor",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"NextIteration",category:"control",inputs:[{start:0,name:"tensor",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"TensorArrayV3",category:"control",inputs:[{start:0,name:"size",type:"number"}],attrs:[{tfName:"dtype",name:"dtype",type:"dtype"},{tfName:"element_shape",name:"elementShape",type:"shape"},{tfName:"dynamic_size",name:"dynamicSize",type:"bool"},{tfName:"clear_after_read",name:"clearAfterRead",type:"bool"},{tfName:"identical_element_shapes",name:"identicalElementShapes",type:"bool"},{tfName:"tensor_array_name",name:"name",type:"string"}]},{tfOpName:"TensorArrayWriteV3",category:"control",inputs:[{start:0,name:"tensorArrayId",type:"tensor"},{start:1,name:"index",type:"number"},{start:2,name:"tensor",type:"tensor"},{start:3,name:"flowIn",type:"number"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"TensorArrayReadV3",category:"control",inputs:[{start:0,name:"tensorArrayId",type:"tensor"},{start:1,name:"index",type:"number"},{start:2,name:"flowIn",type:"number"}],attrs:[{tfName:"dtype",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"TensorArrayGatherV3",category:"control",inputs:[{start:0,name:"tensorArrayId",type:"tensor"},{start:1,name:"indices",type:"number[]"},{start:2,name:"flowIn",type:"number"}],attrs:[{tfName:"dtype",name:"dtype",type:"dtype"},{tfName:"element_shape",name:"elementShape",type:"shape"}]},{tfOpName:"TensorArrayScatterV3",category:"control",inputs:[{start:0,name:"tensorArrayId",type:"tensor"},{start:1,name:"indices",type:"number[]"},{start:2,name:"tensor",type:"tensor"},{start:3,name:"flowIn",type:"number"}],attrs:[{tfName:"T",name:"dtype",type:"dtype"}]},{tfOpName:"TensorArrayConcatV3",category:"control",inputs:[{start:0,name:"tensorArrayId",type:"tensor"},{start:1,name:"flowIn",type:"number"}],attrs:[{tfName:"dtype",name:"dtype",type:"dtype"},{tfName:"element_shape_except0",name:"elementShapeExcept0",type:"shape",notSupported:!0}]},{tfOpName:"TensorArraySplitV3",category:"control",inputs:[{start:0,name:"tensorArrayId",type:"tensor"},{start:1,name:"tensor",type:"tensor"},{start:2,name:"lengths",type:"number[]"},{start:3,name:"flowIn",type:"number"}],attrs:[{tfName:"T",name:"dtype",type:"dtype"}]},{tfOpName:"TensorArraySizeV3",category:"control",inputs:[{start:0,name:"tensorArrayId",type:"tensor"},{start:1,name:"flowIn",type:"number"}]},{tfOpName:"TensorArrayCloseV3",category:"control",inputs:[{start:0,name:"tensorArrayId",type:"tensor"}]},{tfOpName:"StatelessIf",category:"control",inputs:[{start:0,name:"cond",type:"tensor"},{start:1,end:0,name:"args",type:"tensors"}],attrs:[{tfName:"then_branch",name:"thenBranch",type:"func"},{tfName:"else_branch",name:"elseBranch",type:"func"}]},{tfOpName:"If",category:"control",inputs:[{start:0,name:"cond",type:"tensor"},{start:1,end:0,name:"args",type:"tensors"}],attrs:[{tfName:"then_branch",name:"thenBranch",type:"func"},{tfName:"else_branch",name:"elseBranch",type:"func"}]},{tfOpName:"StatelessWhile",category:"control",inputs:[{start:0,end:0,name:"args",type:"tensors"}],attrs:[{tfName:"cond",name:"cond",type:"func"},{tfName:"body",name:"body",type:"func"}]},{tfOpName:"While",category:"control",inputs:[{start:0,end:0,name:"args",type:"tensors"}],attrs:[{tfName:"cond",name:"cond",type:"func"},{tfName:"body",name:"body",type:"func"}]},{tfOpName:"TensorListScatter",category:"control",inputs:[{start:0,name:"tensor",type:"tensor"},{start:1,name:"indices",type:"number[]"},{start:2,name:"elementShape",type:"shape"}],attrs:[{tfName:"element_dtype",name:"elementDType",type:"dtype"}]},{tfOpName:"TensorListScatterV2",category:"control",inputs:[{start:0,name:"tensor",type:"tensor"},{start:1,name:"indices",type:"number[]"},{start:2,name:"elementShape",type:"shape"},{start:3,name:"numElements",type:"number"}],attrs:[{tfName:"element_dtype",name:"elementDType",type:"dtype"}]},{tfOpName:"TensorListGather",category:"control",inputs:[{start:0,name:"tensorListId",type:"tensor"},{start:1,name:"indices",type:"number[]"},{start:2,name:"elementShape",type:"shape"}],attrs:[{tfName:"element_dtype",name:"elementDType",type:"dtype"}]},{tfOpName:"TensorListGetItem",category:"control",inputs:[{start:0,name:"tensorListId",type:"tensor"},{start:1,name:"index",type:"number"},{start:2,name:"elementShape",type:"shape"}],attrs:[{tfName:"element_dtype",name:"elementDType",type:"dtype"}]},{tfOpName:"TensorListSetItem",category:"control",inputs:[{start:0,name:"tensorListId",type:"tensor"},{start:1,name:"index",type:"number"},{start:2,name:"tensor",type:"tensor"}],attrs:[{tfName:"element_dtype",name:"elementDType",type:"dtype"}]},{tfOpName:"TensorListReserve",category:"control",inputs:[{start:0,name:"elementShape",type:"shape"},{start:1,name:"numElements",type:"number"}],attrs:[{tfName:"element_dtype",name:"elementDType",type:"dtype"}]},{tfOpName:"TensorListFromTensor",category:"control",inputs:[{start:0,name:"tensor",type:"tensor"},{start:1,name:"elementShape",type:"shape"}],attrs:[{tfName:"element_dtype",name:"elementDType",type:"dtype"}]},{tfOpName:"TensorListStack",category:"control",inputs:[{start:0,name:"tensorListId",type:"tensor"},{start:1,name:"elementShape",type:"shape"}],attrs:[{tfName:"element_dtype",name:"elementDType",type:"dtype"},{tfName:"num_elements",name:"numElements",type:"dtype"}]},{tfOpName:"TensorListSplit",category:"control",inputs:[{start:0,name:"tensor",type:"tensor"},{start:1,name:"elementShape",type:"shape"},{start:2,name:"lengths",type:"number[]"}],attrs:[{tfName:"element_dtype",name:"elementDType",type:"dtype"}]},{tfOpName:"TensorListConcat",category:"control",inputs:[{start:0,name:"tensorListId",type:"tensor"}],attrs:[{tfName:"element_shape",name:"elementShape",type:"shape"},{tfName:"element_dtype",name:"elementDType",type:"dtype"}]},{tfOpName:"TensorListConcatV2",category:"control",inputs:[{start:0,name:"tensorListId",type:"tensor"}],attrs:[{tfName:"element_shape",name:"elementShape",type:"shape"},{tfName:"element_dtype",name:"elementDType",type:"dtype"}]},{tfOpName:"TensorListPopBack",category:"control",inputs:[{start:0,name:"tensorListId",type:"tensor"},{start:1,name:"elementShape",type:"shape"}],attrs:[{tfName:"element_dtype",name:"elementDType",type:"dtype"}]},{tfOpName:"TensorListPushBack",category:"control",inputs:[{start:0,name:"tensorListId",type:"tensor"},{start:1,name:"tensor",type:"tensor"}],attrs:[{tfName:"element_dtype",name:"elementDType",type:"dtype"}]},{tfOpName:"TensorListLength",category:"control",inputs:[{start:0,name:"tensorListId",type:"tensor"}]},{tfOpName:"TensorListResize",category:"control",inputs:[{start:0,name:"tensorListId",type:"tensor"},{start:1,name:"size",type:"number"}]}],L=[{tfOpName:"AvgPool",category:"convolution",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"strides",name:"strides",type:"number[]"},{tfName:"padding",name:"pad",type:"string"},{tfName:"data_format",name:"dataFormat",type:"string",notSupported:!0},{tfName:"ksize",name:"kernelSize",type:"number[]"},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"MaxPool",category:"convolution",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"strides",name:"strides",type:"number[]"},{tfName:"padding",name:"pad",type:"string"},{tfName:"data_format",name:"dataFormat",type:"string",notSupported:!0},{tfName:"ksize",name:"kernelSize",type:"number[]"},{tfName:"explicit_paddings",name:"explicitPaddings",type:"number[]",defaultValue:[],notSupported:!0},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"MaxPoolWithArgmax",category:"convolution",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"strides",name:"strides",type:"number[]"},{tfName:"padding",name:"pad",type:"string"},{tfName:"ksize",name:"kernelSize",type:"number[]"},{tfName:"include_batch_in_index",name:"includeBatchInIndex",type:"bool"},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"AvgPool3D",category:"convolution",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"strides",name:"strides",type:"number[]"},{tfName:"padding",name:"pad",type:"string"},{tfName:"data_format",name:"dataFormat",type:"string",notSupported:!0},{tfName:"ksize",name:"kernelSize",type:"number[]"},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"MaxPool3D",category:"convolution",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"strides",name:"strides",type:"number[]"},{tfName:"padding",name:"pad",type:"string"},{tfName:"data_format",name:"dataFormat",type:"string",notSupported:!0},{tfName:"ksize",name:"kernelSize",type:"number[]"},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Conv1D",category:"convolution",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"filter",type:"tensor"}],attrs:[{tfName:"stride",name:"stride",type:"number"},{tfName:"padding",name:"pad",type:"string"},{tfName:"data_format",name:"dataFormat",type:"string",defaultValue:"NWC"},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0},{tfName:"dilation",name:"dilation",type:"number",defaultValue:1}]},{tfOpName:"Conv2D",category:"convolution",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"filter",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0},{tfName:"strides",name:"strides",type:"number[]"},{tfName:"padding",name:"pad",type:"string"},{tfName:"useCudnnOnGpu",name:"useCudnnOnGpu",type:"bool"},{tfName:"data_format",name:"dataFormat",type:"string",defaultValue:"NHWC"},{tfName:"explicit_paddings",name:"explicitPaddings",type:"number[]",defaultValue:[]},{tfName:"dilations",name:"dilations",type:"number[]"}]},{tfOpName:"_FusedConv2D",category:"convolution",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"filter",type:"tensor"},{start:2,end:0,name:"args",type:"tensors"}],attrs:[{tfName:"num_args",name:"numArgs",type:"number"},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0},{tfName:"strides",name:"strides",type:"number[]"},{tfName:"padding",name:"pad",type:"string"},{tfName:"explicit_paddings",name:"explicitPaddings",type:"number[]",defaultValue:[]},{tfName:"use_cudnn_on_gpu",name:"useCudnnOnGpu",type:"bool",defaultValue:!0},{tfName:"data_format",name:"dataFormat",type:"string",defaultValue:"NHWC"},{tfName:"dilations",name:"dilations",type:"number[]",defaultValue:[1,1,1,1]},{tfName:"fused_ops",name:"fusedOps",type:"string[]",defaultValue:[]},{tfName:"epsilon",name:"epsilon",type:"number",defaultValue:1e-4},{tfName:"leakyrelu_alpha",name:"leakyreluAlpha",type:"number",defaultValue:.2}]},{tfOpName:"Conv2DBackpropInput",category:"convolution",inputs:[{start:2,name:"x",type:"tensor"},{start:1,name:"filter",type:"tensor"},{start:0,name:"outputShape",type:"number[]"}],attrs:[{tfName:"strides",name:"strides",type:"number[]"},{tfName:"padding",name:"pad",type:"string"},{tfName:"data_format",name:"dataFormat",type:"string",notSupported:!0},{tfName:"explicit_paddings",name:"explicitPaddings",type:"number[]",defaultValue:[]},{tfName:"dilations",name:"dilations",type:"number[]",notSupported:!0}]},{tfOpName:"DepthwiseConv2d",category:"convolution",inputs:[{start:0,name:"input",type:"tensor"},{start:1,name:"filter",type:"tensor"}],attrs:[{tfName:"strides",name:"strides",type:"number[]"},{tfName:"padding",name:"pad",type:"string"},{tfName:"data_format",name:"dataFormat",type:"string",defaultValue:"NHWC"},{tfName:"explicit_paddings",name:"explicitPaddings",type:"number[]",defaultValue:[]},{tfName:"dilations",name:"dilations",type:"number[]"}]},{tfOpName:"DepthwiseConv2dNative",category:"convolution",inputs:[{start:0,name:"input",type:"tensor"},{start:1,name:"filter",type:"tensor"}],attrs:[{tfName:"strides",name:"strides",type:"number[]"},{tfName:"padding",name:"pad",type:"string"},{tfName:"data_format",name:"dataFormat",type:"string",defaultValue:"NHWC"},{tfName:"explicit_paddings",name:"explicitPaddings",type:"number[]",defaultValue:[]},{tfName:"dilations",name:"dilations",type:"number[]"}]},{tfOpName:"FusedDepthwiseConv2dNative",category:"convolution",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"filter",type:"tensor"},{start:2,end:0,name:"args",type:"tensors"}],attrs:[{tfName:"num_args",name:"numArgs",type:"number"},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0},{tfName:"strides",name:"strides",type:"number[]"},{tfName:"padding",name:"pad",type:"string"},{tfName:"data_format",name:"dataFormat",type:"string",defaultValue:"NHWC"},{tfName:"dilations",name:"dilations",type:"number[]",defaultValue:[1,1,1,1]},{tfName:"fused_ops",name:"fusedOps",type:"string[]",defaultValue:[]},{tfName:"explicit_paddings",name:"explicitPaddings",type:"number[]",defaultValue:[]}]},{tfOpName:"Conv3D",category:"convolution",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"filter",type:"tensor"}],attrs:[{tfName:"strides",name:"strides",type:"number[]"},{tfName:"padding",name:"pad",type:"string"},{tfName:"data_format",name:"dataFormat",type:"string",defaultValue:"NHWC"},{tfName:"dilations",name:"dilations",type:"number[]"}]},{tfOpName:"Dilation2D",category:"convolution",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"filter",type:"tensor"}],attrs:[{tfName:"strides",name:"strides",type:"number[]"},{tfName:"rates",name:"dilations",type:"number[]"},{tfName:"padding",name:"pad",type:"string"}]}],B=[{tfOpName:"Fill",category:"creation",inputs:[{start:0,name:"shape",type:"number[]"},{start:1,name:"value",type:"number"}],attrs:[{tfName:"T",name:"dtype",type:"dtype"}]},{tfOpName:"LinSpace",category:"creation",inputs:[{start:0,name:"start",type:"number"},{start:1,name:"stop",type:"number"},{start:2,name:"num",type:"number"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"OneHot",category:"creation",inputs:[{start:0,name:"indices",type:"tensor"},{start:1,name:"depth",type:"number"},{start:2,name:"onValue",type:"number",defaultValue:1},{start:3,name:"offValue",type:"number",defaultValue:0}],attrs:[{tfName:"axis",name:"axis",type:"number",notSupported:!0},{tfName:"T",name:"dtype",type:"dtype"}]},{tfOpName:"Ones",category:"creation",inputs:[{start:0,name:"shape",type:"number[]"}],attrs:[{tfName:"T",name:"dtype",type:"dtype"}]},{tfOpName:"OnesLike",category:"creation",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"dtype",name:"dtype",type:"dtype"}]},{tfOpName:"RandomStandardNormal",category:"creation",inputs:[{start:0,name:"shape",type:"number[]"}],attrs:[{tfName:"seed",name:"seed",type:"number",defaultValue:0},{tfName:"seed2",name:"seed2",type:"number",defaultValue:0,notSupported:!0},{tfName:"dtype",name:"dtype",type:"dtype"},{tfName:"T",name:"T",type:"number",notSupported:!0}]},{tfOpName:"RandomUniform",category:"creation",inputs:[{start:0,name:"shape",type:"number[]"}],attrs:[{tfName:"minval",name:"minval",type:"number",defaultValue:0},{tfName:"maxval",name:"maxval",type:"number",defaultValue:1},{tfName:"dtype",name:"dtype",type:"dtype"},{tfName:"seed",name:"seed",type:"number",defaultValue:0},{tfName:"seed2",name:"seed2",type:"number",defaultValue:0,notSupported:!0},{tfName:"T",name:"T",type:"number",notSupported:!0}]},{tfOpName:"Range",category:"creation",inputs:[{start:0,name:"start",type:"number"},{start:1,name:"stop",type:"number"},{start:2,name:"step",type:"number",defaultValue:0}],attrs:[{tfName:"Tidx",name:"dtype",type:"dtype"}]},{tfOpName:"TruncatedNormal",category:"creation",inputs:[{start:0,name:"shape",type:"number[]"}],attrs:[{tfName:"means",name:"mean",type:"number",defaultValue:0},{tfName:"stddev",name:"stdDev",type:"number",defaultValue:1},{tfName:"seed",name:"seed",type:"number"},{tfName:"seed2",name:"seed2",type:"number",defaultValue:0,notSupported:!0},{tfName:"dtype",name:"dtype",type:"dtype"},{tfName:"T",name:"T",type:"number",notSupported:!0}]},{tfOpName:"Zeros",category:"creation",inputs:[{start:0,name:"shape",type:"number[]"}],attrs:[{tfName:"T",name:"dtype",type:"dtype"}]},{tfOpName:"ZerosLike",category:"creation",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype"}]},{tfOpName:"Multinomial",category:"creation",inputs:[{start:0,name:"logits",type:"tensor"},{start:1,name:"numSamples",type:"number"}],attrs:[{tfName:"seed",name:"seed",type:"number"},{tfName:"seed2",name:"seed2",type:"number"},{tfName:"T",name:"dtype",type:"dtype"},{tfName:"output_dtype",name:"output_dtype",type:"dtype"}]}],P=[{tfOpName:"NonMaxSuppressionV2",category:"dynamic",inputs:[{start:0,name:"boxes",type:"tensor"},{start:1,name:"scores",type:"tensor"},{start:2,name:"maxOutputSize",type:"number"},{start:3,name:"iouThreshold",type:"number"}]},{tfOpName:"NonMaxSuppressionV3",category:"dynamic",inputs:[{start:0,name:"boxes",type:"tensor"},{start:1,name:"scores",type:"tensor"},{start:2,name:"maxOutputSize",type:"number"},{start:3,name:"iouThreshold",type:"number"},{start:4,name:"scoreThreshold",type:"number"}]},{tfOpName:"NonMaxSuppressionV4",category:"dynamic",inputs:[{start:0,name:"boxes",type:"tensor"},{start:1,name:"scores",type:"tensor"},{start:2,name:"maxOutputSize",type:"number"},{start:3,name:"iouThreshold",type:"number"},{start:4,name:"scoreThreshold",type:"number"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0},{tfName:"T_threshold",name:"threshold",type:"dtype",notSupported:!0},{tfName:"pad_to_max_output_size",name:"padToMaxOutputSize",type:"bool"}]},{tfOpName:"NonMaxSuppressionV5",category:"dynamic",inputs:[{start:0,name:"boxes",type:"tensor"},{start:1,name:"scores",type:"tensor"},{start:2,name:"maxOutputSize",type:"number"},{start:3,name:"iouThreshold",type:"number"},{start:4,name:"scoreThreshold",type:"number"},{start:5,name:"softNmsSigma",type:"number"}]},{tfOpName:"Where",category:"dynamic",inputs:[{start:0,name:"condition",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"ListDiff",category:"dynamic",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"y",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]}],V=[{tfOpName:"LowerBound",category:"evaluation",inputs:[{start:0,name:"sortedSequence",type:"tensor"},{start:1,name:"values",type:"tensor"}]},{tfOpName:"TopKV2",category:"evaluation",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"k",type:"number"}],attrs:[{tfName:"sorted",name:"sorted",type:"bool"}]},{tfOpName:"UpperBound",category:"evaluation",inputs:[{start:0,name:"sortedSequence",type:"tensor"},{start:1,name:"values",type:"tensor"}]},{tfOpName:"Unique",category:"evaluation",inputs:[{start:0,name:"x",type:"tensor"}]},{tfOpName:"UniqueV2",category:"evaluation",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"axis",type:"number"}]}],W=[{tfOpName:"PlaceholderWithDefault",category:"graph",inputs:[{start:0,name:"default",type:"tensor"}],attrs:[{tfName:"shape",name:"shape",type:"shape"},{tfName:"dtype",name:"dtype",type:"dtype"}]},{tfOpName:"Placeholder",category:"graph",attrs:[{tfName:"shape",name:"shape",type:"shape"},{tfName:"dtype",name:"dtype",type:"dtype"}]},{tfOpName:"Const",category:"graph"},{tfOpName:"Identity",category:"graph",inputs:[{start:0,name:"x",type:"tensor"}]},{tfOpName:"IdentityN",category:"graph",inputs:[{start:0,end:0,name:"x",type:"tensors"}]},{tfOpName:"Snapshot",category:"graph",inputs:[{start:0,name:"x",type:"tensor"}]},{tfOpName:"Rank",category:"graph",inputs:[{start:0,name:"x",type:"tensor"}]},{tfOpName:"Size",category:"graph",inputs:[{start:0,name:"x",type:"tensor"}]},{tfOpName:"Shape",category:"graph",inputs:[{start:0,name:"x",type:"tensor"}]},{tfOpName:"ShapeN",category:"graph",inputs:[{start:0,end:0,name:"x",type:"tensors"}]},{tfOpName:"Print",category:"graph",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"data",type:"tensors"}],attrs:[{tfName:"message",name:"message",type:"string"},{tfName:"first_n",name:"firstN",type:"number",notSupported:!0},{tfName:"summarize",name:"summarize",type:"number",defaultValue:3}]},{tfOpName:"NoOp",category:"graph",inputs:[]},{tfOpName:"StopGradient",category:"graph",inputs:[{start:0,name:"x",type:"tensor"}]},{tfOpName:"FakeQuantWithMinMaxVars",category:"graph",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"min",name:"min",type:"number"},{tfName:"max",name:"max",type:"number"}]}],U=[{tfOpName:"HashTable",category:"hash_table",inputs:[],attrs:[{tfName:"shared_name",name:"sharedName",type:"string"},{tfName:"use_node_name_sharing",name:"useNodeNameSharing",type:"bool"},{tfName:"key_dtype",name:"keyDType",type:"dtype"},{tfName:"value_dtype",name:"valueDType",type:"dtype"}]},{tfOpName:"HashTableV2",category:"hash_table",inputs:[],attrs:[{tfName:"shared_name",name:"sharedName",type:"string"},{tfName:"use_node_name_sharing",name:"useNodeNameSharing",type:"bool"},{tfName:"key_dtype",name:"keyDType",type:"dtype"},{tfName:"value_dtype",name:"valueDType",type:"dtype"}]},{tfOpName:"LookupTableImport",category:"hash_table",inputs:[{start:0,name:"tableHandle",type:"tensor"},{start:1,name:"keys",type:"tensor"},{start:2,name:"values",type:"tensor"}],attrs:[{tfName:"Tin",name:"tIn",type:"dtype",notSupported:!0},{tfName:"Tout",name:"tOut",type:"dtype",notSupported:!0}]},{tfOpName:"LookupTableImportV2",category:"hash_table",inputs:[{start:0,name:"tableHandle",type:"tensor"},{start:1,name:"keys",type:"tensor"},{start:2,name:"values",type:"tensor"}],attrs:[{tfName:"Tin",name:"tIn",type:"dtype",notSupported:!0},{tfName:"Tout",name:"tOut",type:"dtype",notSupported:!0}]},{tfOpName:"LookupTableFind",category:"hash_table",inputs:[{start:0,name:"tableHandle",type:"tensor"},{start:1,name:"keys",type:"tensor"},{start:2,name:"defaultValue",type:"tensor"}],attrs:[{tfName:"Tin",name:"tIn",type:"dtype",notSupported:!0},{tfName:"Tout",name:"tOut",type:"dtype",notSupported:!0}]},{tfOpName:"LookupTableFindV2",category:"hash_table",inputs:[{start:0,name:"tableHandle",type:"tensor"},{start:1,name:"keys",type:"tensor"},{start:2,name:"defaultValue",type:"tensor"}],attrs:[{tfName:"Tin",name:"tIn",type:"dtype",notSupported:!0},{tfName:"Tout",name:"tOut",type:"dtype",notSupported:!0}]},{tfOpName:"LookupTableSize",category:"hash_table",inputs:[{start:0,name:"tableHandle",type:"tensor"}]},{tfOpName:"LookupTableSizeV2",category:"hash_table",inputs:[{start:0,name:"tableHandle",type:"tensor"}]}],G=[{tfOpName:"ResizeBilinear",category:"image",inputs:[{start:0,name:"images",type:"tensor"},{start:1,name:"size",type:"number[]"}],attrs:[{tfName:"align_corners",name:"alignCorners",type:"bool"},{tfName:"half_pixel_centers",name:"halfPixelCenters",type:"bool"},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"ResizeNearestNeighbor",category:"image",inputs:[{start:0,name:"images",type:"tensor"},{start:1,name:"size",type:"number[]"}],attrs:[{tfName:"align_corners",name:"alignCorners",type:"bool"},{tfName:"half_pixel_centers",name:"halfPixelCenters",type:"bool"},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"CropAndResize",category:"image",inputs:[{start:0,name:"image",type:"tensor"},{start:1,name:"boxes",type:"tensor"},{start:2,name:"boxInd",type:"tensor"},{start:3,name:"cropSize",type:"number[]"}],attrs:[{tfName:"method",name:"method",type:"string"},{tfName:"extrapolation_value",name:"extrapolationValue",type:"number"}]},{tfOpName:"ImageProjectiveTransformV3",category:"image",inputs:[{start:0,name:"images",type:"tensor"},{start:1,name:"transforms",type:"tensor"},{start:2,name:"outputShape",type:"number[]"},{start:3,name:"fillValue",type:"number"}],attrs:[{tfName:"interpolation",name:"interpolation",type:"string"},{tfName:"fill_mode",name:"fillMode",type:"string"}]}],H=[{tfOpName:"Equal",category:"logical",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"NotEqual",category:"logical",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Greater",category:"logical",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"GreaterEqual",category:"logical",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Less",category:"logical",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"LessEqual",category:"logical",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"LogicalAnd",category:"logical",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"LogicalNot",category:"logical",inputs:[{start:0,name:"a",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"LogicalOr",category:"logical",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Select",category:"logical",inputs:[{start:0,name:"condition",type:"tensor"},{start:1,name:"a",type:"tensor"},{start:2,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"SelectV2",category:"logical",inputs:[{start:0,name:"condition",type:"tensor"},{start:1,name:"a",type:"tensor"},{start:2,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]}],q=[{tfOpName:"_FusedMatMul",category:"matrices",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"},{start:2,end:0,name:"args",type:"tensors"}],attrs:[{tfName:"num_args",name:"numArgs",type:"number"},{tfName:"fused_ops",name:"fusedOps",type:"string[]",defaultValue:[]},{tfName:"epsilon",name:"epsilon",type:"number",defaultValue:1e-4},{tfName:"transpose_a",name:"transposeA",type:"bool",defaultValue:!1},{tfName:"transpose_b",name:"transposeB",type:"bool",defaultValue:!1},{tfName:"leakyrelu_alpha",name:"leakyreluAlpha",type:"number",defaultValue:.2},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"MatMul",category:"matrices",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"transpose_a",name:"transposeA",type:"bool",defaultValue:!1},{tfName:"transpose_b",name:"transposeB",type:"bool",defaultValue:!1},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"BatchMatMul",category:"matrices",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"adj_x",name:"transposeA",type:"bool",defaultValue:!1},{tfName:"adj_y",name:"transposeB",type:"bool",defaultValue:!1},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"BatchMatMulV2",category:"matrices",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"adj_x",name:"transposeA",type:"bool",defaultValue:!1},{tfName:"adj_y",name:"transposeB",type:"bool",defaultValue:!1},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Transpose",category:"matrices",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"perm",type:"number[]"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Einsum",category:"matrices",inputs:[{start:0,end:0,name:"tensors",type:"tensors"}],attrs:[{tfName:"equation",name:"equation",type:"string"},{tfName:"N",name:"n",type:"number",defaultValue:2},{tfName:"T",name:"dtype",type:"dtype"}]}],X=[{tfOpName:"EuclideanNorm",category:"normalization",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"axis",type:"number[]"}],attrs:[{tfName:"keep_dims",name:"keepDims",type:"bool",defaultValue:!1}]},{tfOpName:"FusedBatchNorm",category:"normalization",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"scale",type:"tensor"},{start:2,name:"offset",type:"tensor"},{start:3,name:"mean",type:"tensor"},{start:4,name:"variance",type:"tensor"}],attrs:[{tfName:"epsilon",name:"epsilon",type:"number",defaultValue:.001},{tfName:"data_format",name:"dataFormat",type:"string",notSupported:!0}]},{tfOpName:"FusedBatchNormV2",category:"normalization",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"scale",type:"tensor"},{start:2,name:"offset",type:"tensor"},{start:3,name:"mean",type:"tensor"},{start:4,name:"variance",type:"tensor"}],attrs:[{tfName:"epsilon",name:"epsilon",type:"number",defaultValue:.001},{tfName:"data_format",name:"dataFormat",type:"string",notSupported:!0}]},{tfOpName:"FusedBatchNormV3",category:"normalization",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"scale",type:"tensor"},{start:2,name:"offset",type:"tensor"},{start:3,name:"mean",type:"tensor"},{start:4,name:"variance",type:"tensor"}],attrs:[{tfName:"epsilon",name:"epsilon",type:"number",defaultValue:.001},{tfName:"data_format",name:"dataFormat",type:"string",notSupported:!0}]},{tfOpName:"LRN",category:"normalization",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"depth_radius",name:"radius",type:"number",defaultValue:5},{tfName:"bias",name:"bias",type:"number",defaultValue:1},{tfName:"alpha",name:"alpha",type:"number",defaultValue:1},{tfName:"beta",name:"beta",type:"number",defaultValue:.5}]},{tfOpName:"Softmax",category:"normalization",inputs:[{start:0,name:"x",type:"tensor"}]},{tfOpName:"LogSoftmax",category:"normalization",inputs:[{start:0,name:"x",type:"tensor"}]},{tfOpName:"SparseToDense",category:"normalization",inputs:[{start:0,name:"sparseIndices",type:"tensor"},{start:1,name:"outputShape",type:"number[]"},{start:2,name:"sparseValues",type:"tensor"},{start:3,name:"defaultValue",type:"tensor"}],attrs:[{tfName:"validate_indices",name:"validateIndices",type:"bool",defaultValue:!0,notSupported:!0}]}],j=[{tfOpName:"Bincount",category:"reduction",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"size",type:"number"},{start:2,name:"weights",type:"tensor"}]},{tfOpName:"DenseBincount",category:"reduction",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"size",type:"number"},{start:2,name:"weights",type:"tensor"}],attrs:[{tfName:"binary_output",name:"binaryOutput",type:"bool"}]},{tfOpName:"Max",category:"reduction",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"axis",type:"number[]"}],attrs:[{tfName:"keep_dims",name:"keepDims",type:"bool"}]},{tfOpName:"Mean",category:"reduction",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"axis",type:"number[]"}],attrs:[{tfName:"keep_dims",name:"keepDims",type:"bool"}]},{tfOpName:"Min",category:"reduction",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"axis",type:"number[]"}],attrs:[{tfName:"keep_dims",name:"keepDims",type:"bool"}]},{tfOpName:"Sum",category:"reduction",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"axis",type:"number[]"}],attrs:[{tfName:"keep_dims",name:"keepDims",type:"bool"}]},{tfOpName:"All",category:"reduction",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"axis",type:"number[]"}],attrs:[{tfName:"keep_dims",name:"keepDims",type:"bool"}]},{tfOpName:"Any",category:"reduction",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"axis",type:"number[]"}],attrs:[{tfName:"keep_dims",name:"keepDims",type:"bool"}]},{tfOpName:"ArgMax",category:"reduction",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"axis",type:"number"}]},{tfOpName:"ArgMin",category:"reduction",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"axis",type:"number"}]},{tfOpName:"Prod",category:"reduction",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"axis",type:"number[]"}],attrs:[{tfName:"keep_dims",name:"keepDims",type:"bool"}]},{tfOpName:"Cumprod",category:"reduction",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"axis",type:"number"}],attrs:[{tfName:"exclusive",name:"exclusive",type:"bool"},{tfName:"reverse",name:"reverse",type:"bool"}]},{tfOpName:"Cumsum",category:"reduction",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"axis",type:"number"}],attrs:[{tfName:"exclusive",name:"exclusive",type:"bool"},{tfName:"reverse",name:"reverse",type:"bool"}]}],K=[{tfOpName:"ConcatV2",category:"slice_join",inputs:[{start:0,end:-1,name:"tensors",type:"tensors"},{start:-1,name:"axis",type:"number"}],attrs:[{tfName:"N",name:"n",type:"number",defaultValue:2}]},{tfOpName:"Concat",category:"slice_join",inputs:[{start:1,end:0,name:"tensors",type:"tensors"},{start:0,name:"axis",type:"number"}],attrs:[{tfName:"N",name:"n",type:"number",defaultValue:2}]},{tfOpName:"GatherV2",category:"slice_join",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"indices",type:"tensor"},{start:2,name:"axis",type:"number",defaultValue:0}],attrs:[{tfName:"batch_dims",name:"batchDims",type:"number",defaultValue:0}]},{tfOpName:"Gather",category:"slice_join",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"indices",type:"tensor"}],attrs:[{tfName:"validate_indices",name:"validateIndices",type:"bool",notSupported:!0}]},{tfOpName:"Reverse",category:"slice_join",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"dims",type:"bool[]"}]},{tfOpName:"ReverseV2",category:"slice_join",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"axis",type:"number[]"}]},{tfOpName:"Slice",category:"slice_join",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"begin",type:"number[]"},{start:2,name:"size",type:"number[]"}]},{tfOpName:"StridedSlice",category:"slice_join",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"begin",type:"number[]"},{start:2,name:"end",type:"number[]"},{start:3,name:"strides",type:"number[]"}],attrs:[{tfName:"begin_mask",name:"beginMask",type:"number",defaultValue:0},{tfName:"end_mask",name:"endMask",type:"number",defaultValue:0},{tfName:"new_axis_mask",name:"newAxisMask",type:"number",defaultValue:0},{tfName:"ellipsis_mask",name:"ellipsisMask",type:"number",defaultValue:0},{tfName:"shrink_axis_mask",name:"shrinkAxisMask",type:"number",defaultValue:0}]},{tfOpName:"Pack",category:"slice_join",inputs:[{start:0,end:0,name:"tensors",type:"tensors"}],attrs:[{tfName:"axis",name:"axis",type:"number",defaultValue:0}]},{tfOpName:"Unpack",category:"slice_join",inputs:[{start:0,name:"tensor",type:"tensor"}],attrs:[{tfName:"axis",name:"axis",type:"number",defaultValue:0},{tfName:"num",name:"num",type:"number",defaultValue:0,notSupported:!0}]},{tfOpName:"Tile",category:"slice_join",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"reps",type:"number[]"}]},{tfOpName:"Split",category:"slice_join",inputs:[{start:0,name:"axis",type:"number",defaultValue:0},{start:1,name:"x",type:"tensor"}],attrs:[{tfName:"num_split",name:"numOrSizeSplits",type:"number",defaultValue:1}]},{tfOpName:"SplitV",category:"slice_join",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"numOrSizeSplits",type:"number[]"},{start:2,name:"axis",type:"number",defaultValue:0}]},{tfOpName:"ScatterNd",category:"slice_join",inputs:[{start:0,name:"indices",type:"tensor"},{start:1,name:"values",type:"tensor"},{start:2,name:"shape",type:"number[]"}]},{tfOpName:"GatherNd",category:"slice_join",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"indices",type:"tensor"}]},{tfOpName:"SparseToDense",category:"slice_join",inputs:[{start:0,name:"sparseIndices",type:"tensor"},{start:1,name:"outputShape",type:"number[]"},{start:2,name:"sparseValues",type:"tensor"},{start:3,name:"defaultValue",type:"tensor"}],attrs:[{tfName:"validate_indices",name:"validateIndices",type:"bool",defaultValue:!1,notSupported:!0}]}],Y=[{tfOpName:"SparseFillEmptyRows",category:"sparse",inputs:[{start:0,name:"indices",type:"tensor"},{start:1,name:"values",type:"tensor"},{start:2,name:"denseShape",type:"tensor"},{start:3,name:"defaultValue",type:"tensor"}]},{tfOpName:"SparseReshape",category:"sparse",inputs:[{start:0,name:"inputIndices",type:"tensor"},{start:1,name:"inputShape",type:"tensor"},{start:2,name:"newShape",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"SparseSegmentMean",category:"sparse",inputs:[{start:0,name:"data",type:"tensor"},{start:1,name:"indices",type:"tensor"},{start:2,name:"segmentIds",type:"tensor"}]},{tfOpName:"SparseSegmentSum",category:"sparse",inputs:[{start:0,name:"data",type:"tensor"},{start:1,name:"indices",type:"tensor"},{start:2,name:"segmentIds",type:"tensor"}]}],Z=[{tfOpName:"FFT",category:"spectral",inputs:[{start:0,name:"x",type:"tensor"}]},{tfOpName:"IFFT",category:"spectral",inputs:[{start:0,name:"x",type:"tensor"}]},{tfOpName:"RFFT",category:"spectral",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"fft_length",type:"number",notSupported:!0}]},{tfOpName:"IRFFT",category:"spectral",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"fft_length",type:"number",notSupported:!0}]}],Q=[{tfOpName:"StringNGrams",category:"string",inputs:[{start:0,name:"data",type:"tensor"},{start:1,name:"dataSplits",type:"tensor"}],attrs:[{tfName:"separator",name:"separator",type:"string"},{tfName:"ngram_widths",name:"nGramWidths",type:"number[]"},{tfName:"left_pad",name:"leftPad",type:"string"},{tfName:"right_pad",name:"rightPad",type:"string"},{tfName:"pad_width",name:"padWidth",type:"number"},{tfName:"preserve_short_sequences",name:"preserveShortSequences",type:"bool"}],outputs:["ngrams","ngrams_splits"]},{tfOpName:"StringSplit",category:"string",inputs:[{start:0,name:"input",type:"tensor"},{start:1,name:"delimiter",type:"tensor"}],attrs:[{tfName:"skip_empty",name:"skipEmpty",type:"bool"}],outputs:["indices","values","shape"]},{tfOpName:"StringToHashBucketFast",category:"string",inputs:[{start:0,name:"input",type:"tensor"}],attrs:[{tfName:"num_buckets",name:"numBuckets",type:"number"}]}],J=[{tfOpName:"Cast",category:"transformation",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"SrcT",name:"sdtype",type:"dtype",notSupported:!0},{tfName:"DstT",name:"dtype",type:"dtype"}]},{tfOpName:"ExpandDims",category:"transformation",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"axis",type:"number"}]},{tfOpName:"MirrorPad",category:"transformation",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"padding",type:"number[]"}],attrs:[{tfName:"mode",name:"mode",type:"string"}]},{tfOpName:"Pad",category:"transformation",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"padding",type:"number[]"}],attrs:[{tfName:"constant_value",name:"constantValue",type:"number",defaultValue:0}]},{tfOpName:"PadV2",category:"transformation",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"padding",type:"number[]"},{start:2,name:"constantValue",type:"number",defaultValue:0}]},{tfOpName:"Reshape",category:"transformation",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"shape",type:"number[]"}]},{tfOpName:"Squeeze",category:"transformation",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"axis",tfDeprecatedName:"squeeze_dims",name:"axis",type:"number[]"}]},{tfOpName:"SpaceToBatchND",category:"transformation",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"blockShape",type:"number[]"},{start:2,name:"paddings",type:"number[]"}]},{tfOpName:"BatchToSpaceND",category:"transformation",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"blockShape",type:"number[]"},{start:2,name:"crops",type:"number[]"}]},{tfOpName:"DepthToSpace",category:"transformation",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"block_size",name:"blockSize",type:"number"},{tfName:"data_format",name:"dataFormat",type:"string"}]},{tfOpName:"BroadcastTo",category:"transformation",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"shape",type:"number[]"}],attrs:[]},{tfOpName:"BroadcastArgs",category:"transformation",inputs:[{start:0,name:"s0",type:"tensor"},{start:1,name:"s1",type:"tensor"}],attrs:[]}];class ee{static get Instance(){return this._instance||(this._instance=new this)}constructor(){const e=[].concat(...[s,a,r,i,o,l,u,c,h,p,d,f,m,g,y,b,x,v,w].map((e=>e.json)));this.opMappers=e.reduce(((e,t)=>(e[t.tfOpName]=t,e)),{})}transformGraph(e,t={}){const n=e.node,s=[],a=[],r=[],i=n.reduce(((e,t)=>(e[t.name]=this.mapNode(t),t.op.startsWith("Placeholder")?s.push(e[t.name]):"Const"===t.op?a.push(e[t.name]):null!=t.input&&0!==t.input.length||r.push(e[t.name]),e)),{});let o=[];const l=[];let u={},c={};null!=t&&(u=this.mapSignatureEntries(t.inputs),c=this.mapSignatureEntries(t.outputs));const h=Object.keys(i);h.forEach((e=>{const t=i[e];t.inputNames.forEach(((e,n)=>{const[s,,a]=_(e),r=i[s];if(null!=r.outputs){const e=r.outputs.indexOf(a);if(-1!==e){const a=`${s}:${e}`;t.inputNames[n]=a}}t.inputs.push(r),r.children.push(t)}))})),0===Object.keys(c).length?h.forEach((e=>{const t=i[e];0===t.children.length&&l.push(t)})):Object.keys(c).forEach((e=>{const[t]=_(e),n=i[t];null!=n&&(n.signatureKey=c[e],l.push(n))})),Object.keys(u).length>0?Object.keys(u).forEach((e=>{const[t]=_(e),n=i[t];n&&(n.signatureKey=u[e],o.push(n))})):o=s;let p={};null!=e.library&&null!=e.library.function&&(p=e.library.function.reduce(((e,t)=>(e[t.signature.name]=this.mapFunction(t),e)),{}));const d={nodes:i,inputs:o,outputs:l,weights:a,placeholders:s,signature:t,functions:p};return r.length>0&&(d.initNodes=r),d}mapSignatureEntries(e){return Object.keys(e||{}).reduce(((t,n)=>(t[e[n].name]=n,t)),{})}mapNode(e){const t=C(e.op)||this.opMappers[e.op]||{};null==e.attr&&(e.attr={});const n={name:e.name,op:e.op,category:t.category,inputNames:(e.input||[]).map((e=>e.startsWith("^")?e.slice(1):e)),inputs:[],children:[],inputParams:{},attrParams:{},rawAttrs:e.attr,outputs:t.outputs};return null!=t.inputs&&(n.inputParams=t.inputs.reduce(((e,t)=>(e[t.name]={type:t.type,inputIndexStart:t.start,inputIndexEnd:t.end},e)),{})),null!=t.attrs&&(n.attrParams=t.attrs.reduce(((t,n)=>{const s=n.type;let a;switch(n.type){case"string":a=ne(e.attr,n.tfName,n.defaultValue),void 0===a&&n.tfDeprecatedName&&(a=ne(e.attr,n.tfDeprecatedName,n.defaultValue));break;case"string[]":a=pe(e.attr,n.tfName,n.defaultValue),void 0===a&&n.tfDeprecatedName&&(a=pe(e.attr,n.tfDeprecatedName,n.defaultValue));break;case"number":a=ae(e.attr,n.tfName,n.defaultValue||0),void 0===a&&n.tfDeprecatedName&&(a=ae(e.attr,n.tfDeprecatedName,n.defaultValue));break;case"number[]":a=he(e.attr,n.tfName,n.defaultValue),void 0===a&&n.tfDeprecatedName&&(a=he(e.attr,n.tfDeprecatedName,n.defaultValue));break;case"bool":a=se(e.attr,n.tfName,n.defaultValue),void 0===a&&n.tfDeprecatedName&&(a=se(e.attr,n.tfDeprecatedName,n.defaultValue));break;case"bool[]":a=fe(e.attr,n.tfName,n.defaultValue),void 0===a&&n.tfDeprecatedName&&(a=fe(e.attr,n.tfDeprecatedName,n.defaultValue));break;case"shape":a=ce(e.attr,n.tfName,n.defaultValue),void 0===a&&n.tfDeprecatedName&&(a=ce(e.attr,n.tfDeprecatedName,n.defaultValue));break;case"shape[]":a=de(e.attr,n.tfName,n.defaultValue),void 0===a&&n.tfDeprecatedName&&(a=de(e.attr,n.tfDeprecatedName,n.defaultValue));break;case"dtype":a=oe(e.attr,n.tfName,n.defaultValue),void 0===a&&n.tfDeprecatedName&&(a=oe(e.attr,n.tfDeprecatedName,n.defaultValue));break;case"dtype[]":a=le(e.attr,n.tfName,n.defaultValue),void 0===a&&n.tfDeprecatedName&&(a=le(e.attr,n.tfDeprecatedName,n.defaultValue));break;case"func":a=ie(e.attr,n.tfName,n.defaultValue),void 0===a&&n.tfDeprecatedName&&(a=ie(e.attr,n.tfDeprecatedName,n.defaultValue));break;case"tensor":case"tensors":break;default:throw new Error(`Unsupported param type: ${n.type} for op: ${e.op}`)}return t[n.name]={value:a,type:s},t}),{})),n}mapFunction(e){const t=e.nodeDef,n=[];let s={};null!=t&&(s=t.reduce(((e,t)=>(e[t.name]=this.mapNode(t),"Const"===t.op&&n.push(e[t.name]),e)),{}));const a=[],r=[];e.signature.inputArg.forEach((e=>{const[t]=_(e.name),n={name:t,op:"Placeholder",inputs:[],inputNames:[],category:"graph",inputParams:{},attrParams:{dtype:{value:re(e.type),type:"dtype"}},children:[]};n.signatureKey=e.name,a.push(n),s[t]=n})),Object.keys(s).forEach((e=>{const t=s[e];t.inputNames.forEach(((e,n)=>{const[a,,r]=_(e),i=s[a];if(null!=i.outputs){const e=i.outputs.indexOf(r);if(-1!==e){const s=`${a}:${e}`;t.inputNames[n]=s}}t.inputs.push(i),i.children.push(t)}))}));const i=e.ret;e.signature.outputArg.forEach((e=>{const[t,n]=_(i[e.name]),a=s[t];null!=a&&(a.defaultOutput=n,r.push(a))}));const o=this.mapArgsToSignature(e);return{nodes:s,inputs:a,outputs:r,weights:n,placeholders:[],signature:o}}mapArgsToSignature(e){return{methodName:e.signature.name,inputs:e.signature.inputArg.reduce(((e,t)=>(e[t.name]=this.mapArgToTensorInfo(t),e)),{}),outputs:e.signature.outputArg.reduce(((t,n)=>(t[n.name]=this.mapArgToTensorInfo(n,e.ret),t)),{})}}mapArgToTensorInfo(e,t){let n=e.name;return null!=t&&(n=t[n]),{name:n,dtype:e.type}}}function te(e,t){const n=Array.isArray(e)?String.fromCharCode.apply(null,e):function(e){const t=(0,N.env)().global;if(void 0!==t.atob)return t.atob(e);if("undefined"!=typeof Buffer)return new Buffer(e,"base64").toString();throw new Error("Unable to decode base64 in this environment. Missing built-in atob() or Buffer()")}(e);return t?n:n.toLowerCase()}function ne(e,t,n,s=!1){const a=e[t];return null!=a?te(a.s,s):n}function se(e,t,n){const s=e[t];return s?s.b:n}function ae(e,t,n){const s=e[t]||{},a=null!=s.i?s.i:null!=s.f?s.f:n;return"number"==typeof a?a:parseInt(a,10)}function re(e){switch("string"==typeof e&&(e=I[e]),e){case I.DT_FLOAT:case I.DT_HALF:return"float32";case I.DT_INT32:case I.DT_INT64:case I.DT_INT8:case I.DT_UINT8:return"int32";case I.DT_BOOL:return"bool";case I.DT_DOUBLE:return"float32";case I.DT_STRING:return"string";default:return null}}function ie(e,t,n){const s=e[t];return s&&s.func?s.func.name:n}function oe(e,t,n){const s=e[t];return s&&s.type?re(s.type):n}function le(e,t,n){const s=e[t];return s&&s.list&&s.list.type?s.list.type.map((e=>re(e))):n}function ue(e){if(!e.unknownRank)return null!=e.dim?e.dim.map((e=>"number"==typeof e.size?e.size:parseInt(e.size,10))):[]}function ce(e,t,n){const s=e[t];return s&&s.shape?ue(s.shape):n}function he(e,t,n){const s=e[t];return s?((s.list.f&&s.list.f.length?s.list.f:s.list.i)||[]).map((e=>"number"==typeof e?e:parseInt(e,10))):n}function pe(e,t,n,s=!1){const a=e[t];return a&&a.list&&a.list.s?a.list.s.map((e=>te(e,s))):n}function de(e,t,n){const s=e[t];return s&&s.list&&s.list.shape?s.list.shape.map((e=>ue(e))):n}function fe(e,t,n){const s=e[t];return s&&s.list&&s.list.b?s.list.b:n}class me{constructor(e,t,n){this.node=e,this.tensorMap=t,this.context=n,this.inputs=[],this.attrs={},this.inputs=e.inputNames.map((e=>this.getInput(e))),null!=e.rawAttrs&&(this.attrs=Object.keys(e.rawAttrs).reduce(((e,t)=>(e[t]=this.getAttr(t),e)),{}))}getInput(e){return E(e,this.tensorMap,this.context)}getAttr(e,t){const n=this.node.rawAttrs[e];if(null!=n.tensor)return E(e,this.tensorMap,this.context);if(null!=n.i||null!=n.f)return ae(this.node.rawAttrs,e,t);if(null!=n.s)return ne(this.node.rawAttrs,e,t);if(null!=n.b)return se(this.node.rawAttrs,e,t);if(null!=n.shape)return ce(this.node.rawAttrs,e,t);if(null!=n.type)return oe(this.node.rawAttrs,e,t);if(null!=n.list){if(null!=n.list.i||null!=n.list.f)return he(this.node.rawAttrs,e,t);if(null!=n.list.s)return pe(this.node.rawAttrs,e,t);if(null!=n.list.shape)return de(this.node.rawAttrs,e,t);if(null!=n.list.b)return fe(this.node.rawAttrs,e,t);if(null!=n.list.type)return le(this.node.rawAttrs,e,t)}return t}}var ge=n(4689);function ye(e,t,n=""){if("number"!=typeof e&&"number"!=typeof t){N.util.assert(e.length===t.length,(()=>n+` Shapes ${e} and ${t} must match`));for(let s=0;s<e.length;s++){const a=e[s],r=t[s];N.util.assert(a<0||r<0||a===r,(()=>n+` Shapes ${e} and ${t} must match`))}}}function be(e){return"number"!=typeof e&&!e.some((e=>e<0))}function xe(e,t,n){let s=ve(e,n);const a=!be(s);if(a&&0===t.length)throw new Error(`Tried to calculate elements of an empty list with non-fully-defined elementShape: ${s}`);if(a&&t.forEach((e=>{s=ve(e.shape,s)})),!be(s))throw new Error(`Non-fully-defined elementShape: ${s}`);return s}function ve(e,t){if("number"==typeof e)return t;if("number"==typeof t)return e;if(e.length!==t.length)throw new Error(`Incompatible ranks during merge: ${e} vs. ${t}`);const n=[];for(let s=0;s<e.length;++s){const a=e[s],r=t[s];if(a>=0&&r>=0&&a!==r)throw new Error(`Incompatible shape during merge: ${e} vs. ${t}`);n[s]=a>=0?a:r}return n}class we{constructor(e,t,n,s,a,r,i){this.name=e,this.dtype=t,this.maxSize=n,this.elementShape=s,this.identicalElementShapes=a,this.dynamicSize=r,this.clearAfterRead=i,this.tensors=[],this.closed_=!1,this.idTensor=(0,N.scalar)(0),(0,N.keep)(this.idTensor)}get id(){return this.idTensor.id}get closed(){return this.closed_}clearAndClose(e){this.tensors.forEach((t=>{null!=e&&e.has(t.tensor.id)||t.tensor.dispose()})),this.tensors=[],this.closed_=!0,this.idTensor.dispose()}size(){return this.tensors.length}read(e){if(this.closed_)throw new Error(`TensorArray ${this.name} has already been closed.`);if(e<0||e>=this.size())throw new Error(`Tried to read from index ${e}, but array size is: ${this.size()}`);const t=this.tensors[e];if(t.cleared)throw new Error(`TensorArray ${this.name}: Could not read index ${e} twice because it was cleared after a previous read (perhaps try setting clear_after_read = false?).`);return this.clearAfterRead&&(t.cleared=!0),t.read=!0,t.tensor}readMany(e){return e.map((e=>this.read(e)))}write(e,t){if(this.closed_)throw new Error(`TensorArray ${this.name} has already been closed.`);if(e<0||!this.dynamicSize&&e>=this.maxSize)throw new Error(`Tried to write to index ${e}, but array is not resizeable and size is: ${this.maxSize}`);const n=this.tensors[e]||{};if(t.dtype!==this.dtype)throw new Error(`TensorArray ${this.name}: Could not write to TensorArray index ${e},\n          because the value dtype is ${t.dtype}, but TensorArray dtype is ${this.dtype}.`);if(0!==this.size()||null!=this.elementShape&&0!==this.elementShape.length||(this.elementShape=t.shape),ye(this.elementShape,t.shape,`TensorArray ${this.name}: Could not write to TensorArray index ${e}.`),n.read)throw new Error(`TensorArray ${this.name}: Could not write to TensorArray index ${e}, because it has already been read.`);if(n.written)throw new Error(`TensorArray ${this.name}: Could not write to TensorArray index ${e}, because it has already been written.`);n.tensor=t,(0,N.keep)(t),n.written=!0,this.tensors[e]=n}writeMany(e,t){if(e.length!==t.length)throw new Error(`TensorArray ${this.name}: could not write multiple tensors,because the index size: ${e.length} is not the same as tensors size: ${t.length}.`);e.forEach(((e,n)=>this.write(e,t[n])))}gather(e,t){if(t&&t!==this.dtype)throw new Error(`TensorArray dtype is ${this.dtype} but gather requested dtype ${t}`);if(e)e=e.slice(0,this.size());else{e=[];for(let t=0;t<this.size();t++)e.push(t)}if(0===e.length)return(0,N.tensor)([],[0].concat(this.elementShape));const n=this.readMany(e);return ye(this.elementShape,n[0].shape,"TensorArray shape mismatch: "),(0,N.stack)(n,0)}concat(e){if(e&&e!==this.dtype)throw new Error(`TensorArray dtype is ${this.dtype} but concat requested dtype ${e}`);if(0===this.size())return(0,N.tensor)([],[0].concat(this.elementShape));const t=[];for(let e=0;e<this.size();e++)t.push(e);const n=this.readMany(t);return ye(this.elementShape,n[0].shape,`TensorArray shape mismatch: tensor array shape (${this.elementShape}) vs first tensor shape (${n[0].shape})`),(0,N.concat)(n,0)}scatter(e,t){if(t.dtype!==this.dtype)throw new Error(`TensorArray dtype is ${this.dtype} but tensor has dtype ${t.dtype}`);if(e.length!==t.shape[0])throw new Error(`Expected len(indices) == tensor.shape[0], but saw: ${e.length} vs. ${t.shape[0]}`);const n=Math.max(...e);if(!this.dynamicSize&&n>=this.maxSize)throw new Error(`Max index must be < array size (${n}  vs. ${this.maxSize})`);this.writeMany(e,(0,N.unstack)(t,0))}split(e,t){if(t.dtype!==this.dtype)throw new Error(`TensorArray dtype is ${this.dtype} but tensor has dtype ${t.dtype}`);let n=0;const s=e.map((e=>(n+=e,n)));if(n!==t.shape[0])throw new Error(`Expected sum of lengths to be equal to\n          tensor.shape[0], but sum of lengths is\n        ${n}, and tensor's shape is: ${t.shape}`);if(!this.dynamicSize&&e.length!==this.maxSize)throw new Error(`TensorArray's size is not equal to the size of lengths (${this.maxSize} vs. ${e.length}), and the TensorArray is not marked as dynamically resizeable`);const a=0===n?0:t.size/n,r=[];(0,N.tidy)((()=>{t=(0,N.reshape)(t,[1,n,a]);for(let n=0;n<e.length;++n){const i=[0,0===n?0:s[n-1],0],o=[1,e[n],a];r[n]=(0,N.reshape)((0,N.slice)(t,i,o),this.elementShape)}return r}));const i=[];for(let t=0;t<e.length;t++)i[t]=t;this.writeMany(i,r)}}class ke{constructor(e,t,n,s=-1){this.tensors=e,this.elementShape=t,this.elementDtype=n,null!=e&&e.forEach((e=>{if(n!==e.dtype)throw new Error(`Invalid data types; op elements ${n}, but list elements ${e.dtype}`);ye(t,e.shape,"TensorList shape mismatch: "),(0,N.keep)(e)})),this.idTensor=(0,N.scalar)(0),this.maxNumElements=s,(0,N.keep)(this.idTensor)}get id(){return this.idTensor.id}copy(){return new ke([...this.tensors],this.elementShape,this.elementDtype)}clearAndClose(e){this.tensors.forEach((t=>{null!=e&&e.has(t.id)||t.dispose()})),this.tensors.length=0,this.idTensor.dispose()}size(){return this.tensors.length}stack(e,t,n=-1){if(t!==this.elementDtype)throw new Error(`Invalid data types; op elements ${t}, but list elements ${this.elementDtype}`);if(-1!==n&&this.tensors.length!==n)throw new Error(`Operation expected a list with ${n} elements but got a list with ${this.tensors.length} elements.`);ye(e,this.elementShape,"TensorList shape mismatch: ");const s=xe(this.elementShape,this.tensors,e);return(0,N.tidy)((()=>{const e=this.tensors.map((e=>(0,N.reshape)(e,s)));return(0,N.stack)(e,0)}))}popBack(e,t){if(t!==this.elementDtype)throw new Error(`Invalid data types; op elements ${t}, but list elements ${this.elementDtype}`);if(0===this.size())throw new Error("Trying to pop from an empty list.");const n=xe(this.elementShape,this.tensors,e),s=this.tensors.pop();return s.kept=!1,ye(s.shape,e,"TensorList shape mismatch: "),(0,N.reshape)(s,n)}pushBack(e){if(e.dtype!==this.elementDtype)throw new Error(`Invalid data types; op elements ${e.dtype}, but list elements ${this.elementDtype}`);if(ye(e.shape,this.elementShape,"TensorList shape mismatch: "),this.maxNumElements===this.size())throw new Error("Trying to push element into a full list.");(0,N.keep)(e),this.tensors.push(e)}resize(e){if(e<0)throw new Error(`TensorListResize expects size to be non-negative. Got: ${e}`);if(-1!==this.maxNumElements&&e>this.maxNumElements)throw new Error(`TensorListResize input size ${e} is greater maxNumElement ${this.maxNumElements}.`);const t=new ke([],this.elementShape,this.elementDtype,this.maxNumElements);t.tensors.length=e;for(let n=0;n<Math.min(this.tensors.length,e);++n)t.tensors[n]=this.tensors[n];return t}getItem(e,t,n){if(n!==this.elementDtype)throw new Error(`Invalid data types; op elements ${n}, but list elements ${this.elementDtype}`);if(e<0||e>this.tensors.length)throw new Error(`Trying to access element ${e} in a list with ${this.tensors.length} elements.`);if(null==this.tensors[e])throw new Error(`element at index ${e} is null.`);ye(this.tensors[e].shape,t,"TensorList shape mismatch: ");const s=xe(this.elementShape,this.tensors,t);return(0,N.reshape)(this.tensors[e],s)}setItem(e,t){if(t.dtype!==this.elementDtype)throw new Error(`Invalid data types; op elements ${t.dtype}, but list elements ${this.elementDtype}`);if(e<0||-1!==this.maxNumElements&&e>=this.maxNumElements)throw new Error(`Trying to set element ${e} in a list with max ${this.maxNumElements} elements.`);ye(this.elementShape,t.shape,"TensorList shape mismatch: "),(0,N.keep)(t),null!=this.tensors[e]&&(this.tensors[e].kept=!1),this.tensors[e]=t}gather(e,t,n){if(t!==this.elementDtype)throw new Error(`Invalid data types; op elements ${t}, but list elements ${this.elementDtype}`);ye(this.elementShape,n,"TensorList shape mismatch: "),e=e.slice(0,this.size());const s=xe(this.elementShape,this.tensors,n);return 0===e.length?(0,N.tensor)([],[0].concat(s)):(0,N.tidy)((()=>{const t=e.map((e=>(0,N.reshape)(this.tensors[e],s)));return(0,N.stack)(t,0)}))}concat(e,t){if(e&&e!==this.elementDtype)throw new Error(`TensorList dtype is ${this.elementDtype} but concat requested dtype ${e}`);ye(this.elementShape,t,"TensorList shape mismatch: ");const n=xe(this.elementShape,this.tensors,t);return 0===this.size()?(0,N.tensor)([],[0].concat(n)):(0,N.tidy)((()=>{const e=this.tensors.map((e=>(0,N.reshape)(e,n)));return(0,N.concat)(e,0)}))}}function Ie(e,t,n){const[s,a]=$("fusedOps",e,t,n),r="biasadd"===s,i=!r,o="prelu"===a,l="fusedbatchnorm"===s,u=$("numArgs",e,t,n);if(r){if(o&&2!==u)throw new Error("FusedConv2d and DepthwiseConv2d with BiasAdd and Prelu must have two extra arguments: bias and alpha.");if(!o&&r&&1!==u)throw new Error("FusedConv2d and DepthwiseConv2d with BiasAdd must have one extra argument: bias.")}if(l)throw new Error("FusedConv2d and DepthwiseConv2d with FusedBatchNorm is not supported");const c=$("strides",e,t,n),h=F(e,t,n),p=$("dataFormat",e,t,n).toUpperCase(),d=$("dilations",e,t,n);let[f,m]=$("args",e,t,n);return i&&(m=f,f=void 0),{stride:c,pad:h,dataFormat:p,dilations:d,biasArg:f,preluArg:m,activationFunc:a,leakyreluAlpha:$("leakyreluAlpha",e,t,n)}}function Se(e,t,n){return{boxes:$("boxes",e,t,n),scores:$("scores",e,t,n),maxOutputSize:$("maxOutputSize",e,t,n),iouThreshold:$("iouThreshold",e,t,n),scoreThreshold:$("scoreThreshold",e,t,n),softNmsSigma:$("softNmsSigma",e,t,n)}}var Ne=n(503);class Te{constructor(e,t){this.keyDType=e,this.valueDType=t,this.handle=(0,N.scalar)(0),this.tensorMap=new Map,(0,N.keep)(this.handle)}get id(){return this.handle.id}clearAndClose(){this.tensorMap.forEach((e=>e.dispose())),this.tensorMap.clear(),this.handle.dispose()}size(){return this.tensorMap.size}tensorSize(){return Ne.i(this.size(),"int32")}async import(e,t){this.checkKeyAndValueTensor(e,t);const n=await e.data();return this.tensorMap.forEach((e=>e.dispose())),this.tensorMap.clear(),(0,N.tidy)((()=>{const e=(0,N.unstack)(t),s=n.length,a=e.length;N.util.assert(s===a,(()=>`The number of elements doesn't match, keys has ${s} elements, the values has ${a} elements.`));for(let t=0;t<s;t++){const s=n[t],a=e[t];(0,N.keep)(a),this.tensorMap.set(s,a)}return this.handle}))}async find(e,t){this.checkKeyAndValueTensor(e,t);const n=await e.data();return(0,N.tidy)((()=>{const e=[];for(let s=0;s<n.length;s++){const a=n[s],r=this.findWithDefault(a,t);e.push(r)}return(0,N.stack)(e)}))}findWithDefault(e,t){const n=this.tensorMap.get(e);return null!=n?n:t}checkKeyAndValueTensor(e,t){if(e.dtype!==this.keyDType)throw new Error(`Expect key dtype ${this.keyDType}, but got ${e.dtype}`);if(t.dtype!==this.valueDType)throw new Error(`Expect value dtype ${this.valueDType}, but got ${t.dtype}`)}}function Ce(e,t,n,s,a=N.tidy){const r=((e,t,n)=>{switch(e.category){case"arithmetic":return a((()=>((e,t,n,s=k)=>{switch(e.op){case"BiasAdd":case"AddV2":case"Add":return[s.add($("a",e,t,n),$("b",e,t,n))];case"AddN":return[s.addN($("tensors",e,t,n))];case"FloorMod":case"Mod":return[s.mod($("a",e,t,n),$("b",e,t,n))];case"Mul":return[s.mul($("a",e,t,n),$("b",e,t,n))];case"RealDiv":case"Div":return[s.div($("a",e,t,n),$("b",e,t,n))];case"DivNoNan":return[s.divNoNan($("a",e,t,n),$("b",e,t,n))];case"FloorDiv":return[s.floorDiv($("a",e,t,n),$("b",e,t,n))];case"Sub":return[s.sub($("a",e,t,n),$("b",e,t,n))];case"Minimum":return[s.minimum($("a",e,t,n),$("b",e,t,n))];case"Maximum":return[s.maximum($("a",e,t,n),$("b",e,t,n))];case"Pow":return[s.pow($("a",e,t,n),$("b",e,t,n))];case"SquaredDifference":return[s.squaredDifference($("a",e,t,n),$("b",e,t,n))];default:throw TypeError(`Node type ${e.op} is not implemented`)}})(e,t,n)));case"basic_math":return a((()=>((e,t,n,s=k)=>{switch(e.op){case"Abs":case"ComplexAbs":return[s.abs($("x",e,t,n))];case"Acos":return[s.acos($("x",e,t,n))];case"Acosh":return[s.acosh($("x",e,t,n))];case"Asin":return[s.asin($("x",e,t,n))];case"Asinh":return[s.asinh($("x",e,t,n))];case"Atan":return[s.atan($("x",e,t,n))];case"Atan2":return[s.atan2($("x",e,t,n),$("y",e,t,n))];case"Atanh":return[s.atanh($("x",e,t,n))];case"Ceil":return[s.ceil($("x",e,t,n))];case"Complex":return[s.complex($("real",e,t,n),$("imag",e,t,n))];case"Cos":return[s.cos($("x",e,t,n))];case"Cosh":return[s.cosh($("x",e,t,n))];case"Elu":return[s.elu($("x",e,t,n))];case"Erf":return[s.erf($("x",e,t,n))];case"Exp":return[s.exp($("x",e,t,n))];case"Expm1":return[s.expm1($("x",e,t,n))];case"Floor":return[s.floor($("x",e,t,n))];case"Log":return[s.log($("x",e,t,n))];case"Log1p":return[s.log1p($("x",e,t,n))];case"Imag":return[s.imag($("x",e,t,n))];case"Neg":return[s.neg($("x",e,t,n))];case"Reciprocal":return[s.reciprocal($("x",e,t,n))];case"Real":return[s.real($("x",e,t,n))];case"Relu":return[s.relu($("x",e,t,n))];case"Round":return[s.round($("x",e,t,n))];case"Selu":return[s.selu($("x",e,t,n))];case"Sigmoid":return[s.sigmoid($("x",e,t,n))];case"Sin":return[s.sin($("x",e,t,n))];case"Sign":return[s.sign($("x",e,t,n))];case"Sinh":return[s.sinh($("x",e,t,n))];case"Softplus":return[s.softplus($("x",e,t,n))];case"Sqrt":return[s.sqrt($("x",e,t,n))];case"Square":return[s.square($("x",e,t,n))];case"Tanh":return[s.tanh($("x",e,t,n))];case"Tan":return[s.tan($("x",e,t,n))];case"ClipByValue":return[s.clipByValue($("x",e,t,n),$("clipValueMin",e,t,n),$("clipValueMax",e,t,n))];case"Relu6":return[s.relu6($("x",e,t,n))];case"Rsqrt":return[s.rsqrt(E(e.inputNames[0],t,n))];case"Prod":return[s.prod($("x",e,t,n),$("axes",e,t,n))];case"LeakyRelu":return[s.leakyRelu($("x",e,t,n),$("alpha",e,t,n))];case"Prelu":return[s.prelu($("x",e,t,n),$("alpha",e,t,n))];case"IsNan":return[s.isNaN(E(e.inputNames[0],t,n))];default:throw TypeError(`Node type ${e.op} is not implemented`)}})(e,t,n)));case"control":return(async(e,t,n)=>{switch(e.op){case"If":case"StatelessIf":{const s=$("thenBranch",e,t,n),a=$("elseBranch",e,t,n),r=$("cond",e,t,n),i=$("args",e,t,n);return(await r.data())[0]?n.functionMap[s].executeFunctionAsync(i,n.tensorArrayMap,n.tensorListMap):n.functionMap[a].executeFunctionAsync(i,n.tensorArrayMap,n.tensorListMap)}case"While":case"StatelessWhile":{const s=$("body",e,t,n),a=$("cond",e,t,n),r=$("args",e,t,n),i=await n.functionMap[a].executeFunctionAsync(r,n.tensorArrayMap,n.tensorListMap),o=r.map((e=>e.id));let l=await i[0].data();i.forEach((e=>{e.kept||-1!==o.indexOf(e.id)||e.dispose()}));let u=r;for(;l[0];){const e=u;u=await n.functionMap[s].executeFunctionAsync(u,n.tensorArrayMap,n.tensorListMap);const t=u.map((e=>e.id));e.forEach((e=>{e.kept||-1!==o.indexOf(e.id)||-1!==t.indexOf(e.id)||e.dispose()}));const r=await n.functionMap[a].executeFunctionAsync(u,n.tensorArrayMap,n.tensorListMap);l=await r[0].data(),r.forEach((e=>{e.kept||-1!==o.indexOf(e.id)||-1!==t.indexOf(e.id)||e.dispose()}))}return u}case"LoopCond":return[D($("pred",e,t,n))];case"Switch":{const s=$("pred",e,t,n);let a=$("data",e,t,n);return a.kept||(a=D(a)),(await s.data())[0]?[void 0,a]:[a,void 0]}case"Merge":{const s=e.inputNames.find((e=>void 0!==E(e,t,n)));return s?[D(E(s,t,n))]:void 0}case"Enter":{const s=$("frameName",e,t,n),a=$("tensor",e,t,n);return n.enterFrame(s),[D(a)]}case"Exit":{const s=$("tensor",e,t,n);return n.exitFrame(),[D(s)]}case"NextIteration":{const s=$("tensor",e,t,n);return n.nextIteration(),[D(s)]}case"TensorArrayV3":{const s=$("size",e,t,n),a=$("dtype",e,t,n),r=$("elementShape",e,t,n),i=$("dynamicSize",e,t,n),o=$("clearAfterRead",e,t,n),l=$("identicalElementShapes",e,t,n),u=$("name",e,t,n),c=new we(u,a,s,r,l,i,o);return n.addTensorArray(c),[c.idTensor,(0,N.scalar)(1)]}case"TensorArrayWriteV3":{const s=$("tensorArrayId",e,t,n),a=$("index",e,t,n),r=$("tensor",e,t,n),i=n.getTensorArray(s.id);return i.write(a,r),[i.idTensor]}case"TensorArrayReadV3":{const s=$("tensorArrayId",e,t,n),a=$("index",e,t,n);return[n.getTensorArray(s.id).read(a)]}case"TensorArrayGatherV3":{const s=$("tensorArrayId",e,t,n),a=$("indices",e,t,n),r=$("dtype",e,t,n);return[n.getTensorArray(s.id).gather(a,r)]}case"TensorArrayScatterV3":{const s=$("tensorArrayId",e,t,n),a=$("indices",e,t,n),r=$("tensor",e,t,n),i=n.getTensorArray(s.id);return i.scatter(a,r),[i.idTensor]}case"TensorArrayConcatV3":{const s=$("tensorArrayId",e,t,n),a=n.getTensorArray(s.id),r=$("dtype",e,t,n);return[a.concat(r)]}case"TensorArraySplitV3":{const s=$("tensorArrayId",e,t,n),a=$("tensor",e,t,n),r=$("lengths",e,t,n),i=n.getTensorArray(s.id);return i.split(r,a),[i.idTensor]}case"TensorArraySizeV3":{const s=$("tensorArrayId",e,t,n),a=n.getTensorArray(s.id);return[(0,N.scalar)(a.size(),"int32")]}case"TensorArrayCloseV3":{const s=$("tensorArrayId",e,t,n),a=n.getTensorArray(s.id);return a.clearAndClose(),[a.idTensor]}case"TensorListSetItem":{const s=$("tensorListId",e,t,n),a=$("index",e,t,n),r=$("tensor",e,t,n),i=n.getTensorList(s.id);return i.setItem(a,r),[i.idTensor]}case"TensorListGetItem":{const s=$("tensorListId",e,t,n),a=$("index",e,t,n),r=$("elementShape",e,t,n),i=$("elementDType",e,t,n);return[n.getTensorList(s.id).getItem(a,r,i)]}case"TensorListScatterV2":case"TensorListScatter":{const s=$("indices",e,t,n),a=function(e,t,n,s){if(t.length!==e.shape[0])throw new Error(`Expected len(indices) == tensor.shape[0], but saw: ${t.length} vs. ${e.shape[0]}`);const a=Math.max(...t);if(null!=s&&-1!==s&&a>=s)throw new Error(`Max index must be < array size (${a}  vs. ${s})`);const r=new ke([],n,e.dtype,s),i=(0,N.unstack)(e,0);return t.forEach(((e,t)=>{r.setItem(e,i[t])})),r}($("tensor",e,t,n),s,$("elementShape",e,t,n),$("numElements",e,t,n));return n.addTensorList(a),[a.idTensor]}case"TensorListReserve":case"EmptyTensorList":{const s=$("elementShape",e,t,n),a=$("elementDType",e,t,n);let r;r="TensorListReserve"===e.op?"numElements":"maxNumElements";const i=$(r,e,t,n),o=function(e,t,n,s){return new ke([],e,t,s)}(s,a,0,"TensorListReserve"===e.op?-1:i);return n.addTensorList(o),[o.idTensor]}case"TensorListGather":{const s=$("tensorListId",e,t,n),a=$("indices",e,t,n),r=$("elementShape",e,t,n),i=$("elementDType",e,t,n);return[n.getTensorList(s.id).gather(a,i,r)]}case"TensorListStack":{const s=$("tensorListId",e,t,n),a=$("elementShape",e,t,n),r=$("elementDType",e,t,n),i=$("numElements",e,t,n);return[n.getTensorList(s.id).stack(a,r,i)]}case"TensorListFromTensor":{const s=function(e,t,n){const s=e.dtype;if(e.shape.length<1)throw new Error(`Tensor must be at least a vector, but saw shape: ${e.shape}`);if(e.dtype!==n)throw new Error(`Invalid data types; op elements ${e.dtype}, but list elements ${n}`);ye(e.shape.slice(1),t,"TensorList shape mismatch: ");const a=(0,N.unstack)(e);return new ke(a,t,s)}($("tensor",e,t,n),$("elementShape",e,t,n),$("elementDType",e,t,n));return n.addTensorList(s),[s.idTensor]}case"TensorListConcat":case"TensorListConcatV2":{const s=$("tensorListId",e,t,n),a=n.getTensorList(s.id),r=$("dtype",e,t,n),i=$("elementShape",e,t,n);return[a.concat(r,i)]}case"TensorListPushBack":{const s=$("tensorListId",e,t,n),a=$("tensor",e,t,n),r=n.getTensorList(s.id);return r.pushBack(a),[r.idTensor]}case"TensorListPopBack":{const s=$("tensorListId",e,t,n),a=$("elementShape",e,t,n),r=$("elementDType",e,t,n);return[n.getTensorList(s.id).popBack(a,r)]}case"TensorListSplit":{const s=$("tensor",e,t,n),a=$("elementShape",e,t,n),r=function(e,t,n){let s=0;const a=t.map((e=>(s+=e,s)));if(s!==e.shape[0])throw new Error(`Expected sum of lengths to be equal to\n          tensor.shape[0], but sum of lengths is\n        ${s}, and tensor's shape is: ${e.shape}`);const r=ve(e.shape.slice(1),n),i=0===s?0:e.size/s,o=(0,N.tidy)((()=>{const n=[];e=(0,N.reshape)(e,[1,s,i]);for(let s=0;s<t.length;++s){const o=[0,0===s?0:a[s-1],0],l=[1,t[s],i];n[s]=(0,N.reshape)((0,N.slice)(e,o,l),r)}return e.dispose(),n})),l=new ke([],n,e.dtype,t.length);for(let e=0;e<o.length;e++)l.setItem(e,o[e]);return l}(s,$("lengths",e,t,n),a);return n.addTensorList(r),[r.idTensor]}case"TensorListLength":{const s=$("tensorListId",e,t,n),a=n.getTensorList(s.id);return[(0,N.scalar)(a.size(),"int32")]}case"TensorListResize":{const s=$("tensorListId",e,t,n),a=$("size",e,t,n),r=n.getTensorList(s.id).resize(a);return n.addTensorList(r),[r.idTensor]}default:throw TypeError(`Node type ${e.op} is not implemented`)}})(e,t,n);case"convolution":return a((()=>((e,t,n,s=k)=>{switch(e.op){case"Conv1D":{const a=$("stride",e,t,n),r=$("pad",e,t,n),i=$("dataFormat",e,t,n).toUpperCase(),o=$("dilation",e,t,n);return[s.conv1d($("x",e,t,n),$("filter",e,t,n),a,r,i,o)]}case"Conv2D":{const a=$("strides",e,t,n),r=F(e,t,n),i=$("dataFormat",e,t,n).toUpperCase(),o=$("dilations",e,t,n);return[s.conv2d($("x",e,t,n),$("filter",e,t,n),[a[1],a[2]],r,i,[o[1],o[2]])]}case"_FusedConv2D":{const{stride:a,pad:r,dataFormat:i,dilations:o,biasArg:l,preluArg:u,activationFunc:c,leakyreluAlpha:h}=Ie(e,t,n);return[s.fused.conv2d({x:$("x",e,t,n),filter:$("filter",e,t,n),strides:[a[1],a[2]],pad:r,dataFormat:i,dilations:[o[1],o[2]],bias:l,activation:c,preluActivationWeights:u,leakyreluAlpha:h})]}case"FusedDepthwiseConv2dNative":{const{stride:a,pad:r,dataFormat:i,dilations:o,biasArg:l,preluArg:u,activationFunc:c,leakyreluAlpha:h}=Ie(e,t,n);return[s.fused.depthwiseConv2d({x:$("x",e,t,n),filter:$("filter",e,t,n),strides:[a[1],a[2]],pad:r,dataFormat:i,dilations:[o[1],o[2]],bias:l,activation:c,preluActivationWeights:u,leakyreluAlpha:h})]}case"Conv2DBackpropInput":case"Conv2dTranspose":{const a=$("outputShape",e,t,n),r=$("strides",e,t,n),i=F(e,t,n);return[s.conv2dTranspose($("x",e,t,n),$("filter",e,t,n),a,[r[1],r[2]],i)]}case"DepthwiseConv2dNative":case"DepthwiseConv2d":{const a=$("strides",e,t,n),r=F(e,t,n),i=$("dilations",e,t,n),o=$("dataFormat",e,t,n).toUpperCase();return[s.depthwiseConv2d($("input",e,t,n),$("filter",e,t,n),[a[1],a[2]],r,o,[i[1],i[2]])]}case"Conv3D":{const a=$("strides",e,t,n),r=$("pad",e,t,n),i=$("dataFormat",e,t,n).toUpperCase(),o=$("dilations",e,t,n);return[s.conv3d($("x",e,t,n),$("filter",e,t,n),[a[1],a[2],a[3]],r,i,[o[1],o[2],o[3]])]}case"AvgPool":{const a=$("strides",e,t,n),r=$("pad",e,t,n),i=$("kernelSize",e,t,n);return[s.avgPool($("x",e,t,n),[i[1],i[2]],[a[1],a[2]],r)]}case"MaxPool":{const a=$("strides",e,t,n),r=$("pad",e,t,n),i=$("kernelSize",e,t,n);return[s.maxPool($("x",e,t,n),[i[1],i[2]],[a[1],a[2]],r)]}case"MaxPoolWithArgmax":{const a=$("strides",e,t,n),r=$("pad",e,t,n),i=$("kernelSize",e,t,n),o=$("includeBatchInIndex",e,t,n),{result:l,indexes:u}=s.maxPoolWithArgmax($("x",e,t,n),[i[1],i[2]],[a[1],a[2]],r,o);return[l,u]}case"AvgPool3D":{const a=$("strides",e,t,n),r=$("pad",e,t,n),i=$("kernelSize",e,t,n);return[s.avgPool3d($("x",e,t,n),[i[1],i[2],i[3]],[a[1],a[2],a[3]],r)]}case"MaxPool3D":{const a=$("strides",e,t,n),r=$("pad",e,t,n),i=$("kernelSize",e,t,n);return[s.maxPool3d($("x",e,t,n),[i[1],i[2],i[3]],[a[1],a[2],a[3]],r)]}case"Dilation2D":{const a=$("strides",e,t,n),r=$("pad",e,t,n),i=$("dilations",e,t,n),o=a[1],l=a[2],u=i[1],c=i[2];return[s.dilation2d($("x",e,t,n),$("filter",e,t,n),[o,l],r,[u,c],"NHWC")]}default:throw TypeError(`Node type ${e.op} is not implemented`)}})(e,t,n)));case"creation":return a((()=>((e,t,n,s=k)=>{switch(e.op){case"Fill":{const a=$("shape",e,t,n),r=$("dtype",e,t,n),i=$("value",e,t,n);return[s.fill(a,i,r)]}case"LinSpace":{const a=$("start",e,t,n),r=$("stop",e,t,n),i=$("num",e,t,n);return[s.linspace(a,r,i)]}case"Multinomial":{const a=$("logits",e,t,n),r=$("numSamples",e,t,n),i=$("seed",e,t,n);return[s.multinomial(a,r,i)]}case"OneHot":{const a=$("indices",e,t,n),r=$("depth",e,t,n),i=$("onValue",e,t,n),o=$("offValue",e,t,n),l=$("dtype",e,t,n);return[s.oneHot(a,r,i,o,l)]}case"Ones":return[s.ones($("shape",e,t,n),$("dtype",e,t,n))];case"OnesLike":return[s.onesLike($("x",e,t,n))];case"RandomStandardNormal":return[s.randomStandardNormal($("shape",e,t,n),$("dtype",e,t,n),$("seed",e,t,n))];case"RandomUniform":return[s.randomUniform($("shape",e,t,n),$("minval",e,t,n),$("maxval",e,t,n),$("dtype",e,t,n))];case"Range":{const a=$("start",e,t,n),r=$("stop",e,t,n),i=$("step",e,t,n);return[s.range(a,r,i,$("dtype",e,t,n))]}case"TruncatedNormal":{const a=$("shape",e,t,n),r=$("mean",e,t,n),i=$("stdDev",e,t,n),o=$("seed",e,t,n);return[s.truncatedNormal(a,r,i,$("dtype",e,t,n),o)]}case"Zeros":return[s.zeros($("shape",e,t,n),$("dtype",e,t,n))];case"ZerosLike":return[s.zerosLike($("x",e,t,n))];default:throw TypeError(`Node type ${e.op} is not implemented`)}})(e,t,n)));case"dynamic":return(async(e,t,n,s,a=k)=>{switch(e.op){case"NonMaxSuppressionV5":{const{boxes:s,scores:r,maxOutputSize:i,iouThreshold:o,scoreThreshold:l,softNmsSigma:u}=Se(e,t,n),c=await a.image.nonMaxSuppressionWithScoreAsync(s,r,i,o,l,u);return[c.selectedIndices,c.selectedScores]}case"NonMaxSuppressionV4":{const{boxes:s,scores:r,maxOutputSize:i,iouThreshold:o,scoreThreshold:l}=Se(e,t,n),u=$("padToMaxOutputSize",e,t,n),c=await a.image.nonMaxSuppressionPaddedAsync(s,r,i,o,l,u);return[c.selectedIndices,c.validOutputs]}case"NonMaxSuppressionV3":case"NonMaxSuppressionV2":{const{boxes:s,scores:r,maxOutputSize:i,iouThreshold:o,scoreThreshold:l}=Se(e,t,n);return[await a.image.nonMaxSuppressionAsync(s,r,i,o,l)]}case"Where":{const s=a.cast($("condition",e,t,n),"bool"),r=[await a.whereAsync(s)];return s.dispose(),r}case"ListDiff":return a.setdiff1dAsync($("x",e,t,n),$("y",e,t,n));default:throw TypeError(`Node type ${e.op} is not implemented`)}})(e,t,n);case"evaluation":return a((()=>((e,t,n,s=k)=>{switch(e.op){case"LowerBound":{const a=$("sortedSequence",e,t,n),r=$("values",e,t,n);return[s.lowerBound(a,r)]}case"TopKV2":{const a=$("x",e,t,n),r=$("k",e,t,n),i=$("sorted",e,t,n),o=s.topk(a,r,i);return[o.values,o.indices]}case"UpperBound":{const a=$("sortedSequence",e,t,n),r=$("values",e,t,n);return[s.upperBound(a,r)]}case"Unique":{const a=$("x",e,t,n),r=s.unique(a);return[r.values,r.indices]}case"UniqueV2":{const a=$("x",e,t,n),r=$("axis",e,t,n),i=s.unique(a,r);return[i.values,i.indices]}default:throw TypeError(`Node type ${e.op} is not implemented`)}})(e,t,n)));case"image":return a((()=>((e,t,n,s=k)=>{switch(e.op){case"ResizeBilinear":{const a=$("images",e,t,n),r=$("size",e,t,n),i=$("alignCorners",e,t,n),o=$("halfPixelCenters",e,t,n);return[s.image.resizeBilinear(a,[r[0],r[1]],i,o)]}case"ResizeNearestNeighbor":{const a=$("images",e,t,n),r=$("size",e,t,n),i=$("alignCorners",e,t,n),o=$("halfPixelCenters",e,t,n);return[s.image.resizeNearestNeighbor(a,[r[0],r[1]],i,o)]}case"CropAndResize":{const a=$("image",e,t,n),r=$("boxes",e,t,n),i=$("boxInd",e,t,n),o=$("cropSize",e,t,n),l=$("method",e,t,n),u=$("extrapolationValue",e,t,n);return[s.image.cropAndResize(a,r,i,o,l,u)]}case"ImageProjectiveTransformV3":{const a=$("images",e,t,n),r=$("transforms",e,t,n),i=$("outputShape",e,t,n),o=$("fillValue",e,t,n),l=$("interpolation",e,t,n),u=$("fillMode",e,t,n);return[s.image.transform(a,r,l.toLowerCase(),u.toLowerCase(),o,i)]}default:throw TypeError(`Node type ${e.op} is not implemented`)}})(e,t,n)));case"graph":return a((()=>((e,t,n,s=k)=>{switch(e.op){case"Const":return t[e.name];case"PlaceholderWithDefault":const a=$("default",e,t,n);return[E(e.name,t,n)||a];case"Placeholder":return[E(e.name,t,n)];case"Identity":case"StopGradient":case"FakeQuantWithMinMaxVars":case"Snapshot":return[D($("x",e,t,n))];case"IdentityN":return $("x",e,t,n).map((e=>D(e)));case"Shape":return[s.tensor1d($("x",e,t,n).shape,"int32")];case"ShapeN":return $("x",e,t,n).map((e=>s.tensor1d(e.shape)));case"Size":return[s.scalar($("x",e,t,n).size,"int32")];case"Rank":return[s.scalar($("x",e,t,n).rank,"int32")];case"NoOp":return[s.scalar(1)];case"Print":const r=$("x",e,t,n),i=$("data",e,t,n),o=$("message",e,t,n),l=$("summarize",e,t,n);console.warn("The graph has a tf.print() operation,usually used for debugging, which slows down performance."),console.log(o);for(let e=0;e<i.length;e++)console.log(Array.prototype.slice.call(i[e].dataSync()).slice(0,l));return[r];default:throw TypeError(`Node type ${e.op} is not implemented`)}})(e,t,n)));case"logical":return a((()=>((e,t,n,s=k)=>{switch(e.op){case"Equal":return[s.equal($("a",e,t,n),$("b",e,t,n))];case"NotEqual":return[s.notEqual($("a",e,t,n),$("b",e,t,n))];case"Greater":return[s.greater($("a",e,t,n),$("b",e,t,n))];case"GreaterEqual":return[s.greaterEqual($("a",e,t,n),$("b",e,t,n))];case"Less":return[s.less($("a",e,t,n),$("b",e,t,n))];case"LessEqual":return[s.lessEqual($("a",e,t,n),$("b",e,t,n))];case"LogicalAnd":return[s.logicalAnd($("a",e,t,n),$("b",e,t,n))];case"LogicalNot":return[s.logicalNot($("a",e,t,n))];case"LogicalOr":return[s.logicalOr($("a",e,t,n),$("b",e,t,n))];case"Select":case"SelectV2":return[s.where($("condition",e,t,n),$("a",e,t,n),$("b",e,t,n))];default:throw TypeError(`Node type ${e.op} is not implemented`)}})(e,t,n)));case"matrices":return a((()=>((e,t,n,s=k)=>{switch(e.op){case"BatchMatMul":case"BatchMatMulV2":case"MatMul":return[s.matMul($("a",e,t,n),$("b",e,t,n),$("transposeA",e,t,n),$("transposeB",e,t,n))];case"Einsum":return[s.einsum($("equation",e,t,n),...$("tensors",e,t,n))];case"Transpose":return[s.transpose($("x",e,t,n),$("perm",e,t,n))];case"_FusedMatMul":const[a,r]=$("fusedOps",e,t,n),i="biasadd"===a,o="prelu"===r,l=$("numArgs",e,t,n),u=$("leakyreluAlpha",e,t,n);if(i){if(o&&2!==l)throw new Error("Fused MatMul with BiasAdd and Prelu must have two extra arguments: bias and alpha.");if(!o&&1!==l)throw new Error("Fused MatMul with BiasAdd must have one extra argument: bias.")}const[c,h]=$("args",e,t,n);return[s.fused.matMul({a:$("a",e,t,n),b:$("b",e,t,n),transposeA:$("transposeA",e,t,n),transposeB:$("transposeB",e,t,n),bias:c,activation:r,preluActivationWeights:h,leakyreluAlpha:u})];default:throw TypeError(`Node type ${e.op} is not implemented`)}})(e,t,n)));case"normalization":return a((()=>((e,t,n,s=k)=>{switch(e.op){case"EuclideanNorm":return[s.euclideanNorm($("x",e,t,n),$("axis",e,t,n),$("keepDims",e,t,n))];case"FusedBatchNorm":case"FusedBatchNormV2":case"FusedBatchNormV3":return[s.batchNorm($("x",e,t,n),$("mean",e,t,n),$("variance",e,t,n),$("offset",e,t,n),$("scale",e,t,n),$("epsilon",e,t,n))];case"LRN":return[s.localResponseNormalization($("x",e,t,n),$("radius",e,t,n),$("bias",e,t,n),$("alpha",e,t,n),$("beta",e,t,n))];case"Softmax":return[s.softmax($("x",e,t,n))];case"LogSoftmax":return[s.logSoftmax($("x",e,t,n))];case"SparseToDense":return[s.sparseToDense($("sparseIndices",e,t,n),$("outputShape",e,t,n),$("sparseValues",e,t,n),$("defaultValue",e,t,n))];default:throw TypeError(`Node type ${e.op} is not implemented`)}})(e,t,n)));case"reduction":return a((()=>((e,t,n,s=k)=>{switch(e.op){case"Max":{const a=$("axis",e,t,n),r=$("keepDims",e,t,n);return[s.max($("x",e,t,n),a,r)]}case"Mean":{const a=$("axis",e,t,n),r=$("keepDims",e,t,n);return[s.mean($("x",e,t,n),a,r)]}case"Min":{const a=$("axis",e,t,n),r=$("keepDims",e,t,n);return[s.min($("x",e,t,n),a,r)]}case"Sum":{const a=$("axis",e,t,n),r=$("keepDims",e,t,n);return[s.sum($("x",e,t,n),a,r)]}case"All":{const a=$("axis",e,t,n),r=$("keepDims",e,t,n);return[s.all($("x",e,t,n),a,r)]}case"Any":{const a=$("axis",e,t,n),r=$("keepDims",e,t,n);return[s.any($("x",e,t,n),a,r)]}case"ArgMax":{const a=$("axis",e,t,n);return[s.argMax($("x",e,t,n),a)]}case"ArgMin":{const a=$("axis",e,t,n);return[s.argMin($("x",e,t,n),a)]}case"Prod":{const a=$("axis",e,t,n),r=$("keepDims",e,t,n);return[s.prod($("x",e,t,n),a,r)]}case"Cumprod":{const a=$("axis",e,t,n),r=$("exclusive",e,t,n),i=$("reverse",e,t,n);return[s.cumprod($("x",e,t,n),a,r,i)]}case"Cumsum":{const a=$("axis",e,t,n),r=$("exclusive",e,t,n),i=$("reverse",e,t,n);return[s.cumsum($("x",e,t,n),a,r,i)]}case"Bincount":const a=$("x",e,t,n),r=$("weights",e,t,n),i=$("size",e,t,n);return[s.bincount(a,r,i)];case"DenseBincount":{const a=$("x",e,t,n),r=$("weights",e,t,n),i=$("size",e,t,n),o=$("binaryOutput",e,t,n);return[s.denseBincount(a,r,i,o)]}default:throw TypeError(`Node type ${e.op} is not implemented`)}})(e,t,n)));case"slice_join":return a((()=>((e,t,n,s=k)=>{switch(e.op){case"ConcatV2":case"Concat":{const a=$("n",e,t,n),r=$("axis",e,t,n);let i=$("tensors",e,t,n);return i=i.slice(0,a),[s.concat(i,r)]}case"Gather":{const a=$("x",e,t,n),r=$("indices",e,t,n);return[s.gather(a,s.cast(r,"int32"),0)]}case"GatherV2":{const a=$("axis",e,t,n),r=$("batchDims",e,t,n),i=$("x",e,t,n),o=$("indices",e,t,n);return[s.gather(i,s.cast(o,"int32"),a,r)]}case"Reverse":{const a=$("dims",e,t,n),r=[];for(let e=0;e<a.length;e++)a[e]&&r.push(e);const i=$("x",e,t,n);return[s.reverse(i,r)]}case"ReverseV2":{const a=$("axis",e,t,n),r=$("x",e,t,n);return[s.reverse(r,a)]}case"Slice":{const a=$("begin",e,t,n),r=$("size",e,t,n);return[s.slice($("x",e,t,n),a,r)]}case"StridedSlice":{const a=$("begin",e,t,n),r=$("end",e,t,n),i=$("strides",e,t,n),o=$("beginMask",e,t,n),l=$("endMask",e,t,n),u=$("ellipsisMask",e,t,n),c=$("newAxisMask",e,t,n),h=$("shrinkAxisMask",e,t,n),p=$("x",e,t,n);return[s.stridedSlice(p,a,r,i,o,l,u,c,h)]}case"Pack":return(0,N.tidy)((()=>{const a=$("axis",e,t,n),r=$("tensors",e,t,n),i=r[0].shape,o=s.squeeze(r[0]).shape,l=r.map((e=>{const t=N.util.arraysEqual(e.shape,i);if(!t&&!N.util.arraysEqual(s.squeeze(e).shape,o))throw new Error("the input tensors shape does not match");return t?e:s.reshape(e,i)}));return[s.stack(l,a)]}));case"Unpack":{const a=$("axis",e,t,n),r=$("tensor",e,t,n);return s.unstack(r,a)}case"Tile":{const a=$("reps",e,t,n);return[s.tile($("x",e,t,n),a)]}case"Split":case"SplitV":{const a=$("axis",e,t,n),r=$("numOrSizeSplits",e,t,n),i=$("x",e,t,n);return s.split(i,r,a)}case"ScatterNd":{const a=$("indices",e,t,n),r=$("values",e,t,n),i=$("shape",e,t,n);return[s.scatterND(a,r,i)]}case"GatherNd":{const a=$("x",e,t,n),r=$("indices",e,t,n);return[s.gatherND(a,r)]}case"SparseToDense":{const a=$("sparseIndices",e,t,n),r=$("outputShape",e,t,n),i=$("sparseValues",e,t,n),o=$("defaultValue",e,t,n);return[s.sparseToDense(a,i,r,i.dtype===o.dtype?o:s.cast(o,i.dtype))]}default:throw TypeError(`Node type ${e.op} is not implemented`)}})(e,t,n)));case"sparse":return a((()=>((e,t,n,s=k)=>{switch(e.op){case"SparseFillEmptyRows":{const{outputIndices:a,outputValues:r,emptyRowIndicator:i,reverseIndexMap:o}=s.sparse.sparseFillEmptyRows($("indices",e,t,n),$("values",e,t,n),$("denseShape",e,t,n),$("defaultValue",e,t,n));return[a,r,i,o]}case"SparseReshape":{const{outputIndices:a,outputShape:r}=s.sparse.sparseReshape($("inputIndices",e,t,n),$("inputShape",e,t,n),$("newShape",e,t,n));return[a,r]}case"SparseSegmentMean":return[s.sparse.sparseSegmentMean($("data",e,t,n),$("indices",e,t,n),$("segmentIds",e,t,n))];case"SparseSegmentSum":return[s.sparse.sparseSegmentSum($("data",e,t,n),$("indices",e,t,n),$("segmentIds",e,t,n))];default:throw TypeError(`Node type ${e.op} is not implemented`)}})(e,t,n)));case"spectral":return a((()=>((e,t,n,s=k)=>{switch(e.op){case"FFT":return[s.fft($("x",e,t,n))];case"IFFT":return[s.ifft($("x",e,t,n))];case"RFFT":return[s.rfft($("x",e,t,n))];case"IRFFT":return[s.irfft($("x",e,t,n))];default:throw TypeError(`Node type ${e.op} is not implemented`)}})(e,t,n)));case"string":return a((()=>((e,t,n,s=k)=>{switch(e.op){case"StringNGrams":{const{nGrams:a,nGramsSplits:r}=s.string.stringNGrams($("data",e,t,n),$("dataSplits",e,t,n),$("separator",e,t,n),$("nGramWidths",e,t,n),$("leftPad",e,t,n),$("rightPad",e,t,n),$("padWidth",e,t,n),$("preserveShortSequences",e,t,n));return[a,r]}case"StringSplit":{const{indices:a,values:r,shape:i}=s.string.stringSplit($("input",e,t,n),$("delimiter",e,t,n),$("skipEmpty",e,t,n));return[a,r,i]}case"StringToHashBucketFast":return[s.string.stringToHashBucketFast($("input",e,t,n),$("numBuckets",e,t,n))];default:throw TypeError(`Node type ${e.op} is not implemented`)}})(e,t,n)));case"transformation":return a((()=>((e,t,n,s=k)=>{switch(e.op){case"Cast":return[s.cast($("x",e,t,n),$("dtype",e,t,n))];case"ExpandDims":{const a=$("axis",e,t,n);return[s.expandDims($("x",e,t,n),a)]}case"Squeeze":{const a=$("axis",e,t,n);return[s.squeeze($("x",e,t,n),a)]}case"Reshape":return[s.reshape($("x",e,t,n),$("shape",e,t,n))];case"MirrorPad":return[s.mirrorPad($("x",e,t,n),$("padding",e,t,n),$("mode",e,t,n))];case"PadV2":case"Pad":return[s.pad($("x",e,t,n),$("padding",e,t,n),$("constantValue",e,t,n))];case"SpaceToBatchND":{const a=$("blockShape",e,t,n),r=$("paddings",e,t,n);return[s.spaceToBatchND($("x",e,t,n),a,r)]}case"BatchToSpaceND":{const a=$("blockShape",e,t,n),r=$("crops",e,t,n);return[s.batchToSpaceND($("x",e,t,n),a,r)]}case"DepthToSpace":{const a=$("blockSize",e,t,n),r=$("dataFormat",e,t,n).toUpperCase();return[s.depthToSpace($("x",e,t,n),a,r)]}case"BroadcastTo":return[s.broadcastTo($("x",e,t,n),$("shape",e,t,n))];case"BroadcastArgs":return[s.broadcastArgs($("s0",e,t,n),$("s1",e,t,n))];default:throw TypeError(`Node type ${e.op} is not implemented`)}})(e,t,n)));case"hash_table":return(async(e,t,n,s)=>{switch(e.op){case"HashTable":case"HashTableV2":{const a=$("keyDType",e,t,n),r=$("valueDType",e,t,n),i=new Te(a,r);return s.addHashTable(e.name,i),[i.handle]}case"LookupTableImport":case"LookupTableImportV2":{const a=$("tableHandle",e,t,n,s),r=$("keys",e,t,n),i=$("values",e,t,n),o=s.getHashTableById(a.id);return[await o.import(r,i)]}case"LookupTableFind":case"LookupTableFindV2":{const a=$("tableHandle",e,t,n,s),r=$("keys",e,t,n),i=$("defaultValue",e,t,n),o=s.getHashTableById(a.id);return[await o.find(r,i)]}case"LookupTableSize":case"LookupTableSizeV2":{const a=$("tableHandle",e,t,n,s);return[s.getHashTableById(a.id).tensorSize()]}default:throw TypeError(`Node type ${e.op} is not implemented`)}})(e,t,n,s);case"custom":const r=C(e.op);if(r&&r.customExecutor)return r.customExecutor(new me(e,t,n));throw TypeError(`Custom op ${e.op} is not registered.`);default:throw TypeError(`Unknown op '${e.op}'. File an issue at https://github.com/tensorflow/tfjs/issues so we can add it, or register a custom execution with tf.registerOp()`)}})(e,t,n);return N.util.isPromise(r)?r.then((e=>[].concat(e))):[].concat(r)}class $e{constructor(e={},t={},n={},s={}){this.weightMap=e,this.tensorArrayMap=t,this.tensorListMap=n,this.functionMap=s,this.rootContext={id:0,frameName:"",iterationId:0},this.contexts=[this.rootContext],this.lastId=0,this.generateCurrentContextIds()}newFrame(e,t){return{id:e,frameName:t,iterationId:0}}set currentContext(e){this.contexts!==e&&(this.contexts=e,this.generateCurrentContextIds())}get currentContext(){return this.contexts}get currentContextId(){return this._currentContextIds[0]}get currentContextIds(){return this._currentContextIds}generateCurrentContextIds(){const e=[];for(let t=0;t<this.contexts.length-1;t++){const n=this.contexts.slice(0,this.contexts.length-t);e.push(this.contextIdforContexts(n))}e.push(""),this._currentContextIds=e}contextIdforContexts(e){return e?e.map((e=>0===e.id&&0===e.iterationId?"":`${e.frameName}-${e.iterationId}`)).join("/"):""}enterFrame(e){this.contexts&&(this.lastId++,this.contexts=this.contexts.slice(),this.contexts.push(this.newFrame(this.lastId,e)),this._currentContextIds.unshift(this.contextIdforContexts(this.contexts)))}exitFrame(){if(!(this.contexts&&this.contexts.length>1))throw new Error("Cannot exit frame, the context is empty");this.contexts=this.contexts.slice(),this.contexts.splice(-1),this.currentContextIds.shift()}nextIteration(){if(!(this.contexts&&this.contexts.length>0))throw new Error("Cannot increase frame iteration, the context is empty");{this.contexts=this.contexts.slice(),this.lastId++;const e=Object.assign({},this.contexts[this.contexts.length-1]);e.iterationId+=1,e.id=this.lastId,this.contexts.splice(-1,1,e),this._currentContextIds.splice(0,1,this.contextIdforContexts(this.contexts))}}getWeight(e){return this.weightMap[e]}addTensorArray(e){this.tensorArrayMap[e.id]=e}getTensorArray(e){return this.tensorArrayMap[e]}addTensorList(e){this.tensorListMap[e.id]=e}getTensorList(e){return this.tensorListMap[e]}dispose(e){for(const t in this.tensorArrayMap)this.tensorArrayMap[t].clearAndClose(e);for(const t in this.tensorListMap)this.tensorListMap[t].clearAndClose(e)}}function Ee(e,t,n,s){const a=new Set,r=[];let i=null,o=null;const l=new Set,u=Object.keys(e).map((e=>R(e)[0]));let c=[];null!=s&&(c=s.map((e=>R(e.name)[0])));const h=[...t];for(;h.length>0;){const e=h.pop();(Fe(e)||De(e)||Oe(e))&&null==i&&(i=e,o=i.children.map((e=>e.name)).filter((e=>a.has(e)))),a.add(e.name),null==n[e.name]&&-1===u.indexOf(e.name)&&-1===c.indexOf(e.name)&&(0!==e.inputs.length?e.inputs.forEach((e=>{l.has(e.name)||(l.add(e.name),h.push(e))})):r.push(e.name))}return{inputs:e,outputs:t,usedNodes:a,missingInputs:r,dynamicNode:i,syncInputs:o}}const _e=["Switch","Merge","Enter","Exit","NextIteration","StatelessIf","StatelessWhile","if","While"],Ae=["NonMaxSuppressionV2","NonMaxSuppressionV3","NonMaxSuppressionV5","Where"],Re=["HashTable","HashTableV2","LookupTableImport","LookupTableImportV2","LookupTableFind","LookupTableFindV2","LookupTableSize","LookupTableSizeV2"];function Fe(e){return _e.indexOf(e.op)>=0}function De(e){return Ae.indexOf(e.op)>=0}function Oe(e){return Re.indexOf(e.op)>=0}class Me{constructor(e,t){this.graph=e,this.parent=t,this.compiledMap=new Map,this._weightMap={},this.SEPERATOR=",",this._functions={},this._functionExecutorMap={},this.intermediateTensors={},this.keepTensorForDebug=!1,this._outputs=e.outputs,this._inputs=e.inputs,this._initNodes=e.initNodes,this._signature=e.signature,this._functions=e.functions,null!=e.functions&&Object.keys(e.functions).forEach((t=>{this._functionExecutorMap[t]=new Me(e.functions[t],this)}))}get weightIds(){return this.parent?this.parent.weightIds:this._weightIds}get functionExecutorMap(){return this.parent?this.parent.functionExecutorMap:this._functionExecutorMap}get weightMap(){return this.parent?this.parent.weightMap:this._weightMap}set weightMap(e){const t=Object.keys(e).map((t=>e[t].map((e=>e.id))));this._weightIds=[].concat(...t),this._weightMap=e}set resourceManager(e){this._resourceManager=e}get inputs(){return this._inputs.map((e=>({name:e.name,shape:e.attrParams.shape?e.attrParams.shape.value:void 0,dtype:e.attrParams.dtype?e.attrParams.dtype.value:void 0})))}get outputs(){return this._outputs.map((e=>({name:e.name,shape:e.attrParams.shape?e.attrParams.shape.value:void 0,dtype:e.attrParams.dtype?e.attrParams.dtype.value:void 0})))}get inputNodes(){return this._inputs.map((e=>e.signatureKey||e.name))}get outputNodes(){return this._outputs.map((e=>{const t=e.signatureKey||e.name;return e.defaultOutput?`${t}:${e.defaultOutput}`:t}))}get functions(){return Object.keys(this._functions).reduce(((e,t)=>(e[t]=this._functions[t].signature,e)),{})}getCompilationKey(e,t){const n=e.map((e=>e.name)).sort(),s=t.map((e=>e.name)).sort();return n.join(this.SEPERATOR)+"--"+s.join(this.SEPERATOR)}compile(e,t){const n=Ee(e,t,this.weightMap,this._initNodes),{missingInputs:s,dynamicNode:a,syncInputs:r}=n;if(null!=a)throw new Error(`This execution contains the node '${a.name}', which has the dynamic op '${a.op}'. Please use model.executeAsync() instead. Alternatively, to avoid the dynamic ops, specify the inputs [${r}]`);if(s.length>0){const n=t.map((e=>e.name)),a=Object.keys(e);throw new Error(`Cannot compute the outputs [${n}] from the provided inputs [${a}]. Missing the following inputs: [${s}]`)}return function(e,t,n){const{usedNodes:s,inputs:a}=n,r=[],i=Object.keys(a).map((e=>R(e)[0])).map((t=>e.nodes[t])),o=e.initNodes;i.forEach((e=>{s.has(e.name)&&r.push(e)})),e.weights.forEach((e=>{s.has(e.name)&&r.push(e)})),null!=o&&o.forEach((e=>{s.has(e.name)&&r.push(e)}));const l=new Set,u=[];for(;r.length>0;){const e=r.pop();l.add(e.name),t[e.name]||u.push(e),e.children.forEach((e=>{!l.has(e.name)&&s.has(e.name)&&e.inputs.every((e=>l.has(e.name)))&&r.push(e)}))}return u}(this.graph,this.weightMap,n)}execute(e,t){e=this.mapInputs(e);const n=Object.keys(e).sort();this.checkInputs(e),this.checkInputShapeAndType(e),t=this.mapOutputs(t),this.checkOutputs(t);const s=n.map((e=>this.graph.nodes[R(e)[0]])),a=t.map((e=>R(e)[0]));let r=a.map((e=>this.graph.nodes[e]));this.resetIntermediateTensors(),0===r.length&&(r=this._outputs);const i=this.getCompilationKey(s,r);let o=this.compiledMap.get(i);null==o&&(o=this.compile(e,r),this.compiledMap.set(i,o));const l={},u={};return(0,N.tidy)((()=>{const n=new $e(this.weightMap,l,u,this.functionExecutorMap),s=Object.assign({},this.weightMap);Object.keys(e).forEach((t=>{const[n,a]=R(t),r=[];r[a]=e[t],s[n]=r}));const r=this.getFrozenTensorIds(s),i={};for(let e=0;e<o.length;e++){const t=o[e];if(!s[t.name]){const e=Ce(t,s,n,this._resourceManager);if(N.util.isPromise(e))throw new Error(`The execution of the op '${t.op}' returned a promise. Please use model.executeAsync() instead.`);s[t.name]=e,this.checkTensorForDisposal(t.name,t,s,n,r,a,i)}}return null==this.parent&&n.dispose(r),t.map((e=>E(e,s,n)))}))}getFrozenTensorIds(e){const t=[].concat.apply([],Object.keys(e).map((t=>e[t])).map((e=>e.map((e=>e.id)))));return new Set(t)}checkTensorForDisposal(e,t,n,s,a,r,i){"control"!==t.category&&-1===r.indexOf(e)&&(n[e].forEach((e=>{null!=e&&(i[e.id]=(i[e.id]||0)+t.children.length)})),t.inputs.forEach((e=>{if("control"!==e.category){const r=function(e,t,n){return t[A(e,n.currentContextId)]}(e.name,n,s);null!=r&&r.forEach((e=>{if(e&&!e.kept&&!a.has(e.id)){const n=i[e.id];if(1===n){if(this.keepTensorForDebug){const[n,a]=_(t.name,s);this.intermediateTensors[n]||(this.intermediateTensors[n]=[]),this.intermediateTensors[n][a]=e}else e.dispose();delete i[e.id]}else null!=n&&i[e.id]--}}))}})))}async executeAsync(e,t){return this._executeAsync(e,t)}disposeIntermediateTensors(){this.intermediateTensors&&(Object.keys(this.intermediateTensors).forEach((e=>this.intermediateTensors[e].forEach((e=>e.dispose())))),this.disposeTensorsMap())}disposeTensorsMap(){this.tensorsMap&&Object.keys(this.tensorsMap).forEach((e=>{this.tensorsMap[e].forEach((e=>{!e||e.kept||e.isDisposed||this.keepIds.has(e.id)||e.dispose()}))}))}getIntermediateTensors(){return this.tensorsMap}resetIntermediateTensors(){for(const e in this.intermediateTensors)this.intermediateTensors[e].forEach((e=>e.dispose())),delete this.intermediateTensors[e]}async _executeAsync(e,t,n=!1,s={},a={}){n||(e=this.mapInputs(e),this.checkInputs(e),this.checkInputShapeAndType(e),t=this.mapOutputs(t),this.checkOutputs(t));try{this.keepTensorForDebug=(0,N.env)().getBool("KEEP_INTERMEDIATE_TENSORS")}catch(e){console.warn(e.message)}this.resetIntermediateTensors();const r=new $e(this.weightMap,s,a,this.functionExecutorMap);this.tensorsMap=await this.executeWithControlFlow(e,r,t,n);const i=t.map((e=>E(e,this.tensorsMap,r))),o=i.map((e=>e.id)),l=Object.keys(e).map((t=>e[t].id));return this.keepIds=new Set([...o,...l,...this.weightIds]),this.keepTensorForDebug||this.disposeTensorsMap(),null==this.parent&&r.dispose(this.keepIds),i}async executeFunctionAsync(e,t,n){const s=e.reduce(((e,t,n)=>(e[this.inputs[n].name]=t,e)),{});return this._executeAsync(s,this.outputNodes,!0,t,n)}async executeWithControlFlow(e,t,n,s){const a=Object.keys(e),r=a.map((e=>this.graph.nodes[R(e)[0]])),i=n.map((e=>R(e)[0]));let o=i.map((e=>this.graph.nodes[e]));0===o.length&&(o=this._outputs);const{usedNodes:l,missingInputs:u,dynamicNode:c,syncInputs:h}=Ee(e,o,this.weightMap,this._initNodes),p=[...r,...this.graph.weights,...this._initNodes||[]].map((e=>({node:e,contexts:t.currentContext}))),d=Object.assign({},this.weightMap);Object.keys(e).forEach((t=>{const[n,s]=R(t),a=[];a[s]=e[t],d[n]=a}));const f={},m=this.getFrozenTensorIds(d),g={};for(;p.length>0;){const e=this.processStack(r,p,t,d,g,m,i,f,l);await Promise.all(e)}null!=c||s||console.warn("This model execution did not contain any nodes with control flow or dynamic output shapes. You can use model.execute() instead.");const y=o.filter((e=>!Fe(e)&&!E(e.name,d,t))).map((e=>e.name));if(y.length>0){let e="";throw null!=c&&(e=`Alternatively, to avoid the dynamic ops, use model.execute() and specify the inputs [${h}]`),new Error(`Cannot compute the outputs [${y}] from the provided inputs [${a}]. Consider providing the following inputs: [${u}]. ${e}`)}return d}processStack(e,t,n,s,a,r,i,o,l){const u=[];for(;t.length>0;){const e=t.pop();n.currentContext=e.contexts;let c="";if("Enter"===e.node.op&&$("isConstant",e.node,s,n)&&([c]=_(e.node.name,n)),null==s[e.node.name]){const h=Ce(e.node,s,n,this._resourceManager);c||([c]=_(e.node.name,n));const p=n.currentContext;N.util.isPromise(h)?u.push(h.then((u=>(s[c]=u,n.currentContext=p,this.checkTensorForDisposal(c,e.node,s,n,r,i,o),this.processChildNodes(e.node,t,n,s,a,l),u)))):(s[c]=h,this.checkTensorForDisposal(c,e.node,s,n,r,i,o),this.processChildNodes(e.node,t,n,s,a,l))}else this.processChildNodes(e.node,t,n,s,a,l)}return u}processChildNodes(e,t,n,s,a,r){e.children.forEach((e=>{const[i]=_(e.name,n);!a[i]&&r.has(e.name)&&("Merge"===e.op?e.inputNames.some((e=>!!E(e,s,n)))&&(a[i]=!0,t.push({contexts:n.currentContext,node:e})):e.inputNames.every((e=>!!E(e,s,n)))&&(a[i]=!0,t.push({contexts:n.currentContext,node:e})))}))}dispose(){Object.keys(this.weightMap).forEach((e=>this.weightMap[e].forEach((e=>e.dispose()))))}checkInputShapeAndType(e){Object.keys(e).forEach((t=>{const n=e[t],[s]=R(t),a=this.graph.nodes[s];if(a.attrParams.shape&&a.attrParams.shape.value){const e=a.attrParams.shape.value,t=e.length===n.shape.length&&n.shape.every(((t,n)=>-1===e[n]||e[n]===t));N.util.assert(t,(()=>`The shape of dict['${a.name}'] provided in model.execute(dict) must be [${e}], but was [${n.shape}]`))}a.attrParams.dtype&&a.attrParams.dtype.value&&N.util.assert(n.dtype===a.attrParams.dtype.value,(()=>`The dtype of dict['${a.name}'] provided in model.execute(dict) must be ${a.attrParams.dtype.value}, but was ${n.dtype}`))}))}mapInputs(e){const t={};for(const n in e)null!=this._signature&&null!=this._signature.inputs&&null!=this._signature.inputs[n]?t[this._signature.inputs[n].name]=e[n]:t[n]=e[n];return t}checkInputs(e){const t=Object.keys(e).filter((e=>{const[t]=R(e);return null==this.graph.nodes[t]}));if(t.length>0)throw new Error(`The dict provided in model.execute(dict) has keys: [${t}] that are not part of graph`)}mapOutputs(e){return e.map((e=>null!=this._signature&&null!=this._signature.outputs&&null!=this._signature.outputs[e]?this._signature.outputs[e].name:e),{})}checkOutputs(e){e.forEach((e=>{const[t]=R(e);if(!this.graph.nodes[t])throw new Error(`The output '${e}' is not found in the graph`)}))}}class ze{constructor(e={},t={}){this.hashTableNameToHandle=e,this.hashTableMap=t}addHashTable(e,t){this.hashTableNameToHandle[e]=t.handle,this.hashTableMap[t.id]=t}getHashTableHandleByName(e){return this.hashTableNameToHandle[e]}getHashTableById(e){return this.hashTableMap[e]}dispose(){for(const e in this.hashTableMap)this.hashTableMap[e].clearAndClose(),delete this.hashTableMap[e];for(const e in this.hashTableNameToHandle)this.hashTableNameToHandle[e].dispose(),delete this.hashTableNameToHandle[e]}}class Le{constructor(e,t={},n=N.io){this.modelUrl=e,this.loadOptions=t,this.version="n/a",this.io=n,null==t&&(this.loadOptions={}),this.resourceManager=new ze}get modelVersion(){return this.version}get inputNodes(){return this.executor.inputNodes}get outputNodes(){return this.executor.outputNodes}get inputs(){return this.executor.inputs}get outputs(){return this.executor.outputs}get weights(){return this.executor.weightMap}get metadata(){return this.artifacts.userDefinedMetadata}get modelSignature(){return this.signature}get modelStructuredOutputKeys(){return this.structuredOutputKeys}findIOHandler(){const e=this.modelUrl;if(null!=e.load)this.handler=e;else if(null!=this.loadOptions.requestInit)this.handler=this.io.browserHTTPRequest(e,this.loadOptions);else{const t=this.io.getLoadHandlers(e,this.loadOptions);if(0===t.length)t.push(this.io.browserHTTPRequest(e,this.loadOptions));else if(t.length>1)throw new Error(`Found more than one (${t.length}) load handlers for URL '${[e]}'`);this.handler=t[0]}}load(){if(this.findIOHandler(),null==this.handler.load)throw new Error("Cannot proceed with model loading because the IOHandler provided does not have the `load` method implemented.");const e=this.handler.load();return N.util.isPromise(e)?e.then((e=>this.loadSync(e))):this.loadSync(e)}loadSync(e){this.artifacts=e;const t=this.artifacts.modelTopology;let n=this.artifacts.signature;if(null!=this.artifacts.userDefinedMetadata){const e=this.artifacts.userDefinedMetadata;null!=e.signature&&(n=e.signature),null!=e.structuredOutputKeys&&(this.structuredOutputKeys=e.structuredOutputKeys)}this.signature=n,this.version=`${t.versions.producer}.${t.versions.minConsumer}`;const s=this.io.decodeWeights(this.artifacts.weightData,this.artifacts.weightSpecs);if(this.executor=new Me(ee.Instance.transformGraph(t,this.signature)),this.executor.weightMap=this.convertTensorMapToTensorsMap(s),this.executor.resourceManager=this.resourceManager,null!=e.modelInitializer&&null!=e.modelInitializer.node){const t=ee.Instance.transformGraph(e.modelInitializer);this.initializer=new Me(t),this.initializer.weightMap=this.executor.weightMap,this.initializer.resourceManager=this.resourceManager,this.initializer.executeAsync({},[])}return!0}async save(e,t){if("string"==typeof e){const t=this.io.getSaveHandlers(e);if(0===t.length)throw new Error(`Cannot find any save handlers for URL '${e}'`);if(t.length>1)throw new Error(`Found more than one (${t.length}) save handlers for URL '${e}'`);e=t[0]}if(null==e.save)throw new Error("GraphModel.save() cannot proceed because the IOHandler provided does not have the `save` attribute defined.");return e.save(this.artifacts)}predict(e,t){const n=this.execute(e,this.outputNodes);if(this.structuredOutputKeys){const e=n instanceof N.Tensor?[n]:n,t={};return e.forEach(((e,n)=>t[this.structuredOutputKeys[n]]=e)),t}return n}normalizeInputs(e){if(!(e instanceof N.Tensor||Array.isArray(e)))return e;if((e=Array.isArray(e)?e:[e]).length!==this.inputNodes.length)throw new Error(`Input tensor count mismatch,the graph model has ${this.inputNodes.length} placeholders, while there are ${e.length} input tensors.`);return this.inputNodes.reduce(((t,n,s)=>(t[n]=e[s],t)),{})}normalizeOutputs(e){return e=e||this.outputNodes,Array.isArray(e)?e:[e]}execute(e,t){e=this.normalizeInputs(e),t=this.normalizeOutputs(t);const n=this.executor.execute(e,t);return n.length>1?n:n[0]}async executeAsync(e,t){e=this.normalizeInputs(e),t=this.normalizeOutputs(t);const n=await this.executor.executeAsync(e,t);return n.length>1?n:n[0]}getIntermediateTensors(){return this.executor.getIntermediateTensors()}disposeIntermediateTensors(){this.executor.disposeIntermediateTensors()}convertTensorMapToTensorsMap(e){return Object.keys(e).reduce(((t,n)=>(t[n]=[e[n]],t)),{})}dispose(){this.executor.dispose(),this.initializer&&this.initializer.dispose(),this.resourceManager.dispose()}}async function Be(e,t={},n=N.io){if(null==e)throw new Error("modelUrl in loadGraphModel() cannot be null. Please provide a url or an IOHandler that loads the model");null==t&&(t={}),t.fromTFHub&&"string"==typeof e&&(e=function(e){return e.endsWith("/")||(e+="/"),`${e}model.json?tfjs-format=file`}(e));const s=new Le(e,t,n);return await s.load(),s}const Pe="3.21.0"},7969:(e,t,n)=>{"use strict";n.d(t,{JL:()=>s,Zu:()=>a});class s{constructor(e,t){this.backend=e,this.dataMover=t,this.data=new WeakMap,this.dataIdsCount=0}get(e){return this.data.has(e)||this.dataMover.moveData(this.backend,e),this.data.get(e)}set(e,t){this.dataIdsCount++,this.data.set(e,t)}has(e){return this.data.has(e)}delete(e){return this.dataIdsCount--,this.data.delete(e)}numDataIds(){return this.dataIdsCount}}class a{refCount(e){return r("refCount")}incRef(e){return r("incRef")}timerAvailable(){return!0}time(e){return r("time")}read(e){return r("read")}readSync(e){return r("readSync")}readToGPU(e,t){return r("readToGPU")}numDataIds(){return r("numDataIds")}disposeData(e,t){return r("disposeData")}write(e,t,n){return r("write")}move(e,t,n,s,a){return r("move")}memory(){return r("memory")}floatPrecision(){return r("floatPrecision")}epsilon(){return 32===this.floatPrecision()?1e-7:1e-4}dispose(){return r("dispose")}}function r(e){throw new Error(`'${e}' not yet implemented or not found in the registry. This kernel may not be supported by the tfjs backend you have chosen`)}},590:(e,t,n)=>{"use strict";function s(e,t,n){const s=function(e,t,n){return function(e,t,n){let s=0,a=e.length,r=0,i=!1;for(;s<a;){r=s+(a-s>>>1);const o=n(t,e[r]);o>0?s=r+1:(a=r,i=!o)}return i?s:-s-1}(e,t,n||a)}(e,t,n),r=s<0?-(s+1):s;e.splice(r,0,t)}function a(e,t){return e>t?1:e<t?-1:0}function r(e,t,n,s,a){return l(e,t,n,s,a,0)}function i(e,t,n,s,a,r){return l(e,t,n,s,a,0,!1,r,!0)}function o(e,t,n,s,a,r){return l(e,t,n,s,a,r,!0)}function l(e,t,n,a,r,i,o=!1,l=!1,p=!1){const d=[];for(let e=0;e<t.length;e++)t[e]>r&&d.push({score:t[e],boxIndex:e,suppressBeginIndex:0});d.sort(h);const f=i>0?-.5/i:0,m=[],g=[];for(;m.length<n&&d.length>0;){const t=d.pop(),{score:n,boxIndex:i,suppressBeginIndex:o}=t;if(n<r)break;let l=!1;for(let n=m.length-1;n>=o;--n){const s=u(e,i,m[n]);if(s>=a){l=!0;break}if(t.score=t.score*c(a,f,s),t.score<=r)break}t.suppressBeginIndex=m.length,l||(t.score===n?(m.push(i),g.push(t.score)):t.score>r&&s(d,t,h))}const y=m.length,b=n-y;l&&b>0&&(m.push(...new Array(b).fill(0)),g.push(...new Array(b).fill(0)));const x={selectedIndices:m};return o&&(x.selectedScores=g),p&&(x.validOutputs=y),x}function u(e,t,n){const s=e.subarray(4*t,4*t+4),a=e.subarray(4*n,4*n+4),r=Math.min(s[0],s[2]),i=Math.min(s[1],s[3]),o=Math.max(s[0],s[2]),l=Math.max(s[1],s[3]),u=Math.min(a[0],a[2]),c=Math.min(a[1],a[3]),h=Math.max(a[0],a[2]),p=Math.max(a[1],a[3]),d=(o-r)*(l-i),f=(h-u)*(p-c);if(d<=0||f<=0)return 0;const m=Math.max(r,u),g=Math.max(i,c),y=Math.min(o,h),b=Math.min(l,p),x=Math.max(y-m,0)*Math.max(b-g,0);return x/(d+f-x)}function c(e,t,n){const s=Math.exp(t*n*n);return n<=e?s:0}function h(e,t){return e.score-t.score||e.score===t.score&&t.boxIndex-e.boxIndex}n.d(t,{GP:()=>r,qP:()=>i,pA:()=>o})},2644:(e,t,n)=>{"use strict";n.d(t,{Z:()=>a});var s=n(3259);function a(e,t){const n=[];for(let e=0;e<t.length;e++)t[e]&&n.push(e);const a=(0,s.f)(e,"int32"),r=(0,s.f)([n.length,e.length],"int32");for(let t=0;t<n.length;t++){const s=a.indexToLoc(n[t]),i=t*e.length;r.values.set(s,i)}return r.toTensor()}},1297:(e,t,n)=>{"use strict";n.d(t,{BV:()=>v,wv:()=>x});var s=n(7969),a=n(415),r=n(4126),i=n(574),o=n(1675),l=n(1592),u=n(1180),c=n(7636);class h{constructor(e,t){this.backendTimer=e,this.logger=t,null==t&&(this.logger=new d)}profileKernel(e,t,n){let s;const r=()=>{s=n()};let i;const o=u.now();if(this.backendTimer.timerAvailable())i=this.backendTimer.time(r);else{r();for(const e of s)e.dataSync();i=Promise.resolve({kernelMs:u.now()-o})}if((0,a.OB)().getBool("CHECK_COMPUTATION_FOR_ERRORS"))for(let t=0;t<s.length;t++){const n=s[t];n.data().then((t=>{p(t,n.dtype,e)}))}return{kernelName:e,outputs:s,inputs:t,timeMs:i.then((e=>e.kernelMs)),extraInfo:i.then((e=>null!=e.getExtraProfileInfo?e.getExtraProfileInfo():""))}}logKernelProfile(e){const{kernelName:t,outputs:n,timeMs:s,inputs:a,extraInfo:r}=e;n.forEach((e=>{Promise.all([e.data(),s,r]).then((n=>{this.logger.logKernelProfile(t,e,n[0],n[1],a,n[2])}))}))}}function p(e,t,n){if("float32"!==t)return!1;for(let t=0;t<e.length;t++){const s=e[t];if(isNaN(s)||!isFinite(s))return console.warn(`Found ${s} in the result of '${n}'`),!0}return!1}class d{logKernelProfile(e,t,n,s,a,r){const i="number"==typeof s?c.oj(`${s}ms`,9):s.error,o=c.oj(e,25),l=t.rank,u=t.size,h=c.oj(t.shape.toString(),14);let p="";for(const e in a){const n=a[e];if(null!=n){const s=n.shape||t.shape,a=s.length;p+=`${e}: ${a}D ${a>0?s:""} `}}console.log(`%c${o}\t%c${i}\t%c${l}D ${h}\t%c${u}\t%c${p}\t%c${r}`,"font-weight:bold","color:red","color:blue","color: orange","color: green","color: steelblue")}}var f=n(9527),m=n(9932);function g(e){return null!=e.kernelName}class y{constructor(){this.registeredVariables={},this.nextTapeNodeId=0,this.numBytes=0,this.numTensors=0,this.numStringTensors=0,this.numDataBuffers=0,this.gradientDepth=0,this.kernelDepth=0,this.scopeStack=[],this.numDataMovesStack=[],this.nextScopeId=0,this.tensorInfo=new WeakMap,this.profiling=!1,this.activeProfile={newBytes:0,newTensors:0,peakBytes:0,kernels:[],result:null,get kernelNames(){return Array.from(new Set(this.kernels.map((e=>e.name))))}}}dispose(){for(const e in this.registeredVariables)this.registeredVariables[e].dispose()}}class b{constructor(e){this.ENV=e,this.registry={},this.registryFactory={},this.pendingBackendInitId=0,this.state=new y}async ready(){if(null!=this.pendingBackendInit)return this.pendingBackendInit.then((()=>{}));if(null!=this.backendInstance)return;const e=this.getSortedBackends();for(let t=0;t<e.length;t++){const n=e[t];if(await this.initializeBackend(n).success)return void await this.setBackend(n)}throw new Error("Could not initialize any backends, all backend initializations failed.")}get backend(){if(null!=this.pendingBackendInit)throw new Error(`Backend '${this.backendName}' has not yet been initialized. Make sure to await tf.ready() or await tf.setBackend() before calling other methods`);if(null==this.backendInstance){const{name:e,asyncInit:t}=this.initializeBackendsAndReturnBest();if(t)throw new Error(`The highest priority backend '${e}' has not yet been initialized. Make sure to await tf.ready() or await tf.setBackend() before calling other methods`);this.setBackend(e)}return this.backendInstance}backendNames(){return Object.keys(this.registryFactory)}findBackend(e){if(!(e in this.registry)){if(!(e in this.registryFactory))return null;{const{asyncInit:t}=this.initializeBackend(e);if(t)return null}}return this.registry[e]}findBackendFactory(e){return e in this.registryFactory?this.registryFactory[e].factory:null}registerBackend(e,t,n=1){return e in this.registryFactory?(l.Z(`${e} backend was already registered. Reusing existing backend factory.`),!1):(this.registryFactory[e]={factory:t,priority:n},!0)}async setBackend(e){if(null==this.registryFactory[e])throw new Error(`Backend name '${e}' not found in registry`);if(this.backendName=e,null==this.registry[e]){this.backendInstance=null;const{success:t,asyncInit:n}=this.initializeBackend(e);if(!(n?await t:t))return!1}return this.backendInstance=this.registry[e],this.setupRegisteredKernels(),this.profiler=new h(this.backendInstance),!0}setupRegisteredKernels(){(0,o.tr)(this.backendName).forEach((e=>{null!=e.setupFunc&&e.setupFunc(this.backendInstance)}))}disposeRegisteredKernels(e){(0,o.tr)(e).forEach((t=>{null!=t.disposeFunc&&t.disposeFunc(this.registry[e])}))}initializeBackend(e){const t=this.registryFactory[e];if(null==t)throw new Error(`Cannot initialize backend ${e}, no registration found.`);try{const n=t.factory();if(!n||n instanceof s.Zu||"function"!=typeof n.then)return this.registry[e]=n,{success:!0,asyncInit:!1};{const t=++this.pendingBackendInitId,s=n.then((n=>!(t<this.pendingBackendInitId||(this.registry[e]=n,this.pendingBackendInit=null,0)))).catch((n=>(t<this.pendingBackendInitId||(this.pendingBackendInit=null,l.Z(`Initialization of backend ${e} failed`),l.Z(n.stack||n.message)),!1)));return this.pendingBackendInit=s,{success:s,asyncInit:!0}}}catch(t){return l.Z(`Initialization of backend ${e} failed`),l.Z(t.stack||t.message),{success:!1,asyncInit:!1}}}removeBackend(e){if(!(e in this.registryFactory))throw new Error(`${e} backend not found in registry`);this.backendName===e&&null!=this.pendingBackendInit&&this.pendingBackendInitId++,e in this.registry&&(this.disposeRegisteredKernels(e),this.registry[e].dispose(),delete this.registry[e]),delete this.registryFactory[e],this.backendName===e&&(this.pendingBackendInit=null,this.backendName=null,this.backendInstance=null)}getSortedBackends(){if(0===Object.keys(this.registryFactory).length)throw new Error("No backend found in registry.");return Object.keys(this.registryFactory).sort(((e,t)=>this.registryFactory[t].priority-this.registryFactory[e].priority))}initializeBackendsAndReturnBest(){const e=this.getSortedBackends();for(let t=0;t<e.length;t++){const n=e[t],{success:s,asyncInit:a}=this.initializeBackend(n);if(a||s)return{name:n,asyncInit:a}}throw new Error("Could not initialize any backends, all backend initializations failed.")}moveData(e,t){const n=this.state.tensorInfo.get(t),s=n.backend,a=this.readSync(t),r=s.refCount(t);s.disposeData(t,!0),n.backend=e,e.move(t,a,n.shape,n.dtype,r),this.shouldCheckForMemLeaks()&&this.state.numDataMovesStack[this.state.numDataMovesStack.length-1]++}tidy(e,t){let n,s=null;if(null==t){if("function"!=typeof e)throw new Error("Please provide a function to tidy()");t=e}else{if("string"!=typeof e&&!(e instanceof String))throw new Error("When calling with two arguments, the first argument to tidy() must be a string");if("function"!=typeof t)throw new Error("When calling with two arguments, the 2nd argument to tidy() must be a function");s=e}return this.scopedRun((()=>this.startScope(s)),(()=>this.endScope(n)),(()=>(n=t(),n instanceof Promise&&console.error("Cannot return a Promise inside of tidy."),n)))}scopedRun(e,t,n){e();try{const e=n();return t(),e}catch(e){throw t(),e}}nextTensorId(){return b.nextTensorId++}nextVariableId(){return b.nextVariableId++}clone(e){const t=v.runKernel(i.iJz,{x:e}),n={x:e};return this.addTapeNode(this.state.activeScope.name,n,[t],(e=>({x:()=>{const t={x:e};return v.runKernel(i.RFZ,t,{dtype:"float32"})}})),[],{}),t}runKernel(e,t,n){if(null==this.backendName&&this.backend,null==(0,o.pI)(e,this.backendName))throw new Error(`Kernel '${e}' not registered for backend '${this.backendName}'`);return this.runKernelFunc({kernelName:e,inputs:t,attrs:n})}shouldCheckForMemLeaks(){return this.ENV.getBool("IS_TEST")}checkKernelForMemLeak(e,t,n){const s=this.backend.numDataIds();let a=0;n.forEach((e=>{a+="complex64"===e.dtype?3:1}));const r=this.state.numDataMovesStack[this.state.numDataMovesStack.length-1],i=s-t-a-r;if(i>0)throw new Error(`Backend '${this.backendName}' has an internal memory leak (${i} data ids) after running '${e}'`)}runKernelFunc(e){let t,n=[];const s=this.isTapeOn(),a=this.state.numBytes,r=this.state.numTensors;let i,l;this.shouldCheckForMemLeaks()&&this.state.numDataMovesStack.push(0),null==this.backendName&&this.backend;const u=g(e)?e.kernelName:null!=this.state.activeScope?this.state.activeScope.name:"";if(g(e)){const{kernelName:t,inputs:a,attrs:r}=e;null==this.backendName&&this.backend;const u=(0,o.pI)(t,this.backendName);c.hu(null!=u,(()=>`Cannot find registered kernel '${t}' for backend '${this.backendName}'`)),i=()=>{const e=this.backend.numDataIds();l=u.kernelFunc({inputs:a,attrs:r,backend:this.backend});const i=Array.isArray(l)?l:[l];this.shouldCheckForMemLeaks()&&this.checkKernelForMemLeak(t,e,i);const o=i.map((e=>null!=e.rank?e:this.makeTensorFromTensorInfo(e)));if(s){const e=this.getTensorsForGradient(t,a,o);n=this.saveTensorsForBackwardMode(e)}return o}}else{const{forwardFunc:t}=e,a=e=>{s&&(n=e.map((e=>this.keep(this.clone(e)))))};i=()=>{const e=this.backend.numDataIds();l=this.tidy((()=>t(this.backend,a)));const n=Array.isArray(l)?l:[l];return this.shouldCheckForMemLeaks()&&this.checkKernelForMemLeak(u,e,n),n}}const{inputs:h,attrs:p}=e,d=g(e)?null:e.backwardsFunc;let f;return this.scopedRun((()=>this.state.kernelDepth++),(()=>this.state.kernelDepth--),(()=>{this.ENV.getBool("DEBUG")||this.state.profiling?(f=this.profiler.profileKernel(u,h,(()=>i())),this.ENV.getBool("DEBUG")&&this.profiler.logKernelProfile(f),t=f.outputs):t=i()})),s&&this.addTapeNode(u,h,t,d,n,p),this.state.profiling&&this.state.activeProfile.kernels.push({name:u,bytesAdded:this.state.numBytes-a,totalBytesSnapshot:this.state.numBytes,tensorsAdded:this.state.numTensors-r,totalTensorsSnapshot:this.state.numTensors,inputShapes:Object.keys(h).map((e=>null!=h[e]?h[e].shape:null)),outputShapes:t.map((e=>e.shape)),kernelTimeMs:f.timeMs,extraInfo:f.extraInfo}),Array.isArray(l)?t:t[0]}saveTensorsForBackwardMode(e){const t=e.map((e=>this.keep(this.clone(e))));return t}getTensorsForGradient(e,t,n){const s=(0,o.uk)(e);if(null!=s){const e=s.inputsToSave||[],a=s.outputsToSave||[];let r;s.saveAllInputs?(c.hu(Array.isArray(t),(()=>"saveAllInputs is true, expected inputs to be an array.")),r=Object.keys(t).map((e=>t[e]))):r=e.map((e=>t[e]));const i=n.filter(((e,t)=>a[t]));return r.concat(i)}return[]}makeTensor(e,t,n,s){if(null==e)throw new Error("Values passed to engine.makeTensor() are null");n=n||"float32",s=s||this.backend;let a=e;"string"===n&&c.HD(e[0])&&(a=e.map((e=>u.encodeString(e))));const r=s.write(a,t,n),i=new f.es(t,n,r,this.nextTensorId());if(this.trackTensor(i,s),"string"===n){const e=this.state.tensorInfo.get(r),t=(0,c.Ub)(a);this.state.numBytes+=t-e.bytes,e.bytes=t}return i}makeTensorFromDataId(e,t,n,s){const a={dataId:e,shape:t,dtype:n=n||"float32"};return this.makeTensorFromTensorInfo(a,s)}makeTensorFromTensorInfo(e,t){const{dataId:n,shape:s,dtype:a}=e,r=new f.es(s,a,n,this.nextTensorId());return this.trackTensor(r,t),r}makeVariable(e,t=!0,n,s){n=n||this.nextVariableId().toString(),null!=s&&s!==e.dtype&&(e=e.cast(s));const a=new f._w(e,t,n,this.nextTensorId());if(null!=this.state.registeredVariables[a.name])throw new Error(`Variable with name ${a.name} was already registered`);return this.state.registeredVariables[a.name]=a,this.incRef(a,this.backend),a}trackTensor(e,t){this.state.numTensors++,"string"===e.dtype&&this.state.numStringTensors++;let n=0;"complex64"!==e.dtype&&"string"!==e.dtype&&(n=e.size*c.bT(e.dtype)),this.state.numBytes+=n,this.state.tensorInfo.has(e.dataId)||(this.state.numDataBuffers++,this.state.tensorInfo.set(e.dataId,{backend:t||this.backend,dtype:e.dtype,shape:e.shape,bytes:n})),e instanceof f._w||this.track(e)}incRef(e,t){this.trackTensor(e,t),this.backend.incRef(e.dataId)}removeDataId(e,t){this.state.tensorInfo.has(e)&&this.state.tensorInfo.get(e).backend===t&&(this.state.tensorInfo.delete(e),this.state.numDataBuffers--)}disposeTensor(e){if(!this.state.tensorInfo.has(e.dataId))return;const t=this.state.tensorInfo.get(e.dataId);if(this.state.numTensors--,"string"===e.dtype&&(this.state.numStringTensors--,this.state.numBytes-=t.bytes),"complex64"!==e.dtype&&"string"!==e.dtype){const t=e.size*c.bT(e.dtype);this.state.numBytes-=t}t.backend.disposeData(e.dataId)&&this.removeDataId(e.dataId,t.backend)}disposeVariables(){for(const e in this.state.registeredVariables){const t=this.state.registeredVariables[e];this.disposeVariable(t)}}disposeVariable(e){this.disposeTensor(e),null!=this.state.registeredVariables[e.name]&&delete this.state.registeredVariables[e.name]}memory(){const e=this.backend.memory();return e.numTensors=this.state.numTensors,e.numDataBuffers=this.state.numDataBuffers,e.numBytes=this.state.numBytes,this.state.numStringTensors>0&&(e.unreliable=!0,null==e.reasons&&(e.reasons=[]),e.reasons.push("Memory usage by string tensors is approximate (2 bytes per character)")),e}async profile(e){this.state.profiling=!0;const t=this.state.numBytes,n=this.state.numTensors;this.state.activeProfile.kernels=[],this.state.activeProfile.result=await e(),this.state.profiling=!1,this.state.activeProfile.peakBytes=Math.max(...this.state.activeProfile.kernels.map((e=>e.totalBytesSnapshot))),this.state.activeProfile.newBytes=this.state.numBytes-t,this.state.activeProfile.newTensors=this.state.numTensors-n;for(const e of this.state.activeProfile.kernels)e.kernelTimeMs=await e.kernelTimeMs,e.extraInfo=await e.extraInfo;return this.state.activeProfile}isTapeOn(){return this.state.gradientDepth>0&&0===this.state.kernelDepth}addTapeNode(e,t,n,s,a,r){const i={id:this.state.nextTapeNodeId++,kernelName:e,inputs:t,outputs:n,saved:a},l=(0,o.uk)(e);null!=l&&(s=l.gradFunc),null!=s&&(i.gradient=e=>(e=e.map(((e,t)=>{if(null==e){const e=n[t],s=c.wT(e.size,e.dtype);return this.makeTensor(s,e.shape,e.dtype)}return e})),s(e.length>1?e:e[0],a,r))),this.state.activeTape.push(i)}keep(e){return e.kept=!0,e}startTape(){0===this.state.gradientDepth&&(this.state.activeTape=[]),this.state.gradientDepth++}endTape(){this.state.gradientDepth--}startScope(e){const t={track:[],name:"unnamed scope",id:this.state.nextScopeId++};e&&(t.name=e),this.state.scopeStack.push(t),this.state.activeScope=t}endScope(e){const t=(0,m.getTensorsInContainer)(e),n=new Set(t.map((e=>e.id)));for(let e=0;e<this.state.activeScope.track.length;e++){const t=this.state.activeScope.track[e];t.kept||n.has(t.id)||t.dispose()}const s=this.state.scopeStack.pop();this.state.activeScope=0===this.state.scopeStack.length?null:this.state.scopeStack[this.state.scopeStack.length-1],t.forEach((e=>{e.kept||e.scopeId!==s.id||this.track(e)}))}gradients(e,t,n,s=!1){if(c.hu(t.length>0,(()=>"gradients() received an empty list of xs.")),null!=n&&"float32"!==n.dtype)throw new Error(`dy must have 'float32' dtype, but has '${n.dtype}'`);const a=this.scopedRun((()=>this.startTape()),(()=>this.endTape()),(()=>this.tidy("forward",e)));c.hu(a instanceof f.es,(()=>"The result y returned by f() must be a tensor."));const r=function(e,t,n){const s={},a={};for(let e=0;e<t.length;e++)s[t[e].id]=!0;for(let n=0;n<e.length;n++){const r=e[n],i=r.inputs;for(const e in i){const n=i[e];let o=!1;for(let e=0;e<t.length;e++)if(s[n.id]){r.outputs.forEach((e=>s[e.id]=!0)),o=!0,a[r.id]=!0;break}if(o)break}}const r={};r[n.id]=!0;const i={};for(let t=e.length-1;t>=0;t--){const n=e[t],s=n.inputs;for(let e=0;e<n.outputs.length;e++)if(r[n.outputs[e].id]){for(const e in s)r[s[e].id]=!0,i[n.id]=!0;break}}const o=[];for(let t=0;t<e.length;t++){const n=e[t];if(a[n.id]&&i[n.id]){const e={};for(const t in n.inputs){const a=n.inputs[t];s[a.id]&&(e[t]=a)}const t=Object.assign({},n);t.inputs=e,t.outputs=n.outputs,o.push(t)}}return o}(this.state.activeTape,t,a);if(!s&&0===r.length&&t.length>0)throw new Error("Cannot compute gradient of y=f(x) with respect to x. Make sure that the f you passed encloses all operations that lead from x to y.");return this.tidy("backward",(()=>{const e={};e[a.id]=null==n?function(e){const t=(0,c.p8)((0,c.NA)(e),"float32");return v.makeTensor(t,e,"float32")}(a.shape):n,function(e,t,n,s){for(let a=t.length-1;a>=0;a--){const r=t[a],i=[];if(r.outputs.forEach((t=>{const n=e[t.id];null!=n?i.push(n):i.push(null)})),null==r.gradient)throw new Error(`Cannot compute gradient: gradient function not found for ${r.kernelName}.`);const o=r.gradient(i);for(const t in r.inputs){if(!(t in o))throw new Error(`Cannot backprop through input ${t}. Available gradients found: ${Object.keys(o)}.`);const a=n((()=>o[t]()));if("float32"!==a.dtype)throw new Error(`Error in gradient for op ${r.kernelName}. The gradient of input ${t} must have 'float32' dtype, but has '${a.dtype}'`);const i=r.inputs[t];if(!c.cO(a.shape,i.shape))throw new Error(`Error in gradient for op ${r.kernelName}. The gradient of input '${t}' has shape '${a.shape}', which does not match the shape of the input '${i.shape}'`);if(null==e[i.id])e[i.id]=a;else{const t=e[i.id];e[i.id]=s(t,a),t.dispose()}}}}(e,r,(e=>this.tidy(e)),w);const s=t.map((t=>e[t.id]));return 0===this.state.gradientDepth&&(this.state.activeTape.forEach((e=>{for(const t of e.saved)t.dispose()})),this.state.activeTape=null),{value:a,grads:s}}))}customGrad(e){return c.hu(c.mf(e),(()=>"The f passed in customGrad(f) must be a function.")),(...t)=>{let n;c.hu(t.every((e=>e instanceof f.es)),(()=>"The args passed in customGrad(f)(x1, x2,...) must all be tensors"));const s={};return t.forEach(((e,t)=>{s[t]=e})),this.runKernelFunc({forwardFunc:(s,a)=>(n=e(...t,a),c.hu(n.value instanceof f.es,(()=>"The function f passed in customGrad(f) must return an object where `obj.value` is a tensor")),c.hu(c.mf(n.gradFunc),(()=>"The function f passed in customGrad(f) must return an object where `obj.gradFunc` is a function.")),n.value),backwardsFunc:(e,s)=>{const a=n.gradFunc(e,s),r=Array.isArray(a)?a:[a];c.hu(r.length===t.length,(()=>"The function f passed in customGrad(f) must return an object where `obj.gradFunc` is a function that returns the same number of tensors as inputs passed to f(...).")),c.hu(r.every((e=>e instanceof f.es)),(()=>"The function f passed in customGrad(f) must return an object where `obj.gradFunc` is a function that returns a list of only tensors."));const i={};return r.forEach(((e,t)=>{i[t]=()=>e})),i},inputs:s})}}readSync(e){return this.state.tensorInfo.get(e).backend.readSync(e)}read(e){return this.state.tensorInfo.get(e).backend.read(e)}readToGPU(e,t){return this.state.tensorInfo.get(e).backend.readToGPU(e,t)}async time(e){const t=(0,u.now)(),n=await this.backend.time(e);return n.wallMs=(0,u.now)()-t,n}track(e){return null!=this.state.activeScope&&(e.scopeId=this.state.activeScope.id,this.state.activeScope.track.push(e)),e}get registeredVariables(){return this.state.registeredVariables}reset(){this.pendingBackendInitId++,this.state.dispose(),this.ENV.reset(),this.state=new y;for(const e in this.registry)this.disposeRegisteredKernels(e),this.registry[e].dispose(),delete this.registry[e];this.backendName=null,this.backendInstance=null,this.pendingBackendInit=null}}function x(){const e=(0,r.D)();if(null==e._tfengine){const t=new a.qA(e);e._tfengine=new b(t)}return(0,a.iG)(e._tfengine.ENV),(0,f.Vi)((()=>e._tfengine)),e._tfengine}b.nextTensorId=0,b.nextVariableId=0;const v=x();function w(e,t){const n={a:e,b:t};return v.runKernel(i.mm_,n)}},415:(e,t,n)=>{"use strict";n.d(t,{OB:()=>i,Vi:()=>o,iG:()=>l,qA:()=>a});var s=n(7636);class a{constructor(e){this.global=e,this.flags={},this.flagRegistry={},this.urlFlags={},this.getQueryParams=r,this.populateURLFlags()}setPlatform(e,t){null!=this.platform&&(i().getBool("IS_TEST")||i().getBool("PROD")||console.warn(`Platform ${this.platformName} has already been set. Overwriting the platform with ${e}.`)),this.platformName=e,this.platform=t}registerFlag(e,t,n){if(this.flagRegistry[e]={evaluationFn:t,setHook:n},null!=this.urlFlags[e]){const t=this.urlFlags[e];i().getBool("IS_TEST")||i().getBool("PROD")||console.warn(`Setting feature override from URL ${e}: ${t}.`),this.set(e,t)}}async getAsync(e){return e in this.flags||(this.flags[e]=await this.evaluateFlag(e)),this.flags[e]}get(e){if(e in this.flags)return this.flags[e];const t=this.evaluateFlag(e);if((0,s.tI)(t))throw new Error(`Flag ${e} cannot be synchronously evaluated. Please use getAsync() instead.`);return this.flags[e]=t,this.flags[e]}getNumber(e){return this.get(e)}getBool(e){return this.get(e)}getFlags(){return this.flags}get features(){return this.flags}set(e,t){if(null==this.flagRegistry[e])throw new Error(`Cannot set flag ${e} as it has not been registered.`);this.flags[e]=t,null!=this.flagRegistry[e].setHook&&this.flagRegistry[e].setHook(t)}evaluateFlag(e){if(null==this.flagRegistry[e])throw new Error(`Cannot evaluate flag '${e}': no evaluation function found.`);return this.flagRegistry[e].evaluationFn()}setFlags(e){this.flags=Object.assign({},e)}reset(){this.flags={},this.urlFlags={},this.populateURLFlags()}populateURLFlags(){if(void 0===this.global||void 0===this.global.location||void 0===this.global.location.search)return;const e=this.getQueryParams(this.global.location.search);"tfjsflags"in e&&e.tfjsflags.split(",").forEach((e=>{const[t,n]=e.split(":");this.urlFlags[t]=function(e,t){if("true"===(t=t.toLowerCase())||"false"===t)return"true"===t;if(""+ +t===t)return+t;throw new Error(`Could not parse value flag value ${t} for flag ${e}.`)}(t,n)}))}}function r(e){const t={};return e.replace(/[?&]([^=?&]+)(?:=([^&]*))?/g,((e,...n)=>(function(e,t,n){e[decodeURIComponent(t)]=decodeURIComponent(n||"")}(t,n[0],n[1]),n.join("=")))),t}function i(){return o}let o=null;function l(e){o=e}},4126:(e,t,n)=>{"use strict";let s;function a(){if(null==s){let e;if("undefined"!=typeof window)e=window;else if(void 0!==n.g)e=n.g;else if("undefined"!=typeof process)e=process;else{if("undefined"==typeof self)throw new Error("Could not find a global object");e=self}s=e}return s}function r(e,t){const n=function(){const e=a();return null==e._tfGlobals&&(e._tfGlobals=new Map),e._tfGlobals}();if(n.has(e))return n.get(e);{const s=t();return n.set(e,s),n.get(e)}}n.d(t,{D:()=>a,R:()=>r})},3381:(e,t,n)=>{"use strict";n.d(t,{B9:()=>g,CQ:()=>x,Cd:()=>v,Cn:()=>y,G4:()=>o,MX:()=>c,N5:()=>f,N8:()=>h,N_:()=>w,R:()=>l,SR:()=>p,VY:()=>C,XV:()=>b,cF:()=>u,cj:()=>k,jq:()=>N,lu:()=>m,sq:()=>d,x3:()=>I,y3:()=>T,ze:()=>S});var s=n(1297),a=n(415),r=n(9527),i=n(9932);function o(){(0,a.OB)().set("PROD",!0)}function l(){(0,a.OB)().set("DEBUG",!0)}function u(){(0,a.OB)().set("DEPRECATION_WARNINGS_ENABLED",!1),console.warn("TensorFlow.js deprecation warnings have been disabled.")}function c(e){(0,a.OB)().getBool("DEPRECATION_WARNINGS_ENABLED")&&console.warn(e+" You can disable deprecation warnings with tf.disableDeprecationWarnings().")}function h(){s.BV.disposeVariables()}function p(){return s.BV}function d(){return s.BV.memory()}function f(e){return s.BV.profile(e)}function m(e,t){return s.BV.tidy(e,t)}function g(e){(0,i.getTensorsInContainer)(e).forEach((e=>e.dispose()))}function y(e){return s.BV.keep(e)}function b(e){return s.BV.time(e)}function x(e){return s.BV.setBackend(e)}function v(){return s.BV.ready()}function w(){return s.BV.backendName}function k(e){s.BV.removeBackend(e)}function I(e){return s.BV.findBackend(e)}function S(e){return s.BV.findBackendFactory(e)}function N(e,t,n=1){return s.BV.registerBackend(e,t,n)}function T(){return s.BV.backend}function C(e,t){(0,a.OB)().setPlatform(e,t)}(0,r.FZ)(c)},6537:(e,t,n)=>{"use strict";n.d(t,{UQ:()=>o,cb:()=>p,fN:()=>c,h7:()=>u,pn:()=>h,ti:()=>l});var s=n(1297),a=n(9527),r=n(7641),i=n(7636);function o(e){return i.hu(i.mf(e),(()=>"The f passed in grad(f) must be a function")),(t,n)=>{const a=(0,r._1)(t,"x","tf.grad","string_or_numeric"),o=null!=n?(0,r._1)(n,"dy","tf.grad"):null;return s.BV.tidy((()=>{const{value:t,grads:n}=s.BV.gradients((()=>e(a)),[a],o);return null!=o&&i.k5(t.shape,o.shape,"The shape of dy passed in grad(f)(x, dy) must match the shape returned by f(x)"),d(n),n[0]}))}}function l(e){return i.hu(i.mf(e),(()=>"The f passed in grads(f) must be a function")),(t,n)=>{i.hu(Array.isArray(t),(()=>"The args passed in grads(f)(args) must be an array of `Tensor`s or `TensorLike`s"));const a=(0,r.sI)(t,"args","tf.grads","string_or_numeric"),o=null!=n?(0,r._1)(n,"dy","tf.grads"):null;return s.BV.tidy((()=>{const{value:t,grads:n}=s.BV.gradients((()=>e(...a)),a,o);return null!=o&&i.k5(t.shape,o.shape,"The shape of dy passed in grads(f)([x1,...], dy) must match the shape returned by f([x1,...])"),d(n),n}))}}function u(e){return i.hu(i.mf(e),(()=>"The f passed in valueAndGrad(f) must be a function")),(t,n)=>{i.hu(t instanceof a.es,(()=>"The x passed in valueAndGrad(f)(x) must be a tensor")),i.hu(null==n||n instanceof a.es,(()=>"The dy passed in valueAndGrad(f)(x, dy) must be a tensor"));const{grads:r,value:o}=s.BV.gradients((()=>e(t)),[t],n);return d(r),{grad:r[0],value:o}}}function c(e){return i.hu(i.mf(e),(()=>"The f passed in valueAndGrads(f) must be a function")),(t,n)=>{i.hu(Array.isArray(t)&&t.every((e=>e instanceof a.es)),(()=>"The args passed in valueAndGrads(f)(args) must be array of tensors")),i.hu(null==n||n instanceof a.es,(()=>"The dy passed in valueAndGrads(f)(args, dy) must be a tensor"));const r=s.BV.gradients((()=>e(...t)),t,n);return null!=n&&i.k5(r.value.shape,n.shape,"The shape of dy passed in valueAndGrads(f)([x1,...], dy) must match the shape returned by f([x1,...])"),d(r.grads),r}}function h(e,t){i.hu(i.mf(e),(()=>"The f passed in variableGrads(f) must be a function")),i.hu(null==t||Array.isArray(t)&&t.every((e=>e instanceof a._w)),(()=>"The varList passed in variableGrads(f, varList) must be an array of variables"));const n=null!=t;if(!n){t=[];for(const e in s.BV.registeredVariables)t.push(s.BV.registeredVariables[e])}const r=n?t.filter((e=>!e.trainable)):null,o=t.length;t=t.filter((e=>e.trainable)),i.hu(t.length>0,(()=>`variableGrads() expects at least one of the input variables to be trainable, but none of the ${o} variables is trainable.`));const{value:l,grads:u}=s.BV.gradients(e,t,null,!0);i.hu(u.some((e=>null!=e)),(()=>"Cannot find a connection between any variable and the result of the loss function y=f(x). Please make sure the operations that use variables are inside the function f passed to minimize().")),i.hu(0===l.rank,(()=>`The f passed in variableGrads(f) must return a scalar, but it returned a rank-${l.rank} tensor`));const c={};return t.forEach(((e,t)=>{null!=u[t]&&(c[e.name]=u[t])})),null!=r&&r.forEach((e=>c[e.name]=null)),{value:l,grads:c}}function p(e){return s.BV.customGrad(e)}function d(e){if(e.filter((e=>null==e)).length>0)throw new Error("Cannot compute gradient of y=f(x) with respect to x. Make sure that\n    the f you passed encloses all operations that lead from x to y.")}},743:(e,t,n)=>{"use strict";n.r(t),n.d(t,{Abs:()=>Qe.SYM,Acos:()=>Qe.VGw,Acosh:()=>Qe.SpW,AdadeltaOptimizer:()=>Lt,AdagradOptimizer:()=>Pt,AdamOptimizer:()=>Ut,AdamaxOptimizer:()=>qt,Add:()=>Qe.mm_,AddN:()=>Qe.Xze,All:()=>Qe.oT6,Any:()=>Qe.IKK,ArgMax:()=>Qe.sJF,ArgMin:()=>Qe.aJk,Asin:()=>Qe.M2y,Asinh:()=>Qe.qw7,Atan:()=>Qe.jMg,Atan2:()=>Qe.QCc,Atanh:()=>Qe.Oyi,AvgPool:()=>Qe.JhU,AvgPool3D:()=>Qe._k9,AvgPool3DGrad:()=>Qe.IMb,AvgPoolGrad:()=>Qe.ROF,BatchMatMul:()=>Qe.XLW,BatchToSpaceND:()=>Qe.zws,Bincount:()=>Qe.zvY,BroadcastArgs:()=>Qe.eEB,BroadcastTo:()=>Qe.Ly9,Cast:()=>Qe.RFZ,Ceil:()=>Qe.gJX,ClipByValue:()=>Qe.xnO,Complex:()=>Qe.Zz9,ComplexAbs:()=>Qe.yj2,Concat:()=>Qe.Eh3,Conv2D:()=>Qe.mhS,Conv2DBackpropFilter:()=>Qe.wUP,Conv2DBackpropInput:()=>Qe.wm,Conv3D:()=>Qe.x12,Conv3DBackpropFilterV2:()=>Qe.o2y,Conv3DBackpropInputV2:()=>Qe.ik2,Cos:()=>Qe.mc4,Cosh:()=>Qe.TR1,CropAndResize:()=>Qe.VcC,Cumprod:()=>Qe.Byc,Cumsum:()=>Qe.iHb,DataStorage:()=>hs.JL,DenseBincount:()=>Qe.QRR,DepthToSpace:()=>Qe.T0n,DepthwiseConv2dNative:()=>Qe.cie,DepthwiseConv2dNativeBackpropFilter:()=>Qe.sL$,DepthwiseConv2dNativeBackpropInput:()=>Qe.y7R,Diag:()=>Qe.$w,Dilation2D:()=>Qe.p4S,Dilation2DBackpropFilter:()=>Qe.Vn9,Dilation2DBackpropInput:()=>Qe.ekb,ENV:()=>b.Vi,Einsum:()=>Qe.$g6,Elu:()=>Qe.SX0,EluGrad:()=>Qe.HEU,Environment:()=>b.qA,Equal:()=>Qe.hdR,Erf:()=>Qe.Omj,Exp:()=>Qe.NEP,ExpandDims:()=>Qe.YFo,Expm1:()=>Qe.Y0y,FFT:()=>Qe.vwp,Fill:()=>Qe.deh,FlipLeftRight:()=>Qe.Uyb,Floor:()=>Qe.OR,FloorDiv:()=>Qe.jeX,FromPixels:()=>Qe.eBW,FusedBatchNorm:()=>Qe.sHE,FusedConv2D:()=>Qe._V0,FusedDepthwiseConv2D:()=>Qe.luS,GatherNd:()=>Qe.q1x,GatherV2:()=>Qe.qi_,Greater:()=>Qe.iZT,GreaterEqual:()=>Qe.Acj,IFFT:()=>Qe.Qg5,Identity:()=>Qe.iJz,Imag:()=>Qe.J_u,IsFinite:()=>Qe.avt,IsInf:()=>Qe.iWB,IsNan:()=>Qe.r7n,KernelBackend:()=>hs.Zu,LRN:()=>Qe.eZ0,LRNGrad:()=>Qe.Hhh,LeakyRelu:()=>Qe.J$2,Less:()=>Qe.vtC,LessEqual:()=>Qe.CAk,LinSpace:()=>Qe.e7N,Log:()=>Qe.ZbH,Log1p:()=>Qe.kU,LogSoftmax:()=>Qe.qCd,LogicalAnd:()=>Qe.PYm,LogicalNot:()=>Qe.VfG,LogicalOr:()=>Qe.MZg,LogicalXor:()=>Qe.w6g,LowerBound:()=>Qe.qIC,Max:()=>Qe.YoZ,MaxPool:()=>Qe.mTV,MaxPool3D:()=>Qe.OAf,MaxPool3DGrad:()=>Qe.OU7,MaxPoolGrad:()=>Qe.OV7,MaxPoolWithArgmax:()=>Qe.vFR,Maximum:()=>Qe.BMI,Mean:()=>Qe.q2K,Min:()=>Qe.c17,Minimum:()=>Qe.q8u,MirrorPad:()=>Qe.jQs,Mod:()=>Qe.Vbg,MomentumOptimizer:()=>jt,Multinomial:()=>Qe.NZg,Multiply:()=>Qe.wYn,Neg:()=>Qe.kuV,NonMaxSuppressionV3:()=>Qe.uv1,NonMaxSuppressionV4:()=>Qe.cye,NonMaxSuppressionV5:()=>Qe.W0H,NotEqual:()=>Qe.yQU,OP_SCOPE_SUFFIX:()=>Qt.zvA,OneHot:()=>Qe.we_,OnesLike:()=>Qe.qWM,Optimizer:()=>zt,OptimizerConstructors:()=>Yt,Pack:()=>Qe.QiL,PadV2:()=>Qe.lyA,Pool:()=>Qe.Kgp,Pow:()=>Qe.pe_,Prelu:()=>Qe.o0g,Prod:()=>Qe.DlI,RMSPropOptimizer:()=>Kt,RaggedGather:()=>Qe.dDz,RaggedTensorToTensor:()=>Qe.BiW,Range:()=>Qe.e6w,Rank:()=>Zt.yw,Real:()=>Qe.xJR,RealDiv:()=>Qe.oHH,Reciprocal:()=>Qe.$HU,Reduction:()=>Jt.I,Relu:()=>Qe.qkr,Relu6:()=>Qe.SbG,Reshape:()=>Qe.HZH,ResizeBilinear:()=>Qe._Yw,ResizeBilinearGrad:()=>Qe.zbQ,ResizeNearestNeighbor:()=>Qe.dpD,ResizeNearestNeighborGrad:()=>Qe.Hmb,Reverse:()=>Qe.mKl,RotateWithOffset:()=>Qe.b9H,Round:()=>Qe.e07,Rsqrt:()=>Qe.bV0,SGDOptimizer:()=>Xt,ScatterNd:()=>Qe.xQA,SearchSorted:()=>Qe.nr8,Select:()=>Qe.PhF,Selu:()=>Qe.oFR,Sigmoid:()=>Qe.a5O,Sign:()=>Qe.i5y,Sin:()=>Qe.RQH,Sinh:()=>Qe.wYB,Slice:()=>Qe.p2w,Softmax:()=>Qe.Gcp,Softplus:()=>Qe.MRv,SpaceToBatchND:()=>Qe.TQc,SparseFillEmptyRows:()=>Qe.O3z,SparseReshape:()=>Qe.nhH,SparseSegmentMean:()=>Qe.w3H,SparseSegmentSum:()=>Qe.ZjV,SparseToDense:()=>Qe.D2d,SplitV:()=>Qe.L8s,Sqrt:()=>Qe.FKq,Square:()=>Qe.bK0,SquaredDifference:()=>Qe._tC,Step:()=>Qe.h8e,StridedSlice:()=>Qe.jQk,StringNGrams:()=>Qe._JP,StringSplit:()=>Qe.s1s,StringToHashBucketFast:()=>Qe.XkS,Sub:()=>Qe.Tr8,Sum:()=>Qe.GBy,Tan:()=>Qe.sEM,Tanh:()=>Qe.MIZ,Tensor:()=>Ie.es,TensorBuffer:()=>Ie.YD,Tile:()=>Qe.n9L,TopK:()=>Qe.cWu,Transform:()=>Qe.wx7,Transpose:()=>Qe.G3Y,Unique:()=>Qe.kpP,Unpack:()=>Qe.ToN,UnsortedSegmentSum:()=>Qe.Qvg,UpperBound:()=>Qe.XDQ,Variable:()=>Ie._w,ZerosLike:()=>Qe.RuY,_FusedMatMul:()=>Qe.usg,abs:()=>Qt.WnP,acos:()=>Qt.Khb,acosh:()=>Qt.__u,add:()=>Qt.IHx,addN:()=>Qt.QBD,all:()=>Qt.$6P,any:()=>Qt.YjB,argMax:()=>Qt.NqF,argMin:()=>Qt.vHJ,asin:()=>Qt.ZRM,asinh:()=>Qt.VfV,atan:()=>Qt.z4N,atan2:()=>Qt.fvJ,atanh:()=>Qt.C80,avgPool:()=>Qt.wS1,avgPool3d:()=>Qt.uR5,backend:()=>$t.y3,backend_util:()=>h,basicLSTMCell:()=>Qt.zEQ,batchNorm:()=>Qt.tgs,batchNorm2d:()=>Qt.Dxk,batchNorm3d:()=>Qt.JY5,batchNorm4d:()=>Qt.p3b,batchToSpaceND:()=>Qt.E4h,bincount:()=>Qt.yE8,booleanMaskAsync:()=>Qt.anm,broadcastArgs:()=>Qt.XsQ,broadcastTo:()=>Qt.UFq,broadcast_util:()=>Ze,browser:()=>i,buffer:()=>Qt.f3b,cast:()=>Qt.pju,ceil:()=>Qt.mDi,clipByValue:()=>Qt.iUl,clone:()=>Qt.d9v,complex:()=>Qt.PYB,concat:()=>Qt.zoF,concat1d:()=>Qt.gME,concat2d:()=>Qt.Izb,concat3d:()=>Qt.MNy,concat4d:()=>Qt.ZaL,conv1d:()=>Qt.PAt,conv2d:()=>Qt.Tek,conv2dTranspose:()=>Qt.bc,conv3d:()=>Qt.pdZ,conv3dTranspose:()=>Qt.$QV,copyRegisteredKernels:()=>Je.T3,cos:()=>Qt.mCk,cosh:()=>Qt.f9Y,cosineWindow:()=>Qt.mew,cumprod:()=>Qt.$Gn,cumsum:()=>Qt.zbp,customGrad:()=>Ot.cb,denseBincount:()=>Qt.ppE,deprecationWarn:()=>$t.MX,depthToSpace:()=>Qt.nTT,depthwiseConv2d:()=>Qt.B10,device_util:()=>s,diag:()=>Qt.Ka3,dilation2d:()=>Qt.WmZ,disableDeprecationWarnings:()=>$t.cF,dispose:()=>$t.B9,disposeVariables:()=>$t.N8,div:()=>Qt.hiC,divNoNan:()=>Qt.NTj,dot:()=>Qt.AKD,dropout:()=>Qt.rvX,einsum:()=>Qt.WYO,elu:()=>Qt.pyx,enableDebugMode:()=>$t.R,enableProdMode:()=>$t.G4,enclosingPowerOfTwo:()=>Qt.GRh,engine:()=>$t.SR,env:()=>b.OB,equal:()=>Qt.DgJ,erf:()=>Qt.qNN,euclideanNorm:()=>Qt.d2q,exp:()=>Qt.Qqt,expandDims:()=>Qt.dt4,expm1:()=>Qt.t$B,eye:()=>Qt.iyy,fft:()=>Qt.kp_,fill:()=>Qt.hlL,findBackend:()=>$t.x3,findBackendFactory:()=>$t.ze,floor:()=>Qt.GWj,floorDiv:()=>Qt.qPi,fused:()=>Qt.imm,gather:()=>Qt.Iqj,gatherND:()=>Qt.dbB,gather_util:()=>o,getBackend:()=>$t.N_,getGradient:()=>Je.uk,getKernel:()=>Je.pI,getKernelsForBackend:()=>Je.tr,grad:()=>Ot.UQ,grads:()=>Ot.ti,greater:()=>Qt.pjt,greaterEqual:()=>Qt.brS,ifft:()=>Qt.Sxn,imag:()=>Qt.asL,image:()=>Qt.BHj,inTopKAsync:()=>Qt.V3u,io:()=>a,irfft:()=>Qt.wx0,isFinite:()=>Qt.xVT,isInf:()=>Qt.UWc,isNaN:()=>Qt.i2d,keep:()=>$t.Cn,kernel_impls:()=>p,leakyRelu:()=>Qt.hi7,less:()=>Qt.d9m,lessEqual:()=>Qt.zN1,linalg:()=>Qt.$r2,linspace:()=>Qt.SX3,localResponseNormalization:()=>Qt.G9k,log:()=>Qt.cM7,log1p:()=>Qt.Krr,logSigmoid:()=>Qt.e_t,logSoftmax:()=>Qt.CmS,logSumExp:()=>Qt.l_t,logicalAnd:()=>Qt.HvI,logicalNot:()=>Qt.hJK,logicalOr:()=>Qt.K5V,logicalXor:()=>Qt.egP,losses:()=>Qt.MB5,lowerBound:()=>Qt.eab,matMul:()=>Qt.OI3,math:()=>r,max:()=>Qt.Fp7,maxPool:()=>Qt._sB,maxPool3d:()=>Qt.YQQ,maxPoolWithArgmax:()=>Qt.Ip$,maximum:()=>Qt.gWQ,mean:()=>Qt.J69,memory:()=>$t.sq,meshgrid:()=>Qt.ry_,min:()=>Qt.VV$,minimum:()=>Qt.LTh,mirrorPad:()=>Qt.VdP,mod:()=>Qt.wQq,moments:()=>Qt.Gi7,movingAverage:()=>Qt.p_,mul:()=>Qt.dC7,multiRNNCell:()=>Qt.rq4,multinomial:()=>Qt.SJ_,neg:()=>Qt.W76,nextFrame:()=>nn,norm:()=>Qt.KOy,notEqual:()=>Qt.Quu,oneHot:()=>Qt.lfX,ones:()=>Qt.iUs,onesLike:()=>Qt.JpU,op:()=>Qt.op,outerProduct:()=>Qt.N2O,pad:()=>Qt.vku,pad1d:()=>Qt.pNR,pad2d:()=>Qt.koy,pad3d:()=>Qt.t1L,pad4d:()=>Qt.lGY,pool:()=>Qt.d_R,pow:()=>Qt.sQ3,prelu:()=>Qt.AL3,print:()=>Qt.S0v,prod:()=>Qt.WVs,profile:()=>$t.N5,raggedGather:()=>Qt.$gW,raggedTensorToTensor:()=>Qt.N89,rand:()=>Qt.TN_,randomGamma:()=>Qt.wzB,randomNormal:()=>Qt.nGf,randomStandardNormal:()=>Qt.ruB,randomUniform:()=>Qt.LGj,range:()=>Qt.w6H,ready:()=>$t.Cd,real:()=>Qt.kwC,reciprocal:()=>Qt.M25,registerBackend:()=>$t.jq,registerGradient:()=>Je.Li,registerKernel:()=>Je.wC,relu:()=>Qt.UYe,relu6:()=>Qt.btT,removeBackend:()=>$t.cj,reshape:()=>Qt.XLQ,reverse:()=>Qt.GYS,reverse1d:()=>Qt.SDf,reverse2d:()=>Qt.diP,reverse3d:()=>Qt.sx7,reverse4d:()=>Qt.mG2,rfft:()=>Qt.QEs,round:()=>Qt.NMM,rsqrt:()=>Qt.bp0,scalar:()=>Qt.iD$,scatterND:()=>Qt.snQ,scatter_util:()=>ot,searchSorted:()=>Qt.zcT,selu:()=>Qt.U8D,separableConv2d:()=>Qt.U_I,serialization:()=>l,setBackend:()=>$t.CQ,setPlatform:()=>$t.VY,setdiff1dAsync:()=>Qt.ODp,sigmoid:()=>Qt.XD2,sign:()=>Qt.Xxe,signal:()=>Qt.tdS,sin:()=>Qt.O$l,sinh:()=>Qt.R_K,slice:()=>Qt.tPi,slice1d:()=>Qt.jZU,slice2d:()=>Qt.SmN,slice3d:()=>Qt.CnO,slice4d:()=>Qt.p0P,slice_util:()=>lt,softmax:()=>Qt.XAC,softplus:()=>Qt.Wvh,spaceToBatchND:()=>Qt.fBT,sparse:()=>Qt.rVs,sparseToDense:()=>Qt.ers,spectral:()=>Qt.uN7,split:()=>Qt.Vl2,sqrt:()=>Qt._b3,square:()=>Qt.h62,squaredDifference:()=>Qt.$i,squeeze:()=>Qt.L9e,stack:()=>Qt.knu,step:()=>Qt.Nbs,stridedSlice:()=>Qt.NXj,string:()=>Qt.Z_8,sub:()=>Qt.luU,sum:()=>Qt.Smz,sumOutType:()=>Zt.z4,tan:()=>Qt.ORZ,tanh:()=>Qt.AEp,tensor:()=>Qt.XeE,tensor1d:()=>Qt.RRF,tensor2d:()=>Qt.odF,tensor3d:()=>Qt.wOQ,tensor4d:()=>Qt.yXz,tensor5d:()=>Qt.Bfx,tensor6d:()=>Qt.xZs,tensor_util:()=>pt,test_util:()=>u,tidy:()=>$t.lu,tile:()=>Qt.Gg6,time:()=>$t.XV,topk:()=>Qt.hg7,train:()=>en,transpose:()=>Qt.p4s,truncatedNormal:()=>Qt.Xu6,unique:()=>Qt.Two,unregisterGradient:()=>Je.bt,unregisterKernel:()=>Je.nE,unsortedSegmentSum:()=>Qt.pUJ,unstack:()=>Qt.HHK,upcastType:()=>Zt.x8,upperBound:()=>Qt.GaM,util:()=>dt,valueAndGrad:()=>Ot.h7,valueAndGrads:()=>Ot.fN,variable:()=>Qt.VD$,variableGrads:()=>Ot.pn,version_core:()=>Ct,where:()=>Qt.arb,whereAsync:()=>Qt.itS,zeros:()=>Qt.lls,zerosLike:()=>Qt.P84});var s={};n.r(s),n.d(s,{isBrowser:()=>y,isMobile:()=>g,mockIsMobile:()=>m});var a={};n.r(a),n.d(a,{browserFiles:()=>$e,browserHTTPRequest:()=>ze,concatenateArrayBuffers:()=>E,copyModel:()=>me,decodeWeights:()=>N,encodeWeights:()=>S,fromMemory:()=>Ve,fromMemorySync:()=>We,getLoadHandlers:()=>V,getModelArtifactsForJSON:()=>F,getModelArtifactsForJSONSync:()=>R,getModelArtifactsInfoForJSON:()=>D,getSaveHandlers:()=>P,getWeightSpecs:()=>O,http:()=>Me,isHTTPScheme:()=>De,listModels:()=>de,loadWeights:()=>Ae,moveModel:()=>ge,registerLoadRouter:()=>B,registerSaveRouter:()=>L,removeModel:()=>fe,weightsLoaderFactory:()=>Re,withSaveHandler:()=>Ue,withSaveHandlerSync:()=>Ge});var r={};n.r(r),n.d(r,{confusionMatrix:()=>Ye});var i={};n.r(i),n.d(i,{fromPixels:()=>rt,fromPixelsAsync:()=>st,toPixels:()=>at});var o={};n.r(o),n.d(o,{prepareAndValidate:()=>it});var l={};n.r(l),n.d(l,{Serializable:()=>ut,SerializationMap:()=>ct,registerClass:()=>ht});var u={};n.r(u),n.d(u,{TEST_EPSILON_FLOAT16:()=>ft,createVideoElement:()=>Nt,encodeStrings:()=>St,expectArrayBuffersEqual:()=>It,expectArraysClose:()=>mt,expectArraysEqual:()=>xt,expectNumbersClose:()=>vt,expectPromiseToFail:()=>bt,expectValuesInRange:()=>kt,play:()=>Tt,testEpsilon:()=>gt});var c={};n.r(c),n.d(c,{collectGatherOpShapeInfo:()=>is,computeOutShape:()=>rs,segOpComputeOptimalWindowSize:()=>as});var h={};n.r(h),n.d(h,{ERF_A1:()=>Sn,ERF_A2:()=>Nn,ERF_A3:()=>Tn,ERF_A4:()=>Cn,ERF_A5:()=>$n,ERF_P:()=>In,PARALLELIZE_THRESHOLD:()=>fn,RowPartitionType:()=>on,SELU_SCALE:()=>kn.$,SELU_SCALEALPHA:()=>kn.y,applyActivation:()=>un.QH,assertAndGetBroadcastShape:()=>Ze.assertAndGetBroadcastShape,assertAxesAreInnerMostDims:()=>sn.lB,assertParamsConsistent:()=>an,assignToTypedArray:()=>On,axesAreInnerMostDims:()=>sn.YB,calculateShapes:()=>ot.calculateShapes,checkEinsumDimSizes:()=>Vn,checkPadOnDimRoundingMode:()=>ln.m,combineLocations:()=>sn.Vh,combineRaggedTensorToTensorShapes:()=>cn,complexWithEvenIndex:()=>Rn,complexWithOddIndex:()=>Fn,computeConv2DInfo:()=>ln.Ix,computeConv3DInfo:()=>ln.jw,computeDefaultPad:()=>ln.aO,computeDilation2DInfo:()=>ln.Rf,computeOptimalWindowSize:()=>mn,computeOutAndReduceShapes:()=>sn.kz,computeOutShape:()=>rn,computePool2DInfo:()=>ln.Xw,computePool3DInfo:()=>ln.pl,convertConv2DDataFormat:()=>ln.sl,decodeEinsumEquation:()=>Bn,eitherStridesOrDilationsAreOne:()=>ln.jT,expandShapeToKeepDim:()=>sn.rv,exponent:()=>zn,exponents:()=>Mn,fromStringArrayToUint8:()=>ls,fromUint8ToStringArray:()=>os,getAxesPermutation:()=>sn.Q3,getBroadcastDims:()=>Ze.getBroadcastDims,getComplexWithIndex:()=>Dn,getEinsumComputePath:()=>Wn,getEinsumPermutation:()=>Pn,getFusedBiasGradient:()=>un.pf,getFusedDyActivation:()=>un.Fr,getImageCenter:()=>gn,getInnerMostAxes:()=>sn.sY,getPermuted:()=>bn,getRaggedRank:()=>pn,getReductionAxes:()=>Ze.getReductionAxes,getReshaped:()=>yn,getReshapedPermuted:()=>xn,getRowPartitionTypesHelper:()=>hn,getSliceBeginCoords:()=>vn,getSliceSize:()=>wn,getSparseFillEmptyRowsIndicesDenseShapeMismatch:()=>qn,getSparseFillEmptyRowsNegativeIndexErrorMessage:()=>Xn,getSparseFillEmptyRowsOutOfRangeIndexErrorMessage:()=>jn,getSparseReshapeEmptyTensorZeroOutputDimErrorMessage:()=>Zn,getSparseReshapeInputOutputMismatchErrorMessage:()=>Jn,getSparseReshapeInputOutputMultipleErrorMessage:()=>Qn,getSparseReshapeMultipleNegativeOneOutputDimErrorMessage:()=>Kn,getSparseReshapeNegativeOutputDimErrorMessage:()=>Yn,getSparseSegmentReductionIndicesOutOfRangeErrorMessage:()=>ss,getSparseSegmentReductionNegativeSegmentIdsErrorMessage:()=>es,getSparseSegmentReductionNonIncreasingSegmentIdsErrorMessage:()=>ts,getSparseSegmentReductionSegmentIdOutOfRangeErrorMessage:()=>ns,getUndoAxesPermutation:()=>sn.LJ,isIdentityPermutation:()=>Un,log:()=>En.c,mergeRealAndImagArrays:()=>_n,prepareAndValidate:()=>it,prepareSplitSize:()=>Hn,segment_util:()=>c,shouldFuse:()=>un.uy,slice_util:()=>lt,splitRealAndImagArrays:()=>An,tupleValuesAreOne:()=>ln.I0,upcastType:()=>Zt.x8,validateDefaultValueShape:()=>dn,validateInput:()=>ot.validateInput,validateUpdateShape:()=>ot.validateUpdateShape,warn:()=>En.Z});var p={};n.r(p),n.d(p,{nonMaxSuppressionV3Impl:()=>us.GP,nonMaxSuppressionV4Impl:()=>us.qP,nonMaxSuppressionV5Impl:()=>us.pA,whereImpl:()=>cs.Z});var d=n(1297);let f;function m(e){f=e}function g(e){if(void 0!==f)return f;if(e||"undefined"!=typeof navigator&&null!=navigator){if(e||(e=navigator),"ReactNative"===e.product)return!0;const t=e.userAgent||e.vendor||("undefined"!=typeof window?window.opera:"");if(!t){const t=e;return t.userAgentData&&t.userAgentData.mobile}return/(android|bb\d+|meego).+mobile|avantgo|bada\/|blackberry|blazer|compal|elaine|fennec|hiptop|iemobile|ip(hone|od)|iris|kindle|lge |maemo|midp|mmp|mobile.+firefox|netfront|opera m(ob|in)i|palm( os)?|phone|p(ixi|re)\/|plucker|pocket|psp|series(4|6)0|symbian|treo|up\.(browser|link)|vodafone|wap|windows ce|xda|xiino/i.test(t)||/1207|6310|6590|3gso|4thp|50[1-6]i|770s|802s|a wa|abac|ac(er|oo|s\-)|ai(ko|rn)|al(av|ca|co)|amoi|an(ex|ny|yw)|aptu|ar(ch|go)|as(te|us)|attw|au(di|\-m|r |s )|avan|be(ck|ll|nq)|bi(lb|rd)|bl(ac|az)|br(e|v)w|bumb|bw\-(n|u)|c55\/|capi|ccwa|cdm\-|cell|chtm|cldc|cmd\-|co(mp|nd)|craw|da(it|ll|ng)|dbte|dc\-s|devi|dica|dmob|do(c|p)o|ds(12|\-d)|el(49|ai)|em(l2|ul)|er(ic|k0)|esl8|ez([4-7]0|os|wa|ze)|fetc|fly(\-|_)|g1 u|g560|gene|gf\-5|g\-mo|go(\.w|od)|gr(ad|un)|haie|hcit|hd\-(m|p|t)|hei\-|hi(pt|ta)|hp( i|ip)|hs\-c|ht(c(\-| |_|a|g|p|s|t)|tp)|hu(aw|tc)|i\-(20|go|ma)|i230|iac( |\-|\/)|ibro|idea|ig01|ikom|im1k|inno|ipaq|iris|ja(t|v)a|jbro|jemu|jigs|kddi|keji|kgt( |\/)|klon|kpt |kwc\-|kyo(c|k)|le(no|xi)|lg( g|\/(k|l|u)|50|54|\-[a-w])|libw|lynx|m1\-w|m3ga|m50\/|ma(te|ui|xo)|mc(01|21|ca)|m\-cr|me(rc|ri)|mi(o8|oa|ts)|mmef|mo(01|02|bi|de|do|t(\-| |o|v)|zz)|mt(50|p1|v )|mwbp|mywa|n10[0-2]|n20[2-3]|n30(0|2)|n50(0|2|5)|n7(0(0|1)|10)|ne((c|m)\-|on|tf|wf|wg|wt)|nok(6|i)|nzph|o2im|op(ti|wv)|oran|owg1|p800|pan(a|d|t)|pdxg|pg(13|\-([1-8]|c))|phil|pire|pl(ay|uc)|pn\-2|po(ck|rt|se)|prox|psio|pt\-g|qa\-a|qc(07|12|21|32|60|\-[2-7]|i\-)|qtek|r380|r600|raks|rim9|ro(ve|zo)|s55\/|sa(ge|ma|mm|ms|ny|va)|sc(01|h\-|oo|p\-)|sdk\/|se(c(\-|0|1)|47|mc|nd|ri)|sgh\-|shar|sie(\-|m)|sk\-0|sl(45|id)|sm(al|ar|b3|it|t5)|so(ft|ny)|sp(01|h\-|v\-|v )|sy(01|mb)|t2(18|50)|t6(00|10|18)|ta(gt|lk)|tcl\-|tdg\-|tel(i|m)|tim\-|t\-mo|to(pl|sh)|ts(70|m\-|m3|m5)|tx\-9|up(\.b|g1|si)|utst|v400|v750|veri|vi(rg|te)|vk(40|5[0-3]|\-v)|vm40|voda|vulc|vx(52|53|60|61|70|80|81|83|85|98)|w3c(\-| )|webc|whit|wi(g |nc|nw)|wmlb|wonu|x700|yas\-|your|zeto|zte\-/i.test(t.substr(0,4))}return!1}function y(){return"undefined"!=typeof window&&null!=window.document||"undefined"!=typeof WorkerGlobalScope}var b=n(415);const x=(0,b.OB)();x.registerFlag("DEBUG",(()=>!1),(e=>{e&&console.warn("Debugging mode is ON. The output of every math call will be downloaded to CPU and checked for NaNs. This significantly impacts performance.")})),x.registerFlag("IS_BROWSER",(()=>y())),x.registerFlag("IS_NODE",(()=>"undefined"!=typeof process&&void 0!==process.versions&&void 0!==process.versions.node)),x.registerFlag("IS_CHROME",(()=>"undefined"!=typeof navigator&&null!=navigator&&null!=navigator.userAgent&&/Chrome/.test(navigator.userAgent)&&/Google Inc/.test(navigator.vendor))),x.registerFlag("PROD",(()=>!1)),x.registerFlag("TENSORLIKE_CHECK_SHAPE_CONSISTENCY",(()=>x.getBool("DEBUG"))),x.registerFlag("DEPRECATION_WARNINGS_ENABLED",(()=>!0)),x.registerFlag("IS_TEST",(()=>!1)),x.registerFlag("CHECK_COMPUTATION_FOR_ERRORS",(()=>!0)),x.registerFlag("WRAP_TO_IMAGEBITMAP",(()=>!1)),x.registerFlag("ENGINE_COMPILE_ONLY",(()=>!1)),x.registerFlag("CANVAS2D_WILL_READ_FREQUENTLY_FOR_GPU",(()=>!1)),x.registerFlag("USE_SETTIMEOUTCUSTOM",(()=>!1));var v=n(9943),w=n(9332),k=n(7636);const I={float32:4,float16:2,int32:4,uint16:2,uint8:1,bool:1,complex64:8};async function S(e,t){const n=[],s=[],a=Array.isArray(e)?e.map((e=>e.name)):Object.keys(e);for(let r=0;r<a.length;++r){const i=a[r],o=Array.isArray(e)?e[r].tensor:e[i];if("float32"!==o.dtype&&"int32"!==o.dtype&&"bool"!==o.dtype&&"string"!==o.dtype&&"complex64"!==o.dtype)throw new Error(`Unsupported dtype in weight '${i}': ${o.dtype}`);const l={name:i,shape:o.shape,dtype:o.dtype};if("string"===o.dtype){const e=new Promise((async e=>{const t=await o.bytes(),n=t.reduce(((e,t)=>e+t.length),0)+4*t.length,s=new Uint8Array(n);let a=0;for(let e=0;e<t.length;e++){const n=t[e],r=new Uint8Array(new Uint32Array([n.length]).buffer);s.set(r,a),a+=4,s.set(n,a),a+=n.length}e(s)}));s.push(e)}else s.push(o.data());null!=t&&(l.group=t),n.push(l)}return{data:T(await Promise.all(s)),specs:n}}function N(e,t){const n={};let s,a=0;for(const r of t){const t=r.name,i=r.dtype,o=r.shape,l=(0,k.NA)(o);let u;if("quantization"in r){const n=r.quantization;if("uint8"===n.dtype||"uint16"===n.dtype){if(!("min"in n)||!("scale"in n))throw new Error(`Weight ${r.name} with quantization ${n.dtype} doesn't have corresponding metadata min and scale.`)}else{if("float16"!==n.dtype)throw new Error(`Weight ${r.name} has unknown quantization dtype ${n.dtype}. Supported quantization dtypes are: 'uint8', 'uint16', and 'float16'.`);if("float32"!==i)throw new Error(`Weight ${r.name} is quantized with ${n.dtype} which only supports weights of type float32 not ${i}.`)}const o=I[n.dtype],c=e.slice(a,a+l*o),h="uint8"===n.dtype?new Uint8Array(c):new Uint16Array(c);if("float32"===i)if("uint8"===n.dtype||"uint16"===n.dtype){u=new Float32Array(h.length);for(let e=0;e<h.length;e++){const t=h[e];u[e]=t*n.scale+n.min}}else{if("float16"!==n.dtype)throw new Error(`Unsupported quantization type ${n.dtype} for weight type float32.`);void 0===s&&(s=M()),u=s(h)}else{if("int32"!==i)throw new Error(`Unsupported dtype in weight '${t}': ${i}`);if("uint8"!==n.dtype&&"uint16"!==n.dtype)throw new Error(`Unsupported quantization type ${n.dtype} for weight type int32.`);u=new Int32Array(h.length);for(let e=0;e<h.length;e++){const t=h[e];u[e]=Math.round(t*n.scale+n.min)}}a+=l*o}else if("string"===i){const t=(0,k.NA)(r.shape);u=[];for(let n=0;n<t;n++){const t=new Uint32Array(e.slice(a,a+4))[0];a+=4;const n=new Uint8Array(e.slice(a,a+t));u.push(n),a+=t}}else{const s=I[i],r=e.slice(a,a+l*s);if("float32"===i)u=new Float32Array(r);else if("int32"===i)u=new Int32Array(r);else if("bool"===i)u=new Uint8Array(r);else{if("complex64"!==i)throw new Error(`Unsupported dtype in weight '${t}': ${i}`);{u=new Float32Array(r);const e=new Float32Array(u.length/2),s=new Float32Array(u.length/2);for(let t=0;t<e.length;t++)e[t]=u[2*t],s[t]=u[2*t+1];const a=(0,w.X)(e,o,"float32"),i=(0,w.X)(s,o,"float32");n[t]=(0,v.P)(a,i),a.dispose(),i.dispose()}}a+=l*s}"complex64"!==i&&(n[t]=(0,w.X)(u,o,i))}return n}function T(e){if(null===e)throw new Error(`Invalid input value: ${JSON.stringify(e)}`);let t=0;const n=[];e.forEach((e=>{if(t+=e.byteLength,n.push(e.byteLength===e.buffer.byteLength?e:new e.constructor(e)),!(e instanceof Float32Array||e instanceof Int32Array||e instanceof Uint8Array))throw new Error(`Unsupported TypedArray subtype: ${e.constructor.name}`)}));const s=new Uint8Array(t);let a=0;return n.forEach((e=>{s.set(new Uint8Array(e.buffer),a),a+=e.byteLength})),s.buffer}const C="undefined"!=typeof Buffer&&("undefined"==typeof Blob||"undefined"==typeof atob||"undefined"==typeof btoa);function $(e){return C?Buffer.byteLength(e):new Blob([e]).size}function E(e){if(1===e.length)return e[0];let t=0;e.forEach((e=>{t+=e.byteLength}));const n=new Uint8Array(t);let s=0;return e.forEach((e=>{n.set(new Uint8Array(e),s),s+=e.byteLength})),n.buffer}function _(e){for(e=e.trim();e.endsWith("/");)e=e.slice(0,e.length-1);const t=e.split("/");return t[t.length-1]}function A(e,t){const n={modelTopology:e.modelTopology,format:e.format,generatedBy:e.generatedBy,convertedBy:e.convertedBy,weightsManifest:t};return null!=e.signature&&(n.signature=e.signature),null!=e.userDefinedMetadata&&(n.userDefinedMetadata=e.userDefinedMetadata),null!=e.modelInitializer&&(n.modelInitializer=e.modelInitializer),null!=e.trainingConfig&&(n.trainingConfig=e.trainingConfig),n}function R(e,t,n){const s={modelTopology:e.modelTopology,format:e.format,generatedBy:e.generatedBy,convertedBy:e.convertedBy};if(null!=e.trainingConfig&&(s.trainingConfig=e.trainingConfig),null!=e.weightsManifest){if(!t)throw new Error("modelJSON has weightsManifest but weightSpecs is null");if(!n)throw new Error("modelJSON has weightsManifest but weightData is null");s.weightSpecs=t,s.weightData=n}return null!=e.signature&&(s.signature=e.signature),null!=e.userDefinedMetadata&&(s.userDefinedMetadata=e.userDefinedMetadata),null!=e.modelInitializer&&(s.modelInitializer=e.modelInitializer),s}async function F(e,t){let n,s;return null!=e.weightsManifest&&([n,s]=await t(e.weightsManifest)),R(e,n,s)}function D(e){if(e.modelTopology instanceof ArrayBuffer)throw new Error("Expected JSON model topology, received ArrayBuffer.");return{dateSaved:new Date,modelTopologyType:"JSON",modelTopologyBytes:null==e.modelTopology?0:$(JSON.stringify(e.modelTopology)),weightSpecsBytes:null==e.weightSpecs?0:$(JSON.stringify(e.weightSpecs)),weightDataBytes:null==e.weightData?0:e.weightData.byteLength}}function O(e){const t=[];for(const n of e)t.push(...n.weights);return t}function M(){const e=function(){const e=e=>{let t=e<<13,n=0;for(;0==(8388608&t);)n-=8388608,t<<=1;return t&=-8388609,n+=947912704,t|n},t=new Uint32Array(2048);t[0]=0;for(let n=1;n<1024;n++)t[n]=e(n);for(let e=1024;e<2048;e++)t[e]=939524096+(e-1024<<13);return t}(),t=function(){const e=new Uint32Array(64);e[0]=0,e[31]=1199570944,e[32]=2147483648,e[63]=3347054592;for(let t=1;t<31;t++)e[t]=t<<23;for(let t=33;t<63;t++)e[t]=2147483648+(t-32<<23);return e}(),n=function(){const e=new Uint32Array(64);for(let t=0;t<64;t++)e[t]=1024;return e[0]=e[32]=0,e}();return s=>{const a=new ArrayBuffer(4*s.length),r=new Uint32Array(a);for(let a=0;a<s.length;a++){const i=s[a],o=e[n[i>>10]+(1023&i)]+t[i>>10];r[a]=o}return new Float32Array(a)}}class z{constructor(){this.saveRouters=[],this.loadRouters=[]}static getInstance(){return null==z.instance&&(z.instance=new z),z.instance}static registerSaveRouter(e){z.getInstance().saveRouters.push(e)}static registerLoadRouter(e){z.getInstance().loadRouters.push(e)}static getSaveHandlers(e){return z.getHandlers(e,"save")}static getLoadHandlers(e,t){return z.getHandlers(e,"load",t)}static getHandlers(e,t,n){const s=[];return("load"===t?z.getInstance().loadRouters:z.getInstance().saveRouters).forEach((t=>{const a=t(e,n);null!==a&&s.push(a)})),s}}const L=e=>z.registerSaveRouter(e),B=e=>z.registerLoadRouter(e),P=e=>z.getSaveHandlers(e),V=(e,t)=>z.getLoadHandlers(e,t),W="tensorflowjs",U="models_store",G="model_info_store";function H(){if(!(0,b.OB)().getBool("IS_BROWSER"))throw new Error("Failed to obtain IndexedDB factory because the current environmentis not a web browser.");const e="undefined"==typeof window?self:window,t=e.indexedDB||e.mozIndexedDB||e.webkitIndexedDB||e.msIndexedDB||e.shimIndexedDB;if(null==t)throw new Error("The current browser does not appear to support IndexedDB.");return t}function q(e){const t=e.result;t.createObjectStore(U,{keyPath:"modelPath"}),t.createObjectStore(G,{keyPath:"modelPath"})}class X{constructor(e){if(this.indexedDB=H(),null==e||!e)throw new Error("For IndexedDB, modelPath must not be null, undefined or empty.");this.modelPath=e}async save(e){if(e.modelTopology instanceof ArrayBuffer)throw new Error("BrowserLocalStorage.save() does not support saving model topology in binary formats yet.");return this.databaseAction(this.modelPath,e)}async load(){return this.databaseAction(this.modelPath)}databaseAction(e,t){return new Promise(((e,n)=>{const s=this.indexedDB.open(W,1);s.onupgradeneeded=()=>q(s),s.onsuccess=()=>{const a=s.result;if(null==t){const t=a.transaction(U,"readonly"),s=t.objectStore(U).get(this.modelPath);s.onsuccess=()=>{if(null==s.result)return a.close(),n(new Error(`Cannot find model with path '${this.modelPath}' in IndexedDB.`));e(s.result.modelArtifacts)},s.onerror=e=>(a.close(),n(s.error)),t.oncomplete=()=>a.close()}else{const s=D(t),r=a.transaction(G,"readwrite");let i=r.objectStore(G);const o=i.put({modelPath:this.modelPath,modelArtifactsInfo:s});let l;o.onsuccess=()=>{l=a.transaction(U,"readwrite");const o=l.objectStore(U).put({modelPath:this.modelPath,modelArtifacts:t,modelArtifactsInfo:s});o.onsuccess=()=>e({modelArtifactsInfo:s}),o.onerror=e=>{i=r.objectStore(G);const t=i.delete(this.modelPath);t.onsuccess=()=>(a.close(),n(o.error)),t.onerror=e=>(a.close(),n(o.error))}},o.onerror=e=>(a.close(),n(o.error)),r.oncomplete=()=>{null==l?a.close():l.oncomplete=()=>a.close()}}},s.onerror=e=>n(s.error)}))}}X.URL_SCHEME="indexeddb://";const j=e=>{return(0,b.OB)().getBool("IS_BROWSER")&&!Array.isArray(e)&&e.startsWith(X.URL_SCHEME)?(t=e.slice(X.URL_SCHEME.length),new X(t)):null;var t};z.registerSaveRouter(j),z.registerLoadRouter(j);class K{constructor(){this.indexedDB=H()}async listModels(){return new Promise(((e,t)=>{const n=this.indexedDB.open(W,1);n.onupgradeneeded=()=>q(n),n.onsuccess=()=>{const s=n.result,a=s.transaction(G,"readonly"),r=a.objectStore(G).getAll();r.onsuccess=()=>{const t={};for(const e of r.result)t[e.modelPath]=e.modelArtifactsInfo;e(t)},r.onerror=e=>(s.close(),t(r.error)),a.oncomplete=()=>s.close()},n.onerror=e=>t(n.error)}))}async removeModel(e){var t;return e=(t=e).startsWith(X.URL_SCHEME)?t.slice(X.URL_SCHEME.length):t,new Promise(((t,n)=>{const s=this.indexedDB.open(W,1);s.onupgradeneeded=()=>q(s),s.onsuccess=()=>{const a=s.result,r=a.transaction(G,"readwrite"),i=r.objectStore(G),o=i.get(e);let l;o.onsuccess=()=>{if(null==o.result)return a.close(),n(new Error(`Cannot find model with path '${e}' in IndexedDB.`));{const s=i.delete(e),r=()=>{l=a.transaction(U,"readwrite");const s=l.objectStore(U).delete(e);s.onsuccess=()=>t(o.result.modelArtifactsInfo),s.onerror=e=>n(o.error)};s.onsuccess=r,s.onerror=e=>(r(),a.close(),n(o.error))}},o.onerror=e=>(a.close(),n(o.error)),r.oncomplete=()=>{null==l?a.close():l.oncomplete=()=>a.close()}},s.onerror=e=>n(s.error)}))}}const Y="/",Z="tensorflowjs_models",Q="info",J="model_topology",ee="weight_specs",te="weight_data",ne="model_metadata";function se(e){return{info:[Z,e,Q].join(Y),topology:[Z,e,J].join(Y),weightSpecs:[Z,e,ee].join(Y),weightData:[Z,e,te].join(Y),modelMetadata:[Z,e,ne].join(Y)}}function ae(e){for(const t of Object.values(e))window.localStorage.removeItem(t)}function re(e){const t=e.split(Y);if(t.length<3)throw new Error(`Invalid key format: ${e}`);return t.slice(1,t.length-1).join(Y)}class ie{constructor(e){if(!(0,b.OB)().getBool("IS_BROWSER")||"undefined"==typeof window||void 0===window.localStorage)throw new Error("The current environment does not support local storage.");if(this.LS=window.localStorage,null==e||!e)throw new Error("For local storage, modelPath must not be null, undefined or empty.");this.modelPath=e,this.keys=se(this.modelPath)}async save(e){if(e.modelTopology instanceof ArrayBuffer)throw new Error("BrowserLocalStorage.save() does not support saving model topology in binary formats yet.");{const t=JSON.stringify(e.modelTopology),n=JSON.stringify(e.weightSpecs),s=D(e);try{this.LS.setItem(this.keys.info,JSON.stringify(s)),this.LS.setItem(this.keys.topology,t),this.LS.setItem(this.keys.weightSpecs,n),this.LS.setItem(this.keys.weightData,function(e){if(C)return Buffer.from(e).toString("base64");const t=new Uint8Array(e);let n="";for(let e=0,s=t.length;e<s;e++)n+=String.fromCharCode(t[e]);return btoa(n)}(e.weightData));const a={format:e.format,generatedBy:e.generatedBy,convertedBy:e.convertedBy,signature:null!=e.signature?e.signature:void 0,userDefinedMetadata:null!=e.userDefinedMetadata?e.userDefinedMetadata:void 0,modelInitializer:null!=e.modelInitializer?e.modelInitializer:void 0,trainingConfig:null!=e.trainingConfig?e.trainingConfig:void 0};return this.LS.setItem(this.keys.modelMetadata,JSON.stringify(a)),{modelArtifactsInfo:s}}catch(e){throw ae(this.keys),new Error(`Failed to save model '${this.modelPath}' to local storage: size quota being exceeded is a possible cause of this failure: modelTopologyBytes=${s.modelTopologyBytes}, weightSpecsBytes=${s.weightSpecsBytes}, weightDataBytes=${s.weightDataBytes}.`)}}}async load(){const e=JSON.parse(this.LS.getItem(this.keys.info));if(null==e)throw new Error(`In local storage, there is no model with name '${this.modelPath}'`);if("JSON"!==e.modelTopologyType)throw new Error("BrowserLocalStorage does not support loading non-JSON model topology yet.");const t={},n=JSON.parse(this.LS.getItem(this.keys.topology));if(null==n)throw new Error(`In local storage, the topology of model '${this.modelPath}' is missing.`);t.modelTopology=n;const s=JSON.parse(this.LS.getItem(this.keys.weightSpecs));if(null==s)throw new Error(`In local storage, the weight specs of model '${this.modelPath}' are missing.`);t.weightSpecs=s;const a=this.LS.getItem(this.keys.modelMetadata);if(null!=a){const e=JSON.parse(a);t.format=e.format,t.generatedBy=e.generatedBy,t.convertedBy=e.convertedBy,null!=e.signature&&(t.signature=e.signature),null!=e.userDefinedMetadata&&(t.userDefinedMetadata=e.userDefinedMetadata),null!=e.modelInitializer&&(t.modelInitializer=e.modelInitializer),null!=e.trainingConfig&&(t.trainingConfig=e.trainingConfig)}const r=this.LS.getItem(this.keys.weightData);if(null==r)throw new Error(`In local storage, the binary weight values of model '${this.modelPath}' are missing.`);return t.weightData=function(e){if(C){const t=Buffer.from(e,"base64");return t.buffer.slice(t.byteOffset,t.byteOffset+t.byteLength)}const t=atob(e),n=new Uint8Array(t.length);for(let e=0;e<t.length;++e)n.set([t.charCodeAt(e)],e);return n.buffer}(r),t}}ie.URL_SCHEME="localstorage://";const oe=e=>{return(0,b.OB)().getBool("IS_BROWSER")&&!Array.isArray(e)&&e.startsWith(ie.URL_SCHEME)?(t=e.slice(ie.URL_SCHEME.length),new ie(t)):null;var t};z.registerSaveRouter(oe),z.registerLoadRouter(oe);class le{constructor(){(0,k.hu)((0,b.OB)().getBool("IS_BROWSER"),(()=>"Current environment is not a web browser")),(0,k.hu)("undefined"==typeof window||void 0!==window.localStorage,(()=>"Current browser does not appear to support localStorage")),this.LS=window.localStorage}async listModels(){const e={},t=Z+Y,n=Y+Q;for(let s=0;s<this.LS.length;++s){const a=this.LS.key(s);a.startsWith(t)&&a.endsWith(n)&&(e[re(a)]=JSON.parse(this.LS.getItem(a)))}return e}async removeModel(e){var t;const n=se(e=(t=e).startsWith(ie.URL_SCHEME)?t.slice(ie.URL_SCHEME.length):t);if(null==this.LS.getItem(n.info))throw new Error(`Cannot find model at path '${e}'`);const s=JSON.parse(this.LS.getItem(n.info));return ae(n),s}}const ue="://";class ce{constructor(){this.managers={}}static getInstance(){return null==ce.instance&&(ce.instance=new ce),ce.instance}static registerManager(e,t){(0,k.hu)(null!=e,(()=>"scheme must not be undefined or null.")),e.endsWith(ue)&&(e=e.slice(0,e.indexOf(ue))),(0,k.hu)(e.length>0,(()=>"scheme must not be an empty string."));const n=ce.getInstance();(0,k.hu)(null==n.managers[e],(()=>`A model store manager is already registered for scheme '${e}'.`)),n.managers[e]=t}static getManager(e){const t=ce.getInstance().managers[e];if(null==t)throw new Error(`Cannot find model manager for scheme '${e}'`);return t}static getSchemes(){return Object.keys(ce.getInstance().managers)}}function he(e){if(-1===e.indexOf(ue))throw new Error(`The url string provided does not contain a scheme. Supported schemes are: ${ce.getSchemes().join(",")}`);return{scheme:e.split(ue)[0],path:e.split(ue)[1]}}async function pe(e,t,n=!1){(0,k.hu)(e!==t,(()=>`Old path and new path are the same: '${e}'`));const s=z.getLoadHandlers(e);(0,k.hu)(s.length>0,(()=>`Copying failed because no load handler is found for source URL ${e}.`)),(0,k.hu)(s.length<2,(()=>`Copying failed because more than one (${s.length}) load handlers for source URL ${e}.`));const a=s[0],r=z.getSaveHandlers(t);(0,k.hu)(r.length>0,(()=>`Copying failed because no save handler is found for destination URL ${t}.`)),(0,k.hu)(r.length<2,(()=>`Copying failed because more than one (${s.length}) save handlers for destination URL ${t}.`));const i=r[0],o=he(e).scheme,l=he(e).path,u=o===he(e).scheme,c=await a.load();n&&u&&await ce.getManager(o).removeModel(l);const h=await i.save(c);return n&&!u&&await ce.getManager(o).removeModel(l),h.modelArtifactsInfo}async function de(){const e=ce.getSchemes(),t={};for(const n of e){const e=await ce.getManager(n).listModels();for(const s in e)t[n+ue+s]=e[s]}return t}async function fe(e){const t=he(e);return ce.getManager(t.scheme).removeModel(t.path)}async function me(e,t){return pe(e,t,!1)}async function ge(e,t){return pe(e,t,!0)}class ye{constructor(){this.messageName="setTimeoutCustom",this.functionRefs=[],this.handledMessageCount=0,this.hasEventListener=!1}fetch(e,t){return fetch(e,t)}now(){return performance.now()}encode(e,t){if("utf-8"!==t&&"utf8"!==t)throw new Error(`Browser's encoder only supports utf-8, but got ${t}`);return null==this.textEncoder&&(this.textEncoder=new TextEncoder),this.textEncoder.encode(e)}decode(e,t){return new TextDecoder(t).decode(e)}setTimeoutCustom(e,t){window&&(0,b.OB)().getBool("USE_SETTIMEOUTCUSTOM")?(this.functionRefs.push(e),setTimeout((()=>{window.postMessage({name:this.messageName,index:this.functionRefs.length-1},"*")}),t),this.hasEventListener||(this.hasEventListener=!0,window.addEventListener("message",(e=>{e.source===window&&e.data.name===this.messageName&&(e.stopPropagation(),(0,this.functionRefs[e.data.index])(),this.handledMessageCount++,this.handledMessageCount===this.functionRefs.length&&(this.functionRefs=[],this.handledMessageCount=0))}),!0))):setTimeout(e,t)}}if((0,b.OB)().get("IS_BROWSER")){(0,b.OB)().setPlatform("browser",new ye);try{ce.registerManager(ie.URL_SCHEME,new le)}catch(e){}try{ce.registerManager(X.URL_SCHEME,new K)}catch(e){}}let be;(0,b.OB)().get("IS_NODE")&&!(0,b.OB)().get("IS_BROWSER")&&(0,b.OB)().setPlatform("node",new class{constructor(){this.util=n(4240),this.textEncoder=new this.util.TextEncoder}fetch(e,t){return null!=(0,b.OB)().global.fetch?(0,b.OB)().global.fetch(e,t):(null==be&&(be=n(613)),be(e,t))}now(){const e=process.hrtime();return 1e3*e[0]+e[1]/1e6}encode(e,t){if("utf-8"!==t&&"utf8"!==t)throw new Error(`Node built-in encoder only supports utf-8, but got ${t}`);return this.textEncoder.encode(e)}decode(e,t){return 0===e.length?"":new this.util.TextDecoder(t).decode(e)}});var xe=n(3259),ve=n(9028),we=n(7676),ke=n(2042),Ie=n(9527);(0,d.wv)();const Se={buffer:xe.f,cast:ve.p,clone:we.d,print:ke.S};function Ne(e){return new Promise((e=>setTimeout(e))).then(e)}(0,Ie.Vp)(Se);class Te{constructor(e){if(!(0,b.OB)().getBool("IS_BROWSER"))throw new Error("browserDownloads() cannot proceed because the current environment is not a browser.");e.startsWith(Te.URL_SCHEME)&&(e=e.slice(Te.URL_SCHEME.length)),null!=e&&0!==e.length||(e="model"),this.modelJsonFileName=e+".json",this.weightDataFileName=e+".weights.bin"}async save(e){if("undefined"==typeof document)throw new Error("Browser downloads are not supported in this environment since `document` is not present");const t=window.URL.createObjectURL(new Blob([e.weightData],{type:"application/octet-stream"}));if(e.modelTopology instanceof ArrayBuffer)throw new Error("BrowserDownloads.save() does not support saving model topology in binary formats yet.");{const n=A(e,[{paths:["./"+this.weightDataFileName],weights:e.weightSpecs}]),s=window.URL.createObjectURL(new Blob([JSON.stringify(n)],{type:"application/json"})),a=null==this.modelJsonAnchor?document.createElement("a"):this.modelJsonAnchor;if(a.download=this.modelJsonFileName,a.href=s,await Ne((()=>a.dispatchEvent(new MouseEvent("click")))),null!=e.weightData){const e=null==this.weightDataAnchor?document.createElement("a"):this.weightDataAnchor;e.download=this.weightDataFileName,e.href=t,await Ne((()=>e.dispatchEvent(new MouseEvent("click"))))}return{modelArtifactsInfo:D(e)}}}}Te.URL_SCHEME="downloads://";class Ce{constructor(e){if(null==e||e.length<1)throw new Error(`When calling browserFiles, at least 1 file is required, but received ${e}`);this.jsonFile=e[0],this.weightsFiles=e.slice(1)}async load(){return new Promise(((e,t)=>{const n=new FileReader;n.onload=n=>{const s=JSON.parse(n.target.result),a=s.modelTopology;if(null==a)return void t(new Error(`modelTopology field is missing from file ${this.jsonFile.name}`));if(null==s.weightsManifest)return void t(new Error(`weightManifest field is missing from file ${this.jsonFile.name}`));if(0===this.weightsFiles.length)return void e({modelTopology:a});const r=F(s,(e=>this.loadWeights(e)));e(r)},n.onerror=e=>t(`Failed to read model topology and weights manifest JSON from file '${this.jsonFile.name}'. BrowserFiles supports loading Keras-style tf.Model artifacts only.`),n.readAsText(this.jsonFile)}))}loadWeights(e){const t=[],n=[];for(const s of e)t.push(...s.weights),n.push(...s.paths);const s=this.checkManifestAndWeightFiles(e),a=n.map((e=>this.loadWeightsFile(e,s[e])));return Promise.all(a).then((e=>[t,E(e)]))}loadWeightsFile(e,t){return new Promise(((n,s)=>{const a=new FileReader;a.onload=e=>{const t=e.target.result;n(t)},a.onerror=t=>s(`Failed to weights data from file of path '${e}'.`),a.readAsArrayBuffer(t)}))}checkManifestAndWeightFiles(e){const t=[],n=this.weightsFiles.map((e=>_(e.name))),s={};for(const a of e)a.paths.forEach((e=>{const a=_(e);if(-1!==t.indexOf(a))throw new Error(`Duplicate file basename found in weights manifest: '${a}'`);if(t.push(a),-1===n.indexOf(a))throw new Error(`Weight file with basename '${a}' is not provided.`);s[e]=this.weightsFiles[n.indexOf(a)]}));if(t.length!==this.weightsFiles.length)throw new Error(`Mismatch in the number of files in weights manifest (${t.length}) and the number of weight files provided (${this.weightsFiles.length}).`);return s}}function $e(e){return new Ce(e)}function Ee(e,t,n,s){!function(e){(0,k.hu)(null!=e&&Array.isArray(e)&&e.length>0,(()=>"promises must be a none empty array"))}(e),function(e,t){(0,k.hu)(e>=0&&e<=1,(()=>`Progress fraction must be in range [0, 1], but got startFraction ${e}`)),(0,k.hu)(t>=0&&t<=1,(()=>`Progress fraction must be in range [0, 1], but got endFraction ${t}`)),(0,k.hu)(t>=e,(()=>`startFraction must be no more than endFraction, but got startFraction ${e} and endFraction ${t}`))}(n=null==n?0:n,s=null==s?1:s);let a=0;return Promise.all(e.map((r=>(r.then((r=>{const i=n+ ++a/e.length*(s-n);return t(i),r})),r))))}async function _e(e,t){null==t&&(t={});const n=null==t.fetchFunc?(0,b.OB)().platform.fetch:t.fetchFunc,s=e.map((e=>n(e,t.requestInit,{isBinary:!0}))),a=(null==t.onProgress?await Promise.all(s):await Ee(s,t.onProgress,0,.5)).map((e=>e.arrayBuffer()));return null==t.onProgress?await Promise.all(a):await Ee(a,t.onProgress,.5,1)}async function Ae(e,t="",n,s){return Re((e=>_e(e,{requestInit:s})))(e,t,n)}function Re(e){return async(t,n="",s)=>{const a=t.map((()=>!1)),r={},i=null!=s?s.map((()=>!1)):[],o=[];if(t.forEach(((e,t)=>{let n=0;e.weights.forEach((e=>{const l="quantization"in e?e.quantization.dtype:e.dtype,u=I[l]*k.NA(e.shape),c=()=>{a[t]=!0,null==r[t]&&(r[t]=[]),r[t].push({manifestEntry:e,groupOffset:n,sizeBytes:u})};null!=s?s.forEach(((t,n)=>{t===e.name&&(c(),i[n]=!0)})):c(),o.push(e.name),n+=u}))})),!i.every((e=>e))){const e=s.filter(((e,t)=>!i[t]));throw new Error(`Could not find weights in manifest with names: ${e.join(", ")}. \nManifest JSON has weights with names: ${o.join(", ")}.`)}const l=a.reduce(((e,t,n)=>(t&&e.push(n),e)),[]),u=[];l.forEach((e=>{t[e].paths.forEach((e=>{const t=n+(n.endsWith("/")?"":"/")+e;u.push(t)}))}));const c=await e(u),h={};let p=0;return l.forEach((e=>{const n=t[e].paths.length;let s=0;for(let e=0;e<n;e++)s+=c[p+e].byteLength;const a=new ArrayBuffer(s),i=new Uint8Array(a);let o=0;for(let e=0;e<n;e++){const t=new Uint8Array(c[p+e]);i.set(t,o),o+=t.byteLength}r[e].forEach((e=>{const t=N(a.slice(e.groupOffset,e.groupOffset+e.sizeBytes),[e.manifestEntry]);for(const e in t)h[e]=t[e]})),p+=n})),h}}z.registerSaveRouter((e=>(0,b.OB)().getBool("IS_BROWSER")&&!Array.isArray(e)&&e.startsWith(Te.URL_SCHEME)?function(e="model"){return new Te(e)}(e.slice(Te.URL_SCHEME.length)):null));class Fe{constructor(e,t){if(this.DEFAULT_METHOD="POST",null==t&&(t={}),this.weightPathPrefix=t.weightPathPrefix,this.onProgress=t.onProgress,this.weightUrlConverter=t.weightUrlConverter,null!=t.fetchFunc?((0,k.hu)("function"==typeof t.fetchFunc,(()=>"Must pass a function that matches the signature of `fetch` (see https://developer.mozilla.org/en-US/docs/Web/API/Fetch_API)")),this.fetch=t.fetchFunc):this.fetch=(0,b.OB)().platform.fetch,(0,k.hu)(null!=e&&e.length>0,(()=>"URL path for http must not be null, undefined or empty.")),Array.isArray(e)&&(0,k.hu)(2===e.length,(()=>`URL paths for http must have a length of 2, (actual length is ${e.length}).`)),this.path=e,null!=t.requestInit&&null!=t.requestInit.body)throw new Error("requestInit is expected to have no pre-existing body, but has one.");this.requestInit=t.requestInit||{}}async save(e){if(e.modelTopology instanceof ArrayBuffer)throw new Error("BrowserHTTPRequest.save() does not support saving model topology in binary formats yet.");const t=Object.assign({method:this.DEFAULT_METHOD},this.requestInit);t.body=new FormData;const n=A(e,[{paths:["./model.weights.bin"],weights:e.weightSpecs}]);t.body.append("model.json",new Blob([JSON.stringify(n)],{type:"application/json"}),"model.json"),null!=e.weightData&&t.body.append("model.weights.bin",new Blob([e.weightData],{type:"application/octet-stream"}),"model.weights.bin");const s=await this.fetch(this.path,t);if(s.ok)return{modelArtifactsInfo:D(e),responses:[s]};throw new Error(`BrowserHTTPRequest.save() failed due to HTTP response status ${s.status}.`)}async load(){const e=await this.fetch(this.path,this.requestInit);if(!e.ok)throw new Error(`Request to ${this.path} failed with status code ${e.status}. Please verify this URL points to the model JSON of the model to load.`);let t;try{t=await e.json()}catch(e){let t=`Failed to parse model JSON of response from ${this.path}.`;throw this.path.endsWith(".pb")?t+=" Your path contains a .pb file extension. Support for .pb models have been removed in TensorFlow.js 1.0 in favor of .json models. You can re-convert your Python TensorFlow model using the TensorFlow.js 1.0 conversion scripts or you can convert your.pb models with the 'pb2json'NPM script in the tensorflow/tfjs-converter repository.":t+=" Please make sure the server is serving valid JSON for this request.",new Error(t)}const n=t.modelTopology,s=t.weightsManifest;if(null==n&&null==s)throw new Error(`The JSON from HTTP path ${this.path} contains neither model topology or manifest for weights.`);return F(t,(e=>this.loadWeights(e)))}async loadWeights(e){const t=Array.isArray(this.path)?this.path[1]:this.path,[n,s]=function(e){const t=e.lastIndexOf("/"),n=e.lastIndexOf("?");return[e.substring(0,t)+"/",n>t?e.substring(n):""]}(t),a=this.weightPathPrefix||n,r=O(e),i=[],o=[];for(const t of e)for(const e of t.paths)null!=this.weightUrlConverter?o.push(this.weightUrlConverter(e)):i.push(a+e+s);return this.weightUrlConverter&&i.push(...await Promise.all(o)),[r,E(await _e(i,{requestInit:this.requestInit,fetchFunc:this.fetch,onProgress:this.onProgress}))]}}function De(e){return null!=e.match(Fe.URL_SCHEME_REGEX)}Fe.URL_SCHEME_REGEX=/^https?:\/\//;const Oe=(e,t)=>{if("undefined"==typeof fetch&&(null==t||null==t.fetchFunc))return null;{let n=!0;if(n=Array.isArray(e)?e.every((e=>De(e))):De(e),n)return Me(e,t)}return null};function Me(e,t){return new Fe(e,t)}function ze(e,t){return Me(e,t)}z.registerSaveRouter(Oe),z.registerLoadRouter(Oe);class Le{constructor(e){this.modelArtifacts=e}load(){return this.modelArtifacts}}class Be{constructor(e){this.saveHandler=e}save(e){return this.saveHandler(e)}}class Pe{constructor(e){e.load&&(this.load=()=>Promise.resolve(e.load())),e.save&&(this.save=t=>Promise.resolve(e.save(t)))}}function Ve(e,t,n,s){const a=arguments;return new Pe(We(...a))}function We(e,t,n,s){return 1===arguments.length?null!=e.modelTopology||null!=e.weightSpecs?new Le(e):(console.warn("Please call tf.io.fromMemory() with only one argument. The argument should be of type ModelArtifacts. The multi-argument signature of tf.io.fromMemory() has been deprecated and will be removed in a future release."),new Le({modelTopology:e})):(console.warn("Please call tf.io.fromMemory() with only one argument. The argument should be of type ModelArtifacts. The multi-argument signature of tf.io.fromMemory() has been deprecated and will be removed in a future release."),new Le({modelTopology:e,weightSpecs:t,weightData:n,trainingConfig:s}))}function Ue(e){return new Be(e)}function Ge(e){return new Be(e)}var He=n(7641),qe=n(7962),Xe=n(1222),je=n(6519),Ke=n(6506);const Ye=(0,je.op)({confusionMatrix_:function(e,t,n){const s=(0,He._1)(e,"labels","confusionMatrix"),a=(0,He._1)(t,"predictions","confusionMatrix");k.hu(null==n||n>0&&Number.isInteger(n),(()=>`If provided, numClasses must be a positive integer, but got ${n}`)),k.hu(1===s.rank,(()=>`Expected the rank of labels to be 1, but got ${s.rank}`)),k.hu(1===a.rank,(()=>`Expected the rank of predictions to be 1, but got ${a.rank}`)),k.hu(s.shape[0]===a.shape[0],(()=>`Mismatch in the number of examples: ${s.shape[0]} vs. ${a.shape[0]}. Labels and predictions should have the same number of elements.`)),k.hu(n>0&&Number.isInteger(n),(()=>`numClasses is required to be a positive integer, but got ${n}`));const r=(0,Xe.l)((0,ve.p)(s,"int32"),n),i=(0,Xe.l)((0,ve.p)(a,"int32"),n),o=(0,Ke.p)(r),l=(0,qe.O)(o,i);return(0,ve.p)(l,"int32")}});var Ze=n(6501),Qe=n(574),Je=n(1675),et=n(1417);let tt;function nt(e,t=3){if(t>4)throw new Error("Cannot construct Tensor with more than 4 channels from pixels.");if(null==e)throw new Error("pixels passed to tf.browser.fromPixels() can not be null");let n=!1,s=!1,a=!1,r=!1,i=!1,o=!1;if(e.data instanceof Uint8Array)n=!0;else if("undefined"!=typeof ImageData&&e instanceof ImageData)s=!0;else if("undefined"!=typeof HTMLVideoElement&&e instanceof HTMLVideoElement)a=!0;else if("undefined"!=typeof HTMLImageElement&&e instanceof HTMLImageElement)r=!0;else if(null!=e.getContext)i=!0;else{if(!("undefined"!=typeof ImageBitmap&&e instanceof ImageBitmap))throw new Error(`pixels passed to tf.browser.fromPixels() must be either an HTMLVideoElement, HTMLImageElement, HTMLCanvasElement, ImageData in browser, or OffscreenCanvas, ImageData in webworker or {data: Uint32Array, width: number, height: number}, but was ${e.constructor.name}`);o=!0}if(null!=(0,Je.pI)(Qe.eBW,d.BV.backendName)){const n={pixels:e},s={numChannels:t};return d.BV.runKernel(Qe.eBW,n,s)}const[l,u]=a?[e.videoWidth,e.videoHeight]:[e.width,e.height];let c,h;if(i)c=e.getContext("2d").getImageData(0,0,l,u).data;else if(s||n)c=e.data;else if(r||a||o){if(null==tt)if("undefined"==typeof document){if("undefined"==typeof OffscreenCanvas||"undefined"==typeof OffscreenCanvasRenderingContext2D)throw new Error("Cannot parse input in current context. Reason: OffscreenCanvas Context2D rendering is not supported.");tt=new OffscreenCanvas(1,1).getContext("2d")}else tt=document.createElement("canvas").getContext("2d",{willReadFrequently:!0});tt.canvas.width=l,tt.canvas.height=u,tt.drawImage(e,0,0,l,u),c=tt.getImageData(0,0,l,u).data}if(4===t)h=new Int32Array(c);else{const e=l*u;h=new Int32Array(e*t);for(let n=0;n<e;n++)for(let e=0;e<t;++e)h[n*t+e]=c[4*n+e]}const p=[u,l,t];return(0,et.w)(h,p,"int32")}async function st(e,t=3){let n=null;if((0,b.OB)().getBool("WRAP_TO_IMAGEBITMAP")&&function(e){return"undefined"!=typeof window&&"undefined"!=typeof ImageBitmap&&window.hasOwnProperty("createImageBitmap")&&!(e instanceof ImageBitmap)&&function(e){return null!=e&&0!==e.width&&0!==e.height}(e)&&!function(e){return null!=e&&e.data instanceof Uint8Array}(e)}(e)){let t;try{t=await createImageBitmap(e,{premultiplyAlpha:"none"})}catch(e){t=null}n=null!=t&&t.width===e.width&&t.height===e.height?t:e}else n=e;return nt(n,t)}async function at(e,t){let n=(0,He._1)(e,"img","toPixels");if(!(e instanceof Ie.es)){const e=n;n=(0,ve.p)(e,"int32"),e.dispose()}if(2!==n.rank&&3!==n.rank)throw new Error(`toPixels only supports rank 2 or 3 tensors, got rank ${n.rank}.`);const[s,a]=n.shape.slice(0,2),r=2===n.rank?1:n.shape[2];if(r>4||2===r)throw new Error(`toPixels only supports depth of size 1, 3 or 4 but got ${r}`);if("float32"!==n.dtype&&"int32"!==n.dtype)throw new Error(`Unsupported type for toPixels: ${n.dtype}. Please use float32 or int32 tensors.`);const i=await n.data(),o="float32"===n.dtype?255:1,l=new Uint8ClampedArray(a*s*4);for(let e=0;e<s*a;++e){const t=[0,0,0,255];for(let s=0;s<r;s++){const a=i[e*r+s];if("float32"===n.dtype){if(a<0||a>1)throw new Error(`Tensor values for a float32 Tensor must be in the range [0 - 1] but encountered ${a}.`)}else if("int32"===n.dtype&&(a<0||a>255))throw new Error(`Tensor values for a int32 Tensor must be in the range [0 - 255] but encountered ${a}.`);1===r?(t[0]=a*o,t[1]=a*o,t[2]=a*o):t[s]=a*o}const s=4*e;l[s+0]=Math.round(t[0]),l[s+1]=Math.round(t[1]),l[s+2]=Math.round(t[2]),l[s+3]=Math.round(t[3])}if(null!=t){t.width=a,t.height=s;const e=t.getContext("2d"),n=new ImageData(l,a,s);e.putImageData(n,0,0)}return n!==e&&n.dispose(),l}const rt=(0,je.op)({fromPixels_:nt});function it(e,t){const n=e.shape.length,s=t.shape.length;if(n<1)throw new Error(`tf.gatherND() expects the input to be rank 1 or higher, but the rank was ${n}.`);if(s<1)throw new Error(`tf.gatherND() expects the indices to be rank 1 or higher, but the rank was ${s}.`);if("int32"!==t.dtype)throw new Error(`tf.gatherND() expects the indices to be int32 type, but the dtype was ${t.dtype}.`);if(t.shape[s-1]>n)throw new Error(`index innermost dimension length must be <= tensor rank; saw: ${t.shape[s-1]} vs. ${n}`);if(0===(0,k.NA)(e.shape))throw new Error(`Requested more than 0 entries, but input is empty. Input shape: ${e.shape}.`);const a=t.shape,r=a[a.length-1];let i=1;for(let e=0;e<a.length-1;++e)i*=a[e];const o=e.shape,l=a.slice();l.pop();let u=1;for(let e=r;e<n;++e)u*=o[e],l.push(o[e]);const c=[...(0,k.e3)(e.shape).map((e=>e/u)),1].slice(0,r);return[l,i,u,c]}var ot=n(6556),lt=n(4700);class ut{getClassName(){return this.constructor.className}static fromConfig(e,t){return new e(t)}}class ct{constructor(){this.classNameMap={}}static getMap(){return null==ct.instance&&(ct.instance=new ct),ct.instance}static register(e){ct.getMap().classNameMap[e.className]=[e,e.fromConfig]}}function ht(e){(0,k.hu)(null!=e.className,(()=>"Class being registered does not have the static className property defined.")),(0,k.hu)("string"==typeof e.className,(()=>"className is required to be a string, but got type "+typeof e.className)),(0,k.hu)(e.className.length>0,(()=>"Class being registered has an empty-string as its className, which is disallowed.")),ct.register(e)}var pt=n(9932),dt=n(1180);const ft=.1;function mt(e,t,n){return null==n&&(n=gt()),yt(e,t,((e,t)=>wt(e,t,n)))}function gt(){return 32===d.BV.backend.floatPrecision()?.001:ft}function yt(e,t,n){let s=!0;if(((0,k.fU)(e)||(0,k.fU)(t))&&(s=!1),(0,k.fU)(e)&&(0,k.fU)(t)&&(s=!0),s){const n=e.constructor.name,s=t.constructor.name;if(n!==s)throw new Error(`Arrays are of different type. Actual: ${n}. Expected: ${s}`)}if(Array.isArray(e)&&Array.isArray(t)){const n=(0,He.C)(e),s=(0,He.C)(t);if(!(0,k.cO)(n,s))throw new Error(`Arrays have different shapes. Actual: [${n}]. Expected: [${s}]`)}const a=(0,k.fU)(e)?e:(0,k.xH)(e),r=(0,k.fU)(t)?t:(0,k.xH)(t);if(a.length!==r.length)throw new Error(`Arrays have different lengths actual: ${a.length} vs expected: ${r.length}.\nActual:   ${a}.\nExpected: ${r}.`);for(let e=0;e<r.length;++e){const t=a[e],s=r[e];if(!n(t,s))throw new Error(`Arrays differ: actual[${e}] = ${t}, expected[${e}] = ${s}.\nActual:   ${a}.\nExpected: ${r}.`)}"undefined"!=typeof expect&&expect().nothing()}function bt(e,t){e().then((()=>t.fail()),(()=>t())),"undefined"!=typeof expect&&expect().nothing()}function xt(e,t){const n="string"==typeof t||"number"==typeof t||"boolean"==typeof t?[t]:t;return(0,k.HD)(e)||(0,k.HD)(e[0])||(0,k.HD)(t)||(0,k.HD)(t[0])?yt(e,n,((e,t)=>e==t)):yt(e,t,((e,t)=>wt(e,t,0)))}function vt(e,t,n){if(null==n&&(n=gt()),!wt(e,t,n))throw new Error(`Numbers differ: actual === ${e}, expected === ${t}`);"undefined"!=typeof expect&&expect().nothing()}function wt(e,t,n){return!isFinite(e)&&!isFinite(t)||!(isNaN(e)||isNaN(t)||Math.abs(e-t)>n)}function kt(e,t,n){for(let s=0;s<e.length;s++)if(e[s]<t||e[s]>n)throw new Error(`Value out of range:${e[s]} low: ${t}, high: ${n}`)}function It(e,t){const n=new Float32Array(e),s=new Float32Array(t);if(n.length!==s.length)throw new Error(`Expected ArrayBuffer to be of length ${s.length}, but it was ${n.length}`);for(let e=0;e<s.length;e++)if(n[e]!==s[e])throw new Error(`Expected ArrayBuffer value at ${e} to be ${s[e]} but got ${n[e]} instead`)}function St(e){for(let t=0;t<e.length;t++){const n=e[t];Array.isArray(n)?St(n):e[t]=(0,dt.encodeString)(n)}return e}function Nt(e){const t=document.createElement("video");return"playsInline"in t&&(t.playsInline=!0),t.muted=!0,t.loop=!0,t.style.position="fixed",t.style.left="0px",t.style.top="0px",t.preload="auto",t.appendChild(e),new Promise((e=>{t.addEventListener("loadeddata",(n=>e(t))),t.load()}))}async function Tt(e){await e.play(),"requestVideoFrameCallback"in e&&await new Promise((t=>{e.requestVideoFrameCallback(t)}))}const Ct="3.21.0";var $t=n(3381),Et=n(7862),_t=n(7232),At=n(5183),Rt=n(2402),Ft=n(3061),Dt=n(1181),Ot=n(6537),Mt=n(503);class zt extends ut{minimize(e,t=!1,n){const{value:s,grads:a}=this.computeGradients(e,n);if(null!=n){const e=n.map((e=>({name:e.name,tensor:a[e.name]})));this.applyGradients(e)}else this.applyGradients(a);return(0,$t.B9)(a),t?s:(s.dispose(),null)}get iterations(){return null==this.iterations_&&(this.iterations_=0),this.iterations_}incrementIterations(){this.iterations_=this.iterations+1}computeGradients(e,t){return(0,Ot.pn)(e,t)}dispose(){null!=this.iterations_&&(0,$t.B9)(this.iterations_)}async saveIterations(){return null==this.iterations_&&(this.iterations_=0),{name:"iter",tensor:(0,Mt.i)(this.iterations_,"int32")}}async getWeights(){throw new Error("getWeights() is not implemented for this optimizer yet.")}async setWeights(e){throw new Error(`setWeights() is not implemented for this optimizer class ${this.getClassName()}`)}async extractIterations(e){return this.iterations_=(await e[0].tensor.data())[0],e.slice(1)}}Object.defineProperty(zt,Symbol.hasInstance,{value:e=>null!=e.minimize&&null!=e.computeGradients&&null!=e.applyGradients});class Lt extends zt{constructor(e,t,n=null){super(),this.learningRate=e,this.rho=t,this.epsilon=n,this.accumulatedGrads=[],this.accumulatedUpdates=[],null==n&&(this.epsilon=d.BV.backend.epsilon())}applyGradients(e){(Array.isArray(e)?e.map((e=>e.name)):Object.keys(e)).forEach(((t,n)=>{const s=d.BV.registeredVariables[t];null==this.accumulatedGrads[n]&&(this.accumulatedGrads[n]={originalName:`${t}/accum_grad`,variable:(0,$t.lu)((()=>(0,Dt.P)(s).variable(!1)))}),null==this.accumulatedUpdates[n]&&(this.accumulatedUpdates[n]={originalName:`${t}/accum_var`,variable:(0,$t.lu)((()=>(0,Dt.P)(s).variable(!1)))});const a=Array.isArray(e)?e[n].tensor:e[t];if(null==a)return;const r=this.accumulatedGrads[n].variable,i=this.accumulatedUpdates[n].variable;(0,$t.lu)((()=>{const e=(0,Et.I)((0,At.d)(r,this.rho),(0,At.d)((0,Ft.h)(a),1-this.rho)),t=(0,At.d)((0,_t.h)((0,Rt._)((0,Et.I)(i,this.epsilon)),(0,Rt._)((0,Et.I)(r,this.epsilon))),a),n=(0,Et.I)((0,At.d)(i,this.rho),(0,At.d)((0,Ft.h)(t),1-this.rho));r.assign(e),i.assign(n);const o=(0,Et.I)((0,At.d)(t,-this.learningRate),s);s.assign(o)}))})),this.incrementIterations()}dispose(){null!=this.accumulatedUpdates&&((0,$t.B9)(this.accumulatedGrads.map((e=>e.variable))),(0,$t.B9)(this.accumulatedUpdates.map((e=>e.variable))))}async getWeights(){const e=[...this.accumulatedGrads,...this.accumulatedUpdates];return[await this.saveIterations()].concat(e.map((e=>({name:e.originalName,tensor:e.variable}))))}async setWeights(e){const t=(e=await this.extractIterations(e)).length/2;this.accumulatedGrads=e.slice(0,t).map((e=>({originalName:e.name,variable:e.tensor.variable(!1)}))),this.accumulatedUpdates=e.slice(t,2*t).map((e=>({originalName:e.name,variable:e.tensor.variable(!1)})))}getConfig(){return{learningRate:this.learningRate,rho:this.rho,epsilon:this.epsilon}}static fromConfig(e,t){return new e(t.learningRate,t.rho,t.epsilon)}}Lt.className="Adadelta",ht(Lt);var Bt=n(5321);class Pt extends zt{constructor(e,t=.1){super(),this.learningRate=e,this.initialAccumulatorValue=t,this.accumulatedGrads=[]}applyGradients(e){(Array.isArray(e)?e.map((e=>e.name)):Object.keys(e)).forEach(((t,n)=>{const s=d.BV.registeredVariables[t];if(null==this.accumulatedGrads[n]){const e=!1;this.accumulatedGrads[n]={originalName:`${t}/accumulator`,variable:(0,$t.lu)((()=>(0,Bt.h)(s.shape,this.initialAccumulatorValue).variable(e)))}}const a=Array.isArray(e)?e[n].tensor:e[t];if(null==a)return;const r=this.accumulatedGrads[n].variable;(0,$t.lu)((()=>{const e=(0,Et.I)(r,(0,Ft.h)(a));r.assign(e);const t=(0,Et.I)((0,At.d)((0,_t.h)(a,(0,Rt._)((0,Et.I)(e,d.BV.backend.epsilon()))),-this.learningRate),s);s.assign(t)}))})),this.incrementIterations()}dispose(){null!=this.accumulatedGrads&&(0,$t.B9)(this.accumulatedGrads.map((e=>e.variable)))}async getWeights(){return[await this.saveIterations()].concat(this.accumulatedGrads.map((e=>({name:e.originalName,tensor:e.variable}))))}async setWeights(e){e=await this.extractIterations(e),this.accumulatedGrads=e.map((e=>({originalName:e.name,variable:e.tensor.variable(!1)})))}getConfig(){return{learningRate:this.learningRate,initialAccumulatorValue:this.initialAccumulatorValue}}static fromConfig(e,t){return new e(t.learningRate,t.initialAccumulatorValue)}}Pt.className="Adagrad",ht(Pt);var Vt=n(1483),Wt=n(3189);class Ut extends zt{constructor(e,t,n,s=null){super(),this.learningRate=e,this.beta1=t,this.beta2=n,this.epsilon=s,this.accumulatedFirstMoment=[],this.accumulatedSecondMoment=[],(0,$t.lu)((()=>{this.accBeta1=(0,Mt.i)(t).variable(),this.accBeta2=(0,Mt.i)(n).variable()})),null==s&&(this.epsilon=d.BV.backend.epsilon())}applyGradients(e){const t=Array.isArray(e)?e.map((e=>e.name)):Object.keys(e);(0,$t.lu)((()=>{const n=(0,Wt.l)(1,this.accBeta1),s=(0,Wt.l)(1,this.accBeta2);t.forEach(((t,a)=>{const r=d.BV.registeredVariables[t];null==this.accumulatedFirstMoment[a]&&(this.accumulatedFirstMoment[a]={originalName:`${t}/m`,variable:(0,$t.lu)((()=>(0,Dt.P)(r).variable(!1)))}),null==this.accumulatedSecondMoment[a]&&(this.accumulatedSecondMoment[a]={originalName:`${t}/v`,variable:(0,$t.lu)((()=>(0,Dt.P)(r).variable(!1)))});const i=Array.isArray(e)?e[a].tensor:e[t];if(null==i)return;const o=this.accumulatedFirstMoment[a].variable,l=this.accumulatedSecondMoment[a].variable,u=(0,Et.I)((0,At.d)(o,this.beta1),(0,At.d)(i,1-this.beta1)),c=(0,Et.I)((0,At.d)(l,this.beta2),(0,At.d)((0,Ft.h)(i),1-this.beta2)),h=(0,_t.h)(u,n),p=(0,_t.h)(c,s);o.assign(u),l.assign(c);const f=(0,Et.I)((0,At.d)((0,_t.h)(h,(0,Et.I)((0,Rt._)(p),this.epsilon)),-this.learningRate),r);r.assign(f)})),this.accBeta1.assign((0,At.d)(this.accBeta1,this.beta1)),this.accBeta2.assign((0,At.d)(this.accBeta2,this.beta2))})),this.incrementIterations()}dispose(){this.accBeta1.dispose(),this.accBeta2.dispose(),null!=this.accumulatedFirstMoment&&(0,$t.B9)(this.accumulatedFirstMoment.map((e=>e.variable))),null!=this.accumulatedSecondMoment&&(0,$t.B9)(this.accumulatedSecondMoment.map((e=>e.variable)))}async getWeights(){const e=[...this.accumulatedFirstMoment,...this.accumulatedSecondMoment];return[await this.saveIterations()].concat(e.map((e=>({name:e.originalName,tensor:e.variable}))))}async setWeights(e){e=await this.extractIterations(e),(0,$t.lu)((()=>{this.accBeta1.assign((0,Vt.s)(this.beta1,this.iterations_+1)),this.accBeta2.assign((0,Vt.s)(this.beta2,this.iterations_+1))}));const t=e.length/2;this.accumulatedFirstMoment=e.slice(0,t).map((e=>({originalName:e.name,variable:e.tensor.variable(!1)}))),this.accumulatedSecondMoment=e.slice(t,2*t).map((e=>({originalName:e.name,variable:e.tensor.variable(!1)})))}getConfig(){return{learningRate:this.learningRate,beta1:this.beta1,beta2:this.beta2,epsilon:this.epsilon}}static fromConfig(e,t){return new e(t.learningRate,t.beta1,t.beta2,t.epsilon)}}Ut.className="Adam",ht(Ut);var Gt=n(9938),Ht=n(4734);class qt extends zt{constructor(e,t,n,s=null,a=0){super(),this.learningRate=e,this.beta1=t,this.beta2=n,this.epsilon=s,this.decay=a,this.accumulatedFirstMoment=[],this.accumulatedWeightedInfNorm=[],(0,$t.lu)((()=>{this.iteration=(0,Mt.i)(0).variable(),this.accBeta1=(0,Mt.i)(t).variable()})),null==s&&(this.epsilon=d.BV.backend.epsilon())}applyGradients(e){const t=Array.isArray(e)?e.map((e=>e.name)):Object.keys(e);(0,$t.lu)((()=>{const n=(0,Wt.l)(1,this.accBeta1),s=(0,_t.h)(-this.learningRate,(0,Et.I)((0,At.d)(this.iteration,this.decay),1));t.forEach(((t,a)=>{const r=d.BV.registeredVariables[t];null==this.accumulatedFirstMoment[a]&&(this.accumulatedFirstMoment[a]={originalName:`${t}/m`,variable:(0,Dt.P)(r).variable(!1)}),null==this.accumulatedWeightedInfNorm[a]&&(this.accumulatedWeightedInfNorm[a]={originalName:`${t}/v`,variable:(0,Dt.P)(r).variable(!1)});const i=Array.isArray(e)?e[a].tensor:e[t];if(null==i)return;const o=this.accumulatedFirstMoment[a].variable,l=this.accumulatedWeightedInfNorm[a].variable,u=(0,Et.I)((0,At.d)(o,this.beta1),(0,At.d)(i,1-this.beta1)),c=(0,At.d)(l,this.beta2),h=(0,Gt.W)(i),p=(0,Ht.g)(c,h);o.assign(u),l.assign(p);const f=(0,Et.I)((0,At.d)((0,_t.h)(s,n),(0,_t.h)(u,(0,Et.I)(p,this.epsilon))),r);r.assign(f)})),this.iteration.assign((0,Et.I)(this.iteration,1)),this.accBeta1.assign((0,At.d)(this.accBeta1,this.beta1))})),this.incrementIterations()}dispose(){this.accBeta1.dispose(),this.iteration.dispose(),null!=this.accumulatedFirstMoment&&(0,$t.B9)(this.accumulatedFirstMoment.map((e=>e.variable))),null!=this.accumulatedWeightedInfNorm&&(0,$t.B9)(this.accumulatedWeightedInfNorm.map((e=>e.variable)))}async getWeights(){throw new Error("getWeights() is not implemented for Adamax yet.")}async setWeights(e){throw new Error("setWeights() is not implemented for Adamax yet.")}getConfig(){return{learningRate:this.learningRate,beta1:this.beta1,beta2:this.beta2,epsilon:this.epsilon,decay:this.decay}}static fromConfig(e,t){return new e(t.learningRate,t.beta1,t.beta2,t.epsilon,t.decay)}}qt.className="Adamax",ht(qt);class Xt extends zt{constructor(e){super(),this.learningRate=e,this.setLearningRate(e)}applyGradients(e){(Array.isArray(e)?e.map((e=>e.name)):Object.keys(e)).forEach(((t,n)=>{const s=Array.isArray(e)?e[n].tensor:e[t];if(null==s)return;const a=d.BV.registeredVariables[t];(0,$t.lu)((()=>{const e=(0,Et.I)((0,At.d)(this.c,s),a);a.assign(e)}))})),this.incrementIterations()}setLearningRate(e){this.learningRate=e,null!=this.c&&this.c.dispose(),this.c=(0,$t.Cn)((0,Mt.i)(-e))}dispose(){this.c.dispose()}async getWeights(){return[await this.saveIterations()]}async setWeights(e){if(0!==(e=await this.extractIterations(e)).length)throw new Error("SGD optimizer does not have settable weights.")}getConfig(){return{learningRate:this.learningRate}}static fromConfig(e,t){return new e(t.learningRate)}}Xt.className="SGD",ht(Xt);class jt extends Xt{constructor(e,t,n=!1){super(e),this.learningRate=e,this.momentum=t,this.useNesterov=n,this.accumulations=[],this.m=(0,Mt.i)(this.momentum)}applyGradients(e){(Array.isArray(e)?e.map((e=>e.name)):Object.keys(e)).forEach(((t,n)=>{const s=d.BV.registeredVariables[t];if(null==this.accumulations[n]){const e=!1;this.accumulations[n]={originalName:`${t}/momentum`,variable:(0,$t.lu)((()=>(0,Dt.P)(s).variable(e)))}}const a=this.accumulations[n].variable,r=Array.isArray(e)?e[n].tensor:e[t];null!=r&&(0,$t.lu)((()=>{let e;const t=(0,Et.I)((0,At.d)(this.m,a),r);e=this.useNesterov?(0,Et.I)((0,At.d)(this.c,(0,Et.I)(r,(0,At.d)(t,this.m))),s):(0,Et.I)((0,At.d)(this.c,t),s),a.assign(t),s.assign(e)}))})),this.incrementIterations()}dispose(){this.m.dispose(),null!=this.accumulations&&(0,$t.B9)(this.accumulations.map((e=>e.variable)))}setMomentum(e){this.momentum=e}async getWeights(){return[await this.saveIterations()].concat(this.accumulations.map((e=>({name:e.originalName,tensor:e.variable}))))}async setWeights(e){e=await this.extractIterations(e),this.accumulations=e.map((e=>({originalName:e.name,variable:e.tensor.variable(!1)})))}getConfig(){return{learningRate:this.learningRate,momentum:this.momentum,useNesterov:this.useNesterov}}static fromConfig(e,t){return new e(t.learningRate,t.momentum,t.useNesterov)}}jt.className="Momentum",ht(jt);class Kt extends zt{constructor(e,t=.9,n=0,s=null,a=!1){if(super(),this.learningRate=e,this.decay=t,this.momentum=n,this.epsilon=s,this.accumulatedMeanSquares=[],this.accumulatedMoments=[],this.accumulatedMeanGrads=[],this.centered=a,null==s&&(this.epsilon=d.BV.backend.epsilon()),null==e)throw new Error("learningRate for RMSPropOptimizer must be defined.")}applyGradients(e){(Array.isArray(e)?e.map((e=>e.name)):Object.keys(e)).forEach(((t,n)=>{const s=d.BV.registeredVariables[t],a=!1;null==this.accumulatedMeanSquares[n]&&(this.accumulatedMeanSquares[n]={originalName:`${t}/rms`,variable:(0,$t.lu)((()=>(0,Dt.P)(s).variable(a)))}),null==this.accumulatedMoments[n]&&(this.accumulatedMoments[n]={originalName:`${t}/momentum`,variable:(0,$t.lu)((()=>(0,Dt.P)(s).variable(a)))}),null==this.accumulatedMeanGrads[n]&&this.centered&&(this.accumulatedMeanGrads[n]={originalName:`${t}/mg`,variable:(0,$t.lu)((()=>(0,Dt.P)(s).variable(a)))});const r=Array.isArray(e)?e[n].tensor:e[t];if(null==r)return;const i=this.accumulatedMeanSquares[n].variable,o=this.accumulatedMoments[n].variable;(0,$t.lu)((()=>{const e=(0,Et.I)((0,At.d)(i,this.decay),(0,At.d)((0,Ft.h)(r),1-this.decay));if(this.centered){const t=this.accumulatedMeanGrads[n].variable,a=(0,Et.I)((0,At.d)(t,this.decay),(0,At.d)(r,1-this.decay)),l=(0,_t.h)((0,At.d)(r,this.learningRate),(0,Rt._)((0,Wt.l)(e,(0,Et.I)((0,Ft.h)(a),this.epsilon)))),u=(0,Et.I)((0,At.d)(o,this.momentum),l);i.assign(e),t.assign(a),o.assign(u);const c=(0,Wt.l)(s,u);s.assign(c)}else{const e=(0,Et.I)((0,At.d)(i,this.decay),(0,At.d)((0,Ft.h)(r),1-this.decay)),t=(0,Et.I)((0,At.d)(o,this.momentum),(0,_t.h)((0,At.d)(r,this.learningRate),(0,Rt._)((0,Et.I)(e,this.epsilon))));i.assign(e),o.assign(t);const n=(0,Wt.l)(s,t);s.assign(n)}}))})),this.incrementIterations()}dispose(){null!=this.accumulatedMeanSquares&&(0,$t.B9)(this.accumulatedMeanSquares.map((e=>e.variable))),null!=this.accumulatedMeanGrads&&this.centered&&(0,$t.B9)(this.accumulatedMeanGrads.map((e=>e.variable))),null!=this.accumulatedMoments&&(0,$t.B9)(this.accumulatedMoments.map((e=>e.variable)))}async getWeights(){const e=[...this.accumulatedMeanSquares,...this.accumulatedMoments];return this.centered&&e.push(...this.accumulatedMeanGrads),[await this.saveIterations()].concat(e.map((e=>({name:e.originalName,tensor:e.variable}))))}async setWeights(e){e=await this.extractIterations(e);const t=this.centered?e.length/3:e.length/2,n=!1;this.accumulatedMeanSquares=e.slice(0,t).map((e=>({originalName:e.name,variable:e.tensor.variable(n)}))),this.accumulatedMoments=e.slice(t,2*t).map((e=>({originalName:e.name,variable:e.tensor.variable(n)}))),this.centered&&(this.accumulatedMeanGrads=e.slice(2*t,3*t).map((e=>({originalName:e.name,variable:e.tensor.variable(n)}))))}getConfig(){return{learningRate:this.learningRate,decay:this.decay,momentum:this.momentum,epsilon:this.epsilon,centered:this.centered}}static fromConfig(e,t){return new e(t.learningRate,t.decay,t.momentum,t.epsilon,t.centered)}}Kt.className="RMSProp",ht(Kt);class Yt{static sgd(e){return new Xt(e)}static momentum(e,t,n=!1){return new jt(e,t,n)}static rmsprop(e,t=.9,n=0,s=null,a=!1){return new Kt(e,t,n,s,a)}static adam(e=.001,t=.9,n=.999,s=null){return new Ut(e,t,n,s)}static adadelta(e=.001,t=.95,n=null){return new Lt(e,t,n)}static adamax(e=.002,t=.9,n=.999,s=null,a=0){return new qt(e,t,n,s,a)}static adagrad(e,t=.1){return new Pt(e,t)}}var Zt=n(759),Qt=n(4689),Jt=n(227);const en={sgd:Yt.sgd,momentum:Yt.momentum,adadelta:Yt.adadelta,adagrad:Yt.adagrad,rmsprop:Yt.rmsprop,adamax:Yt.adamax,adam:Yt.adam},tn="undefined"!=typeof requestAnimationFrame?requestAnimationFrame:"undefined"!=typeof setImmediate?setImmediate:e=>e();function nn(){return new Promise((e=>tn((()=>e()))))}var sn=n(1878);function an(e,t){const n=e[0].length;e.forEach(((e,t)=>{k.hu(e.length===n,(()=>`Error in concat${n}D: rank of tensors[${t}] must be the same as the rank of the rest (${n})`))})),k.hu(t>=0&&t<n,(()=>`Error in concat${n}D: axis must be between 0 and ${n-1}.`));const s=e[0];e.forEach(((e,a)=>{for(let r=0;r<n;r++)k.hu(r===t||e[r]===s[r],(()=>`Error in concat${n}D: Shape of tensors[${a}] (${e}) does not match the shape of the rest (${s}) along the non-concatenated axis ${a}.`))}))}function rn(e,t){const n=e[0].slice();for(let s=1;s<e.length;s++)n[t]+=e[s][t];return n}var on,ln=n(4397),un=n(4324);function cn(e,t,n){let s=new Array;if(null==n&&null==t)return s;if(null==t)for(;s.length<e+n.length;)s.push(-1);else s=t.slice();if(null==n)return s;if(e+n.length!==s.length)throw new Error(`rt input.shape and shape=${t} are incompatible: rt input.rank = ${e+n.length}, but shape.rank = ${s.length}`);for(let a=1;a<n.length;++a){const r=n[a],i=s[s.length-n.length+a],o=s[i];if(r>=0)if(o>=0){if(o!==r)throw new Error(`rt input.shape and shape=${t} are incompatible: rt input.shape[${a+e}] = ${r} but shape[${a+e}] = ${o}`)}else s[i]=r}return s}function hn(e){const t={FIRST_DIM_SIZE:on.FIRST_DIM_SIZE,VALUE_ROWIDS:on.VALUE_ROWIDS,ROW_LENGTHS:on.ROW_LENGTHS,ROW_SPLITS:on.ROW_SPLITS,ROW_LIMITS:on.ROW_LIMITS,ROW_STARTS:on.ROW_STARTS},n=[];for(const s of e){if(!(s in t))break;n.push(t[s])}return n}function pn(e){return 0===e.length?0:e[0]===on.FIRST_DIM_SIZE?e.length-1:e.length}function dn(e,t){if(null==e||null==t)return;const n=e.length,s=t.length;if(n>=s)throw new Error(`defaultValue.shape=${e} and ragged tensor flatValues.shape=${t}, are incompatible: defaultValue.rank = ${n} must be less than ragged tensor input flatValues.rank = ${s})`);for(let a=0;a<Math.min(n,s-1);++a){const n=e[a],s=t[a+1];if(n>=0&&s>=0&&1!==n&&n!==s)throw new Error(`defaultValue.shape=${e}, and ragged tensor input flatValues.shape=${t} are incompatible: defaultValue.shape[${a-e.length}] = ${n} but ragged tensor input.flatValues.shape[${a-e.length}] = ${s}`)}}!function(e){e[e.FIRST_DIM_SIZE=0]="FIRST_DIM_SIZE",e[e.VALUE_ROWIDS=1]="VALUE_ROWIDS",e[e.ROW_LENGTHS=2]="ROW_LENGTHS",e[e.ROW_SPLITS=3]="ROW_SPLITS",e[e.ROW_LIMITS=4]="ROW_LIMITS",e[e.ROW_STARTS=5]="ROW_STARTS"}(on||(on={}));const fn=30;function mn(e){return e<=fn?e:(0,k.jP)(e,Math.floor(Math.sqrt(e)))}function gn(e,t,n){return[n*("number"==typeof e?e:e[0]),t*("number"==typeof e?e:e[1])]}function yn(e,t,n,s=!0){let a=[];if(s)a=a.concat(t.slice(0)),a.push(e[0]/n),a=a.concat(e.slice(1));else{a=a.concat(e[0]);const n=t.length;for(let s=0;s<n;++s)a=a.concat([e[s+1]/t[s],t[s]]);a=a.concat(e.slice(n+1))}return a}function bn(e,t,n=!0){const s=[];if(n){s.push(t);for(let n=t+1;n<e;++n)n<=2*t?(s.push(n),s.push(n-(t+1))):s.push(n)}else{const n=[],a=[];for(let s=1;s<e;++s)s>=2*t+1||s%2==1?a.push(s):n.push(s);s.push(...n),s.push(0),s.push(...a)}return s}function xn(e,t,n,s=!0){const a=[];s?a.push(e[0]/n):a.push(e[0]*n);for(let n=1;n<e.length;++n)n<=t.length?s?a.push(t[n-1]*e[n]):a.push(e[n]/t[n-1]):a.push(e[n]);return a}function vn(e,t){const n=[0];for(let s=0;s<t;++s)n.push(e[s][0]);return n}function wn(e,t,n){const s=e.slice(0,1);for(let a=0;a<n;++a)s.push(e[a+1]-t[a][0]-t[a][1]);return s}var kn=n(3952);const In=.3275911,Sn=.254829592,Nn=-.284496736,Tn=1.421413741,Cn=-1.453152027,$n=1.061405429;var En=n(1592);function _n(e,t){if(e.length!==t.length)throw new Error(`Cannot merge real and imag arrays of different lengths. real:${e.length}, imag: ${t.length}.`);const n=new Float32Array(2*e.length);for(let s=0;s<n.length;s+=2)n[s]=e[s/2],n[s+1]=t[s/2];return n}function An(e){const t=new Float32Array(e.length/2),n=new Float32Array(e.length/2);for(let s=0;s<e.length;s+=2)t[s/2]=e[s],n[s/2]=e[s+1];return{real:t,imag:n}}function Rn(e){const t=Math.ceil(e.length/4),n=new Float32Array(t),s=new Float32Array(t);for(let t=0;t<e.length;t+=4)n[Math.floor(t/4)]=e[t],s[Math.floor(t/4)]=e[t+1];return{real:n,imag:s}}function Fn(e){const t=Math.floor(e.length/4),n=new Float32Array(t),s=new Float32Array(t);for(let t=2;t<e.length;t+=4)n[Math.floor(t/4)]=e[t],s[Math.floor(t/4)]=e[t+1];return{real:n,imag:s}}function Dn(e,t){return{real:e[2*t],imag:e[2*t+1]}}function On(e,t,n,s){e[2*s]=t,e[2*s+1]=n}function Mn(e,t){const n=new Float32Array(e/2),s=new Float32Array(e/2);for(let a=0;a<Math.ceil(e/2);a++){const r=(t?2:-2)*Math.PI*(a/e);n[a]=Math.cos(r),s[a]=Math.sin(r)}return{real:n,imag:s}}function zn(e,t,n){const s=(n?2:-2)*Math.PI*(e/t);return{real:Math.cos(s),imag:Math.sin(s)}}const Ln=/->/g;function Bn(e,t){const n=((e=e.replace(/\s/g,"")).length-e.replace(Ln,"").length)/"->".length;if(n<1)throw new Error("Equations without an arrow are not supported.");if(n>1)throw new Error('Equation must contain exactly one arrow ("->").');const[s,a]=e.split("->");(0,k.hu)(-1===s.indexOf("..."),(()=>'The ellipsis notation ("...") is not supported yet.'));const r=s.split(","),i=r.length;if(t!==i)throw new Error(`Expected ${i} input tensors, received ${t}`);if(i>2)throw new Error("Support for more than 2 input tensors is not implemented yet.");const o=[];for(let e=0;e<a.length;++e){const t=a[e];if(!r.some((e=>-1!==e.indexOf(t))))throw new Error(`Output subscripts contain the label ${t} not present in the input subscripts.`);-1===o.indexOf(t)&&o.push(t)}for(let e=0;e<s.length;++e){const t=s[e];-1===o.indexOf(t)&&","!==t&&o.push(t)}const l=new Array(r.length);for(let e=0;e<i;++e){if(new Set(r[e].split("")).size!==r[e].length)throw new Error(`Found duplicate axes in input component ${r[e]}. Support for duplicate axes in input is not implemented yet.`);l[e]=[];for(let t=0;t<r[e].length;++t)l[e].push(o.indexOf(r[e][t]))}const u=o.length,c=[];for(let e=a.length;e<u;++e)c.push(e);return{allDims:o,summedDims:c,idDims:l}}function Pn(e,t){let n=new Array(e);n.fill(-1);for(let e=0;e<t.length;++e)n[t[e]]=e;const s=[];for(let t=0;t<e;++t)-1===n[t]&&s.push(t);return n=n.filter((e=>-1!==e)),{permutationIndices:n,expandDims:s}}function Vn(e,t,n){const s=new Array(e);for(let e=0;e<n.length;++e){const a=n[e].shape;for(let n=0;n<t[e].length;++n)void 0===s[t[e][n]]?s[t[e][n]]=a[n]:(0,k.hu)(s[t[e][n]]===a[n],(()=>`Expected dimension ${s[t[e][n]]} at axis ${n} of input shaped ${JSON.stringify(a)}, but got dimension ${a[n]}`))}}function Wn(e,t){const n=e,s=[];let a=0;0===e.length&&n.push(-1),a=e.length+1;for(let e=0;e<a;++e)s.push([]);const r=[];for(let e=0;e<n.length;++e){const a=Gn(t,n[e]);for(const t of a)-1===r.indexOf(t)&&(s[e].push(t),r.push(t))}return{path:n,steps:s}}function Un(e){return e.every(((e,t)=>e===t))}function Gn(e,t){const n=[];for(let s=0;s<e.length;++s)0!==e[s].length&&-1===e[s].indexOf(t)&&-1!==t||n.push(s);return n}function Hn(e,t,n=0){let s=[];if("number"==typeof t)(0,k.hu)(e.shape[n]%t==0,(()=>"Number of splits must evenly divide the axis.")),s=new Array(t).fill(e.shape[n]/t);else{const a=t.reduce(((e,t)=>(-1===t&&(e+=1),e)),0);(0,k.hu)(a<=1,(()=>"There should be only one negative value in split array."));const r=t.indexOf(-1);if(-1!==r){const s=t.reduce(((e,t)=>t>0?e+t:e));t[r]=e.shape[n]-s}(0,k.hu)(e.shape[n]===t.reduce(((e,t)=>e+t)),(()=>"The sum of sizes must match the size of the axis dimension.")),s=t}return s}function qn(e){return`Received SparseTensor with denseShape[0] = 0 but\n  indices.shape[0] = ${e}`}function Xn(e,t){return`indices(${e}, 0) is invalid: ${t} < 0`}function jn(e,t,n){return`indices(${e}, 0) is invalid: ${t} >= ${n}`}function Kn(e,t){return`only one output dimension may be -1, not both ${e} and ${t}`}function Yn(e,t){return`size ${e} must be non-negative, not ${t}`}function Zn(){return"reshape cannot infer the missing input size for an empty tensor unless all specified input sizes are non-zero"}function Qn(e,t){return`Input to reshape is a SparseTensor with ${(0,k.NA)(e)}\n  dense values, but the requested shape requires a multiple of ${(0,k.NA)(t)}. inputShape=${e} outputShape= ${t}`}function Jn(e,t){return`Input to reshape is a tensor with ${(0,k.NA)(e)} dense values, but the requested shape has ${(0,k.NA)(t)}. inputShape=${e} outputShape=${t}`}function es(){return"segment ids must be >= 0"}function ts(){return"segment ids are not increasing"}function ns(e,t){return`Segment id ${e} out of range [0, ${t}), possibly because segmentIds input is not sorted.`}function ss(e,t,n){return`Bad: indices[${e}] == ${t} out of range [0, ${n})`}function as(e,t){let n,s=!1;for(e<=fn?(n=e,s=!0):n=(0,k.jP)(e,Math.floor(Math.sqrt(e)));!s;)n>t||n===e?s=!0:n=(0,k.jP)(e,n+1);return n}function rs(e,t,n){const s=[],a=e.length;for(let r=0;r<a;r++)r!==t?s.push(e[r]):s.push(n);return s}function is(e,t,n,s){const a=t.shape.length,r=e.shape.length;if(0!==s&&(s<-a||s>a))throw new Error(`Expect batchDims in the range of [-${a}, ${a}], but got ${s}`);if(s<0&&(s+=a),s>r)throw new Error(`batchDims (${s}) must be less than rank(x) (\n    ${r}).`);if(n<s)throw new Error(`batchDims (${s}) must be less than or equal to axis (${n}).`);for(let n=0;n<s;++n)if(e.shape[n]!==t.shape[n])throw new Error(`x.shape[${n}]: ${e.shape[n]} should be equal to indices.shape[${n}]: ${t.shape[n]}.`);const i=e.shape[n],o=[];let l=1,u=1,c=1;for(let t=0;t<s;++t)o.push(e.shape[t]),l*=e.shape[t];for(let t=s;t<n;t++)o.push(e.shape[t]),u*=e.shape[t];for(let e=s;e<a;e++)o.push(t.shape[e]);for(let t=n+1;t<r;t++)o.push(e.shape[t]),c*=e.shape[t];return{batchSize:l,sliceSize:c,outerSize:u,dimSize:i,outputShape:o}}function os(e){try{return e.map((e=>(0,dt.decodeString)(e)))}catch(e){throw new Error(`Failed to decode encoded string bytes into utf-8, error: ${e}`)}}function ls(e){return e.map((e=>(0,dt.encodeString)(e)))}var us=n(590),cs=n(2644),hs=n(7969)},574:(e,t,n)=>{"use strict";n.d(t,{$HU:()=>ft,$g6:()=>J,$w:()=>j,Acj:()=>ge,BMI:()=>Le,BiW:()=>ht,Byc:()=>P,CAk:()=>Ne,D2d:()=>Gt,DlI:()=>ut,Eh3:()=>A,FKq:()=>Ot,G3Y:()=>sn,GBy:()=>Mt,Gcp:()=>Bt,HEU:()=>te,HZH:()=>gt,Hhh:()=>Me,Hmb:()=>bt,IKK:()=>u,IMb:()=>v,J$2:()=>Ie,J_u:()=>xe,JhU:()=>y,Kgp:()=>it,L8s:()=>Lt,Ly9:()=>S,M2y:()=>p,MIZ:()=>Jt,MRv:()=>Dt,MZg:()=>Ae,NEP:()=>ae,NZg:()=>Ke,O3z:()=>Pt,OAf:()=>Ve,OR:()=>ce,OU7:()=>We,OV7:()=>Pe,Omj:()=>ne,Oyi:()=>m,PYm:()=>Ee,PhF:()=>Ct,QCc:()=>g,QRR:()=>U,Qg5:()=>be,QiL:()=>at,Qvg:()=>on,RFZ:()=>T,ROF:()=>b,RQH:()=>_t,RuY:()=>un,SX0:()=>ee,SYM:()=>s,SbG:()=>wt,SpW:()=>r,T0n:()=>G,TQc:()=>zt,TR1:()=>B,ToN:()=>rn,Tr8:()=>Zt,Uyb:()=>ue,VGw:()=>a,Vbg:()=>je,VcC:()=>W,VfG:()=>_e,Vn9:()=>Z,W0H:()=>tt,XDQ:()=>ln,XLW:()=>w,XkS:()=>Yt,Xze:()=>o,Y0y:()=>ie,YFo:()=>re,YoZ:()=>ze,ZbH:()=>Ce,ZjV:()=>Ut,Zz9:()=>E,_JP:()=>jt,_V0:()=>fn,_Yw:()=>xt,_k9:()=>x,_tC:()=>Ht,a5O:()=>Ft,aJk:()=>h,avt:()=>ve,b9H:()=>pn,bK0:()=>qt,bV0:()=>St,c17:()=>He,cWu:()=>tn,cie:()=>H,cye:()=>et,dDz:()=>ct,deh:()=>le,dpD:()=>yt,e07:()=>It,e6w:()=>pt,e7N:()=>Te,eBW:()=>hn,eEB:()=>N,eZ0:()=>Oe,ekb:()=>Y,gJX:()=>C,h8e:()=>cn,hdR:()=>se,i5y:()=>Rt,iHb:()=>V,iJz:()=>ye,iWB:()=>we,iZT:()=>me,ik2:()=>z,jMg:()=>f,jQk:()=>Xt,jQs:()=>Xe,jeX:()=>he,kU:()=>$e,kpP:()=>an,kuV:()=>Ze,luS:()=>mn,lyA:()=>rt,mKl:()=>kt,mTV:()=>Be,mc4:()=>L,mhS:()=>R,mm_:()=>i,n9L:()=>en,nhH:()=>Vt,nr8:()=>Tt,o0g:()=>lt,o2y:()=>M,oFR:()=>$t,oHH:()=>Q,oT6:()=>l,p2w:()=>Et,p4S:()=>K,pe_:()=>ot,q1x:()=>fe,q2K:()=>Ge,q8u:()=>qe,qCd:()=>Fe,qIC:()=>De,qWM:()=>nt,qi_:()=>de,qkr:()=>mt,qw7:()=>d,r7n:()=>ke,s1s:()=>Kt,sEM:()=>Qt,sHE:()=>pe,sJF:()=>c,sL$:()=>q,usg:()=>dn,uv1:()=>Je,vFR:()=>Ue,vtC:()=>Se,vwp:()=>oe,w3H:()=>Wt,w6g:()=>Re,wUP:()=>F,wYB:()=>At,wYn:()=>Ye,we_:()=>st,wm:()=>D,wx7:()=>nn,x12:()=>O,xJR:()=>dt,xQA:()=>Nt,xnO:()=>$,y7R:()=>X,yQU:()=>Qe,yj2:()=>_,zbQ:()=>vt,zvY:()=>I,zws:()=>k});const s="Abs",a="Acos",r="Acosh",i="Add",o="AddN",l="All",u="Any",c="ArgMax",h="ArgMin",p="Asin",d="Asinh",f="Atan",m="Atanh",g="Atan2",y="AvgPool",b="AvgPoolGrad",x="AvgPool3D",v="AvgPool3DGrad",w="BatchMatMul",k="BatchToSpaceND",I="Bincount",S="BroadcastTo",N="BroadcastArgs",T="Cast",C="Ceil",$="ClipByValue",E="Complex",_="ComplexAbs",A="Concat",R="Conv2D",F="Conv2DBackpropFilter",D="Conv2DBackpropInput",O="Conv3D",M="Conv3DBackpropFilterV2",z="Conv3DBackpropInputV2",L="Cos",B="Cosh",P="Cumprod",V="Cumsum",W="CropAndResize",U="DenseBincount",G="DepthToSpace",H="DepthwiseConv2dNative",q="DepthwiseConv2dNativeBackpropFilter",X="DepthwiseConv2dNativeBackpropInput",j="Diag",K="Dilation2D",Y="Dilation2DBackpropInput",Z="Dilation2DBackpropFilter",Q="RealDiv",J="Einsum",ee="Elu",te="EluGrad",ne="Erf",se="Equal",ae="Exp",re="ExpandDims",ie="Expm1",oe="FFT",le="Fill",ue="FlipLeftRight",ce="Floor",he="FloorDiv",pe="FusedBatchNorm",de="GatherV2",fe="GatherNd",me="Greater",ge="GreaterEqual",ye="Identity",be="IFFT",xe="Imag",ve="IsFinite",we="IsInf",ke="IsNan",Ie="LeakyRelu",Se="Less",Ne="LessEqual",Te="LinSpace",Ce="Log",$e="Log1p",Ee="LogicalAnd",_e="LogicalNot",Ae="LogicalOr",Re="LogicalXor",Fe="LogSoftmax",De="LowerBound",Oe="LRN",Me="LRNGrad",ze="Max",Le="Maximum",Be="MaxPool",Pe="MaxPoolGrad",Ve="MaxPool3D",We="MaxPool3DGrad",Ue="MaxPoolWithArgmax",Ge="Mean",He="Min",qe="Minimum",Xe="MirrorPad",je="Mod",Ke="Multinomial",Ye="Multiply",Ze="Neg",Qe="NotEqual",Je="NonMaxSuppressionV3",et="NonMaxSuppressionV4",tt="NonMaxSuppressionV5",nt="OnesLike",st="OneHot",at="Pack",rt="PadV2",it="Pool",ot="Pow",lt="Prelu",ut="Prod",ct="RaggedGather",ht="RaggedTensorToTensor",pt="Range",dt="Real",ft="Reciprocal",mt="Relu",gt="Reshape",yt="ResizeNearestNeighbor",bt="ResizeNearestNeighborGrad",xt="ResizeBilinear",vt="ResizeBilinearGrad",wt="Relu6",kt="Reverse",It="Round",St="Rsqrt",Nt="ScatterNd",Tt="SearchSorted",Ct="Select",$t="Selu",Et="Slice",_t="Sin",At="Sinh",Rt="Sign",Ft="Sigmoid",Dt="Softplus",Ot="Sqrt",Mt="Sum",zt="SpaceToBatchND",Lt="SplitV",Bt="Softmax",Pt="SparseFillEmptyRows",Vt="SparseReshape",Wt="SparseSegmentMean",Ut="SparseSegmentSum",Gt="SparseToDense",Ht="SquaredDifference",qt="Square",Xt="StridedSlice",jt="StringNGrams",Kt="StringSplit",Yt="StringToHashBucketFast",Zt="Sub",Qt="Tan",Jt="Tanh",en="Tile",tn="TopK",nn="Transform",sn="Transpose",an="Unique",rn="Unpack",on="UnsortedSegmentSum",ln="UpperBound",un="ZerosLike",cn="Step",hn="FromPixels",pn="RotateWithOffset",dn="_FusedMatMul",fn="FusedConv2D",mn="FusedDepthwiseConv2D"},1675:(e,t,n)=>{"use strict";n.d(t,{Li:()=>p,T3:()=>m,bt:()=>f,nE:()=>d,pI:()=>l,tr:()=>c,uk:()=>u,wC:()=>h});var s=n(415),a=n(4126),r=n(1592);const i=(0,a.R)("kernelRegistry",(()=>new Map)),o=(0,a.R)("gradRegistry",(()=>new Map));function l(e,t){const n=g(e,t);return i.get(n)}function u(e){return o.get(e)}function c(e){const t=i.entries(),n=[];for(;;){const{done:s,value:a}=t.next();if(s)break;const[r,i]=a,[o]=r.split("_");o===e&&n.push(i)}return n}function h(e){const{kernelName:t,backendName:n}=e,s=g(t,n);i.has(s)&&r.Z(`The kernel '${t}' for backend '${n}' is already registered`),i.set(s,e)}function p(e){const{kernelName:t}=e;o.has(t)&&(0,s.OB)().getBool("DEBUG")&&r.Z(`Overriding the gradient for '${t}'`),o.set(t,e)}function d(e,t){const n=g(e,t);if(!i.has(n))throw new Error(`The kernel '${e}' for backend '${t}' is not registered`);i.delete(n)}function f(e){if(!o.has(e))throw new Error(`The gradient '${e}' for backend is not registered`);o.delete(e)}function m(e,t){c(e).forEach((e=>{h(Object.assign({},e,{backendName:t}))}))}function g(e,t){return`${t}_${e}`}},1592:(e,t,n)=>{"use strict";n.d(t,{Z:()=>a,c:()=>r});var s=n(415);function a(...e){(0,s.OB)().getBool("IS_TEST")||(0,s.OB)().getBool("PROD")||console.warn(...e)}function r(...e){(0,s.OB)().getBool("IS_TEST")||(0,s.OB)().getBool("PROD")||console.log(...e)}},9938:(e,t,n)=>{"use strict";n.d(t,{W:()=>i});var s=n(1297),a=n(574),r=n(7641);const i=(0,n(6519).op)({abs_:function(e){const t=(0,r._1)(e,"x","abs");if("complex64"===t.dtype){const e={x:t};return s.BV.runKernel(a.yj2,e)}{const e={x:t};return s.BV.runKernel(a.SYM,e)}}})},1712:(e,t,n)=>{"use strict";n.d(t,{K:()=>i});var s=n(1297),a=n(574),r=n(7641);const i=(0,n(6519).op)({acos_:function(e){const t={x:(0,r._1)(e,"x","acos")};return s.BV.runKernel(a.VGw,t)}})},9714:(e,t,n)=>{"use strict";n.d(t,{_:()=>i});var s=n(1297),a=n(574),r=n(7641);const i=(0,n(6519).op)({acosh_:function(e){const t={x:(0,r._1)(e,"x","acosh")};return s.BV.runKernel(a.SpW,t)}})},7862:(e,t,n)=>{"use strict";n.d(t,{I:()=>o});var s=n(1297),a=n(574),r=n(9932),i=n(7641);const o=(0,n(6519).op)({add_:function(e,t){let n=(0,i._1)(e,"a","add"),o=(0,i._1)(t,"b","add");[n,o]=(0,r.makeTypesMatch)(n,o);const l={a:n,b:o};return s.BV.runKernel(a.mm_,l)}})},456:(e,t,n)=>{"use strict";n.d(t,{$:()=>i});var s=n(1297),a=n(574),r=n(7641);const i=(0,n(6519).op)({all_:function(e,t=null,n=!1){const i={x:(0,r._1)(e,"x","all","bool")},o={axis:t,keepDims:n};return s.BV.runKernel(a.oT6,i,o)}})},5567:(e,t,n)=>{"use strict";n.d(t,{Y:()=>i});var s=n(1297),a=n(574),r=n(7641);const i=(0,n(6519).op)({any_:function(e,t=null,n=!1){const i={x:(0,r._1)(e,"x","any","bool")},o={axis:t,keepDims:n};return s.BV.runKernel(a.IKK,i,o)}})},5725:(e,t,n)=>{"use strict";n.d(t,{N:()=>i});var s=n(1297),a=n(574),r=n(7641);const i=(0,n(6519).op)({argMax_:function(e,t=0){const n={x:(0,r._1)(e,"x","argMax")},i={axis:t};return s.BV.runKernel(a.sJF,n,i)}})},2698:(e,t,n)=>{"use strict";n.d(t,{v:()=>i});var s=n(1297),a=n(574),r=n(7641);const i=(0,n(6519).op)({argMin_:function(e,t=0){const n={x:(0,r._1)(e,"x","argMin")},i={axis:t};return s.BV.runKernel(a.aJk,n,i)}})},507:(e,t,n)=>{"use strict";n.d(t,{Z:()=>i});var s=n(1297),a=n(574),r=n(7641);const i=(0,n(6519).op)({asin_:function(e){const t={x:(0,r._1)(e,"x","asin")};return s.BV.runKernel(a.M2y,t)}})},9080:(e,t,n)=>{"use strict";n.d(t,{V:()=>i});var s=n(1297),a=n(574),r=n(7641);const i=(0,n(6519).op)({asinh_:function(e){const t={x:(0,r._1)(e,"x","asinh")};return s.BV.runKernel(a.qw7,t)}})},3079:(e,t,n)=>{"use strict";n.d(t,{z:()=>i});var s=n(1297),a=n(574),r=n(7641);const i=(0,n(6519).op)({atan_:function(e){const t={x:(0,r._1)(e,"x","atan")};return s.BV.runKernel(a.jMg,t)}})},5511:(e,t,n)=>{"use strict";n.d(t,{f:()=>o});var s=n(1297),a=n(574),r=n(9932),i=n(7641);const o=(0,n(6519).op)({atan2_:function(e,t){let n=(0,i._1)(e,"a","atan2"),o=(0,i._1)(t,"b","atan2");[n,o]=(0,r.makeTypesMatch)(n,o);const l={a:n,b:o};return s.BV.runKernel(a.QCc,l)}})},6241:(e,t,n)=>{"use strict";n.d(t,{C:()=>i});var s=n(1297),a=n(574),r=n(7641);const i=(0,n(6519).op)({atanh_:function(e){const t={x:(0,r._1)(e,"x","atanh")};return s.BV.runKernel(a.Oyi,t)}})},3766:(e,t,n)=>{"use strict";n.d(t,{w:()=>h});var s=n(1297),a=n(574),r=n(7641),i=n(7636),o=n(9028),l=n(4397),u=n(6519),c=n(7325);const h=(0,u.op)({avgPool_:function(e,t,n,u,h){const p=(0,r._1)(e,"x","avgPool","float32");i.hu(l.jT(n,1),(()=>`Error in avgPool: Either strides or dilations must be 1. Got strides ${n} and dilations '1'`));let d=p,f=!1;3===p.rank&&(f=!0,d=(0,c.X)(p,[1,p.shape[0],p.shape[1],p.shape[2]])),i.hu(4===d.rank,(()=>`Error in avgPool: x must be rank 4 but got rank ${d.rank}.`)),l.m("avgPool",u,h);const m={x:d},g={filterSize:t,strides:n,pad:u,dimRoundingMode:h};let y=s.BV.runKernel(a.JhU,m,g);return y=(0,o.p)(y,p.dtype),f?(0,c.X)(y,[y.shape[1],y.shape[2],y.shape[3]]):y}})},1878:(e,t,n)=>{"use strict";n.d(t,{LJ:()=>c,Q3:()=>u,Vh:()=>r,YB:()=>a,kz:()=>i,lB:()=>l,rv:()=>o,sY:()=>h});var s=n(7636);function a(e,t){for(let n=0;n<e.length;++n)if(e[e.length-n-1]!==t-1-n)return!1;return!0}function r(e,t,n){const s=e.length+t.length,a=[];let r=0,i=0;for(let o=0;o<s;o++)-1===n.indexOf(o)?a.push(e[r++]):a.push(t[i++]);return a}function i(e,t){const n=[],s=e.length;for(let a=0;a<s;a++)-1===t.indexOf(a)&&n.push(e[a]);return[n,t.map((t=>e[t]))]}function o(e,t){return r(e,t.map((e=>1)),t)}function l(e,t,n){s.hu(a(t,n),(()=>`${e} supports only inner-most axes for now. Got axes ${t} and rank-${n} input.`))}function u(e,t){if(a(e,t))return null;const n=[];for(let s=0;s<t;++s)-1===e.indexOf(s)&&n.push(s);return e.forEach((e=>n.push(e))),n}function c(e){return e.map(((e,t)=>[t,e])).sort(((e,t)=>e[1]-t[1])).map((e=>e[0]))}function h(e,t){const n=[];for(let s=t-e;s<t;++s)n.push(s);return n}},2854:(e,t,n)=>{"use strict";n.d(t,{E:()=>o});var s=n(1297),a=n(574),r=n(7641),i=n(7636);const o=(0,n(6519).op)({batchToSpaceND_:function(e,t,n){const o=(0,r._1)(e,"x","batchToSpaceND"),l=t.reduce(((e,t)=>e*t));i.hu(o.rank>=1+t.length,(()=>`input rank is ${o.rank} but should be > than blockShape.length ${t.length}`)),i.hu(n.length===t.length,(()=>`crops.length is ${n.length} but should be equal to blockShape.length  ${t.length}`)),i.hu(o.shape[0]%l==0,(()=>`input tensor batch is ${o.shape[0]} but is not divisible by the product of the elements of blockShape ${t.join(" * ")} === ${l}`));const u={x:o},c={blockShape:t,crops:n};return s.BV.runKernel(a.zws,u,c)}})},3490:(e,t,n)=>{"use strict";n.d(t,{t:()=>l});var s=n(1297),a=n(574),r=n(7641),i=n(7636),o=n(7325);const l=(0,n(6519).op)({batchNorm_:function(e,t,n,l,u,c){null==c&&(c=.001);const h=(0,r._1)(e,"x","batchNorm"),p=(0,r._1)(t,"mean","batchNorm"),d=(0,r._1)(n,"variance","batchNorm");let f,m;null!=u&&(f=(0,r._1)(u,"scale","batchNorm")),null!=l&&(m=(0,r._1)(l,"offset","batchNorm")),i.hu(p.rank===d.rank,(()=>"Batch normalization gradient requires mean and variance to have equal ranks.")),i.hu(null==m||p.rank===m.rank,(()=>"Batch normalization gradient requires mean and offset to have equal ranks.")),i.hu(null==f||p.rank===f.rank,(()=>"Batch normalization gradient requires mean and scale to have equal ranks."));const g=function(e){let t;return t=0===e.rank||1===e.rank?(0,o.X)(e,[1,1,1,e.size]):2===e.rank?(0,o.X)(e,[1,1,e.shape[0],e.shape[1]]):3===e.rank?(0,o.X)(e,[1,e.shape[0],e.shape[1],e.shape[2]]):e,t}(h),y={x:g,scale:f,offset:m,mean:p,variance:d},b={varianceEpsilon:c},x=s.BV.runKernel(a.sHE,y,b);return(0,o.X)(x,h.shape)}})},6833:(e,t,n)=>{"use strict";n.d(t,{U:()=>u});var s=n(1297),a=n(574),r=n(7641),i=n(7676),o=n(6519),l=n(7325);const u=(0,o.op)({broadcastTo_:function(e,t){let n=(0,r._1)(e,"broadcastTo","x");const o=n.shape;if(t.some((e=>!(e>0)||e%1!=0)))throw new Error(`broadcastTo(): Invalid broadcast shape [${t}].`);if(t.length<n.rank)throw new Error(`broadcastTo(): shape.length=${t.length} < input.rank=${n.rank}.`);if(t.length>n.rank){const e=n.shape.slice();for(;e.length<t.length;)e.unshift(1);n=(0,l.X)(n,e)}const u=n.shape,c=Array.from(t);for(let e=t.length-1;e>=0;e--)if(u[e]===t[e])c[e]=1;else if(1!==n.shape[e])throw new Error(`broadcastTo(): [${o}] cannot be broadcast to [${t}].`);if(0===c.map(((e,t)=>e>1?t:-1)).filter((e=>e>=0)).length)return(0,i.d)(n);const h={x:n},p={reps:c};return s.BV.runKernel(a.n9L,h,p)}})},6501:(e,t,n)=>{"use strict";function s(e,t){const n=e.length,s=[];for(let a=0;a<n;a++){const r=n-1-a,i=e[r]||1;(t[t.length-1-a]||1)>1&&1===i&&s.unshift(r)}return s}function a(e,t){const n=[];for(let s=0;s<t.length;s++){const a=e[e.length-s-1],r=t.length-s-1,i=t[r];(null==a||1===a&&i>1)&&n.unshift(r)}return n}function r(e,t){const n=[],s=Math.max(e.length,t.length);for(let a=0;a<s;a++){let s=e[e.length-a-1];null==s&&(s=1);let r=t[t.length-a-1];if(null==r&&(r=1),1===s)n.unshift(r);else if(1===r)n.unshift(s);else{if(s!==r)throw Error(`Operands could not be broadcast together with shapes ${e} and ${t}.`);n.unshift(s)}}return n}n.r(t),n.d(t,{assertAndGetBroadcastShape:()=>r,getBroadcastDims:()=>s,getReductionAxes:()=>a})},3259:(e,t,n)=>{"use strict";n.d(t,{f:()=>r});var s=n(9527),a=n(7636);function r(e,t="float32",n){return t=t||"float32",a.Mu(e),new s.YD(e,t,n)}},9028:(e,t,n)=>{"use strict";n.d(t,{p:()=>o});var s=n(1297),a=n(574),r=n(7641),i=n(7636);const o=(0,n(6519).op)({cast_:function(e,t){const n=(0,r._1)(e,"x","cast");if(!i.LP(t))throw new Error(`Failed to cast to unknown dtype ${t}`);if("string"===t&&"string"!==n.dtype||"string"!==t&&"string"===n.dtype)throw new Error("Only strings can be casted to strings");const o={x:n},l={dtype:t};return s.BV.runKernel(a.RFZ,o,l)}})},7382:(e,t,n)=>{"use strict";n.d(t,{m:()=>i});var s=n(1297),a=n(574),r=n(7641);const i=(0,n(6519).op)({ceil_:function(e){const t={x:(0,r._1)(e,"x","ceil","float32")};return s.BV.runKernel(a.gJX,t)}})},229:(e,t,n)=>{"use strict";n.d(t,{i:()=>l});var s=n(1297),a=n(574),r=n(7641),i=n(7636),o=n(5321);const l=(0,n(6519).op)({clipByValue_:function(e,t,n){const l=(0,r._1)(e,"x","clipByValue");if(i.hu(t<=n,(()=>`Error in clip: min (${t}) must be less than or equal to max (${n}).`)),t===n)return(0,o.h)(l.shape,t,l.dtype);const u={x:l},c={clipValueMin:t,clipValueMax:n};return s.BV.runKernel(a.xnO,u,c)}})},7676:(e,t,n)=>{"use strict";n.d(t,{d:()=>i});var s=n(1297),a=n(574),r=n(7641);const i=(0,n(6519).op)({clone_:function(e){const t={x:(0,r._1)(e,"x","clone","string_or_numeric")};return s.BV.runKernel(a.iJz,t)}})},9943:(e,t,n)=>{"use strict";n.d(t,{P:()=>o});var s=n(1297),a=n(574),r=n(7641),i=n(7636);const o=(0,n(6519).op)({complex_:function(e,t){const n=(0,r._1)(e,"real","complex"),o=(0,r._1)(t,"imag","complex");i.k5(n.shape,o.shape,`real and imag shapes, ${n.shape} and ${o.shape}, must match in call to tf.complex().`);const l={real:n,imag:o};return s.BV.runKernel(a.Zz9,l)}})},5041:(e,t,n)=>{"use strict";n.d(t,{z:()=>l});var s=n(1297),a=n(574),r=n(7641),i=n(7636),o=n(7676);const l=(0,n(6519).op)({concat_:function(e,t=0){(0,i.hu)(e.length>=1,(()=>"Pass at least one tensor to concat"));const n=(0,r.sI)(e,"tensors","concat","string_or_numeric");if("complex64"===n[0].dtype&&n.forEach((e=>{if("complex64"!==e.dtype)throw new Error(`Cannot concatenate complex64 tensors with a tensor\n          with dtype ${e.dtype}. `)})),1===n.length)return(0,o.d)(n[0]);const l=n,u={axis:t};return s.BV.runKernel(a.Eh3,l,u)}})},3373:(e,t,n)=>{"use strict";n.d(t,{P:()=>u});var s=n(7641),a=n(7636),r=n(5294),i=n(4397),o=n(6519),l=n(7325);const u=(0,o.op)({conv1d_:function(e,t,n,o,u="NWC",c=1,h){const p=(0,s._1)(e,"x","conv1d"),d=(0,s._1)(t,"filter","conv1d");let f=p,m=!1;2===p.rank&&(m=!0,f=(0,l.X)(p,[1,p.shape[0],p.shape[1]])),a.hu(3===f.rank,(()=>`Error in conv1d: input must be rank 3, but got rank ${f.rank}.`)),a.hu(3===d.rank,(()=>`Error in conv1d: filter must be rank 3, but got rank ${d.rank}.`)),i.m("conv1d",o,h),a.hu(f.shape[2]===d.shape[1],(()=>`Error in conv1d: depth of input (${f.shape[2]}) must match input depth for filter ${d.shape[1]}.`)),a.hu(i.jT(n,c),(()=>`Error in conv1D: Either stride or dilation must be 1. Got stride ${n} and dilation '${c}'`)),a.hu("NWC"===u,(()=>`Error in conv1d: got dataFormat of ${u} but only NWC is currently supported.`));const g=(0,l.X)(d,[1,d.shape[0],d.shape[1],d.shape[2]]),y=(0,l.X)(f,[f.shape[0],1,f.shape[1],f.shape[2]]),b=[1,n],x=[1,c],v=(0,r.T)(y,g,b,o,"NHWC",x,h);return m?(0,l.X)(v,[v.shape[2],v.shape[3]]):(0,l.X)(v,[v.shape[0],v.shape[2],v.shape[3]])}})},5294:(e,t,n)=>{"use strict";n.d(t,{T:()=>c});var s=n(1297),a=n(574),r=n(7641),i=n(7636),o=n(4397),l=n(6519),u=n(7325);const c=(0,l.op)({conv2d_:function(e,t,n,l,c="NHWC",h=[1,1],p){const d=(0,r._1)(e,"x","conv2d","float32"),f=(0,r._1)(t,"filter","conv2d","float32");let m=d,g=!1;3===d.rank&&(g=!0,m=(0,u.X)(d,[1,d.shape[0],d.shape[1],d.shape[2]])),i.hu(4===m.rank,(()=>`Error in conv2d: input must be rank 4, but got rank ${m.rank}.`)),i.hu(4===f.rank,(()=>`Error in conv2d: filter must be rank 4, but got rank ${f.rank}.`)),o.m("conv2d",l,p);const y="NHWC"===c?m.shape[3]:m.shape[1];i.hu(y===f.shape[2],(()=>`Error in conv2d: depth of input (${y}) must match input depth for filter ${f.shape[2]}.`)),i.hu(o.jT(n,h),(()=>`Error in conv2D: Either strides or dilations must be 1. Got strides ${n} and dilations '${h}'`));const b={x:m,filter:f},x={strides:n,pad:l,dataFormat:c,dilations:h,dimRoundingMode:p},v=s.BV.runKernel(a.mhS,b,x);return g?(0,u.X)(v,[v.shape[1],v.shape[2],v.shape[3]]):v}})},3791:(e,t,n)=>{"use strict";n.d(t,{p:()=>u});var s=n(1297),a=n(574),r=n(7636),i=n(4397),o=n(6519),l=n(7325);const u=(0,o.op)({conv2DBackpropFilter_:function(e,t,n,o,u,c="NHWC",h){let p=e;3===e.rank&&(p=(0,l.X)(e,[1,e.shape[0],e.shape[1],e.shape[2]]));let d=t;3===d.rank&&(d=(0,l.X)(t,[1,t.shape[0],t.shape[1],t.shape[2]])),r.hu(4===p.rank,(()=>`Error in conv2dDerFilter: input must be rank 4, but got shape ${p.shape}.`)),r.hu(4===d.rank,(()=>`Error in conv2dDerFilter: dy must be rank 4, but got shape ${d.shape}.`)),r.hu(4===n.length,(()=>`Error in conv2dDerFilter: filterShape must be length 4, but got ${n}.`));const f="NHWC"===c?p.shape[3]:p.shape[1],m="NHWC"===c?d.shape[3]:d.shape[1];r.hu(f===n[2],(()=>`Error in conv2dDerFilter: depth of input ${f}) must match input depth in filter (${n[2]}.`)),r.hu(m===n[3],(()=>`Error in conv2dDerFilter: depth of dy (${m}) must match output depth for filter (${n[3]}).`)),i.m("conv2dDerFilter",u,h);const g={x:p,dy:d},y={strides:o,pad:u,dataFormat:c,dimRoundingMode:h,filterShape:n};return s.BV.runKernel(a.wUP,g,y)}})},7500:(e,t,n)=>{"use strict";n.d(t,{_:()=>u});var s=n(1297),a=n(574),r=n(7636),i=n(4397),o=n(6519),l=n(7325);const u=(0,o.op)({conv2DBackpropInput_:function(e,t,n,o,u,c="NHWC",h){r.hu(e.length===t.rank,(()=>`Length of inShape (${e.length}) and rank of dy (${t.rank}) must match`));let p=e,d=t,f=!1;3===t.rank&&(f=!0,d=(0,l.X)(t,[1,t.shape[0],t.shape[1],t.shape[2]]),p=[1,e[0],e[1],e[2]]),r.hu(4===p.length,(()=>`Error in conv2dDerInput: inShape must be length 4, but got length ${p.length}.`)),r.hu(4===d.rank,(()=>`Error in conv2dDerInput: dy must be rank 4, but got rank ${d.rank}`)),r.hu(4===n.rank,(()=>`Error in conv2dDerInput: filter must be rank 4, but got rank ${n.rank}`));const m="NHWC"===c?p[3]:p[1],g="NHWC"===c?d.shape[3]:d.shape[1];r.hu(m===n.shape[2],(()=>`Error in conv2dDerInput: depth of input (${m}) must match input depth for filter ${n.shape[2]}.`)),r.hu(g===n.shape[3],(()=>`Error in conv2dDerInput: depth of output (${g}) must match output depth for filter ${n.shape[3]}.`)),i.m("conv2dDerInput",u,h);const y={dy:d,filter:n},b={strides:o,pad:u,dataFormat:c,dimRoundingMode:h,inputShape:p},x=s.BV.runKernel(a.wm,y,b);return f?(0,l.X)(x,[x.shape[1],x.shape[2],x.shape[3]]):x}})},8436:(e,t,n)=>{"use strict";n.d(t,{b:()=>r});var s=n(7641),a=n(7500);const r=(0,n(6519).op)({conv2dTranspose_:function(e,t,n,r,i,o){const l=(0,s._1)(e,"x","conv2dTranspose"),u=(0,s._1)(t,"filter","conv2dTranspose");return(0,a._)(n,l,u,r,i,"NHWC",o)}})},7455:(e,t,n)=>{"use strict";n.d(t,{_:()=>l});var s=n(1297),a=n(574),r=n(7636),i=n(6519),o=n(7325);const l=(0,i.op)({conv3DBackpropInput_:function(e,t,n,i,l){r.hu(e.length===t.rank,(()=>`Length of inShape (${e.length}) and rank of dy (${t.rank}) must match`));let u=e,c=t,h=!1;4===t.rank&&(h=!0,c=(0,o.X)(t,[1,t.shape[0],t.shape[1],t.shape[2],t.shape[3]]),u=[1,e[0],e[1],e[2],e[3]]);const p=u[4],d=c.shape[4];r.hu(5===u.length,(()=>`Error in conv3dDerInput: inShape must be length 5, but got length ${u.length}.`)),r.hu(5===c.rank,(()=>`Error in conv3dDerInput: dy must be rank 5, but got rank ${c.rank}`)),r.hu(5===n.rank,(()=>`Error in conv3dDerInput: filter must be rank 5, but got rank ${n.rank}`)),r.hu(p===n.shape[3],(()=>`Error in conv3dDerInput: depth of input (${p}) must match input depth for filter ${n.shape[3]}.`)),r.hu(d===n.shape[4],(()=>`Error in conv3dDerInput: depth of output (${d}) must match output depth for filter ${n.shape[4]}.`));const f={dy:c,filter:n},m={pad:l,strides:i,inputShape:u},g=s.BV.runKernel(a.ik2,f,m);return h?(0,o.X)(g,[g.shape[1],g.shape[2],g.shape[3],g.shape[4]]):g}})},4397:(e,t,n)=>{"use strict";n.d(t,{I0:()=>f,Ix:()=>o,Rf:()=>a,Xw:()=>r,aO:()=>u,jT:()=>m,jw:()=>l,m:()=>y,pl:()=>i,sl:()=>g});var s=n(7636);function a(e,t,n,s,a="NHWC",r){return o(e,[...t,e[3]],n,r,s,null,null,g(a))}function r(e,t,n,s,a,r,i="channelsLast"){const[l,u]=c(t);let h;if("channelsLast"===i)h=[l,u,e[3],e[3]];else{if("channelsFirst"!==i)throw new Error(`Unknown dataFormat ${i}`);h=[l,u,e[1],e[1]]}return o(e,h,n,s,a,r,!1,i)}function i(e,t,n,s,a,r,i="NDHWC"){const[o,u,c]=h(t);let p,d;if("NDHWC"===i)d="channelsLast",p=[o,u,c,e[4],e[4]];else{if("NCDHW"!==i)throw new Error(`Unknown dataFormat ${i}`);d="channelsFirst",p=[o,u,c,e[1],e[1]]}return l(e,p,n,s,a,!1,d,r)}function o(e,t,n,s,a,r,i=!1,o="channelsLast"){let[l,h,f,m]=[-1,-1,-1,-1];if("channelsLast"===o)[l,h,f,m]=e;else{if("channelsFirst"!==o)throw new Error(`Unknown dataFormat ${o}`);[l,m,h,f]=e}const[g,y,,b]=t,[x,v]=c(n),[w,k]=c(s),I=p(g,w),S=p(y,k),{padInfo:N,outHeight:T,outWidth:C}=function(e,t,n,s,a,r,i,o,l){let c,h,p;if("number"==typeof e){c={top:e,bottom:e,left:e,right:e,type:0===e?"VALID":"NUMBER"};const a=function(e,t,n,s,a){null==s&&(s=u(e,t,n));const r=e[1];return[d((e[0]-t+2*s)/n+1,a),d((r-t+2*s)/n+1,a)]}([t,n],r,s,e,o);h=a[0],p=a[1]}else if("same"===e){h=Math.ceil(t/s),p=Math.ceil(n/a);const e=Math.max(0,(h-1)*s+r-t),o=Math.max(0,(p-1)*a+i-n),l=Math.floor(e/2),u=e-l,d=Math.floor(o/2);c={top:l,bottom:u,left:d,right:o-d,type:"SAME"}}else if("valid"===e)c={top:0,bottom:0,left:0,right:0,type:"VALID"},h=Math.ceil((t-r+1)/s),p=Math.ceil((n-i+1)/a);else{if("object"!=typeof e)throw Error(`Unknown padding parameter: ${e}`);{const u="channelsLast"===l?e[1][0]:e[2][0],f="channelsLast"===l?e[1][1]:e[2][1],m="channelsLast"===l?e[2][0]:e[3][0],g="channelsLast"===l?e[2][1]:e[3][1];c={top:u,bottom:f,left:m,right:g,type:0===u&&0===f&&0===m&&0===g?"VALID":"EXPLICIT"},h=d((t-r+u+f)/s+1,o),p=d((n-i+m+g)/a+1,o)}}return{padInfo:c,outHeight:h,outWidth:p}}(a,h,f,x,v,I,S,r,o),$=i?b*m:b;let E;return"channelsFirst"===o?E=[l,$,T,C]:"channelsLast"===o&&(E=[l,T,C,$]),{batchSize:l,dataFormat:o,inHeight:h,inWidth:f,inChannels:m,outHeight:T,outWidth:C,outChannels:$,padInfo:N,strideHeight:x,strideWidth:v,filterHeight:g,filterWidth:y,effectiveFilterHeight:I,effectiveFilterWidth:S,dilationHeight:w,dilationWidth:k,inShape:e,outShape:E,filterShape:t}}function l(e,t,n,s,a,r=!1,i="channelsLast",o){let[l,c,f,m,g]=[-1,-1,-1,-1,-1];if("channelsLast"===i)[l,c,f,m,g]=e;else{if("channelsFirst"!==i)throw new Error(`Unknown dataFormat ${i}`);[l,g,c,f,m]=e}const[y,b,x,,v]=t,[w,k,I]=h(n),[S,N,T]=h(s),C=p(y,S),$=p(b,N),E=p(x,T),{padInfo:_,outDepth:A,outHeight:R,outWidth:F}=function(e,t,n,s,a,r,i,o,l,c,h){let p,f,m,g;if("number"==typeof e){p={top:e,bottom:e,left:e,right:e,front:e,back:e,type:0===e?"VALID":"NUMBER"};const r=function(e,t,n,s,a,r){null==a&&(a=u(e,t,s));const i=e[1],o=e[2];return[d((e[0]-t+2*a)/s+1,r),d((i-t+2*a)/s+1,r),d((o-t+2*a)/s+1,r),1]}([t,n,s,1],o,0,a,e,h);f=r[0],m=r[1],g=r[2]}else if("same"===e){f=Math.ceil(t/a),m=Math.ceil(n/r),g=Math.ceil(s/i);const e=(f-1)*a+o-t,u=(m-1)*r+l-n,h=(g-1)*i+c-s,d=Math.floor(e/2),y=e-d,b=Math.floor(u/2),x=u-b,v=Math.floor(h/2);p={top:b,bottom:x,left:v,right:h-v,front:d,back:y,type:"SAME"}}else{if("valid"!==e)throw Error(`Unknown padding parameter: ${e}`);p={top:0,bottom:0,left:0,right:0,front:0,back:0,type:"VALID"},f=Math.ceil((t-o+1)/a),m=Math.ceil((n-l+1)/r),g=Math.ceil((s-c+1)/i)}return{padInfo:p,outDepth:f,outHeight:m,outWidth:g}}(a,c,f,m,w,k,I,C,$,E,o),D=r?v*g:v;let O;return"channelsFirst"===i?O=[l,D,A,R,F]:"channelsLast"===i&&(O=[l,A,R,F,D]),{batchSize:l,dataFormat:i,inDepth:c,inHeight:f,inWidth:m,inChannels:g,outDepth:A,outHeight:R,outWidth:F,outChannels:D,padInfo:_,strideDepth:w,strideHeight:k,strideWidth:I,filterDepth:y,filterHeight:b,filterWidth:x,effectiveFilterDepth:C,effectiveFilterHeight:$,effectiveFilterWidth:E,dilationDepth:S,dilationHeight:N,dilationWidth:T,inShape:e,outShape:O,filterShape:t}}function u(e,t,n,s=1){const a=p(t,s);return Math.floor((e[0]*(n-1)-n+a)/2)}function c(e){return"number"==typeof e?[e,e,e]:2===e.length?[e[0],e[1],1]:e}function h(e){return"number"==typeof e?[e,e,e]:e}function p(e,t){return t<=1?e:e+(e-1)*(t-1)}function d(e,t){if(!t)return Math.trunc(e);switch(t){case"round":return Math.round(e);case"ceil":return Math.ceil(e);case"floor":return Math.floor(e);default:throw new Error(`Unknown roundingMode ${t}`)}}function f(e){const[t,n,s]=c(e);return 1===t&&1===n&&1===s}function m(e,t){return f(e)||f(t)}function g(e){if("NHWC"===e)return"channelsLast";if("NCHW"===e)return"channelsFirst";throw new Error(`Unknown dataFormat ${e}`)}function y(e,t,n){if(null!=n){if("string"==typeof t)throw Error(`Error in ${e}: pad must be an integer when using dimRoundingMode ${n} but got pad ${t}.`);if("number"==typeof t)s.hu(s.GN(t),(()=>`Error in ${e}: pad must be an integer when using dimRoundingMode ${n} but got pad ${t}.`));else{if("object"!=typeof t)throw Error(`Error in ${e}: Unknown padding parameter: ${t}`);t.forEach((t=>{t.forEach((t=>{s.hu(s.GN(t),(()=>`Error in ${e}: pad must be an integer when using dimRoundingMode ${n} but got pad ${t}.`))}))}))}}}},7832:(e,t,n)=>{"use strict";n.d(t,{m:()=>i});var s=n(1297),a=n(574),r=n(7641);const i=(0,n(6519).op)({cos_:function(e){const t={x:(0,r._1)(e,"x","cos","float32")};return s.BV.runKernel(a.mc4,t)}})},8880:(e,t,n)=>{"use strict";n.d(t,{f:()=>i});var s=n(1297),a=n(574),r=n(7641);const i=(0,n(6519).op)({cosh_:function(e){const t={x:(0,r._1)(e,"x","cosh","float32")};return s.BV.runKernel(a.TR1,t)}})},9319:(e,t,n)=>{"use strict";n.d(t,{$:()=>i});var s=n(1297),a=n(574),r=n(7641);const i=(0,n(6519).op)({cumprod_:function(e,t=0,n=!1,i=!1){const o={x:(0,r._1)(e,"x","cumprod")},l={axis:t,exclusive:n,reverse:i};return s.BV.runKernel(a.Byc,o,l)}})},4663:(e,t,n)=>{"use strict";n.d(t,{z:()=>i});var s=n(1297),a=n(574),r=n(7641);const i=(0,n(6519).op)({cumsum_:function(e,t=0,n=!1,i=!1){const o={x:(0,r._1)(e,"x","cumsum")},l={axis:t,exclusive:n,reverse:i};return s.BV.runKernel(a.iHb,o,l)}})},5213:(e,t,n)=>{"use strict";n.d(t,{n:()=>o});var s=n(1297),a=n(574),r=n(7641),i=n(7636);const o=(0,n(6519).op)({depthToSpace_:function(e,t,n="NHWC"){const o=(0,r._1)(e,"x","depthToSpace","float32"),l="NHWC"===n?o.shape[1]:o.shape[2],u="NHWC"===n?o.shape[2]:o.shape[3],c="NHWC"===n?o.shape[3]:o.shape[1];i.hu(t>1,(()=>`blockSize should be > 1 for depthToSpace, but was: ${t}`)),i.hu(l*t>=0,(()=>`Negative dimension size caused by overflow when multiplying\n    ${l} and ${t}  for depthToSpace with input shape\n    ${o.shape}`)),i.hu(u*t>=0,(()=>`Negative dimension size caused by overflow when multiplying\n    ${u} and ${t} for depthToSpace with input shape\n        ${o.shape}`)),i.hu(c%(t*t)==0,(()=>`Dimension size must be evenly divisible by ${t*t} but is ${c} for depthToSpace with input shape ${o.shape}`));const h={x:o},p={blockSize:t,dataFormat:n};return s.BV.runKernel(a.T0n,h,p)}})},1555:(e,t,n)=>{"use strict";n.d(t,{B:()=>c});var s=n(1297),a=n(574),r=n(7641),i=n(7636),o=n(4397),l=n(6519),u=n(7325);const c=(0,l.op)({depthwiseConv2d_:function(e,t,n,l,c="NHWC",h=[1,1],p){const d=(0,r._1)(e,"x","depthwiseConv2d","float32"),f=(0,r._1)(t,"filter","depthwiseConv2d","float32");let m=d,g=!1;3===d.rank&&(g=!0,m=(0,u.X)(d,[1,d.shape[0],d.shape[1],d.shape[2]])),i.hu(4===m.rank,(()=>`Error in depthwiseConv2d: input must be rank 4, but got rank ${m.rank}.`)),i.hu(4===f.rank,(()=>`Error in depthwiseConv2d: filter must be rank 4, but got rank ${f.rank}.`));const y="NHWC"===c?m.shape[3]:m.shape[1];i.hu(y===f.shape[2],(()=>`Error in depthwiseConv2d: number of input channels (${y}) must match the inChannels dimension in filter ${f.shape[2]}.`)),o.m("depthwiseConv2d",l,p);const b={x:m,filter:f},x={strides:n,pad:l,dataFormat:c,dilations:h,dimRoundingMode:p},v=s.BV.runKernel(a.cie,b,x);return g?(0,u.X)(v,[v.shape[1],v.shape[2],v.shape[3]]):v}})},9653:(e,t,n)=>{"use strict";n.d(t,{z:()=>o});var s=n(1297),a=n(574),r=n(6519),i=n(7325);const o=(0,r.op)({depthwiseConv2dNativeBackpropFilter_:function(e,t,n,r,o,l=[1,1],u){let c=e;3===e.rank&&(c=(0,i.X)(e,[1,e.shape[0],e.shape[1],e.shape[2]]));let h=t;3===h.rank&&(h=(0,i.X)(t,[1,t.shape[0],t.shape[1],t.shape[2]]));const p={x:c,dy:h},d={strides:r,pad:o,dimRoundingMode:u,dilations:l,filterShape:n};return s.BV.runKernel(a.sL$,p,d)}})},2203:(e,t,n)=>{"use strict";n.d(t,{v:()=>o});var s=n(1297),a=n(574),r=n(6519),i=n(7325);const o=(0,r.op)({depthwiseConv2dNativeBackpropInput_:function(e,t,n,r,o,l=[1,1],u){let c=t,h=!1;3===t.rank&&(h=!0,c=(0,i.X)(t,[1,t.shape[0],t.shape[1],t.shape[2]]));const p={dy:c,filter:n},d={strides:r,pad:o,dimRoundingMode:u,dilations:l,inputShape:e},f=s.BV.runKernel(a.y7R,p,d);return h?(0,i.X)(f,[f.shape[1],f.shape[2],f.shape[3]]):f}})},5274:(e,t,n)=>{"use strict";n.d(t,{W:()=>u});var s=n(1297),a=n(574),r=n(7641),i=n(7636),o=n(6519),l=n(7325);const u=(0,o.op)({dilation2d_:function(e,t,n,o,u=[1,1],c="NHWC"){const h=(0,r._1)(e,"x","dilation2d"),p=(0,r._1)(t,"filter","dilation2d");i.hu(3===h.rank||4===h.rank,(()=>`Error in dilation2d: input must be rank 3 or 4, but got rank ${h.rank}.`)),i.hu(3===p.rank,(()=>`Error in dilation2d: filter must be rank 3, but got rank ${p.rank}.`)),i.hu("NHWC"===c,(()=>`Error in dilation2d: Only NHWC is currently supported, but got dataFormat of ${c}`));let d=h,f=!1;3===h.rank&&(d=(0,l.X)(h,[1,h.shape[0],h.shape[1],h.shape[2]]),f=!0);const m={x:d,filter:p},g={strides:n,pad:o,dilations:u},y=s.BV.runKernel(a.p4S,m,g);return f?(0,l.X)(y,[y.shape[1],y.shape[2],y.shape[3]]):y}})},7232:(e,t,n)=>{"use strict";n.d(t,{h:()=>l});var s=n(1297),a=n(574),r=n(9932),i=n(7641),o=n(2609);const l=(0,n(6519).op)({div_:function(e,t){let n=(0,i._1)(e,"a","div"),l=(0,i._1)(t,"b","div");if([n,l]=(0,r.makeTypesMatch)(n,l),"int32"===n.dtype&&"int32"===l.dtype)return(0,o.q)(n,l);const u={a:n,b:l};return s.BV.runKernel(a.oHH,u,{})}})},8991:(e,t,n)=>{"use strict";n.d(t,{N:()=>c});var s=n(9932),a=n(7641),r=n(7232),i=n(7645),o=n(6519),l=n(5788),u=n(1181);const c=(0,o.op)({divNoNan_:function(e,t){let n=(0,a._1)(e,"a","div"),o=(0,a._1)(t,"b","div");[n,o]=(0,s.makeTypesMatch)(n,o);const c=(0,r.h)(n,o),h=(0,u.P)(c),p=(0,i.D)(o,h);return(0,l.a)(p,h,c)}})},6410:(e,t,n)=>{"use strict";n.d(t,{A:()=>l});var s=n(7641),a=n(7636),r=n(7962),i=n(6519),o=n(7325);const l=(0,i.op)({dot_:function(e,t){const n=(0,s._1)(e,"t1","dot"),i=(0,s._1)(t,"t2","dot");a.hu(!(1!==n.rank&&2!==n.rank||1!==i.rank&&2!==i.rank),(()=>`Error in dot: inputs must all be rank 1 or 2, but got ranks ${n.rank} and ${i.rank}.`));const l=1===n.rank?n.size:n.shape[1],u=1===i.rank?i.size:i.shape[0];if(a.hu(l===u,(()=>`Error in dot: inner dimensions of inputs must match, but got ${l} and ${u}.`)),1===n.rank&&1===i.rank){const e=(0,o.X)(n,[1,-1]),t=(0,o.X)(i,[-1,1]),s=(0,r.O)(e,t);return(0,o.X)(s,[])}if(1===n.rank&&2===i.rank){const e=(0,o.X)(n,[1,-1]),t=(0,o.X)(i,[i.shape[0],i.shape[1]]),s=(0,r.O)(e,t);return(0,o.X)(s,[s.size])}if(2===n.rank&&1===i.rank){const e=(0,o.X)(i,[-1,1]),t=(0,r.O)(n,e);return(0,o.X)(t,[t.size])}{const e=(0,o.X)(i,[i.shape[0],i.shape[1]]);return(0,r.O)(n,e)}}})},165:(e,t,n)=>{"use strict";n.d(t,{p:()=>i});var s=n(1297),a=n(574),r=n(7641);const i=(0,n(6519).op)({elu_:function(e){const t={x:(0,r._1)(e,"x","elu","float32")};return s.BV.runKernel(a.SX0,t)}})},7645:(e,t,n)=>{"use strict";n.d(t,{D:()=>l});var s=n(1297),a=n(574),r=n(9932),i=n(7641),o=n(6501);const l=(0,n(6519).op)({equal_:function(e,t){let n=(0,i._1)(e,"a","equal","string_or_numeric"),l=(0,i._1)(t,"b","equal","string_or_numeric");[n,l]=(0,r.makeTypesMatch)(n,l),(0,o.assertAndGetBroadcastShape)(n.shape,l.shape);const u={a:n,b:l};return s.BV.runKernel(a.hdR,u)}})},2597:(e,t,n)=>{"use strict";n.d(t,{q:()=>l});var s=n(1297),a=n(574),r=n(7641),i=n(7636),o=n(9028);const l=(0,n(6519).op)({erf_:function(e){let t=(0,r._1)(e,"x","erf");i.hu("int32"===t.dtype||"float32"===t.dtype,(()=>"Input dtype must be `int32` or `float32`.")),"int32"===t.dtype&&(t=(0,o.p)(t,"float32"));const n={x:t};return s.BV.runKernel(a.Omj,n)}})},7610:(e,t,n)=>{"use strict";n.d(t,{d:()=>a});var s=n(6772);const a=(0,n(6519).op)({euclideanNorm_:function(e,t=null,n=!1){return(0,s.K)(e,"euclidean",t,n)}})},5295:(e,t,n)=>{"use strict";n.d(t,{Q:()=>i});var s=n(1297),a=n(574),r=n(7641);const i=(0,n(6519).op)({exp_:function(e){const t={x:(0,r._1)(e,"x","exp")};return s.BV.runKernel(a.NEP,t)}})},8818:(e,t,n)=>{"use strict";n.d(t,{d:()=>o});var s=n(1297),a=n(574),r=n(7641),i=n(7636);const o=(0,n(6519).op)({expandDims_:function(e,t=0){const n=(0,r._1)(e,"x","expandDims","string_or_numeric");i.hu(t<=n.rank,(()=>"Axis must be <= rank of the tensor"));const o={input:n},l={dim:t};return s.BV.runKernel(a.YFo,o,l)}})},4888:(e,t,n)=>{"use strict";n.d(t,{t:()=>i});var s=n(1297),a=n(574),r=n(7641);const i=(0,n(6519).op)({expm1_:function(e){const t={x:(0,r._1)(e,"x","expm1")};return s.BV.runKernel(a.Y0y,t)}})},5321:(e,t,n)=>{"use strict";n.d(t,{h:()=>r});var s=n(1297),a=n(574);function r(e,t,n){const r={shape:e,value:t,dtype:n};return s.BV.runKernel(a.deh,{},r)}},154:(e,t,n)=>{"use strict";n.d(t,{G:()=>i});var s=n(1297),a=n(574),r=n(7641);const i=(0,n(6519).op)({floor_:function(e){const t={x:(0,r._1)(e,"x","floor","float32")};return s.BV.runKernel(a.OR,t)}})},2609:(e,t,n)=>{"use strict";n.d(t,{q:()=>o});var s=n(1297),a=n(574),r=n(9932),i=n(7641);const o=(0,n(6519).op)({floorDiv_:function(e,t){let n=(0,i._1)(e,"a","floorDiv"),o=(0,i._1)(t,"b","floorDiv");[n,o]=(0,r.makeTypesMatch)(n,o);const l={a:n,b:o};return s.BV.runKernel(a.jeX,l)}})},4324:(e,t,n)=>{"use strict";n.d(t,{Fr:()=>f,QH:()=>g,pf:()=>m,uy:()=>y});var s=n(6501),a=n(165),r=n(6567),i=n(5183),o=n(4100),l=n(1879),u=n(897),c=n(7325),h=n(1840),p=n(8329),d=n(5619);function f(e,t,n){if(null==n||"linear"===n)return e;if("relu"===n)return(0,i.d)(e,(0,p.N)(t));throw new Error(`Cannot compute gradient for fused activation ${n}.`)}function m(e,t){let n=t;const a=s.getReductionAxes(e.shape,t.shape);return a.length>0&&(n=(0,d.S)(n,a)),(0,c.X)(n,e.shape)}function g(e,t,n,s){if("linear"===t)return e;if("relu"===t)return(0,l.U)(e);if("elu"===t)return(0,a.p)(e);if("relu6"===t)return(0,u.b)(e);if("prelu"===t)return(0,o.A)(e,n);if("leakyrelu"===t)return(0,r.h)(e,s);if("sigmoid"===t)return(0,h.X)(e);throw new Error(`Unknown fused activation ${t}.`)}const y=(e,t)=>!(e>0)||"linear"===t},7260:(e,t,n)=>{"use strict";n.d(t,{I:()=>i});var s=n(1297),a=n(574),r=n(7641);const i=(0,n(6519).op)({gather_:function(e,t,n=0,i=0){const o={x:(0,r._1)(e,"x","gather"),indices:(0,r._1)(t,"indices","gather","int32")},l={axis:n,batchDims:i};return s.BV.runKernel(a.qi_,o,l)}})},7437:(e,t,n)=>{"use strict";n.d(t,{p:()=>l});var s=n(1297),a=n(574),r=n(9932),i=n(7641),o=n(6501);const l=(0,n(6519).op)({greater_:function(e,t){let n=(0,i._1)(e,"a","greater","string_or_numeric"),l=(0,i._1)(t,"b","greater","string_or_numeric");[n,l]=(0,r.makeTypesMatch)(n,l),(0,o.assertAndGetBroadcastShape)(n.shape,l.shape);const u={a:n,b:l};return s.BV.runKernel(a.iZT,u)}})},97:(e,t,n)=>{"use strict";n.d(t,{b:()=>l});var s=n(1297),a=n(574),r=n(9932),i=n(7641),o=n(6501);const l=(0,n(6519).op)({greaterEqual_:function(e,t){let n=(0,i._1)(e,"a","greaterEqual","string_or_numeric"),l=(0,i._1)(t,"b","greaterEqual","string_or_numeric");[n,l]=(0,r.makeTypesMatch)(n,l),(0,o.assertAndGetBroadcastShape)(n.shape,l.shape);const u={a:n,b:l};return s.BV.runKernel(a.Acj,u)}})},9456:(e,t,n)=>{"use strict";n.d(t,{a:()=>i});var s=n(1297),a=n(574),r=n(7641);const i=(0,n(6519).op)({imag_:function(e){const t={input:(0,r._1)(e,"input","imag")};return s.BV.runKernel(a.J_u,t)}})},4791:(e,t,n)=>{"use strict";n.d(t,{I:()=>u});var s=n(1297),a=n(574),r=n(7641),i=n(7636),o=n(6519),l=n(7325);const u=(0,o.op)({resizeBilinear_:function(e,t,n=!1,o=!1){const u=(0,r._1)(e,"images","resizeBilinear");i.hu(3===u.rank||4===u.rank,(()=>`Error in resizeBilinear: x must be rank 3 or 4, but got rank ${u.rank}.`)),i.hu(2===t.length,(()=>`Error in resizeBilinear: new shape must 2D, but got shape ${t}.`)),i.hu(!1===o||!1===n,(()=>"Error in resizeBilinear: If halfPixelCenters is true, alignCorners must be false."));let c=u,h=!1;3===u.rank&&(h=!0,c=(0,l.X)(u,[1,u.shape[0],u.shape[1],u.shape[2]]));const[]=t,p={images:c},d={alignCorners:n,halfPixelCenters:o,size:t},f=s.BV.runKernel(a._Yw,p,d);return h?(0,l.X)(f,[f.shape[1],f.shape[2],f.shape[3]]):f}})},2105:(e,t,n)=>{"use strict";n.d(t,{j:()=>u});var s=n(1297),a=n(574),r=n(7641),i=n(7636),o=n(6519),l=n(7325);const u=(0,o.op)({resizeNearestNeighbor_:function(e,t,n=!1,o=!1){const u=(0,r._1)(e,"images","resizeNearestNeighbor");i.hu(3===u.rank||4===u.rank,(()=>`Error in resizeNearestNeighbor: x must be rank 3 or 4, but got rank ${u.rank}.`)),i.hu(2===t.length,(()=>`Error in resizeNearestNeighbor: new shape must 2D, but got shape ${t}.`)),i.hu("float32"===u.dtype||"int32"===u.dtype,(()=>"`images` must have `int32` or `float32` as dtype")),i.hu(!1===o||!1===n,(()=>"Error in resizeNearestNeighbor: If halfPixelCenters is true, alignCorners must be false."));let c=u,h=!1;3===u.rank&&(h=!0,c=(0,l.X)(u,[1,u.shape[0],u.shape[1],u.shape[2]]));const[]=t,p={images:c},d={alignCorners:n,halfPixelCenters:o,size:t},f=s.BV.runKernel(a.dpD,p,d);return h?(0,l.X)(f,[f.shape[1],f.shape[2],f.shape[3]]):f}})},4401:(e,t,n)=>{"use strict";n.d(t,{x:()=>i});var s=n(1297),a=n(574),r=n(7641);const i=(0,n(6519).op)({isFinite_:function(e){const t={x:(0,r._1)(e,"x","isFinite")};return s.BV.runKernel(a.avt,t)}})},7135:(e,t,n)=>{"use strict";n.d(t,{U:()=>i});var s=n(1297),a=n(574),r=n(7641);const i=(0,n(6519).op)({isInf_:function(e){const t={x:(0,r._1)(e,"x","isInf")};return s.BV.runKernel(a.iWB,t)}})},2233:(e,t,n)=>{"use strict";n.d(t,{i:()=>i});var s=n(1297),a=n(574),r=n(7641);const i=(0,n(6519).op)({isNaN_:function(e){const t={x:(0,r._1)(e,"x","isNaN")};return s.BV.runKernel(a.r7n,t)}})},6567:(e,t,n)=>{"use strict";n.d(t,{h:()=>i});var s=n(1297),a=n(574),r=n(7641);const i=(0,n(6519).op)({leakyRelu_:function(e,t=.2){const n={x:(0,r._1)(e,"x","leakyRelu")},i={alpha:t};return s.BV.runKernel(a.J$2,n,i)}})},9026:(e,t,n)=>{"use strict";n.d(t,{d:()=>l});var s=n(1297),a=n(574),r=n(9932),i=n(7641),o=n(6501);const l=(0,n(6519).op)({less_:function(e,t){let n=(0,i._1)(e,"a","less","string_or_numeric"),l=(0,i._1)(t,"b","less","string_or_numeric");[n,l]=(0,r.makeTypesMatch)(n,l),(0,o.assertAndGetBroadcastShape)(n.shape,l.shape);const u={a:n,b:l};return s.BV.runKernel(a.vtC,u)}})},858:(e,t,n)=>{"use strict";n.d(t,{z:()=>l});var s=n(1297),a=n(574),r=n(9932),i=n(7641),o=n(6501);const l=(0,n(6519).op)({lessEqual_:function(e,t){let n=(0,i._1)(e,"a","lessEqual","string_or_numeric"),l=(0,i._1)(t,"b","lessEqual","string_or_numeric");[n,l]=(0,r.makeTypesMatch)(n,l),(0,o.assertAndGetBroadcastShape)(n.shape,l.shape);const u={a:n,b:l};return s.BV.runKernel(a.CAk,u)}})},2811:(e,t,n)=>{"use strict";n.d(t,{G:()=>u});var s=n(1297),a=n(574),r=n(7641),i=n(7636),o=n(6519),l=n(7325);const u=(0,o.op)({localResponseNormalization_:function(e,t=5,n=1,o=1,u=.5){const c=(0,r._1)(e,"x","localResponseNormalization");i.hu(4===c.rank||3===c.rank,(()=>`Error in localResponseNormalization: x must be rank 3 or 4 but got\n               rank ${c.rank}.`)),i.hu(i.GN(t),(()=>`Error in localResponseNormalization: depthRadius must be an integer but got depthRadius ${t}.`));let h=c,p=!1;3===c.rank&&(p=!0,h=(0,l.X)(c,[1,c.shape[0],c.shape[1],c.shape[2]]));const d={x:h},f={depthRadius:t,bias:n,alpha:o,beta:u},m=s.BV.runKernel(a.eZ0,d,f);return p?(0,l.X)(m,[m.shape[1],m.shape[2],m.shape[3]]):m}})},1661:(e,t,n)=>{"use strict";n.d(t,{c:()=>i});var s=n(1297),a=n(574),r=n(7641);const i=(0,n(6519).op)({log_:function(e){const t={x:(0,r._1)(e,"x","log","float32")};return s.BV.runKernel(a.ZbH,t)}})},5813:(e,t,n)=>{"use strict";n.d(t,{K:()=>i});var s=n(1297),a=n(574),r=n(7641);const i=(0,n(6519).op)({log1p_:function(e){const t={x:(0,r._1)(e,"x","log1p")};return s.BV.runKernel(a.kU,t)}})},7332:(e,t,n)=>{"use strict";n.d(t,{e:()=>c});var s=n(6537),a=n(7641),r=n(5183),i=n(5699),o=n(6519),l=n(1840),u=n(913);const c=(0,o.op)({logSigmoid_:function(e){const t=(0,a._1)(e,"x","logSigmoid"),n=(0,s.cb)((e=>({value:(0,i.W)((0,u.W)((0,i.W)(e))),gradFunc:t=>(0,r.d)(t,(0,l.X)((0,i.W)(e)))})));return n(t)}})},9170:(e,t,n)=>{"use strict";n.d(t,{C:()=>d});var s=n(6537),a=n(7641),r=n(9028),i=n(5295),o=n(1661),l=n(6963),u=n(5183),c=n(6519),h=n(3189),p=n(5619);const d=(0,c.op)({logSoftmax_:function(e,t=-1){const n=(0,a._1)(e,"logits","logSoftmax");if(-1===t&&(t=n.rank-1),t!==n.rank-1)throw Error(`Log Softmax along a non-last dimension is not yet supported. Logits was rank ${n.rank} and axis was ${t}`);const c=(0,s.cb)(((e,n)=>{const s=(0,l.F)(e,t,!0),a=(0,h.l)(e,s),c=(0,h.l)((0,r.p)(a,"float32"),(0,o.c)((0,p.S)((0,i.Q)(a),t,!0)));return n([c]),{value:c,gradFunc:(e,n)=>{const[s]=n,a=(0,i.Q)(s);return(0,h.l)(e,(0,u.d)((0,p.S)(e,t,!0),a))}}}));return c(n)}})},7532:(e,t,n)=>{"use strict";n.d(t,{l:()=>f});var s=n(7641),a=n(7636),r=n(7862),i=n(1878),o=n(5295),l=n(1661),u=n(6963),c=n(6519),h=n(7325),p=n(3189),d=n(5619);const f=(0,c.op)({logSumExp_:function(e,t=null,n=!1){const c=(0,s._1)(e,"x","logSumExp"),f=(0,a.EC)(t,c.shape),m=(0,u.F)(c,f,!0),g=(0,p.l)(c,m),y=(0,o.Q)(g),b=(0,d.S)(y,f),x=(0,l.c)(b),v=(0,r.I)((0,h.X)(m,x.shape),x);if(n){const e=(0,i.rv)(v.shape,f);return(0,h.X)(v,e)}return v}})},1704:(e,t,n)=>{"use strict";n.d(t,{H:()=>o});var s=n(1297),a=n(574),r=n(7641),i=n(6501);const o=(0,n(6519).op)({logicalAnd_:function(e,t){const n=(0,r._1)(e,"a","logicalAnd","bool"),o=(0,r._1)(t,"b","logicalAnd","bool");(0,i.assertAndGetBroadcastShape)(n.shape,o.shape);const l={a:n,b:o};return s.BV.runKernel(a.PYm,l)}})},9321:(e,t,n)=>{"use strict";n.d(t,{h:()=>i});var s=n(1297),a=n(574),r=n(7641);const i=(0,n(6519).op)({logicalNot_:function(e){const t={x:(0,r._1)(e,"x","logicalNot","bool")};return s.BV.runKernel(a.VfG,t)}})},7508:(e,t,n)=>{"use strict";n.d(t,{K:()=>o});var s=n(1297),a=n(574),r=n(7641),i=n(6501);const o=(0,n(6519).op)({logicalOr_:function(e,t){const n=(0,r._1)(e,"a","logicalOr","bool"),o=(0,r._1)(t,"b","logicalOr","bool");(0,i.assertAndGetBroadcastShape)(n.shape,o.shape);const l={a:n,b:o};return s.BV.runKernel(a.MZg,l)}})},4805:(e,t,n)=>{"use strict";n.d(t,{e:()=>l});var s=n(7641),a=n(6501),r=n(1704),i=n(9321),o=n(7508);const l=(0,n(6519).op)({logicalXor_:function(e,t){const n=(0,s._1)(e,"a","logicalXor","bool"),l=(0,s._1)(t,"b","logicalXor","bool");return(0,a.assertAndGetBroadcastShape)(n.shape,l.shape),(0,r.H)((0,o.K)(e,t),(0,i.h)((0,r.H)(e,t)))}})},227:(e,t,n)=>{"use strict";var s;n.d(t,{I:()=>s}),function(e){e[e.NONE=0]="NONE",e[e.MEAN=1]="MEAN",e[e.SUM=2]="SUM",e[e.SUM_BY_NONZERO_WEIGHTS=3]="SUM_BY_NONZERO_WEIGHTS"}(s||(s={}))},7962:(e,t,n)=>{"use strict";n.d(t,{O:()=>o});var s=n(1297),a=n(574),r=n(9932),i=n(7641);const o=(0,n(6519).op)({matMul_:function(e,t,n=!1,o=!1){let l=(0,i._1)(e,"a","matMul"),u=(0,i._1)(t,"b","matMul");[l,u]=(0,r.makeTypesMatch)(l,u);const c={a:l,b:u},h={transposeA:n,transposeB:o};return s.BV.runKernel(a.XLW,c,h)}})},6963:(e,t,n)=>{"use strict";n.d(t,{F:()=>i});var s=n(1297),a=n(574),r=n(7641);const i=(0,n(6519).op)({max_:function(e,t=null,n=!1){const i={x:(0,r._1)(e,"x","max")},o={reductionIndices:t,keepDims:n};return s.BV.runKernel(a.YoZ,i,o)}})},4400:(e,t,n)=>{"use strict";n.d(t,{_:()=>c});var s=n(1297),a=n(574),r=n(7641),i=n(7636),o=n(4397),l=n(6519),u=n(7325);const c=(0,l.op)({maxPool_:function(e,t,n,l,c){const h=(0,r._1)(e,"x","maxPool");let p=h,d=!1;3===h.rank&&(d=!0,p=(0,u.X)(h,[1,h.shape[0],h.shape[1],h.shape[2]])),i.hu(4===p.rank,(()=>`Error in maxPool: input must be rank 4 but got rank ${p.rank}.`)),i.hu(o.jT(n,1),(()=>`Error in maxPool: Either strides or dilations must be 1. Got strides ${n} and dilations '1'`)),o.m("maxPool",l,c);const f={x:p},m={filterSize:t,strides:n,pad:l,dimRoundingMode:c},g=s.BV.runKernel(a.mTV,f,m);return d?(0,u.X)(g,[g.shape[1],g.shape[2],g.shape[3]]):g}})},4734:(e,t,n)=>{"use strict";n.d(t,{g:()=>u});var s=n(1297),a=n(574),r=n(9932),i=n(7641),o=n(6501),l=n(9028);const u=(0,n(6519).op)({maximum_:function(e,t){let n=(0,i._1)(e,"a","maximum"),u=(0,i._1)(t,"b","maximum");[n,u]=(0,r.makeTypesMatch)(n,u),"bool"===n.dtype&&(n=(0,l.p)(n,"int32"),u=(0,l.p)(u,"int32")),(0,o.assertAndGetBroadcastShape)(n.shape,u.shape);const c={a:n,b:u};return s.BV.runKernel(a.BMI,c)}})},4506:(e,t,n)=>{"use strict";n.d(t,{J:()=>i});var s=n(1297),a=n(574),r=n(7641);const i=(0,n(6519).op)({mean_:function(e,t=null,n=!1){const i={x:(0,r._1)(e,"x","mean")},o={axis:t,keepDims:n};return s.BV.runKernel(a.q2K,i,o)}})},8014:(e,t,n)=>{"use strict";n.d(t,{V:()=>i});var s=n(1297),a=n(574),r=n(7641);const i=(0,n(6519).op)({min_:function(e,t=null,n=!1){const i={x:(0,r._1)(e,"x","min")},o={axis:t,keepDims:n};return s.BV.runKernel(a.c17,i,o)}})},7256:(e,t,n)=>{"use strict";n.d(t,{L:()=>u});var s=n(1297),a=n(574),r=n(9932),i=n(7641),o=n(6501),l=n(9028);const u=(0,n(6519).op)({minimum_:function(e,t){let n=(0,i._1)(e,"a","minimum"),u=(0,i._1)(t,"b","minimum");[n,u]=(0,r.makeTypesMatch)(n,u),"bool"===n.dtype&&(n=(0,l.p)(n,"int32"),u=(0,l.p)(u,"int32")),(0,o.assertAndGetBroadcastShape)(n.shape,u.shape);const c={a:n,b:u};return s.BV.runKernel(a.q8u,c)}})},401:(e,t,n)=>{"use strict";n.d(t,{V:()=>o});var s=n(1297),a=n(574),r=n(7641),i=n(7636);const o=(0,n(6519).op)({mirrorPad_:function(e,t,n){i.hu("reflect"===n||"symmetric"===n,(()=>`Invalid mode. Mode must be either reflect or symmetric. Got ${n}.`));const o=(0,r._1)(e,"x","mirrorPad");if(0===o.rank)throw new Error("mirrorPad(scalar) is not defined. Pass non-scalar to mirrorPad");i.hu(t.length===o.rank,(()=>`Padding doesn't match input. Must be ${o.rank}. Got ${t.length}.`));const l="reflect"===n?1:0;for(let e=0;e<o.rank;e++)i.hu(2===t[e].length,(()=>"Invalid number of paddings. Must be length of 2 each.")),i.hu(t[e][0]>=0&&t[e][0]<=o.shape[e]-l&&t[e][1]>=0&&t[e][1]<=o.shape[e]-l,(()=>`Padding in dimension ${e} cannot be greater than or equal to ${o.shape[e]-l} or less than 0 for input of shape ${o.shape}`));const u={paddings:t,mode:n},c={x:o};return s.BV.runKernel(a.jQs,c,u)}})},2907:(e,t,n)=>{"use strict";n.d(t,{w:()=>o});var s=n(1297),a=n(574),r=n(9932),i=n(7641);const o=(0,n(6519).op)({mod_:function(e,t){let n=(0,i._1)(e,"a","mod"),o=(0,i._1)(t,"b","mod");[n,o]=(0,r.makeTypesMatch)(n,o);const l={a:n,b:o};return s.BV.runKernel(a.Vbg,l)}})},5183:(e,t,n)=>{"use strict";n.d(t,{d:()=>o});var s=n(1297),a=n(574),r=n(9932),i=n(7641);const o=(0,n(6519).op)({mul_:function(e,t){let n=(0,i._1)(e,"a","mul"),o=(0,i._1)(t,"b","mul");[n,o]=(0,r.makeTypesMatch)(n,o);const l={a:n,b:o};return s.BV.runKernel(a.wYn,l)}})},5699:(e,t,n)=>{"use strict";n.d(t,{W:()=>i});var s=n(1297),a=n(574),r=n(7641);const i=(0,n(6519).op)({neg_:function(e){const t={x:(0,r._1)(e,"x","neg")};return s.BV.runKernel(a.kuV,t)}})},6772:(e,t,n)=>{"use strict";n.d(t,{K:()=>y});var s=n(7641),a=n(7636),r=n(9938),i=n(1878),o=n(6963),l=n(8014),u=n(6519),c=n(1483),h=n(7325),p=n(503),d=n(2402),f=n(3061),m=n(5619);function g(e,t,n=null){if(0===e.rank)return(0,r.W)(e);if(1!==e.rank&&null===n)return g((0,h.X)(e,[-1]),t,n);if(1===e.rank||"number"==typeof n||Array.isArray(n)&&1===n.length){if(1===t)return(0,m.S)((0,r.W)(e),n);if(t===1/0)return(0,o.F)((0,r.W)(e),n);if(t===-1/0)return(0,l.V)((0,r.W)(e),n);if("euclidean"===t||2===t)return(0,d._)((0,m.S)((0,c.s)((0,r.W)(e),(0,p.i)(2,"int32")),n));throw new Error(`Error in norm: invalid ord value: ${t}`)}if(Array.isArray(n)&&2===n.length){if(1===t)return(0,o.F)((0,m.S)((0,r.W)(e),n[0]),n[1]-1);if(t===1/0)return(0,o.F)((0,m.S)((0,r.W)(e),n[1]),n[0]);if(t===-1/0)return(0,l.V)((0,m.S)((0,r.W)(e),n[1]),n[0]);if("fro"===t||"euclidean"===t)return(0,d._)((0,m.S)((0,f.h)(e),n));throw new Error(`Error in norm: invalid ord value: ${t}`)}throw new Error(`Error in norm: invalid axis: ${n}`)}const y=(0,u.op)({norm_:function(e,t="euclidean",n=null,r=!1){const o=g(e=(0,s._1)(e,"x","norm"),t,n);let l=o.shape;if(r){const t=(0,a.EC)(n,e.shape);l=i.rv(o.shape,t)}return(0,h.X)(o,l)}})},7289:(e,t,n)=>{"use strict";n.d(t,{Q:()=>l});var s=n(1297),a=n(574),r=n(9932),i=n(7641),o=n(6501);const l=(0,n(6519).op)({notEqual_:function(e,t){let n=(0,i._1)(e,"a","notEqual","string_or_numeric"),l=(0,i._1)(t,"b","notEqual","string_or_numeric");[n,l]=(0,r.makeTypesMatch)(n,l),(0,o.assertAndGetBroadcastShape)(n.shape,l.shape);const u={a:n,b:l};return s.BV.runKernel(a.yQU,u)}})},1222:(e,t,n)=>{"use strict";n.d(t,{l:()=>i});var s=n(1297),a=n(574),r=n(7641);const i=(0,n(6519).op)({oneHot_:function(e,t,n=1,i=0,o="int32"){if(t<2)throw new Error(`Error in oneHot: depth must be >=2, but it is ${t}`);const l={indices:(0,r._1)(e,"indices","oneHot","int32")},u={dtype:o,depth:t,onValue:n,offValue:i};return s.BV.runKernel(a.we_,l,u)}})},190:(e,t,n)=>{"use strict";n.d(t,{i:()=>o});var s=n(1297),a=n(7636),r=n(9943),i=n(6373);function o(e,t="float32"){if("complex64"===t){const t=o(e,"float32"),n=(0,i.l)(e,"float32");return(0,r.P)(t,n)}const n=(0,a.p8)((0,a.NA)(e),t);return s.BV.makeTensor(n,e,t)}},9734:(e,t,n)=>{"use strict";n.d(t,{J:()=>i});var s=n(1297),a=n(574),r=n(7641);const i=(0,n(6519).op)({onesLike_:function(e){const t={x:(0,r._1)(e,"x","onesLike")};return s.BV.runKernel(a.qWM,t)}})},6519:(e,t,n)=>{"use strict";n.d(t,{op:()=>i,z:()=>r});var s=n(1297),a=n(7636);const r="__op";function i(e){const t=Object.keys(e);if(1!==t.length)throw new Error(`Please provide an object with a single key (operation name) mapping to a function. Got an object with ${t.length} keys.`);let n=t[0];const i=e[n];n.endsWith("_")&&(n=n.substring(0,n.length-1)),n+=r;const o=(...e)=>{s.BV.startScope(n);try{const t=i(...e);return(0,a.tI)(t)&&console.error("Cannot return a Promise inside of tidy."),s.BV.endScope(t),t}catch(e){throw s.BV.endScope(null),e}};return Object.defineProperty(o,"name",{value:n,configurable:!0}),o}},4689:(e,t,n)=>{"use strict";n.d(t,{zvA:()=>p.z,WnP:()=>a.W,Khb:()=>r.K,__u:()=>i._,IHx:()=>o.I,QBD:()=>d,$6P:()=>f.$,YjB:()=>m.Y,NqF:()=>g.N,vHJ:()=>y.v,ZRM:()=>b.Z,VfV:()=>x.V,z4N:()=>v.z,fvJ:()=>w.f,C80:()=>k.C,wS1:()=>I.w,uR5:()=>C,zEQ:()=>D,tgs:()=>M.t,Dxk:()=>z,JY5:()=>L,p3b:()=>B,E4h:()=>O.E,yE8:()=>P,anm:()=>Yn,XsQ:()=>V,UFq:()=>W.U,f3b:()=>U.f,pju:()=>N.p,mDi:()=>G.m,iUl:()=>H.i,d9v:()=>q.d,PYB:()=>X.P,zoF:()=>$.z,gME:()=>j,Izb:()=>K,MNy:()=>Y,ZaL:()=>Z,PAt:()=>Q.P,Tek:()=>J.T,bc:()=>ee.b,pdZ:()=>te,$QV:()=>se,mCk:()=>ae.m,f9Y:()=>re.f,mew:()=>os,$Gn:()=>ie.$,zbp:()=>oe.z,ppE:()=>le,nTT:()=>ue.n,B10:()=>ce.B,Ka3:()=>he,WmZ:()=>pe.W,hiC:()=>de.h,NTj:()=>fe.N,AKD:()=>me.A,rvX:()=>rs,WYO:()=>ge,pyx:()=>ye.p,GRh:()=>is,DgJ:()=>be.D,qNN:()=>xe.q,d2q:()=>ve.d,Qqt:()=>we.Q,dt4:()=>ke.d,t$B:()=>Ie.t,iyy:()=>Ne,kp_:()=>yn.k,hlL:()=>Te.h,GWj:()=>Ce.G,qPi:()=>$e.q,imm:()=>s,Iqj:()=>Ee.I,dbB:()=>as,pjt:()=>_e.p,brS:()=>Ae.b,Sxn:()=>bn.S,asL:()=>Re.a,BHj:()=>ia,V3u:()=>ls,wx0:()=>xn.w,xVT:()=>Fe.x,UWc:()=>De.U,i2d:()=>Oe.i,hi7:()=>Me.h,d9m:()=>ze.d,zN1:()=>Le.z,$r2:()=>oa,SX3:()=>Be,G9k:()=>Pe.G,cM7:()=>Ve.c,Krr:()=>We.K,e_t:()=>Ue.e,CmS:()=>Ge.C,l_t:()=>He.l,HvI:()=>qe.H,hJK:()=>Xe.h,K5V:()=>je.K,egP:()=>Ke.e,MB5:()=>la,eab:()=>Qe,OI3:()=>E.O,Fp7:()=>Je.F,_sB:()=>et._,YQQ:()=>tt,Ip$:()=>nt,gWQ:()=>st.g,J69:()=>at.J,ry_:()=>ot,VV$:()=>lt.V,LTh:()=>ut.L,VdP:()=>ct.V,wQq:()=>ht.w,Gi7:()=>mt,p_:()=>es,dC7:()=>_.d,rq4:()=>gt,SJ_:()=>yt,W76:()=>bt.W,KOy:()=>Qn.K,Quu:()=>xt.Q,lfX:()=>vt.l,iUs:()=>rt.i,JpU:()=>wt.J,op:()=>p.op,N2O:()=>kt,vku:()=>It.v,pNR:()=>St,koy:()=>Nt,t1L:()=>Tt,lGY:()=>Ct,d_R:()=>$t.d,sQ3:()=>Et.s,AL3:()=>_t.A,S0v:()=>At.S,WVs:()=>Rt.W,$gW:()=>Ft,N89:()=>Dt,TN_:()=>Ot,wzB:()=>Pt,nGf:()=>Vt,ruB:()=>Wt,LGj:()=>Ut,w6H:()=>Gt,kwC:()=>Ht.k,M25:()=>qt.M,UYe:()=>Xt.U,btT:()=>jt.b,XLQ:()=>T.X,GYS:()=>Kt.G,SDf:()=>Yt,diP:()=>Zt,sx7:()=>Qt,mG2:()=>Jt,QEs:()=>vn.Q,NMM:()=>en.N,bp0:()=>tn.b,iD$:()=>nn.i,snQ:()=>ns,zcT:()=>Ze,U8D:()=>sn.U,U_I:()=>an.U,ODp:()=>rn,XD2:()=>A.X,Xxe:()=>on.X,tdS:()=>ra,O$l:()=>ln.O,R_K:()=>un.R,tPi:()=>R.t,jZU:()=>cn,SmN:()=>hn,CnO:()=>pn,p0P:()=>dn,XAC:()=>fn.X,Wvh:()=>mn.W,fBT:()=>gn.f,rVs:()=>ua,ers:()=>ss,uN7:()=>aa,Vl2:()=>wn.V,_b3:()=>kn._,h62:()=>dt.h,$i:()=>In.$,L9e:()=>Sn.L,knu:()=>Nn.k,Nbs:()=>Tn.N,NXj:()=>Cn.N,Z_8:()=>ca,luU:()=>ft.l,Smz:()=>$n.S,ORZ:()=>En.O,AEp:()=>F.A,XeE:()=>_n.X,RRF:()=>Rn,odF:()=>Fn,wOQ:()=>Dn.w,yXz:()=>On,Bfx:()=>Mn,xZs:()=>zn,Gg6:()=>Se.G,hg7:()=>Ln.h,p4s:()=>Zn.p,Xu6:()=>Bn,Two:()=>Pn.T,pUJ:()=>Vn.p,HHK:()=>Wn.H,GaM:()=>Un,VD$:()=>Gn,arb:()=>Hn.a,itS:()=>Xn,lls:()=>jn.l,P84:()=>Kn.P});var s={};n.r(s),n.d(s,{conv2d:()=>fs,depthwiseConv2d:()=>ys,matMul:()=>bs});var a=n(9938),r=n(1712),i=n(9714),o=n(7862),l=n(1297),u=n(574),c=n(7641),h=n(7636),p=n(6519);const d=(0,p.op)({addN_:function(e){h.hu(Array.isArray(e),(()=>"The argument passed to tf.addN() must be a list of tensors")),h.hu(e.length>=1,(()=>`Must pass at least one tensor to tf.addN(), but got ${e.length}`));const t=e.map(((e,t)=>(0,c._1)(e,`tensors${t}`,"addN"))),n=t[0];t.forEach((e=>{if(e.dtype!==n.dtype)throw new Error("All tensors passed to tf.addN() must have the same dtype")})),t.forEach((e=>{if(!h.cO(e.shape,n.shape))throw new Error("All tensors passed to tf.addN() must have the same shape")}));const s=t;return l.BV.runKernel(u.Xze,s)}});var f=n(456),m=n(5567),g=n(5725),y=n(2698),b=n(507),x=n(9080),v=n(3079),w=n(5511),k=n(6241),I=n(3766),S=n(4397),N=n(9028),T=n(7325);const C=(0,p.op)({avgPool3d_:function(e,t,n,s,a,r="NDHWC"){const i=(0,c._1)(e,"x","avgPool3d","float32");let o=i,p=!1;4===i.rank&&(p=!0,o=(0,T.X)(i,[1,i.shape[0],i.shape[1],i.shape[2],i.shape[3]])),h.hu(5===o.rank,(()=>`Error in avgPool3d: x must be rank 5 but got rank ${o.rank}.`)),h.hu("NDHWC"===r,(()=>`Error in avgPool3d: Only NDHWC is currently supported, but got dataFormat of ${r}`)),(0,S.m)("avgPool3d",s,a);const d={x:o},f={filterSize:t,strides:n,pad:s,dimRoundingMode:a,dataFormat:r};let m=l.BV.runKernel(u._k9,d,f);return m=(0,N.p)(m,o.dtype),p?(0,T.X)(m,[m.shape[1],m.shape[2],m.shape[3],m.shape[4]]):m}});var $=n(5041),E=n(7962),_=n(5183),A=n(1840),R=n(6616),F=n(7491);const D=(0,p.op)({basicLSTMCell_:function(e,t,n,s,a,r){const i=(0,c._1)(e,"forgetBias","basicLSTMCell"),l=(0,c._1)(t,"lstmKernel","basicLSTMCell"),u=(0,c._1)(n,"lstmBias","basicLSTMCell"),h=(0,c._1)(s,"data","basicLSTMCell"),p=(0,c._1)(a,"c","basicLSTMCell"),d=(0,c._1)(r,"h","basicLSTMCell"),f=(0,$.z)([h,d],1),m=(0,E.O)(f,l),g=(0,o.I)(m,u),y=g.shape[0],b=g.shape[1]/4,x=[y,b],v=(0,R.t)(g,[0,0],x),w=(0,R.t)(g,[0,b],x),k=(0,R.t)(g,[0,2*b],x),I=(0,R.t)(g,[0,3*b],x),S=(0,o.I)((0,_.d)((0,A.X)(v),(0,F.A)(w)),(0,_.d)(p,(0,A.X)((0,o.I)(i,k))));return[S,(0,_.d)((0,F.A)(S),(0,A.X)(I))]}});var O=n(2854),M=n(3490);const z=(0,p.op)({batchNorm2d_:function(e,t,n,s,a,r){const i=(0,c._1)(e,"x","batchNorm"),o=(0,c._1)(t,"mean","batchNorm"),l=(0,c._1)(n,"variance","batchNorm");let u,p;return null!=a&&(u=(0,c._1)(a,"scale","batchNorm")),null!=s&&(p=(0,c._1)(s,"offset","batchNorm")),h.hu(2===i.rank,(()=>`Error in batchNorm2D: x must be rank 2 but got rank ${i.rank}.`)),h.hu(2===o.rank||1===o.rank,(()=>`Error in batchNorm2D: mean must be rank 2 or rank 1 but got rank ${o.rank}.`)),h.hu(2===l.rank||1===l.rank,(()=>`Error in batchNorm2D: variance must be rank 2 or rank 1 but got rank ${l.rank}.`)),null!=u&&h.hu(2===u.rank||1===u.rank,(()=>`Error in batchNorm2D: scale must be rank 2 or rank 1 but got rank ${u.rank}.`)),null!=p&&h.hu(2===p.rank||1===p.rank,(()=>`Error in batchNorm2D: offset must be rank 2 or rank 1 but got rank ${p.rank}.`)),(0,M.t)(i,o,l,p,u,r)}}),L=(0,p.op)({batchNorm3d_:function(e,t,n,s,a,r){const i=(0,c._1)(e,"x","batchNorm"),o=(0,c._1)(t,"mean","batchNorm"),l=(0,c._1)(n,"variance","batchNorm");let u,p;return null!=a&&(u=(0,c._1)(a,"scale","batchNorm")),null!=s&&(p=(0,c._1)(s,"offset","batchNorm")),h.hu(3===i.rank,(()=>`Error in batchNorm3D: x must be rank 3 but got rank ${i.rank}.`)),h.hu(3===o.rank||1===o.rank,(()=>`Error in batchNorm3D: mean must be rank 3 or rank 1 but got rank ${o.rank}.`)),h.hu(3===l.rank||1===l.rank,(()=>`Error in batchNorm3D: variance must be rank 3 or rank 1 but got rank ${l.rank}.`)),null!=u&&h.hu(3===u.rank||1===u.rank,(()=>`Error in batchNorm3D: scale must be rank 3 or rank 1 but got rank ${u.rank}.`)),null!=p&&h.hu(3===p.rank||1===p.rank,(()=>`Error in batchNorm3D: offset must be rank 3 or rank 1 but got rank ${p.rank}.`)),(0,M.t)(i,o,l,p,u,r)}}),B=(0,p.op)({batchNorm4d_:function(e,t,n,s,a,r){const i=(0,c._1)(e,"x","batchNorm"),o=(0,c._1)(t,"mean","batchNorm"),l=(0,c._1)(n,"variance","batchNorm");let u,p;return null!=a&&(u=(0,c._1)(a,"scale","batchNorm")),null!=s&&(p=(0,c._1)(s,"offset","batchNorm")),h.hu(4===i.rank,(()=>`Error in batchNorm4D: x must be rank 4 but got rank ${i.rank}.`)),h.hu(4===o.rank||1===o.rank,(()=>`Error in batchNorm4D: mean must be rank 4 or rank 1 but got rank ${o.rank}.`)),h.hu(4===l.rank||1===l.rank,(()=>`Error in batchNorm4D: variance must be rank 4 or rank 1 but got rank ${l.rank}.`)),null!=u&&h.hu(4===u.rank||1===u.rank,(()=>`Error in batchNorm4D: scale must be rank 4 or rank 1 but got rank ${u.rank}.`)),null!=p&&h.hu(4===p.rank||1===p.rank,(()=>`Error in batchNorm4D: offset must be rank 4 or rank 1 but got rank ${p.rank}.`)),(0,M.t)(i,o,l,p,u,r)}}),P=(0,p.op)({bincount_:function(e,t,n){const s=(0,c._1)(e,"x","bincount"),a=(0,c._1)(t,"weights","bincount");h.hu("int32"===s.dtype,(()=>`Error in bincount: input dtype must be int32, but got ${s.dtype}`)),h.hu(n>=0,(()=>`size must be non-negative, but got ${n}.`)),h.hu(a.size===s.size||0===a.size,(()=>`Error in bincount: weights must have the same size as input or0-length, but got input shape: ${s.shape}, weights shape: ${a.shape}.`));const r={x:s,weights:a},i={size:n};return l.BV.runKernel(u.zvY,r,i)}}),V=(0,p.op)({broadcastArgs_:function(e,t){const n=(0,c._1)(e,"s0","broadcastArgs","int32"),s=(0,c._1)(t,"s1","broadcastArgs","int32");if(1!==n.rank)throw new Error(`broadcastArgs(): first input must be a vector (rank=1). Has rank ${n.rank}`);if(1!==s.rank)throw new Error(`broadcastArgs(): second input must be a vector (rank=1). Has rank ${s.rank}`);const a={s0:n,s1:s};return l.BV.runKernel(u.eEB,a)}});var W=n(6833),U=n(3259),G=n(7382),H=n(229),q=n(7676),X=n(9943);const j=(0,p.op)({concat1d_:function(e){return(0,$.z)(e,0)}}),K=(0,p.op)({concat2d_:function(e,t){return(0,$.z)(e,t)}}),Y=(0,p.op)({concat3d_:function(e,t){return(0,$.z)(e,t)}}),Z=(0,p.op)({concat4d_:function(e,t){return(0,$.z)(e,t)}});var Q=n(3373),J=n(5294),ee=n(8436);const te=(0,p.op)({conv3d_:function(e,t,n,s,a="NDHWC",r=[1,1,1]){const i=(0,c._1)(e,"x","conv3d"),o=(0,c._1)(t,"filter","conv3d");let p=i,d=!1;4===i.rank&&(d=!0,p=(0,T.X)(i,[1,i.shape[0],i.shape[1],i.shape[2],i.shape[3]])),h.hu(5===p.rank,(()=>`Error in conv3d: input must be rank 5, but got rank ${p.rank}.`)),h.hu(5===o.rank,(()=>`Error in conv3d: filter must be rank 5, but got rank ${o.rank}.`)),h.hu(p.shape[4]===o.shape[3],(()=>`Error in conv3d: depth of input (${p.shape[4]}) must match input depth for filter ${o.shape[3]}.`)),h.hu((0,S.jT)(n,r),(()=>`Error in conv3D: Either strides or dilations must be 1. Got strides ${n} and dilations '${r}'`)),h.hu("NDHWC"===a,(()=>`Error in conv3d: got dataFormat of ${a} but only NDHWC is currently supported.`));const f={x:p,filter:o},m={strides:n,pad:s,dataFormat:a,dilations:r},g=l.BV.runKernel(u.x12,f,m);return d?(0,T.X)(g,[g.shape[1],g.shape[2],g.shape[3],g.shape[4]]):g}});var ne=n(7455);const se=(0,p.op)({conv3dTranspose_:function(e,t,n,s,a){const r=(0,c._1)(e,"x","conv3dTranspose"),i=(0,c._1)(t,"filter","conv3dTranspose");return(0,ne._)(n,r,i,s,a)}});var ae=n(7832),re=n(8880),ie=n(9319),oe=n(4663);const le=(0,p.op)({denseBincount_:function(e,t,n,s=!1){const a=(0,c._1)(e,"x","denseBincount"),r=(0,c._1)(t,"weights","denseBincount");h.hu("int32"===a.dtype,(()=>`Error in denseBincount: input dtype must be int32, but got ${a.dtype}`)),h.hu(a.rank<=2,(()=>`Error in denseBincount: input must be at most rank 2, but got rank ${a.rank}.`)),h.hu(n>=0,(()=>`size must be non-negative, but got ${n}.`)),h.hu(r.size===a.size||0===r.size,(()=>`Error in denseBincount: weights must have the same shape as x or 0-length, but got x shape: ${a.shape}, weights shape: ${r.shape}.`));const i={x:a,weights:r},o={size:n,binaryOutput:s};return l.BV.runKernel(u.QRR,i,o)}});var ue=n(5213),ce=n(1555);const he=(0,p.op)({diag_:function(e){const t={x:(0,c._1)(e,"x","diag")};return l.BV.runKernel(u.$w,t)}});var pe=n(5274),de=n(7232),fe=n(8991),me=n(6410);const ge=(0,p.op)({einsum_:function(e,...t){const n=t.map(((e,t)=>(0,c._1)(e,`tensors${t}`,"einsum"))),s={equation:e};return l.BV.runKernel(u.$g6,n,s)}});var ye=n(165),be=n(7645),xe=n(2597),ve=n(7610),we=n(5295),ke=n(8818),Ie=n(4888),Se=n(9650);const Ne=(0,p.op)({eye_:function(e,t,n,s="float32"){null==t&&(t=e);const a=(0,U.f)([e,t],s),r=e<=t?e:t;for(let e=0;e<r;++e)a.set(1,e,e);const i=(0,T.X)(a.toTensor(),[e,t]);if(null==n)return i;if(1===n.length)return(0,Se.G)((0,ke.d)(i,0),[n[0],1,1]);if(2===n.length)return(0,Se.G)((0,ke.d)((0,ke.d)(i,0),0),[n[0],n[1],1,1]);if(3===n.length)return(0,Se.G)((0,ke.d)((0,ke.d)((0,ke.d)(i,0),0),0),[n[0],n[1],n[2],1,1]);throw new Error(`eye() currently supports only 1D and 2D batchShapes, but received ${n.length}D.`)}});var Te=n(5321),Ce=n(154),$e=n(2609),Ee=n(7260),_e=n(7437),Ae=n(97),Re=n(9456),Fe=n(4401),De=n(7135),Oe=n(2233),Me=n(6567),ze=n(9026),Le=n(858);function Be(e,t,n){if(n<=0)throw new Error("The number of values should be positive.");const s={start:e,stop:t,num:n};return l.BV.runKernel(u.e7N,{},s)}var Pe=n(2811),Ve=n(1661),We=n(5813),Ue=n(7332),Ge=n(9170),He=n(7532),qe=n(1704),Xe=n(9321),je=n(7508),Ke=n(4805);const Ye=2147483648,Ze=(0,p.op)({searchSorted_:function(e,t,n="left"){const s=(0,c._1)(e,"sortedSequence","searchSorted"),a=(0,c._1)(t,"values","searchSorted"),r=s.shape[s.shape.length-1],i=a.shape[a.shape.length-1],o=(0,T.X)(s,[-1,r]),p=(0,T.X)(a,[-1,i]);if(o.rank<2)throw new Error("Sorted input argument must be at least 2-dimensional");if(o.shape[0]!==p.shape[0])throw new Error("Leading dimension of 'sortedSequence' and 'values' must match.");if((0,h.NA)(p.shape)>=Ye)throw new Error("values tensor size must less than 2147483648");if(o.shape[1]>=Ye)throw new Error(`trailing dim_size must less than 2147483648 for int32 output type, was ${o.shape[1]}`);const d={sortedSequence:o,values:p},f={side:n};return l.BV.runKernel(u.nr8,d,f)}});function Qe(e,t){return Ze(e,t,"left")}var Je=n(6963),et=n(4400);const tt=(0,p.op)({maxPool3d_:function(e,t=[1,1,1],n,s,a,r="NDHWC"){const i=(0,c._1)(e,"x","maxPool3d");let o=i,p=!1;4===i.rank&&(p=!0,o=(0,T.X)(i,[1,i.shape[0],i.shape[1],i.shape[2],i.shape[3]])),h.hu(5===o.rank,(()=>`Error in maxPool3d: x must be rank 5 but got rank ${o.rank}.`)),h.hu("NDHWC"===r,(()=>`Error in maxPool3d: Only NDHWC is currently supported, but got dataFormat of ${r}`)),(0,S.m)("maxPool3d",s,a);const d={x:o},f={filterSize:t,strides:n,pad:s,dimRoundingMode:a,dataFormat:r},m=l.BV.runKernel(u.OAf,d,f);return p?(0,T.X)(m,[m.shape[1],m.shape[2],m.shape[3],m.shape[4]]):m}}),nt=(0,p.op)({maxPoolWithArgmax_:function(e,t,n,s,a=!1){const r={x:(0,c._1)(e,"x","maxPoolWithArgmax")},i={filterSize:t,strides:n,pad:s,includeBatchInIndex:a},o=l.BV.runKernel(u.vFR,r,i);return{result:o[0],indexes:o[1]}}});var st=n(4734),at=n(4506),rt=n(190),it=n(9527);function ot(e,t,{indexing:n="xy"}={}){if("xy"!==n&&"ij"!==n)throw new TypeError(`${n} is not a valid third argument to meshgrid`);if(void 0===e)return[];let s=(0,c._1)(e,"x","meshgrid",e instanceof it.es?e.dtype:"float32");if(void 0===t)return[s];let a=(0,c._1)(t,"y","meshgrid",t instanceof it.es?t.dtype:"float32");const r=(0,h.NA)(s.shape),i=(0,h.NA)(a.shape);return"xy"===n?(s=(0,T.X)(s,[1,-1]),a=(0,T.X)(a,[-1,1]),[(0,E.O)((0,rt.i)([i,1],s.dtype),s),(0,E.O)(a,(0,rt.i)([1,r],a.dtype))]):(s=(0,T.X)(s,[-1,1]),a=(0,T.X)(a,[1,-1]),[(0,E.O)(s,(0,rt.i)([1,i],s.dtype)),(0,E.O)((0,rt.i)([r,1],a.dtype),a)])}var lt=n(8014),ut=n(7256),ct=n(401),ht=n(2907),pt=n(1878),dt=n(3061),ft=n(3189);const mt=(0,p.op)({moments_:function(e,t=null,n=!1){e=(0,c._1)(e,"x","moments");const s=(0,h.EC)(t,e.shape),a=(0,at.J)(e,s,n);let r=a.shape;n||(r=(0,pt.rv)(a.shape,s));const i=(0,dt.h)((0,ft.l)((0,N.p)(e,"float32"),(0,T.X)(a,r)));return{mean:a,variance:(0,at.J)(i,s,n)}}}),gt=(0,p.op)({multiRNNCell_:function(e,t,n,s){const a=(0,c._1)(t,"data","multiRNNCell"),r=(0,c.sI)(n,"c","multiRNNCell"),i=(0,c.sI)(s,"h","multiRNNCell");let o=a;const l=[];for(let t=0;t<e.length;t++){const n=e[t](o,r[t],i[t]);l.push(n[0]),l.push(n[1]),o=n[1]}const u=[],h=[];for(let e=0;e<l.length;e+=2)u.push(l[e]),h.push(l[e+1]);return[u,h]}}),yt=(0,p.op)({multinomial_:function(e,t,n,s=!1){const a=(0,c._1)(e,"logits","multinomial"),r=a.size,i=a.rank;if(r<2)throw new Error(`Error in multinomial: you need at least 2 outcomes, but got ${r}.`);if(i>2)throw new Error(`Rank of probabilities must be 1 or 2, but is ${i}`);n=n||Math.random();const o={logits:1===i?(0,T.X)(a,[1,-1]):a},h={numSamples:t,seed:n,normalized:s},p=l.BV.runKernel(u.NZg,o,h);return 1===i?(0,T.X)(p,[p.size]):p}});var bt=n(5699),xt=n(7289),vt=n(1222),wt=n(9734);const kt=(0,p.op)({outerProduct_:function(e,t){const n=(0,c._1)(e,"v1","outerProduct"),s=(0,c._1)(t,"v2","outerProduct");h.hu(1===n.rank&&1===s.rank,(()=>`Error in outerProduct: inputs must be rank 1, but got ranks ${n.rank} and ${s.rank}.`));const a=(0,T.X)(n,[-1,1]),r=(0,T.X)(s,[1,-1]);return(0,E.O)(a,r)}});var It=n(9019);const St=(0,p.op)({pad1d_:function(e,t,n=0){return(0,h.hu)(2===t.length,(()=>"Invalid number of paddings. Must be length of 2.")),(0,It.v)(e,[t],n)}}),Nt=(0,p.op)({pad2d_:function(e,t,n=0){return(0,h.hu)(2===t.length&&2===t[0].length&&2===t[1].length,(()=>"Invalid number of paddings. Must be length of 2 each.")),(0,It.v)(e,t,n)}}),Tt=(0,p.op)({pad3d_:function(e,t,n=0){return(0,h.hu)(3===t.length&&2===t[0].length&&2===t[1].length&&2===t[2].length,(()=>"Invalid number of paddings. Must be length of 2 each.")),(0,It.v)(e,t,n)}}),Ct=(0,p.op)({pad4d_:function(e,t,n=0){return(0,h.hu)(4===t.length&&2===t[0].length&&2===t[1].length&&2===t[2].length&&2===t[3].length,(()=>"Invalid number of paddings. Must be length of 2 each.")),(0,It.v)(e,t,n)}});var $t=n(7350),Et=n(1483),_t=n(4100),At=n(2042),Rt=n(6256);const Ft=(0,p.op)({raggedGather_:function(e,t,n,s){const a={paramsNestedSplits:e.map(((e,t)=>(0,c._1)(e,`tensors${t}`,"raggedGather","int32"))),paramsDenseValues:(0,c._1)(t,"paramsDenseValues","raggedGather"),indices:(0,c._1)(n,"indices","raggedGather","int32")},r={outputRaggedRank:s},i=l.BV.runKernel(u.dDz,a,r);return{outputNestedSplits:i.slice(0,i.length-1),outputDenseValues:i[i.length-1]}}}),Dt=(0,p.op)({raggedTensorToTensor_:function(e,t,n,s,a){const r=(0,c._1)(e,"shape","raggedTensorToTensor","int32"),i=(0,c._1)(t,"values","raggedTensorToTensor"),o={shape:r,values:i,defaultValue:(0,c._1)(n,"defaultValue","raggedTensorToTensor",i.dtype),rowPartitionTensors:s.map(((e,t)=>(0,c._1)(e,`tensors${t}`,"raggedTensorToTensor","int32")))},h={rowPartitionTypes:a};return l.BV.runKernel(u.BiW,o,h)}}),Ot=(0,p.op)({rand_:function(e,t,n){const s=(0,h.NA)(e);let a=null;if(null==n||"float32"===n)a=new Float32Array(s);else if("int32"===n)a=new Int32Array(s);else{if("bool"!==n)throw new Error(`Unknown data type ${n}`);a=new Uint8Array(s)}for(let e=0;e<s;e++)a[e]=t();return l.BV.makeTensor(a,e,n)}});var Mt=n(6542);class zt{constructor(e,t,n,s,a){this.mean=e,this.stdDev=t,this.dtype=n,this.nextVal=NaN,this.truncated=s,this.truncated&&(this.upper=this.mean+2*this.stdDev,this.lower=this.mean-2*this.stdDev);const r=a||Math.random();this.random=Mt.alea(r.toString())}nextValue(){if(!isNaN(this.nextVal)){const e=this.nextVal;return this.nextVal=NaN,e}let e,t,n=!1;for(;!n;){let s,a,r;do{s=2*this.random()-1,a=2*this.random()-1,r=s*s+a*a}while(r>=1||0===r);const i=Math.sqrt(-2*Math.log(r)/r);e=this.mean+this.stdDev*s*i,t=this.mean+this.stdDev*a*i,this.truncated&&!this.isValidTruncated(e)||(n=!0)}return this.truncated&&!this.isValidTruncated(t)||(this.nextVal=this.convertValue(t)),this.convertValue(e)}convertValue(e){return null==this.dtype||"float32"===this.dtype?e:Math.round(e)}isValidTruncated(e){return e<=this.upper&&e>=this.lower}}class Lt{constructor(e,t,n,s){this.alpha=e,this.beta=1/t,this.dtype=n;const a=s||Math.random();this.randu=Mt.alea(a.toString()),this.randn=new zt(0,1,n,!1,this.randu()),this.d=e<1?e+2/3:e-1/3,this.c=1/Math.sqrt(9*this.d)}nextValue(){let e,t,n,s,a,r;for(;;){do{s=this.randn.nextValue(),r=1+this.c*s}while(r<=0);if(r*=r*r,e=s*s,t=1-.331*e*e,n=.5*e+this.d*(1-r+Math.log(r)),a=this.randu(),a<t||Math.log(a)<n)break}return r=1/this.beta*this.d*r,this.alpha<1&&(r*=Math.pow(this.randu(),1/this.alpha)),this.convertValue(r)}convertValue(e){return"float32"===this.dtype?e:Math.round(e)}}class Bt{constructor(e=0,t=1,n,s){if(this.canReturnFloat=()=>null==this.dtype||"float32"===this.dtype,this.min=e,this.range=t-e,this.dtype=n,null==s&&(s=Math.random()),"number"==typeof s&&(s=s.toString()),!this.canReturnFloat()&&this.range<=1)throw new Error(`The difference between ${e} - ${t} <= 1 and dtype is not float`);this.random=Mt.alea(s)}convertValue(e){return this.canReturnFloat()?e:Math.round(e)}nextValue(){return this.convertValue(this.min+this.range*this.random())}}const Pt=(0,p.op)({randomGamma_:function(e,t,n=1,s="float32",a){if(null==n&&(n=1),null==s&&(s="float32"),"float32"!==s&&"int32"!==s)throw new Error(`Unsupported data type ${s}`);const r=new Lt(t,n,s,a),i=(0,U.f)(e,s);for(let e=0;e<i.values.length;e++)i.values[e]=r.nextValue();return i.toTensor()}}),Vt=(0,p.op)({randomNormal_:function(e,t=0,n=1,s,a){if(null!=s&&"bool"===s)throw new Error(`Unsupported data type ${s}`);const r=new zt(t,n,s,!1,a),i=(0,U.f)(e,s);for(let e=0;e<i.values.length;e++)i.values[e]=r.nextValue();return i.toTensor()}}),Wt=(0,p.op)({randomStandardNormal_:function(e,t,n){if(null!=t&&"bool"===t)throw new Error(`Unsupported data type ${t}`);return Vt(e,0,1,t,n)}}),Ut=(0,p.op)({randomUniform_:function(e,t=0,n=1,s="float32",a){const r=(0,U.f)(e,s),i=new Bt(t,n,null,a);for(let e=0;e<r.values.length;e++)r.values[e]=i.nextValue();return r.toTensor()}});function Gt(e,t,n=1,s="float32"){if(0===n)throw new Error("Cannot have a step of zero");const a={start:e,stop:t,step:n,dtype:s};return l.BV.runKernel(u.e6w,{},a)}var Ht=n(5016),qt=n(9226),Xt=n(1879),jt=n(897),Kt=n(1170);const Yt=(0,p.op)({reverse1d_:function(e){const t=(0,c._1)(e,"x","reverse");return h.hu(1===t.rank,(()=>`Error in reverse1D: x must be rank 1 but got rank ${t.rank}.`)),(0,Kt.G)(t,0)}}),Zt=(0,p.op)({reverse2d_:function(e,t){const n=(0,c._1)(e,"x","reverse");return h.hu(2===n.rank,(()=>`Error in reverse2D: x must be rank 2 but got rank ${n.rank}.`)),(0,Kt.G)(n,t)}}),Qt=(0,p.op)({reverse3d_:function(e,t){const n=(0,c._1)(e,"x","reverse");return h.hu(3===n.rank,(()=>`Error in reverse3D: x must be rank 3 but got rank ${n.rank}.`)),(0,Kt.G)(n,t)}}),Jt=(0,p.op)({reverse4d_:function(e,t){const n=(0,c._1)(e,"x","reverse");return h.hu(4===n.rank,(()=>`Error in reverse4D: x must be rank 4 but got rank ${n.rank}.`)),(0,Kt.G)(n,t)}});var en=n(2061),tn=n(1638),nn=n(503),sn=n(3330),an=n(8999);const rn=async function(e,t){const n=(0,c._1)(e,"x","setdiff1d"),s=(0,c._1)(t,"y","setdiff1d");h.hu(n.dtype===s.dtype,(()=>`x and y should have the same dtype, but got x (${n.dtype}) and y (${s.dtype}).`)),h.hu(1===n.rank,(()=>`x should be 1D tensor, but got x (${n.shape}).`)),h.hu(1===s.rank,(()=>`y should be 1D tensor, but got y (${s.shape}).`));const a=await n.data(),r=await s.data(),i=new Set(r);let o=0;for(let e=0;e<a.length;e++)i.has(a[e])||o++;const l=new it.YD([o],n.dtype),u=new it.YD([o],"int32");for(let e=0,t=0;e<a.length;e++)i.has(a[e])||(l.values[t]=a[e],u.values[t]=e,t++);return[l.toTensor(),u.toTensor()]};var on=n(2327),ln=n(9358),un=n(7632);const cn=(0,p.op)({slice1d_:function(e,t,n){const s=(0,c._1)(e,"x","slice1d");return h.hu(1===s.rank,(()=>`slice1d expects a rank-1 tensor, but got a rank-${s.rank} tensor`)),(0,R.t)(s,[t],[n])}}),hn=(0,p.op)({slice2d_:function(e,t,n){const s=(0,c._1)(e,"x","slice2d");return h.hu(2===s.rank,(()=>`slice2d expects a rank-2 tensor, but got a rank-${s.rank} tensor`)),(0,R.t)(s,t,n)}}),pn=(0,p.op)({slice3d_:function(e,t,n){const s=(0,c._1)(e,"x","slice3d");return h.hu(3===s.rank,(()=>`slice3d expects a rank-3 tensor, but got a rank-${s.rank} tensor`)),(0,R.t)(s,t,n)}}),dn=(0,p.op)({slice4d_:function(e,t,n){const s=(0,c._1)(e,"x","slice4d");return h.hu(4===s.rank,(()=>`slice4d expects a rank-4 tensor, but got a rank-${s.rank} tensor`)),(0,R.t)(s,t,n)}});var fn=n(5649),mn=n(913),gn=n(6550),yn=n(8037),bn=n(1882),xn=n(1227),vn=n(553),wn=n(843),kn=n(2402),In=n(3672),Sn=n(1663),Nn=n(8440),Tn=n(8329),Cn=n(2172),$n=n(5619),En=n(4969),_n=n(9332),An=n(6641);function Rn(e,t){(0,h.Cq)(e);const n=(0,c.C)(e,t);if(1!==n.length)throw new Error("tensor1d() requires values to be a flat/TypedArray");return(0,An.H)(e,null,n,t)}function Fn(e,t,n){if((0,h.Cq)(e),null!=t&&2!==t.length)throw new Error("tensor2d() requires shape to have two numbers");const s=(0,c.C)(e,n);if(2!==s.length&&1!==s.length)throw new Error("tensor2d() requires values to be number[][] or flat/TypedArray");if(1===s.length&&null==t)throw new Error("tensor2d() requires shape to be provided when `values` are a flat/TypedArray");return(0,An.H)(e,t,s,n)}var Dn=n(1417);function On(e,t,n){if((0,h.Cq)(e),null!=t&&4!==t.length)throw new Error("tensor4d() requires shape to have four numbers");const s=(0,c.C)(e,n);if(4!==s.length&&1!==s.length)throw new Error("tensor4d() requires values to be number[][][][] or flat/TypedArray");if(1===s.length&&null==t)throw new Error("tensor4d() requires shape to be provided when `values` are a flat array");return(0,An.H)(e,t,s,n)}function Mn(e,t,n){if((0,h.Cq)(e),null!=t&&5!==t.length)throw new Error("tensor5d() requires shape to have five numbers");const s=(0,c.C)(e,n);if(5!==s.length&&1!==s.length)throw new Error("tensor5d() requires values to be number[][][][][] or flat/TypedArray");if(1===s.length&&null==t)throw new Error("tensor5d() requires shape to be provided when `values` are a flat array");return(0,An.H)(e,t,s,n)}function zn(e,t,n){if((0,h.Cq)(e),null!=t&&6!==t.length)throw new Error("tensor6d() requires shape to have six numbers");const s=(0,c.C)(e,n);if(6!==s.length&&1!==s.length)throw new Error("tensor6d() requires values to be number[][][][][][] or flat/TypedArray");if(1===s.length&&null==t)throw new Error("tensor6d() requires shape to be provided when `values` are a flat array");return t=t||s,(0,An.H)(e,t,s,n)}var Ln=n(2633);const Bn=(0,p.op)({truncatedNormal_:function(e,t=0,n=1,s,a){if(null!=s&&"bool"===s)throw new Error("Unsupported data type $ { dtype }");const r=new zt(t,n,s,!0,a),i=(0,U.f)(e,s);for(let e=0;e<i.values.length;e++)i.values[e]=r.nextValue();return i.toTensor()}});var Pn=n(9238),Vn=n(2882),Wn=n(9829);function Un(e,t){return Ze(e,t,"right")}function Gn(e,t=!0,n,s){return l.BV.makeVariable(e,t,n,s)}var Hn=n(5788),qn=n(2644);const Xn=async function(e){const t=(0,c._1)(e,"condition","whereAsync","bool"),n=await t.data(),s=(0,qn.Z)(t.shape,n);return e!==t&&t.dispose(),s};var jn=n(6373),Kn=n(1181);const Yn=async function(e,t,n){const s=(0,c._1)(e,"tensor","boolMask"),a=(0,c._1)(t,"mask","boolMask","bool"),r=null==n?0:n,i=a.rank,o=s.shape;h.hu(i>0,(()=>"mask cannot be scalar")),h.k5(o.slice(r,r+i),a.shape,"mask's shape must match the first K dimensions of tensor's shape,");let l=1;for(let e=r;e<r+i;e++)l*=o[e];const u=o.slice(0,r).concat([l],o.slice(r+i)),p=(0,T.X)(s,u),d=(0,T.X)(a,[-1]),f=await Xn(d),m=(0,Sn.L)(f,[1]),g=(0,Ee.I)(p,m,r);return e!==s&&s.dispose(),t!==a&&a.dispose(),m.dispose(),p.dispose(),d.dispose(),f.dispose(),g};var Zn=n(6506),Qn=n(6772),Jn=n(9932);const es=(0,p.op)({movingAverage_:function(e,t,n,s,a=!0){const r=(0,c._1)(e,"v","movingAverage"),i=(0,c._1)(t,"x","movingAverage"),l=(0,c._1)(n,"decay","movingAverage");(0,Jn.assertTypesMatch)(r,i),h.hu(h.cO(r.shape,i.shape),(()=>"Shape mismatch in v and x"));const u=(0,nn.i)(1),p=(0,ft.l)(u,l);let d=(0,_.d)((0,ft.l)(i,r),p);if(a){h.hu(null!=s,(()=>"When using zeroDebias: true, step is required."));const e=(0,c._1)(s,"step","movingAverage");d=(0,de.h)(d,(0,ft.l)(u,(0,Et.s)(l,e)))}return(0,o.I)(r,d)}});var ts=n(6556);const ns=(0,p.op)({scatterND_:function(e,t,n){const s=(0,c._1)(e,"indices","scatterND","int32"),a=(0,c._1)(t,"updates","scatterND");ts.validateInput(a,s,n);const r={indices:s,updates:a},i={shape:n};return l.BV.runKernel(u.xQA,r,i)}}),ss=(0,p.op)({sparseToDense_:function(e,t,n,s=0){const a=(0,c._1)(e,"sparseIndices","sparseToDense","int32"),r=(0,c._1)(t,"sparseValues","sparseToDense","string_or_numeric"),i=(0,c._1)(s,"defaultValue","sparseToDense",r.dtype);!function(e,t,n,s){if("int32"!==e.dtype)throw new Error(`tf.sparseToDense() expects the indices to be int32 type, but the dtype was ${e.dtype}.`);if(e.rank>2)throw new Error(`sparseIndices should be a scalar, vector, or matrix, but got shape ${e.shape}.`);const a=e.rank>0?e.shape[0]:1,r=e.rank>1?e.shape[1]:1;if(n.length!==r)throw new Error(`outputShape has incorrect number of elements:, ${n.length}, should be: ${r}.`);const i=t.size;if(0!==t.rank&&(1!==t.rank||i!==a))throw new Error(`sparseValues has incorrect shape ${t.shape}, should be [] or [${a}]`);if(t.dtype!==s.dtype)throw new Error("sparseValues.dtype must match defaultValues.dtype")}(a,r,n,i);const o={sparseIndices:a,sparseValues:r,defaultValue:i},h={outputShape:n};return l.BV.runKernel(u.D2d,o,h)}}),as=(0,p.op)({gatherND_:function(e,t){const n=(0,c._1)(t,"indices","gatherND","int32"),s={params:(0,c._1)(e,"x","gatherND","string_or_numeric"),indices:n};return l.BV.runKernel(u.q1x,s)}}),rs=(0,p.op)({dropout_:function(e,t,n,s){const a=(0,c._1)(e,"x","dropout");if(h.hu("float32"===a.dtype,(()=>`x has to be a floating point tensor since it's going to be scaled, but got a ${a.dtype} tensor instead.`)),h.hu(t>=0&&t<1,(()=>`rate must be a float in the range [0, 1), but got ${t}.`)),0===t)return e instanceof it.es?a.clone():a;const r=function(e,t){if(null==t)return e.shape.slice();if(h.cO(e.shape,t))return t;if(e.shape.length===t.length){const n=[];for(let s=0;s<e.shape.length;s++)null==t[s]&&null!=e.shape[s]?n.push(e.shape[s]):n.push(t[s]);return n}return t}(a,n),i=1-t,l=(0,de.h)((0,Ce.G)((0,o.I)(Ut(r,0,1,"float32",s),i)),i);return(0,_.d)(a,l)}});function is(e){return Math.floor(Math.pow(2,Math.ceil(Math.log(e)/Math.log(2))))}function os(e,t,n){const s=1-e%2,a=new Float32Array(e);for(let r=0;r<e;++r){const i=2*Math.PI*r/(e+s-1);a[r]=t-n*Math.cos(i)}return Rn(a,"float32")}const ls=async function(e,t,n=1){const s=(0,c._1)(e,"predictions","inTopK"),a=(0,c._1)(t,"targets","inTopK");(0,h.hu)(s.rank>1,(()=>`inTopK() expects the predictions to be of rank 2 or higher, but got ${s.rank}`)),(0,h.hu)(s.rank-1===a.rank,(()=>`predictions rank should be 1 larger than targets rank, but got predictions rank ${s.rank} and targets rank ${a.rank}`)),(0,h.k5)(s.shape.slice(0,s.shape.length-1),a.shape,"predictions's shape should be align with the targets' shape, except the last dimension.");const r=s.shape[s.shape.length-1];(0,h.hu)(n>0&&n<=r,(()=>`'k' passed to inTopK() must be > 0 && <= the predictions last dimension (${r}), but got ${n}`));const i=await s.data(),o=await a.data(),[l,u]=[i.length/r,r],p=(0,h.WP)("bool",l);for(let e=0;e<l;e++){const t=e*u,s=i.subarray(t,t+u),a=[];for(let e=0;e<s.length;e++)a.push({value:s[e],index:e});a.sort(((e,t)=>t.value-e.value)),p[e]=0;for(let t=0;t<n;t++)if(a[t].index===o[e]){p[e]=1;break}}return e!==s&&s.dispose(),t!==a&&a.dispose(),(0,_n.X)(p,a.shape,"bool")};var us=n(6537),cs=n(6501),hs=n(3791),ps=n(7500),ds=n(4324);const fs=(0,p.op)({fusedConv2d_:function({x:e,filter:t,strides:n,pad:s,dataFormat:a="NHWC",dilations:r=[1,1],dimRoundingMode:i,bias:p,activation:d="linear",preluActivationWeights:f,leakyreluAlpha:m}){if(d=d||"linear",!1===(0,ds.uy)(l.BV.state.gradientDepth,d)){h.hu("NHWC"===a,(()=>`Error in fused conv2d: got dataFormat of ${a} but only NHWC is currently supported for the case of gradient depth is 0 and the activation is not linear.`));let l=(0,J.T)(e,t,n,s,a,r,i);return null!=p&&(l=(0,o.I)(l,p)),(0,ds.QH)(l,d,f,m)}const g=(0,c._1)(e,"x","conv2d","float32"),y=(0,c._1)(t,"filter","conv2d","float32");let b=g,x=!1;3===g.rank&&(x=!0,b=(0,T.X)(g,[1,g.shape[0],g.shape[1],g.shape[2]])),h.hu(4===b.rank,(()=>`Error in fused conv2d: input must be rank 4, but got rank ${b.rank}.`)),h.hu(4===y.rank,(()=>`Error in fused conv2d: filter must be rank 4, but got rank ${y.rank}.`)),S.m("fused conv2d",s,i);const v="NHWC"===a?b.shape[3]:b.shape[1];h.hu(y.shape[2]===v,(()=>`Error in conv2d: depth of input (${v}) must match input depth for filter ${y.shape[2]}.`)),h.hu(S.jT(n,r),(()=>`Error in conv2D: Either strides or dilations must be 1. Got strides ${n} and dilations '${r}'`));const w=S.Ix(b.shape,y.shape,n,r,s,i);let k,I;if(null!=p&&(k=(0,c._1)(p,"bias","fused conv2d"),[k]=(0,Jn.makeTypesMatch)(k,g),"NHWC"===a?cs.assertAndGetBroadcastShape(w.outShape,k.shape):(h.hu(k.shape.length<=1,(()=>`Error in fused conv2d: only supports scalar or 1-D Tensor bias for NCHW format but got the bias of rank-${k.shape.length}.`)),h.hu(0===k.shape.length||k.shape[0]===w.outChannels||1===k.shape[0],(()=>`Error in fused conv2d: bias shape (${k.shape}) is not compatible with the number of output channels (${w.outChannels})`)))),null!=f){const e=f.shape;if(h.hu(e.length<=1||3===e.length,(()=>`Error in fused conv2d: only supports scalar, 1-D Tensor or 3-D Tensor PReLU activation weights but got a tensor of rank-${e.length}.`)),1===e.length)h.hu(1===e[0]||e[0]===w.outChannels,(()=>`Error in fused conv2d: PReLU activation weights (${e}) is not compatible with the number of output channels (${w.outChannels}).`));else if(3===e.length)try{cs.assertAndGetBroadcastShape(e,w.outShape)}catch(t){const n=`Error in fused conv2d: PReLU activation weights (${e}) is not compatible with the output shape of the conv2d (${w.outShape}).`;throw Error(n)}I=(0,c._1)(f,"prelu weights","fused conv2d")}const N=(e,t)=>{h.hu("NHWC"===a,(()=>`Error in gradient of fused conv2D: got dataFormat of ${a} but only NHWC is currently supported.`));const[i,o,l,u]=t,c=(0,ds.Fr)(e,l,d);h.hu(S.I0(r),(()=>`Error in gradient of fused conv2D: dilation rates greater than 1 are not yet supported in gradients. Got dilations '${r}'`));const p=[(0,ps._)(o.shape,c,i,n,s),(0,hs.p)(o,c,i.shape,n,s)];if(null!=u){const e=(0,ds.pf)(u,c);p.push(e)}return p},C={x:b,filter:y,bias:k,preluActivationWeights:I},$={strides:n,pad:s,dataFormat:a,dilations:r,dimRoundingMode:i,activation:d,leakyreluAlpha:m};if(null==p){const e=(0,us.cb)(((e,t,n)=>{let s=l.BV.runKernel(u._V0,C,$);return n([t,e,s]),x&&(s=(0,T.X)(s,[s.shape[1],s.shape[2],s.shape[3]])),{value:s,gradFunc:N}}));return e(b,y)}{const e=(0,us.cb)(((e,t,n,s)=>{let a=l.BV.runKernel(u._V0,C,$);return s([t,e,a,n]),x&&(a=(0,T.X)(a,[a.shape[1],a.shape[2],a.shape[3]])),{value:a,gradFunc:N}}));return e(b,y,k)}}});var ms=n(9653),gs=n(2203);const ys=(0,p.op)({fusedDepthwiseConv2d_:function({x:e,filter:t,strides:n,pad:s,dataFormat:a="NHWC",dilations:r=[1,1],dimRoundingMode:i,bias:p,activation:d="linear",preluActivationWeights:f,leakyreluAlpha:m}){if(!1===(0,ds.uy)(l.BV.state.gradientDepth,d)){let l=(0,ce.B)(e,t,n,s,a,r,i);return null!=p&&(l=(0,o.I)(l,p)),(0,ds.QH)(l,d,f,m)}const g=(0,c._1)(e,"x","depthwiseConv2d","float32"),y=(0,c._1)(t,"filter","depthwiseConv2d","float32");let b=g,x=!1;3===g.rank&&(x=!0,b=(0,T.X)(g,[1,g.shape[0],g.shape[1],g.shape[2]])),h.hu(4===b.rank,(()=>`Error in fused depthwiseConv2d: input must be rank 4, but got rank ${b.rank}.`)),h.hu(4===y.rank,(()=>`Error in fused depthwiseConv2d: filter must be rank 4, but got rank ${y.rank}.`)),h.hu(b.shape[3]===y.shape[2],(()=>`Error in fused depthwiseConv2d: number of input channels (${b.shape[3]}) must match the inChannels dimension in filter ${y.shape[2]}.`)),null==r&&(r=[1,1]),h.hu(S.jT(n,r),(()=>`Error in fused depthwiseConv2d: Either strides or dilations must be 1. Got strides ${n} and dilations '${r}'`)),S.m("fused depthwiseConv2d",s,i);const v=S.Ix(b.shape,y.shape,n,r,s,i,!0);let w,k;null!=p&&(w=(0,c._1)(p,"bias","fused conv2d"),[w]=(0,Jn.makeTypesMatch)(w,g),cs.assertAndGetBroadcastShape(v.outShape,w.shape)),null!=f&&(k=(0,c._1)(f,"prelu weights","fused depthwiseConv2d"));const I=(e,t)=>{h.hu(S.I0(r),(()=>`Error in gradient of fused depthwiseConv2d: dilation rates greater than 1 are not yet supported. Got dilations '${r}'`));const[a,o,l,u]=t,c=(0,ds.Fr)(e,l,d),p=(0,gs.v)(o.shape,c,a,n,s,r,i),f=(0,ms.z)(o,c,a.shape,n,s,r,i);return null!=u?[p,f,(0,ds.pf)(w,c)]:[p,f]},N={x:b,filter:y,bias:w,preluActivationWeights:k},C={strides:n,pad:s,dataFormat:a,dilations:r,dimRoundingMode:i,activation:d,leakyreluAlpha:m};if(null==p){const e=(0,us.cb)(((e,t,n)=>{let s=l.BV.runKernel(u.luS,N,C);return n([t,e,s]),x&&(s=(0,T.X)(s,[s.shape[1],s.shape[2],s.shape[3]])),{value:s,gradFunc:I}}));return e(b,y)}{const e=(0,us.cb)(((e,t,n,s)=>{let a=l.BV.runKernel(u.luS,N,C);return s([t,e,a,n]),x&&(a=(0,T.X)(a,[a.shape[1],a.shape[2],a.shape[3]])),{value:a,gradFunc:I}}));return e(b,y,w)}}}),bs=(0,p.op)({fusedMatMul_:function({a:e,b:t,transposeA:n=!1,transposeB:s=!1,bias:a,activation:r="linear",preluActivationWeights:i,leakyreluAlpha:p=.2}){if(!1===(0,ds.uy)(l.BV.state.gradientDepth,r)){let l=(0,E.O)(e,t,n,s);return null!=a&&(l=(0,o.I)(l,a)),(0,ds.QH)(l,r,i,p)}let d=(0,c._1)(e,"a","fused matMul"),f=(0,c._1)(t,"b","fused matMul");[d,f]=(0,Jn.makeTypesMatch)(d,f);const m=n?d.shape[d.rank-2]:d.shape[d.rank-1],g=s?f.shape[f.rank-1]:f.shape[f.rank-2],y=n?d.shape[d.rank-1]:d.shape[d.rank-2],b=s?f.shape[f.rank-2]:f.shape[f.rank-1],x=d.shape.slice(0,-2),v=f.shape.slice(0,-2),w=h.NA(x),k=h.NA(v);h.hu(m===g,(()=>`Error in fused matMul: inner shapes (${m}) and (${g}) of Tensors with shapes ${d.shape} and ${f.shape} and transposeA=${n} and transposeB=${s} must match.`));const I=cs.assertAndGetBroadcastShape(d.shape.slice(0,-2),f.shape.slice(0,-2)).concat([y,b]),S=n?(0,T.X)(d,[w,m,y]):(0,T.X)(d,[w,y,m]),N=s?(0,T.X)(f,[k,b,g]):(0,T.X)(f,[k,g,b]);let C,$;null!=a&&(C=(0,c._1)(a,"bias","fused matMul"),[C]=(0,Jn.makeTypesMatch)(C,d),cs.assertAndGetBroadcastShape(I,C.shape)),null!=i&&($=(0,c._1)(i,"prelu weights","fused matMul"));const _=(e,t)=>{const[i,o,l,u]=t,c=(0,ds.Fr)((0,T.X)(e,l.shape),l,r);let h,p;return n||s?!n&&s?(h=(0,E.O)(c,o,!1,!1),p=(0,E.O)(c,i,!0,!1)):n&&!s?(h=(0,E.O)(o,c,!1,!0),p=(0,E.O)(i,c,!1,!1)):(h=(0,E.O)(o,c,!0,!0),p=(0,E.O)(c,i,!0,!0)):(h=(0,E.O)(c,o,!1,!0),p=(0,E.O)(i,c,!0,!1)),null!=a?[h,p,(0,ds.pf)(u,c)]:[h,p]},A={a:S,b:N,bias:C,preluActivationWeights:$},R={transposeA:n,transposeB:s,activation:r,leakyreluAlpha:p};if(null==a){const e=(0,us.cb)(((e,t,n)=>{const s=l.BV.runKernel(u.usg,A,R);return n([e,t,s]),{value:(0,T.X)(s,I),gradFunc:_}}));return e(S,N)}{const e=(0,us.cb)(((e,t,n,s)=>{const a=l.BV.runKernel(u.usg,A,R);return s([e,t,a,n]),{value:(0,T.X)(a,I),gradFunc:_}}));return e(S,N,C)}}}),xs=(0,p.op)({hammingWindow_:function(e){return os(e,.54,.46)}}),vs=(0,p.op)({hannWindow_:function(e){return os(e,.5,.5)}}),ws=(0,p.op)({frame_:function(e,t,n,s=!1,a=0){let r=0;const i=[];for(;r+t<=e.size;)i.push((0,R.t)(e,r,t)),r+=n;if(s)for(;r<e.size;){const s=r+t-e.size,o=(0,$.z)([(0,R.t)(e,r,t-s),(0,Te.h)([s],a)]);i.push(o),r+=n}return 0===i.length?Fn([],[0,t]):(0,T.X)((0,$.z)(i),[i.length,t])}}),ks=(0,p.op)({stft_:function(e,t,n,s,a=vs){null==s&&(s=is(t));const r=ws(e,t,n),i=(0,_.d)(r,a(t));return(0,vn.Q)(i,s)}}),Is=(0,p.op)({cropAndResize_:function(e,t,n,s,a="bilinear",r=0){const i=(0,c._1)(e,"image","cropAndResize"),o=(0,c._1)(t,"boxes","cropAndResize","float32"),p=(0,c._1)(n,"boxInd","cropAndResize","int32"),d=o.shape[0];h.hu(4===i.rank,(()=>`Error in cropAndResize: image must be rank 4,but got rank ${i.rank}.`)),h.hu(2===o.rank&&4===o.shape[1],(()=>`Error in cropAndResize: boxes must be have size [${d},4] but had shape ${o.shape}.`)),h.hu(1===p.rank&&p.shape[0]===d,(()=>`Error in cropAndResize: boxInd must be have size [${d}] but had shape ${o.shape}.`)),h.hu(2===s.length,(()=>`Error in cropAndResize: cropSize must be of length 2, but got length ${s.length}.`)),h.hu(s[0]>=1&&s[1]>=1,(()=>`cropSize must be atleast [1,1], but was ${s}`)),h.hu("bilinear"===a||"nearest"===a,(()=>`method must be bilinear or nearest, but was ${a}`));const f={image:i,boxes:o,boxInd:p},m={method:a,extrapolationValue:r,cropSize:s};return l.BV.runKernel(u.VcC,f,m)}}),Ss=(0,p.op)({flipLeftRight_:function(e){const t=(0,c._1)(e,"image","flipLeftRight","float32");h.hu(4===t.rank,(()=>`Error in flipLeftRight: image must be rank 4,but got rank ${t.rank}.`));const n={image:t};return l.BV.runKernel(u.Uyb,n,{})}}),Ns=(0,p.op)({grayscaleToRGB_:function(e){const t=(0,c._1)(e,"image","grayscaleToRGB"),n=t.rank-1,s=t.shape[n];h.hu(t.rank>=2,(()=>`Error in grayscaleToRGB: images must be at least rank 2, but got rank ${t.rank}.`)),h.hu(1===s,(()=>`Error in grayscaleToRGB: last dimension of a grayscale image should be size 1, but got size ${s}.`));const a=new Array(t.rank);return a.fill(1,0,n),a[n]=3,(0,Se.G)(t,a)}}),Ts=(0,p.op)({rotateWithOffset_:function(e,t,n=0,s=.5){const a=(0,c._1)(e,"image","rotateWithOffset","float32");h.hu(4===a.rank,(()=>`Error in rotateWithOffset: image must be rank 4,but got rank ${a.rank}.`));const r={image:a},i={radians:t,fillValue:n,center:s};return l.BV.runKernel(u.b9H,r,i)}});function Cs(e,t,n,s,a,r){null==s&&(s=.5),null==a&&(a=Number.NEGATIVE_INFINITY),null==r&&(r=0);const i=e.shape[0];return n=Math.min(n,i),h.hu(0<=s&&s<=1,(()=>`iouThreshold must be in [0, 1], but was '${s}'`)),h.hu(2===e.rank,(()=>`boxes must be a 2D tensor, but was of rank '${e.rank}'`)),h.hu(4===e.shape[1],(()=>`boxes must have 4 columns, but 2nd dimension was ${e.shape[1]}`)),h.hu(1===t.rank,(()=>"scores must be a 1D tensor")),h.hu(t.shape[0]===i,(()=>`scores has incompatible shape with boxes. Expected ${i}, but was ${t.shape[0]}`)),h.hu(0<=r&&r<=1,(()=>`softNmsSigma must be in [0, 1], but was '${r}'`)),{maxOutputSize:n,iouThreshold:s,scoreThreshold:a,softNmsSigma:r}}const $s=(0,p.op)({nonMaxSuppression_:function(e,t,n,s=.5,a=Number.NEGATIVE_INFINITY){const r=(0,c._1)(e,"boxes","nonMaxSuppression","float32"),i=(0,c._1)(t,"scores","nonMaxSuppression","float32"),o=Cs(r,i,n,s,a),h={maxOutputSize:n=o.maxOutputSize,iouThreshold:s=o.iouThreshold,scoreThreshold:a=o.scoreThreshold};return l.BV.runKernel(u.uv1,{boxes:r,scores:i},h)}});var Es=n(590);const _s=(0,p.op)({nonMaxSuppressionWithScore_:function(e,t,n,s=.5,a=Number.NEGATIVE_INFINITY,r=0){const i=(0,c._1)(e,"boxes","nonMaxSuppression"),o=(0,c._1)(t,"scores","nonMaxSuppression"),h=Cs(i,o,n,s,a,r),p={boxes:i,scores:o},d={maxOutputSize:n=h.maxOutputSize,iouThreshold:s=h.iouThreshold,scoreThreshold:a=h.scoreThreshold,softNmsSigma:r=h.softNmsSigma},f=l.BV.runKernel(u.W0H,p,d);return{selectedIndices:f[0],selectedScores:f[1]}}}),As=(0,p.op)({nonMaxSuppressionPadded_:function(e,t,n,s=.5,a=Number.NEGATIVE_INFINITY,r=!1){const i=(0,c._1)(e,"boxes","nonMaxSuppression"),o=(0,c._1)(t,"scores","nonMaxSuppression"),h=Cs(i,o,n,s,a,null),p={boxes:i,scores:o},d={maxOutputSize:h.maxOutputSize,iouThreshold:h.iouThreshold,scoreThreshold:h.scoreThreshold,padToMaxOutputSize:r},f=l.BV.runKernel(u.cye,p,d);return{selectedIndices:f[0],validOutputs:f[1]}}});var Rs=n(4791),Fs=n(2105);const Ds=(0,p.op)({threshold_:function(e,t="binary",n=!1,s=.5){const a=(0,c._1)(e,"image","threshold"),r=a.shape[0]*a.shape[1];let i,l,u,p,d=(0,_.d)(Rn([s]),255);if(h.hu(3===a.rank,(()=>`Error in threshold: image must be rank 3,but got rank ${a.rank}.`)),h.hu(3===a.shape[2]||1===a.shape[2],(()=>`Error in threshold: image color channel must be equal to 3 or 1but got ${a.shape[2]}.`)),h.hu("int32"===a.dtype||"float32"===a.dtype,(()=>`Error in dtype: image dtype must be int32 or float32,but got dtype ${a.dtype}.`)),h.hu("otsu"===t||"binary"===t,(()=>`Method must be binary or otsu, but was ${t}`)),3===a.shape[2]){[i,l,u]=(0,wn.V)(a,[1,1,1],-1);const e=(0,_.d)(i,.2989),t=(0,_.d)(l,.587),n=(0,_.d)(u,.114);p=(0,o.I)((0,o.I)(e,t),n)}else p=e;"otsu"===t&&(d=function(e,t){let n,s,a,r,i,l,u=Rn([-1]),c=Rn([0]),h=Rn([0]);for(let p=0;p<e.size-1;p++){n=(0,R.t)(e,0,p+1),s=(0,R.t)(e,p+1),i=(0,de.h)((0,$n.S)(n),t),l=(0,de.h)((0,$n.S)(s),t);const d=(0,$n.S)((0,_.d)(n,Gt(0,n.size)));a=(0,de.h)(d,(0,$n.S)(n));const f=(0,Te.h)(s.shape,n.size),m=(0,o.I)(Gt(0,s.size),f),g=(0,_.d)(s,m);r=(0,de.h)((0,$n.S)(g),(0,$n.S)(s));const y=(0,ft.l)(a,r),b=(0,ft.l)(a,r),x=(0,_.d)(i,l);h=(0,_.d)((0,_.d)(x,y),b);const v=(0,_e.p)(h,c);c=(0,Hn.a)(v,h,c),u=(0,Hn.a)(v,Rn([p]),u)}return u}(P((0,N.p)((0,en.N)(p),"int32"),(0,_n.X)([]),256),r));const f=n?(0,Le.z)(p,d):(0,_e.p)(p,d);return(0,N.p)((0,_.d)(f,255),"int32")}}),Os=(0,p.op)({transform_:function(e,t,n="nearest",s="constant",a=0,r){const i=(0,c._1)(e,"image","transform","float32"),o=(0,c._1)(t,"transforms","transform","float32");h.hu(4===i.rank,(()=>`Error in transform: image must be rank 4,but got rank ${i.rank}.`)),h.hu(2===o.rank&&(o.shape[0]===i.shape[0]||1===o.shape[0])&&8===o.shape[1],(()=>"Error in transform: Input transform should be batch x 8 or 1 x 8")),h.hu(null==r||2===r.length,(()=>`Error in transform: outputShape must be [height, width] or null, but got ${r}.`));const p={image:i,transforms:o},d={interpolation:n,fillMode:s,fillValue:a,outputShape:r};return l.BV.runKernel(u.wx7,p,d)}}),Ms=(0,p.op)({bandPart_:function(e,t,n){(0,h.hu)(t%1==0,(()=>`bandPart(): numLower must be an integer, got ${t}.`)),(0,h.hu)(n%1==0,(()=>`bandPart(): numUpper must be an integer, got ${n}.`));const s=(0,c._1)(e,"a","bandPart");(0,h.hu)(s.rank>=2,(()=>`bandPart(): Rank must be at least 2, got ${s.rank}.`));const a=s.shape,[r,i]=s.shape.slice(-2);if(!(t<=r))throw new Error(`bandPart(): numLower (${t}) must not be greater than the number of rows (${r}).`);if(!(n<=i))throw new Error(`bandPart(): numUpper (${n}) must not be greater than the number of columns (${i}).`);t<0&&(t=r),n<0&&(n=i);const o=(0,T.X)(Gt(0,r,1,"int32"),[-1,1]),l=Gt(0,i,1,"int32"),u=(0,ft.l)(o,l),p=(0,qe.H)((0,Le.z)(u,(0,nn.i)(+t,"int32")),(0,Ae.b)(u,(0,nn.i)(-n,"int32"))),d=(0,jn.l)([r,i],s.dtype);return(0,T.X)((0,Nn.k)((0,Wn.H)((0,T.X)(s,[-1,r,i])).map((e=>(0,Hn.a)(p,e,d)))),a)}}),zs=(0,p.op)({gramSchmidt_:function(e){let t;if(Array.isArray(e)){t=!1,(0,h.hu)(null!=e&&e.length>0,(()=>"Gram-Schmidt process: input must not be null, undefined, or empty"));const n=e[0].shape[0];for(let t=1;t<e.length;++t)(0,h.hu)(e[t].shape[0]===n,(()=>`Gram-Schmidt: Non-unique lengths found in the input vectors: (${e[t].shape[0]} vs. ${n})`))}else t=!0,e=(0,wn.V)(e,e.shape[0],0).map((e=>(0,Sn.L)(e,[0])));(0,h.hu)(e.length<=e[0].shape[0],(()=>`Gram-Schmidt: Number of vectors (${e.length}) exceeds number of dimensions (${e[0].shape[0]}).`));const n=[],s=e;for(let t=0;t<e.length;++t)n.push(l.BV.tidy((()=>{let e=s[t];if(t>0)for(let s=0;s<t;++s){const t=(0,_.d)((0,$n.S)((0,_.d)(n[s],e)),n[s]);e=(0,ft.l)(e,t)}return(0,de.h)(e,(0,Qn.K)(e,"euclidean"))})));return t?(0,Nn.k)(n,0):n}});var Ls=n(3381);function Bs(e,t=!1){return l.BV.tidy((()=>{(0,h.hu)(2===e.shape.length,(()=>`qr2d() requires a 2D Tensor, but got a ${e.shape.length}D Tensor.`));const n=e.shape[0],s=e.shape[1];let a=Ne(n),r=(0,q.d)(e);const i=Fn([[1]],[1,1]);let o=(0,q.d)(i);const u=n>=s?s:n;for(let e=0;e<u;++e){const t=r,u=o,c=a;[o,r,a]=l.BV.tidy((()=>{const t=(0,R.t)(r,[e,e],[n-e,1]),l=(0,Qn.K)(t),u=(0,R.t)(r,[e,e],[1,1]),c=(0,Hn.a)((0,_e.p)(u,0),Fn([[-1]]),Fn([[1]])),h=(0,ft.l)(u,(0,_.d)(c,l)),p=(0,de.h)(t,h);o=1===p.shape[0]?(0,q.d)(i):(0,$.z)([i,(0,R.t)(p,[1,0],[p.shape[0]-1,p.shape[1]])],0);const d=(0,bt.W)((0,de.h)((0,E.O)(c,h),l)),f=(0,R.t)(r,[e,0],[n-e,s]),m=(0,_.d)(d,o),g=(0,Zn.p)(o);if(0===e)r=(0,ft.l)(f,(0,E.O)(m,(0,E.O)(g,f)));else{const t=(0,ft.l)(f,(0,E.O)(m,(0,E.O)(g,f)));r=(0,$.z)([(0,R.t)(r,[0,0],[e,s]),t],0)}const y=(0,Zn.p)(m),b=(0,R.t)(a,[0,e],[n,a.shape[1]-e]);if(0===e)a=(0,ft.l)(b,(0,E.O)((0,E.O)(b,o),y));else{const t=(0,ft.l)(b,(0,E.O)((0,E.O)(b,o),y));a=(0,$.z)([(0,R.t)(a,[0,0],[n,e]),t],1)}return[o,r,a]})),(0,Ls.B9)([t,u,c])}return!t&&n>s&&(a=(0,R.t)(a,[0,0],[n,s]),r=(0,R.t)(r,[0,0],[s,s])),[a,r]}))}const Ps=(0,p.op)({qr_:function(e,t=!1){if((0,h.hu)(e.rank>=2,(()=>`qr() requires input tensor to have a rank >= 2, but got rank ${e.rank}`)),2===e.rank)return Bs(e,t);{const n=e.shape.slice(0,e.shape.length-2).reduce(((e,t)=>e*t)),s=(0,Wn.H)((0,T.X)(e,[n,e.shape[e.shape.length-2],e.shape[e.shape.length-1]]),0),a=[],r=[];return s.forEach((e=>{const[n,s]=Bs(e,t);a.push(n),r.push(s)})),[(0,T.X)((0,Nn.k)(a,0),e.shape),(0,T.X)((0,Nn.k)(r,0),e.shape)]}}});var Vs=n(227);const Ws=(0,p.op)({computeWeightedLoss_:function(e,t,n=Vs.I.SUM_BY_NONZERO_WEIGHTS){const s=(0,c._1)(e,"losses","computeWeightedLoss");let a=null;null!=t&&(a=(0,c._1)(t,"weights","computeWeightedLoss"));const r=null==a?s:(0,_.d)(s,a);if(n===Vs.I.NONE)return r;if(n===Vs.I.SUM)return(0,$n.S)(r);if(n===Vs.I.MEAN){if(null==a)return(0,at.J)(r);{const e=s.size/a.size,t=(0,de.h)((0,$n.S)(r),(0,$n.S)(a));return e>1?(0,de.h)(t,(0,nn.i)(e)):t}}if(n===Vs.I.SUM_BY_NONZERO_WEIGHTS){if(null==a)return(0,de.h)((0,$n.S)(r),(0,nn.i)(s.size));{const e=(0,_.d)(a,(0,rt.i)(s.shape)),t=(0,N.p)((0,$n.S)((0,xt.Q)(e,(0,nn.i)(0))),"float32");return(0,de.h)((0,$n.S)(r),t)}}throw Error(`Unknown reduction: ${n}`)}}),Us=(0,p.op)({absoluteDifference_:function(e,t,n,s=Vs.I.SUM_BY_NONZERO_WEIGHTS){const r=(0,c._1)(e,"labels","absoluteDifference"),i=(0,c._1)(t,"predictions","absoluteDifference");let o=null;null!=n&&(o=(0,c._1)(n,"weights","absoluteDifference")),(0,h.k5)(r.shape,i.shape,"Error in absoluteDifference: ");const l=(0,a.W)((0,ft.l)(r,i));return Ws(l,o,s)}}),Gs=(0,p.op)({cosineDistance_:function(e,t,n,s,a=Vs.I.SUM_BY_NONZERO_WEIGHTS){const r=(0,c._1)(e,"labels","cosineDistance"),i=(0,c._1)(t,"predictions","cosineDistance");let o=null;null!=s&&(o=(0,c._1)(s,"weights","cosineDistance")),(0,h.k5)(r.shape,i.shape,"Error in cosineDistance: ");const l=(0,nn.i)(1),u=(0,ft.l)(l,(0,$n.S)((0,_.d)(r,i),n,!0));return Ws(u,o,a)}}),Hs=(0,p.op)({hingeLoss_:function(e,t,n,s=Vs.I.SUM_BY_NONZERO_WEIGHTS){let a=(0,c._1)(e,"labels","hingeLoss");const r=(0,c._1)(t,"predictions","hingeLoss");let i=null;null!=n&&(i=(0,c._1)(n,"weights","hingeLoss")),(0,h.k5)(a.shape,r.shape,"Error in hingeLoss: ");const o=(0,nn.i)(1);a=(0,ft.l)((0,_.d)((0,nn.i)(2),a),o);const l=(0,Xt.U)((0,ft.l)(o,(0,_.d)(a,r)));return Ws(l,i,s)}}),qs=(0,p.op)({huberLoss_:function(e,t,n,s=1,r=Vs.I.SUM_BY_NONZERO_WEIGHTS){const i=(0,c._1)(e,"labels","huberLoss"),l=(0,c._1)(t,"predictions","huberLoss");let u=null;null!=n&&(u=(0,c._1)(n,"weights","huberLoss")),(0,h.k5)(i.shape,l.shape,"Error in huberLoss: ");const p=(0,nn.i)(s),d=(0,a.W)((0,ft.l)(l,i)),f=(0,ut.L)(d,p),m=(0,ft.l)(d,f),g=(0,o.I)((0,_.d)((0,nn.i)(.5),(0,dt.h)(f)),(0,_.d)(p,m));return Ws(g,u,r)}}),Xs=(0,p.op)({logLoss_:function(e,t,n,s=1e-7,a=Vs.I.SUM_BY_NONZERO_WEIGHTS){const r=(0,c._1)(e,"labels","logLoss"),i=(0,c._1)(t,"predictions","logLoss");let l=null;null!=n&&(l=(0,c._1)(n,"weights","logLoss")),(0,h.k5)(r.shape,i.shape,"Error in logLoss: ");const u=(0,nn.i)(1),p=(0,nn.i)(s),d=(0,bt.W)((0,_.d)(r,(0,Ve.c)((0,o.I)(i,p)))),f=(0,_.d)((0,ft.l)(u,r),(0,Ve.c)((0,o.I)((0,ft.l)(u,i),p))),m=(0,ft.l)(d,f);return Ws(m,l,a)}}),js=(0,p.op)({meanSquaredError_:function(e,t,n,s=Vs.I.SUM_BY_NONZERO_WEIGHTS){const a=(0,c._1)(e,"labels","meanSquaredError"),r=(0,c._1)(t,"predictions","meanSquaredError");let i=null;null!=n&&(i=(0,c._1)(n,"weights","meanSquaredError")),(0,h.k5)(a.shape,r.shape,"Error in meanSquaredError: ");const o=(0,In.$)(a,r);return Ws(o,i,s)}}),Ks=(0,p.op)({sigmoidCrossEntropy_:function(e,t,n,s=0,r=Vs.I.SUM_BY_NONZERO_WEIGHTS){let i=(0,c._1)(e,"multiClassLabels","sigmoidCrossEntropy");const l=(0,c._1)(t,"logits","sigmoidCrossEntropy");let u=null;if(null!=n&&(u=(0,c._1)(n,"weights","sigmoidCrossEntropy")),(0,h.k5)(i.shape,l.shape,"Error in sigmoidCrossEntropy: "),s>0){const e=(0,nn.i)(s),t=(0,nn.i)(1),n=(0,nn.i)(.5);i=(0,o.I)((0,_.d)(i,(0,ft.l)(t,e)),(0,_.d)(n,e))}const p=function(e,t){const n=(0,c._1)(e,"labels","sigmoidCrossEntropyWithLogits"),s=(0,c._1)(t,"logits","sigmoidCrossEntropyWithLogits");(0,h.k5)(n.shape,s.shape,"Error in sigmoidCrossEntropyWithLogits: ");const r=(0,Xt.U)(s),i=(0,_.d)(s,n),l=(0,We.K)((0,we.Q)((0,bt.W)((0,a.W)(s))));return(0,o.I)((0,ft.l)(r,i),l)}(i,l);return Ws(p,u,r)}}),Ys=(0,p.op)({softmaxCrossEntropy_:function(e,t,n,s=0,a=Vs.I.SUM_BY_NONZERO_WEIGHTS){let r=(0,c._1)(e,"onehotLabels","softmaxCrossEntropy");const i=(0,c._1)(t,"logits","softmaxCrossEntropy");let l=null;if(null!=n&&(l=(0,c._1)(n,"weights","softmaxCrossEntropy")),(0,h.k5)(r.shape,i.shape,"Error in softmaxCrossEntropy: "),s>0){const e=(0,nn.i)(s),t=(0,nn.i)(1),n=(0,nn.i)(r.shape[1]);r=(0,o.I)((0,_.d)(r,(0,ft.l)(t,e)),(0,de.h)(e,n))}const u=function(e,t,n=-1){if(-1===n&&(n=t.rank-1),n!==t.rank-1)throw Error(`Softmax cross entropy along a non-last dimension is not yet supported. Labels / logits was rank ${t.rank} and dim was ${n}`);const s=(0,us.cb)(((e,t,s)=>{const a=(0,He.l)(t,[n],!0),r=(0,ft.l)((0,N.p)(t,"float32"),a);s([e,r]);const i=(0,bt.W)((0,_.d)(r,e));return{value:(0,$n.S)(i,[n]),gradFunc:(e,t)=>{const[s,a]=t,r=(0,pt.rv)(e.shape,[n]);return[(0,_.d)((0,T.X)(e,r),(0,ft.l)((0,N.p)(s,"float32"),(0,we.Q)(a))),(0,_.d)((0,T.X)(e,r),(0,ft.l)((0,we.Q)(a),(0,N.p)(s,"float32")))]}}}));return s(e,t)}(r,i);return Ws(u,l,a)}}),Zs=(0,p.op)({sparseFillEmptyRows_:function(e,t,n,s){const a=(0,c._1)(e,"indices","sparseFillEmptyRows","int32"),r=(0,c._1)(t,"values","sparseFillEmptyRows"),i=(0,c._1)(n,"denseShape","sparseFillEmptyRows","int32"),o=(0,c._1)(s,"defaultValue","sparseFillEmptyRows",r.dtype);if(2!==a.rank)throw new Error(`Indices should be Tensor2D but received shape\n        ${a.shape}`);if(1!==r.rank)throw new Error(`Values should be Tensor1D but received shape ${r.shape}`);if(1!==i.rank)throw new Error(`Dense shape should be Tensor1D but received shape ${i.shape}`);if(0!==o.rank)throw new Error(`Default value should be a scalar but received shape ${o.shape}`);const h={indices:a,values:r,denseShape:i,defaultValue:o},p=l.BV.runKernel(u.O3z,h);return{outputIndices:p[0],outputValues:p[1],emptyRowIndicator:p[2],reverseIndexMap:p[3]}}}),Qs=(0,p.op)({sparseReshape_:function(e,t,n){const s=(0,c._1)(e,"inputIndices","sparseReshape","int32"),a=(0,c._1)(t,"inputShape","sparseReshape","int32"),r=(0,c._1)(n,"newShape","sparseReshape","int32");if(2!==s.rank)throw new Error(`Input indices should be Tensor2D but received shape\n        ${s.shape}`);if(1!==a.rank)throw new Error(`Input shape should be Tensor1D but received shape ${a.shape}`);if(1!==r.rank)throw new Error(`New shape should be Tensor1D but received shape ${r.shape}`);const i={inputIndices:s,inputShape:a,newShape:r},o=l.BV.runKernel(u.nhH,i);return{outputIndices:o[0],outputShape:o[1]}}}),Js=(0,p.op)({sparseSegmentMean_:function(e,t,n){const s=(0,c._1)(e,"data","sparseSegmentMean"),a=(0,c._1)(t,"indices","sparseSegmentMean","int32"),r=(0,c._1)(n,"segmentIds","sparseSegmentMean","int32");if(s.rank<1)throw new Error("Data should be at least 1 dimensional but received scalar");if(1!==a.rank)throw new Error(`Indices should be Tensor1D but received shape\n          ${a.shape}`);if(1!==r.rank)throw new Error(`Segment ids should be Tensor1D but received shape\n          ${r.shape}`);const i={data:s,indices:a,segmentIds:r};return l.BV.runKernel(u.w3H,i)}}),ea=(0,p.op)({sparseSegmentSum_:function(e,t,n){const s=(0,c._1)(e,"data","sparseSegmentSum"),a=(0,c._1)(t,"indices","sparseSegmentSum","int32"),r=(0,c._1)(n,"segmentIds","sparseSegmentSum","int32");if(s.rank<1)throw new Error("Data should be at least 1 dimensional but received scalar");if(1!==a.rank)throw new Error(`Indices should be Tensor1D but received shape\n         ${a.shape}`);if(1!==r.rank)throw new Error(`Segment ids should be Tensor1D but received shape\n         ${r.shape}`);const i={data:s,indices:a,segmentIds:r};return l.BV.runKernel(u.ZjV,i)}}),ta=(0,p.op)({stringNGrams_:function(e,t,n,s,a,r,i,o){const h=(0,c._1)(e,"data","stringNGrams","string");if("string"!==h.dtype)throw new Error("Data must be of datatype string");if(1!==h.shape.length)throw new Error(`Data must be a vector, saw: ${h.shape}`);const p=(0,c._1)(t,"dataSplits","stringNGrams");if("int32"!==p.dtype)throw new Error("Data splits must be of datatype int32");const d={separator:n,nGramWidths:s,leftPad:a,rightPad:r,padWidth:i,preserveShortSequences:o},f={data:h,dataSplits:p},m=l.BV.runKernel(u._JP,f,d);return{nGrams:m[0],nGramsSplits:m[1]}}}),na=(0,p.op)({stringSplit_:function(e,t,n=!0){const s=(0,c._1)(e,"input","stringSplit","string"),a=(0,c._1)(t,"delimiter","stringSplit","string");if(1!==s.rank)throw new Error(`Input should be Tensor1D but received shape ${s.shape}`);if(0!==a.rank)throw new Error(`Delimiter should be a scalar but received shape ${a.shape}`);const r={skipEmpty:n},i={input:s,delimiter:a},o=l.BV.runKernel(u.s1s,i,r);return{indices:o[0],values:o[1],shape:o[2]}}}),sa=(0,p.op)({stringToHashBucketFast_:function(e,t){const n=(0,c._1)(e,"input","stringToHashBucketFast","string"),s={numBuckets:t};if(t<=0)throw new Error("Number of buckets must be at least 1");const a={input:n};return l.BV.runKernel(u.XkS,a,s)}}),aa={fft:yn.k,ifft:bn.S,rfft:vn.Q,irfft:xn.w},ra={hammingWindow:xs,hannWindow:vs,frame:ws,stft:ks},ia={flipLeftRight:Ss,grayscaleToRGB:Ns,resizeNearestNeighbor:Fs.j,resizeBilinear:Rs.I,rotateWithOffset:Ts,cropAndResize:Is,nonMaxSuppression:$s,nonMaxSuppressionAsync:async function(e,t,n,s=.5,a=Number.NEGATIVE_INFINITY){const r=(0,c._1)(e,"boxes","nonMaxSuppressionAsync"),i=(0,c._1)(t,"scores","nonMaxSuppressionAsync"),o=Cs(r,i,n,s,a);n=o.maxOutputSize,s=o.iouThreshold,a=o.scoreThreshold;const l=await Promise.all([r.data(),i.data()]),u=l[0],h=l[1],{selectedIndices:p}=(0,Es.GP)(u,h,n,s,a);return r!==e&&r.dispose(),i!==t&&i.dispose(),Rn(p,"int32")},nonMaxSuppressionWithScore:_s,nonMaxSuppressionWithScoreAsync:async function(e,t,n,s=.5,a=Number.NEGATIVE_INFINITY,r=0){const i=(0,c._1)(e,"boxes","nonMaxSuppressionAsync"),o=(0,c._1)(t,"scores","nonMaxSuppressionAsync"),l=Cs(i,o,n,s,a,r);n=l.maxOutputSize,s=l.iouThreshold,a=l.scoreThreshold,r=l.softNmsSigma;const u=await Promise.all([i.data(),o.data()]),h=u[0],p=u[1],{selectedIndices:d,selectedScores:f}=(0,Es.pA)(h,p,n,s,a,r);return i!==e&&i.dispose(),o!==t&&o.dispose(),{selectedIndices:Rn(d,"int32"),selectedScores:Rn(f)}},nonMaxSuppressionPadded:As,nonMaxSuppressionPaddedAsync:async function(e,t,n,s=.5,a=Number.NEGATIVE_INFINITY,r=!1){const i=(0,c._1)(e,"boxes","nonMaxSuppressionAsync"),o=(0,c._1)(t,"scores","nonMaxSuppressionAsync"),l=Cs(i,o,n,s,a,null),u=l.maxOutputSize,h=l.iouThreshold,p=l.scoreThreshold,[d,f]=await Promise.all([i.data(),o.data()]),{selectedIndices:m,validOutputs:g}=(0,Es.qP)(d,f,u,h,p,r);return i!==e&&i.dispose(),o!==t&&o.dispose(),{selectedIndices:Rn(m,"int32"),validOutputs:(0,nn.i)(g,"int32")}},threshold:Ds,transform:Os},oa={bandPart:Ms,gramSchmidt:zs,qr:Ps},la={absoluteDifference:Us,computeWeightedLoss:Ws,cosineDistance:Gs,hingeLoss:Hs,huberLoss:qs,logLoss:Xs,meanSquaredError:js,sigmoidCrossEntropy:Ks,softmaxCrossEntropy:Ys},ua={sparseFillEmptyRows:Zs,sparseReshape:Qs,sparseSegmentMean:Js,sparseSegmentSum:ea},ca={stringNGrams:ta,stringSplit:na,stringToHashBucketFast:sa}},9019:(e,t,n)=>{"use strict";n.d(t,{v:()=>i});var s=n(1297),a=n(574),r=n(7641);const i=(0,n(6519).op)({pad_:function(e,t,n=0){const i=(0,r._1)(e,"x","pad");if(0===i.rank)throw new Error("pad(scalar) is not defined. Pass non-scalar to pad");const o={paddings:t,constantValue:n},l={x:i};return s.BV.runKernel(a.lyA,l,o)}})},7350:(e,t,n)=>{"use strict";n.d(t,{d:()=>p});var s=n(7641),a=n(7636),r=n(3766),i=n(2854),o=n(4397),l=n(4400),u=n(6519),c=n(7325),h=n(6550);const p=(0,u.op)({pool_:function(e,t,n,u,p,d,f){null==p&&(p=[1,1]),null==d&&(d=1),0===u&&(u="valid");const m=(0,s._1)(e,"x","maxPool");let g=m,y=!1;3===m.rank&&(y=!0,g=(0,c.X)(m,[1,m.shape[0],m.shape[1],m.shape[2]])),a.hu(o.jT(d,p),(()=>`Error in pool: Either strides or dilations must be 1. Got strides ${d} and dilations '${p}'`));const b=o.Xw(g.shape,t,d,p,u),x=[b.dilationHeight,b.dilationWidth];let v;v="same"===u?function(e,t){const n=e.map(((e,n)=>e+(e-1)*(t[n]-1))).map((e=>e-1)),s=n.map((e=>Math.floor(e/2))),a=n.map(((e,t)=>e-s[t]));return n.map(((e,t)=>[s[t],a[t]]))}([b.filterHeight,b.filterWidth],x):[[0,0],[0,0]];const w=1===x[0]&&1===x[1],[k,I]=function(e,t,n){const s=n.map((e=>e[0])),a=n.map((e=>e[1])),r=e.concat(s,a),i=t.map(((e,t)=>(e-r[t]%e)%e)),o=a.map(((e,t)=>e+i[t]));return[t.map(((e,t)=>[s[t],o[t]])),t.map(((e,t)=>[0,i[t]]))]}([b.inHeight,b.inWidth],x,v),S=w?u:"valid",N=w?g:(0,h.f)(g,x,k),T=("avg"===n?()=>(0,r.w)(N,t,d,S,f):()=>(0,l._)(N,t,d,S,f))(),C=w?T:(0,i.E)(T,x,I);return y?(0,c.X)(C,[C.shape[1],C.shape[2],C.shape[3]]):C}})},1483:(e,t,n)=>{"use strict";n.d(t,{s:()=>o});var s=n(1297),a=n(574),r=n(9932),i=n(7641);const o=(0,n(6519).op)({pow_:function(e,t){let n=(0,i._1)(e,"base","pow"),o=(0,i._1)(t,"exp","pow");[n,o]=(0,r.makeTypesMatch)(n,o);const l={a:n,b:o};return s.BV.runKernel(a.pe_,l)}})},4100:(e,t,n)=>{"use strict";n.d(t,{A:()=>i});var s=n(1297),a=n(574),r=n(7641);const i=(0,n(6519).op)({prelu_:function(e,t){const n={x:(0,r._1)(e,"x","prelu"),alpha:(0,r._1)(t,"alpha","prelu")};return s.BV.runKernel(a.o0g,n)}})},2042:(e,t,n)=>{"use strict";function s(e,t=!1){console.log(e.toString(t))}n.d(t,{S:()=>s})},6256:(e,t,n)=>{"use strict";n.d(t,{W:()=>o});var s=n(1297),a=n(574),r=n(7641),i=n(9028);const o=(0,n(6519).op)({prod_:function(e,t=null,n=!1){let o=(0,r._1)(e,"x","prod");"bool"===o.dtype&&(o=(0,i.p)(o,"int32"));const l={x:o},u={axis:t,keepDims:n};return s.BV.runKernel(a.DlI,l,u)}})},5016:(e,t,n)=>{"use strict";n.d(t,{k:()=>i});var s=n(1297),a=n(574),r=n(7641);const i=(0,n(6519).op)({real_:function(e){const t={input:(0,r._1)(e,"input","real")};return s.BV.runKernel(a.xJR,t)}})},9226:(e,t,n)=>{"use strict";n.d(t,{M:()=>i});var s=n(1297),a=n(574),r=n(7641);const i=(0,n(6519).op)({reciprocal_:function(e){const t={x:(0,r._1)(e,"x","reciprocal")};return s.BV.runKernel(a.$HU,t)}})},1879:(e,t,n)=>{"use strict";n.d(t,{U:()=>i});var s=n(1297),a=n(574),r=n(7641);const i=(0,n(6519).op)({relu_:function(e){const t={x:(0,r._1)(e,"x","relu")};return s.BV.runKernel(a.qkr,t)}})},897:(e,t,n)=>{"use strict";n.d(t,{b:()=>i});var s=n(1297),a=n(574),r=n(7641);const i=(0,n(6519).op)({relu6_:function(e){const t={x:(0,r._1)(e,"x","relu6")};return s.BV.runKernel(a.SbG,t)}})},7325:(e,t,n)=>{"use strict";n.d(t,{X:()=>i});var s=n(1297),a=n(574),r=n(7641);const i=(0,n(6519).op)({reshape_:function(e,t){const n={x:(0,r._1)(e,"x","reshape","string_or_numeric")},i={shape:t};return s.BV.runKernel(a.HZH,n,i)}})},1170:(e,t,n)=>{"use strict";n.d(t,{G:()=>i});var s=n(1297),a=n(574),r=n(7641);const i=(0,n(6519).op)({reverse_:function(e,t){const n={x:(0,r._1)(e,"x","reverse")},i={dims:t};return s.BV.runKernel(a.mKl,n,i)}})},2061:(e,t,n)=>{"use strict";n.d(t,{N:()=>i});var s=n(1297),a=n(574),r=n(7641);const i=(0,n(6519).op)({round_:function(e){const t={x:(0,r._1)(e,"x","round")};return s.BV.runKernel(a.e07,t)}})},1638:(e,t,n)=>{"use strict";n.d(t,{b:()=>i});var s=n(1297),a=n(574),r=n(7641);const i=(0,n(6519).op)({rsqrt_:function(e){const t={x:(0,r._1)(e,"x","rsqrt","float32")};return s.BV.runKernel(a.bV0,t)}})},503:(e,t,n)=>{"use strict";n.d(t,{i:()=>r});var s=n(7636),a=n(6641);function r(e,t){if(((0,s.fU)(e)&&"string"!==t||Array.isArray(e))&&"complex64"!==t)throw new Error("Error creating a new Scalar: value must be a primitive (number|boolean|string)");if("string"===t&&(0,s.fU)(e)&&!(e instanceof Uint8Array))throw new Error("When making a scalar from encoded string, the value must be `Uint8Array`.");return(0,a.H)(e,[],[],t)}},6556:(e,t,n)=>{"use strict";n.r(t),n.d(t,{calculateShapes:()=>i,validateInput:()=>r,validateUpdateShape:()=>a});var s=n(7636);function a(e,t,n){const s=t.rank>1?t.shape[t.rank-1]:1,a=t.rank>1?t.rank-1:1,r=`Must have updates.shape = indices.shape[:batchDim] + shape[sliceDim:], got updates.shape: ${n.shape}, indices.shape: ${t.shape}, shape: ${e}, sliceDim: ${s}, and batchDim: ${a}.`;if(n.rank<a)throw new Error(r+` update.rank < ${a}. `);if(e.length<s+(n.rank-a))throw new Error(r+` Output shape length < ${s+(n.rank-a)}`);if(n.rank!==a+e.length-s)throw new Error(r+" update.rank != "+(a+e.length-s));for(let e=0;e<a;++e)if(n.shape[e]!==t.shape[e])throw new Error(r+` updates.shape[${e}] (${n.shape[e]}) != indices.shape[${e}] (${t.shape[e]}).`);for(let t=0;t<n.rank-a;++t)if(n.shape[t+a]!==e[t+s])throw new Error(r+` updates.shape[${t+a}] (${n.shape[t+a]}) != shape[${t+a}] (${e[t+a]})`)}function r(e,t,n){if(t.rank<1)throw new Error(`tf.scatterND() expects the indices to be rank 1 or higher, but the rank was ${t.rank}.`);if(e.rank<1)throw new Error(`tf.scatterND() expects the updates to be rank 1 or higher, but the rank was ${e.rank}.`);if("int32"!==t.dtype)throw new Error(`The dtype of 'indices' should be int32, but got dtype: ${t.dtype}`);if(n.length<1)throw new Error(`Output rank must be greater or equal to 1, but got shape: ${n}`);if(0===n.length){if(0===t.size)throw new Error(`Indices specified for empty output. indices shape: ${t.shape}`);if(0===e.size)throw new Error(`Updates specified for empty output. updates shape: ${e.shape}`)}a(n,t,e)}function i(e,t,n){const a=t.shape.length,r=a>1?t.shape[a-1]:1,i=n.length;let o=1;for(let e=r;e<i;++e)o*=n[e];const l=r<1?1:r;return{sliceRank:r,numUpdates:(0,s.NA)(t.shape)/l,sliceSize:o,strides:[...(0,s.e3)(n.slice(0,r)),1],outputSize:(0,s.NA)(n)}}},3330:(e,t,n)=>{"use strict";n.d(t,{U:()=>i});var s=n(1297),a=n(574),r=n(7641);const i=(0,n(6519).op)({selu_:function(e){const t={x:(0,r._1)(e,"x","selu")};return s.BV.runKernel(a.oFR,t)}})},3952:(e,t,n)=>{"use strict";n.d(t,{$:()=>a,y:()=>s});const s=1.7580993408473768,a=1.0507009873554805},8999:(e,t,n)=>{"use strict";n.d(t,{U:()=>u});var s=n(7641),a=n(7636),r=n(5294),i=n(1555),o=n(6519),l=n(7325);const u=(0,o.op)({separableConv2d_:function(e,t,n,o,u,c=[1,1],h="NHWC"){const p=(0,s._1)(e,"x","separableConv2d"),d=(0,s._1)(t,"depthwiseFilter","separableConv2d"),f=(0,s._1)(n,"pointwiseFilter","separableConv2d");let m=p,g=!1;if(3===p.rank&&(g=!0,m=(0,l.X)(p,[1,p.shape[0],p.shape[1],p.shape[2]])),"NCHW"===h)throw new Error("separableConv2d currently does not support dataFormat NCHW; only NHWC is supported");a.hu(4===m.rank,(()=>`Error in separableConv2d: input must be rank 4, but got rank ${m.rank}.`)),a.hu(4===d.rank,(()=>`Error in separableConv2d: depthwise filter must be rank 4, but got rank ${d.rank}.`)),a.hu(4===f.rank,(()=>`Error in separableConv2d: pointwise filter must be rank 4, but got rank ${d.rank}.`)),a.hu(1===f.shape[0],(()=>`Error in separableConv2d: the first dimension of pointwise filter  must be 1, but got ${f.shape[0]}.`)),a.hu(1===f.shape[1],(()=>`Error in separableConv2d: the second dimension of pointwise filter must be 1, but got ${f.shape[1]}.`));const y=d.shape[2],b=d.shape[3];a.hu(f.shape[2]===y*b,(()=>`Error in separableConv2d: the third dimension of pointwise filter must be ${y*b}, but got ${f.shape[2]}.`));const x=(0,i.B)(m,d,o,u,h,c),v=(0,r.T)(x,f,1,"valid",h);return g?(0,l.X)(v,[v.shape[1],v.shape[2],v.shape[3]]):v}})},1840:(e,t,n)=>{"use strict";n.d(t,{X:()=>i});var s=n(1297),a=n(574),r=n(7641);const i=(0,n(6519).op)({sigmoid_:function(e){const t={x:(0,r._1)(e,"x","sigmoid","float32")};return s.BV.runKernel(a.a5O,t)}})},2327:(e,t,n)=>{"use strict";n.d(t,{X:()=>i});var s=n(1297),a=n(574),r=n(7641);const i=(0,n(6519).op)({sign_:function(e){const t={x:(0,r._1)(e,"x","sign")};return s.BV.runKernel(a.i5y,t)}})},9358:(e,t,n)=>{"use strict";n.d(t,{O:()=>i});var s=n(1297),a=n(574),r=n(7641);const i=(0,n(6519).op)({sin_:function(e){const t={x:(0,r._1)(e,"x","sin","float32")};return s.BV.runKernel(a.RQH,t)}})},7632:(e,t,n)=>{"use strict";n.d(t,{R:()=>i});var s=n(1297),a=n(574),r=n(7641);const i=(0,n(6519).op)({sinh_:function(e){const t={x:(0,r._1)(e,"x","sinh")};return s.BV.runKernel(a.wYB,t)}})},6616:(e,t,n)=>{"use strict";n.d(t,{t:()=>i});var s=n(1297),a=n(574),r=n(7641);const i=(0,n(6519).op)({slice_:function(e,t,n){const i=(0,r._1)(e,"x","slice","string_or_numeric");if(0===i.rank)throw new Error("Slicing scalar is not possible");const o={x:i},l={begin:t,size:n};return s.BV.runKernel(a.p2w,o,l)}})},4700:(e,t,n)=>{"use strict";n.r(t),n.d(t,{assertParamsValid:()=>a,computeFlatOffset:()=>y,computeOutShape:()=>i,getNormalizedAxes:()=>c,isSliceContinous:()=>g,maskToAxes:()=>r,parseSliceParams:()=>b,sliceInfo:()=>x,startForAxis:()=>f,startIndicesWithElidedDims:()=>h,stopForAxis:()=>m,stopIndicesWithElidedDims:()=>p,stridesForAxis:()=>d,stridesWithElidedDims:()=>o});var s=n(7636);function a(e,t,n){const a=e.shape.length;s.hu(a===t.length,(()=>`Error in slice${a}D: Length of begin ${t} must match the rank of the array (${a}).`)),s.hu(a===n.length,(()=>`Error in slice${a}D: Length of size ${n} must match the rank of the array (${a}).`));for(let r=0;r<a;++r)s.hu(t[r]+n[r]<=e.shape[r],(()=>`Error in slice${a}D: begin[${r}] + size[${r}] (${t[r]+n[r]}) would overflow input.shape[${r}] (${e.shape[r]})`))}function r(e){const t=[];let n=0;for(;e>0;)1&e&&t.push(n),e/=2,n++;return t}function i(e,t,n){const s=[];for(let a=0;a<e.length;a++)s[a]=Math.ceil((t[a]-e[a])/n[a]);return s}function o(e,t,n,s){const a=[...e];for(let e=a.length;e<s.length;e++)a.push(1);for(let e=0;e<n;e++)0===e?a[t]=1:(a.splice(t,0,1),a.pop());return a}function l(e,t,n){return n<=e?n:n-(t-1)}function u(e,t){const n=[];for(let s=0;s<e;s++)n.push(t+s);return n}function c(e,t,n,s,a,r,i,l,u){const c=e.length;let g=new Array(c),y=new Array(c),b=new Array(c);if(t.length&&n>0){const u=t[0],c=n+1;g=h(i,u,c,s,e),y=p(l,u,c,a,e),b=o(r,u,c,e)}else for(let t=0;t<c;t++)g[t]=f(i,s,r,e,t,u),y[t]=m(l,a,r,e,t,u),b[t]=d(r,t,u);return{begin:g,end:y,strides:b}}function h(e,t,n,s,a){const r=[...a],i=u(n,t);for(let a=0;a<r.length;a++)if(i.indexOf(a)>-1)r[a]=0;else{const i=l(t,n,a);let o=s[i];e&1<<i&&(o=0),r[a]=o}return r}function p(e,t,n,a,r){const i=[...r],o=u(n,t);for(let s=0;s<i.length;s++)if(o.indexOf(s)>-1)i[s]=Number.MAX_SAFE_INTEGER;else{const r=l(t,n,s);let o=a[r];e&1<<r&&(o=Number.MAX_SAFE_INTEGER),i[s]=o}for(let e=0;e<i.length;e++){const t=r[e];i[e]<0&&(i[e]+=t),i[e]=s.uZ(0,i[e],r[e])}return i}function d(e,t,n){let s=e[t];return(n&1<<t||null==s)&&(s=1),s}function f(e,t,n,a,r,i){let o=t[r];const l=n[r]||1;(e&1<<r||i&1<<r||null==o)&&(o=l>0?Number.MIN_SAFE_INTEGER:Number.MAX_SAFE_INTEGER);const u=a[r];return o<0&&(o+=u),o=s.uZ(0,o,u-1),o}function m(e,t,n,a,r,i){let o=t[r];const l=n[r]||1;(e&1<<r||i&1<<r||null==o)&&(o=l>0?Number.MAX_SAFE_INTEGER:Number.MIN_SAFE_INTEGER);const u=a[r];return o<0&&(o+=u),o=l>0?s.uZ(0,o,u):s.uZ(-1,o,u-1),o}function g(e,t,n){let s=n.length;for(let e=0;e<n.length;e++)if(n[e]>1){s=e;break}for(let a=s+1;a<n.length;a++)if(t[a]>0||n[a]!==e[a])return!1;return!0}function y(e,t){let n=e.length>0?e[e.length-1]:1;for(let s=0;s<e.length-1;s++)n+=e[s]*t[s];return n}function b(e,t,n){let a;const r=e.shape.length;let i;return a="number"==typeof t?[t,...new Array(r-1).fill(0)]:t.length<r?t.concat(new Array(r-t.length).fill(0)):t.slice(),a.forEach((e=>{s.hu(-1!==e,(()=>"slice() does not support negative begin indexing."))})),i=null==n?new Array(r).fill(-1):"number"==typeof n?[n,...new Array(r-1).fill(-1)]:n.length<r?n.concat(new Array(r-n.length).fill(-1)):n,i=i.map(((t,n)=>t>=0?t:(s.hu(-1===t,(()=>`Negative size values should be exactly -1 but got ${t} for the slice() size at index ${n}.`)),e.shape[n]-a[n]))),[a,i]}function x(e,t,n,s,a,r,i,o,l){let u;if(null==s?(u=new Array(t.length),u.fill(1)):u=s,null!=i&&0!=(i&i-1))throw new Error("Multiple ellipses in slice is not allowed.");let c=!1;const h={dims:u.length,numAddAxisAfterEllipsis:0,begin:t.slice(),end:n.slice(),strides:u.slice(),beginMask:a,endMask:r,ellipsisMask:i,newAxisMask:o,shrinkAxisMask:l};for(let e=0;e<h.dims;e++)c&&0!=(1<<e&o)&&h.numAddAxisAfterEllipsis++,1<<e&i&&(c=!0);c||(h.ellipsisMask|=1<<h.dims,h.dims++);const p={dims:e.length,beginMask:0,endMask:0,beginValid:!1,endValid:!1};!function(e,t){t.beginMask=0,t.endMask=0,t.shrinkAxisMask=0;let n=0;t.beginValid=null!=e.begin,t.endValid=null!=e.end,t.begin=new Array(t.dims),t.end=new Array(t.dims),t.strides=new Array(t.dims),t.finalShapeGatherIndices=[],t.finalShapeGatherIndicesSparse=[],t.inputShapeGatherIndicesSparse=new Array(t.dims);for(let s=0;s<e.dims;s++)if(1<<s&e.ellipsisMask){const a=Math.min(t.dims-(e.dims-s)+1+e.numAddAxisAfterEllipsis,t.dims);for(;n<a;n++)t.begin[n]=0,t.end[n]=0,t.strides[n]=1,t.beginMask|=1<<n,t.endMask|=1<<n,t.finalShapeGatherIndices.push(n),t.finalShapeGatherIndicesSparse.push(-1),t.inputShapeGatherIndicesSparse[n]=s}else if(1<<s&e.newAxisMask)t.finalShapeGatherIndices.push(-2),t.finalShapeGatherIndicesSparse.push(-1);else{if(n===t.begin.length)throw Error(`Index out of range using input dim ${n}; input has only ${t.dims} dims, ${t.begin.length}.`);null!=e.begin&&(t.begin[n]=e.begin[s]),null!=e.end&&(t.end[n]=e.end[s]),t.strides[n]=e.strides[s],e.beginMask&1<<s&&(t.beginMask|=1<<n),e.endMask&1<<s&&(t.endMask|=1<<n),e.shrinkAxisMask&1<<s?(t.finalShapeGatherIndices.push(-1),t.finalShapeGatherIndicesSparse.push(-1),t.shrinkAxisMask|=1<<n):(t.finalShapeGatherIndices.push(n),t.finalShapeGatherIndicesSparse.push(s)),t.inputShapeGatherIndicesSparse[n]=s,n++}}(h,p);let d=!0,f=!0,m=!0;const g=[],y=[];for(let t=0;t<e.length;++t){if(0===p.strides[t])throw Error(`strides[${t}] must be non-zero`);const n=!!(p.shrinkAxisMask&1<<t),s=e[t];if(-1===s){g.push(n?1:-1);continue}const a=[p.beginMask&1<<t,p.endMask&1<<t],r=[p.strides[t]>0?0:-1,p.strides[t]>0?s:s-1];if(n&&p.strides[t]<=0)throw Error("only stride 1 allowed on non-range indexing.");m=m&&1===p.strides[t];const i=!!(p.beginMask&1<<t&&p.endMask&1<<t);if(p.beginValid&&p.endValid){if(n){const e=p.begin[t]<0?s+p.begin[t]:p.begin[t];if(p.begin[t]=e,p.end[t]=p.begin[t]+1,e<0||e>=s)throw Error(`slice index ${p.begin[t]} of dimension ${t} out of bounds.`)}else p.begin[t]=v(p.begin[t],0,p.strides[t],s,a,r),p.end[t]=v(p.end[t],1,p.strides[t],s,a,r);const e=1===p.strides[t]&&0===p.begin[t]&&p.end[t]===s;d=d&&e,f=f&&(0===t&&1===p.strides[t]||e)}else d=d&&1===p.strides[t]&&i,f=f&&(0===t&&1===p.strides[t]||i);let o,l=!1;if(p.beginValid&&p.endValid?(o=p.end[t]-p.begin[t],l=!0):n?(o=1,l=!0):i&&s>=0&&(o=p.strides[t]<0?-s:s,l=!0),l){let e;e=0===o||o<0!=p.strides[t]<0?0:Math.trunc(o/p.strides[t])+(o%p.strides[t]!=0?1:0),g.push(e)}else g.push(-1)}for(let e=0;e<p.finalShapeGatherIndices.length;++e){const t=p.finalShapeGatherIndices[e];t>=0?y.push(g[t]):-2===t&&y.push(1)}return{finalShapeSparse:y.filter(((e,t)=>-2!==p.finalShapeGatherIndices[t])),finalShape:y,isIdentity:d,sliceDim0:f,isSimpleSlice:m,begin:p.begin,end:p.end,strides:p.strides}}function v(e,t,n,s,a,r){if(a[t])return n>0?r[t]:r[t+1&1];{const t=e<0?s+e:e;return t<r[0]?r[0]:t>r[1]?r[1]:t}}},5649:(e,t,n)=>{"use strict";n.d(t,{X:()=>i});var s=n(1297),a=n(574),r=n(7641);const i=(0,n(6519).op)({softmax_:function(e,t=-1){const n=(0,r._1)(e,"logits","softmax","float32");if(-1===t&&(t=n.rank-1),t!==n.rank-1)throw Error(`Softmax along a non-last dimension is not yet supported. Logits was rank ${n.rank} and dim was ${t}`);const i={logits:n},o={dim:t};return s.BV.runKernel(a.Gcp,i,o)}})},913:(e,t,n)=>{"use strict";n.d(t,{W:()=>i});var s=n(1297),a=n(574),r=n(7641);const i=(0,n(6519).op)({softplus_:function(e){const t={x:(0,r._1)(e,"x","softplus")};return s.BV.runKernel(a.MRv,t)}})},6550:(e,t,n)=>{"use strict";n.d(t,{f:()=>o});var s=n(1297),a=n(574),r=n(7641),i=n(7636);const o=(0,n(6519).op)({spaceToBatchND_:function(e,t,n){const o=(0,r._1)(e,"x","spaceToBatchND");i.hu(o.rank>=1+t.length,(()=>`input rank ${o.rank} should be > than [blockShape] ${t.length}`)),i.hu(n.length===t.length,(()=>`paddings.shape[0] ${n.length} must be equal to [blockShape] ${t.length}`)),i.hu(o.shape.reduce(((e,s,a)=>a>0&&a<=t.length?e&&(s+n[a-1][0]+n[a-1][1])%t[a-1]==0:e),!0),(()=>`input spatial dimensions ${o.shape.slice(1)} with paddings ${n.toString()} must be divisible by blockShapes ${t.toString()}`));const l={x:o},u={blockShape:t,paddings:n};return s.BV.runKernel(a.TQc,l,u)}})},8037:(e,t,n)=>{"use strict";n.d(t,{k:()=>i});var s=n(1297),a=n(574),r=n(7636);const i=(0,n(6519).op)({fft_:function(e){(0,r.hu)("complex64"===e.dtype,(()=>`The dtype for tf.spectral.fft() must be complex64 but got ${e.dtype}.`));const t={input:e};return s.BV.runKernel(a.vwp,t)}})},1882:(e,t,n)=>{"use strict";n.d(t,{S:()=>i});var s=n(1297),a=n(574),r=n(7636);const i=(0,n(6519).op)({ifft_:function(e){(0,r.hu)("complex64"===e.dtype,(()=>`The dtype for tf.spectral.ifft() must be complex64 but got ${e.dtype}.`));const t={input:e};return s.BV.runKernel(a.Qg5,t)}})},1227:(e,t,n)=>{"use strict";n.d(t,{w:()=>f});var s=n(9943),a=n(5041),r=n(9456),i=n(5183),o=n(6519),l=n(5016),u=n(7325),c=n(1170),h=n(503),p=n(6616),d=n(1882);const f=(0,o.op)({irfft_:function(e){const t=e.shape[e.shape.length-1],n=e.size/t;let o;if(t<=2){const s=(0,u.X)(e,[n,t]);o=(0,d.S)(s)}else{const f=[n,2*(t-1)],m=(0,u.X)((0,l.k)(e),[n,t]),g=(0,u.X)((0,r.a)(e),[n,t]),y=(0,c.G)((0,p.t)(m,[0,1],[n,t-2]),1),b=(0,i.d)((0,c.G)((0,p.t)(g,[0,1],[n,t-2]),1),(0,h.i)(-1)),x=(0,a.z)([m,y],1),v=(0,a.z)([g,b],1),w=(0,u.X)((0,s.P)(x,v),[f[0],f[1]]);o=(0,d.S)(w)}if(o=(0,l.k)(o),3===e.rank&&0!==e.shape[0]){const t=o,n=e.shape[0];o=(0,u.X)(o,[n,o.shape[0]/n,o.shape[1]]),t.dispose()}return o}})},553:(e,t,n)=>{"use strict";n.d(t,{Q:()=>m});var s=n(7636),a=n(9943),r=n(5041),i=n(9456),o=n(6519),l=n(5016),u=n(7325),c=n(6616),h=n(843),p=n(6373),d=n(1181),f=n(8037);const m=(0,o.op)({rfft_:function(e,t){(0,s.hu)("float32"===e.dtype,(()=>`The dtype for rfft() must be real value but got ${e.dtype}`));let n=e.shape[e.shape.length-1];const o=e.size/n;let m;if(null!=t&&t<n){const s=e.shape.map((e=>0)),a=e.shape.map((e=>e));a[e.shape.length-1]=t,m=(0,c.t)(e,s,a),n=t}else if(null!=t&&t>n){const s=e.shape.map((e=>e));s[e.shape.length-1]=t-n,m=(0,r.z)([e,(0,p.l)(s)],e.shape.length-1),n=t}else m=e;const g=(0,d.P)(m),y=(0,u.X)((0,a.P)(m,g),[o,n]),b=(0,f.k)(y),x=Math.floor(n/2)+1,v=(0,l.k)(b),w=(0,i.a)(b),k=(0,h.V)(v,[x,n-x],v.shape.length-1),I=(0,h.V)(w,[x,n-x],w.shape.length-1),S=m.shape.slice();return S[m.shape.length-1]=x,(0,u.X)((0,a.P)(k[0],I[0]),S)}})},843:(e,t,n)=>{"use strict";n.d(t,{V:()=>i});var s=n(1297),a=n(574),r=n(7641);const i=(0,n(6519).op)({split_:function(e,t,n=0){const i={x:(0,r._1)(e,"x","split")},o={numOrSizeSplits:t,axis:n};return s.BV.runKernel(a.L8s,i,o)}})},2402:(e,t,n)=>{"use strict";n.d(t,{_:()=>i});var s=n(1297),a=n(574),r=n(7641);const i=(0,n(6519).op)({sqrt_:function(e){const t={x:(0,r._1)(e,"x","sqrt","float32")};return s.BV.runKernel(a.FKq,t)}})},3061:(e,t,n)=>{"use strict";n.d(t,{h:()=>r});var s=n(1297),a=n(7641);const r=(0,n(6519).op)({square_:function(e){const t=(0,a._1)(e,"x","square");return s.BV.runKernel("Square",{x:t},{})}})},3672:(e,t,n)=>{"use strict";n.d(t,{$:()=>l});var s=n(1297),a=n(574),r=n(9932),i=n(7641),o=n(6501);const l=(0,n(6519).op)({squaredDifference_:function(e,t){let n=(0,i._1)(e,"a","squaredDifference"),l=(0,i._1)(t,"b","squaredDifference");[n,l]=(0,r.makeTypesMatch)(n,l),(0,o.assertAndGetBroadcastShape)(n.shape,l.shape);const u={a:n,b:l};return s.BV.runKernel(a._tC,u,{})}})},1663:(e,t,n)=>{"use strict";n.d(t,{L:()=>o});var s=n(7641),a=n(7636),r=n(6519),i=n(7325);const o=(0,r.op)({squeeze_:function(e,t){const n=(0,s._1)(e,"x","squeeze","string_or_numeric");return(0,i.X)(n,(0,a.bp)(n.shape,t).newShape)}})},8440:(e,t,n)=>{"use strict";n.d(t,{k:()=>o});var s=n(1297),a=n(574),r=n(7641),i=n(7636);const o=(0,n(6519).op)({stack_:function(e,t=0){const n=(0,r.sI)(e,"tensors","stack","string_or_numeric");i.hu(n.length>=1,(()=>"Pass at least one tensor to tf.stack")),n.length>0&&i.hu(t<=n[0].rank,(()=>"Axis must be <= rank of the tensor"));const o=n,l={axis:t};return s.BV.runKernel(a.QiL,o,l)}})},8329:(e,t,n)=>{"use strict";n.d(t,{N:()=>i});var s=n(1297),a=n(574),r=n(7641);const i=(0,n(6519).op)({step_:function(e,t=0){const n={x:(0,r._1)(e,"x","step")},i={alpha:t};return s.BV.runKernel(a.h8e,n,i)}})},2172:(e,t,n)=>{"use strict";n.d(t,{N:()=>i});var s=n(1297),a=n(574),r=n(7641);const i=(0,n(6519).op)({stridedSlice_:function(e,t,n,i,o=0,l=0,u=0,c=0,h=0){const p={x:(0,r._1)(e,"x","stridedSlice","string_or_numeric")},d={begin:t,end:n,strides:i,beginMask:o,endMask:l,ellipsisMask:u,newAxisMask:c,shrinkAxisMask:h};return s.BV.runKernel(a.jQk,p,d)}})},3189:(e,t,n)=>{"use strict";n.d(t,{l:()=>o});var s=n(1297),a=n(574),r=n(9932),i=n(7641);const o=(0,n(6519).op)({sub_:function(e,t){let n=(0,i._1)(e,"a","sub"),o=(0,i._1)(t,"b","sub");[n,o]=(0,r.makeTypesMatch)(n,o);const l={a:n,b:o};return s.BV.runKernel(a.Tr8,l)}})},5619:(e,t,n)=>{"use strict";n.d(t,{S:()=>o});var s=n(1297),a=n(574),r=n(7641),i=n(9028);const o=(0,n(6519).op)({sum_:function(e,t=null,n=!1){let o=(0,r._1)(e,"x","sum");"bool"===o.dtype&&(o=(0,i.p)(o,"int32"));const l={x:o},u={axis:t,keepDims:n};return s.BV.runKernel(a.GBy,l,u)}})},4969:(e,t,n)=>{"use strict";n.d(t,{O:()=>i});var s=n(1297),a=n(574),r=n(7641);const i=(0,n(6519).op)({tan_:function(e){const t={x:(0,r._1)(e,"x","tan","float32")};return s.BV.runKernel(a.sEM,t)}})},7491:(e,t,n)=>{"use strict";n.d(t,{A:()=>i});var s=n(1297),a=n(574),r=n(7641);const i=(0,n(6519).op)({tanh_:function(e){const t={x:(0,r._1)(e,"x","tanh","float32")};return s.BV.runKernel(a.MIZ,t)}})},9332:(e,t,n)=>{"use strict";n.d(t,{X:()=>r});var s=n(7641),a=n(6641);function r(e,t,n){const r=(0,s.C)(e,n);return(0,a.H)(e,t,r,n)}},1417:(e,t,n)=>{"use strict";n.d(t,{w:()=>i});var s=n(7641),a=n(7636),r=n(6641);function i(e,t,n){if((0,a.Cq)(e),null!=t&&3!==t.length)throw new Error("tensor3d() requires shape to have three numbers");const i=(0,s.C)(e,n);if(3!==i.length&&1!==i.length)throw new Error("tensor3d() requires values to be number[][][] or flat/TypedArray");if(1===i.length&&null==t)throw new Error("tensor3d() requires shape to be provided when `values` are a flat array");return(0,r.H)(e,t,i,n)}},6641:(e,t,n)=>{"use strict";n.d(t,{H:()=>i});var s=n(1297),a=n(7636),r=n(1180);function i(e,t,n,i){if(null==i&&(i=(0,a.D2)(e)),"complex64"===i)throw new Error("Cannot construct a complex64 tensor directly. Please use tf.complex(real, imag).");if(!(0,a.fU)(e)&&!Array.isArray(e)&&"number"!=typeof e&&"boolean"!=typeof e&&"string"!=typeof e)throw new Error("values passed to tensor(values) must be a number/boolean/string or an array of numbers/booleans/strings, or a TypedArray");if(null!=t){(0,a.Mu)(t);const e=(0,a.NA)(t),s=(0,a.NA)(n);(0,a.hu)(e===s,(()=>`Based on the provided shape, [${t}], the tensor should have ${e} values but has ${s}`));for(let e=0;e<n.length;++e){const s=n[e],r=e!==n.length-1||s!==(0,a.NA)(t.slice(e));(0,a.hu)(n[e]===t[e]||!r,(()=>`Error creating a new Tensor. Inferred shape (${n}) does not match the provided shape (${t}). `))}}return(0,a.fU)(e)||Array.isArray(e)||(e=[e]),t=t||n,e="string"!==i?(0,r.toTypedArray)(e,i):(0,a.xH)(e,[],!0),s.BV.makeTensor(e,t,i)}},9650:(e,t,n)=>{"use strict";n.d(t,{G:()=>o});var s=n(1297),a=n(574),r=n(7641),i=n(7636);const o=(0,n(6519).op)({tile_:function(e,t){const n=(0,r._1)(e,"x","tile","string_or_numeric");i.hu(n.rank===t.length,(()=>`Error in transpose: rank of input ${n.rank} must match length of reps ${t}.`));const o={x:n},l={reps:t};return s.BV.runKernel(a.n9L,o,l)}})},2633:(e,t,n)=>{"use strict";n.d(t,{h:()=>i});var s=n(1297),a=n(574),r=n(7641);const i=(0,n(6519).op)({topk_:function(e,t=1,n=!0){const i=(0,r._1)(e,"x","topk");if(0===i.rank)throw new Error("topk() expects the input to be of rank 1 or higher");const o=i.shape[i.shape.length-1];if(t<0)throw new Error(`'k' passed to topk() must be >= 0 but got ${t}`);if(t>o)throw new Error(`'k' passed to topk() must be <= the last dimension (${o}) but got ${t}`);const l={x:i},u={k:t,sorted:n},[c,h]=s.BV.runKernel(a.cWu,l,u);return{values:c,indices:h}}})},6506:(e,t,n)=>{"use strict";n.d(t,{p:()=>d});var s=n(1297),a=n(3381),r=n(574),i=n(7641),o=n(7636),l=n(9943),u=n(9456),c=n(5699),h=n(6519),p=n(5016);const d=(0,h.op)({transpose_:function(e,t,n){const h=(0,i._1)(e,"x","transpose");if(null==t&&(t=h.shape.map(((e,t)=>t)).reverse()),o.hu(h.rank===t.length,(()=>`Error in transpose: rank of input ${h.rank} must match length of perm ${t}.`)),t.forEach((e=>{o.hu(e>=0&&e<h.rank,(()=>"All entries in 'perm' must be between 0 and "+(h.rank-1)+` but got ${t}`))})),h.rank<=1)return h.clone();const d={x:h},f={perm:t};return"complex64"===h.dtype?(0,a.lu)((()=>{let e=(0,p.k)(h),t=(0,u.a)(h);return e=s.BV.runKernel(r.G3Y,{x:e},f),t=s.BV.runKernel(r.G3Y,{x:t},f),n&&(t=(0,c.W)(t)),(0,l.P)(e,t)})):s.BV.runKernel(r.G3Y,d,f)}})},9238:(e,t,n)=>{"use strict";n.d(t,{T:()=>o});var s=n(1297),a=n(574),r=n(7641),i=n(7636);const o=(0,n(6519).op)({unique_:function(e,t=0){const n=(0,r._1)(e,"x","unique","string_or_numeric");(0,i.hu)(n.rank>0,(()=>"The input tensor must be at least 1D"));const o={x:n},l={axis:t},[u,c]=s.BV.runKernel(a.kpP,o,l);return{values:u,indices:c}}})},2882:(e,t,n)=>{"use strict";n.d(t,{p:()=>o});var s=n(1297),a=n(574),r=n(7641),i=n(7636);const o=(0,n(6519).op)({unsortedSegmentSum_:function(e,t,n){const o=(0,r._1)(e,"x","unsortedSegmentSum"),l=(0,r._1)(t,"segmentIds","unsortedSegmentSum","int32");(0,i.hu)((0,i.GN)(n),(()=>"numSegments must be of dtype int"));const u={x:o,segmentIds:l},c={numSegments:n};return s.BV.runKernel(a.Qvg,u,c)}})},9829:(e,t,n)=>{"use strict";n.d(t,{H:()=>o});var s=n(1297),a=n(574),r=n(7641),i=n(7636);const o=(0,n(6519).op)({unstack_:function(e,t=0){const n=(0,r._1)(e,"x","unstack","string_or_numeric");i.hu(t>=-n.shape.length&&t<n.shape.length,(()=>`Axis = ${t} is not in [-${n.shape.length}, ${n.shape.length})`));const o={value:n},l={axis:t};return s.BV.runKernel(a.ToN,o,l)}})},5788:(e,t,n)=>{"use strict";n.d(t,{a:()=>l});var s=n(1297),a=n(574),r=n(7641),i=n(6833),o=n(6501);const l=(0,n(6519).op)({where_:function(e,t,n){const l=(0,r._1)(t,"a","where"),u=(0,r._1)(n,"b","where"),c=(0,r._1)(e,"condition","where","bool"),h=(0,o.assertAndGetBroadcastShape)((0,o.assertAndGetBroadcastShape)(c.shape,l.shape),u.shape),p={condition:(0,i.U)(c,h),t:(0,i.U)(l,h),e:(0,i.U)(u,h)};return s.BV.runKernel(a.PhF,p)}})},6373:(e,t,n)=>{"use strict";n.d(t,{l:()=>i});var s=n(1297),a=n(7636),r=n(9943);function i(e,t="float32"){if("complex64"===t){const t=i(e,"float32"),n=i(e,"float32");return(0,r.P)(t,n)}const n=(0,a.wT)((0,a.NA)(e),t);return s.BV.makeTensor(n,e,t)}},1181:(e,t,n)=>{"use strict";n.d(t,{P:()=>i});var s=n(1297),a=n(574),r=n(7641);const i=(0,n(6519).op)({zerosLike_:function(e){const t={x:(0,r._1)(e,"x","zerosLike")};return s.BV.runKernel(a.RuY,t)}})},9379:(e,t,n)=>{"use strict";n.r(t);var s=n(9938),a=n(9527);(0,a.t3)().prototype.abs=function(){return this.throwIfDisposed(),(0,s.W)(this)};var r=n(1712);(0,a.t3)().prototype.acos=function(){return this.throwIfDisposed(),(0,r.K)(this)};var i=n(9714);(0,a.t3)().prototype.acosh=function(){return this.throwIfDisposed(),(0,i._)(this)};var o=n(7862);(0,a.t3)().prototype.add=function(e){return this.throwIfDisposed(),(0,o.I)(this,e)};var l=n(456);(0,a.t3)().prototype.all=function(e,t){return this.throwIfDisposed(),(0,l.$)(this,e,t)};var u=n(5567);(0,a.t3)().prototype.any=function(e,t){return this.throwIfDisposed(),(0,u.Y)(this,e,t)};var c=n(5725);(0,a.t3)().prototype.argMax=function(e){return this.throwIfDisposed(),(0,c.N)(this,e)};var h=n(2698);(0,a.t3)().prototype.argMin=function(e){return this.throwIfDisposed(),(0,h.v)(this,e)};var p=n(7325),d=n(7636);(0,a.t3)().prototype.asScalar=function(){return this.throwIfDisposed(),(0,d.hu)(1===this.size,(()=>"The array must have only 1 element.")),(0,p.X)(this,[])};var f=n(9028);(0,a.t3)().prototype.asType=function(e){return this.throwIfDisposed(),(0,f.p)(this,e)},(0,a.t3)().prototype.as1D=function(){return this.throwIfDisposed(),(0,p.X)(this,[this.size])},(0,a.t3)().prototype.as2D=function(e,t){return this.throwIfDisposed(),(0,p.X)(this,[e,t])},(0,a.t3)().prototype.as3D=function(e,t,n){return this.throwIfDisposed(),(0,p.X)(this,[e,t,n])},(0,a.t3)().prototype.as4D=function(e,t,n,s){return this.throwIfDisposed(),(0,p.X)(this,[e,t,n,s])},(0,a.t3)().prototype.as5D=function(e,t,n,s,a){return this.throwIfDisposed(),(0,p.X)(this,[e,t,n,s,a])};var m=n(507);(0,a.t3)().prototype.asin=function(){return this.throwIfDisposed(),(0,m.Z)(this)};var g=n(9080);(0,a.t3)().prototype.asinh=function(){return this.throwIfDisposed(),(0,g.V)(this)};var y=n(3079);(0,a.t3)().prototype.atan=function(){return this.throwIfDisposed(),(0,y.z)(this)};var b=n(5511);(0,a.t3)().prototype.atan2=function(e){return this.throwIfDisposed(),(0,b.f)(this,e)};var x=n(6241);(0,a.t3)().prototype.atanh=function(){return this.throwIfDisposed(),(0,x.C)(this)};var v=n(3766);(0,a.t3)().prototype.avgPool=function(e,t,n,s){return this.throwIfDisposed(),(0,v.w)(this,e,t,n,s)};var w=n(2854);(0,a.t3)().prototype.batchToSpaceND=function(e,t){return this.throwIfDisposed(),(0,w.E)(this,e,t)};var k=n(3490);(0,a.t3)().prototype.batchNorm=function(e,t,n,s,a){return this.throwIfDisposed(),(0,k.t)(this,e,t,n,s,a)};var I=n(6833);(0,a.t3)().prototype.broadcastTo=function(e){return this.throwIfDisposed(),(0,I.U)(this,e)},(0,a.t3)().prototype.cast=function(e){return this.throwIfDisposed(),(0,f.p)(this,e)};var S=n(7382);(0,a.t3)().prototype.ceil=function(){return this.throwIfDisposed(),(0,S.m)(this)};var N=n(229);(0,a.t3)().prototype.clipByValue=function(e,t){return this.throwIfDisposed(),(0,N.i)(this,e,t)};var T=n(5041);(0,a.t3)().prototype.concat=function(e,t){return this.throwIfDisposed(),e instanceof a.es&&(e=[e]),(0,T.z)([this,...e],t)};var C=n(3373);(0,a.t3)().prototype.conv1d=function(e,t,n,s,a,r){return this.throwIfDisposed(),(0,C.P)(this,e,t,n,s,a,r)};var $=n(8436);(0,a.t3)().prototype.conv2dTranspose=function(e,t,n,s,a){return this.throwIfDisposed(),(0,$.b)(this,e,t,n,s,a)};var E=n(5294);(0,a.t3)().prototype.conv2d=function(e,t,n,s,a,r){return this.throwIfDisposed(),(0,E.T)(this,e,t,n,s,a,r)};var _=n(7832);(0,a.t3)().prototype.cos=function(){return this.throwIfDisposed(),(0,_.m)(this)};var A=n(8880);(0,a.t3)().prototype.cosh=function(){return this.throwIfDisposed(),(0,A.f)(this)};var R=n(9319);(0,a.t3)().prototype.cumprod=function(e,t,n){return this.throwIfDisposed(),(0,R.$)(this,e,t,n)};var F=n(4663);(0,a.t3)().prototype.cumsum=function(e,t,n){return this.throwIfDisposed(),(0,F.z)(this,e,t,n)};var D=n(5213);(0,a.t3)().prototype.depthToSpace=function(e,t){return this.throwIfDisposed(),(0,D.n)(this,e,t)};var O=n(1555);(0,a.t3)().prototype.depthwiseConv2d=function(e,t,n,s,a,r){return this.throwIfDisposed(),(0,O.B)(this,e,t,n,s,a,r)};var M=n(5274);(0,a.t3)().prototype.dilation2d=function(e,t,n,s,a){return this.throwIfDisposed(),(0,M.W)(this,e,t,n,s,a)};var z=n(8991);(0,a.t3)().prototype.divNoNan=function(e){return this.throwIfDisposed(),(0,z.N)(this,e)};var L=n(7232);(0,a.t3)().prototype.div=function(e){return this.throwIfDisposed(),(0,L.h)(this,e)};var B=n(6410);(0,a.t3)().prototype.dot=function(e){return this.throwIfDisposed(),(0,B.A)(this,e)};var P=n(165);(0,a.t3)().prototype.elu=function(){return this.throwIfDisposed(),(0,P.p)(this)};var V=n(7645);(0,a.t3)().prototype.equal=function(e){return this.throwIfDisposed(),(0,V.D)(this,e)};var W=n(2597);(0,a.t3)().prototype.erf=function(){return this.throwIfDisposed(),(0,W.q)(this)};var U=n(7610);(0,a.t3)().prototype.euclideanNorm=function(e,t){return this.throwIfDisposed(),(0,U.d)(this,e,t)};var G=n(5295);(0,a.t3)().prototype.exp=function(){return this.throwIfDisposed(),(0,G.Q)(this)};var H=n(8818);(0,a.t3)().prototype.expandDims=function(e){return this.throwIfDisposed(),(0,H.d)(this,e)};var q=n(4888);(0,a.t3)().prototype.expm1=function(){return this.throwIfDisposed(),(0,q.t)(this)};var X=n(8037);(0,a.t3)().prototype.fft=function(){return this.throwIfDisposed(),(0,X.k)(this)},(0,a.t3)().prototype.flatten=function(){return this.throwIfDisposed(),(0,p.X)(this,[this.size])};var j=n(154);(0,a.t3)().prototype.floor=function(){return this.throwIfDisposed(),(0,j.G)(this)};var K=n(2609);(0,a.t3)().prototype.floorDiv=function(e){return this.throwIfDisposed(),(0,K.q)(this,e)};var Y=n(7260);(0,a.t3)().prototype.gather=function(e,t){return this.throwIfDisposed(),(0,Y.I)(this,e,t)};var Z=n(97);(0,a.t3)().prototype.greaterEqual=function(e){return this.throwIfDisposed(),(0,Z.b)(this,e)};var Q=n(7437);(0,a.t3)().prototype.greater=function(e){return this.throwIfDisposed(),(0,Q.p)(this,e)};var J=n(1882);(0,a.t3)().prototype.ifft=function(){return this.throwIfDisposed(),(0,J.S)(this)};var ee=n(1227);(0,a.t3)().prototype.irfft=function(){return this.throwIfDisposed(),(0,ee.w)(this)};var te=n(4401);(0,a.t3)().prototype.isFinite=function(){return this.throwIfDisposed(),(0,te.x)(this)};var ne=n(7135);(0,a.t3)().prototype.isInf=function(){return this.throwIfDisposed(),(0,ne.U)(this)};var se=n(2233);(0,a.t3)().prototype.isNaN=function(){return this.throwIfDisposed(),(0,se.i)(this)};var ae=n(6567);(0,a.t3)().prototype.leakyRelu=function(e){return this.throwIfDisposed(),(0,ae.h)(this,e)};var re=n(858);(0,a.t3)().prototype.lessEqual=function(e){return this.throwIfDisposed(),(0,re.z)(this,e)};var ie=n(9026);(0,a.t3)().prototype.less=function(e){return this.throwIfDisposed(),(0,ie.d)(this,e)};var oe=n(2811);(0,a.t3)().prototype.localResponseNormalization=function(e,t,n,s){return this.throwIfDisposed(),(0,oe.G)(this,e,t,n,s)};var le=n(7332);(0,a.t3)().prototype.logSigmoid=function(){return this.throwIfDisposed(),(0,le.e)(this)};var ue=n(9170);(0,a.t3)().prototype.logSoftmax=function(e){return this.throwIfDisposed(),(0,ue.C)(this,e)};var ce=n(7532);(0,a.t3)().prototype.logSumExp=function(e,t){return this.throwIfDisposed(),(0,ce.l)(this,e,t)};var he=n(1661);(0,a.t3)().prototype.log=function(){return this.throwIfDisposed(),(0,he.c)(this)};var pe=n(5813);(0,a.t3)().prototype.log1p=function(){return this.throwIfDisposed(),(0,pe.K)(this)};var de=n(1704);(0,a.t3)().prototype.logicalAnd=function(e){return this.throwIfDisposed(),(0,de.H)(this,e)};var fe=n(9321);(0,a.t3)().prototype.logicalNot=function(){return this.throwIfDisposed(),(0,fe.h)(this)};var me=n(7508);(0,a.t3)().prototype.logicalOr=function(e){return this.throwIfDisposed(),(0,me.K)(this,e)};var ge=n(4805);(0,a.t3)().prototype.logicalXor=function(e){return this.throwIfDisposed(),(0,ge.e)(this,e)};var ye=n(7962);(0,a.t3)().prototype.matMul=function(e,t,n){return this.throwIfDisposed(),(0,ye.O)(this,e,t,n)};var be=n(4400);(0,a.t3)().prototype.maxPool=function(e,t,n,s){return this.throwIfDisposed(),(0,be._)(this,e,t,n,s)};var xe=n(6963);(0,a.t3)().prototype.max=function(e,t){return this.throwIfDisposed(),(0,xe.F)(this,e,t)};var ve=n(4734);(0,a.t3)().prototype.maximum=function(e){return this.throwIfDisposed(),(0,ve.g)(this,e)};var we=n(4506);(0,a.t3)().prototype.mean=function(e,t){return this.throwIfDisposed(),(0,we.J)(this,e,t)};var ke=n(8014);(0,a.t3)().prototype.min=function(e,t){return this.throwIfDisposed(),(0,ke.V)(this,e,t)};var Ie=n(7256);(0,a.t3)().prototype.minimum=function(e){return this.throwIfDisposed(),(0,Ie.L)(this,e)};var Se=n(401);(0,a.t3)().prototype.mirrorPad=function(e,t){return this.throwIfDisposed(),(0,Se.V)(this,e,t)};var Ne=n(2907);(0,a.t3)().prototype.mod=function(e){return this.throwIfDisposed(),(0,Ne.w)(this,e)};var Te=n(5183);(0,a.t3)().prototype.mul=function(e){return this.throwIfDisposed(),(0,Te.d)(this,e)};var Ce=n(5699);(0,a.t3)().prototype.neg=function(){return this.throwIfDisposed(),(0,Ce.W)(this)};var $e=n(6772);(0,a.t3)().prototype.norm=function(e,t,n){return this.throwIfDisposed(),(0,$e.K)(this,e,t,n)};var Ee=n(7289);(0,a.t3)().prototype.notEqual=function(e){return this.throwIfDisposed(),(0,Ee.Q)(this,e)};var _e=n(1222);(0,a.t3)().prototype.oneHot=function(e,t=1,n=0){return this.throwIfDisposed(),(0,_e.l)(this,e,t,n)};var Ae=n(9734);(0,a.t3)().prototype.onesLike=function(){return this.throwIfDisposed(),(0,Ae.J)(this)};var Re=n(9019);(0,a.t3)().prototype.pad=function(e,t){return this.throwIfDisposed(),(0,Re.v)(this,e,t)};var Fe=n(7350);(0,a.t3)().prototype.pool=function(e,t,n,s,a,r){return this.throwIfDisposed(),(0,Fe.d)(this,e,t,n,s,a,r)};var De=n(1483);(0,a.t3)().prototype.pow=function(e){return this.throwIfDisposed(),(0,De.s)(this,e)};var Oe=n(4100);(0,a.t3)().prototype.prelu=function(e){return this.throwIfDisposed(),(0,Oe.A)(this,e)};var Me=n(6256);(0,a.t3)().prototype.prod=function(e,t){return this.throwIfDisposed(),(0,Me.W)(this,e,t)};var ze=n(9226);(0,a.t3)().prototype.reciprocal=function(){return this.throwIfDisposed(),(0,ze.M)(this)};var Le=n(1879);(0,a.t3)().prototype.relu=function(){return this.throwIfDisposed(),(0,Le.U)(this)};var Be=n(897);(0,a.t3)().prototype.relu6=function(){return this.throwIfDisposed(),(0,Be.b)(this)},(0,a.t3)().prototype.reshapeAs=function(e){return this.throwIfDisposed(),(0,p.X)(this,e.shape)},(0,a.t3)().prototype.reshape=function(e){return this.throwIfDisposed(),(0,p.X)(this,e)};var Pe=n(4791);(0,a.t3)().prototype.resizeBilinear=function(e,t,n){return this.throwIfDisposed(),(0,Pe.I)(this,e,t,n)};var Ve=n(2105);(0,a.t3)().prototype.resizeNearestNeighbor=function(e,t,n){return this.throwIfDisposed(),(0,Ve.j)(this,e,t,n)};var We=n(1170);(0,a.t3)().prototype.reverse=function(e){return this.throwIfDisposed(),(0,We.G)(this,e)};var Ue=n(553);(0,a.t3)().prototype.rfft=function(){return this.throwIfDisposed(),(0,Ue.Q)(this)};var Ge=n(2061);(0,a.t3)().prototype.round=function(){return this.throwIfDisposed(),(0,Ge.N)(this)};var He=n(1638);(0,a.t3)().prototype.rsqrt=function(){return this.throwIfDisposed(),(0,He.b)(this)};var qe=n(3330);(0,a.t3)().prototype.selu=function(){return this.throwIfDisposed(),(0,qe.U)(this)};var Xe=n(8999);(0,a.t3)().prototype.separableConv2d=function(e,t,n,s,a,r){return this.throwIfDisposed(),(0,Xe.U)(this,e,t,n,s,a,r)};var je=n(1840);(0,a.t3)().prototype.sigmoid=function(){return this.throwIfDisposed(),(0,je.X)(this)};var Ke=n(2327);(0,a.t3)().prototype.sign=function(){return this.throwIfDisposed(),(0,Ke.X)(this)};var Ye=n(9358);(0,a.t3)().prototype.sin=function(){return this.throwIfDisposed(),(0,Ye.O)(this)};var Ze=n(7632);(0,a.t3)().prototype.sinh=function(){return this.throwIfDisposed(),(0,Ze.R)(this)};var Qe=n(6616);(0,a.t3)().prototype.slice=function(e,t){return this.throwIfDisposed(),(0,Qe.t)(this,e,t)};var Je=n(5649);(0,a.t3)().prototype.softmax=function(e){return this.throwIfDisposed(),(0,Je.X)(this,e)};var et=n(913);(0,a.t3)().prototype.softplus=function(){return this.throwIfDisposed(),(0,et.W)(this)};var tt=n(6550);(0,a.t3)().prototype.spaceToBatchND=function(e,t){return this.throwIfDisposed(),(0,tt.f)(this,e,t)};var nt=n(843);(0,a.t3)().prototype.split=function(e,t){return this.throwIfDisposed(),(0,nt.V)(this,e,t)};var st=n(2402);(0,a.t3)().prototype.sqrt=function(){return this.throwIfDisposed(),(0,st._)(this)};var at=n(3061);(0,a.t3)().prototype.square=function(){return this.throwIfDisposed(),(0,at.h)(this)};var rt=n(3672);(0,a.t3)().prototype.squaredDifference=function(e){return this.throwIfDisposed(),(0,rt.$)(this,e)};var it=n(1663);(0,a.t3)().prototype.squeeze=function(e){return this.throwIfDisposed(),(0,it.L)(this,e)};var ot=n(8440);(0,a.t3)().prototype.stack=function(e,t){this.throwIfDisposed();const n=e instanceof a.es?[this,e]:[this,...e];return(0,ot.k)(n,t)};var lt=n(8329);(0,a.t3)().prototype.step=function(e){return this.throwIfDisposed(),(0,lt.N)(this,e)};var ut=n(2172);(0,a.t3)().prototype.stridedSlice=function(e,t,n,s,a,r,i,o){return this.throwIfDisposed(),(0,ut.N)(this,e,t,n,s,a,r,i,o)};var ct=n(3189);(0,a.t3)().prototype.sub=function(e){return this.throwIfDisposed(),(0,ct.l)(this,e)};var ht=n(5619);(0,a.t3)().prototype.sum=function(e,t){return this.throwIfDisposed(),(0,ht.S)(this,e,t)};var pt=n(4969);(0,a.t3)().prototype.tan=function(){return this.throwIfDisposed(),(0,pt.O)(this)};var dt=n(7491);(0,a.t3)().prototype.tanh=function(){return this.throwIfDisposed(),(0,dt.A)(this)};var ft=n(9650);(0,a.t3)().prototype.tile=function(e){return this.throwIfDisposed(),(0,ft.G)(this,e)},(0,a.t3)().prototype.toBool=function(){return this.throwIfDisposed(),(0,f.p)(this,"bool")},(0,a.t3)().prototype.toFloat=function(){return this.throwIfDisposed(),(0,f.p)(this,"float32")},(0,a.t3)().prototype.toInt=function(){return this.throwIfDisposed(),(0,f.p)(this,"int32")};var mt=n(2633);(0,a.t3)().prototype.topk=function(e,t){return this.throwIfDisposed(),(0,mt.h)(this,e,t)};var gt=n(6506);(0,a.t3)().prototype.transpose=function(e){return this.throwIfDisposed(),(0,gt.p)(this,e)};var yt=n(9238);(0,a.t3)().prototype.unique=function(e){return this.throwIfDisposed(),(0,yt.T)(this,e)};var bt=n(2882);(0,a.t3)().prototype.unsortedSegmentSum=function(e,t){return this.throwIfDisposed(),(0,bt.p)(this,e,t)};var xt=n(9829);(0,a.t3)().prototype.unstack=function(e){return this.throwIfDisposed(),(0,xt.H)(this,e)};var vt=n(5788);(0,a.t3)().prototype.where=function(e,t){return this.throwIfDisposed(),(0,vt.a)(e,this,t)};var wt=n(1181);(0,a.t3)().prototype.zerosLike=function(){return this.throwIfDisposed(),(0,wt.P)(this)}},9527:(e,t,n)=>{"use strict";n.d(t,{es:()=>b,YD:()=>h,_w:()=>v,t3:()=>x,FZ:()=>y,Vp:()=>g,Vi:()=>m});var s=n(4126),a=n(7636);function r(e,t,n,s){const r=(0,a.e3)(t),o=function(e,t,n,s){const r=(0,a.NA)(t),o=s[s.length-1],l=new Array(o).fill(0),c=t.length,h="complex64"===n?u(e):e;if(c>1)for(let e=0;e<r/o;e++){const t=e*o;for(let e=0;e<o;e++)l[e]=Math.max(l[e],i(h[t+e],0,n).length)}return l}(e,t,n,r),c=t.length,h=l(e,t,n,r,o),p=["Tensor"];return s&&(p.push(`  dtype: ${n}`),p.push(`  rank: ${c}`),p.push(`  shape: [${t}]`),p.push("  values:")),p.push(h.map((e=>"    "+e)).join("\n")),p.join("\n")}function i(e,t,n){let s;return s=Array.isArray(e)?`${parseFloat(e[0].toFixed(7))} + ${parseFloat(e[1].toFixed(7))}j`:(0,a.HD)(e)?`'${e}'`:"bool"===n?o(e):parseFloat(e.toFixed(7)).toString(),(0,a.oj)(s,t)}function o(e){return 0===e?"false":"true"}function l(e,t,n,s,a,r=!0){const c="complex64"===n?2:1,h=t[0],p=t.length;if(0===p)return"complex64"===n?[i(u(e)[0],0,n)]:"bool"===n?[o(e[0])]:[e[0].toString()];if(1===p){if(h>20){const t=3*c;let s=Array.from(e.slice(0,t)),r=Array.from(e.slice((h-3)*c,h*c));return"complex64"===n&&(s=u(s),r=u(r)),["["+s.map(((e,t)=>i(e,a[t],n))).join(", ")+", ..., "+r.map(((e,t)=>i(e,a[h-3+t],n))).join(", ")+"]"]}return["["+("complex64"===n?u(e):Array.from(e)).map(((e,t)=>i(e,a[t],n))).join(", ")+"]"]}const d=t.slice(1),f=s.slice(1),m=s[0]*c,g=[];if(h>20){for(let t=0;t<3;t++){const s=t*m,r=s+m;g.push(...l(e.slice(s,r),d,n,f,a,!1))}g.push("...");for(let t=h-3;t<h;t++){const s=t*m,r=s+m;g.push(...l(e.slice(s,r),d,n,f,a,t===h-1))}}else for(let t=0;t<h;t++){const s=t*m,r=s+m;g.push(...l(e.slice(s,r),d,n,f,a,t===h-1))}const y=2===p?",":"";g[0]="["+g[0]+y;for(let e=1;e<g.length-1;e++)g[e]=" "+g[e]+y;let b=",\n";for(let e=2;e<p;e++)b+="\n";return g[g.length-1]=" "+g[g.length-1]+"]"+(r?"":b),g}function u(e){const t=[];for(let n=0;n<e.length;n+=2)t.push([e[n],e[n+1]]);return t}var c=n(1180);class h{constructor(e,t,n){if(this.dtype=t,this.shape=e.slice(),this.size=a.NA(e),null!=n){const e=n.length;a.hu(e===this.size,(()=>`Length of values '${e}' does not match the size inferred by the shape '${this.size}'.`))}if("complex64"===t)throw new Error("complex64 dtype TensorBuffers are not supported. Please create a TensorBuffer for the real and imaginary parts separately and call tf.complex(real, imag).");this.values=n||a.rQ(t,this.size),this.strides=(0,a.e3)(e)}set(e,...t){0===t.length&&(t=[0]),a.hu(t.length===this.rank,(()=>`The number of provided coordinates (${t.length}) must match the rank (${this.rank})`));const n=this.locToIndex(t);this.values[n]=e}get(...e){0===e.length&&(e=[0]);let t=0;for(const n of e){if(n<0||n>=this.shape[t]){const t=`Requested out of range element at ${e}.   Buffer shape=${this.shape}`;throw new Error(t)}t++}let n=e[e.length-1];for(let t=0;t<e.length-1;++t)n+=this.strides[t]*e[t];return this.values[n]}locToIndex(e){if(0===this.rank)return 0;if(1===this.rank)return e[0];let t=e[e.length-1];for(let n=0;n<e.length-1;++n)t+=this.strides[n]*e[n];return t}indexToLoc(e){if(0===this.rank)return[];if(1===this.rank)return[e];const t=new Array(this.shape.length);for(let n=0;n<t.length-1;++n)t[n]=Math.floor(e/this.strides[n]),e-=t[n]*this.strides[n];return t[t.length-1]=e,t}get rank(){return this.shape.length}toTensor(){return p().makeTensor(this.values,this.shape,this.dtype)}}let p=null,d=null,f=null;function m(e){p=e}function g(e){d=e}function y(e){f=e}class b{constructor(e,t,n,s){this.kept=!1,this.isDisposedInternal=!1,this.shape=e.slice(),this.dtype=t||"float32",this.size=a.NA(e),this.strides=(0,a.e3)(e),this.dataId=n,this.id=s,this.rankType=this.rank<5?this.rank.toString():"higher"}get rank(){return this.shape.length}async buffer(){const e=await this.data();return d.buffer(this.shape,this.dtype,e)}bufferSync(){return d.buffer(this.shape,this.dtype,this.dataSync())}async array(){const e=await this.data();return(0,a.GX)(this.shape,e,"complex64"===this.dtype)}arraySync(){return(0,a.GX)(this.shape,this.dataSync(),"complex64"===this.dtype)}async data(){this.throwIfDisposed();const e=p().read(this.dataId);if("string"===this.dtype){const t=await e;try{return t.map((e=>c.decodeString(e)))}catch(e){throw new Error("Failed to decode the string bytes into utf-8. To get the original bytes, call tensor.bytes().")}}return e}dataToGPU(e){return this.throwIfDisposed(),p().readToGPU(this.dataId,e)}dataSync(){this.throwIfDisposed();const e=p().readSync(this.dataId);if("string"===this.dtype)try{return e.map((e=>c.decodeString(e)))}catch(e){throw new Error("Failed to decode the string bytes into utf-8. To get the original bytes, call tensor.bytes().")}return e}async bytes(){this.throwIfDisposed();const e=await p().read(this.dataId);return"string"===this.dtype?e:new Uint8Array(e.buffer)}dispose(){this.isDisposed||(p().disposeTensor(this),this.isDisposedInternal=!0)}get isDisposed(){return this.isDisposedInternal}throwIfDisposed(){if(this.isDisposed)throw new Error("Tensor is disposed.")}print(e=!1){return d.print(this,e)}clone(){return this.throwIfDisposed(),d.clone(this)}toString(e=!1){return r(this.dataSync(),this.shape,this.dtype,e)}cast(e){return this.throwIfDisposed(),d.cast(this,e)}variable(e=!0,t,n){return this.throwIfDisposed(),p().makeVariable(this,e,t,n)}}function x(){return(0,s.R)("Tensor",(()=>b))}Object.defineProperty(b,Symbol.hasInstance,{value:e=>!!e&&null!=e.data&&null!=e.dataSync&&null!=e.throwIfDisposed}),x();class v extends b{constructor(e,t,n,s){super(e.shape,e.dtype,e.dataId,s),this.trainable=t,this.name=n}assign(e){if(e.dtype!==this.dtype)throw new Error(`dtype of the new value (${e.dtype}) and previous value (${this.dtype}) must match`);if(!a.cO(e.shape,this.shape))throw new Error(`shape of the new value (${e.shape}) and previous value (${this.shape}) must match`);p().disposeTensor(this),this.dataId=e.dataId,p().incRef(this,null)}dispose(){p().disposeVariable(this),this.isDisposedInternal=!0}}Object.defineProperty(v,Symbol.hasInstance,{value:e=>e instanceof b&&null!=e.assign&&e.assign instanceof Function})},9932:(e,t,n)=>{"use strict";n.r(t),n.d(t,{assertTypesMatch:()=>o,getTensorsInContainer:()=>u,isTensorInList:()=>l,makeTypesMatch:()=>i});var s=n(9527),a=n(759),r=n(7636);function i(e,t){if(e.dtype===t.dtype)return[e,t];const n=(0,a.x8)(e.dtype,t.dtype);return[e.cast(n),t.cast(n)]}function o(e,t){(0,r.hu)(e.dtype===t.dtype,(()=>`The dtypes of the first(${e.dtype}) and second(${t.dtype}) input must match`))}function l(e,t){return t.some((t=>t.id===e.id))}function u(e){const t=[];return c(e,t,new Set),t}function c(e,t,n){if(null==e)return;if(e instanceof s.es)return void t.push(e);if(a=e,!Array.isArray(a)&&"object"!=typeof a)return;var a;const r=e;for(const e in r){const s=r[e];n.has(s)||(n.add(s),c(s,t,n))}}},7641:(e,t,n)=>{"use strict";n.d(t,{C:()=>l,_1:()=>h,sI:()=>p});var s=n(1297),a=n(415),r=n(9527),i=n(7636),o=n(1180);function l(e,t){let n=e;if((0,i.fU)(e))return"string"===t?[]:[e.length];if(!Array.isArray(e))return[];const s=[];for(;Array.isArray(n)||(0,i.fU)(n)&&"string"!==t;)s.push(n.length),n=n[0];return Array.isArray(e)&&(0,a.OB)().getBool("TENSORLIKE_CHECK_SHAPE_CONSISTENCY")&&u(e,s,[]),s}function u(e,t,n){if(n=n||[],!Array.isArray(e)&&!(0,i.fU)(e))return void(0,i.hu)(0===t.length,(()=>`Element arr[${n.join("][")}] is a primitive, but should be an array/TypedArray of ${t[0]} elements`));(0,i.hu)(t.length>0,(()=>`Element arr[${n.join("][")}] should be a primitive, but is an array of ${e.length} elements`)),(0,i.hu)(e.length===t[0],(()=>`Element arr[${n.join("][")}] should have ${t[0]} elements, but has ${e.length} elements`));const s=t.slice(1);for(let t=0;t<e.length;++t)u(e[t],s,n.concat(t))}function c(e,t,n,s){if("string_or_numeric"!==e){if(null==e)throw new Error("Expected dtype cannot be null.");if("numeric"!==e&&e!==t||"numeric"===e&&"string"===t)throw new Error(`Argument '${n}' passed to '${s}' must be ${e} tensor, but got ${t} tensor`)}}function h(e,t,n,a="numeric"){if(e instanceof r.es)return c(a,e.dtype,t,n),e;let u=(0,i.D2)(e);if("string"!==u&&["bool","int32","float32"].indexOf(a)>=0&&(u=a),c(a,u,t,n),null==e||!(0,i.fU)(e)&&!Array.isArray(e)&&"number"!=typeof e&&"boolean"!=typeof e&&"string"!=typeof e){const s=null==e?"null":e.constructor.name;throw new Error(`Argument '${t}' passed to '${n}' must be a Tensor or TensorLike, but got '${s}'`)}const h=l(e,u);(0,i.fU)(e)||Array.isArray(e)||(e=[e]);const p="string"!==u?(0,o.toTypedArray)(e,u):(0,i.xH)(e,[],!0);return s.BV.makeTensor(p,h,u)}function p(e,t,n,s="numeric"){if(!Array.isArray(e))throw new Error(`Argument ${t} passed to ${n} must be a \`Tensor[]\` or \`TensorLike[]\``);return e.map(((e,a)=>h(e,`${t}[${a}]`,n,s)))}},759:(e,t,n)=>{"use strict";var s,a,r,i,o;n.d(t,{x8:()=>u,yw:()=>s,z4:()=>c}),function(e){e.R0="R0",e.R1="R1",e.R2="R2",e.R3="R3",e.R4="R4",e.R5="R5",e.R6="R6"}(s||(s={})),function(e){e.float32="float32",e.int32="int32",e.bool="int32",e.complex64="complex64"}(a||(a={})),function(e){e.float32="float32",e.int32="int32",e.bool="bool",e.complex64="complex64"}(r||(r={})),function(e){e.float32="float32",e.int32="float32",e.bool="float32",e.complex64="complex64"}(i||(i={})),function(e){e.float32="complex64",e.int32="complex64",e.bool="complex64",e.complex64="complex64"}(o||(o={}));const l={float32:i,int32:a,bool:r,complex64:o};function u(e,t){if("string"===e||"string"===t){if("string"===e&&"string"===t)return"string";throw new Error(`Can not upcast ${e} with ${t}`)}return l[e][t]}function c(e){return u(e,"int32")}},1180:(e,t,n)=>{"use strict";n.r(t),n.d(t,{arraysEqual:()=>a.cO,assert:()=>a.hu,assertNonNegativeIntegerDimensions:()=>a.Mu,assertNonNull:()=>a.Cq,assertShapesMatch:()=>a.k5,bytesFromStringArray:()=>a.Ub,bytesPerElement:()=>a.bT,checkConversionForErrors:()=>a.D5,clamp:()=>a.uZ,computeStrides:()=>a.e3,createScalarValue:()=>x,createShuffledIndices:()=>a.U$,decodeString:()=>S,distSquared:()=>a.E7,encodeString:()=>I,fetch:()=>k,fingerPrint64:()=>b,flatten:()=>a.xH,getArrayFromDType:()=>a.rQ,getTypedArrayFromDType:()=>a.WP,hasEncodingLoss:()=>a.QB,hexToLong:()=>o,indexToLoc:()=>a.NE,inferDtype:()=>a.D2,inferFromImplicitShape:()=>a.JZ,isBoolean:()=>a.jn,isFunction:()=>a.mf,isInt:()=>a.GN,isNumber:()=>a.hj,isPromise:()=>a.tI,isScalarShape:()=>a.N9,isString:()=>a.HD,isTypedArray:()=>a.fU,isValidDtype:()=>a.LP,locToIndex:()=>a.qy,makeOnesTypedArray:()=>a.p8,makeZerosNestedTypedArray:()=>a.l6,makeZerosTypedArray:()=>a.wT,nearestDivisor:()=>a.jP,nearestLargerEven:()=>a.nY,now:()=>w,parseAxisParam:()=>a.EC,randUniform:()=>a.bj,repeatedTry:()=>a.WD,rightPad:()=>a.oj,shuffle:()=>a.TV,shuffleCombo:()=>a.d7,sizeFromShape:()=>a.NA,sizeToSquarishShape:()=>a.YP,squeezeShape:()=>a.bp,sum:()=>a.Sm,swap:()=>a.LF,tanh:()=>a.AE,toNestedArray:()=>a.GX,toTypedArray:()=>v});var s=n(415),a=n(7636),r=n(6521);const i=n.n(r)()||r;function o(e){return i.fromString(e,!0,16)}const l=o("c3a5c85c97cb3127"),u=o("b492b66fbe98f273"),c=o("9ae16a3b2f90404f");function h(e){return e.xor(e.shru(47))}function p(e,t,n){const s=e.slice(t,t+n);return i.fromBytes(Array.from(s),!0,!0)}function d(e,t){return p(e,t,8)}function f(e,t){return p(e,t,4)}function m(e,t){return 0===t?e:e.shru(t).or(e.shl(64-t))}function g(e,t,n=o("9ddfea08eb382d69")){let s=e.xor(t).mul(n);s=s.xor(s.shru(47));let a=t.xor(s).mul(n);return a=a.xor(a.shru(47)),a=a.mul(n),a}function y(e,t,n,s){return function(e,t,n,s,a,r){a=a.add(e),r=m(r.add(a).add(s),21);const i=a;return a=(a=a.add(t)).add(n),r=r.add(m(a,44)),[a.add(s),r.add(i)]}(d(e,t),d(e,t+8),d(e,t+16),d(e,t+24),n,s)}function b(e,t=e.length){const n=i.fromNumber(81,!0);if(t<=32)return t<=16?function(e,t=e.length){if(t>=8){const n=c.add(2*t),s=d(e,0).add(c),a=d(e,t-8);return g(m(a,37).mul(n).add(s),m(s,25).add(a).mul(n),n)}if(t>=4){const n=c.add(2*t);return g(f(e,0).shl(3).add(t),f(e,t-4),n)}if(t>0){const n=e[0]+(e[t>>1]<<8),s=t+(e[t-1]<<2);return h(c.mul(n).xor(l.mul(s))).mul(c)}return c}(e,t):function(e,t=e.length){const n=c.add(2*t),s=d(e,0).mul(u),a=d(e,8),r=d(e,t-8).mul(n),i=d(e,t-16).mul(c);return g(m(s.add(a),43).add(m(r,30)).add(i),s.add(m(a.add(c),18)).add(r),n)}(e,t);if(t<=64)return function(e,t=e.length){const n=c.add(2*t),s=d(e,0).mul(c),a=d(e,8),r=d(e,t-8).mul(n),i=d(e,t-16).mul(c),o=m(s.add(a),43).add(m(r,30)).add(i),l=g(o,s.add(m(a.add(c),18)).add(r),n),u=d(e,16).mul(n),h=d(e,24),p=o.add(d(e,t-32)).mul(n),f=l.add(d(e,t-24)).mul(n);return g(m(u.add(h),43).add(m(p,30)).add(f),u.add(m(h.add(s),18)).add(p),n)}(e,t);let s=n,a=n.mul(u).add(113),r=h(a.mul(c).add(113)).mul(c),o=[i.UZERO,i.UZERO],p=[i.UZERO,i.UZERO];s=s.mul(c).add(d(e,0));let b=0;const x=64*(t-1>>6),v=x+(t-1&63)-63;do{s=m(s.add(a).add(o[0]).add(d(e,b+8)),37).mul(u),a=m(a.add(o[1]).add(d(e,b+48)),42).mul(u),s=s.xor(p[1]),a=a.add(o[0]).add(d(e,b+40)),r=m(r.add(p[0]),33).mul(u),o=y(e,b,o[1].mul(u),s.add(p[0])),p=y(e,b+32,r.add(p[1]),a.add(d(e,b+16))),[r,s]=[s,r],b+=64}while(b!==x);const w=u.add(r.and(255).shl(1));return b=v,p[0]=p[0].add(t-1&63),o[0]=o[0].add(p[0]),p[0]=p[0].add(o[0]),s=m(s.add(a).add(o[0]).add(d(e,b+8)),37).mul(w),a=m(a.add(o[1]).add(d(e,b+48)),42).mul(w),s=s.xor(p[1].mul(9)),a=a.add(o[0].mul(9).add(d(e,b+40))),r=m(r.add(p[0]),33).mul(w),o=y(e,b,o[1].mul(w),s.add(p[0])),p=y(e,b+32,r.add(p[1]),a.add(d(e,b+16))),[r,s]=[s,r],g(g(o[0],p[0],w).add(h(a).mul(l)).add(r),g(o[1],p[1],w).add(s),w)}function x(e,t){return"string"===t?I(e):v([e],t)}function v(e,t){if("string"===t)throw new Error("Cannot convert a string[] to a TypedArray");if(Array.isArray(e)&&(e=a.xH(e)),(0,s.OB)().getBool("DEBUG")&&a.D5(e,t),function(e,t){return e instanceof Float32Array&&"float32"===t||e instanceof Int32Array&&"int32"===t||e instanceof Uint8Array&&"bool"===t}(e,t))return e;if(null==t||"float32"===t||"complex64"===t)return new Float32Array(e);if("int32"===t)return new Int32Array(e);if("bool"===t){const t=new Uint8Array(e.length);for(let n=0;n<t.length;++n)0!==Math.round(e[n])&&(t[n]=1);return t}throw new Error(`Unknown data type ${t}`)}function w(){return(0,s.OB)().platform.now()}function k(e,t){return(0,s.OB)().platform.fetch(e,t)}function I(e,t="utf-8"){return t=t||"utf-8",(0,s.OB)().platform.encode(e,t)}function S(e,t="utf-8"){return t=t||"utf-8",(0,s.OB)().platform.decode(e,t)}},7636:(e,t,n)=>{"use strict";function s(e){let t=e.length,n=0;for(;t>0;)n=Math.random()*t|0,t--,o(e,t,n)}function a(e,t){if(e.length!==t.length)throw new Error(`Array sizes must match to be shuffled together First array length was ${e.length}Second array length was ${t.length}`);let n=e.length,s=0;for(;n>0;)s=Math.random()*n|0,n--,o(e,n,s),o(t,n,s)}function r(e,t,n){return Math.max(e,Math.min(t,n))}function i(e){return e%2==0?e:e+1}function o(e,t,n){const s=e[t];e[t]=e[n],e[n]=s}function l(e){let t=0;for(let n=0;n<e.length;n++)t+=e[n];return t}function u(e,t){const n=Math.random();return t*n+(1-n)*e}function c(e,t){let n=0;for(let s=0;s<e.length;s++){const a=Number(e[s])-Number(t[s]);n+=a*a}return n}function h(e,t){if(!e)throw new Error("string"==typeof t?t:t())}function p(e,t,n=""){h(y(e,t),(()=>n+` Shapes ${e} and ${t} must match`))}function d(e){h(null!=e,(()=>"The input to the tensor constructor must be a non-null value."))}function f(e,t=[],n=!1){if(null==t&&(t=[]),Array.isArray(e)||R(e)&&!n)for(let s=0;s<e.length;++s)f(e[s],t,n);else t.push(e);return t}function m(e){if(0===e.length)return 1;let t=e[0];for(let n=1;n<e.length;n++)t*=e[n];return t}function g(e){return 0===e.length}function y(e,t){if(e===t)return!0;if(null==e||null==t)return!1;if(e.length!==t.length)return!1;for(let n=0;n<e.length;n++)if(e[n]!==t[n])return!1;return!0}function b(e){return e%1==0}function x(e){if(null!=Math.tanh)return Math.tanh(e);if(e===1/0)return 1;if(e===-1/0)return-1;{const t=Math.exp(2*e);return(t-1)/(t+1)}}function v(e){const t=Math.ceil(Math.sqrt(e));return[t,Math.ceil(e/t)]}function w(e){const t=new Uint32Array(e);for(let n=0;n<e;++n)t[n]=n;return s(t),t}function k(e,t){return t<=e.length?e:e+" ".repeat(t-e.length)}function I(e,t=(e=>0),n,s=setTimeout){return new Promise(((a,r)=>{let i=0;const o=()=>{if(e())return void a();i++;const l=t(i);null!=n&&i>=n?r():s(o,l)};o()}))}function S(e,t){let n=1,s=-1;for(let t=0;t<e.length;++t)if(e[t]>=0)n*=e[t];else if(-1===e[t]){if(-1!==s)throw Error(`Shapes can only have 1 implicit size. Found -1 at dim ${s} and dim ${t}`);s=t}else if(e[t]<0)throw Error(`Shapes can not be < 0. Found ${e[t]} at dim ${t}`);if(-1===s){if(t>0&&t!==n)throw Error(`Size(${t}) must match the product of shape ${e}`);return e}if(0===n)throw Error(`Cannot infer the missing size in [${e}] when there are 0 elements`);if(t%n!=0)throw Error(`The implicit shape can't be a fractional number. Got ${t} / ${n}`);const a=e.slice();return a[s]=t/n,a}function N(e,t){const n=t.length;return h((e=null==e?t.map(((e,t)=>t)):[].concat(e)).every((e=>e>=-n&&e<n)),(()=>`All values in axis param must be in range [-${n}, ${n}) but got axis ${e}`)),h(e.every((e=>b(e))),(()=>`All values in axis param must be integers but got axis ${e}`)),e.map((e=>e<0?n+e:e))}function T(e,t){const n=[],s=[],a=null!=t&&Array.isArray(t)&&0===t.length,r=null==t||a?null:N(t,e).sort();let i=0;for(let t=0;t<e.length;++t){if(null!=r){if(r[i]===t&&1!==e[t])throw new Error(`Can't squeeze axis ${t} since its dim '${e[t]}' is not 1`);(null==r[i]||r[i]>t)&&1===e[t]&&(n.push(e[t]),s.push(t)),r[i]<=t&&i++}1!==e[t]&&(n.push(e[t]),s.push(t))}return{newShape:n,keptDims:s}}function C(e,t){let n=null;if(null==e||"float32"===e)n=new Float32Array(t);else if("int32"===e)n=new Int32Array(t);else{if("bool"!==e)throw new Error(`Unknown data type ${e}`);n=new Uint8Array(t)}return n}function $(e,t){let n=null;if(null==e||"float32"===e)n=new Float32Array(t);else if("int32"===e)n=new Int32Array(t);else if("bool"===e)n=new Uint8Array(t);else{if("string"!==e)throw new Error(`Unknown data type ${e}`);n=new Array(t)}return n}function E(e,t){for(let n=0;n<e.length;n++){const s=e[n];if(isNaN(s)||!isFinite(s))throw Error(`A tensor of type ${t} being uploaded contains ${s}.`)}}function _(e){return"bool"===e||"complex64"===e||"float32"===e||"int32"===e||"string"===e}function A(e,t){return!("complex64"===t||"float32"===t&&"complex64"!==e||"int32"===t&&"float32"!==e&&"complex64"!==e||"bool"===t&&"bool"===e)}function R(e){return e instanceof Float32Array||e instanceof Int32Array||e instanceof Uint8Array||e instanceof Uint8ClampedArray}function F(e){if("float32"===e||"int32"===e)return 4;if("complex64"===e)return 8;if("bool"===e)return 1;throw new Error(`Unknown dtype ${e}`)}function D(e){if(null==e)return 0;let t=0;return e.forEach((e=>t+=e.length)),t}function O(e){return"string"==typeof e||e instanceof String}function M(e){return"boolean"==typeof e}function z(e){return"number"==typeof e}function L(e){return Array.isArray(e)?L(e[0]):e instanceof Float32Array?"float32":e instanceof Int32Array||e instanceof Uint8Array||e instanceof Uint8ClampedArray?"int32":z(e)?"float32":O(e)?"string":M(e)?"bool":"float32"}function B(e){return!!(e&&e.constructor&&e.call&&e.apply)}function P(e,t){for(let n=t;n<e;++n)if(e%n==0)return n;return e}function V(e){const t=e.length;if(t<2)return[];const n=new Array(t-1);n[t-2]=e[t-1];for(let s=t-3;s>=0;--s)n[s]=n[s+1]*e[s+1];return n}function W(e,t,n,s=!1){const a=new Array;if(1===t.length){const r=t[0]*(s?2:1);for(let t=0;t<r;t++)a[t]=n[e+t]}else{const r=t[0],i=t.slice(1),o=i.reduce(((e,t)=>e*t))*(s?2:1);for(let t=0;t<r;t++)a[t]=W(e+t*o,i,n,s)}return a}function U(e,t,n=!1){if(0===e.length)return t[0];const s=e.reduce(((e,t)=>e*t))*(n?2:1);if(0===s)return[];if(s!==t.length)throw new Error(`[${e}] does not match the input size ${t.length}${n?" for a complex tensor":""}.`);return W(0,e,t,n)}function G(e,t){const n=H(e,t);for(let e=0;e<n.length;e++)n[e]=1;return n}function H(e,t){if(null==t||"float32"===t||"complex64"===t)return new Float32Array(e);if("int32"===t)return new Int32Array(e);if("bool"===t)return new Uint8Array(e);throw new Error(`Unknown data type ${t}`)}function q(e,t){const n=e.reduce(((e,t)=>e*t),1);if(null==t||"float32"===t)return U(e,new Float32Array(n));if("int32"===t)return U(e,new Int32Array(n));if("bool"===t)return U(e,new Uint8Array(n));throw new Error(`Unknown data type ${t}`)}function X(e){e.forEach((t=>{h(Number.isInteger(t)&&t>=0,(()=>`Tensor must have a shape comprised of positive integers but got shape [${e}].`))}))}function j(e,t,n){if(0===t)return 0;if(1===t)return e[0];let s=e[e.length-1];for(let t=0;t<e.length-1;++t)s+=n[t]*e[t];return s}function K(e,t,n){if(0===t)return[];if(1===t)return[e];const s=new Array(t);for(let t=0;t<s.length-1;++t)s[t]=Math.floor(e/n[t]),e-=s[t]*n[t];return s[s.length-1]=e,s}function Y(e){return e&&e.then&&"function"==typeof e.then}n.d(t,{AE:()=>x,Cq:()=>d,D2:()=>L,D5:()=>E,E7:()=>c,EC:()=>N,GN:()=>b,GX:()=>U,HD:()=>O,JZ:()=>S,LF:()=>o,LP:()=>_,Mu:()=>X,N9:()=>g,NA:()=>m,NE:()=>K,QB:()=>A,Sm:()=>l,TV:()=>s,U$:()=>w,Ub:()=>D,WD:()=>I,WP:()=>C,YP:()=>v,bT:()=>F,bj:()=>u,bp:()=>T,cO:()=>y,d7:()=>a,e3:()=>V,fU:()=>R,hj:()=>z,hu:()=>h,jP:()=>P,jn:()=>M,k5:()=>p,l6:()=>q,mf:()=>B,nY:()=>i,oj:()=>k,p8:()=>G,qy:()=>j,rQ:()=>$,tI:()=>Y,uZ:()=>r,wT:()=>H,xH:()=>f})},3290:(e,t,n)=>{"use strict";n.d(t,{Xhn:()=>r.browser,nTT:()=>r.depthToSpace,io:()=>r.io,ugM:()=>s,SX3:()=>r.linspace,FBF:()=>qr,MB5:()=>r.losses,Fp7:()=>r.max,sq6:()=>r.memory,o4J:()=>Gr,dC7:()=>r.mul,glt:()=>r.nextFrame,lfX:()=>r.oneHot,nGf:()=>r.randomNormal,LGj:()=>r.randomUniform,iD$:()=>r.scalar,Pel:()=>Hr,m7h:()=>r.serialization,CQI:()=>r.setBackend,XeE:()=>r.tensor,RRF:()=>r.tensor1d,odF:()=>r.tensor2d,wOQ:()=>r.tensor3d,yXz:()=>r.tensor4d,lub:()=>r.tidy,p_j:()=>r.train,D5U:()=>r.util,VD$:()=>r.variable,i83:()=>xN,lls:()=>r.zeros});var s={};n.r(s),n.d(s,{Layer:()=>ba,RNN:()=>Gi,RNNCell:()=>Hi,activation:()=>dl,add:()=>kl,alphaDropout:()=>pu,average:()=>Il,averagePooling1d:()=>Rl,averagePooling2d:()=>Ol,averagePooling3d:()=>Ll,avgPool1d:()=>Fl,avgPool2d:()=>Ml,avgPool3d:()=>Bl,avgPooling1d:()=>Dl,avgPooling2d:()=>zl,avgPooling3d:()=>Pl,batchNormalization:()=>El,bidirectional:()=>au,concatenate:()=>Sl,conv1d:()=>al,conv2d:()=>rl,conv2dTranspose:()=>il,conv3d:()=>ol,conv3dTranspose:()=>ll,convLstm2d:()=>eu,convLstm2dCell:()=>tu,cropping2D:()=>cl,dense:()=>fl,depthwiseConv2d:()=>pl,dot:()=>$l,dropout:()=>ml,elu:()=>Qo,embedding:()=>wl,flatten:()=>yl,gaussianDropout:()=>hu,gaussianNoise:()=>cu,globalAveragePooling1d:()=>Vl,globalAveragePooling2d:()=>Wl,globalMaxPool1d:()=>iu,globalMaxPool2d:()=>ou,globalMaxPooling1d:()=>Ul,globalMaxPooling2d:()=>Gl,gru:()=>jl,gruCell:()=>Kl,input:()=>Xr,inputLayer:()=>Zo,layerNormalization:()=>_l,leakyReLU:()=>el,lstm:()=>Yl,lstmCell:()=>Zl,masking:()=>du,maxPool1d:()=>lu,maxPool2d:()=>uu,maxPooling1d:()=>Hl,maxPooling2d:()=>ql,maxPooling3d:()=>Xl,maximum:()=>Nl,minimum:()=>Tl,multiply:()=>Cl,permute:()=>vl,prelu:()=>tl,reLU:()=>Jo,repeatVector:()=>bl,rescaling:()=>fu,reshape:()=>xl,rnn:()=>nu,separableConv2d:()=>ul,simpleRNN:()=>Ql,simpleRNNCell:()=>Jl,softmax:()=>nl,spatialDropout1d:()=>gl,stackedRNNCells:()=>su,thresholdedReLU:()=>sl,timeDistributed:()=>ru,upSampling2d:()=>hl,zeroPadding2d:()=>Al});var a={};n.r(a),n.d(a,{addImpl:()=>Cc,bincountImpl:()=>xh,bincountReduceImpl:()=>vh,castImpl:()=>kc,ceilImpl:()=>Ih,concatImpl:()=>Eh,equalImpl:()=>pp,expImpl:()=>Ip,expm1Impl:()=>$p,floorImpl:()=>Hp,gatherNdImpl:()=>Jp,gatherV2Impl:()=>td,greaterEqualImpl:()=>id,greaterImpl:()=>sd,lessEqualImpl:()=>xd,lessImpl:()=>gd,linSpaceImpl:()=>kd,logImpl:()=>Sd,maxImpl:()=>Bd,maximumImpl:()=>Wd,minimumImpl:()=>Qd,multiplyImpl:()=>ap,negImpl:()=>uf,notEqualImpl:()=>yf,prodImpl:()=>_f,raggedGatherImpl:()=>Ff,raggedTensorToTensorImpl:()=>Bf,rangeImpl:()=>Vf,rsqrtImpl:()=>Jf,scatterImpl:()=>nm,sigmoidImpl:()=>dc,simpleAbsImpl:()=>Mc,sliceImpl:()=>mh,sparseFillEmptyRowsImpl:()=>km,sparseReshapeImpl:()=>Sm,sparseSegmentReductionImpl:()=>Tm,sqrtImpl:()=>Am,squaredDifferenceImpl:()=>Om,stridedSliceImpl:()=>Pm,stringNGramsImpl:()=>Um,stringSplitImpl:()=>qm,stringToHashBucketFastImpl:()=>jm,subImpl:()=>Dp,tileImpl:()=>eg,topKImpl:()=>ag,transposeImpl:()=>Uc,uniqueImpl:()=>hg});var r=n(743),i=n(574),o=n(9028),l=n(5183),u=n(8329);const c={kernelName:i.SYM,inputsToSave:["x"],gradFunc:(e,t)=>{const[n]=t;return{x:()=>(0,l.d)(e,(0,u.N)((0,o.p)(n,"float32"),-1))}}};var h=n(7232),p=n(5699),d=n(503),f=n(2402),m=n(3061),g=n(3189);const y={kernelName:i.VGw,inputsToSave:["x"],gradFunc:(e,t)=>{const[n]=t;return{x:()=>{const t=(0,m.h)((0,o.p)(n,"float32")),s=(0,f._)((0,g.l)((0,d.i)(1),t));return(0,p.W)((0,h.h)(e,s))}}}},b={kernelName:i.SpW,inputsToSave:["x"],gradFunc:(e,t)=>{const[n]=t;return{x:()=>{const t=(0,f._)((0,g.l)((0,m.h)((0,o.p)(n,"float32")),1));return(0,h.h)(e,t)}}}};var x=n(6501),v=n(7325),w=n(5619);const k={kernelName:i.mm_,inputsToSave:["a","b"],gradFunc:(e,t)=>{const[n,s]=t,a=x.assertAndGetBroadcastShape(n.shape,s.shape);return{a:()=>{let t=e;const s=x.getReductionAxes(n.shape,a);return s.length>0&&(t=(0,w.S)(t,s)),(0,v.X)(t,n.shape)},b:()=>{let t=e;const n=x.getReductionAxes(s.shape,a);return n.length>0&&(t=(0,w.S)(t,n)),(0,v.X)(t,s.shape)}}}},I={kernelName:i.Xze,saveAllInputs:!0,gradFunc:(e,t)=>{const n={};return t.forEach(((t,s)=>{n[s]=()=>e.clone()})),n}};var S=n(1181);const N={kernelName:i.sJF,inputsToSave:["x"],gradFunc:(e,t)=>{const[n]=t;return{x:()=>(0,S.P)(n)}}},T={kernelName:i.aJk,inputsToSave:["x"],gradFunc:(e,t)=>{const[n]=t;return{x:()=>(0,S.P)(n)}}},C={kernelName:i.M2y,inputsToSave:["x"],gradFunc:(e,t)=>{const[n]=t;return{x:()=>(0,h.h)(e,(0,f._)((0,g.l)((0,d.i)(1),(0,m.h)((0,o.p)(n,"float32")))))}}};var $=n(7862);const E={kernelName:i.qw7,inputsToSave:["x"],gradFunc:(e,t)=>{const[n]=t;return{x:()=>{const t=(0,f._)((0,$.I)((0,d.i)(1),(0,m.h)((0,o.p)(n,"float32"))));return(0,h.h)(e,t)}}}},_={kernelName:i.QCc,inputsToSave:["a","b"],gradFunc:(e,t)=>{const[n,s]=t,a=(0,x.assertAndGetBroadcastShape)(n.shape,s.shape);return{a:()=>{const t=(0,$.I)((0,m.h)(n),(0,m.h)(s));let r=(0,l.d)(e,(0,h.h)(s,t));const i=(0,x.getReductionAxes)(n.shape,a);return i.length>0&&(r=(0,w.S)(r,i)),(0,v.X)(r,n.shape)},b:()=>{const t=(0,$.I)((0,m.h)(n),(0,m.h)(s));let r=(0,p.W)((0,l.d)(e,(0,h.h)(n,t)));const i=(0,x.getReductionAxes)(s.shape,a);return i.length>0&&(r=(0,w.S)(r,i)),(0,v.X)(r,s.shape)}}}},A={kernelName:i.jMg,inputsToSave:["x"],gradFunc:(e,t)=>{const[n]=t;return{x:()=>(0,h.h)(e,(0,$.I)((0,m.h)((0,o.p)(n,"float32")),1))}}},R={kernelName:i.Oyi,inputsToSave:["x"],gradFunc:(e,t)=>{const[n]=t;return{x:()=>(0,h.h)(e,(0,g.l)((0,d.i)(1),(0,m.h)((0,o.p)(n,"float32"))))}}};var F=n(1297),D=n(7641),O=n(7636),M=n(4397),z=n(6519);const L=(0,z.op)({avgPool3dGrad_:function(e,t,n,s,a,r){const o=(0,D._1)(e,"dy","avgPool3dGrad"),l=(0,D._1)(t,"input","avgPool3dGrad");let u=o,c=l,h=!1;4===l.rank&&(h=!0,u=(0,v.X)(o,[1,o.shape[0],o.shape[1],o.shape[2],o.shape[3]]),c=(0,v.X)(l,[1,l.shape[0],l.shape[1],l.shape[2],l.shape[3]])),O.hu(5===u.rank,(()=>`Error in avgPool3dGrad: dy must be rank 5 but got rank ${u.rank}.`)),O.hu(5===c.rank,(()=>`Error in avgPool3dGrad: input must be rank 5 but got rank ${c.rank}.`)),(0,M.m)("avgPool3dGrad",a,r);const p={dy:u,input:c},d={filterSize:n,strides:s,pad:a,dimRoundingMode:r},f=F.BV.runKernel(i.IMb,p,d);return h?(0,v.X)(f,[f.shape[1],f.shape[2],f.shape[3],f.shape[4]]):f}}),B={kernelName:i._k9,inputsToSave:["x"],gradFunc:(e,t,n)=>{const[s]=t,{filterSize:a,strides:r,pad:i,dimRoundingMode:o}=n;return{x:()=>L(e,s,a,r,i,o)}}},P=(0,z.op)({avgPoolGrad_:function(e,t,n,s,a){const r=(0,D._1)(e,"dy","avgPoolGrad"),o=(0,D._1)(t,"input","avgPoolGrad");O.hu(o.rank===r.rank,(()=>`Rank of input (${o.rank}) does not match rank of dy (${r.rank})`));let l=o,u=r,c=!1;3===o.rank&&(c=!0,l=(0,v.X)(o,[1,o.shape[0],o.shape[1],o.shape[2]]),u=(0,v.X)(r,[1,r.shape[0],r.shape[1],r.shape[2]])),O.hu(4===u.rank,(()=>`Error in avgPoolGrad: dy must be rank 4 but got rank ${u.rank}.`)),O.hu(4===l.rank,(()=>`Error in avgPoolGrad: input must be rank 4 but got rank ${l.rank}.`));const h={dy:u,input:l},p={filterSize:n,strides:s,pad:a},d=F.BV.runKernel(i.ROF,h,p);return c?(0,v.X)(d,[d.shape[1],d.shape[2],d.shape[3]]):d}}),V={kernelName:i.JhU,inputsToSave:["x"],gradFunc:(e,t,n)=>{const[s]=t,{filterSize:a,strides:r,pad:i}=n;return{x:()=>P(e,s,a,r,i)}}};var W=n(7962);const U={kernelName:i.XLW,inputsToSave:["a","b"],gradFunc:(e,t,n)=>{const[s,a]=t,{transposeA:r,transposeB:i}=n;return r||i?!r&&i?{a:()=>(0,W.O)(e,a,!1,!1),b:()=>(0,W.O)(e,s,!0,!1)}:r&&!i?{a:()=>(0,W.O)(a,e,!1,!0),b:()=>(0,W.O)(s,e,!1,!1)}:{a:()=>(0,W.O)(a,e,!0,!0),b:()=>(0,W.O)(e,s,!0,!0)}:{a:()=>(0,W.O)(e,a,!1,!0),b:()=>(0,W.O)(s,e,!0,!1)}}};var G=n(6550);const H={kernelName:i.zws,gradFunc:(e,t,n)=>{const{blockShape:s,crops:a}=n;return{x:()=>(0,G.f)(e,s,a)}}},q={kernelName:i.Ly9,gradFunc:(e,t,n)=>{const s=n,a=s.inputShape,r=s.shape,i=Array.from(r);for(let e=a.length-1;e>=0;e--)if(a[e]===r[e])i[e]=1;else if(1!==a[e])throw new Error(`broadcastTo(): [${a}] cannot be broadcast to [${r}].`);const o=[];for(let e=0;e<i.length;e++)i[e]>1&&o.push(e);return{x:()=>(0,w.S)(e,o,!0)}}},X={kernelName:i.RFZ,gradFunc:e=>({x:()=>e.clone()})},j={kernelName:i.gJX,gradFunc:e=>({x:()=>(0,S.P)(e)})};var K=n(97),Y=n(858),Z=n(1704),Q=n(5788);const J={kernelName:i.xnO,inputsToSave:["x"],gradFunc:(e,t,n)=>{const[s]=t,{clipValueMin:a,clipValueMax:r}=n;return{x:()=>(0,Q.a)((0,Z.H)((0,K.b)(s,a),(0,Y.z)(s,r)),e,(0,S.P)(e))}}},ee={kernelName:i.yj2,inputsToSave:["x"],gradFunc:c.gradFunc};var te=n(843);const ne={kernelName:i.Eh3,saveAllInputs:!0,gradFunc:(e,t,n)=>{const s=t.map((e=>e.shape)),{axis:a}=n,r=(0,O.EC)(a,t[0].shape)[0],i=s.map((e=>e[r]));return(0,te.V)(e,i,r).map((e=>()=>e))}};var se=n(3791),ae=n(7500);const re={kernelName:i.mhS,inputsToSave:["x","filter"],gradFunc:(e,t,n)=>{const[s,a]=t,{dilations:r,strides:i,pad:o,dataFormat:l}=n;return O.hu(M.I0(r),(()=>`Error in gradient of conv2D: dilation rates greater than 1 are not yet supported in gradients. Got dilations '${r}'`)),{x:()=>(0,ae._)(s.shape,e,a,i,o,l),filter:()=>(0,se.p)(s,e,a.shape,i,o,l)}}};var ie=n(5294);const oe={kernelName:i.wm,inputsToSave:["dy","filter"],gradFunc:(e,t,n)=>{const[s,a]=t,{strides:r,pad:i,dataFormat:o,dimRoundingMode:l}=n;return{dy:()=>(0,ie.T)(e,a,r,i,o,1,l),filter:()=>(0,se.p)(e,s,a.shape,r,i,o,l)}}},le=(0,z.op)({conv3DBackpropFilter_:function(e,t,n,s,a){let r=e;4===e.rank&&(r=(0,v.X)(e,[1,e.shape[0],e.shape[1],e.shape[2],e.shape[3]]));let o=t;4===o.rank&&(o=(0,v.X)(t,[1,t.shape[0],t.shape[1],t.shape[2],t.shape[3]])),O.hu(5===r.rank,(()=>`Error in conv3dDerFilter: input must be rank 5, but got shape ${r.shape}.`)),O.hu(5===o.rank,(()=>`Error in conv3dDerFilter: dy must be rank 5, but got shape ${o.shape}.`)),O.hu(5===n.length,(()=>`Error in conv3dDerFilter: filterShape must be length 5, but got ${n}.`)),O.hu(r.shape[4]===n[3],(()=>`Error in conv3dDerFilter: depth of input ${r.shape[4]}) must match input depth in filter (${n[3]}.`)),O.hu(o.shape[4]===n[4],(()=>`Error in conv3dDerFilter: depth of dy (${o.shape[4]}) must match output depth for filter (${n[4]}).`));const l={x:r,dy:o},u={strides:s,pad:a,filterShape:n};return F.BV.runKernel(i.o2y,l,u)}});var ue=n(7455);const ce={kernelName:i.x12,inputsToSave:["x","filter"],gradFunc:(e,t,n)=>{const{dilations:s,strides:a,pad:r}=n;O.hu((0,M.I0)(s),(()=>`Error in gradient of conv3D: dilation rates greater than 1 are not yet supported in gradients. Got dilations '${s}'`));const[i,o]=t;return{x:()=>(0,ue._)(i.shape,e,o,a,r),filter:()=>le(i,e,o.shape,a,r)}}};var he=n(9358);const pe={kernelName:i.mc4,inputsToSave:["x"],gradFunc:(e,t)=>{const[n]=t;return{x:()=>(0,l.d)((0,p.W)((0,he.O)((0,o.p)(n,"float32"))),e)}}};var de=n(7632);const fe={kernelName:i.TR1,inputsToSave:["x"],gradFunc:(e,t)=>{const[n]=t;return{x:()=>(0,l.d)((0,de.R)((0,o.p)(n,"float32")),e)}}};var me=n(1878),ge=n(4663),ye=n(6506);const be={kernelName:i.iHb,inputsToSave:["x"],gradFunc:(e,t,n)=>{const[s]=t,{axis:a,exclusive:r,reverse:i}=n;return{x:()=>{const t=(0,me.Q3)([a],s.rank);let n=(0,ge.z)(e,a,r,!i);return null!=t&&(n=(0,ye.p)(n,t)),n}}}};var xe=n(9653),ve=n(2203);const we={kernelName:i.cie,inputsToSave:["x","filter"],gradFunc:(e,t,n)=>{const{dilations:s,strides:a,pad:r,dimRoundingMode:i}=n,o=null==s?[1,1]:s;O.hu(M.I0(o),(()=>`Error in gradient of depthwiseConv2dNative: dilation rates greater than 1 are not yet supported. Got dilations '${o}'`));const[l,u]=t;return O.hu(4===l.rank,(()=>`Error in gradient of depthwiseConv2dNative: input must be rank 4, but got rank ${l.rank}.`)),O.hu(4===u.rank,(()=>`Error in gradient of depthwiseConv2dNative: filter must be rank 4, but got rank ${u.rank}.`)),O.hu(l.shape[3]===u.shape[2],(()=>`Error in gradient of depthwiseConv2d: number of input channels (${l.shape[3]}) must match the inChannels dimension in filter ${u.shape[2]}.`)),O.hu(M.jT(a,o),(()=>`Error in gradient of depthwiseConv2d: Either strides or dilations must be  1. Got strides ${a} and dilations '${o}'.`)),M.m("depthwiseConv2d",r,i),{x:()=>(0,ve.v)(l.shape,e,u,a,r,o,i),filter:()=>(0,xe.z)(l,e,u.shape,a,r,o,i)}}},ke={kernelName:i.p4S,inputsToSave:["x","filter"],gradFunc:(e,t,n)=>{const[s,a]=t,r={x:s,filter:a,dy:e},o={x:s,filter:a,dy:e};return{x:()=>F.BV.runKernel(i.ekb,r,n),filter:()=>F.BV.runKernel(i.Vn9,o,n)}}},Ie={kernelName:i.SX0,outputsToSave:[!0],gradFunc:(e,t)=>{const[n]=t,s={dy:e,y:n};return{x:()=>F.BV.runKernel(i.HEU,s)}}};var Se=n(5295);const Ne={kernelName:i.Omj,inputsToSave:["x"],gradFunc:(e,t)=>{const[n]=t,s=(0,l.d)((0,Se.Q)((0,p.W)((0,m.h)(n))),2/Math.sqrt(Math.PI));return{x:()=>(0,l.d)(e,s)}}},Te={kernelName:i.NEP,outputsToSave:[!0],gradFunc:(e,t)=>{const[n]=t;return{x:()=>(0,l.d)(e,n)}}},Ce={kernelName:i.YFo,inputsToSave:["input"],gradFunc:(e,t)=>{const[n]=t;return{input:()=>(0,v.X)(e,n.shape)}}},$e={kernelName:i.Y0y,inputsToSave:["x"],gradFunc:(e,t)=>{const[n]=t;return{x:()=>(0,l.d)(e,(0,Se.Q)(n))}}},Ee={kernelName:i.OR,gradFunc:e=>({x:()=>(0,S.P)(e)})},_e={kernelName:i.jeX,inputsToSave:["a","b"],gradFunc:(e,t)=>{const[n,s]=t,a=(0,x.assertAndGetBroadcastShape)(n.shape,s.shape);return{a:()=>{const t=(0,h.h)(e,(0,o.p)(s,"float32")),r=(0,x.getReductionAxes)(n.shape,a);return r.length>0?(0,v.X)((0,w.S)(t,r),n.shape):t},b:()=>{let t=(0,l.d)(e,(0,o.p)(n,"float32"));const r=(0,x.getReductionAxes)(s.shape,a);r.length>0&&(t=(0,v.X)((0,w.S)(t,r),s.shape));const i=(0,m.h)(s);return(0,p.W)((0,h.h)(t,(0,o.p)(i,"float32")))}}}};var Ae=n(1638),Re=n(9650);const Fe={kernelName:i.sHE,inputsToSave:["x","mean","variance","scale"],gradFunc:(e,t,n)=>{const{varianceEpsilon:s}=n,[a,r,i,o]=t,u=null==o?(0,d.i)(1):o,c=(0,x.getReductionAxes)(r.shape,a.shape),h=[];if(1===r.rank){for(let e=0;e<a.shape.length-1;++e)h.push(a.shape[e]);h.push(1)}const p=(0,g.l)(a,r),f=(0,l.d)(e,u),m=(0,Ae.b)((0,$.I)(i,(0,d.i)(s))),y=(0,l.d)((0,l.d)((0,l.d)(m,m),m),(0,d.i)(-.5));return{x:()=>1===r.rank?(0,v.X)((0,l.d)((0,l.d)(e,(0,Re.G)((0,v.X)(m,[1,1,1,r.shape[0]]),h)),u),a.shape):(0,v.X)((0,l.d)((0,l.d)(e,m),u),a.shape),mean:()=>{let e=(0,l.d)((0,l.d)(m,(0,d.i)(-1)),f);return 1===r.rank&&(e=(0,w.S)(e,c)),(0,v.X)(e,r.shape)},variance:()=>{let e=(0,l.d)((0,l.d)(y,p),f);return 1===r.rank&&(e=(0,w.S)(e,c)),(0,v.X)(e,r.shape)},scale:()=>{const t=(0,l.d)(p,m);let n=(0,l.d)(e,t);return 1===r.rank&&(n=(0,w.S)(n,c)),(0,v.X)(n,r.shape)},offset:()=>{let t=e;return 1===r.rank&&(t=(0,w.S)(t,c)),(0,v.X)(t,r.shape)}}}};var De=n(2882);const Oe={kernelName:i.qi_,inputsToSave:["x","indices"],gradFunc:(e,t,n)=>{const[s,a]=t,{axis:r}=n,i=(0,O.EC)(r,s.shape)[0];return{x:()=>{const t=s.shape,n=a.size,o=t.slice(0,i),l=o.length,u=t.slice(r,t.length).slice(1),c=u.length,h=Me(0,l),p=Me(l+1,l+1+c),d=ze([o,[n],u]),f=(0,v.X)(e,d),m=(0,v.X)(a,[n]),g=ze([[l],h,p]),y=(0,ye.p)(f,g);let b=(0,De.p)(y,m,s.shape[i]);const x=(0,me.LJ)(g);return b=(0,ye.p)(b,x),b},indices:()=>a}}};function Me(e,t){const n=[];for(let s=e;s<t;++s)n.push(s);return n}function ze(e){const t=[];for(let n=0;n<e.length;++n)for(let s=0;s<e[n].length;++s)t.push(e[n][s]);return t}const Le={kernelName:i.Acj,inputsToSave:["a","b"],gradFunc:(e,t)=>{const[n,s]=t;return{a:()=>(0,S.P)(n),b:()=>(0,S.P)(s)}}},Be={kernelName:i.iJz,gradFunc:e=>({x:()=>(0,o.p)(e,"float32")})},Pe={kernelName:i.avt,gradFunc:e=>({x:()=>(0,S.P)(e)})},Ve={kernelName:i.iWB,gradFunc:e=>({x:()=>(0,S.P)(e)})},We={kernelName:i.r7n,gradFunc:e=>({x:()=>(0,S.P)(e)})};var Ue=n(7437);const Ge={kernelName:i.J$2,inputsToSave:["x"],gradFunc:(e,t,n)=>{const[s]=t,{alpha:a}=n,r=(0,Ue.p)(s,0);return{x:()=>(0,Q.a)(r,e,(0,l.d)(e,a))}}},He={kernelName:i.kU,inputsToSave:["x"],gradFunc:(e,t)=>{const[n]=t;return{x:()=>(0,h.h)(e,(0,$.I)(n,1))}}},qe={kernelName:i.ZbH,inputsToSave:["x"],gradFunc:(e,t)=>{const[n]=t;return{x:()=>(0,h.h)(e,(0,o.p)(n,"float32"))}}},Xe={kernelName:i.qCd,inputsToSave:[],outputsToSave:[!0],gradFunc:(e,t,n)=>{const[s]=t,{axis:a}=n;return{logits:()=>{const t=(0,Se.Q)(s);return(0,g.l)(e,(0,l.d)((0,w.S)(e,a,!0),t))}}}},je=(0,z.op)({localResponseNormalizationBackprop_:function(e,t,n,s=5,a=1,r=1,o=.5){const l={x:e,y:t,dy:n},u={depthRadius:s,bias:a,alpha:r,beta:o};return F.BV.runKernel(i.Hhh,l,u)}}),Ke={kernelName:i.eZ0,inputsToSave:["x"],outputsToSave:[!0],gradFunc:(e,t,n)=>{const[s,a]=t,{depthRadius:r,bias:i,alpha:o,beta:l}=n;return{x:()=>je(s,a,e,r,i,o,l)}}};var Ye=n(7645);function Ze(e,t,n,s){return t.rank<n.rank&&(t=(0,v.X)(t,me.rv(t.shape,s))),e.rank<n.rank&&(e=(0,v.X)(e,me.rv(e.shape,s))),{x:()=>(0,l.d)(e,(0,o.p)((0,Ye.D)(n,t),e.dtype))}}const Qe={kernelName:i.YoZ,inputsToSave:["x"],outputsToSave:[!0],gradFunc:(e,t,n)=>{const s=n,{reductionIndices:a}=s,r=t[0],i=Ze(e,t[1],r,O.EC(a,r.shape));return{x:()=>i.x()}}};var Je=n(9026);const et={kernelName:i.BMI,inputsToSave:["a","b"],gradFunc:(e,t)=>{const[n,s]=t;return{a:()=>(0,l.d)(e,(0,o.p)((0,K.b)(n,s),"float32")),b:()=>(0,l.d)(e,(0,o.p)((0,Je.d)(n,s),"float32"))}}},tt=(0,z.op)({maxPool3dGrad_:function(e,t,n,s,a,r,o){const l=(0,D._1)(e,"dy","maxPool3dGrad"),u=(0,D._1)(t,"input","maxPool3dGrad"),c=(0,D._1)(n,"output","maxPool3dGrad");let h=l,p=u,d=c,f=!1;4===u.rank&&(f=!0,h=(0,v.X)(l,[1,l.shape[0],l.shape[1],l.shape[2],l.shape[3]]),p=(0,v.X)(u,[1,u.shape[0],u.shape[1],u.shape[2],u.shape[3]]),d=(0,v.X)(c,[1,c.shape[0],c.shape[1],c.shape[2],c.shape[3]])),O.hu(5===h.rank,(()=>`Error in maxPool3dGrad: dy must be rank 5 but got rank ${h.rank}.`)),O.hu(5===p.rank,(()=>`Error in maxPool3dGrad: input must be rank 5 but got rank ${p.rank}.`)),O.hu(5===d.rank,(()=>`Error in maxPool3dGrad: output must be rank 5 but got rank ${d.rank}.`)),(0,M.m)("maxPool3dGrad",r,o);const m={dy:h,input:p,output:d},g={filterSize:s,strides:a,pad:r,dimRoundingMode:o},y=F.BV.runKernel(i.OU7,m,g);return f?(0,v.X)(y,[y.shape[1],y.shape[2],y.shape[3],y.shape[4]]):y}}),nt={kernelName:i.OAf,inputsToSave:["x"],outputsToSave:[!0],gradFunc:(e,t,n)=>{const[s,a]=t,{filterSize:r,strides:i,pad:o,dimRoundingMode:l}=n;return{x:()=>tt(e,s,a,r,i,o,l)}}},st=(0,z.op)({maxPoolGrad_:function(e,t,n,s,a,r,o){const l=(0,D._1)(e,"dy","maxPoolGrad"),u=(0,D._1)(t,"input","maxPoolGrad"),c=(0,D._1)(n,"output","maxPoolGrad");O.hu(u.rank===l.rank,(()=>`Rank of input (${u.rank}) does not match rank of dy (${l.rank})`)),O.hu(4===l.rank,(()=>`Error in maxPoolGrad: dy must be rank 4 but got rank ${l.rank}.`)),O.hu(4===u.rank,(()=>`Error in maxPoolGrad: input must be rank 4 but got rank ${u.rank}.`)),M.m("maxPoolGrad",r,o);const h={dy:l,input:u,output:c},p={filterSize:s,strides:a,pad:r,dimRoundingMode:o};return F.BV.runKernel(i.OV7,h,p)}}),at={kernelName:i.mTV,inputsToSave:["x"],outputsToSave:[!0],gradFunc:(e,t,n)=>{const[s,a]=t,{filterSize:r,strides:i,pad:o}=n;return{x:()=>st(e,s,a,r,i,o)}}};var rt=n(190);const it={kernelName:i.q2K,inputsToSave:["x"],gradFunc:(e,t,n)=>{const[s]=t,{axis:a}=n,r=O.EC(a,s.shape),i=(0,me.kz)(s.shape,r)[1],o=O.NA(i);return{x:()=>{const t=s.shape.slice();r.forEach((e=>{t[e]=1}));const n=(0,v.X)(e,t);return(0,h.h)((0,l.d)(n,(0,rt.i)(s.shape,"float32")),o)}}}},ot={kernelName:i.c17,inputsToSave:["x"],outputsToSave:[!0],gradFunc:(e,t,n)=>{const s=n,{axis:a}=s,[r,i]=t,o=Ze(e,i,r,O.EC(a,r.shape));return{x:()=>o.x()}}},lt={kernelName:i.q8u,inputsToSave:["a","b"],gradFunc:(e,t)=>{const[n,s]=t;return{a:()=>(0,l.d)(e,(0,o.p)((0,Y.z)(n,s),"float32")),b:()=>(0,l.d)(e,(0,o.p)((0,Ue.p)(n,s),"float32"))}}};var ut=n(6616);const ct={kernelName:i.jQs,inputsToSave:["x"],gradFunc:(e,t,n)=>{const s=t[0],{paddings:a}=n,r=a.map((e=>e[0]));return{x:()=>(0,ut.t)(e,r,s.shape)}}};var ht=n(154);const pt={kernelName:i.Vbg,inputsToSave:["a","b"],gradFunc:(e,t)=>{const[n,s]=t,a=(0,x.assertAndGetBroadcastShape)(n.shape,s.shape);return{a:()=>{const t=(0,x.getReductionAxes)(n.shape,a);return t.length>0?(0,v.X)((0,w.S)(e,t),n.shape):e},b:()=>{const t=(0,l.d)(e,(0,p.W)((0,ht.G)((0,h.h)(n,s)))),r=(0,x.getReductionAxes)(s.shape,a);return r.length>0?(0,v.X)((0,w.S)(t,r),s.shape):t}}}},dt={kernelName:i.wYn,inputsToSave:["a","b"],gradFunc:(e,t)=>{const[n,s]=t,a=(0,x.assertAndGetBroadcastShape)(n.shape,s.shape);return{a:()=>{const t=(0,l.d)(e,(0,o.p)(s,"float32")),r=(0,x.getReductionAxes)(n.shape,a);return r.length>0?(0,v.X)((0,w.S)(t,r),n.shape):t},b:()=>{const t=(0,l.d)(e,(0,o.p)(n,"float32")),r=(0,x.getReductionAxes)(s.shape,a);return r.length>0?(0,v.X)((0,w.S)(t,r),s.shape):t}}}},ft={kernelName:i.kuV,gradFunc:e=>({x:()=>(0,p.W)(e)})};var mt=n(6373);const gt={kernelName:i.we_,inputsToSave:["indices"],gradFunc:(e,t)=>{const n=t[0];return{indices:()=>(0,mt.l)(n.shape,"float32")}}},yt={kernelName:i.qWM,gradFunc:e=>({x:()=>(0,S.P)(e)})};var bt=n(9829);const xt={kernelName:i.QiL,saveAllInputs:!0,gradFunc:(e,t,n)=>{const{axis:s}=n;return(0,bt.H)(e,s).map((e=>()=>e))}},vt={kernelName:i.lyA,inputsToSave:["x"],gradFunc:(e,t,n)=>{const s=t[0],{paddings:a}=n,r=a.map((e=>e[0]));return{x:()=>(0,ut.t)(e,r,s.shape)}}};var wt=n(1661),kt=n(1483);const It={kernelName:i.pe_,inputsToSave:["a","b"],outputsToSave:[!0],gradFunc:(e,t)=>{const[n,s,a]=t,r=n,i=s,u=x.assertAndGetBroadcastShape(r.shape,i.shape);return{a:()=>{const t=(0,o.p)(i,"float32");let n=(0,l.d)(e,(0,l.d)(t,(0,kt.s)(r,(0,g.l)(t,(0,d.i)(1)))));const s=x.getReductionAxes(r.shape,u);return s.length>0&&(n=(0,w.S)(n,s)),(0,v.X)(n,r.shape)},b:()=>{const t=(0,Ue.p)(r,0),n=(0,Q.a)(t,(0,wt.c)(r),(0,S.P)(r));let s=(0,l.d)(e,(0,l.d)(a,n));const o=x.getReductionAxes(i.shape,u);return o.length>0&&(s=(0,w.S)(s,o)),(0,v.X)(s,i.shape)}}}},St={kernelName:i.o0g,inputsToSave:["x","alpha"],gradFunc:(e,t)=>{const[n,s]=t,a=(0,Ue.p)(n,0);return{x:()=>(0,Q.a)(a,e,(0,l.d)(e,s)),alpha:()=>{let t=(0,Q.a)(a,(0,S.P)(e),(0,l.d)(e,n));const r=(0,x.getReductionAxes)(s.shape,e.shape);return r.length>0&&(t=(0,w.S)(t,r)),(0,v.X)(t,s.shape)}}}};var Nt=n(9319);const Tt={kernelName:i.DlI,inputsToSave:["x"],gradFunc:(e,t,n)=>{const[s]=t,{axis:a}=n;let r=[];return r=null==a?s.shape.map(((e,t)=>t)):"number"==typeof a?[a]:a,{x:()=>function(e,t,n){const s=e.shape.length,a=s-n.length,r=me.Q3(n,s);let i=e;null!=r&&(i=(0,ye.p)(e,r));const o=i.shape.slice(),u=o.splice(s-n.length,n.length).reduce(((e,t)=>e*t),1);o.push(u);let c=function(e,t,n){const s=e.shape.slice();s[n]=1;const a=(0,v.X)(t,s),r=(0,Nt.$)(e,n,!0,!1),i=(0,Nt.$)(e,n,!0,!0),o=(0,l.d)(r,i);return(0,l.d)(a,o)}(i.reshape(o),t,a);if(c=c.reshape(i.shape),null!=r){const e=me.LJ(r);c=(0,ye.p)(c,e)}return c}(s,e,r)}}},Ct={kernelName:i.oHH,inputsToSave:["a","b"],gradFunc:(e,t)=>{const[n,s]=t,a=x.assertAndGetBroadcastShape(n.shape,s.shape);return{a:()=>{const t=(0,h.h)(e,(0,o.p)(s,"float32")),r=x.getReductionAxes(n.shape,a);return r.length>0?(0,v.X)((0,w.S)(t,r),n.shape):t},b:()=>{let t=(0,l.d)(e,(0,o.p)(n,"float32"));const r=x.getReductionAxes(s.shape,a);r.length>0&&(t=(0,v.X)((0,w.S)(t,r),s.shape));const i=(0,m.h)(s);return(0,p.W)((0,h.h)(t,(0,o.p)(i,"float32")))}}}},$t={kernelName:i.$HU,inputsToSave:["x"],gradFunc:(e,t)=>{const[n]=t;return{x:()=>(0,h.h)(e,(0,p.W)((0,m.h)(n)))}}},Et={kernelName:i.SbG,inputsToSave:["x"],gradFunc:(e,t)=>{const[n]=t,s=(0,l.d)((0,Y.z)(n,6),(0,u.N)(n));return{x:()=>(0,l.d)(e,(0,o.p)(s,"float32"))}}},_t={kernelName:i.qkr,inputsToSave:["x"],gradFunc:(e,t)=>{const[n]=t;return{x:()=>(0,l.d)(e,(0,o.p)((0,u.N)(n),"float32"))}}},At={kernelName:i.HZH,inputsToSave:["x"],gradFunc:(e,t)=>{const[n]=t;return{x:()=>(0,v.X)(e,n.shape)}}},Rt={kernelName:i._Yw,inputsToSave:["images"],gradFunc:(e,t,n)=>{const[s]=t,a={dy:e,images:s};return{images:()=>F.BV.runKernel(i.zbQ,a,n)}}},Ft={kernelName:i.dpD,inputsToSave:["images"],gradFunc:(e,t,n)=>{const[s]=t,a={dy:e,images:s};return{images:()=>F.BV.runKernel(i.Hmb,a,n)}}};var Dt=n(1170);const Ot={kernelName:i.mKl,gradFunc:(e,t,n)=>{const{dims:s}=n,a=(0,O.EC)(s,e.shape);return{x:()=>(0,Dt.G)(e,a)}}},Mt={kernelName:i.e07,gradFunc:e=>({x:()=>(0,S.P)(e)})},zt={kernelName:i.bV0,inputsToSave:["x"],gradFunc:(e,t)=>{const[n]=t;return{x:()=>(0,p.W)((0,h.h)(e,(0,l.d)((0,kt.s)(n,1.5),2)))}}};var Lt=n(9321);const Bt={kernelName:i.PhF,inputsToSave:["condition"],gradFunc:(e,t)=>{const[n]=t;return{condition:()=>(0,o.p)((0,S.P)(n),"float32"),t:()=>(0,l.d)(e,(0,o.p)(n,e.dtype)),e:()=>(0,l.d)(e,(0,o.p)((0,Lt.h)(n),e.dtype))}}};var Pt=n(3952);const Vt={kernelName:i.oFR,inputsToSave:["x"],gradFunc:(e,t)=>{const[n]=t;return{x:()=>{const t=(0,Ue.p)(n,(0,d.i)(0)),s=(0,d.i)(Pt.y),a=(0,d.i)(Pt.$),r=(0,l.d)(e,a),i=(0,l.d)((0,l.d)(e,s),(0,Se.Q)((0,o.p)(n,"float32")));return(0,Q.a)(t,r,i)}}}},Wt={kernelName:i.a5O,outputsToSave:[!0],gradFunc:(e,t)=>{const[n]=t;return{x:()=>(0,l.d)(e,(0,l.d)(n,(0,g.l)((0,d.i)(1),n)))}}},Ut={kernelName:i.i5y,gradFunc:e=>({x:()=>(0,S.P)(e)})};var Gt=n(7832);const Ht={kernelName:i.RQH,inputsToSave:["x"],gradFunc:(e,t)=>{const[n]=t;return{x:()=>(0,l.d)((0,Gt.m)((0,o.p)(n,"float32")),e)}}};var qt=n(8880);const Xt={kernelName:i.wYB,inputsToSave:["x"],gradFunc:(e,t)=>{const[n]=t;return{x:()=>(0,l.d)((0,qt.f)((0,o.p)(n,"float32")),e)}}};var jt=n(9019),Kt=n(4700);const Yt={kernelName:i.p2w,inputsToSave:["x"],gradFunc:(e,t,n)=>{const[s]=t,{begin:a,size:r}=n,i=s.shape,[o,l]=(0,Kt.parseSliceParams)(s,a,r),u=[];for(let t=0;t<e.rank;t++)u.push([o[t],i[t]-o[t]-l[t]]);return{x:()=>(0,jt.v)(e,u)}}},Zt={kernelName:i.Gcp,outputsToSave:[!0],gradFunc:(e,t,n)=>{const[s]=t,{dim:a}=n,r=(0,l.d)(e,s);return{logits:()=>(0,g.l)(r,(0,l.d)((0,w.S)(r,[a],!0),s))}}};var Qt=n(1840);const Jt={kernelName:i.MRv,inputsToSave:["x"],gradFunc:(e,t)=>{const[n]=t;return{x:()=>(0,l.d)(e,(0,Qt.X)(n))}}};var en=n(2854);const tn={kernelName:i.TQc,gradFunc:(e,t,n)=>{const{blockShape:s,paddings:a}=n;return{x:()=>(0,en.E)(e,s,a)}}};var nn=n(5041);const sn={kernelName:i.L8s,gradFunc:(e,t,n)=>{const{axis:s}=n;return{x:()=>(0,nn.z)(e,s)}}},an={kernelName:i.FKq,inputsToSave:["x"],gradFunc:(e,t)=>{const[n]=t;return{x:()=>(0,h.h)(e,(0,l.d)((0,f._)((0,o.p)(n,"float32")),2))}}},rn={kernelName:i.bK0,inputsToSave:["x"],gradFunc:(e,t)=>{const[n]=t;return{x:()=>(0,l.d)(e,(0,l.d)((0,o.p)(n,"float32"),2))}}},on={kernelName:i._tC,inputsToSave:["a","b"],gradFunc:(e,t)=>{const[n,s]=t,a=(0,d.i)(2);return{a:()=>(0,l.d)(e,(0,l.d)(a,(0,g.l)(n,s))),b:()=>(0,l.d)(e,(0,l.d)(a,(0,g.l)(s,n)))}}},ln={kernelName:i.h8e,gradFunc:e=>({x:()=>(0,S.P)(e)})},un={kernelName:i.Tr8,inputsToSave:["a","b"],gradFunc:(e,t)=>{const[n,s]=t,a=x.assertAndGetBroadcastShape(n.shape,s.shape);return{a:()=>{let t=e;const s=x.getReductionAxes(n.shape,a);return s.length>0&&(t=(0,w.S)(t,s)),(0,v.X)(t,n.shape)},b:()=>{let t=e;const n=x.getReductionAxes(s.shape,a);return n.length>0&&(t=(0,w.S)(t,n)),(0,v.X)((0,p.W)(t),s.shape)}}}},cn={kernelName:i.GBy,inputsToSave:["x"],gradFunc:(e,t,n)=>{const[s]=t,a=s.shape.slice(),{axis:r}=n;(0,O.EC)(r,s.shape).forEach((e=>{a[e]=1}));const i=(0,v.X)(e,a),o=(0,l.d)(i,(0,rt.i)(s.shape,"float32"));return{x:()=>o}}},hn={kernelName:i.sEM,inputsToSave:["x"],gradFunc:(e,t)=>{const[n]=t;return{x:()=>(0,h.h)(e,(0,m.h)((0,Gt.m)(n)))}}},pn={kernelName:i.MIZ,outputsToSave:[!0],gradFunc:(e,t)=>{const[n]=t;return{x:()=>(0,l.d)((0,g.l)((0,d.i)(1),(0,m.h)(n)),e)}}},dn={kernelName:i.n9L,inputsToSave:["x"],gradFunc:(e,t,n)=>{const[s]=t,{reps:a}=n;return{x:()=>{let t=(0,S.P)(s);if(1===s.rank)for(let n=0;n<a[0];++n)t=(0,$.I)(t,(0,ut.t)(e,[n*s.shape[0]],[s.shape[0]]));else if(2===s.rank)for(let n=0;n<a[0];++n)for(let r=0;r<a[1];++r)t=(0,$.I)(t,(0,ut.t)(e,[n*s.shape[0],r*s.shape[1]],[s.shape[0],s.shape[1]]));else if(3===s.rank)for(let n=0;n<a[0];++n)for(let r=0;r<a[1];++r)for(let i=0;i<a[2];++i)t=(0,$.I)(t,(0,ut.t)(e,[n*s.shape[0],r*s.shape[1],i*s.shape[2]],[s.shape[0],s.shape[1],s.shape[2]]));else{if(4!==s.rank)throw new Error(`Gradient for tile operation is not implemented for rank-${s.rank} tensors yet.`);for(let n=0;n<a[0];++n)for(let r=0;r<a[1];++r)for(let i=0;i<a[2];++i)for(let o=0;o<a[3];++o)t=(0,$.I)(t,(0,ut.t)(e,[n*s.shape[0],r*s.shape[1],i*s.shape[2],o*s.shape[3]],[s.shape[0],s.shape[1],s.shape[2],s.shape[3]]))}return t}}}},fn={kernelName:i.G3Y,gradFunc:(e,t,n)=>{const s=n,{perm:a}=s,r=me.LJ(a);return{x:()=>(0,ye.p)(e,r)}}};var mn=n(8440);const gn={kernelName:i.ToN,gradFunc:(e,t,n)=>{const s=n,{axis:a}=s;return{value:()=>(0,mn.k)(e,a)}}};var yn=n(8818),bn=n(7260),xn=n(4734);const vn={kernelName:i.Qvg,inputsToSave:["segmentIds"],gradFunc:(e,t)=>{const[n]=t;return{x:()=>function(e,t){const n=(0,xn.g)(t,(0,S.P)(t)),s=(0,bn.I)(e,n);let a=(0,K.b)(t,(0,d.i)(0,"int32"));const r=s.rank-a.rank;for(let e=0;e<r;++e)a=(0,yn.d)(a,e+1);a=(0,Z.H)(a,(0,rt.i)(s.shape,"bool"));const i=(0,S.P)(s);return(0,Q.a)(a,s,i)}(e,n)}}},wn={kernelName:i.RuY,gradFunc:e=>({x:()=>(0,S.P)(e)})};var kn=n(1675);const In=[c,y,b,k,I,N,T,C,E,_,A,R,B,V,U,H,q,X,j,J,ee,ne,oe,re,ce,pe,fe,be,we,ke,Ct,Ie,Ne,Te,Ce,$e,_e,Ee,Fe,Oe,Le,Be,Pe,Ve,We,Ge,He,qe,Xe,Ke,Qe,Qe,et,nt,at,it,ot,lt,ct,pt,dt,ft,gt,yt,xt,vt,vt,It,St,Tt,$t,Et,_t,At,Rt,Ft,Ot,Mt,zt,Bt,Vt,Wt,Ut,Ht,Xt,Yt,Zt,Jt,tn,tn,sn,sn,an,on,rn,ln,un,cn,hn,pn,dn,fn,gn,vn,wn];for(const e of In)(0,kn.Li)(e);n(9379);class Sn extends Error{constructor(e){super(e),Object.setPrototypeOf(this,Sn.prototype)}}class Nn extends Error{constructor(e){super(e),Object.setPrototypeOf(this,Nn.prototype)}}class Tn extends Error{constructor(e){super(e),Object.setPrototypeOf(this,Tn.prototype)}}class Cn extends Error{constructor(e){super(e),Object.setPrototypeOf(this,Cn.prototype)}}class $n extends Error{constructor(e){super(e),Object.setPrototypeOf(this,$n.prototype)}}class En extends Error{constructor(e){super(e),Object.setPrototypeOf(this,En.prototype)}}class _n{constructor(e){this.maxEntries=e||100,this.cache=new Map}get(e){let t;return this.cache.has(e)&&(t=this.cache.get(e),this.cache.delete(e),this.cache.set(e,t)),t}put(e,t){if(this.cache.has(e))this.cache.delete(e);else if(this.cache.size>=this.maxEntries){const e=this.cache.keys().next().value;this.cache.delete(e)}this.cache.set(e,t)}getMaxEntries(){return this.maxEntries}setMaxEntries(e){if(e<0)throw new Error(`The maxEntries of LRU caches must be at least 0, but got ${e}.`);if(this.maxEntries>e)for(let t=0;t<this.maxEntries-e;t++){const e=this.cache.keys().next().value;this.cache.delete(e)}this.maxEntries=e}}function An(e,t){if(Array.isArray(e)){let n=[];for(let s=0;s<t;s++)n=n.concat(e);return n}{const n=new Array(t);return n.fill(e),n}}function Rn(e,t){if(!e)throw new $n(t)}function Fn(e,t){let n=0;for(const s of e)s===t&&n++;return n}function Dn(e){return 1===e.length?e[0]:e}function On(e){return Array.isArray(e)?e:[e]}function Mn(e){const t=e.replace(/(.)([A-Z][a-z0-9]+)/g,"$1_$2").replace(/([a-z])([A-Z])/g,"$1_$2").toLowerCase();return"_"!==t[0]?t:"private"+t}function zn(e){return e.length<=1||-1===e.indexOf("_")?e:e.replace(/[_]+(\w|$)/g,((e,t)=>t.toUpperCase()))}let Ln={};function Bn(e){if(null==e)return null;const t={};return t.className=e.getClassName(),t.config=e.getConfig(),t}function Pn(e){if(null!=e&&"object"==typeof e)if(Array.isArray(e))e.forEach((e=>Pn(e)));else{const t=Object.keys(e);for(const n of t){const t=e[n];null!=t&&"object"==typeof t&&(Array.isArray(t)||"ndarray"!==t.type||"number"!=typeof t.value?Pn(t):e[n]=t.value)}}}function Vn(e,t={},n={},s="object",a=!1){if("string"==typeof e){const a=e;let r;if(a in n)r=n[a];else if(a in Ln)r=Ln[a];else if(r=t[a],null==r)throw new Tn(`Unknown ${s}: ${e}. This may be due to one of the following reasons:\n1. The ${s} is defined in Python, in which case it needs to be ported to TensorFlow.js or your JavaScript code.\n2. The custom ${s} is defined in JavaScript, but is not registered properly with tf.serialization.registerClass().`);return r}{const r=e;if(null==r.className||null==r.config)throw new Tn(`${s}: Improper config format: ${JSON.stringify(r)}.\n'className' and 'config' must set.`);const i=r.className;let o,l;if(i in n?[o,l]=n[i]:i in Ln?[o,l]=Ln.className:i in t&&([o,l]=t[i]),null==o)throw new Tn(`Unknown ${s}: ${i}. This may be due to one of the following reasons:\n1. The ${s} is defined in Python, in which case it needs to be ported to TensorFlow.js or your JavaScript code.\n2. The custom ${s} is defined in JavaScript, but is not registered properly with tf.serialization.registerClass().`);if(null!=l){const e={};for(const t of Object.keys(Ln))e[t]=Ln[t];for(const t of Object.keys(n))e[t]=n[t];r.config.customObjects=e;const t=Object.assign({},Ln);for(const e of Object.keys(n))Ln[e]=n[e];Pn(r.config);const s=l(o,r.config,n,a);return Ln=Object.assign({},t),s}{const e=Object.assign({},Ln);for(const e of Object.keys(n))Ln[e]=n[e];const t=new o(r.config);return Ln=Object.assign({},e),t}}}function Wn(e,t){return-1*function(e,t){return e<t?-1:e>t?1:0}(e,t)}function Un(e){if(null==e)return e;const t=[];for(const n of e)-1===t.indexOf(n)&&t.push(n);return t}function Gn(e){if(null==e)throw new Tn(`Invalid value in obj: ${JSON.stringify(e)}`);for(const t in e)if(e.hasOwnProperty(t))return!1;return!0}function Hn(e,t,n){if(null!=n&&e.indexOf(n)<0)throw new Tn(`${n} is not a valid ${t}.  Valid values are ${e} or null/undefined.`)}function qn(e,t,n=0,s=1/0){return Rn(n>=0),Rn(s>=n),Array.isArray(e)&&e.length>=n&&e.length<=s&&e.every((e=>typeof e===t))}function Xn(e,t){Array.isArray(e)?(r.util.assert(e.length>0,(()=>`${t} is unexpectedly an empty array.`)),e.forEach(((e,n)=>Xn(e,`element ${n+1} of ${t}`)))):r.util.assert(Number.isInteger(e)&&e>0,(()=>`Expected ${t} to be a positive integer, but got ${jn(e)}.`))}function jn(e){return null===e?"null":Array.isArray(e)?"["+e.map((e=>jn(e))).join(",")+"]":"string"==typeof e?`"${e}"`:`${e}`}function Kn(e){return"relu"===e?"relu":"linear"===e?"linear":"elu"===e?"elu":null}let Yn=0;function Zn(){return Yn++}const Qn={};function Jn(e=""){return e in Qn||(Qn[e]=0),Qn[e]+=1,e+Qn[e].toString()}const es=["channelsFirst","channelsLast"],ts=["nearest","bilinear"],ns=["valid","same","causal"],ss=["max","avg"],as=["sum","mul","concat","ave"],rs=new Map;function is(e){Hn(es,"DataFormat",e)}function os(e){Hn(ns,"PaddingMode",e)}function ls(e){Hn(ss,"PoolMode",e)}const us=[];function cs(e,t){us.push(e);try{const e=t();return us.pop(),e}catch(e){throw us.pop(),e}}function hs(e){if(!fs(e))throw new Error("Not a valid tensor name: '"+e+"'");return(0===us.length?"":us.join("/")+"/")+e}function ps(e){if(!fs(e))throw new Error("Not a valid tensor name: '"+e+"'");rs.has(e)||rs.set(e,0);const t=rs.get(e);if(rs.set(e,rs.get(e)+1),t>0){const n=`${e}_${t}`;return rs.set(n,1),n}return e}const ds=new RegExp(/^[A-Za-z0-9][-A-Za-z0-9\._\/]*$/);function fs(e){return!!e.match(ds)}function ms(e,t,n){null==t&&(t=0),null==n&&(n=e.length);let s=1;for(let a=t;a<n;++a)s*=e[a];return s}function gs(e){if(0===e.length)return Number.NaN;let t=Number.POSITIVE_INFINITY;for(let n=0;n<e.length;n++){const s=e[n];s<t&&(t=s)}return t}function ys(e){if(0===e.length)return Number.NaN;let t=Number.NEGATIVE_INFINITY;for(let n=0;n<e.length;n++){const s=e[n];s>t&&(t=s)}return t}function bs(e,t){if(t<e)throw new Tn(`end (${t}) < begin (${e}) is forbidden.`);const n=[];for(let s=e;s<t;++s)n.push(s);return n}let xs;function vs(){return null==xs&&(xs=(0,r.backend)().epsilon()),xs}function ws(e,t){return r.cast(e,t)}function ks(e,t=-1){const n=e.shape.slice();return t<0&&(t=n.length+t+1),n.splice(t,0,1),r.reshape(e,n)}function Is(e,t,n){return(0,r.tidy)((()=>{switch(e.rank){case 1:return r.slice1d(e,t,n);case 2:return r.slice2d(e,[t,0],[n,e.shape[1]]);case 3:return r.slice3d(e,[t,0,0],[n,e.shape[1],e.shape[2]]);case 4:return r.slice4d(e,[t,0,0,0],[n,e.shape[1],e.shape[2],e.shape[3]]);case 5:return r.slice(e,[t,0,0,0,0],[n,e.shape[1],e.shape[2],e.shape[3],e.shape[4]]);case 6:return r.slice(e,[t,0,0,0,0,0],[n,e.shape[1],e.shape[2],e.shape[3],e.shape[4],e.shape[5]]);default:throw new Tn(`sliceAlongFirstAxis() received an unsupported tensor rank: ${e.rank}`)}}))}function Ss(e,t,n){return(0,r.tidy)((()=>{switch(e.rank){case 1:return r.slice1d(e,t,n);case 2:return r.slice2d(e,[0,t],[e.shape[0],n]);case 3:return r.slice3d(e,[0,0,t],[e.shape[0],e.shape[1],n]);case 4:return r.slice4d(e,[0,0,0,t],[e.shape[0],e.shape[1],e.shape[2],n]);default:throw new Tn(`sliceAlongLastAxis() received an unsupported tensor rank: ${e.rank}`)}}))}function Ns(e,t,n,s){return(0,r.tidy)((()=>{switch(e.rank){case 1:return r.slice1d(e,t,n);case 2:switch(s){case 1:return Is(e,t,n);case 2:return Ss(e,t,n);default:throw new Tn(`The axis is not within the rank of the tensor ${s}`)}case 3:switch(s){case 1:return Is(e,t,n);case 2:return r.slice3d(e,[0,t,0],[e.shape[0],n,e.shape[2]]);case 3:return Ss(e,t,n);default:throw new Tn(`The axis is not within the rank of the tensor ${s}`)}case 4:switch(s){case 1:return Is(e,t,n);case 2:return r.slice4d(e,[0,t,0,0],[e.shape[0],n,e.shape[2],e.shape[3]]);case 3:return r.slice4d(e,[0,0,t,0],[e.shape[0],e.shape[1],n,e.shape[3]]);case 4:return Ss(e,t,n);default:throw new Tn(`The axis is not within the rank of the tensor ${s}`)}default:throw new Tn(`sliceAlongLastAxis() received an unsupported tensor rank: ${e.rank}`)}}))}function Ts(e,t=-1){let n;return t<0&&(n=e[0].rank,t=0!==n?n:0),t===e[0].rank&&(t=-1),r.concat(e,t)}function Cs(e,t){switch(e.rank){case 1:return r.concat1d([e,t]);case 2:return r.concat2d([e,t],0);case 3:return r.concat3d([e,t],0);case 4:return r.concat4d([e,t],0);default:throw new Tn(`concatAlongFirstAxis() received an unsupported tensor rank: ${e.rank}`)}}function $s(e,t){if(Array.isArray(t)||(t=[t]),e.rank!==t.length)throw new Tn(`The length of input n (${t.length}) does not match the number of dimensions in input x (${e.rank})`);return r.tile(e,t)}function Es(e,t=0,n=1,s,a){return r.randomNormal(e,t,n,s,a)}function _s(e,t,n,s){if(e.rank<2||t.rank<2)throw new Cn(`dot requires both inputs to be rank >= 2 but got x shape = ${e.shape} and y shape = ${t.shape}`);if(t.rank>=3&&e.shape.slice(-1)[0]!==t.shape.slice(-2)[0])throw new Cn(`If rank y >= 3, then the second last dim of y must equal the last dim of x but got x shape = ${e.shape} and  y shape = ${t.shape}`);if(2===e.rank&&2===t.rank){const a=!1,i=!1;return r.fused.matMul({a:e,b:t,transposeA:a,transposeB:i,bias:s?Fs(e.rank,s,"channelsLast"):null,activation:n})}{const a=e.shape.slice(),i=a.pop();e=r.reshape(e,[-1,i]);const o=t.shape.slice(),l=o.pop(),u=o.pop(),c=[...o,l],h=Array.from({length:t.rank},((e,n)=>0===n?t.rank-2:n<=t.rank-2?n-1:n));t=r.reshape(r.transpose(t,h),[u,-1]);const p=[...a,...c],d=!1,f=!1;return r.reshape(r.fused.matMul({a:e,b:t,transposeA:d,transposeB:f,bias:s?Fs(e.rank,s,"channelsLast"):null,activation:n}),p)}}function As(e,t,n){return(0,r.tidy)((()=>(t=Array.isArray(t)?(0,r.tensor1d)(t,"int32"):r.cast(t,"int32"),r.gather(e,t,n))))}function Rs(e){return r.mul(e,e)}function Fs(e,t,n){const s=t.shape;if(1!==t.rank&&t.rank!==e)throw new Tn(`Unexpected bias dimensions: ${t.rank}; expected it to be 1 or ${e}`);if(5===e){if("channelsFirst"===n)return 1===s.length?r.reshape(t,[1,s[0],1,1,1]):r.reshape(t,[1,s[3],s[0],s[1],s[2]]);if("channelsLast"===n)return 1===s.length?r.reshape(t,[1,1,1,1,s[0]]):r.reshape(t,[1].concat(s))}else if(4===e){if("channelsFirst"===n)return 1===s.length?r.reshape(t,[1,s[0],1,1]):r.reshape(t,[1,s[2],s[0],s[1]]);if("channelsLast"===n)return 1===s.length?r.reshape(t,[1,1,1,s[0]]):r.reshape(t,[1].concat(s))}else if(3===e){if("channelsFirst"===n)return 1===s.length?r.reshape(t,[1,s[0],1]):r.reshape(t,[1,s[1],s[0]]);if("channelsLast"===n)return 1===s.length?r.reshape(t,[1,1,s[0]]):r.reshape(t,[1].concat(s))}else if(e<3)return t;throw new Tn(`Unsupported input rank by biasAdd: ${t.rank}`)}function Ds(e,t,n){return(0,r.tidy)((()=>(null==n&&(n="channelsLast"),is(n),r.add(e,Fs(e.rank,t,n)))))}function Os(e,t,n,s){return(0,r.tidy)((()=>r.dropout(e,t,n,s)))}function Ms(e,t,n=!1){return n?e():t()}const zs=["fanIn","fanOut","fanAvg"],Ls=["normal","uniform","truncatedNormal"];class Bs extends r.serialization.Serializable{fromConfigUsesCustomObjects(){return!1}getConfig(){return{}}}class Ps extends Bs{apply(e,t){return(0,r.zeros)(e,t)}}Ps.className="Zeros",r.serialization.registerClass(Ps);class Vs extends Bs{apply(e,t){return(0,r.ones)(e,t)}}Vs.className="Ones",r.serialization.registerClass(Vs);class Ws extends Bs{constructor(e){if(super(),"object"!=typeof e)throw new Tn(`Expected argument of type ConstantConfig but got ${e}`);if(void 0===e.value)throw new Tn(`config must have value set but got ${e}`);this.value=e.value}apply(e,t){return(0,r.tidy)((()=>(0,r.mul)((0,r.scalar)(this.value),(0,r.ones)(e,t))))}getConfig(){return{value:this.value}}}Ws.className="Constant",r.serialization.registerClass(Ws);class Us extends Bs{constructor(e){super(),this.DEFAULT_MINVAL=-.05,this.DEFAULT_MAXVAL=.05,this.minval=e.minval||this.DEFAULT_MINVAL,this.maxval=e.maxval||this.DEFAULT_MAXVAL,this.seed=e.seed}apply(e,t){return(0,r.randomUniform)(e,this.minval,this.maxval,t)}getConfig(){return{minval:this.minval,maxval:this.maxval,seed:this.seed}}}Us.className="RandomUniform",r.serialization.registerClass(Us);class Gs extends Bs{constructor(e){super(),this.DEFAULT_MEAN=0,this.DEFAULT_STDDEV=.05,this.mean=e.mean||this.DEFAULT_MEAN,this.stddev=e.stddev||this.DEFAULT_STDDEV,this.seed=e.seed}apply(e,t){if("float32"!==(t=t||"float32")&&"int32"!==t)throw new Cn(`randomNormal does not support dType ${t}.`);return Es(e,this.mean,this.stddev,t,this.seed)}getConfig(){return{mean:this.mean,stddev:this.stddev,seed:this.seed}}}Gs.className="RandomNormal",r.serialization.registerClass(Gs);class Hs extends Bs{constructor(e){super(),this.DEFAULT_MEAN=0,this.DEFAULT_STDDEV=.05,this.mean=e.mean||this.DEFAULT_MEAN,this.stddev=e.stddev||this.DEFAULT_STDDEV,this.seed=e.seed}apply(e,t){if("float32"!==(t=t||"float32")&&"int32"!==t)throw new Cn(`truncatedNormal does not support dType ${t}.`);return(0,r.truncatedNormal)(e,this.mean,this.stddev,t,this.seed)}getConfig(){return{mean:this.mean,stddev:this.stddev,seed:this.seed}}}Hs.className="TruncatedNormal",r.serialization.registerClass(Hs);class qs extends Bs{constructor(e){super(),this.gain=null!=e.gain?e.gain:1}apply(e,t){return(0,r.tidy)((()=>{if(2!==e.length||e[0]!==e[1])throw new Tn("Identity matrix initializer can only be used for 2D square matrices.");return(0,r.mul)(this.gain,(0,r.eye)(e[0]))}))}getConfig(){return{gain:this.gain}}}qs.className="Identity",r.serialization.registerClass(qs);class Xs extends Bs{constructor(e){if(super(),e.scale<0)throw new Tn(`scale must be a positive float. Got: ${e.scale}`);var t;this.scale=null==e.scale?1:e.scale,this.mode=null==e.mode?"fanIn":e.mode,t=this.mode,Hn(zs,"FanMode",t),this.distribution=null==e.distribution?"normal":e.distribution,function(e){Hn(Ls,"Distribution",e)}(this.distribution),this.seed=e.seed}apply(e,t){const n=function(e,t="channelsLast"){let n,s;if(is(t),2===e.length)n=e[0],s=e[1];else if(-1!==[3,4,5].indexOf(e.length)){if("channelsFirst"===t){const t=ms(e,2);n=e[1]*t,s=e[0]*t}else if("channelsLast"===t){const t=ms(e,0,e.length-2);n=e[e.length-2]*t,s=e[e.length-1]*t}}else{const t=ms(e);n=Math.sqrt(t),s=Math.sqrt(t)}return[n,s]}(e),s=n[0],a=n[1];let i=this.scale;if("fanIn"===this.mode?i/=Math.max(1,s):"fanOut"===this.mode?i/=Math.max(1,a):i/=Math.max(1,(s+a)/2),"normal"===this.distribution){const n=Math.sqrt(i);if("float32"!==(t=t||"float32")&&"int32"!==t)throw new Cn(`${this.getClassName()} does not support dType ${t}.`);return(0,r.truncatedNormal)(e,0,n,t,this.seed)}{const n=Math.sqrt(3*i);return(0,r.randomUniform)(e,-n,n,t)}}getConfig(){return{scale:this.scale,mode:this.mode,distribution:this.distribution,seed:this.seed}}}Xs.className="VarianceScaling",r.serialization.registerClass(Xs);class js extends Xs{constructor(e){super({scale:1,mode:"fanAvg",distribution:"uniform",seed:null==e?null:e.seed})}getClassName(){return Xs.className}}js.className="GlorotUniform",r.serialization.registerClass(js);class Ks extends Xs{constructor(e){super({scale:1,mode:"fanAvg",distribution:"normal",seed:null==e?null:e.seed})}getClassName(){return Xs.className}}Ks.className="GlorotNormal",r.serialization.registerClass(Ks);class Ys extends Xs{constructor(e){super({scale:2,mode:"fanIn",distribution:"normal",seed:null==e?null:e.seed})}getClassName(){return Xs.className}}Ys.className="HeNormal",r.serialization.registerClass(Ys);class Zs extends Xs{constructor(e){super({scale:2,mode:"fanIn",distribution:"uniform",seed:null==e?null:e.seed})}getClassName(){return Xs.className}}Zs.className="HeUniform",r.serialization.registerClass(Zs);class Qs extends Xs{constructor(e){super({scale:1,mode:"fanIn",distribution:"normal",seed:null==e?null:e.seed})}getClassName(){return Xs.className}}Qs.className="LeCunNormal",r.serialization.registerClass(Qs);class Js extends Xs{constructor(e){super({scale:1,mode:"fanIn",distribution:"uniform",seed:null==e?null:e.seed})}getClassName(){return Xs.className}}Js.className="LeCunNormal",r.serialization.registerClass(Js);class ea extends Bs{constructor(e){if(super(),this.DEFAULT_GAIN=1,this.gain=null==e.gain?this.DEFAULT_GAIN:e.gain,this.seed=e.seed,null!=this.seed)throw new Cn("Random seed is not implemented for Orthogonal Initializer yet.")}apply(e,t){return(0,r.tidy)((()=>{if(e.length<2)throw new Cn("Shape must be at least 2D.");e[0]*e[1]>2e3&&console.warn(`Orthogonal initializer is being called on a matrix with more than 2000 (${e[0]*e[1]}) elements: Slowness may result.`);const t=Es(e[0]>e[1]?[e[1],e[0]]:e,0,1,"float32");let n=r.linalg.gramSchmidt(t);return e[0]>e[1]&&(n=(0,r.transpose)(n)),(0,r.mul)(this.gain,n)}))}getConfig(){return{gain:this.gain,seed:this.seed}}}ea.className="Orthogonal",r.serialization.registerClass(ea);const ta={constant:"Constant",glorotNormal:"GlorotNormal",glorotUniform:"GlorotUniform",heNormal:"HeNormal",heUniform:"HeUniform",identity:"Identity",leCunNormal:"LeCunNormal",leCunUniform:"LeCunUniform",ones:"Ones",orthogonal:"Orthogonal",randomNormal:"RandomNormal",randomUniform:"RandomUniform",truncatedNormal:"TruncatedNormal",varianceScaling:"VarianceScaling",zeros:"Zeros"};function na(e,t={}){return Vn(e,r.serialization.SerializationMap.getMap().classNameMap,t,"initializer")}function sa(e){return Bn(e)}function aa(e){if("string"==typeof e){const t=e in ta?ta[e]:e;if("GlorotNormal"===t)return new Ks;if("GlorotUniform"===t)return new js;if("HeNormal"===t)return new Ys;if("HeUniform"===t)return new Zs;if("LeCunNormal"===t)return new Qs;if("LeCunUniform"===t)return new Js;{const e={};return e.className=t,e.config={},na(e)}}return e instanceof Bs?e:na(e)}function ra(e){return Array.isArray(e)&&Array.isArray(e[0])}function ia(e){return 0===e.length?[]:Array.isArray(e[0])?e:[e]}function oa(e){let t;if(Array.isArray(e)){if(1!==e.length)throw new Tn(`Expected Tensor length to be 1; got ${e.length}`);t=e[0]}else t=e;return t}function la(e){if(Array.isArray(e)&&Array.isArray(e[0])){if(1===e.length)return e[0];throw new Tn(`Expected exactly 1 Shape; got ${e.length}`)}return e}function ua(e){let t=0;for(const n of e)0===n.shape.length?t+=1:t+=n.shape.reduce(((e,t)=>e*t));return t}class ca{constructor(e,t="float32",n="Variable",s=!0,a=null){this.dtype=null==t?"float32":t,this.shape=e.shape,this.id=Zn(),n=null==n?"Variable":n,this.originalName=hs(n),this.name=ps(this.originalName),this.trainable_=s,this.constraint=a,this.val=r.variable(e,this.trainable_,this.name,this.dtype)}read(){return this.assertNotDisposed(),this.val}write(e){return this.assertNotDisposed(),function(e,t){if(e.shape.toString()!==t.shape.toString())throw new Error("Shape mismatch: "+JSON.stringify(e.shape)+" vs. "+JSON.stringify(t.shape))}(this.val,e),this.val.id!==e.id&&(this.val.assign(e),null!=this.constraint&&this.val.assign(this.constraint.apply(this.val))),this}dispose(){this.assertNotDisposed(),this.val.dispose()}assertNotDisposed(){if(this.val.isDisposed)throw new Error(`LayersVariable ${this.name} is already disposed.`)}get trainable(){return this.trainable_}set trainable(e){this.trainable_=e,this.val.trainable=e}}function ha(e){return e.map((e=>e.read()))}function pa(e){e.forEach((e=>{e[0].write(e[1])}))}class da{constructor(e){this.dtype=e.dtype,this.shape=e.shape,null!=e.shape?this.ndim=e.shape.length:this.ndim=e.ndim,this.maxNDim=e.maxNDim,this.minNDim=e.minNDim,this.axes=e.axes||{}}}class fa{constructor(e,t,n,s,a,r,i){this.dtype=e,this.shape=t,this.sourceLayer=n,this.inputs=s,this.callArgs=a,this.outputTensorIndex=i,this.id=Zn(),null!=r&&(this.originalName=hs(r),this.name=ps(this.originalName)),this.rank=t.length}}let ma=0;class ga{constructor(e,t){this.callArgs=t,this.id=ma++,this.outboundLayer=e.outboundLayer,this.inboundLayers=e.inboundLayers,this.nodeIndices=e.nodeIndices,this.tensorIndices=e.tensorIndices,this.inputTensors=e.inputTensors,this.outputTensors=e.outputTensors,this.inputMasks=e.inputMasks,this.outputMasks=e.outputMasks,this.inputShapes=e.inputShapes,this.outputShapes=e.outputShapes;for(const t of e.inboundLayers)null!=t&&t.outboundNodes.push(this);e.outboundLayer.inboundNodes.push(this)}getConfig(){const e=[];for(const t of this.inboundLayers)null!=t?e.push(t.name):e.push(null);return{outboundLayer:this.outboundLayer?this.outboundLayer.name:null,inboundLayers:e,nodeIndices:this.nodeIndices,tensorIndices:this.tensorIndices}}}let ya=0;class ba extends r.serialization.Serializable{constructor(e={}){super(),this._callHook=null,this._addedWeightNames=[],this._stateful=!1,this.id=ya++,this.activityRegularizer=null,this.inputSpec=null,this.supportsMasking=!1,this._trainableWeights=[],this._nonTrainableWeights=[],this._losses=[],this._updates=[],this._built=!1,this.inboundNodes=[],this.outboundNodes=[];let t=e.name;if(!t){const e=this.getClassName();t=Mn(e)+"_"+Jn(e)}if(this.name=t,this.trainable_=null==e.trainable||e.trainable,null!=e.inputShape||null!=e.batchInputShape){let t;if(null!=e.batchInputShape)t=e.batchInputShape;else if(null!=e.inputShape){let n=null;null!=e.batchSize&&(n=e.batchSize),t=[n].concat(e.inputShape)}this.batchInputShape=t;let n=e.dtype;null==n&&(n=e.inputDType),null==n&&(n="float32"),this.dtype=n}null!=e.weights?this.initialWeights=e.weights:this.initialWeights=null,this._refCount=null,this.fastWeightInitDuringBuild=!1}static nodeKey(e,t){return e.name+"_ib-"+t.toString()}getNodeAtIndex(e,t){if(0===this.inboundNodes.length)throw new Nn(`The layer has never been called and thus has no defined ${t}.`);if(this.inboundNodes.length<=e)throw new Tn(`Asked to get ${t} at node ${e}, but the layer has only ${this.inboundNodes.length} inbound nodes.`);return this.inboundNodes[e]}getInputAt(e){return Dn(this.getNodeAtIndex(e,"input").inputTensors)}getOutputAt(e){return Dn(this.getNodeAtIndex(e,"output").outputTensors)}get input(){if(this.inboundNodes.length>1)throw new Sn(`Layer ${this.name} has multiple inbound nodes, hence the notion of "layer input" is ill-defined. Use \`getInputAt(nodeIndex)\` instead.`);if(0===this.inboundNodes.length)throw new Sn(`Layer ${this.name} is not connected, no input to return.`);return Dn(this.getNodeAtIndex(0,"input").inputTensors)}get output(){if(0===this.inboundNodes.length)throw new Sn(`Layer ${this.name} has no inbound nodes.`);if(this.inboundNodes.length>1)throw new Sn(`Layer ${this.name} has multiple inbound nodes, hence the notion of "layer output" is ill-defined. Use \`getOutputAt(nodeIndex)\` instead.`);return Dn(this.getNodeAtIndex(0,"output").outputTensors)}get losses(){return this._losses}calculateLosses(){return this.losses.map((e=>e()))}get updates(){return this._updates}get built(){return this._built}set built(e){this._built=e}get trainable(){return this.trainable_}set trainable(e){this._trainableWeights.forEach((t=>t.trainable=e)),this.trainable_=e}get trainableWeights(){return this.trainable_?this._trainableWeights.filter((e=>e.trainable)):[]}set trainableWeights(e){this._trainableWeights=e}get nonTrainableWeights(){return this.trainable?this._trainableWeights.filter((e=>!e.trainable)).concat(this._nonTrainableWeights):this._trainableWeights.concat(this._nonTrainableWeights)}set nonTrainableWeights(e){this._nonTrainableWeights=e}get weights(){return this.trainableWeights.concat(this.nonTrainableWeights)}get stateful(){return this._stateful}resetStates(){if(!this.stateful)throw new Error("Cannot call the resetStates() method of a non-stateful Layer object.")}assertInputCompatibility(e){if(e=On(e),null==this.inputSpec||0===this.inputSpec.length)return;const t=On(this.inputSpec);if(e.length!==t.length)throw new Tn(`Layer ${this.name} expects ${t.length} inputs, but it received ${e.length} input tensors. Input received: ${e}`);for(let n=0;n<e.length;n++){const s=e[n],a=t[n];if(null==a)continue;const r=s.rank;if(null!=a.ndim&&r!==a.ndim)throw new Tn(`Input ${n} is incompatible with layer ${this.name}: expected ndim=${a.ndim}, found ndim=${r}`);if(null!=a.maxNDim&&r>a.maxNDim)throw new Tn(`Input ${n} is incompatible with layer ${this.name}: expected max_ndim=${a.maxNDim}, found ndim=${r}`);if(null!=a.minNDim&&r<a.minNDim)throw new Tn(`Input ${n} is incompatible with layer ${this.name}: expected min_ndim=${a.minNDim}, found ndim=${r}.`);if(null!=a.dtype&&s.dtype!==a.dtype)throw new Tn(`Input ${n} is incompatible with layer ${this.name} : expected dtype=${a.dtype}, found dtype=${s.dtype}.`);if(a.axes){const e=s.shape;for(const t in a.axes){const s=Number(t),r=a.axes[t],i=s>=0?e[s]:e[e.length+s];if(null!=r&&-1===[r,null].indexOf(i))throw new Tn(`Input ${n} is incompatible with layer ${this.name}: expected axis ${s} of input shape to have value ${r} but got shape ${e}.`)}}if(null!=a.shape)for(let e=0;e<a.shape.length;++e){const t=a.shape[e],r=s.shape[e];if(null!=t&&null!=r&&t!==r)throw new Tn(`Input ${n} is incompatible with layer ${this.name}: expected shape=${a.shape}, found shape=${s.shape}.`)}}}call(e,t){return e}invokeCallHook(e,t){null!=this._callHook&&this._callHook(e,t)}setCallHook(e){this._callHook=e}clearCallHook(){this._callHook=null}apply(e,t){t=t||{},this.assertNotDisposed();const n=On(e);let s=!0;for(const e of n)if(!(e instanceof fa)){s=!1;break}let a=!0;for(const e of n)if(e instanceof fa){a=!1;break}if(s===a)throw new Tn("Arguments to apply() must be all SymbolicTensors or all Tensors");return cs(this.name,(()=>{if(!this.built){this.assertInputCompatibility(e);const t=[];for(const n of On(e))t.push(n.shape);this.build(Dn(t)),this.built=!0,this.initialWeights&&this.setWeights(this.initialWeights),null===this._refCount&&a&&(this._refCount=1)}if(this.assertInputCompatibility(e),a){let s=this.call(e,t);const a=On(s),r=[];for(let e of a)-1!==n.indexOf(e)&&(e=e.clone()),r.push(e);if(s=Dn(r),null!=this.activityRegularizer)throw new Cn("Layer invocation in the presence of activity regularizer(s) is not supported yet.");return s}{const n=function(e){e=On(e);const t=[];for(const n of e)t.push(n.shape);return Dn(t)}(e),s=this.computeOutputShape(n);let a;const r="float32";if(this.warnOnIncompatibleInputShape(Array.isArray(e)?n[0]:n),a=null!=s&&s.length>0&&Array.isArray(s[0])?s.map(((n,s)=>new fa(r,n,this,On(e),t,this.name,s))):new fa(r,s,this,On(e),t,this.name),this.addInboundNode(e,a,null,null,n,s,t),this._refCount++,null!=this.activityRegularizer)throw new Cn("Layer invocation in the presence of activity regularizer(s) is not supported yet.");return a}}))}warnOnIncompatibleInputShape(e){if(null!=this.batchInputShape)if(e.length!==this.batchInputShape.length)console.warn(`The rank of the input tensor provided (shape: ${JSON.stringify(e)}) does not match that of the batchInputShape (${JSON.stringify(this.batchInputShape)}) of the layer ${this.name}`);else{let t=!1;this.batchInputShape.forEach(((n,s)=>{null!=n&&null!=e[s]&&e[s]!==n&&(t=!0)})),t&&console.warn(`The shape of the input tensor (${JSON.stringify(e)}) does not match the expectation of layer ${this.name}: ${JSON.stringify(this.batchInputShape)}`)}}get outputShape(){if(null==this.inboundNodes||0===this.inboundNodes.length)throw new Sn(`The layer ${this.name} has never been called and thus has no defined output shape.`);const e=[];for(const t of this.inboundNodes){const n=JSON.stringify(t.outputShapes);-1===e.indexOf(n)&&e.push(n)}if(1===e.length){const e=this.inboundNodes[0].outputShapes;return Array.isArray(e)&&Array.isArray(e[0])&&1===e.length?e[0]:e}throw new Sn(`The layer ${this.name} has multiple inbound nodes with different output shapes. Hence the notion of "output shape" is ill-defined for the layer.`)}countParams(){if(!this.built)throw new Nn(`You tried to call countParams() on ${this.name}, but the layer is not built yet. Build it first by calling build(batchInputShape).`);return ua(this.weights)}build(e){this.built=!0}getWeights(e=!1){return ha(e?this.trainableWeights:this.weights)}setWeights(e){(0,r.tidy)((()=>{const t=this.weights;if(t.length!==e.length)throw new Tn(`You called setWeights(weights) on layer "${this.name}" with a weight list of length ${e.length}, but the layer was expecting ${t.length} weights. Provided weights: ${e}...`);if(0===t.length)return;const n=[],s=ha(t);for(let a=0;a<s.length;++a){const i=s[a],o=t[a],l=e[a];if(!r.util.arraysEqual(i.shape,l.shape))throw new Tn(`Layer weight shape ${i.shape} not compatible with provided weight shape ${l.shape}`);n.push([o,l])}pa(n)}))}addWeight(e,t,n,s,a,r,i,o){if(-1!==this._addedWeightNames.indexOf(e))throw new Tn(`Duplicate weight name ${e} for layer ${this.name}`);this._addedWeightNames.push(e),null==n&&(n="float32"),this.fastWeightInitDuringBuild&&(s=null!=o?o():aa("zeros"));const l=s.apply(t,n),u=new ca(l,n,e,r,i);return l.dispose(),null!=a&&this.addLoss((()=>a.apply(u.read()))),null==r&&(r=!0),r?this._trainableWeights.push(u):this._nonTrainableWeights.push(u),u}setFastWeightInitDuringBuild(e){this.fastWeightInitDuringBuild=e}addLoss(e){null==e||Array.isArray(e)&&0===e.length||(e=On(e),void 0!==this._losses&&null!==this._losses&&this.losses.push(...e))}computeOutputShape(e){return e}computeMask(e,t){if(!this.supportsMasking){if(null!=t){if(!Array.isArray(t))throw new TypeError(`Layer ${this.name} does not support masking, but was passed an inputMask.`);t.forEach((e=>{if(null!=e)throw new TypeError(`Layer ${this.name} does not support masking, but was passed an inputMask.`)}))}return null}return t}addInboundNode(e,t,n,s,a,r,i=null){const o=On(e);t=On(t),n=On(n),s=On(s),a=ia(a),r=ia(r);const l=[],u=[],c=[];for(const e of o)l.push(e.sourceLayer),u.push(e.nodeIndex),c.push(e.tensorIndex);new ga({outboundLayer:this,inboundLayers:l,nodeIndices:u,tensorIndices:c,inputTensors:o,outputTensors:t,inputMasks:n,outputMasks:s,inputShapes:a,outputShapes:r},i);for(let e=0;e<t.length;e++)t[e].sourceLayer=this,t[e].nodeIndex=this.inboundNodes.length-1,t[e].tensorIndex=e}getConfig(){const e={name:this.name,trainable:this.trainable};return null!=this.batchInputShape&&(e.batchInputShape=this.batchInputShape),null!=this.dtype&&(e.dtype=this.dtype),e}disposeWeights(){return this.weights.forEach((e=>e.dispose())),this.weights.length}assertNotDisposed(){if(0===this._refCount)throw new Error(`Layer '${this.name}' is already disposed.`)}dispose(){if(!this.built)throw new Error(`Cannot dispose Layer ${this.name} because it has not been built yet.`);if(null===this._refCount)throw new Error(`Cannot dispose Layer ${this.name} because it has not been used yet.`);this.assertNotDisposed();let e=0;return 0==--this._refCount&&(e=this.disposeWeights()),{refCountAfterDispose:this._refCount,numDisposedVariables:e}}}function xa(e,t,n){if((null==t||null!=n&&n>0)&&(t=e.sourceLayer,n=e.nodeIndex),0===t.inboundNodes.length)return[e];{const e=t.inboundNodes[n];if(0===e.inboundLayers.length)return e.inputTensors;{const t=[];for(let n=0;n<e.inboundLayers.length;n++){const s=xa(e.inputTensors[n],e.inboundLayers[n],e.nodeIndices[n]);for(const e of s)-1===t.indexOf(e)&&t.push(e)}return t}}}class va extends ba{constructor(e){if(super({dtype:e.dtype,name:null!=e.name?e.name:Jn("input").toString()}),null==e.batchSize&&(e.batchSize=null),null==e.sparse&&(e.sparse=!1),this.trainable=!1,this.built=!0,this.sparse=e.sparse,null!=e.inputShape&&null!=e.batchInputShape)throw new Tn("Only provide the inputShape OR batchInputShape argument to inputLayer, not both at the same time.");let t=e.batchInputShape;if(null==t){if(null==e.inputShape)throw new Tn("An InputLayer should be passed either a `batchInputShape` or an `inputShape`.");t=[e.batchSize].concat(e.inputShape)}else if(null!=e.batchSize)throw new Tn("Cannot specify batchSize if batchInputShape is specified when creating an InputLayer.");const n=e.dtype||"float32";this.batchInputShape=t,this.dtype=n,this.inputSpec=[{shape:t}];const s=new fa(this.dtype,this.batchInputShape,this,[],{},this.name);s.nodeIndex=0,s.tensorIndex=0,new ga({outboundLayer:this,inboundLayers:[],nodeIndices:[],tensorIndices:[],inputTensors:[s],outputTensors:[s],inputMasks:[null],outputMasks:[null],inputShapes:[t],outputShapes:[t]})}apply(e,t){throw new Tn(`Cannot pass any input to an InputLayer's apply() method. InputLayer name: ${this.name}`)}dispose(){return{refCountAfterDispose:this._refCount,numDisposedVariables:0}}getConfig(){return{batchInputShape:this.batchInputShape,dtype:this.dtype,sparse:this.sparse,name:this.name}}}function wa(e){if(null==e.batchShape&&null==e.shape)throw new Error("Please provide to Input either a `shape` or a `batchShape` argument. Note that `shape` does not include the batch dimension.");if(null!=e.batchShape&&null!=e.shape)throw new Tn("Please provide either a `shape` or `batchShape` argument to Input, but not both.");let t=e.batchShape;null!=e.shape&&null==t&&(t=[null].concat(e.shape));let n=e.dtype;return null==n&&(n="float32"),new va({batchInputShape:t,name:e.name,dtype:n,sparse:e.sparse}).inboundNodes[0].outputTensors[0]}va.className="InputLayer",r.serialization.registerClass(va);class ka{constructor(e){if(this.id2Value={},this.id2Mask={},this.name2Id={},e instanceof ka)for(const t in e.id2Value)this.id2Value[t]=e.id2Value[t],t in e.id2Mask&&(this.id2Mask[t]=e.id2Mask[t]);else{if(null==e)return;for(const t of e)this.add(t.key,t.value)}}add(e,t,n){if(null!=this.id2Value[e.id])throw new Tn(`Duplicate key: name=${e.name}, id=${e.id}`);return this.id2Value[e.id]=function(e,t){if(null==e.dtype||e.dtype===t.dtype)return t;try{return(0,r.cast)(t,e.dtype)}catch(n){throw new Tn(`The dtype of the feed (${t.dtype}) can not be cast to the dtype of the key '${e.name}' (${e.dtype}).`)}}(e,t),this.name2Id[e.name]=e.id,null!=n&&(this.id2Mask[e.id]=n),this}addFeed(e){this.add(e.key,e.value)}hasKey(e){return null!=this.id2Value[e.id]}names(){return Object.keys(this.name2Id)}getValue(e){if(e instanceof fa){if(null==this.id2Value[e.id])throw new Tn(`Nonexistent key: ${e.name}`);return this.id2Value[e.id]}{const t=this.name2Id[e];if(null==t)throw new Tn(`Feed dict has no SymbolicTensor name: ${e}`);return this.id2Value[t]}}getMask(e){if(e instanceof fa){if(null==this.id2Value[e.id])throw new Tn(`Nonexistent key: ${e.name}`);return this.id2Mask[e.id]}{const t=this.name2Id[e];if(null==t)throw new Tn(`Feed dict has no SymbolicTensor name: ${e}`);return this.id2Mask[t]}}disposeMasks(){null!=this.id2Mask&&(0,r.dispose)(this.id2Mask)}}const Ia=new _n,Sa=new _n;function Na(e,t,n,s){const a=null!=n&&n.training,i=Array.isArray(e),o=i?e:[e],l=o.map((e=>e.name)),u=[],c=t.names();for(const e of l)-1!==c.indexOf(e)?u.push(t.getValue(e)):u.push(null);null!=s&&(s.maxNumTensors=-1/0,s.minNumTensors=1/0);const h=l.join(",")+"|"+t.names().sort().join(",");let p,d=Ia.get(h);if(null==d){const e=function(e,t){r.util.assert(null!=e&&e.length>0,(()=>"Expected at least one fetch, got none"));let n=[],s={};if(1===e.length){const a=Ca(e[0],t);n=a.sorted,s=a.recipientMap}else{const a=new Set;for(const r of e){const{sorted:e,recipientMap:i}=Ca(r,t);for(const t of e)a.has(t.name)||(n.push(t),a.add(t.name));for(const e in i)null==s[e]&&(s[e]=new Set),i[e].forEach((t=>s[e].add(t)))}}return{sorted:n,recipientCounts:Ta(s)}}(o,t);d=e.sorted,p=e.recipientCounts,Ia.put(h,d),Sa.put(h,p)}p={},a||Object.assign(p,Sa.get(h));const f=new ka(t);for(let e=0;e<d.length;++e){if(null!=s){const e=(0,r.memory)().numTensors;e>s.maxNumTensors&&(s.maxNumTensors=e),e<s.minNumTensors&&(s.minNumTensors=e)}const i=d[e],o=i.sourceLayer;if(o instanceof va)continue;const c=[],h=[],m=[];let g=!1;for(const e of i.inputs){const n=f.getValue(e),s=f.getMask(e);c.push(n),h.push(s),null!=s&&(g=!0),a||(p[e.name]--,0!==p[e.name]||t.hasKey(e)||-1!==l.indexOf(e.name)||n.isDisposed||!0===e.sourceLayer.stateful||m.push(n))}g&&((n=n||{}).mask=h[0]);const y=On(o.apply(c,n));let b=null;o.supportsMasking&&(b=o.computeMask(c,h));const x=$a(i),v=Array.isArray(x)?x:[x];for(let e=0;e<v.length;++e){f.hasKey(v[e])||f.add(v[e],y[e],Array.isArray(b)?b[0]:b);const t=l.indexOf(v[e].name);-1!==t&&(u[t]=y[e])}a||(0,r.dispose)(m)}return f.disposeMasks(),i?u:u[0]}function Ta(e){const t={};for(const n in e)t[n]=e[n].size;return t}function Ca(e,t){const n=new Set,s=[],a={};for(const e of t.names())n.add(e);const r=[],i=[];for(r.push(e);r.length>0;){const e=r[r.length-1];if(n.has(e.name)){r.pop();continue}const t=i[i.length-1]===r.length-1;if(0===e.inputs.length||t)r.pop(),s.push(e),n.add(e.name),t&&i.pop();else{i.push(r.length-1);for(const t of e.inputs)null==a[t.name]&&(a[t.name]=new Set),a[t.name].add(e.name),n.has(t.name)||r.push(t)}}return{sorted:s,recipientMap:a}}function $a(e){let t;if(1===e.sourceLayer.inboundNodes.length)t=e.sourceLayer.output;else{let n=null;for(let t=0;t<e.sourceLayer.inboundNodes.length;++t)for(const s of e.sourceLayer.inboundNodes[t].outputTensors)if(s.id===e.id){n=t;break}t=e.sourceLayer.getOutputAt(n)}return t}function Ea(e,t){return(0,r.tidy)((()=>r.sqrt(r.sum(r.mul(e,e),t,!0))))}(0,r.env)().registerFlag("TOPOLOGICAL_SORT_CACHE_MAX_ENTRIES",(()=>100),(function(e){null!=Ia&&Ia.setMaxEntries(e),null!=Sa&&Sa.setMaxEntries(e)}));class _a extends r.serialization.Serializable{getConfig(){return{}}}class Aa extends _a{constructor(e){super(),this.defaultMaxValue=2,this.defaultAxis=0,this.maxValue=null!=e.maxValue?e.maxValue:this.defaultMaxValue,this.axis=null!=e.axis?e.axis:this.defaultAxis}apply(e){return(0,r.tidy)((()=>{const t=Ea(e,this.axis),n=r.clipByValue(t,0,this.maxValue);return r.mul(e,r.div(n,r.add(vs(),t)))}))}getConfig(){return{maxValue:this.maxValue,axis:this.axis}}}Aa.className="MaxNorm",r.serialization.registerClass(Aa);class Ra extends _a{constructor(e){super(),this.defaultAxis=0,this.axis=null!=e.axis?e.axis:this.defaultAxis}apply(e){return(0,r.tidy)((()=>r.div(e,r.add(vs(),Ea(e,this.axis)))))}getConfig(){return{axis:this.axis}}}Ra.className="UnitNorm",r.serialization.registerClass(Ra);class Fa extends _a{apply(e){return r.relu(e)}}Fa.className="NonNeg",r.serialization.registerClass(Fa);class Da extends _a{constructor(e){super(),this.defaultMinValue=0,this.defaultMaxValue=1,this.defaultRate=1,this.defaultAxis=0,this.minValue=null!=e.minValue?e.minValue:this.defaultMinValue,this.maxValue=null!=e.maxValue?e.maxValue:this.defaultMaxValue,this.rate=null!=e.rate?e.rate:this.defaultRate,this.axis=null!=e.axis?e.axis:this.defaultAxis}apply(e){return(0,r.tidy)((()=>{const t=Ea(e,this.axis),n=r.add(r.mul(this.rate,r.clipByValue(t,this.minValue,this.maxValue)),r.mul(1-this.rate,t));return r.mul(e,r.div(n,r.add(vs(),t)))}))}getConfig(){return{minValue:this.minValue,maxValue:this.maxValue,rate:this.rate,axis:this.axis}}}Da.className="MinMaxNorm",r.serialization.registerClass(Da);const Oa={maxNorm:"MaxNorm",minMaxNorm:"MinMaxNorm",nonNeg:"NonNeg",unitNorm:"UnitNorm"};function Ma(e){return Bn(e)}function za(e,t={}){return Vn(e,r.serialization.SerializationMap.getMap().classNameMap,t,"constraint")}function La(e){return null==e?null:"string"==typeof e?za({className:e in Oa?Oa[e]:e,config:{}}):e instanceof _a?e:za(e)}async function Ba(e){if(null==e)return;const t=[],n=[],s=[];for(const a in e){const r=e[a];if("number"!=typeof r){const e=r;t.push(e.data()),n.push(a),s.push(e)}}if(t.length>0){const a=await Promise.all(t);for(let t=0;t<a.length;++t)e[n[t]]=a[t][0];(0,r.dispose)(s)}}function Pa(e){if(null!=e)for(const t in e){const n=e[t];"number"!=typeof n&&n.dispose()}}var Va;!function(e){e[e.SILENT=0]="SILENT",e[e.VERBOSE=1]="VERBOSE"}(Va||(Va={}));class Wa{constructor(){this.validationData=null}setParams(e){this.params=e}async onEpochBegin(e,t){}async onEpochEnd(e,t){}async onBatchBegin(e,t){}async onBatchEnd(e,t){}async onTrainBegin(e){}async onTrainEnd(e){}setModel(e){}}class Ua{constructor(e,t=10){null==e&&(e=[]),this.callbacks=e,this.queueLength=t}append(e){this.callbacks.push(e)}setParams(e){for(const t of this.callbacks)t.setParams(e)}setModel(e){for(const t of this.callbacks)t.setModel(e)}async onEpochBegin(e,t){null==t&&(t={});for(const n of this.callbacks)await n.onEpochBegin(e,t)}async onEpochEnd(e,t){null==t&&(t={});for(const n of this.callbacks)await n.onEpochEnd(e,t)}async onBatchBegin(e,t){null==t&&(t={});for(const n of this.callbacks)await n.onBatchBegin(e,t)}async onBatchEnd(e,t){null==t&&(t={});for(const n of this.callbacks)await n.onBatchEnd(e,t)}async onTrainBegin(e){null==e&&(e={});for(const t of this.callbacks)await t.onTrainBegin(e)}async onTrainEnd(e){null==e&&(e={});for(const t of this.callbacks)await t.onTrainEnd(e)}}class Ga extends Wa{constructor(){super()}async onEpochBegin(e){this.seen=0,this.totals={}}async onBatchEnd(e,t){null==t&&(t={});const n=null==t.size?0:t.size;this.seen+=n;for(const e in t){const s=t[e];if("number"==typeof s)this.totals.hasOwnProperty(e)||(this.totals[e]=0),this.totals[e]=this.totals[e]+s*n;else{let t;e in this.totals?t=this.totals[e]:this.totals[e]=0;const a=(0,r.tidy)((()=>(0,r.add)(this.totals[e],(0,r.mul)(s,n))));this.totals[e]=a,null!=t&&t.dispose()}}}async onEpochEnd(e,t){if(null!=t)for(const e of this.params.metrics)null!=this.totals[e]&&("number"==typeof this.totals[e]?t[e]=this.totals[e]/this.seen:(0,r.tidy)((()=>{const n=(0,r.mul)((0,r.div)(1,this.seen),this.totals[e]);t[e]=n,this.totals[e].dispose(),(0,r.keep)(t[e])})))}}class Ha extends Wa{async onTrainBegin(e){this.epoch=[],this.history={}}async onEpochEnd(e,t){null==t&&(t={}),this.epoch.push(e);for(const e in t)null==this.history[e]&&(this.history[e]=[]),this.history[e].push(t[e])}async syncData(){const e=[],t=[],n=[];for(const s in this.history){const a=this.history[s];for(let r=0;r<a.length;++r)if("number"!=typeof a[r]){const i=a[r];e.push(i.data()),t.push(s),n.push(r)}}const s=await Promise.all(e);for(let e=0;e<s.length;++e)this.history[t[e]][n[e]].dispose(),this.history[t[e]][n[e]]=s[e][0]}}class qa extends Wa{constructor(e,t){if(super(),this.currentEpoch=0,this.nowFunc=e.nowFunc,this.nextFrameFunc=e.nextFrameFunc||r.nextFrame,this.yieldEvery=t||"auto","auto"===this.yieldEvery&&(this.yieldEvery=125),"never"===this.yieldEvery&&null!=e.onYield)throw new Error("yieldEvery is `never` but you provided an `onYield` callback. Either change `yieldEvery` or remove the callback");r.util.isNumber(this.yieldEvery)&&(this.maybeWait=function(e,t,n){let s,a=null!=n?n():r.util.now();return(...i)=>{const o=null!=n?n():r.util.now();return o-a<t||(a=o,s=e(...i)),s}}(this.maybeWait.bind(this),this.yieldEvery,this.nowFunc)),this.trainBegin=e.onTrainBegin,this.trainEnd=e.onTrainEnd,this.epochBegin=e.onEpochBegin,this.epochEnd=e.onEpochEnd,this.batchBegin=e.onBatchBegin,this.batchEnd=e.onBatchEnd,this.yield=e.onYield}async maybeWait(e,t,n){const s=[];null!=this.yield&&(await Ba(n),s.push(this.yield(e,t,n))),s.push(this.nextFrameFunc()),await Promise.all(s)}async onEpochBegin(e,t){this.currentEpoch=e,null!=this.epochBegin&&(await Ba(t),await this.epochBegin(e,t))}async onEpochEnd(e,t){const n=[];null!=this.epochEnd&&(await Ba(t),n.push(this.epochEnd(e,t))),"epoch"===this.yieldEvery&&n.push(this.nextFrameFunc()),await Promise.all(n)}async onBatchBegin(e,t){null!=this.batchBegin&&(await Ba(t),await this.batchBegin(e,t))}async onBatchEnd(e,t){const n=[];null!=this.batchEnd&&(await Ba(t),n.push(this.batchEnd(e,t))),"batch"===this.yieldEvery?n.push(this.nextFrameFunc()):r.util.isNumber(this.yieldEvery)&&n.push(this.maybeWait(this.currentEpoch,e,t)),await Promise.all(n)}async onTrainBegin(e){null!=this.trainBegin&&(await Ba(e),await this.trainBegin(e))}async onTrainEnd(e){null!=this.trainEnd&&(await Ba(e),await this.trainEnd(e))}}function Xa(e,t){return null==e&&(e={}),e instanceof Wa?[e]:Array.isArray(e)&&e[0]instanceof Wa?e:On(e).map((e=>new qa(e,t)))}class ja{constructor(){}static registerCallbackConstructor(e,t){r.util.assert(e>=0&&Number.isInteger(e),(()=>`Verbosity level is expected to be an integer >= 0, but got ${e}`)),ja.checkForDuplicate(t),null==ja.constructors[e]&&(ja.constructors[e]=[]),ja.constructors[e].push(t)}static checkForDuplicate(e){for(const t in ja.constructors)ja.constructors[+t].forEach((t=>{if(t===e)throw new Tn("Duplicate callback constructor.")}))}static clear(){ja.constructors={}}static createCallbacks(e){const t=[];for(const n in ja.constructors){const s=+n;e>=s&&t.push(...ja.constructors[s])}return t.map((e=>new e))}}function Ka(e,t,n,s,a,r,i,o,l){const u=new Ha,c=[new Ga,...ja.createCallbacks(t)];null!=e&&c.push(...e),c.push(u);const h=new Ua(c);return h.setParams({epochs:n,initialEpoch:s,samples:a,steps:r,batchSize:i,verbose:t,doValidation:o,metrics:l}),{callbackList:h,history:u}}function Ya(e,t={},n=!1){return Vn(e,r.serialization.SerializationMap.getMap().classNameMap,t,"layer",n)}function Za(e,t){return(0,r.tidy)((()=>{"float32"!==e.dtype&&(e=r.cast(e,"float32"));const n=r.sum(Rs(e),t,!0),s=r.fill(n.shape,vs()),a=r.sqrt(r.maximum(n,s));return r.div(e,a)}))}function Qa(e,t){return(0,r.tidy)((()=>r.mean(Rs(r.sub(t,e)),-1)))}function Ja(e,t){return(0,r.tidy)((()=>r.mean(r.abs(r.sub(t,e)),-1)))}function er(e,t){return(0,r.tidy)((()=>{const n=r.sub(e,t),s=r.clipByValue(r.abs(e),vs(),Number.MAX_VALUE),a=r.abs(r.div(n,s));return r.mul(100,r.mean(a,-1))}))}function tr(e,t,n=!1){return(0,r.tidy)((()=>{if(n)t=r.softmax(t);else{const e=r.sum(t,t.shape.length-1,!0);t=r.div(t,e)}return t=r.clipByValue(t,vs(),1-vs()),r.neg(r.sum(r.mul(r.cast(e,"float32"),r.log(t)),t.shape.length-1))}))}function nr(e,t,n=!1){return(0,r.tidy)((()=>{const s=r.cast(r.floor(function(e){const t=[ms(e.shape)];return r.reshape(e,t)}(e)),"int32"),a=(t=r.clipByValue(t,vs(),1-vs())).shape;return tr(r.reshape(r.oneHot(s,a[a.length-1]),a),t,n)}))}function sr(e,t){return(0,r.tidy)((()=>{let n;return n=r.clipByValue(t,vs(),1-vs()),n=r.log(r.div(n,r.sub(1,n))),r.mean(function(e,t){if(!r.util.arraysEqual(e.shape,t.shape))throw new Tn(`logits and labels must have the same shape, but got shapes ${JSON.stringify(e.shape)} and ${JSON.stringify(t.shape)}`);return(0,r.tidy)((()=>{const n=r.relu(t),s=r.neg(r.abs(t));return r.add(r.sub(n,r.mul(t,e)),r.log1p(r.exp(s)))}))}(e,n),-1)}))}function ar(e,t){return(0,r.tidy)((()=>{const n=Za(e,-1),s=Za(t,-1),a=r.mul(n,s);return r.neg(r.sum(a,-1))}))}ja.constructors={};const rr={meanSquaredError:Qa,meanAbsoluteError:Ja,meanAbsolutePercentageError:er,meanSquaredLogarithmicError:function(e,t){return(0,r.tidy)((()=>{const n=r.clipByValue(t,vs(),Number.MAX_VALUE),s=r.log(r.add(1,n)),a=r.clipByValue(e,vs(),Number.MAX_VALUE),i=r.log(r.add(1,a));return r.mean(Rs(r.sub(s,i)),-1)}))},squaredHinge:function(e,t){return(0,r.tidy)((()=>{const n=r.maximum(0,r.sub(1,r.mul(e,t)));return r.mean(Rs(n),-1)}))},hinge:function(e,t){return(0,r.tidy)((()=>{const n=r.maximum(0,r.sub(1,r.mul(e,t)));return r.mean(n,-1)}))},categoricalHinge:function(e,t){return(0,r.tidy)((()=>{const n=r.sum(r.mul(e,t),-1),s=r.max(r.mul(r.sub(1,e),t),-1);return r.maximum(0,r.add(1,r.sub(s,n)))}))},logcosh:function(e,t){return(0,r.tidy)((()=>{const n=Math.log(2),s=r.sub(t,e),a=r.sub(r.add(s,r.softplus(r.mul(-2,s))),n);return r.mean(a,-1)}))},categoricalCrossentropy:tr,sparseCategoricalCrossentropy:nr,binaryCrossentropy:sr,kullbackLeiblerDivergence:function(e,t){return(0,r.tidy)((()=>{const n=r.clipByValue(e,vs(),1),s=r.clipByValue(t,vs(),1);return r.sum(r.mul(e,r.log(r.div(n,s))),-1)}))},poisson:function(e,t){return(0,r.tidy)((()=>{const n=r.log(r.add(vs(),t));return r.mean(r.sub(t,r.mul(e,n)),-1)}))},cosineProximity:ar};function ir(e){if("string"==typeof e){if(e in rr)return rr[e];let t=`Unknown loss ${e}`;throw e.toLowerCase().includes("softmaxcrossentropy")&&(t=`Unknown loss ${e}. Use "categoricalCrossentropy" as the string name for tf.losses.softmaxCrossEntropy`),new Tn(t)}return e}function or(e,t){return(0,r.tidy)((()=>{const n=r.mul(.5,r.onesLike(t)),s=ws(r.greater(t,n),e.dtype);return r.mean(r.equal(e,s),-1)}))}function lr(e,t){return(0,r.tidy)((()=>ws(r.equal(r.argMax(e,-1),r.argMax(t,-1)),"float32")))}function ur(e,t){return sr(e,t)}function cr(e,t){return e.rank===t.rank&&(e=r.squeeze(e,[e.rank-1])),(t=r.argMax(t,-1)).dtype!==e.dtype&&(t=r.cast(t,e.dtype)),r.cast(r.equal(e,t),"float32")}const hr=tr,pr=nr,dr={binaryAccuracy:or,categoricalAccuracy:lr,precision:function(e,t){return(0,r.tidy)((()=>{const n=function(e,t){return(0,r.tidy)((()=>r.cast(r.sum(r.logicalAnd(r.equal(e,1),r.equal(t,1))),"float32")))}(e,t),s=function(e,t){return(0,r.tidy)((()=>r.cast(r.sum(r.logicalAnd(r.equal(e,0),r.equal(t,1))),"float32")))}(e,t),a=r.add(n,s);return r.cast(r.where(r.greater(a,0),r.div(n,a),0),"float32")}))},categoricalCrossentropy:hr,sparseCategoricalCrossentropy:pr,mse:Qa,MSE:Qa,mae:Ja,MAE:Ja,mape:er,MAPE:er,cosine:ar};function fr(e){if("string"==typeof e&&e in dr)return dr[e];if("string"!=typeof e&&null!=e)return e;throw new Tn(`Unknown metric ${e}`)}function mr(e){if(Rn(null!==e,`Unknown LossOrMetricFn ${e}`),"string"==typeof e)return e;{let t;for(const n of Object.keys(rr))if(rr[n]===e){t=n;break}if(void 0!==t)return t;for(const n of Object.keys(dr))if(dr[n]===e){t=n;break}return void 0!==t?t:e.name}}function gr(e,t,n=!1){if(null==e||"object"!=typeof e||Object.getPrototypeOf(e)!==Object.prototype||!yr(e))throw new Error("User-defined metadata is expected to be a JSON object, but is not.");if(n){const n=JSON.stringify(e);n.length>1048576&&console.warn(`User-defined metadata of model "${t}" is too large in size (length=${n.length} when serialized). It is not recommended to store such large objects in user-defined metadata. Please make sure its serialized length is <= 1048576.`)}}function yr(e){if(null===e)return!0;if("object"==typeof e){if(Object.getPrototypeOf(e)===Object.prototype){const t=Object.keys(e);for(const n of t){if("string"!=typeof n)return!1;if(!yr(e[n]))return!1}return!0}if(Array.isArray(e)){for(const t of e)if(!yr(t))return!1;return!0}return!1}{const t=typeof e;return"string"===t||"number"===t||"boolean"===t}}function br(e,t,n=console.log){let s="";for(let n=0;n<e.length;++n)n>0&&(s=s.slice(0,s.length-1)+" "),s+=e[n],s=s.slice(0,t[n]),s+=" ".repeat(t[n]-s.length);n(s)}function xr(e,t,n){let s,a;try{a=e.inboundNodes.map((e=>JSON.stringify(e.inputShapes))).join(",")}catch(e){a="multiple"}try{s=JSON.stringify(e.outputShape)}catch(e){s="multiple"}br([`${e.name} (${e.getClassName()})`,a,s,e.countParams().toString()],t,n)}function vr(e,t,n,s){let a,r;try{r=e.inboundNodes.map((e=>JSON.stringify(e.inputShapes))).join(",")}catch(e){r="multiple"}try{a=JSON.stringify(e.outputShape)}catch(e){a="multiple"}const i=[];for(const t of e.inboundNodes)if(!(null!=n&&n.length>0&&-1===n.indexOf(t)))for(let e=0;e<t.inboundLayers.length;++e){const n=t.inboundLayers[e].name,s=t.nodeIndices[e],a=t.tensorIndices[e];i.push(`${n}[${s}][${a}]`)}const o=e.name,l=e.getClassName(),u=0===i.length?"":i[0];br([`${o} (${l})`,r,a,e.countParams().toString(),u],t,s);for(let e=1;e<i.length;++e)br(["","","","",i[e]],t,s)}function wr(e,t,n){return("inboundNodes"===e||"outputLayers"===e||"inputLayers"===e)&&0===t&&"string"==typeof n}function kr(e,t){if(null===e)return null;if("string"==typeof e)return zn(e);if("number"==typeof e||"boolean"==typeof e)return e;if(e instanceof Array){const n=[],s=e.length;for(let a=0;a<s;++a){const s=e[a];wr(t,a,s)?n.push(s):n.push(kr(s,t))}return n}{const t={};for(const n of Object.keys(e)){const s=e[n];if("name"===n&&"string"==typeof s)t[n]=s;else{const e=zn(n);t[e]=kr(s,e)}}return t}}function Ir(e,t){if(null==e)return null;if("string"==typeof e)return Mn(e);if("number"==typeof e||"boolean"==typeof e)return e;if(e instanceof Array){const n=[],s=e.length;for(let a=0;a<s;++a){const s=e[a];wr(t,a,s)?n.push(s):n.push(Ir(s,t))}return n}{const t={};for(const n of Object.keys(e)){const s=e[n];t[Mn(n)]="name"!==n&&"className"!==n||"string"!=typeof s?Ir(s,n):s}return t}}class Sr extends ba{constructor(e){if(super({}),this.containerNodes=new Set,this.name=e.name,null==this.name){const e=this.getClassName().toLowerCase();this.name=Jn(e)}if(this.supportsMasking=!1,this.trainable_=!0,Array.isArray(e.inputs)?this.inputs=e.inputs.slice():this.inputs=[e.inputs],Array.isArray(e.outputs)?this.outputs=e.outputs.slice():this.outputs=[e.outputs],Un(this.inputs).length!==this.inputs.length)throw new Tn(`The list of inputs passed to the model is redundant. All inputs should only appear once. Found: ${this.inputs.map((e=>e.name))}`);Un(this.outputs).length!==this.outputs.length&&console.warn(`The list of outputs passed to the model is redundant. All outputs should only appear once. Found: ${this.outputs.map((e=>e.name))}`),this.inputLayers=[],this.inputLayersNodeIndices=[],this.inputLayersTensorIndices=[],this.outputLayers=[],this.outputLayersNodeIndices=[],this.outputLayersTensorIndices=[],this.layers=[],this.internalContainerRefs=[];for(const e of this.outputs){const t=e.sourceLayer,n=e.nodeIndex,s=e.tensorIndex;this.outputLayers.push(t),this.outputLayersNodeIndices.push(n),this.outputLayersTensorIndices.push(s)}for(const e of this.inputs){const t=e.sourceLayer,n=e.nodeIndex,s=e.tensorIndex;Rn(0===n,"input layer has >1 nodes"),Rn(0===s,"input layer has >1 tensors"),this.inputLayers.push(t),this.inputLayersNodeIndices.push(n),this.inputLayersTensorIndices.push(s)}this.inputNames=[],this.outputNames=[],this.feedInputShapes=[],this.feedInputNames=[],this.feedOutputNames=[];for(let t=0;t<this.inputLayers.length;t++){const n=this.inputLayers[t];if(!(n instanceof va))throw new TypeError(`Input layers to a LayersModel must be InputLayer objects. Received inputs: ${e.inputs}. Input ${t} (0-based) originates from layer type ${n.getClassName()}.`);this.inputNames.push(n.name),this.feedInputShapes.push(n.batchInputShape),this.feedInputNames.push(n.name)}for(const e of this.outputLayers)this.outputNames.push(e.name);this.internalInputShapes=this.inputs.map((e=>e.shape)),this.internalOutputShapes=this.outputs.map((e=>e.shape));const t={},n={},s={},a={},r={},i=[],o=(e,t,n,s,a,l)=>{null!=s&&null!=a&&null!=l||(s=e.sourceLayer,a=e.nodeIndex,l=e.tensorIndex);const u=s.inboundNodes[a];if(-1!==n.indexOf(u))throw new Nn(`The tensor ${e.name} at layer "${s.name}" is part of a cycle.`);if(-1!==t.indexOf(u))return;this.containerNodes.add(Sr.nodeKey(s,a)),s.id in r||(r[s.id]=Object.keys(r).length),-1===n.indexOf(u)&&n.push(u);const c=u.inboundLayers.length;for(let e=0;e<c;e++){const s=u.inputTensors[e],a=u.inboundLayers[e],r=u.nodeIndices[e],i=u.tensorIndices[e];o(s,t,n,a,r,i)}for(t.push(u);n.indexOf(u)>=0;)n.splice(n.indexOf(u),1);i.push(u)},l=[],u=[];for(const e of this.outputs)o(e,l,u);const c=i.slice().reverse();for(const e of c){n[e.id]=e,e.id in t||(t[e.id]=0);let r=t[e.id];const i=null==s[e.outboundLayer.id]?0:s[e.outboundLayer.id];r=Math.max(r,i),s[e.outboundLayer.id]=r,a[e.outboundLayer.id]=e.outboundLayer,t[e.id]=r;for(let s=0;s<e.inboundLayers.length;s++){const a=e.inboundLayers[s],i=e.nodeIndices[s],o=a.inboundNodes[i],l=null==t[o.id]?0:t[o.id];t[o.id]=Math.max(r+1,l),n[o.id]=o}}const h={};for(const e in t){const s=t[e];s in h||(h[s]=[]),h[s].push(n[e])}const p={};for(const e in s){const t=s[e];t in p||(p[t]=[]),p[t].push(a[e])}let d=Object.keys(p).map((e=>parseInt(e,10))).sort(Wn);this.layers=[];for(const e of d){const t=p[e];t.sort(((e,t)=>{const n=r[e.id],s=r[t.id];return n<s?-1:n>s?1:0}));for(const e of t)e instanceof Sr&&this.internalContainerRefs.push(e),this.layers.push(e)}this.layersByDepth=p,d=Object.keys(h).map((e=>parseInt(e,10))).sort(Wn);const f=this.inputs.slice(),m=[];for(const e of d)for(const t of h[e]){const e=t.outboundLayer;if(null!=e){for(const n of t.inputTensors)if(-1===f.indexOf(n))throw new Nn(`Graph disconnected: cannot obtain value for tensor ${n} at layer "${e.name}". The following previous layers were accessed without issue: ${m}`);for(const e of t.outputTensors)f.push(e);m.push(e.name)}}this.nodesByDepth=h;const g=this.layers.map((e=>e.name));for(const e of g){const t=g.filter((t=>t===e)).length;if(1!==t)throw new Nn(`The name "${e}" is used ${t} times in the model. All layer names should be unique. Layer names: `+JSON.stringify(g))}this.outboundNodes=[],this.inboundNodes=[],new ga({outboundLayer:this,inboundLayers:[],nodeIndices:[],tensorIndices:[],inputTensors:this.inputs,outputTensors:this.outputs,inputMasks:this.inputs.map((e=>null)),outputMasks:this.outputs.map((e=>null)),inputShapes:this.inputs.map((e=>e.shape)),outputShapes:this.outputs.map((e=>e.shape))}),this.built=!0,this._refCount=1}assertNotDisposed(){if(0===this._refCount)throw new Error(`Container '${this.name}' is already disposed.`)}dispose(){this.assertNotDisposed();const e={refCountAfterDispose:null,numDisposedVariables:0};if(0==--this._refCount){for(const t of this.layers)e.numDisposedVariables+=t.dispose().numDisposedVariables;for(const t of this.internalContainerRefs)e.numDisposedVariables+=t.dispose().numDisposedVariables}return e.refCountAfterDispose=this._refCount,e}get trainable(){return this.trainable_}set trainable(e){this.layers.forEach((t=>{t._trainableWeights.forEach((t=>t.trainable=e))})),this.trainable_=e}get trainableWeights(){if(this._trainableWeights.length>0)throw new Tn("Container instance unexpectedly contains _trainableWeights.The trainable weights of a Container are a union of the trainable weights of its consituent Layers. Its own _trainableWeights must remain an empty Array.");if(!this.trainable)return[];let e=[];for(const t of this.layers)e=e.concat(t.trainableWeights);return e}get nonTrainableWeights(){const e=[];for(const t of this.layers)e.push(...t.nonTrainableWeights);if(!this.trainable){const t=[];for(const e of this.layers)t.push(...e.trainableWeights);return t.concat(e)}return e}get weights(){return this.trainableWeights.concat(this.nonTrainableWeights)}loadWeights(e,t=!0){const n={};let s=0;for(const e of this.layers)for(const t of e.weights){if(null!=n[t.originalName])throw new Tn(`Duplicate weight name: ${t.originalName}`);n[t.originalName]=t,s++}const a=[];for(const s in e){let r=s;if(null==n[s]){const e=s.split("/");r=e.slice(0,-2).concat([e[e.length-1]]).join("/")}if(null!=n[r])a.push([n[r],e[s]]);else if(t)throw new Tn(`Provided weight data has no target variable: ${s}`);delete n[r]}if(t){const e=[];for(const t in n)e.push(t);if(e.length>0)throw new Tn(`${e.length} of ${s} weights are not set: ${e}`)}pa(a)}updatedConfig(){const e=this.getConfig(),t={};return t.className=this.getClassName(),t.config=e,t.kerasVersion="tfjs-layers 3.21.0",t.backend="TensorFlow.js",t}toJSON(e,t=!0){const n=Ir(this.updatedConfig());return t?JSON.stringify(n):n}call(e,t){return(0,r.tidy)((()=>{e=On(e);const n=new ka;for(let t=0;t<this.inputs.length;++t)n.add(this.inputs[t],e[t]);return Na(this.outputs,n,t)}))}computeMask(e,t){return(0,r.tidy)((()=>{let n;return e=On(e),n=null==t?An(null,e.length):On(t),this.runInternalGraph(e,n)[1]}))}computeOutputShape(e){const t=ia(e);if(t.length!==this.inputLayers.length)throw new Tn(`Invalid inputShape argument ${e}: model has ${this.inputLayers.length} tensor inputs.`);const n={};for(let e=0;e<t.length;e++){const s=this.inputLayers[e],a=t[e];n[s.name+"_0_0"]=a}const s=Object.keys(this.nodesByDepth).map((e=>parseInt(e,10))).sort(Wn);if(s.length>1)for(const e of s){const t=this.nodesByDepth[e];for(const e of t){const t=e.outboundLayer;if(-1!==this.inputLayers.map((e=>e.id)).indexOf(t.id))continue;const s=[];for(let t=0;t<e.inboundLayers.length;t++){const a=e.inboundLayers[t],r=e.nodeIndices[t],i=e.tensorIndices[t],o=n[`${a.name}_${r}_${i}`];s.push(o)}const a=ia(t.computeOutputShape(Dn(s))),r=t.inboundNodes.indexOf(e);for(let e=0;e<a.length;e++)n[`${t.name}_${r}_${e}`]=a[e]}}const a=[],r=[];for(let e=0;e<this.outputLayers.length;e++){const t=this.outputLayers[e],n=this.outputLayersNodeIndices[e],s=this.outputLayersTensorIndices[e],a=`${t.name}_${n}_${s}`;r.push(a)}for(let e=0;e<r.length;e++){const t=r[e];Rn(t in n),a.push(n[t])}return Dn(a)}runInternalGraph(e,t){null==t&&(t=An(null,e.length));const n={};for(let s=0;s<this.inputs.length;++s){const a=this.inputs[s],r=e[s],i=t[s];n[a.id]=[r,i]}const s=Object.keys(this.nodesByDepth).map((e=>parseInt(e,10))).sort(Wn);for(const e of s){const t=this.nodesByDepth[e];for(const e of t){const t=e.outboundLayer,s=e.inputTensors,a=e.outputTensors,r=new Array;for(const e of s)e.id in n&&r.push(n[e.id]);if(r.length===s.length){let s,i,o,l,u={};if(null!=e.callArgs&&(u=e.callArgs),1===r.length){const[e,n]=r[0];null==u.mask&&(u.mask=n),o=On(t.call(e,u)),l=On(t.computeMask(e,n)),s=[e],i=[n]}else s=r.map((e=>e[0])),i=r.map((e=>e[1])),null==u.mask&&(u.mask=i),o=On(t.call(s,u)),l=On(t.computeMask(s,i));if(t.activityRegularizer)throw new Cn("LayersModel invocation with concrete Tensor value(s) in the presence of activity regularizer(s) is not supported yet.");for(let e=0;e<a.length;++e){const t=a[e],s=o[e],r=l[e];n[t.id]=[s,r]}}}}const a=[],r=[],i=[];for(const e of this.outputs){Rn(e.id in n,`Could not compute output ${e.name} : ${e.id}`);const[t,s]=n[e.id];i.push(t.shape),a.push(t),r.push(s)}return[a,r,i]}buildNodeConversionMap(e){const t={};let n;for(const e of this.layers){n=e instanceof Sr?1:0;for(let s=0;s<e.inboundNodes.length;s++){const a=Sr.nodeKey(e,s);this.containerNodes.has(a)&&(t[a]=n,n+=1)}}return t}getLayer(e,t){if(null!=t){if(this.layers.length<=t)throw new Tn(`Was asked to retrieve layer at index ${t}, but model only has ${this.layers.length} layer(s).`);return this.layers[t]}if(null==e)throw new Tn("Provide either a layer name or layer index");for(const t of this.layers)if(t.name===e)return t;throw new Tn(`No such layer: ${e}`)}calculateLosses(){return(0,r.tidy)((()=>{const e=[];for(const t of this.layers)for(let n=0;n<t.inboundNodes.length;++n){const s=Sr.nodeKey(t,n);this.containerNodes.has(s)&&e.push(...t.calculateLosses())}return e}))}getConfig(){const e={name:this.name},t=this.buildNodeConversionMap(this.layers),n=[];for(const e of this.layers){const s=e.getClassName(),a=e.getConfig(),r=[];for(let n=0;n<e.inboundNodes.length;n++){const s=e.inboundNodes[n],a=Sr.nodeKey(e,n);let i={};if(this.containerNodes.has(a)){if(s.callArgs)try{JSON.stringify(s.callArgs),i=s.callArgs}catch(t){console.warn(`Layer ${e.name} was passed non-serializable keyword arguments: ${s.callArgs}. They will not be included in the serialized model (and thus will be missing at deserialization time).`),i={}}if(s.inboundLayers.length>0){const e=[];for(let n=0;n<s.inboundLayers.length;n++){const a=s.inboundLayers[n],r=s.nodeIndices[n],o=s.tensorIndices[n];let l=t[Sr.nodeKey(a,r)];null==l&&(l=0),e.push([a.name,l,o,i])}r.push(e)}}}const i={};i.name=e.name,i.className=s,i.config=a,i.inboundNodes=r,n.push(i)}e.layers=n;const s=[];for(let e=0;e<this.inputLayers.length;e++){const n=this.inputLayers[e],a=this.inputLayersNodeIndices[e],r=Sr.nodeKey(n,a);if(!this.containerNodes.has(r))continue;let i=t[r];null==i&&(i=0);const o=this.inputLayersTensorIndices[e];s.push([n.name,i,o])}e.inputLayers=s;const a=[];for(let e=0;e<this.outputLayers.length;e++){const n=this.outputLayers[e],s=this.outputLayersNodeIndices[e],r=Sr.nodeKey(n,s);if(!this.containerNodes.has(r))continue;let i=t[r];null==i&&(i=0);const o=this.outputLayersTensorIndices[e];a.push([n.name,i,o])}return e.outputLayers=a,e}static fromConfig(e,t,n={},s=!1){const a={},r={};function i(e,t){e.name in r?r[e.name].push(t):r[e.name]=[t]}function o(e,t){const n=[];let s;for(const r of t){const o=r[0],l=r[1],u=r[2];if(s=null==r[3]?{}:r[3],!(o in a))return void i(e,t);const c=a[o];if(c.inboundNodes.length<=l)return void i(e,t);const h=c.inboundNodes[l];n.push(h.outputTensors[u])}n.length>0&&e.apply(Dn(n),s)}function l(e){const n=e.name,r=Ya(e,null!=t.customObjects?t.customObjects:{});r.setFastWeightInitDuringBuild(s),a[n]=r,e.inboundNodes.forEach((e=>{if(!(e instanceof Array))throw new Tn(`Corrupted configuration, expected array for nodeData: ${e}`);i(r,e)}))}const u=t.name,c=t.layers;for(const e of c)l(e);for(;!Gn(r);)for(const e of c){const t=a[e.name];if(t.name in r){const e=r[t.name];delete r[t.name];for(const n of e)o(t,n)}}const h=[],p=[],d=t.inputLayers;for(const e of d){const t=e[0],n=e[1],s=e[2];Rn(t in a);const r=a[t].inboundNodes[n].outputTensors;h.push(r[s])}const f=t.outputLayers;for(const e of f){const t=e[0],n=e[1],s=e[2];Rn(t in a);const r=a[t].inboundNodes[n].outputTensors;p.push(r[s])}return new e({inputs:h,outputs:p,name:u})}get stateful(){if(this._stateful)throw new Tn("Container instance unexpectedly has _stateful = true. The statefulness of a Container is determined by the Layers it contains. Its _stateful property must remain the default false.");for(const e of this.layers)if(e.stateful)return!0;return!1}resetStates(){(0,r.tidy)((()=>{this.layers.forEach((e=>{e.stateful&&e.resetStates()}))}))}}function Nr(e,t){return function(e,t,n){const s=t.length;if(null==e||Array.isArray(e)&&0===e.length)return t.map((e=>null));if(1===s)return Array.isArray(e)&&1===e.length?e:"object"==typeof e&&t[0]in e?[e[t[0]]]:[e];if(Array.isArray(e)){if(e.length!==s)throw new Error(`Provided ${n} is an array of ${e.length} element(s), but the model has ${s} outputs. Make sure a set of weights is provided for each model output.`);return e}if("object"==typeof e&&Object.keys(e).length>0&&"object"==typeof e[Object.keys(e)[0]]){const n=[];return t.forEach((t=>{t in e?n.push(e[t]):n.push(null)})),n}throw new Error(`The model has multiple (${s}) outputs, so ${n} must be either an array with ${s} elements or an object with ${t} keys. Provided ${n} not understood: ${JSON.stringify(e)}`)}(e,t,"classWeight")}async function Tr(e,t,n,s){if(null!=t||null!=s)throw new Error("Support sampleWeight is not implemented yet");if(null!=n){const t=(0,r.tidy)((()=>{if(1===e.shape.length)return(0,r.clone)(e);if(2===e.shape.length){if(e.shape[1]>1){const t=1;return(0,r.argMax)(e,t)}if(1===e.shape[1])return(0,r.reshape)(e,[e.shape[0]]);throw new Error(`Encountered unexpected last-dimension size (${e.shape[1]}) during handling of class weights. The size is expected to be >= 1.`)}throw new Error(`Unexpected rank of target (y) tensor (${e.rank}) during handling of class weights. The rank is expected to be 1 or 2.`)})),s=Array.from(await t.data());(0,r.dispose)(t);const a=[];return s.forEach((e=>{if(null==n[e])throw new Error(`classWeight must contain all classes in the training data. The class ${e} exists in the data but not in classWeight`);a.push(n[e])})),(0,r.tensor1d)(a,"float32")}return null}function Cr(e,t){return(0,r.mul)(e,t)}function $r(e,t){let n,s;const a=t;n=a.xs,s=a.ys,r.util.assert(null!=n&&null!=s,(()=>`A Dataset iterator for fitDataset() is expected to generate objects of the form \`{xs: xVal, ys: yVal}\`, where the two values may be \`tf.Tensor\`, an array of Tensors, or a map of string to Tensor.  The provided Dataset instead generates ${t}`));const i=Er("input",e.inputNames,n),o=Er("output",e.outputNames,s),l=i[0].shape[0];r.util.assert(i.length===e.inputs.length,(()=>`LayersModel has ${e.inputs.length} inputs, but the dataset provides ${i.length} inputs.  (Expected input keys: ${JSON.stringify(e.inputNames)})`)),r.util.assert(o.length===e.outputs.length,(()=>`LayersModel has ${e.outputs.length} outputs, but the dataset provides ${o.length} outputs.  (Expected output keys: ${JSON.stringify(e.outputNames)})`));for(let t=0;t<i.length;t++)r.util.assert(i[t].shape[0]===l,(()=>`Batch size mismatch: input ${e.inputNames[t]} has ${i[t].shape[0]}; expected  ${l} based on input ${e.inputNames[0]}.`));for(let t=0;t<o.length;t++)r.util.assert(o[t].shape[0]===l,(()=>`Batch size mismatch: output ${e.outputNames[t]} has ${o[t].shape[0]}; expected  ${l} based on input ${e.inputNames[0]}.`));return{xs:i,ys:o}}function Er(e,t,n){if(n instanceof r.Tensor)return[n];if(Array.isArray(n))return r.util.assert(n.length===t.length,(()=>`Received an array of ${n.length} Tensors, but expected ${t.length} to match the ${e} keys ${t}.`)),n;{const s=[];for(const a of t){if(null==n[a])throw new Tn(`The feature data generated by the dataset lacks the required ${e} key '${a}'.`);s.push(n[a])}return s}}function _r(e){return"function"==typeof e.iterator}function Ar(e){r.util.assert(e>0&&Number.isInteger(e),(()=>`batchSize is required to be a positive integer, but got ${e}`))}function Rr(e,t,n){return null==e?[null]:Array.isArray(e)?e.map((e=>Is(e,t,n-t))):Is(e,t,n-t)}function Fr(e,t){return r.tidy((()=>null==e?null:Array.isArray(e)?e.map((e=>Fr(e,t))):As(e,"int32"===t.dtype?t:r.cast(t,"int32"))))}function Dr(e,t){const n=[];let s=0,a=null;for(;s<e;)a=s+t,a>=e&&(a=e),n.push([s,a]),s=a;return n}function Or(e){const t=[];e instanceof r.Tensor&&(e=[e]);for(let n=0;n<e.length;++n){const s=e[n];if(1===s.rank)t.push(ks(s,1));else{if(0===s.rank)throw new Error("Expected tensor to be at least 1D, but received a 0D tensor (scalar).");t.push(s)}}return t}function Mr(e,t){if(null==e)return;const n=[];if(t instanceof r.Tensor)n.push(t.id);else if(Array.isArray(t))t.forEach((e=>n.push(e.id)));else if(null!=t)for(const e in t){const s=t[e];n.push(s.id)}const s=[];if(e instanceof r.Tensor)-1===n.indexOf(e.id)&&s.push(e);else if(Array.isArray(e))e.forEach((e=>{-1===n.indexOf(e.id)&&s.push(e)}));else if(null!=e)for(const t in e){const a=e[t];-1===n.indexOf(a.id)&&s.push(a)}s.forEach((e=>{e.isDisposed||e.dispose()}))}function zr(e){return Array.isArray(e)}function Lr(e){return!function(e){return e instanceof r.Tensor}(e)&&!zr(e)}function Br(e,t,n,s=!0,a=""){if(null==t||0===t.length){if(null!=e){let t=!1;if(zr(e)&&e.length>0)t=!0;else if(Lr(e)){for(const n in e)if(e.hasOwnProperty(n)){t=!0;break}}else t=!0;if(t)throw new Tn(`Error when checking model ${a} expected no data, but got ${e}`)}return[]}if(null==e)return t.map((e=>null));let r;if(Lr(e)){r=[];for(const n of t){if(null==e[n])throw new Tn(`No data provided for "${n}". Need data for each key in: ${t}`);r.push(e[n])}}else if(zr(e)){if(e.length!==t.length)throw new Tn(`Error when checking model ${a}: the Array of Tensors that you are passing to your model is not the size the model expected. Expected to see ${t.length} Tensor(s), but instead got the following list of Tensor(s): ${e}`);r=e}else{if(t.length>1)throw new Tn(`The model ${a} expects ${t.length} Tensor(s), but only received one Tensor. Found: Tensor with shape ${e.shape}`);r=[e]}if(r=Or(r),null!=n)for(let e=0;e<t.length;++e){if(null==n[e])continue;const i=r[e];if(i.shape.length!==n[e].length)throw new Tn(`Error when checking ${a}: expected ${t[e]} to have ${n[e].length} dimension(s). but got array with shape ${i.shape}`);for(let t=0;t<n[e].length;++t){if(0===t&&!s)continue;const r=i.shape[t],o=n[e][t];if(null!=o&&o>=0&&r!==o)throw new Tn(`${a} expected a batch of elements where each example has shape [${n[e].slice(1,n[e].length)}] (i.e.,tensor shape [*,${n[e].slice(1,n[e].length)}]) but the ${a} received an input with ${i.shape[0]} examples, each with shape [${i.shape.slice(1,i.shape.length)}] (tensor shape [${i.shape}])`)}}return r}function Pr(e,t,n,s=!0,a=""){let r;if(Array.isArray(e)){if(e.length!==t.length)throw new Tn(`Error when checking model ${a}: the Array of Tensors that you are passing to your model is not the size the the model expected. Expected to see ${t.length} Tensor(s), but instead got ${e.length} Tensors(s).`);r=e}else{if(t.length>1)throw new Tn(`The model expects ${t.length} ${a} Tensors, but only received one Tensor. Found: array with shape ${JSON.stringify(e.shape)}.`);r=[e]}if(null!=n)for(let e=0;e<t.length;++e){if(null==n[e])continue;const i=r[e];if(i.shape.length!==n[e].length)throw new Tn(`Error when checking ${a}: expected ${t[e]} to have ${n[e].length} dimension(s), but got array with shape ${JSON.stringify(i.shape)}`);for(let r=0;r<n[e].length;++r){if(0===r&&!s)continue;const o=i.shape[r],l=n[e][r];if(null!=l&&l!==o)throw new Tn(`Error when checking ${a}: expected ${t[e]} to have shape ${JSON.stringify(n[e])} but got array with shape ${JSON.stringify(i.shape)}.`)}}}class Vr extends Sr{constructor(e){super(e),this.isTraining=!1}summary(e,t,n=console.log){if(!this.built)throw new Tn("This model has never been called, thus its weights have not been created yet. So no summary can be displayed. Build the model first (e.g., by calling it on some test data).");!function(e,t,n,s=console.log){const a=function(e){let t=!0;const n=[],s=[];for(const t in e.nodesByDepth)n.push(e.nodesByDepth[t]);for(const e of n){if(e.length>1||1===e.length&&e[0].inboundLayers.length>1){t=!1;break}s.push(...e)}if(t)for(const n of e.layers){let e=!1;for(const a of n.inboundNodes)if(-1!==s.indexOf(a)){if(e){t=!1;break}e=!0}if(!t)break}return t}(e),r=["Layer (type)","Input Shape","Output shape","Param #"];let i;if(a?(t=t||90,n=n||[.32,.61,.89,1]):(t=t||115,n=n||[.24,.48,.7,.8,1]),n[n.length-1]<=1&&(n=n.map((e=>Math.floor(t*e)))),!a){r.push("Receives inputs"),i=[];for(const t in e.nodesByDepth)i.push(...e.nodesByDepth[t])}s("_".repeat(t)),br(r,n,s),s("=".repeat(t));const o=e.layers;for(let e=0;e<o.length;++e)a?xr(o[e],n,s):vr(o[e],n,i,s),s((e===o.length-1?"=":"_").repeat(t));e.checkTrainableWeightsConsistency();const l=function(e){let t;return t=null!=e.collectedTrainableWeights?ua(e.collectedTrainableWeights):ua(e.trainableWeights),t}(e),u=ua(e.nonTrainableWeights);s(`Total params: ${l+u}`),s(`Trainable params: ${l}`),s(`Non-trainable params: ${u}`),s("_".repeat(t))}(this,e,t,n)}compile(e){if(null==e.loss&&(e.loss=[]),this.loss=e.loss,"string"==typeof e.optimizer)this.optimizer_=function(e){const t={Adagrad:()=>r.train.adagrad(.01),Adadelta:()=>r.train.adadelta(1,.95,vs()),Adam:()=>r.train.adam(.001,.9,.999,vs()),Adamax:()=>r.train.adamax(.002,.9,.999,vs(),0),RMSProp:()=>r.train.rmsprop(.001,.9,0,vs()),SGD:()=>r.train.sgd(.01)};if(t.adagrad=t.Adagrad,t.adadelta=t.Adadelta,t.adam=t.Adam,t.adamax=t.Adamax,t.rmsprop=t.RMSProp,t.sgd=t.SGD,e in t)return t[e]();throw new Tn(`Unknown Optimizer ${e}`)}(e.optimizer),this.isOptimizerOwned=!0;else{if(!(e.optimizer instanceof r.Optimizer))throw new Tn("User-defined optimizer must be an instance of tf.Optimizer.");this.optimizer_=e.optimizer,this.isOptimizerOwned=!1}let t=[];if(Array.isArray(e.loss)||"string"==typeof e.loss||"function"==typeof e.loss)if(Array.isArray(e.loss)){if(e.loss.length!==this.outputs.length)throw new Tn(`When passing an Array as loss, it should have one entry per model output. The model has ${this.outputs.length} output(s), but you passed loss=${e.loss}.`);const n=e.loss;t=n.map((e=>ir(e)))}else{const n=ir(e.loss);this.outputs.forEach((e=>{t.push(n)}))}else{e.loss=e.loss;for(const t in e.loss)if(-1===this.outputNames.indexOf(t))throw new Tn(`Unknown entry in loss dictionary: "${t}". Only expected the following keys: ${this.outputNames}`);for(const n of this.outputNames)null==e.loss[n]&&console.warn(`Output "${n}" is missing from loss dictionary. We assume this was done on purpose, and we will not be expecting data to be passed to ${n} during training`),t.push(ir(e.loss[n]))}this.lossFunctions=t,this.feedOutputNames=[],this.feedOutputShapes=[],this.feedLossFns=[];for(let e=0;e<this.outputs.length;++e){const t=this.internalOutputShapes[e],n=this.outputNames[e];this.feedOutputNames.push(n),this.feedOutputShapes.push(t),this.feedLossFns.push(this.lossFunctions[e])}const n=[];this.metrics=e.metrics,this.metricsNames=["loss"],this.metricsTensors=[],cs("loss",(()=>{for(let e=0;e<this.outputs.length;++e){if(-1!==n.indexOf(e))continue;const t=this.lossFunctions[e];this.outputs.length>1&&(this.metricsTensors.push([t,e]),this.metricsNames.push(this.outputNames[e]+"_loss"))}}));const s=function(e,t){if(null==e||Array.isArray(e)&&0===e.length)return t.map((e=>[]));let n;if("string"==typeof e||"function"==typeof e)n=[e];else{if(!Array.isArray(e)&&"object"!=typeof e)throw new TypeError(`Type of metrics argument not understood. Expected an string,function, Array, or Object, found: ${e}`);n=e}if(Array.isArray(n))return t.map((e=>n));{const e=[];for(const s of t){let t=n.hasOwnProperty(s)?n[s]:[];Array.isArray(t)||(t=[t]),e.push(t)}return e}}(e.metrics,this.outputNames),a=(e,t,n)=>{this.outputNames.length>1&&(t=this.outputNames[e]+"_"+t),this.metricsNames.push(t),this.metricsTensors.push([n,e])};cs("metric",(()=>{for(let e=0;e<this.outputs.length;++e)-1===n.indexOf(e)&&(t=>{let n,s,r;for(const i of t){if("string"==typeof i&&-1!==["accuracy","acc","crossentropy","ce"].indexOf(i)){const t=this.internalOutputShapes[e];let a;1===t[t.length-1]||this.lossFunctions[e]===sr?-1!==["accuracy","acc"].indexOf(i)?s=or:-1!==["crossentropy","ce"].indexOf(i)&&(s=ur):this.lossFunctions[e]===nr?-1!==["accuracy","acc"].indexOf(i)?s=cr:-1!==["crossentropy","ce"].indexOf(i)&&(s=pr):-1!==["accuracy","acc"].indexOf(i)?s=lr:-1!==["crossentropy","ce"].indexOf(i)&&(s=hr),-1!==["accuracy","acc"].indexOf(i)?a="acc":-1!==["crossentropy","ce"].indexOf(i)&&(a="ce"),r=s,n=""+a}else{const e=fr(i);r=e,n=""+mr(i)}let t;cs(n,(()=>{t=r})),a(e,n,t)}})(s[e])})),this.collectedTrainableWeights=this.trainableWeights}checkTrainableWeightsConsistency(){null!=this.collectedTrainableWeights&&this.trainableWeights.length!==this.collectedTrainableWeights.length&&console.warn("Discrepancy between trainableweights and collected trainable weights. Did you set `model.trainable` without calling `model.compile()` afterwards?")}evaluate(e,t,n={}){const s=null==n.batchSize?32:n.batchSize;Ar(s);const a=this.standardizeUserDataXY(e,t,!0,s);try{const r=a[0].concat(a[1]);this.makeTestFunction();const i=this.testFunction;return Dn(this.testLoop(i,r,s,n.verbose,n.steps))}finally{Mr(a[0],e),Mr(a[1],t)}}async evaluateDataset(e,t){return this.makeTestFunction(),async function(e,t,n){const s=null!=(n=n||{}).batches,a=e.testFunction;let i=[];if(n.verbose>0)throw new Cn("Verbose mode is not implemented yet.");r.util.assert(!s||n.batches>0&&Number.isInteger(n.batches),(()=>`Test loop expects \`batches\` to be a positive integer, but received ${JSON.stringify(n.batches)}`));const o="function"==typeof t.next?t:await t.iterator();let l=0,u=0;for(;!s||u<n.batches;){const t=await o.next();if(i=r.tidy((()=>{if(t.value){const{xs:n,ys:s}=$r(e,t.value),o=n.concat(s),c=r.tidy((()=>a(o)));if(r.dispose(o),0===u)for(let e=0;e<c.length;++e)i.push((0,r.scalar)(0));const h=o[0].shape[0];for(let e=0;e<c.length;++e){const t=c[e],n=i[e];i[e]=r.tidy((()=>r.add(i[e],r.mul(h,t)))),u>0&&r.dispose(n)}r.dispose(c),l+=h,++u}return i})),t.done){s&&console.warn(`Your dataset iterator ran out of data during evaluateDataset(). Interrupting evalution. Make sure that your dataset can generate at least \`batches\` batches (in this case, ${n.batches} batches). You may need to use the repeat() function when building your dataset.`);break}}for(let e=0;e<i.length;++e){const t=i[e];i[e]=r.div(i[e],l),r.dispose(t)}return Dn(i)}(this,e,t)}checkNumSamples(e,t,n,s="steps"){let a;if(null!=n){if(a=null,null!=t)throw new Tn(`If ${s} is set, batchSize must be null or undefined.Got batchSize = ${t}`)}else{if(null==e)throw new Tn(`Either the input data should have a defined shape, or ${s} shoud be specified.`);a=Array.isArray(e)?e[0].shape[0]:e.shape[0]}return a}execute(e,t){if(Array.isArray(t)&&0===t.length)throw new Tn("`outputs` is an empty Array, which is not allowed.");const n=Array.isArray(t),s=n?t:[t],a=this.retrieveSymbolicTensors(s),i=new ka;if(e instanceof r.Tensor&&(e=[e]),Array.isArray(e)){if(e.length!==this.inputs.length)throw new Tn(`The number of inputs provided (${e.length}) does not match the number of inputs of this model (${this.inputs.length}).`);for(let t=0;t<this.inputs.length;++t)i.add(this.inputs[t],e[t])}else for(const t of this.inputs){const n=e[t.name];if(null==n)throw new Tn(`No value is provided for the model's input ${t.name}`);i.add(t,n)}const o=Na(a,i);return n?o:o[0]}retrieveSymbolicTensors(e){const t=An(null,e.length);let n=e.length;for(const s of this.layers){const a=Array.isArray(s.output)?s.output:[s.output],r=a.map((e=>e.name));for(let s=0;s<e.length;++s){const i=r.indexOf(e[s]);if(-1!==i&&(t[s]=a[i],n--),0===n)break}if(0===n)break}if(n>0){const n=[];throw t.forEach(((t,s)=>{null==t&&n.push(e[s])})),new Tn(`Cannot find SymbolicTensors for output name(s): ${JSON.stringify(n)}`)}return t}predictLoop(e,t=32,n=!1){return r.tidy((()=>{const s=this.checkNumSamples(e);if(n)throw new Cn("Verbose predictLoop() is not implemented yet.");const a=Dr(s,t),i=this.outputs.map((e=>[]));for(let t=0;t<a.length;++t)r.tidy((()=>{const n=a[t][0],s=a[t][1],r=Rr(e,n,s),i=[];if(Array.isArray(r))for(let e=0;e<r.length;++e)i.push({key:this.inputs[e],value:r[e]});else i.push({key:this.inputs[0],value:r});const o=new ka(i);return Na(this.outputs,o)})).forEach(((e,t)=>i[t].push(e)));return Dn(i.map((e=>r.concat(e,0))))}))}predict(e,t={}){const n=Or(e);Pr(n,this.inputNames,this.feedInputShapes,!1);try{const s=null==t.batchSize?32:t.batchSize;return Ar(s),this.predictLoop(n,s)}finally{Mr(n,e)}}predictOnBatch(e){Pr(e,this.inputNames,this.feedInputShapes,!0);const t=(Array.isArray(e)?e[0]:e).shape[0];return this.predictLoop(e,t)}standardizeUserDataXY(e,t,n=!0,s){if(null==this.optimizer_)throw new Nn("You must compile a model before training/testing. Use LayersModel.compile(modelCompileArgs).");const a=[];for(let e=0;e<this.feedOutputShapes.length;++e){const t=this.feedOutputShapes[e];this.feedLossFns[e]===nr?a.push(t.slice(0,t.length-1).concat([1])):a.push(t)}if(function(e,t,n){const s=Un(e.map((e=>e.shape[0])));s.sort();const a=Un(t.map((e=>e.shape[0])));if(a.sort(),s.length>1)throw new Tn(`All input Tensors (x) should have the same number of samples. Got array shapes: ${JSON.stringify(e.map((e=>e.shape)))}`);if(a.length>1)throw new Tn(`All target Tensors (y) should have the same number of samples. Got array shapes: ${JSON.stringify(t.map((e=>e.shape)))}`);if(s.length>0&&a.length>0&&!r.util.arraysEqual(s,a))throw new Tn(`Input Tensors should have the same number of samples as target Tensors. Found ${s[0]} input sample(s) and ${a[0]} target sample(s).`)}(e=Br(e,this.feedInputNames,this.feedInputShapes,!1,"input"),t=Br(t,this.feedOutputNames,a,!1,"target")),function(e,t,n){const s=[Qa,sr,tr];for(let a=0;a<e.length;++a){const r=e[a],i=t[a],o=n[a];if(null!=i){if(i===tr&&1===r.shape[r.shape.length-1])throw new Tn(`You are passing a target array of shape ${r.shape} while using a loss 'categorical_crossentropy'. 'categorical_crossentropy'expects targets to be binary matrices (1s and 0s) of shape [samples, classes].`);if(-1!==s.indexOf(i)){const e=r.shape.slice(1),t=o.slice(1);for(let n=0;n<e.length;++n){const s=e[n],a=t[n];if(null!=a&&s!==a)throw new Tn(`A target Tensor with shape ${r.shape} was passed for an output of shape ${o}, while using a loss function that expects targets to have the same shape as the output.`)}}}}}(t,this.feedLossFns,this.feedOutputShapes),this.stateful&&null!=s&&s>0&&e[0].shape[0]%s!=0)throw new Tn(`In a stateful network, you should only pass inputs with a number of samples that is divisible by the batch size ${s}. Found: ${e[0].shape[0]} sample(s).`);return[e,t]}async standardizeUserData(e,t,n,s,a=!0,r){const[i,o]=this.standardizeUserDataXY(e,t,a,r);if(null!=n)throw new Error("sample weight is not supported yet.");let l=null;if(null!=s){const e=Nr(s,this.outputNames);l=[];for(let t=0;t<e.length;++t)l.push(await Tr(o[t],null,e[t]))}return[i,o,l]}testLoop(e,t,n,s=0,a){return r.tidy((()=>{const i=this.checkNumSamples(t,n,a,"steps"),o=[];if(s>0)throw new Cn("Verbose mode is not implemented yet.");if(null!=a)throw new Cn("steps mode in testLoop() is not implemented yet");{const s=Dr(i,n),a=(0,r.tensor1d)(bs(0,i));for(let n=0;n<s.length;++n){const i=s[n][0],l=s[n][1],u=Is(a,i,l-i),c=Fr(t,u),h=e(c);if(0===n)for(let e=0;e<h.length;++e)o.push((0,r.scalar)(0));for(let e=0;e<h.length;++e){const t=h[e];o[e]=r.add(o[e],r.mul(l-i,t))}}for(let e=0;e<o.length;++e)o[e]=r.div(o[e],i)}return o}))}getDedupedMetricsNames(){const e=this.metricsNames,t=[];for(let n=0;n<e.length;++n){const s=e[n];let a=s;Fn(e,s)>1&&(a+=`_${Fn(e.slice(0,n),s)}`),t.push(a)}return t}makeTrainFunction(){return e=>{const t=[],n=e.slice(0,this.inputs.length),s=e.slice(this.inputs.length,this.inputs.length+this.outputs.length),a=e.slice(this.inputs.length+this.outputs.length,this.inputs.length+2*this.outputs.length),i=[],o=this.collectedTrainableWeights.map((e=>e.read()));return[this.optimizer_.minimize((()=>{const e=[];for(let t=0;t<this.inputs.length;++t)e.push({key:this.inputs[t],value:n[t]});const o=new ka(e),l=Na(this.outputs,o,{training:!0});let u;for(let e=0;e<this.lossFunctions.length;++e){let n=(0,this.lossFunctions[e])(s[e],l[e]);null!=a[e]&&(n=Cr(n,a[e]));const i=r.mean(n);t.push(i),u=0===e?n:r.add(u,n)}for(let e=0;e<this.metricsTensors.length;++e){let n;if(this.outputs.length>1&&e<this.outputs.length)n=t[e];else{const t=this.metricsTensors[e][0],a=this.metricsTensors[e][1];n=r.mean(t(s[a],l[a]))}r.keep(n),i.push(n)}return u=r.mean(u),this.calculateLosses().forEach((e=>{u=r.add(u,e)})),u}),!0,o)].concat(i)}}makeTestFunction(){this.testFunction=e=>r.tidy((()=>{const t=[];let n;const s=e.slice(0,this.inputs.length),a=e.slice(this.inputs.length,this.inputs.length+this.outputs.length),i=[];for(let e=0;e<this.inputs.length;++e)i.push({key:this.inputs[e],value:s[e]});const o=new ka(i),l=Na(this.outputs,o);for(let e=0;e<this.lossFunctions.length;++e){const s=this.lossFunctions[e],i=r.mean(s(a[e],l[e]));n=0===e?i:r.add(n,i),t.push(n)}for(let e=0;e<this.metricsTensors.length;++e){const n=this.metricsTensors[e][0],s=this.metricsTensors[e][1],i=r.mean(n(a[s],l[s]));t.push(i)}return t}))}async fit(e,t,n={}){return async function(e,t,n,s={}){if(e.isTraining)throw new Error("Cannot start training because another fit() call is ongoing.");let a,i,o,l,u,c,h,p,d;e.isTraining=!0;try{const f=null==s.batchSize?32:s.batchSize;Ar(f);const m=!1,g=await e.standardizeUserData(t,n,s.sampleWeight,s.classWeight,m,f);a=g[0],i=g[1],d=g[2];let y,b=!1;if(null!=s.validationData&&s.validationData.length>0){if(b=!0,2!==s.validationData.length)throw 3===s.validationData.length?new Cn("validationData including sample weights is not supported yet."):new Tn(`When passing validation data, it must contain 2 (valX, valY) or 3 (valX, valY, valSampleWeight) items; ${s.validationData} is invalid.`);u=s.validationData[0],c=s.validationData[1];const t=!0,n=await e.standardizeUserData(u,c,null,null,t,f);h=n[0],p=n[1],y=h.concat(p)}else if(null!=s.validationSplit&&s.validationSplit>0&&s.validationSplit<1){b=!0;const e=Math.floor(a[0].shape[0]*(1-s.validationSplit)),t=a[0].shape[0];h=Rr(a,e,t),o=a,a=Rr(a,0,e),p=Rr(i,e,t),l=i,i=Rr(i,0,e),y=h.concat(p)}else null!=s.validationSteps&&(b=!0);const x=a.concat(i).concat(d);e.checkTrainableWeightsConsistency();const v=e.makeTrainFunction(),w=e.getDedupedMetricsNames();let k,I;b?(e.makeTestFunction(),k=e.testFunction,I=w.slice().concat(w.map((e=>"val_"+e)))):(k=null,y=[],I=w.slice());const S=Xa(s.callbacks,s.yieldEvery),N=await async function(e,t,n,s,a,i,o,l,u,c,h,p,d,f,m){null==a&&(a=32),null==i&&(i=1),null==h&&(h=!0),null==d&&(d=0);let g=!1;null!=u&&null!=c&&(g=!0);const y=e.checkNumSamples(n,a,f,"steps_per_epoch");let b;null!=y&&(b=bs(0,y)),null==o&&(o=1);const{callbackList:x,history:v}=Ka(l,o,i,d,y,f,a,g,p);x.setModel(e),e.history=v,await x.onTrainBegin(),e.stopTraining_=!1;for(let o=d;o<i;++o){await x.onEpochBegin(o);const i={};{if("batch"===h)throw new Cn("batch shuffling is not implemneted yet");h&&r.util.shuffle(b);const o=(0,r.tensor1d)(b),l=Dr(y,a);for(let h=0;h<l.length;++h){const p={};if(await x.onBatchBegin(h,p),r.tidy((()=>{const d=l[h][0],f=l[h][1],m=Is(o,d,f-d);p.batch=h,p.size=f-d;const y=Fr(n,m),b=t(y);for(let e=0;e<s.length;++e){const t=s[e],n=b[e];p[t]=n,r.keep(n)}if(h===l.length-1&&g){const t=e.testLoop(u,c,a);for(let e=0;e<s.length;++e){const n=s[e],a=t[e];r.keep(a),i["val_"+n]=a}}})),await x.onBatchEnd(h,p),Pa(p),e.stopTraining_)break}o.dispose()}if(await x.onEpochEnd(o,i),e.stopTraining_)break}return await x.onTrainEnd(),await e.history.syncData(),e.history}(e,v,x,w,f,s.epochs,s.verbose,S,k,y,s.shuffle,I,s.initialEpoch,null);return N}finally{e.isTraining=!1,Mr(a,t),Mr(i,n),Mr(o,t),Mr(l,n),Mr(h,u),Mr(p,c),null!=d&&r.dispose(d)}}(this,e,t,n)}async fitDataset(e,t){return async function(e,t,n){const s=null!=n.batchesPerEpoch;if(r.util.assert(null!=e.optimizer,(()=>"You must compile a model before training/testing. Use LayersModel.compile(modelCompileConfig).")),r.util.assert(null!=n,(()=>"For fitDataset(), the 2nd argument (config) is required, but it is not provided in this call.")),r.util.assert(null!=n.epochs&&n.epochs>0&&Number.isInteger(n.epochs),(()=>`For fitDataset(), config.epochs is expected to be a positive integer, but got ${n.epochs}`)),r.util.assert(!s||n.batchesPerEpoch>0&&Number.isInteger(n.batchesPerEpoch),(()=>`For fitDataset(), config.batchesPerEpoch is expected to be a positive integer if specified, but got ${n.batchesPerEpoch}`)),r.util.assert(null==n.validationSplit,(()=>"`validationSplit` is not supported by `fitDataset()`. Use validationData instead.")),e.isTraining)throw new Error("Cannot start training because another fit() call is ongoing.");e.isTraining=!0;try{const a=null!=n.validationData;let i,o;if(a)if(_r(n.validationData))r.util.assert(null==n.validationBatches||n.validationBatches>0&&Number.isInteger(n.validationBatches),(()=>`For fitDataset() with dataset-based validation, config.validationBatches is expected not to be provided, or to be a positive integer, but got ${n.validationBatches}`));else{const e=function(e){if(3===e.length)throw new Cn("Validation with sample weights is not implemented yet.");return{xs:e[0],ys:e[1]}}(n.validationData);i=e.xs,o=e.ys}const l=e.makeTrainFunction(),u=e.getDedupedMetricsNames();let c;c=a?u.slice().concat(u.map((e=>"val_"+e))):u.slice();const h=Xa(n.callbacks,n.yieldEvery),p=null==n.verbose?1:n.verbose,{callbackList:d,history:f}=Ka(h,p,n.epochs,null,null,function(e,t){let n=null;return null!=t.batchesPerEpoch?n=t.batchesPerEpoch:Number.isFinite(e.size)&&(n=e.size),n}(t,n),null,a,c);d.setModel(e),e.history=f,await d.onTrainBegin(),e.stopTraining_=!1;let m=null==n.initialEpoch?0:n.initialEpoch,g=await t.iterator();for(;m<n.epochs;){const c={};await d.onEpochBegin(m);let h=0,p=0;for(s||(g=await t.iterator());!s||h<n.batchesPerEpoch;){const t=await g.next();if(s&&t.done){console.warn(`You provided \`batchesPerEpoch\` as ${n.batchesPerEpoch}, but your dataset iterator ran out of data after ${h} batches; interrupting training. Make sure that your dataset can generate at least \`batchesPerEpoch * epochs\` batches (in this case, `+n.batchesPerEpoch*n.epochs+" batches). You may need to use the repeat() function when building your dataset.");break}if(null!=t.value){const{xs:s,ys:a}=$r(e,t.value),i={};i.batch=p,i.size=s[0].shape[0],await d.onBatchBegin(p,i);const o=[];if(null!=n.classWeight){const t=Nr(n.classWeight,e.outputNames);for(let e=0;e<t.length;++e)o.push(await Tr(a[e],null,t[e]))}const c=s.concat(a).concat(o),f=l(c);r.dispose(c);for(let e=0;e<u.length;++e){const t=u[e],n=f[e];i[t]=n,r.keep(n)}await d.onBatchEnd(p,i),Pa(i),p++,h++}if(s?h>=n.batchesPerEpoch:t.done){if(a){let t;t=_r(n.validationData)?On(await e.evaluateDataset(n.validationData,{batches:n.validationBatches})):On(e.evaluate(i,o,{batchSize:null==n.validationBatchSize?32:n.validationBatchSize,verbose:0}));for(let n=0;n<e.metricsNames.length;++n)c[`val_${e.metricsNames[n]}`]=t[n]}break}if(e.stopTraining_)break}if(await d.onEpochEnd(m,c),m++,e.stopTraining_)break}return await d.onTrainEnd(),await e.history.syncData(),e.history}finally{e.isTraining=!1}}(this,e,t)}async trainOnBatch(e,t){const n=await this.standardizeUserData(e,t),s=n[0],a=n[1],i=this.makeTrainFunction()(s.concat(a)),o=[];for(const e of i){const t=await e.data();o.push(t[0])}return r.dispose(i),Mr(n[0],e),Mr(n[1],t),Dn(o)}getNamedWeights(e){const t=[],n=null!=e&&e.trainableOnly,s=n?this.trainableWeights:this.weights,a=this.getWeights(n);for(let e=0;e<s.length;++e)n&&!s[e].trainable||t.push({name:s[e].originalName,tensor:a[e]});return t}set stopTraining(e){this.stopTraining_=e}get stopTraining(){return this.stopTraining_}get optimizer(){return this.optimizer_}set optimizer(e){this.optimizer_!==e&&(this.optimizer_=e,this.isOptimizerOwned=!1)}dispose(){const e=super.dispose();if(0===e.refCountAfterDispose&&null!=this.optimizer&&this.isOptimizerOwned){const t=r.memory().numTensors;this.optimizer_.dispose(),e.numDisposedVariables+=t-r.memory().numTensors}return e}getLossIdentifiers(){let e;if("string"==typeof this.loss)e=Mn(this.loss);else if(Array.isArray(this.loss)){for(const e of this.loss)if("string"!=typeof e)throw new Error("Serialization of non-string loss is not supported.");e=this.loss.map((e=>Mn(e)))}else{const t=Object.keys(this.loss);e={};const n=this.loss;for(const s of t){if("string"!=typeof n[s])throw new Error("Serialization of non-string loss is not supported.");e[s]=Mn(n[s])}}return e}getMetricIdentifiers(){if("string"==typeof this.metrics||"function"==typeof this.metrics)return[Mn(mr(this.metrics))];if(Array.isArray(this.metrics))return this.metrics.map((e=>Mn(mr(e))));{const e={};for(const t in this.metrics)e[t]=Mn(mr(this.metrics[t]));return e}}getTrainingConfig(){return{loss:this.getLossIdentifiers(),metrics:this.getMetricIdentifiers(),optimizer_config:{class_name:this.optimizer.getClassName(),config:this.optimizer.getConfig()}}}loadTrainingConfig(e){if(null!=e.weighted_metrics)throw new Error("Loading weight_metrics is not supported yet.");if(null!=e.loss_weights)throw new Error("Loading loss_weights is not supported yet.");if(null!=e.sample_weight_mode)throw new Error("Loading sample_weight_mode is not supported yet.");const t=Ya(kr(e.optimizer_config));let n,s;if("string"==typeof e.loss)n=zn(e.loss);else if(Array.isArray(e.loss))n=e.loss.map((e=>zn(e)));else if(null!=e.loss){n={};for(const t in e.loss)n[t]=zn(e.loss[t])}if(Array.isArray(e.metrics))s=e.metrics.map((e=>zn(e)));else if(null!=e.metrics){s={};for(const t in e.metrics)s[t]=zn(e.metrics[t])}this.compile({loss:n,metrics:s,optimizer:t})}async save(e,t){if("string"==typeof e){const t=r.io.getSaveHandlers(e);if(0===t.length)throw new Tn(`Cannot find any save handlers for URL '${e}'`);if(t.length>1)throw new Tn(`Found more than one (${t.length}) save handlers for URL '${e}'`);e=t[0]}if(null==e.save)throw new Tn("LayersModel.save() cannot proceed because the IOHandler provided does not have the `save` attribute defined.");const n=await r.io.encodeWeights(this.getNamedWeights(t)),s={modelTopology:this.toJSON(null,!1),format:"layers-model",generatedBy:"TensorFlow.js tfjs-layers v3.21.0",convertedBy:null};if(null!=t&&t.includeOptimizer&&null!=this.optimizer){s.trainingConfig=this.getTrainingConfig();const e="optimizer",{data:t,specs:a}=await r.io.encodeWeights(await this.optimizer.getWeights(),e);n.specs.push(...a),n.data=r.io.concatenateArrayBuffers([n.data,t])}if(null!=this.userDefinedMetadata){const e=!0;gr(this.userDefinedMetadata,this.name,e),s.userDefinedMetadata=this.userDefinedMetadata}return s.weightData=n.data,s.weightSpecs=n.specs,e.save(s)}setUserDefinedMetadata(e){gr(e,this.name),this.userDefinedMetadata=e}getUserDefinedMetadata(){return this.userDefinedMetadata}}Vr.className="Model",r.serialization.registerClass(Vr);class Wr extends Vr{}Wr.className="Functional",r.serialization.registerClass(Wr);class Ur extends Vr{constructor(e){if(super({inputs:[],outputs:[]}),e=e||{},this.trainable=!0,this.built=!1,this.name=null!=e.name?e.name:Jn("sequential_"),null!=e.layers)for(const t of e.layers)this.add(t)}checkShape(e){if(e.inboundNodes[0].outputTensors[0].shape.some((e=>e<0)))throw new Tn(`Negative dimension size caused by adding layer ${e.name} with input shape [${e.inboundNodes[0].inputTensors[0].shape}]`)}add(e){const t=e instanceof Ur||e instanceof Vr;let n;if(t){if(n=e,1!==n.outputs.length)throw new Tn("All layers in a Sequential model should have a single output tensor. For multi-output layers, use the functional API.");if(1!==n.inputs.length)throw new Tn("All layers in a Sequential model should have a single input tensor. For multi-input layers, use the functional API.")}if(0===this.outputs.length){if(0===e.inboundNodes.length){if(null==e.batchInputShape)throw new Tn("The first layer in a Sequential model must get an `inputShape` or `batchInputShape` argument.");const t=wa({batchShape:e.batchInputShape,dtype:e.dtype,name:e.name+"_input"});e.apply(t)}if(t)this.outputs=n.outputs,this.inputs=n.inputs;else{if(1!==e.inboundNodes.length)throw new Tn(`A layer added to a Sequential model must not already be connected somewhere else. LayersModel received layer ${e.name} which has ${e.inboundNodes.length} pre-existing inbound connections.`);if(1!==e.inboundNodes[0].outputTensors.length)throw new Tn("All layers in a Sequential model should have a single output tensor. For multi-output layers, use the functional API.");this.checkShape(e),this.outputs=[e.inboundNodes[0].outputTensors[0]],this.inputs=xa(this.outputs[0])}this.inboundNodes=[],new ga({outboundLayer:this,inboundLayers:[],nodeIndices:[],tensorIndices:[],inputTensors:this.inputs,outputTensors:this.outputs,inputMasks:An(null,this.inputs.length),outputMasks:[null],inputShapes:this.inputs.map((e=>e.shape)),outputShapes:this.outputs[0].shape})}else{const t=e.apply(this.outputs[0]);if(Array.isArray(t))throw new TypeError("All layers in a Sequential model should have a single output tensor. For multi-output layers, use the functional API.");this.checkShape(e),this.outputs=[t],this.inboundNodes[0].outputTensors=this.outputs,this.inboundNodes[0].outputShapes=[this.outputs[0].shape]}this.layers.push(e),this.built=!1}pop(){if(0===this.layers.length)throw new TypeError("There are no layers in the model.");if(this.layers.pop(),0===this.layers.length)this.outputs=[],this.inboundNodes=[],this.outboundNodes=[];else{const e=this.layers.length-1;this.layers[e].outboundNodes=[],this.outputs=[this.layers[e].output],this.inboundNodes[0].outputTensors=this.outputs,this.inboundNodes[0].outputShapes=[this.outputs[0].shape]}}call(e,t){return null==this.model&&this.build(),this.model.call(e,t)}build(e){if(la(e),0===this.inputs.length||0===this.outputs.length)throw new TypeError("Sequential model cannot be built: model is empty. Add some layers first.");this.model=new Vr({inputs:this.inputs,outputs:this.outputs[0],name:this.name+"_model"}),this.model.trainable=this.trainable,this.supportsMasking=this.model.supportsMasking,this.inputLayers=this.model.inputLayers,this.inputLayersNodeIndices=this.model.inputLayersNodeIndices,this.inputLayersTensorIndices=this.model.inputLayersTensorIndices,this.outputLayers=this.model.outputLayers,this.outputLayersNodeIndices=this.model.outputLayersNodeIndices,this.outputLayersTensorIndices=this.model.outputLayersTensorIndices,this.nodesByDepth=this.model.nodesByDepth,this.containerNodes=this.model.containerNodes,this.outputNames=this.model.outputNames,this.inputNames=this.model.inputNames,this.built=!0}countParams(){return this.built||this.build(),super.countParams()}summary(e,t,n=console.log){this.built||this.build(),super.summary(e,t,n)}setWeights(e){null==this.model&&this.build(),this.model.setWeights(e)}evaluate(e,t,n={}){if(!this.built)throw new Nn("The model needs to be compiled before being used.");return this.model.evaluate(e,t,n)}async evaluateDataset(e,t){if(!this.built)throw new Nn("The model needs to be compiled before being used.");return this.model.evaluateDataset(e,t)}predict(e,t={}){return null==this.model&&this.build(),this.model.predict(e,t)}predictOnBatch(e){return null==this.model&&this.build(),this.model.predictOnBatch(e)}compile(e){this.build(),this.model.compile(e),this.optimizer_=this.model.optimizer,this.isOptimizerOwned=this.model.isOptimizerOwned,this.loss=this.model.loss,this.metrics=this.model.metrics,this.metricsTensors=this.model.metricsTensors,this.metricsNames=this.model.metricsNames}get optimizer(){return null==this.model?void 0:this.model.optimizer}set optimizer(e){this.model.optimizer=e}async fit(e,t,n={}){if(!this.built)throw new Nn("The model needs to be compiled before being used.");return this.model.fit(e,t,n)}async fitDataset(e,t){if(!this.built)throw new Nn("The model needs to be compiled before being used.");return this.model.fitDataset(e,t)}async trainOnBatch(e,t){return this.model.trainOnBatch(e,t)}static fromConfig(e,t,n={},s=!1){let a,i={};if(t instanceof Array){if(null==t[0].className||"Merge"===t[0].className)throw new Tn("Legacy serialization format not supported yet.");a=t}else r.util.assert(null!=t.layers,(()=>"When the config data for a Sequential model is not an Array, it must be an Object that contains the 'layers' field.")),a=t.layers,delete t.layers,i=t;const o=new e(i);if(!(o instanceof Ur))throw new Cn(`Sequential.fromConfig called on non-Sequential input: ${o}`);for(const e of a){const t=Ya(e,void 0,s);s&&t.setFastWeightInitDuringBuild(!0),o.add(t)}return o}set stopTraining(e){if(null==this.model)throw new Tn("Cannot set the stopTraining property of a sequential model before it is compiled.");this.model.stopTraining=e}get stopTraining(){if(null==this.model)throw new Tn("Cannot get the stopTraining property of a sequential model before it is compiled.");return this.model.stopTraining}getConfig(){const e=[];for(const t of this.layers){const n={};n.className=t.getClassName(),n.config=t.getConfig(),e.push(n)}return{name:this.name,layers:e}}}function Gr(e){return new Vr(e)}function Hr(e){return new Ur(e)}function qr(e,t){return null==t&&(t={}),async function(e,t){if(null==t&&(t={}),"string"==typeof e){const n=r.io.getLoadHandlers(e,t);if(0===n.length)n.push(r.io.browserHTTPRequest(e,t));else if(n.length>1)throw new Tn(`Found more than one (${n.length}) load handlers for URL '${e}'`);e=n[0]}return async function(e,t,n){if(null==n&&(n={}),null==e.load)throw new Tn("Cannot proceed with model loading because the IOHandler provided does not have the `load` method implemented.");const s=await e.load();let a=s.modelTopology;null!=a.model_config&&(a=a.model_config);const i=null==n.strict||n.strict,o=null!=s.weightData&&null!=s.weightSpecs&&i,l=Ya(kr(a),void 0,o),u=s.trainingConfig;if(null!=u&&l.loadTrainingConfig(u),null!=s.userDefinedMetadata&&l.setUserDefinedMetadata(s.userDefinedMetadata),null!=s.weightData){if(null==s.weightSpecs)throw new Tn("LayersModel artifacts contains weight data, but not weight specs. Therefore loading of weights cannot proceed.");const{modelWeights:e,optimizerWeights:t}=function(e,t){const n=r.io.decodeWeights(e,t),s={},a=[];return t.forEach((e=>{"optimizer"===e.group?a.push({name:e.name,tensor:n[e.name]}):s[e.name]=n[e.name]})),{modelWeights:s,optimizerWeights:a}}(s.weightData,s.weightSpecs);l.loadWeights(e,i),null!=l.optimizer&&t.length>0&&await l.optimizer.setWeights(t),(0,r.dispose)(e),(0,r.dispose)(t.map((e=>e.tensor)))}return l}(e,0,t)}(e,t)}function Xr(e){return wa(e)}Ur.className="Sequential",r.serialization.registerClass(Ur);class jr extends r.serialization.Serializable{getConfig(){return{}}}class Kr extends jr{apply(e,t=1){return function(e,t=1){if(1!==t)throw new Cn(`Support for alpha values other than 1 (${t}) is not implemented yet.`);return r.elu(e)}(e,t)}}Kr.className="elu",r.serialization.registerClass(Kr);class Yr extends jr{apply(e){return r.selu(e)}}Yr.className="selu",r.serialization.registerClass(Yr);class Zr extends jr{apply(e){return r.relu(e)}}Zr.className="relu",r.serialization.registerClass(Zr);class Qr extends jr{apply(e){return(0,r.tidy)((()=>r.minimum(6,r.relu(e))))}}Qr.className="relu6",r.serialization.registerClass(Qr);class Jr extends jr{apply(e){return e}}Jr.className="linear",r.serialization.registerClass(Jr);class ei extends jr{apply(e){return r.sigmoid(e)}}ei.className="sigmoid",r.serialization.registerClass(ei);class ti extends jr{apply(e){return function(e){return(0,r.tidy)((()=>{const t=r.add(.5,r.mul(.2,e));return r.clipByValue(t,0,1)}))}(e)}}ti.className="hardSigmoid",r.serialization.registerClass(ti);class ni extends jr{apply(e){return r.softplus(e)}}ni.className="softplus",r.serialization.registerClass(ni);class si extends jr{apply(e){return function(e){return(0,r.tidy)((()=>r.div(e,r.add(r.abs(e),1))))}(e)}}si.className="softsign",r.serialization.registerClass(si);class ai extends jr{apply(e){return r.tanh(e)}}ai.className="tanh",r.serialization.registerClass(ai);class ri extends jr{apply(e,t=-1){return r.softmax(e,t)}}ri.className="softmax",r.serialization.registerClass(ri);class ii extends jr{apply(e,t=-1){return r.logSoftmax(e,t)}}ii.className="logSoftmax",r.serialization.registerClass(ii);class oi extends jr{apply(e,t=1){return(0,r.tidy)((()=>r.mul(r.sigmoid(r.mul(e,t)),e)))}}oi.className="swish",r.serialization.registerClass(oi);class li extends jr{apply(e){return(0,r.tidy)((()=>r.mul(e,r.tanh(r.softplus(e)))))}}function ui(e){return e.getClassName()}function ci(e,t={}){return Vn(e,r.serialization.SerializationMap.getMap().classNameMap,t,"activation")}function hi(e){if(null==e){return ci({className:"linear",config:{}})}if("string"==typeof e){const t={};return t.className=e,t.config={},ci(t)}return e instanceof jr?e:ci(e)}li.className="mish",r.serialization.registerClass(li);class pi extends r.serialization.Serializable{}class di extends pi{constructor(e){super(),function(e){if(null!=e&&"object"!=typeof e)throw new Error(`Argument to L1L2 regularizer's constructor is expected to be an object, but received: ${e}`)}(e),this.l1=null==e||null==e.l1?.01:e.l1,this.l2=null==e||null==e.l2?.01:e.l2,this.hasL1=0!==this.l1,this.hasL2=0!==this.l2}apply(e){return(0,r.tidy)((()=>{let t=(0,r.zeros)([1]);return this.hasL1&&(t=(0,r.add)(t,(0,r.sum)(r.mul(this.l1,(0,r.abs)(e))))),this.hasL2&&(t=(0,r.add)(t,(0,r.sum)(r.mul(this.l2,Rs(e))))),r.reshape(t,[])}))}getConfig(){return{l1:this.l1,l2:this.l2}}static fromConfig(e,t){return new e({l1:t.l1,l2:t.l2})}}di.className="L1L2",r.serialization.registerClass(di);const fi={l1l2:"L1L2"};function mi(e){return Bn(e)}function gi(e,t={}){return Vn(e,r.serialization.SerializationMap.getMap().classNameMap,t,"regularizer")}function yi(e){return null==e?null:"string"==typeof e?gi({className:e in fi?fi[e]:e,config:{}}):e instanceof pi?e:gi(e)}class bi extends ba{constructor(e){super(null==e?{}:e),this.supportsMasking=!0,null!=e&&(this.maxValue=e.maxValue)}call(e,t){e=oa(e);let n=(0,r.relu)(e);return null!=this.maxValue&&(n=(0,r.clipByValue)(n,0,this.maxValue)),n}computeOutputShape(e){return e}getConfig(){const e={maxValue:this.maxValue},t=super.getConfig();return Object.assign(e,t),e}}bi.className="ReLU",r.serialization.registerClass(bi);class xi extends ba{constructor(e){super(null==e?{}:e),this.DEFAULT_ALPHA=.3,null==e&&(e={}),this.alpha=null==e.alpha?this.DEFAULT_ALPHA:e.alpha}call(e,t){const n=oa(e);return(0,r.leakyRelu)(n,this.alpha)}computeOutputShape(e){return e}getConfig(){const e={alpha:this.alpha},t=super.getConfig();return Object.assign(e,t),e}}xi.className="LeakyReLU",r.serialization.registerClass(xi);class vi extends ba{constructor(e){if(super(null==e?{}:e),this.DEFAULT_ALPHA_INITIALIZER="zeros",null==e&&(e={}),this.supportsMasking=!0,this.alphaInitializer=aa(e.alphaInitializer||this.DEFAULT_ALPHA_INITIALIZER),this.alphaRegularizer=yi(e.alphaRegularizer),this.alphaConstraint=La(e.alphaConstraint),null==e.sharedAxes)this.sharedAxes=null;else if(Array.isArray(e.sharedAxes))this.sharedAxes=e.sharedAxes;else{if("number"!=typeof e.sharedAxes)throw new Tn(`Expected sharedAxes to be a number or an array of numbers, but got ${e.sharedAxes}`);this.sharedAxes=[e.sharedAxes]}}build(e){const t=(e=la(e)).slice(1);if(null!=this.sharedAxes)for(const e of this.sharedAxes)t[e-1]=1;this.alpha=this.addWeight("alpha",t,"float32",this.alphaInitializer,this.alphaRegularizer,!0,this.alphaConstraint);const n={};if(null!=this.sharedAxes)for(let t=1;t<e.length;++t)n[t]=e[t];this.inputSpec=[new da({ndim:e.length,axes:n})],this.built=!0}call(e,t){return e=oa(e),(0,r.prelu)(e,this.alpha.read())}getConfig(){const e={alphaInitializer:sa(this.alphaInitializer),alphaRegularizer:mi(this.alphaRegularizer),alphaConstraint:Ma(this.alphaConstraint),sharedAxes:this.sharedAxes},t=super.getConfig();return Object.assign(e,t),e}}vi.className="PReLU",r.serialization.registerClass(vi);class wi extends ba{constructor(e){if(super(null==e?{}:e),this.DEFAULT_ALPHA=1,null==e&&(e={}),null!=e.alpha&&e.alpha!==this.DEFAULT_ALPHA)throw new Cn(`Non-default alpha value (${e.alpha}) is not supported by the ELU layer yet.`);this.alpha=null==e.alpha?this.DEFAULT_ALPHA:e.alpha}call(e,t){const n=oa(e);return(0,r.elu)(n)}computeOutputShape(e){return e}getConfig(){const e={alpha:this.alpha},t=super.getConfig();return Object.assign(e,t),e}}wi.className="ELU",r.serialization.registerClass(wi);class ki extends ba{constructor(e){super(null==e?{}:e),this.DEFAULT_THETA=1,null==e&&(e={}),this.theta=null==e.theta?this.DEFAULT_THETA:e.theta}call(e,t){const n=oa(e);return(0,r.mul)(n,(0,r.cast)((0,r.greater)(n,this.theta),"float32"))}computeOutputShape(e){return e}getConfig(){const e={theta:this.theta},t=super.getConfig();return Object.assign(e,t),e}}ki.className="ThresholdedReLU",r.serialization.registerClass(ki);class Ii extends ba{constructor(e){super(null==e?{}:e),this.DEFAULT_AXIS=1,null==e&&(e={}),this.softmax=(new ri).apply,this.axis=null==e.axis?this.DEFAULT_AXIS:e.axis}call(e,t){const n=oa(e);return this.softmax(n,this.axis)}computeOutputShape(e){return e}getConfig(){const e={axis:this.axis},t=super.getConfig();return Object.assign(e,t),e}}function Si(e,t,n){if("number"==typeof e)return An(e,t);if(e.length!==t)throw new Tn(`The ${n} argument must be an integer or tuple of ${t} integers. Received: ${e.length} elements.`);for(let a=0;a<t;++a){const r=e[a];if((s=r)!==parseInt(s.toString(),10))throw new Tn(`The ${n} argument must be an integer or tuple of ${t} integers. Received: ${JSON.stringify(e)} including a non-integer number ${r}`)}return e;var s}function Ni(e,t,n,s,a=1){if(null==e)return e;let r;return r="same"===n?e:e-(t+(t-1)*(a-1))+1,Math.floor((r+s-1)/s)}function Ti(e,t,n,s){if(null==e)return null;if("valid"===s)e=e*t+ys([n-t,0]);else{if("same"!==s)throw new Tn(`Unsupport padding mode: ${s}.`);e*=t}return e}function Ci(e,t){return(0,r.tidy)((()=>(is(t),"channelsFirst"===t?r.transpose(e,[0,2,3,1]):e)))}function $i(e,t){return(0,r.tidy)((()=>(is(t),"channelsFirst"===t?r.transpose(e,[0,2,3,4,1]):e)))}function Ei(e,t,n,s=[1,1],a="valid",i,o,l=null){return(0,r.tidy)((()=>{if(null==i&&(i="channelsLast"),is(i),3!==e.rank&&4!==e.rank)throw new Tn(`conv2dWithBiasActivation expects input to be of rank 3 or 4, but received ${e.rank}.`);if(3!==t.rank&&4!==t.rank)throw new Tn(`conv2dWithBiasActivation expects kernel to be of rank 3 or 4, but received ${e.rank}.`);let u=Ci(e,i);if("causal"===a)throw new Cn("The support for CAUSAL padding mode in conv1dWithBias is not implemented yet.");return u=r.fused.conv2d({x:u,filter:t,strides:s,pad:"same"===a?"same":"valid",dilations:o,dataFormat:"NHWC",bias:n,activation:l}),"channelsFirst"===i&&(u=r.transpose(u,[0,3,1,2])),u}))}Ii.className="Softmax",r.serialization.registerClass(Ii);class _i extends ba{constructor(e,t){if(super(t),this.bias=null,this.DEFAULT_KERNEL_INITIALIZER="glorotNormal",this.DEFAULT_BIAS_INITIALIZER="zeros",_i.verifyArgs(t),this.rank=e,Xn(this.rank,"rank"),1!==this.rank&&2!==this.rank&&3!==this.rank)throw new Cn(`Convolution layer for rank other than 1, 2, or 3 (${this.rank}) is not implemented yet.`);if(this.kernelSize=Si(t.kernelSize,e,"kernelSize"),this.strides=Si(null==t.strides?1:t.strides,e,"strides"),this.padding=null==t.padding?"valid":t.padding,os(this.padding),this.dataFormat=null==t.dataFormat?"channelsLast":t.dataFormat,is(this.dataFormat),this.activation=hi(t.activation),this.useBias=null==t.useBias||t.useBias,this.biasInitializer=aa(t.biasInitializer||this.DEFAULT_BIAS_INITIALIZER),this.biasConstraint=La(t.biasConstraint),this.biasRegularizer=yi(t.biasRegularizer),this.activityRegularizer=yi(t.activityRegularizer),this.dilationRate=Si(null==t.dilationRate?1:t.dilationRate,e,"dilationRate"),1===this.rank&&Array.isArray(this.dilationRate)&&1!==this.dilationRate.length)throw new Tn(`dilationRate must be a number or an array of a single number for 1D convolution, but received ${JSON.stringify(this.dilationRate)}`);if(2===this.rank){if("number"==typeof this.dilationRate)this.dilationRate=[this.dilationRate,this.dilationRate];else if(2!==this.dilationRate.length)throw new Tn(`dilationRate must be a number or array of two numbers for 2D convolution, but received ${JSON.stringify(this.dilationRate)}`)}else if(3===this.rank)if("number"==typeof this.dilationRate)this.dilationRate=[this.dilationRate,this.dilationRate,this.dilationRate];else if(3!==this.dilationRate.length)throw new Tn(`dilationRate must be a number or array of three numbers for 3D convolution, but received ${JSON.stringify(this.dilationRate)}`)}static verifyArgs(e){if(Rn("kernelSize"in e,"required key 'kernelSize' not in config"),"number"!=typeof e.kernelSize&&!qn(e.kernelSize,"number",1,3))throw new Tn(`BaseConv expects config.kernelSize to be number or number[] with length 1, 2, or 3, but received ${JSON.stringify(e.kernelSize)}.`)}getConfig(){const e={kernelSize:this.kernelSize,strides:this.strides,padding:this.padding,dataFormat:this.dataFormat,dilationRate:this.dilationRate,activation:ui(this.activation),useBias:this.useBias,biasInitializer:sa(this.biasInitializer),biasRegularizer:mi(this.biasRegularizer),activityRegularizer:mi(this.activityRegularizer),biasConstraint:Ma(this.biasConstraint)},t=super.getConfig();return Object.assign(e,t),e}}class Ai extends _i{constructor(e,t){super(e,t),this.kernel=null,Ai.verifyArgs(t),this.filters=t.filters,Xn(this.filters,"filters"),this.kernelInitializer=aa(t.kernelInitializer||this.DEFAULT_KERNEL_INITIALIZER),this.kernelConstraint=La(t.kernelConstraint),this.kernelRegularizer=yi(t.kernelRegularizer)}build(e){e=la(e);const t="channelsFirst"===this.dataFormat?1:e.length-1;if(null==e[t])throw new Tn(`The channel dimension of the input should be defined. Found ${e[t]}`);const n=e[t],s=this.kernelSize.concat([n,this.filters]);this.kernel=this.addWeight("kernel",s,null,this.kernelInitializer,this.kernelRegularizer,!0,this.kernelConstraint),this.useBias&&(this.bias=this.addWeight("bias",[this.filters],null,this.biasInitializer,this.biasRegularizer,!0,this.biasConstraint)),this.inputSpec=[{ndim:this.rank+2,axes:{[t]:n}}],this.built=!0}call(e,t){return(0,r.tidy)((()=>{let t;e=oa(e);const n=null==this.bias?null:this.bias.read(),s=Kn(this.activation.getClassName());if(null!=s&&2===this.rank)t=Ei(e,this.kernel.read(),n,this.strides,this.padding,this.dataFormat,this.dilationRate,s);else{if(1===this.rank)t=function(e,t,n,s=1,a="valid",i,o=1){return(0,r.tidy)((()=>{if(null==i&&(i="channelsLast"),is(i),3!==e.shape.length)throw new Tn(`The input of a conv1dWithBias operation should be 3, but is ${e.shape.length} instead.`);if(3!==t.shape.length)throw new Tn(`The kernel for a conv1dWithBias operation should be 3, but is ${t.shape.length} instead`);if(null!=n&&1!==n.shape.length)throw new Tn(`The bias for a conv1dWithBias operation should be 1, but is ${t.shape.length} instead`);if("channelsFirst"===i&&(e=r.transpose(e,[0,2,1])),"causal"===a)throw new Cn("The support for CAUSAL padding mode in conv1dWithBias is not implemented yet.");let l=r.conv1d(e,t,s,"same"===a?"same":"valid","NWC",o);return null!=n&&(l=Ds(l,n)),l}))}(e,this.kernel.read(),n,this.strides[0],this.padding,this.dataFormat,this.dilationRate[0]);else if(2===this.rank)t=Ei(e,this.kernel.read(),n,this.strides,this.padding,this.dataFormat,this.dilationRate);else{if(3!==this.rank)throw new Cn("convolutions greater than 3D are not implemented yet.");t=function(e,t,n,s=[1,1,1],a="valid",i,o){return(0,r.tidy)((()=>{if(null==i&&(i="channelsLast"),is(i),4!==e.rank&&5!==e.rank)throw new Tn(`conv3dWithBias expects input to be of rank 4 or 5, but received ${e.rank}.`);if(4!==t.rank&&5!==t.rank)throw new Tn(`conv3dWithBias expects kernel to be of rank 4 or 5, but received ${e.rank}.`);let l=$i(e,i);if("causal"===a)throw new Cn("The support for CAUSAL padding mode in conv3dWithBias is not implemented yet.");return l=r.conv3d(l,t,s,"same"===a?"same":"valid","NDHWC",o),null!=n&&(l=Ds(l,n)),"channelsFirst"===i&&(l=r.transpose(l,[0,4,1,2,3])),l}))}(e,this.kernel.read(),n,this.strides,this.padding,this.dataFormat,this.dilationRate)}null!=this.activation&&(t=this.activation.apply(t))}return t}))}computeOutputShape(e){e=la(e);const t=[],n="channelsLast"===this.dataFormat?e.slice(1,e.length-1):e.slice(2);for(let e=0;e<n.length;++e){const s=Ni(n[e],this.kernelSize[e],this.padding,this.strides[e],"number"==typeof this.dilationRate?this.dilationRate:this.dilationRate[e]);t.push(s)}let s=[e[0]];return"channelsLast"===this.dataFormat?(s=s.concat(t),s.push(this.filters)):(s.push(this.filters),s=s.concat(t)),s}getConfig(){const e={filters:this.filters,kernelInitializer:sa(this.kernelInitializer),kernelRegularizer:mi(this.kernelRegularizer),kernelConstraint:Ma(this.kernelConstraint)},t=super.getConfig();return Object.assign(e,t),e}static verifyArgs(e){if(!("filters"in e)||"number"!=typeof e.filters||e.filters<1)throw new Tn(`Convolution layer expected config.filters to be a 'number' > 0 but got ${JSON.stringify(e.filters)}`)}}class Ri extends Ai{constructor(e){super(2,e),Ri.verifyArgs(e)}getConfig(){const e=super.getConfig();return delete e.rank,e}static verifyArgs(e){if("number"!=typeof e.kernelSize&&!qn(e.kernelSize,"number",1,2))throw new Tn(`Conv2D expects config.kernelSize to be number or number[] with length 1 or 2, but received ${JSON.stringify(e.kernelSize)}.`)}}Ri.className="Conv2D",r.serialization.registerClass(Ri);class Fi extends Ai{constructor(e){super(3,e),Fi.verifyArgs(e)}getConfig(){const e=super.getConfig();return delete e.rank,e}static verifyArgs(e){if("number"!=typeof e.kernelSize&&(!Array.isArray(e.kernelSize)||1!==e.kernelSize.length&&3!==e.kernelSize.length))throw new Tn(`Conv3D expects config.kernelSize to be number or [number, number, number], but received ${JSON.stringify(e.kernelSize)}.`)}}Fi.className="Conv3D",r.serialization.registerClass(Fi);class Di extends Ri{constructor(e){if(super(e),this.inputSpec=[new da({ndim:4})],"same"!==this.padding&&"valid"!==this.padding)throw new Tn(`Conv2DTranspose currently supports only padding modes 'same' and 'valid', but received padding mode ${this.padding}`)}build(e){if(4!==(e=la(e)).length)throw new Tn("Input should have rank 4; Received input shape: "+JSON.stringify(e));const t="channelsFirst"===this.dataFormat?1:e.length-1;if(null==e[t])throw new Tn("The channel dimension of the inputs should be defined. Found `None`.");const n=e[t],s=this.kernelSize.concat([this.filters,n]);this.kernel=this.addWeight("kernel",s,"float32",this.kernelInitializer,this.kernelRegularizer,!0,this.kernelConstraint),this.useBias&&(this.bias=this.addWeight("bias",[this.filters],"float32",this.biasInitializer,this.biasRegularizer,!0,this.biasConstraint)),this.inputSpec=[new da({ndim:4,axes:{[t]:n}})],this.built=!0}call(e,t){return r.tidy((()=>{let t=oa(e);if(4!==t.shape.length)throw new Tn(`Conv2DTranspose.call() expects input tensor to be rank-4, but received a tensor of rank-${t.shape.length}`);const n=t.shape,s=n[0];let a,i;"channelsFirst"===this.dataFormat?(a=2,i=3):(a=1,i=2);const o=n[a],l=n[i],u=this.kernelSize[0],c=this.kernelSize[1],h=this.strides[0],p=this.strides[1],d=[s,Ti(o,h,u,this.padding),Ti(l,p,c,this.padding),this.filters];"channelsLast"!==this.dataFormat&&(t=r.transpose(t,[0,2,3,1]));let f=r.conv2dTranspose(t,this.kernel.read(),d,this.strides,this.padding);return"channelsLast"!==this.dataFormat&&(f=r.transpose(f,[0,3,1,2])),null!=this.bias&&(f=Ds(f,this.bias.read(),this.dataFormat)),null!=this.activation&&(f=this.activation.apply(f)),f}))}computeOutputShape(e){const t=(e=la(e)).slice();let n,s,a;"channelsFirst"===this.dataFormat?(n=1,s=2,a=3):(n=3,s=1,a=2);const r=this.kernelSize[0],i=this.kernelSize[1],o=this.strides[0],l=this.strides[1];return t[n]=this.filters,t[s]=Ti(t[s],o,r,this.padding),t[a]=Ti(t[a],l,i,this.padding),t}getConfig(){const e=super.getConfig();return delete e.dilationRate,e}}Di.className="Conv2DTranspose",r.serialization.registerClass(Di);class Oi extends Fi{constructor(e){if(super(e),this.inputSpec=[new da({ndim:5})],"same"!==this.padding&&"valid"!==this.padding)throw new Tn(`Conv3DTranspose currently supports only padding modes 'same' and 'valid', but received padding mode ${this.padding}`)}build(e){if(5!==(e=la(e)).length)throw new Tn("Input should have rank 5; Received input shape: "+JSON.stringify(e));const t="channelsFirst"===this.dataFormat?1:e.length-1;if(null==e[t])throw new Tn("The channel dimension of the inputs should be defined. Found `None`.");const n=e[t],s=this.kernelSize.concat([this.filters,n]);this.kernel=this.addWeight("kernel",s,"float32",this.kernelInitializer,this.kernelRegularizer,!0,this.kernelConstraint),this.useBias&&(this.bias=this.addWeight("bias",[this.filters],"float32",this.biasInitializer,this.biasRegularizer,!0,this.biasConstraint)),this.inputSpec=[new da({ndim:5,axes:{[t]:n}})],this.built=!0}call(e,t){return r.tidy((()=>{let t=oa(e);if(5!==t.shape.length)throw new Tn(`Conv3DTranspose.call() expects input tensor to be rank-4, but received a tensor of rank-${t.shape.length}`);const n=t.shape,s=n[0];let a,i,o;"channelsFirst"===this.dataFormat?(o=2,a=3,i=4):(o=1,a=2,i=3);const l=n[o],u=n[a],c=n[i],h=this.kernelSize[0],p=this.kernelSize[1],d=this.kernelSize[2],f=this.strides[0],m=this.strides[1],g=this.strides[2],y=[s,Ti(l,f,h,this.padding),Ti(u,m,p,this.padding),Ti(c,g,d,this.padding),this.filters];"channelsLast"!==this.dataFormat&&(t=r.transpose(t,[0,2,3,4,1]));let b=r.conv3dTranspose(t,this.kernel.read(),y,this.strides,this.padding);return"channelsLast"!==this.dataFormat&&(b=r.transpose(b,[0,4,1,2,3])),null!==this.bias&&(b=Ds(b,this.bias.read(),this.dataFormat)),null!==this.activation&&(b=this.activation.apply(b)),b}))}computeOutputShape(e){const t=(e=la(e)).slice();let n,s,a,r;"channelsFirst"===this.dataFormat?(n=1,s=2,a=3,r=4):(n=4,s=1,a=2,r=3);const i=this.kernelSize[0],o=this.kernelSize[1],l=this.kernelSize[2],u=this.strides[0],c=this.strides[1],h=this.strides[2];return t[n]=this.filters,t[s]=Ti(t[s],u,i,this.padding),t[a]=Ti(t[a],c,o,this.padding),t[r]=Ti(t[r],h,l,this.padding),t}getConfig(){const e=super.getConfig();return delete e.dilationRate,e}}Oi.className="Conv3DTranspose",r.serialization.registerClass(Oi);class Mi extends Ai{constructor(e,t){if(super(e,t),this.DEFAULT_DEPTHWISE_INITIALIZER="glorotUniform",this.DEFAULT_POINTWISE_INITIALIZER="glorotUniform",this.depthwiseKernel=null,this.pointwiseKernel=null,null==t.filters)throw new Tn("The `filters` configuration field is required by SeparableConv, but is unspecified.");if(null!=t.kernelInitializer||null!=t.kernelRegularizer||null!=t.kernelConstraint)throw new Tn("Fields kernelInitializer, kernelRegularizer and kernelConstraint are invalid for SeparableConv2D. Use depthwiseInitializer, depthwiseRegularizer, depthwiseConstraint, pointwiseInitializer, pointwiseRegularizer and pointwiseConstraint instead.");if(null!=t.padding&&"same"!==t.padding&&"valid"!==t.padding)throw new Tn(`SeparableConv${this.rank}D supports only padding modes: 'same' and 'valid', but received ${JSON.stringify(t.padding)}`);this.depthMultiplier=null==t.depthMultiplier?1:t.depthMultiplier,this.depthwiseInitializer=aa(t.depthwiseInitializer||this.DEFAULT_DEPTHWISE_INITIALIZER),this.depthwiseRegularizer=yi(t.depthwiseRegularizer),this.depthwiseConstraint=La(t.depthwiseConstraint),this.pointwiseInitializer=aa(t.depthwiseInitializer||this.DEFAULT_POINTWISE_INITIALIZER),this.pointwiseRegularizer=yi(t.pointwiseRegularizer),this.pointwiseConstraint=La(t.pointwiseConstraint)}build(e){if((e=la(e)).length<this.rank+2)throw new Tn(`Inputs to SeparableConv${this.rank}D should have rank ${this.rank+2}, but received input shape: ${JSON.stringify(e)}`);const t="channelsFirst"===this.dataFormat?1:e.length-1;if(null==e[t]||e[t]<0)throw new Tn(`The channel dimension of the inputs should be defined, but found ${JSON.stringify(e[t])}`);const n=e[t],s=this.kernelSize.concat([n,this.depthMultiplier]),a=[];for(let e=0;e<this.rank;++e)a.push(1);a.push(n*this.depthMultiplier,this.filters);const r=!0;this.depthwiseKernel=this.addWeight("depthwise_kernel",s,"float32",this.depthwiseInitializer,this.depthwiseRegularizer,r,this.depthwiseConstraint),this.pointwiseKernel=this.addWeight("pointwise_kernel",a,"float32",this.pointwiseInitializer,this.pointwiseRegularizer,r,this.pointwiseConstraint),this.useBias?this.bias=this.addWeight("bias",[this.filters],"float32",this.biasInitializer,this.biasRegularizer,r,this.biasConstraint):this.bias=null,this.inputSpec=[new da({ndim:this.rank+2,axes:{[t]:n}})],this.built=!0}call(e,t){return(0,r.tidy)((()=>{let t;if(e=oa(e),1===this.rank)throw new Cn("1D separable convolution is not implemented yet.");return 2===this.rank&&("channelsFirst"===this.dataFormat&&(e=r.transpose(e,[0,2,3,1])),t=r.separableConv2d(e,this.depthwiseKernel.read(),this.pointwiseKernel.read(),this.strides,this.padding,this.dilationRate,"NHWC")),this.useBias&&(t=Ds(t,this.bias.read(),this.dataFormat)),null!=this.activation&&(t=this.activation.apply(t)),"channelsFirst"===this.dataFormat&&(t=r.transpose(t,[0,3,1,2])),t}))}getConfig(){const e=super.getConfig();return delete e.rank,delete e.kernelInitializer,delete e.kernelRegularizer,delete e.kernelConstraint,e.depthwiseInitializer=sa(this.depthwiseInitializer),e.pointwiseInitializer=sa(this.pointwiseInitializer),e.depthwiseRegularizer=mi(this.depthwiseRegularizer),e.pointwiseRegularizer=mi(this.pointwiseRegularizer),e.depthwiseConstraint=Ma(this.depthwiseConstraint),e.pointwiseConstraint=Ma(this.pointwiseConstraint),e}}Mi.className="SeparableConv";class zi extends Mi{constructor(e){super(2,e)}}zi.className="SeparableConv2D",r.serialization.registerClass(zi);class Li extends Ai{constructor(e){super(1,e),Li.verifyArgs(e),this.inputSpec=[{ndim:3}]}getConfig(){const e=super.getConfig();return delete e.rank,delete e.dataFormat,e}static verifyArgs(e){if("number"!=typeof e.kernelSize&&!qn(e.kernelSize,"number",1,1))throw new Tn(`Conv1D expects config.kernelSize to be number or number[] with length 1, but received ${JSON.stringify(e.kernelSize)}.`)}}Li.className="Conv1D",r.serialization.registerClass(Li);class Bi extends ba{constructor(e){super(e),"number"==typeof e.cropping?this.cropping=[[e.cropping,e.cropping],[e.cropping,e.cropping]]:"number"==typeof e.cropping[0]?this.cropping=[[e.cropping[0],e.cropping[0]],[e.cropping[1],e.cropping[1]]]:this.cropping=e.cropping,this.dataFormat=void 0===e.dataFormat?"channelsLast":e.dataFormat,this.inputSpec=[{ndim:4}]}computeOutputShape(e){return"channelsFirst"===this.dataFormat?[e[0],e[1],e[2]-this.cropping[0][0]-this.cropping[0][1],e[3]-this.cropping[1][0]-this.cropping[1][1]]:[e[0],e[1]-this.cropping[0][0]-this.cropping[0][1],e[2]-this.cropping[1][0]-this.cropping[1][1],e[3]]}call(e,t){return(0,r.tidy)((()=>{if(e=oa(e),"channelsLast"===this.dataFormat){const t=Ns(e,this.cropping[0][0],e.shape[1]-this.cropping[0][0]-this.cropping[0][1],2);return Ns(t,this.cropping[1][0],e.shape[2]-this.cropping[1][1]-this.cropping[1][0],3)}{const t=Ns(e,this.cropping[0][0],e.shape[2]-this.cropping[0][0]-this.cropping[0][1],3);return Ns(t,this.cropping[1][0],e.shape[3]-this.cropping[1][1]-this.cropping[1][0],4)}}))}getConfig(){const e={cropping:this.cropping,dataFormat:this.dataFormat},t=super.getConfig();return Object.assign(e,t),e}}Bi.className="Cropping2D",r.serialization.registerClass(Bi);class Pi extends ba{constructor(e){var t;super(e),this.DEFAULT_SIZE=[2,2],this.inputSpec=[{ndim:4}],this.size=null==e.size?this.DEFAULT_SIZE:e.size,this.dataFormat=null==e.dataFormat?"channelsLast":e.dataFormat,is(this.dataFormat),this.interpolation=null==e.interpolation?"nearest":e.interpolation,t=this.interpolation,Hn(ts,"InterpolationFormat",t)}computeOutputShape(e){if("channelsFirst"===this.dataFormat){const t=null==e[2]?null:this.size[0]*e[2],n=null==e[3]?null:this.size[1]*e[3];return[e[0],e[1],t,n]}{const t=null==e[1]?null:this.size[0]*e[1],n=null==e[2]?null:this.size[1]*e[2];return[e[0],t,n,e[3]]}}call(e,t){return r.tidy((()=>{let t=oa(e);const n=t.shape;if("channelsFirst"===this.dataFormat){t=r.transpose(t,[0,2,3,1]);const e=this.size[0]*n[2],s=this.size[1]*n[3],a="nearest"===this.interpolation?r.image.resizeNearestNeighbor(t,[e,s]):r.image.resizeBilinear(t,[e,s]);return r.transpose(a,[0,3,1,2])}{const e=this.size[0]*n[1],s=this.size[1]*n[2];return"nearest"===this.interpolation?r.image.resizeNearestNeighbor(t,[e,s]):r.image.resizeBilinear(t,[e,s])}}))}getConfig(){const e={size:this.size,dataFormat:this.dataFormat,interpolation:this.interpolation},t=super.getConfig();return Object.assign(e,t),e}}Pi.className="UpSampling2D",r.serialization.registerClass(Pi);class Vi extends _i{constructor(e){super(2,e),this.depthwiseKernel=null,this.depthMultiplier=null==e.depthMultiplier?1:e.depthMultiplier,this.depthwiseInitializer=aa(e.depthwiseInitializer||this.DEFAULT_KERNEL_INITIALIZER),this.depthwiseConstraint=La(e.depthwiseConstraint),this.depthwiseRegularizer=yi(e.depthwiseRegularizer)}build(e){if((e=la(e)).length<4)throw new Tn(`Inputs to DepthwiseConv2D should have rank 4. Received input shape: ${JSON.stringify(e)}.`);const t="channelsFirst"===this.dataFormat?1:3;if(null==e[t]||e[t]<0)throw new Tn(`The channel dimension of the inputs to DepthwiseConv2D should be defined, but is not (${e[t]}).`);const n=e[t],s=[this.kernelSize[0],this.kernelSize[1],n,this.depthMultiplier];this.depthwiseKernel=this.addWeight("depthwise_kernel",s,null,this.depthwiseInitializer,this.depthwiseRegularizer,!0,this.depthwiseConstraint),this.useBias?this.bias=this.addWeight("bias",[n*this.depthMultiplier],null,this.biasInitializer,this.biasRegularizer,!0,this.biasConstraint):this.bias=null,this.built=!0}call(e,t){return(0,r.tidy)((()=>{let t=function(e,t,n=[1,1],s="valid",a,i){return(0,r.tidy)((()=>{null==a&&(a="channelsLast"),is(a);let o=Ci(e,a);if(4!==e.rank)throw new Tn(`Input for depthwiseConv2d is required to be 4-D, but is instead ${e.rank}-D`);if(4!==t.rank)throw new Tn(`depthwiseKernel is required to be 4-D, but is instead ${t.rank}-D`);return o=r.depthwiseConv2d(o,t,n,"same"===s?"same":"valid","NHWC",i),"channelsFirst"===a&&(o=r.transpose(o,[0,3,1,2])),o}))}(e=oa(e),this.depthwiseKernel.read(),this.strides,this.padding,this.dataFormat,null);return this.useBias&&(t=Ds(t,this.bias.read(),this.dataFormat)),null!=this.activation&&(t=this.activation.apply(t)),t}))}computeOutputShape(e){e=la(e);const t="channelsFirst"===this.dataFormat?e[2]:e[1],n="channelsFirst"===this.dataFormat?e[3]:e[2],s="channelsFirst"===this.dataFormat?e[1]*this.depthMultiplier:e[3]*this.depthMultiplier,a=Ni(t,this.kernelSize[0],this.padding,this.strides[0]),r=Ni(n,this.kernelSize[1],this.padding,this.strides[1]);return"channelsFirst"===this.dataFormat?[e[0],s,a,r]:[e[0],a,r,s]}getConfig(){const e=super.getConfig();return e.depthMultiplier=this.depthMultiplier,e.depthwiseInitializer=sa(this.depthwiseInitializer),e.depthwiseRegularizer=mi(this.depthwiseRegularizer),e.depthwiseConstraint=Ma(this.depthwiseRegularizer),e}}function Wi(e,t,n,s){if(Array.isArray(e)){if(null!=t||null!=n)throw new Tn("When inputs is an array, neither initialState or constants should be provided");null!=s&&(n=e.slice(e.length-s,e.length),e=e.slice(0,e.length-s)),e.length>1&&(t=e.slice(1,e.length)),e=e[0]}function a(e){return null==e||Array.isArray(e)?e:[e]}return{inputs:e,initialState:t=a(t),constants:n=a(n)}}function Ui(e,t,n,s=!1,a,i,o=!1,l=!1){return r.tidy((()=>{const u=t.shape.length;if(u<3)throw new Tn(`Input should be at least 3D, but is ${u}D.`);const c=[1,0].concat(bs(2,u));if(t=r.transpose(t,c),null!=i)throw new Cn("The rnn() functoin of the deeplearn.js backend does not support constants yet.");o&&console.warn("Backend rnn(): the unroll = true option is not applicable to the imperative deeplearn.js backend."),null!=a&&((a=r.cast(r.cast(a,"bool"),"float32")).rank===u-1&&(a=r.expandDims(a,-1)),a=r.transpose(a,c)),s&&(t=r.reverse(t,0),null!=a&&(a=r.reverse(a,0)));const h=[];let p,d=n;const f=t.shape[0],m=r.unstack(t);let g,y;null!=a&&(g=r.unstack(a));for(let t=0;t<f;++t){const n=m[t],s=r.tidy((()=>e(n,d)));if(null==a)p=s[0],d=s[1];else{const e=r.tidy((()=>{const e=g[t],n=r.sub(r.onesLike(e),e);return{output:r.add(r.mul(s[0],e),r.mul(d[0],n)),newStates:d.map(((t,a)=>r.add(r.mul(s[1][a],e),r.mul(t,n))))}}));p=e.output,d=e.newStates}l&&h.push(p)}if(l){const e=1;y=r.stack(h,e)}return[p,y,d]}))}Vi.className="DepthwiseConv2D",r.serialization.registerClass(Vi);class Gi extends ba{constructor(e){let t;if(super(e),null==e.cell)throw new Tn("cell property is missing for the constructor of RNN.");if(t=Array.isArray(e.cell)?new Qi({cells:e.cell}):e.cell,null==t.stateSize)throw new Tn("The RNN cell should have an attribute `stateSize` (tuple of integers, one integer per RNN state).");this.cell=t,this.returnSequences=null!=e.returnSequences&&e.returnSequences,this.returnState=null!=e.returnState&&e.returnState,this.goBackwards=null!=e.goBackwards&&e.goBackwards,this._stateful=null!=e.stateful&&e.stateful,this.unroll=null!=e.unroll&&e.unroll,this.supportsMasking=!0,this.inputSpec=[new da({ndim:3})],this.stateSpec=null,this.states_=null,this.numConstants=null,this.keptStates=[]}getStates(){return null==this.states_?bs(0,Array.isArray(this.cell.stateSize)?this.cell.stateSize.length:1).map((e=>null)):this.states_}setStates(e){this.states_=e}computeOutputShape(e){ra(e)&&(e=e[0]);let t=this.cell.stateSize;Array.isArray(t)||(t=[t]);const n=t[0];let s;if(s=this.returnSequences?[e[0],e[1],n]:[e[0],n],this.returnState){const n=[];for(const s of t)n.push([e[0],s]);return[s].concat(n)}return s}computeMask(e,t){return r.tidy((()=>{Array.isArray(t)&&(t=t[0]);const e=this.returnSequences?t:null;if(this.returnState){const t=this.states.map((e=>null));return[e].concat(t)}return e}))}get states(){if(null==this.states_){const e=Array.isArray(this.cell.stateSize)?this.cell.stateSize.length:1,t=[];for(let n=0;n<e;++n)t.push(null);return t}return this.states_}set states(e){this.states_=e}build(e){if(null!=this.numConstants)throw new Cn("Constants support is not implemented in RNN yet.");ra(e)&&(e=e[0]);const t=this.stateful?e[0]:null,n=e.slice(2);this.inputSpec[0]=new da({shape:[t,null,...n]});const s=[e[0]].concat(e.slice(2));let a;if(this.cell.build(s),a=Array.isArray(this.cell.stateSize)?this.cell.stateSize:[this.cell.stateSize],null!=this.stateSpec){if(!r.util.arraysEqual(this.stateSpec.map((e=>e.shape[e.shape.length-1])),a))throw new Tn(`An initialState was passed that is not compatible with cell.stateSize. Received stateSpec=${this.stateSpec}; However cell.stateSize is ${this.cell.stateSize}`)}else this.stateSpec=a.map((e=>new da({shape:[null,e]})));this.stateful&&this.resetStates()}resetStates(e,t=!1){(0,r.tidy)((()=>{if(!this.stateful)throw new Sn("Cannot call resetStates() on an RNN Layer that is not stateful.");const n=this.inputSpec[0].shape[0];if(null==n)throw new Tn("If an RNN is stateful, it needs to know its batch size. Specify the batch size of your input tensors: \n- If using a Sequential model, specify the batch size by passing a `batchInputShape` option to your first layer.\n- If using the functional API, specify the batch size by passing a `batchShape` option to your Input layer.");if(null==this.states_)Array.isArray(this.cell.stateSize)?this.states_=this.cell.stateSize.map((e=>r.zeros([n,e]))):this.states_=[r.zeros([n,this.cell.stateSize])];else if(null==e)r.dispose(this.states_),null!=this.keptStates&&(r.dispose(this.keptStates),this.keptStates=[]),Array.isArray(this.cell.stateSize)?this.states_=this.cell.stateSize.map((e=>r.zeros([n,e]))):this.states_[0]=r.zeros([n,this.cell.stateSize]);else{if(Array.isArray(e)||(e=[e]),e.length!==this.states_.length)throw new Tn(`Layer ${this.name} expects ${this.states_.length} state(s), but it received ${e.length} state value(s). Input received: ${e}`);!0===t?this.keptStates.push(this.states_.slice()):r.dispose(this.states_);for(let t=0;t<this.states_.length;++t){const s=e[t],a=Array.isArray(this.cell.stateSize)?this.cell.stateSize[t]:this.cell.stateSize,i=[n,a];if(!r.util.arraysEqual(s.shape,i))throw new Tn(`State ${t} is incompatible with layer ${this.name}: expected shape=${i}, received shape=${s.shape}`);this.states_[t]=s}}this.states_=this.states_.map((e=>r.keep(e.clone())))}))}apply(e,t){let n=null==t?null:t.initialState,s=null==t?null:t.constants;null==t&&(t={});const a=Wi(e,n,s,this.numConstants);e=a.inputs,n=a.initialState,s=a.constants;let r=[],i=[];if(null!=n){t.initialState=n,r=r.concat(n),this.stateSpec=[];for(const e of n)this.stateSpec.push(new da({shape:e.shape}));i=i.concat(this.stateSpec)}if(null!=s&&(t.constants=s,r=r.concat(s),this.numConstants=s.length),r[0]instanceof fa){const n=[e].concat(r),s=this.inputSpec.concat(i),a=this.inputSpec;this.inputSpec=s;const o=super.apply(n,t);return this.inputSpec=a,o}return super.apply(e,t)}call(e,t){return(0,r.tidy)((()=>{const n=null==t?null:t.mask,s=null==t?null:t.training;let a=null==t?null:t.initialState;e=oa(e),null==a&&(a=this.stateful?this.states_:this.getInitialState(e));const r=Array.isArray(this.cell.stateSize)?this.cell.stateSize.length:1;if(a.length!==r)throw new Tn(`RNN Layer has ${r} state(s) but was passed ${a.length} initial state(s).`);this.unroll&&console.warn("Ignoring unroll = true for RNN layer, due to imperative backend.");const i={training:s},o=Ui(((e,t)=>{const n=this.cell.call([e].concat(t),i);return[n[0],n.slice(1)]}),e,a,this.goBackwards,n,null,this.unroll,this.returnSequences),l=o[0],u=o[1],c=o[2];this.stateful&&this.resetStates(c,s);const h=this.returnSequences?u:l;return this.returnState?[h].concat(c):h}))}getInitialState(e){return(0,r.tidy)((()=>{let t=r.zeros(e.shape);return t=r.sum(t,[1,2]),t=ks(t),Array.isArray(this.cell.stateSize)?this.cell.stateSize.map((e=>e>1?$s(t,[1,e]):t)):this.cell.stateSize>1?[$s(t,[1,this.cell.stateSize])]:[t]}))}get trainableWeights(){return this.trainable?this.cell.trainableWeights:[]}get nonTrainableWeights(){return this.trainable?this.cell.nonTrainableWeights:this.cell.weights}setFastWeightInitDuringBuild(e){super.setFastWeightInitDuringBuild(e),null!=this.cell&&this.cell.setFastWeightInitDuringBuild(e)}getConfig(){const e=super.getConfig(),t={returnSequences:this.returnSequences,returnState:this.returnState,goBackwards:this.goBackwards,stateful:this.stateful,unroll:this.unroll};null!=this.numConstants&&(t.numConstants=this.numConstants);const n=this.cell.getConfig();return this.getClassName()===Gi.className&&(t.cell={className:this.cell.getClassName(),config:n}),Object.assign({},n,e,t)}static fromConfig(e,t,n={}){const s=Ya(t.cell,n);return new e(Object.assign(t,{cell:s}))}}Gi.className="RNN",r.serialization.registerClass(Gi);class Hi extends ba{}class qi extends Hi{constructor(e){super(e),this.DEFAULT_ACTIVATION="tanh",this.DEFAULT_KERNEL_INITIALIZER="glorotNormal",this.DEFAULT_RECURRENT_INITIALIZER="orthogonal",this.DEFAULT_BIAS_INITIALIZER="zeros",this.units=e.units,Xn(this.units,"units"),this.activation=hi(null==e.activation?this.DEFAULT_ACTIVATION:e.activation),this.useBias=null==e.useBias||e.useBias,this.kernelInitializer=aa(e.kernelInitializer||this.DEFAULT_KERNEL_INITIALIZER),this.recurrentInitializer=aa(e.recurrentInitializer||this.DEFAULT_RECURRENT_INITIALIZER),this.biasInitializer=aa(e.biasInitializer||this.DEFAULT_BIAS_INITIALIZER),this.kernelRegularizer=yi(e.kernelRegularizer),this.recurrentRegularizer=yi(e.recurrentRegularizer),this.biasRegularizer=yi(e.biasRegularizer),this.kernelConstraint=La(e.kernelConstraint),this.recurrentConstraint=La(e.recurrentConstraint),this.biasConstraint=La(e.biasConstraint),this.dropout=gs([1,ys([0,null==e.dropout?0:e.dropout])]),this.recurrentDropout=gs([1,ys([0,null==e.recurrentDropout?0:e.recurrentDropout])]),this.dropoutFunc=e.dropoutFunc,this.stateSize=this.units,this.dropoutMask=null,this.recurrentDropoutMask=null}build(e){e=la(e),this.kernel=this.addWeight("kernel",[e[e.length-1],this.units],null,this.kernelInitializer,this.kernelRegularizer,!0,this.kernelConstraint),this.recurrentKernel=this.addWeight("recurrent_kernel",[this.units,this.units],null,this.recurrentInitializer,this.recurrentRegularizer,!0,this.recurrentConstraint),this.useBias?this.bias=this.addWeight("bias",[this.units],null,this.biasInitializer,this.biasRegularizer,!0,this.biasConstraint):this.bias=null,this.built=!0}call(e,t){return(0,r.tidy)((()=>{if(2!==e.length)throw new Tn(`SimpleRNNCell expects 2 input Tensors, got ${e.length}.`);let n=e[1];e=e[0];const s=null!=t.training&&t.training;let a;0<this.dropout&&this.dropout<1&&null==this.dropoutMask&&(this.dropoutMask=Ji({ones:()=>r.onesLike(e),rate:this.dropout,training:s,dropoutFunc:this.dropoutFunc})),0<this.recurrentDropout&&this.recurrentDropout<1&&null==this.recurrentDropoutMask&&(this.recurrentDropoutMask=Ji({ones:()=>r.onesLike(n),rate:this.recurrentDropout,training:s,dropoutFunc:this.dropoutFunc}));const i=this.dropoutMask,o=this.recurrentDropoutMask;a=_s(null!=i?r.mul(e,i):e,this.kernel.read()),null!=this.bias&&(a=Ds(a,this.bias.read())),null!=o&&(n=r.mul(n,o));let l=r.add(a,_s(n,this.recurrentKernel.read()));return null!=this.activation&&(l=this.activation.apply(l)),[l,l]}))}getConfig(){const e=super.getConfig(),t={units:this.units,activation:ui(this.activation),useBias:this.useBias,kernelInitializer:sa(this.kernelInitializer),recurrentInitializer:sa(this.recurrentInitializer),biasInitializer:sa(this.biasInitializer),kernelRegularizer:mi(this.kernelRegularizer),recurrentRegularizer:mi(this.recurrentRegularizer),biasRegularizer:mi(this.biasRegularizer),activityRegularizer:mi(this.activityRegularizer),kernelConstraint:Ma(this.kernelConstraint),recurrentConstraint:Ma(this.recurrentConstraint),biasConstraint:Ma(this.biasConstraint),dropout:this.dropout,recurrentDropout:this.recurrentDropout};return Object.assign({},e,t)}}qi.className="SimpleRNNCell",r.serialization.registerClass(qi);class Xi extends Gi{constructor(e){e.cell=new qi(e),super(e)}call(e,t){return(0,r.tidy)((()=>{null!=this.cell.dropoutMask&&(r.dispose(this.cell.dropoutMask),this.cell.dropoutMask=null),null!=this.cell.recurrentDropoutMask&&(r.dispose(this.cell.recurrentDropoutMask),this.cell.recurrentDropoutMask=null);const n=null==t?null:t.mask,s=null==t?null:t.training,a=null==t?null:t.initialState;return super.call(e,{mask:n,training:s,initialState:a})}))}static fromConfig(e,t){return new e(t)}}Xi.className="SimpleRNN",r.serialization.registerClass(Xi);class ji extends Hi{constructor(e){if(super(e),this.DEFAULT_ACTIVATION="tanh",this.DEFAULT_RECURRENT_ACTIVATION="hardSigmoid",this.DEFAULT_KERNEL_INITIALIZER="glorotNormal",this.DEFAULT_RECURRENT_INITIALIZER="orthogonal",this.DEFAULT_BIAS_INITIALIZER="zeros",e.resetAfter)throw new Tn("GRUCell does not support reset_after parameter set to true.");this.units=e.units,Xn(this.units,"units"),this.activation=hi(void 0===e.activation?this.DEFAULT_ACTIVATION:e.activation),this.recurrentActivation=hi(void 0===e.recurrentActivation?this.DEFAULT_RECURRENT_ACTIVATION:e.recurrentActivation),this.useBias=null==e.useBias||e.useBias,this.kernelInitializer=aa(e.kernelInitializer||this.DEFAULT_KERNEL_INITIALIZER),this.recurrentInitializer=aa(e.recurrentInitializer||this.DEFAULT_RECURRENT_INITIALIZER),this.biasInitializer=aa(e.biasInitializer||this.DEFAULT_BIAS_INITIALIZER),this.kernelRegularizer=yi(e.kernelRegularizer),this.recurrentRegularizer=yi(e.recurrentRegularizer),this.biasRegularizer=yi(e.biasRegularizer),this.kernelConstraint=La(e.kernelConstraint),this.recurrentConstraint=La(e.recurrentConstraint),this.biasConstraint=La(e.biasConstraint),this.dropout=gs([1,ys([0,null==e.dropout?0:e.dropout])]),this.recurrentDropout=gs([1,ys([0,null==e.recurrentDropout?0:e.recurrentDropout])]),this.dropoutFunc=e.dropoutFunc,this.implementation=e.implementation,this.stateSize=this.units,this.dropoutMask=null,this.recurrentDropoutMask=null}build(e){const t=(e=la(e))[e.length-1];this.kernel=this.addWeight("kernel",[t,3*this.units],null,this.kernelInitializer,this.kernelRegularizer,!0,this.kernelConstraint),this.recurrentKernel=this.addWeight("recurrent_kernel",[this.units,3*this.units],null,this.recurrentInitializer,this.recurrentRegularizer,!0,this.recurrentConstraint),this.useBias?this.bias=this.addWeight("bias",[3*this.units],null,this.biasInitializer,this.biasRegularizer,!0,this.biasConstraint):this.bias=null,this.built=!0}call(e,t){return(0,r.tidy)((()=>{if(2!==e.length)throw new Tn(`GRUCell expects 2 input Tensors (inputs, h, c), got ${e.length}.`);const n=null!=t.training&&t.training;let s=e[1];e=e[0],0<this.dropout&&this.dropout<1&&null==this.dropoutMask&&(this.dropoutMask=Ji({ones:()=>r.onesLike(e),rate:this.dropout,training:n,count:3,dropoutFunc:this.dropoutFunc})),0<this.recurrentDropout&&this.recurrentDropout<1&&null==this.recurrentDropoutMask&&(this.recurrentDropoutMask=Ji({ones:()=>r.onesLike(s),rate:this.recurrentDropout,training:n,count:3,dropoutFunc:this.dropoutFunc}));const a=this.dropoutMask,i=this.recurrentDropoutMask;let o,l,u;0<this.dropout&&this.dropout<1&&(e=r.mul(e,a[0]));let c=_s(e,this.kernel.read());this.useBias&&(c=Ds(c,this.bias.read())),0<this.recurrentDropout&&this.recurrentDropout<1&&(s=r.mul(s,i[0]));const h=this.recurrentKernel.read(),[p,d]=r.split(h,[2*this.units,this.units],h.rank-1),f=_s(s,p),[m,g,y]=r.split(c,3,c.rank-1),[b,x]=r.split(f,2,f.rank-1);o=this.recurrentActivation.apply(r.add(m,b)),l=this.recurrentActivation.apply(r.add(g,x));const v=_s(r.mul(l,s),d);u=this.activation.apply(r.add(y,v));const w=r.add(r.mul(o,s),r.mul(r.add(1,r.neg(o)),u));return[w,w]}))}getConfig(){const e=super.getConfig(),t={units:this.units,activation:ui(this.activation),recurrentActivation:ui(this.recurrentActivation),useBias:this.useBias,kernelInitializer:sa(this.kernelInitializer),recurrentInitializer:sa(this.recurrentInitializer),biasInitializer:sa(this.biasInitializer),kernelRegularizer:mi(this.kernelRegularizer),recurrentRegularizer:mi(this.recurrentRegularizer),biasRegularizer:mi(this.biasRegularizer),activityRegularizer:mi(this.activityRegularizer),kernelConstraint:Ma(this.kernelConstraint),recurrentConstraint:Ma(this.recurrentConstraint),biasConstraint:Ma(this.biasConstraint),dropout:this.dropout,recurrentDropout:this.recurrentDropout,implementation:this.implementation,resetAfter:!1};return Object.assign({},e,t)}}ji.className="GRUCell",r.serialization.registerClass(ji);class Ki extends Gi{constructor(e){0===e.implementation&&console.warn("`implementation=0` has been deprecated, and now defaults to `implementation=1`. Please update your layer call."),e.cell=new ji(e),super(e)}call(e,t){return(0,r.tidy)((()=>{null!=this.cell.dropoutMask&&(r.dispose(this.cell.dropoutMask),this.cell.dropoutMask=null),null!=this.cell.recurrentDropoutMask&&(r.dispose(this.cell.recurrentDropoutMask),this.cell.recurrentDropoutMask=null);const n=null==t?null:t.mask,s=null==t?null:t.training,a=null==t?null:t.initialState;return super.call(e,{mask:n,training:s,initialState:a})}))}static fromConfig(e,t){return 0===t.implmentation&&(t.implementation=1),new e(t)}}Ki.className="GRU",r.serialization.registerClass(Ki);class Yi extends Hi{constructor(e){super(e),this.DEFAULT_ACTIVATION="tanh",this.DEFAULT_RECURRENT_ACTIVATION="hardSigmoid",this.DEFAULT_KERNEL_INITIALIZER="glorotNormal",this.DEFAULT_RECURRENT_INITIALIZER="orthogonal",this.DEFAULT_BIAS_INITIALIZER="zeros",this.units=e.units,Xn(this.units,"units"),this.activation=hi(void 0===e.activation?this.DEFAULT_ACTIVATION:e.activation),this.recurrentActivation=hi(void 0===e.recurrentActivation?this.DEFAULT_RECURRENT_ACTIVATION:e.recurrentActivation),this.useBias=null==e.useBias||e.useBias,this.kernelInitializer=aa(e.kernelInitializer||this.DEFAULT_KERNEL_INITIALIZER),this.recurrentInitializer=aa(e.recurrentInitializer||this.DEFAULT_RECURRENT_INITIALIZER),this.biasInitializer=aa(e.biasInitializer||this.DEFAULT_BIAS_INITIALIZER),this.unitForgetBias=e.unitForgetBias,this.kernelRegularizer=yi(e.kernelRegularizer),this.recurrentRegularizer=yi(e.recurrentRegularizer),this.biasRegularizer=yi(e.biasRegularizer),this.kernelConstraint=La(e.kernelConstraint),this.recurrentConstraint=La(e.recurrentConstraint),this.biasConstraint=La(e.biasConstraint),this.dropout=gs([1,ys([0,null==e.dropout?0:e.dropout])]),this.recurrentDropout=gs([1,ys([0,null==e.recurrentDropout?0:e.recurrentDropout])]),this.dropoutFunc=e.dropoutFunc,this.implementation=e.implementation,this.stateSize=[this.units,this.units],this.dropoutMask=null,this.recurrentDropoutMask=null}build(e){var t;const n=(e=la(e))[e.length-1];let s;if(this.kernel=this.addWeight("kernel",[n,4*this.units],null,this.kernelInitializer,this.kernelRegularizer,!0,this.kernelConstraint),this.recurrentKernel=this.addWeight("recurrent_kernel",[this.units,4*this.units],null,this.recurrentInitializer,this.recurrentRegularizer,!0,this.recurrentConstraint),this.useBias){if(this.unitForgetBias){const e=this.biasInitializer,n=this.units;s=new((t=class extends Bs{apply(t,s){const a=e.apply([n]),r=(new Vs).apply([n]),i=e.apply([2*n]);return Cs(Cs(a,r),i)}}).className="CustomInit",t)}else s=this.biasInitializer;this.bias=this.addWeight("bias",[4*this.units],null,s,this.biasRegularizer,!0,this.biasConstraint)}else this.bias=null;this.built=!0}call(e,t){return(0,r.tidy)((()=>{const n=null!=t.training&&t.training;if(3!==e.length)throw new Tn(`LSTMCell expects 3 input Tensors (inputs, h, c), got ${e.length}.`);let s=e[1];const a=e[2];e=e[0],0<this.dropout&&this.dropout<1&&null==this.dropoutMask&&(this.dropoutMask=Ji({ones:()=>r.onesLike(e),rate:this.dropout,training:n,count:4,dropoutFunc:this.dropoutFunc})),0<this.recurrentDropout&&this.recurrentDropout<1&&null==this.recurrentDropoutMask&&(this.recurrentDropoutMask=Ji({ones:()=>r.onesLike(s),rate:this.recurrentDropout,training:n,count:4,dropoutFunc:this.dropoutFunc}));const i=this.dropoutMask,o=this.recurrentDropoutMask;let l,u,c,h;0<this.dropout&&this.dropout<1&&(e=r.mul(e,i[0]));let p=_s(e,this.kernel.read());0<this.recurrentDropout&&this.recurrentDropout<1&&(s=r.mul(s,o[0])),p=r.add(p,_s(s,this.recurrentKernel.read())),this.useBias&&(p=Ds(p,this.bias.read()));const[d,f,m,g]=r.split(p,4,p.rank-1);l=this.recurrentActivation.apply(d),u=this.recurrentActivation.apply(f),c=r.add(r.mul(u,a),r.mul(l,this.activation.apply(m))),h=this.recurrentActivation.apply(g);const y=r.mul(h,this.activation.apply(c));return[y,y,c]}))}getConfig(){const e=super.getConfig(),t={units:this.units,activation:ui(this.activation),recurrentActivation:ui(this.recurrentActivation),useBias:this.useBias,kernelInitializer:sa(this.kernelInitializer),recurrentInitializer:sa(this.recurrentInitializer),biasInitializer:sa(this.biasInitializer),unitForgetBias:this.unitForgetBias,kernelRegularizer:mi(this.kernelRegularizer),recurrentRegularizer:mi(this.recurrentRegularizer),biasRegularizer:mi(this.biasRegularizer),activityRegularizer:mi(this.activityRegularizer),kernelConstraint:Ma(this.kernelConstraint),recurrentConstraint:Ma(this.recurrentConstraint),biasConstraint:Ma(this.biasConstraint),dropout:this.dropout,recurrentDropout:this.recurrentDropout,implementation:this.implementation};return Object.assign({},e,t)}}Yi.className="LSTMCell",r.serialization.registerClass(Yi);class Zi extends Gi{constructor(e){0===e.implementation&&console.warn("`implementation=0` has been deprecated, and now defaults to `implementation=1`. Please update your layer call."),e.cell=new Yi(e),super(e)}call(e,t){return(0,r.tidy)((()=>{null!=this.cell.dropoutMask&&(r.dispose(this.cell.dropoutMask),this.cell.dropoutMask=null),null!=this.cell.recurrentDropoutMask&&(r.dispose(this.cell.recurrentDropoutMask),this.cell.recurrentDropoutMask=null);const n=null==t?null:t.mask,s=null==t?null:t.training,a=null==t?null:t.initialState;return super.call(e,{mask:n,training:s,initialState:a})}))}static fromConfig(e,t){return 0===t.implmentation&&(t.implementation=1),new e(t)}}Zi.className="LSTM",r.serialization.registerClass(Zi);class Qi extends Hi{constructor(e){super(e),this.cells=e.cells}get stateSize(){const e=[];for(const t of this.cells.slice().reverse())Array.isArray(t.stateSize)?e.push(...t.stateSize):e.push(t.stateSize);return e}call(e,t){return(0,r.tidy)((()=>{let n=e.slice(1);const s=[];for(const e of this.cells.slice().reverse())Array.isArray(e.stateSize)?s.push(n.splice(0,e.stateSize.length)):s.push(n.splice(0,1));s.reverse();const a=[];let r;for(let i=0;i<this.cells.length;++i){const o=this.cells[i];n=s[i],r=0===i?[e[0]].concat(n):[r[0]].concat(n),r=o.call(r,t),a.push(r.slice(1))}n=[];for(const e of a.slice().reverse())n.push(...e);return[r[0]].concat(n)}))}build(e){let t;ra(e)&&(e=e[0]),this.cells.forEach(((n,s)=>{cs(`RNNCell_${s}`,(()=>{n.build(e),t=Array.isArray(n.stateSize)?n.stateSize[0]:n.stateSize,e=[e[0],t]}))})),this.built=!0}getConfig(){const e=super.getConfig(),t={cells:this.cells.map((e=>({className:e.getClassName(),config:e.getConfig()})))};return Object.assign({},e,t)}static fromConfig(e,t,n={}){const s=[];for(const e of t.cells)s.push(Ya(e,n));return new e({cells:s})}get trainableWeights(){if(!this.trainable)return[];const e=[];for(const t of this.cells)e.push(...t.trainableWeights);return e}get nonTrainableWeights(){const e=[];for(const t of this.cells)e.push(...t.nonTrainableWeights);if(!this.trainable){const t=[];for(const e of this.cells)t.push(...e.trainableWeights);return t.concat(e)}return e}getWeights(){const e=[];for(const t of this.cells)e.push(...t.weights);return ha(e)}setWeights(e){const t=[];for(const n of this.cells){const s=n.weights.length,a=e.splice(s);for(let e=0;e<n.weights.length;++e)t.push([n.weights[e],a[e]])}pa(t)}}function Ji(e){const{ones:t,rate:n,training:s=!1,count:a=1,dropoutFunc:i}=e,o=()=>null!=i?i(t(),n):Os(t(),n),l=()=>Ms(o,t,s);return!a||a<=1?r.keep(l().clone()):Array(a).fill(void 0).map(l).map((e=>r.keep(e.clone())))}Qi.className="StackedRNNCells",r.serialization.registerClass(Qi);class eo extends Gi{constructor(e){if(e.unroll)throw new Cn("Unrolling is not possible with convolutional RNNs.");if(Array.isArray(e.cell))throw new Cn("It is not possible at the moment to stack convolutional cells.");super(e),this.inputSpec=[new da({ndim:5})]}call(e,t){return r.tidy((()=>{if(null!=this.cell.dropoutMask&&(r.dispose(this.cell.dropoutMask),this.cell.dropoutMask=null),null!=this.cell.recurrentDropoutMask&&(r.dispose(this.cell.recurrentDropoutMask),this.cell.recurrentDropoutMask=null),t&&t.constants)throw new Tn("ConvRNN2D cell does not support constants");const n=null==t?null:t.mask,s=null==t?null:t.training,a=null==t?null:t.initialState;return super.call(e,{mask:n,training:s,initialState:a})}))}computeOutputShape(e){let t=this.computeSingleOutputShape(e);return this.returnSequences||(t=[t[0],...t.slice(2)]),this.returnState&&(t=[t,...Array(2).fill([e[0],...t.slice(-3)])]),t}getInitialState(e){return r.tidy((()=>{const{stateSize:t}=this.cell,n=e.shape,s=this.computeSingleOutputShape(n),a=[s[0],...s.slice(2)],i=r.zeros(a);return Array.isArray(t)?Array(t.length).fill(i):[i]}))}resetStates(e,t=!1){r.tidy((()=>{if(!this.stateful)throw new Sn("Cannot call resetStates() on an RNN Layer that is not stateful.");const n=this.inputSpec[0].shape,s=this.computeSingleOutputShape(n),a=[s[0],...s.slice(2)];if(null==n[0])throw new Tn("If an RNN is stateful, it needs to know its batch size. Specify the batch size of your input tensors: \n- If using a Sequential model, specify the batch size by passing a `batchInputShape` option to your first layer.\n- If using the functional API, specify the batch size by passing a `batchShape` option to your Input layer.");if(null==this.getStates())Array.isArray(this.cell.stateSize)?this.states_=this.cell.stateSize.map((()=>r.zeros(a))):this.states_=[r.zeros(a)];else if(null==e)r.dispose(this.states_),null!=this.keptStates&&(r.dispose(this.keptStates),this.keptStates=[]),Array.isArray(this.cell.stateSize)?this.states_=this.cell.stateSize.map((()=>r.zeros(a))):this.states_[0]=r.zeros(a);else{if(Array.isArray(e)||(e=[e]),e.length!==this.states_.length)throw new Tn(`Layer ${this.name} expects ${this.states_.length} state(s), but it received ${e.length} state value(s). Input received: ${e}`);t?this.keptStates.push(this.states_.slice()):r.dispose(this.states_);for(let t=0;t<this.states_.length;++t){const n=e[t],s=a;if(!r.util.arraysEqual(n.shape,s))throw new Tn(`State ${t} is incompatible with layer ${this.name}: expected shape=${s}, received shape=${n.shape}`);this.states_[t]=n}}this.states_=this.states_.map((e=>r.keep(e.clone())))}))}computeSingleOutputShape(e){const{dataFormat:t,filters:n,kernelSize:s,padding:a,strides:r,dilationRate:i}=this.cell,o="channelsFirst"===t,l=e[o?3:2],u=e[o?4:3],c=Ni(l,s[0],a,r[0],i[0]),h=Ni(u,s[1],a,r[1],i[1]);return[...e.slice(0,2),...o?[n,c,h]:[c,h,n]]}}eo.className="ConvRNN2D";class to extends Yi{constructor(e){const{filters:t,kernelSize:n,strides:s,padding:a,dataFormat:r,dilationRate:i}=e;super(Object.assign({},e,{units:t})),this.filters=t,Xn(this.filters,"filters"),this.kernelSize=Si(n,2,"kernelSize"),this.kernelSize.forEach((e=>Xn(e,"kernelSize"))),this.strides=Si(s||1,2,"strides"),this.strides.forEach((e=>Xn(e,"strides"))),this.padding=a||"valid",os(this.padding),this.dataFormat=r||"channelsLast",is(this.dataFormat),this.dilationRate=Si(i||1,2,"dilationRate"),this.dilationRate.forEach((e=>Xn(e,"dilationRate")))}build(e){var t;e=la(e);const n="channelsFirst"===this.dataFormat?1:e.length-1;if(null==e[n])throw new Tn(`The channel dimension of the input should be defined. Found ${e[n]}`);const s=e[n],a=this.kernelSize.concat([s,4*this.filters]);this.kernel=this.addWeight("kernel",a,null,this.kernelInitializer,this.kernelRegularizer,!0,this.kernelConstraint);const i=this.kernelSize.concat([this.filters,4*this.filters]);if(this.recurrentKernel=this.addWeight("recurrent_kernel",i,null,this.recurrentInitializer,this.recurrentRegularizer,!0,this.recurrentConstraint),this.useBias){let e;if(this.unitForgetBias){const n=this.biasInitializer,s=this.filters;e=new((t=class extends Bs{apply(e,t){return Ts([n.apply([s]),r.ones([s]),n.apply([2*s])])}}).className="CustomInit",t)}else e=this.biasInitializer;this.bias=this.addWeight("bias",[4*this.filters],null,e,this.biasRegularizer,!0,this.biasConstraint)}this.built=!0}call(e,t){return r.tidy((()=>{if(3!==e.length)throw new Tn(`ConvLSTM2DCell expects 3 input Tensors (inputs, h, c), got ${e.length}.`);const n=t.training||!1,s=e[0],a=e[1],i=e[2];0<this.dropout&&this.dropout<1&&null==this.dropoutMask&&(this.dropoutMask=Ji({ones:()=>r.onesLike(s),rate:this.dropout,training:n,count:4,dropoutFunc:this.dropoutFunc}));const o=this.dropoutMask,l=(e,t,n)=>t&&t[n]?r.mul(t[n],e):e;let u=l(s,o,0),c=l(s,o,1),h=l(s,o,2),p=l(s,o,3);0<this.recurrentDropout&&this.recurrentDropout<1&&null==this.recurrentDropoutMask&&(this.recurrentDropoutMask=Ji({ones:()=>r.onesLike(a),rate:this.recurrentDropout,training:n,count:4,dropoutFunc:this.dropoutFunc}));const d=this.recurrentDropoutMask;let f=l(a,d,0),m=l(a,d,1),g=l(a,d,2),y=l(a,d,3);const[b,x,v,w]=r.split(this.kernel.read(),4,3),[k,I,S,N]=this.useBias?r.split(this.bias.read(),4):[null,null,null,null];u=this.inputConv(u,b,k,this.padding),c=this.inputConv(c,x,I,this.padding),h=this.inputConv(h,v,S,this.padding),p=this.inputConv(p,w,N,this.padding);const[T,C,$,E]=r.split(this.recurrentKernel.read(),4,3);f=this.recurrentConv(f,T),m=this.recurrentConv(m,C),g=this.recurrentConv(g,$),y=this.recurrentConv(y,E);const _=this.recurrentActivation.apply(r.add(u,f)),A=this.recurrentActivation.apply(r.add(c,m)),R=r.add(r.mul(A,i),r.mul(_,this.activation.apply(r.add(h,g)))),F=r.mul(this.recurrentActivation.apply(r.add(p,y)),this.activation.apply(R));return[F,F,R]}))}getConfig(){const e=super.getConfig(),{units:t}=e,n=function(e,t){var n={};for(var s in e)Object.prototype.hasOwnProperty.call(e,s)&&t.indexOf(s)<0&&(n[s]=e[s]);if(null!=e&&"function"==typeof Object.getOwnPropertySymbols){var a=0;for(s=Object.getOwnPropertySymbols(e);a<s.length;a++)t.indexOf(s[a])<0&&Object.prototype.propertyIsEnumerable.call(e,s[a])&&(n[s[a]]=e[s[a]])}return n}(e,["units"]),s={filters:this.filters,kernelSize:this.kernelSize,padding:this.padding,dataFormat:this.dataFormat,dilationRate:this.dilationRate,strides:this.strides};return Object.assign({},n,s)}inputConv(e,t,n,s){const a=r.conv2d(e,t,this.strides,s||"valid","channelsFirst"===this.dataFormat?"NCHW":"NHWC",this.dilationRate);return n?Ds(a,n,this.dataFormat):a}recurrentConv(e,t){return r.conv2d(e,t,1,"same","channelsFirst"===this.dataFormat?"NCHW":"NHWC")}}to.className="ConvLSTM2DCell",r.serialization.registerClass(to);class no extends eo{constructor(e){const t=new to(e);super(Object.assign({},e,{cell:t}))}static fromConfig(e,t){return new e(t)}}no.className="ConvLSTM2D",r.serialization.registerClass(no);class so extends ba{constructor(e){super(e),this.rate=Math.max(Math.min(e.rate,1),0),this.noiseShape=e.noiseShape,this.seed=e.seed,this.supportsMasking=!0}getNoiseShape(e){if(null==this.noiseShape)return this.noiseShape;const t=e.shape,n=[];for(let e=0;e<this.noiseShape.length;++e)n.push(null==this.noiseShape[e]?t[e]:this.noiseShape[e]);return n}call(e,t){return(0,r.tidy)((()=>{this.invokeCallHook(e,t);const n=oa(e);if(0<this.rate&&this.rate<1){const e=null!=t.training&&t.training,s=this.getNoiseShape(n);return Ms((()=>Os(n,this.rate,s,this.seed)),(()=>n),e)}return e}))}getConfig(){const e={rate:this.rate,noiseShape:this.noiseShape,seed:this.seed},t=super.getConfig();return Object.assign(e,t),e}dispose(){return super.dispose()}}so.className="Dropout",r.serialization.registerClass(so);class ao extends so{constructor(e){super(e),this.inputSpec=[{ndim:3}]}getNoiseShape(e){const t=e.shape;return[t[0],1,t[2]]}}ao.className="SpatialDropout1D",r.serialization.registerClass(ao);class ro extends ba{constructor(e){if(super(e),this.activation=null,this.useBias=!0,this.kernel=null,this.bias=null,this.DEFAULT_KERNEL_INITIALIZER="glorotNormal",this.DEFAULT_BIAS_INITIALIZER="zeros",null==e.batchInputShape&&null==e.inputShape&&null!=e.inputDim){let t=null;null!=e.batchSize&&(t=e.batchSize),this.batchInputShape=[t,e.inputDim]}this.units=e.units,Xn(this.units,"units"),this.activation=hi(e.activation),null!=e.useBias&&(this.useBias=e.useBias),this.kernelInitializer=aa(e.kernelInitializer||this.DEFAULT_KERNEL_INITIALIZER),this.biasInitializer=aa(e.biasInitializer||this.DEFAULT_BIAS_INITIALIZER),this.kernelConstraint=La(e.kernelConstraint),this.biasConstraint=La(e.biasConstraint),this.kernelRegularizer=yi(e.kernelRegularizer),this.biasRegularizer=yi(e.biasRegularizer),this.activityRegularizer=yi(e.activityRegularizer),this.supportsMasking=!0,this.inputSpec=[{minNDim:2}]}build(e){const t=(e=la(e))[e.length-1];null==this.kernel&&(this.kernel=this.addWeight("kernel",[t,this.units],null,this.kernelInitializer,this.kernelRegularizer,!0,this.kernelConstraint),this.useBias&&(this.bias=this.addWeight("bias",[this.units],null,this.biasInitializer,this.biasRegularizer,!0,this.biasConstraint))),this.inputSpec=[{minNDim:2,axes:{[-1]:t}}],this.built=!0}computeOutputShape(e){const t=(e=la(e)).slice();return t[t.length-1]=this.units,t}call(e,t){return(0,r.tidy)((()=>{this.invokeCallHook(e,t);const n=oa(e),s=Kn(this.activation.getClassName());let a;return null!=s?a=_s(n,this.kernel.read(),s,this.bias?this.bias.read():null):(a=_s(n,this.kernel.read()),null!=this.bias&&(a=Ds(a,this.bias.read())),null!=this.activation&&(a=this.activation.apply(a))),a}))}getConfig(){const e={units:this.units,activation:ui(this.activation),useBias:this.useBias,kernelInitializer:sa(this.kernelInitializer),biasInitializer:sa(this.biasInitializer),kernelRegularizer:mi(this.kernelRegularizer),biasRegularizer:mi(this.biasRegularizer),activityRegularizer:mi(this.activityRegularizer),kernelConstraint:Ma(this.kernelConstraint),biasConstraint:Ma(this.biasConstraint)},t=super.getConfig();return Object.assign(e,t),e}}ro.className="Dense",r.serialization.registerClass(ro);class io extends ba{constructor(e){super(e=e||{}),this.inputSpec=[{minNDim:3}],this.dataFormat=e.dataFormat}computeOutputShape(e){e=la(e);for(const t of e.slice(1))if(null==t)throw new Tn(`The shape of the input to "Flatten" is not fully defined (got ${e.slice(1)}). Make sure to pass a complete "input_shape" or "batch_input_shape" argument to the first layer in your model.`);return[e[0],ms(e,1)]}call(e,t){return(0,r.tidy)((()=>{this.invokeCallHook(e,t);let n=oa(e);if("channelsFirst"===this.dataFormat&&n.rank>1){const e=[0];for(let t=2;t<n.rank;++t)e.push(t);e.push(1),n=(0,r.transpose)(n,e)}return function(e){if(e.rank<=1)throw new Tn(`batchFlatten requires a minimum rank of 2. Got rank: ${e.rank}.`);const t=[e.shape[0],ms(e.shape,1)];return r.reshape(e,t)}(n)}))}getConfig(){const e={};null!=this.dataFormat&&(e.dataFormat=this.dataFormat);const t=super.getConfig();return Object.assign(e,t),e}}io.className="Flatten",r.serialization.registerClass(io);class oo extends ba{constructor(e){super(e),this.supportsMasking=!0,this.activation=hi(e.activation)}call(e,t){return(0,r.tidy)((()=>{this.invokeCallHook(e,t);const n=oa(e);return this.activation.apply(n)}))}getConfig(){const e={activation:ui(this.activation)},t=super.getConfig();return Object.assign(e,t),e}}oo.className="Activation",r.serialization.registerClass(oo);class lo extends ba{constructor(e){super(e),this.n=e.n,this.inputSpec=[{ndim:2}]}computeOutputShape(e){return[e[0],this.n,e[1]]}call(e,t){return(0,r.tidy)((()=>{return e=oa(e),t=e,n=this.n,(0,r.tidy)((()=>{if(2!==t.shape.length)throw new Tn(`repeat() expects a rank-2 tensor, but received a rank-${t.shape.length} tensor.`);return $s(ks(t,1),[1,n,1])}));var t,n}))}getConfig(){const e={n:this.n},t=super.getConfig();return Object.assign(e,t),e}}lo.className="RepeatVector",r.serialization.registerClass(lo);class uo extends ba{constructor(e){super(e),this.targetShape=e.targetShape;for(let e=0;e<this.targetShape.length;++e)this.isUnknown(this.targetShape[e])&&(this.targetShape[e]=null)}isUnknown(e){return e<0||null==e}fixUnknownDimension(e,t){const n="Total size of new array must be unchanged.",s=t.slice();let a=1,r=null;for(let e=0;e<s.length;++e){const t=s[e];if(this.isUnknown(t)){if(null!==r)throw new Tn("Can only specifiy one unknown dimension.");r=e}else a*=t}const i=ms(e);if(null!==r){if(0===a||i%a!=0)throw new Tn(n);s[r]=i/a}else if(i!==a)throw new Tn(n);return s}computeOutputShape(e){let t=!1;for(let n=0;n<e.length;++n)if(this.isUnknown(e[n])){t=!0;break}return t?e.slice(0,1).concat(this.targetShape):e.slice(0,1).concat(this.fixUnknownDimension(e.slice(1),this.targetShape))}call(e,t){return(0,r.tidy)((()=>{this.invokeCallHook(e,t);const n=oa(e),s=n.shape,a=s.slice(0,1).concat(this.fixUnknownDimension(s.slice(1),this.targetShape));return(0,r.reshape)(n,a)}))}getConfig(){const e={targetShape:this.targetShape},t=super.getConfig();return Object.assign(e,t),e}}uo.className="Reshape",r.serialization.registerClass(uo);class co extends ba{constructor(e){if(super(e),null==e.dims)throw new Error("Required configuration field `dims` is missing during Permute constructor call.");if(!Array.isArray(e.dims))throw new Error(`Permute constructor requires \`dims\` to be an Array, but received ${e.dims} instead.`);const t=bs(1,e.dims.length+1);if(!r.util.arraysEqual(e.dims.slice().sort(),t))throw new Error("Invalid permutation `dims`: "+JSON.stringify(e.dims)+" `dims` must contain consecutive integers starting from 1.");this.dims=e.dims,this.dimsIncludingBatch=[0].concat(this.dims),this.inputSpec=[new da({ndim:this.dims.length+1})]}computeOutputShape(e){const t=(e=la(e)).slice();return this.dims.forEach(((n,s)=>{t[s+1]=e[n]})),t}call(e,t){return(0,r.transpose)(oa(e),this.dimsIncludingBatch)}getConfig(){const e={dims:this.dims},t=super.getConfig();return Object.assign(e,t),e}}co.className="Permute",r.serialization.registerClass(co);class ho extends ba{constructor(e){super(null==e?{}:e),this.supportsMasking=!0,this.maskValue=null!=e?null==e.maskValue?0:e.maskValue:0}computeOutputShape(e){return e}getConfig(){const e=super.getConfig(),t={maskValue:this.maskValue};return Object.assign(t,e),t}computeMask(e,t){const n=oa(e);return(0,r.any)((0,r.notEqual)(n,this.maskValue),-1)}call(e,t){return(0,r.tidy)((()=>{this.invokeCallHook(e,t);const n=oa(e),s=(0,r.any)((0,r.notEqual)(n,this.maskValue),-1,!0);return(0,r.mul)(n,(0,r.cast)(s,n.dtype))}))}}ho.className="Masking",r.serialization.registerClass(ho);class po extends ba{constructor(e){if(super(e),this.embeddings=null,this.DEFAULT_EMBEDDINGS_INITIALIZER="randomUniform",null==e.batchInputShape&&null==e.inputShape){let t=null;null!=e.batchSize&&(t=e.batchSize),null==e.inputLength?this.batchInputShape=[t,null]:this.batchInputShape=[t].concat(On(e.inputLength))}this.inputDim=e.inputDim,Xn(this.inputDim,"inputDim"),this.outputDim=e.outputDim,Xn(this.outputDim,"outputDim"),this.embeddingsInitializer=aa(e.embeddingsInitializer||this.DEFAULT_EMBEDDINGS_INITIALIZER),this.embeddingsRegularizer=yi(e.embeddingsRegularizer),this.activityRegularizer=yi(e.activityRegularizer),this.embeddingsConstraint=La(e.embeddingsConstraint),this.maskZero=e.maskZero,this.supportsMasking=e.maskZero,this.inputLength=e.inputLength}build(e){this.embeddings=this.addWeight("embeddings",[this.inputDim,this.outputDim],this.dtype,this.embeddingsInitializer,this.embeddingsRegularizer,!0,this.embeddingsConstraint),this.built=!0}warnOnIncompatibleInputShape(e){}computeMask(e,t){return(0,r.tidy)((()=>this.maskZero?(e=oa(e),(0,r.notEqual)(e,(0,r.zerosLike)(e))):null))}computeOutputShape(e){if(e=la(e),null==this.inputLength)return[...e,this.outputDim];const t=On(this.inputLength);if(t.length!==e.length-1)throw new Tn(`"inputLength" is ${this.inputLength}, but received input shape has shape ${e}`);{let n=0;for(let s=0;s<t.length;++s){const a=t[s],r=e[s+1];if(null!=a&&null!=r&&a!==r)throw new Tn(`"inputLength" is ${this.inputLength}, but received input shape has shape ${e}`);null==a&&(t[n]=r),n++}}return[e[0],...t,this.outputDim]}call(e,t){return(0,r.tidy)((()=>{this.invokeCallHook(e,t);let n=oa(e);"int32"!==n.dtype&&(n=ws(n,"int32"));const s=As(this.embeddings.read(),(0,r.reshape)(n,[n.size]));return(0,r.reshape)(s,la(this.computeOutputShape(n.shape)))}))}getConfig(){const e={inputDim:this.inputDim,outputDim:this.outputDim,embeddingsInitializer:sa(this.embeddingsInitializer),embeddingsRegularizer:mi(this.embeddingsRegularizer),activityRegularizer:mi(this.activityRegularizer),embeddingsConstraint:Ma(this.embeddingsConstraint),maskZero:this.maskZero,inputLength:this.inputLength},t=super.getConfig();return Object.assign(e,t),e}}po.className="Embedding",r.serialization.registerClass(po);class fo extends ba{constructor(e){super(e||{}),this.supportsMasking=!0}mergeFunction(e){throw new Cn}computeElementwiseOpOutputShape(e,t){if(null==e||null==t)return null;if(e.length<t.length)return this.computeElementwiseOpOutputShape(t,e);if(0===t.length)return e;const n=e.slice(0,e.length-t.length);for(let s=0;s<t.length;++s){const a=e[e.length-t.length+s],r=t[s];if(null==a||null==r||a<0||r<0)n.push(null);else if(1===a)n.push(r);else if(1===r)n.push(a);else{if(a!==r)throw new Tn("Operands could not be broadcast together with shapes "+JSON.stringify(e)+" "+JSON.stringify(t));n.push(a)}}return n}build(e){if(Array.isArray(e)&&!Array.isArray(e[0])&&(e=[la(e)]),e.length<2)throw new Tn(`A merge layer should be called on an Array of at least 2 inputs. Got ${e.length} input(s).`);let t=[];for(const n of e)null!=n&&null!==n[0]&&t.push(n[0]);if(t=Un(t),t.length>1)throw new Tn(`Can not merge tensors with different batch sizes. Got tensors with shapes: ${JSON.stringify(e)}.`);let n=null==e[0]?null:e[0].slice(1);for(let t=1;t<e.length;++t){const s=null==e[t]?null:e[t].slice(1);n=this.computeElementwiseOpOutputShape(n,s)}const s=e.map((e=>e.length));-1===e.indexOf(null)&&1===Un(s).length?this.reshapeRequired=!1:this.reshapeRequired=!0}call(e,t){return(0,r.tidy)((()=>{if(this.reshapeRequired){const t=[],n=e.map((e=>e.rank));if(-1===n.indexOf(null)){const s=ys(n);for(let n of e){const e=n.rank;for(let t=0;t<s-e;++t)n=ks(n,1);t.push(n)}return this.mergeFunction(t)}{let n=!1;for(const s of e){const e=s.rank;if(null==e){const e=s.shape,a=e[0],i=e.slice(1).concat([a]);let o=r.reshape(s,[a].concat(ms(e.slice(1))));o=r.transpose(o,[1,0]),o=r.reshape(o,i),t.push(o),n=!0}else if(e>1){const a=bs(1,e).concat([0]);t.push(r.transpose(s,a)),n=!0}else t.push(s)}let s=this.mergeFunction(t);const a=s.rank;if(n)if(null==a){const e=s.shape,t=e[e.length-1],n=[t].concat(e.slice(0,e.length-1));s=r.reshape(r.transpose(r.reshape(s,[-1,t]),[1,0]),n)}else if(a>1){const e=[a-1].concat(bs(0,a-1));s=r.transpose(s,e)}return s}}return this.mergeFunction(e)}))}computeOutputShape(e){let t;t=null==e[0]?null:e[0].slice(1);for(let n=1;n<e.length;++n){const s=null==e[n]?null:e[n].slice(1);t=this.computeElementwiseOpOutputShape(t,s)}let n=[];for(const t of e)null!=t&&null!==t[0]&&n.push(t[0]);return n=Un(n),t=1===n.length?n.concat(t):[null].concat(t),t}computeMask(e,t){return r.tidy((()=>{if(null==t)return null;if(!Array.isArray(t))throw new Tn("`mask` should be an Array");if(!Array.isArray(e))throw new Tn("`inputs` should be an Array");if(t.length!==e.length)throw new Tn(`The Array 'inputs' and 'mask' are expected to have the same length, but have different lengths (${e.length} vs ${t.length})`);if(t.every((e=>null==e)))return null;let n=(t=t.map((e=>null==e?e:r.expandDims(e,0))))[0];for(let e=1;e<t.length-1;++e)n=r.logicalAnd(n,t[e]);return n}))}}class mo extends fo{constructor(e){super(e)}mergeFunction(e){return(0,r.tidy)((()=>{let t=e[0].clone();for(let n=1;n<e.length;++n)t=r.add(t,e[n]);return t}))}}mo.className="Add",r.serialization.registerClass(mo);class go extends fo{constructor(e){super(e)}mergeFunction(e){return(0,r.tidy)((()=>{let t=e[0].clone();for(let n=1;n<e.length;++n)t=r.mul(t,e[n]);return t}))}}go.className="Multiply",r.serialization.registerClass(go);class yo extends fo{constructor(e){super(e)}mergeFunction(e){return(0,r.tidy)((()=>{let t=e[0].clone();for(let n=1;n<e.length;++n)t=r.add(t,e[n]);return r.mul(1/e.length,t)}))}}yo.className="Average",r.serialization.registerClass(yo);class bo extends fo{constructor(e){super(e)}mergeFunction(e){return(0,r.tidy)((()=>{let t=e[0];for(let n=1;n<e.length;++n)t=r.maximum(t,e[n]);return t}))}}bo.className="Maximum",r.serialization.registerClass(bo);class xo extends fo{constructor(e){super(e)}mergeFunction(e){return(0,r.tidy)((()=>{let t=e[0];for(let n=1;n<e.length;++n)t=r.minimum(t,e[n]);return t}))}}xo.className="Minimum",r.serialization.registerClass(xo);class vo extends fo{constructor(e){super(e),this.DEFAULT_AXIS=-1,null==e&&(e={}),this.axis=null==e.axis?this.DEFAULT_AXIS:e.axis,this.supportsMasking=!0,this.reshapeRequired=!1}build(e){if(!Array.isArray(e)||!Array.isArray(e[0])||1===e.length)throw new Tn("A `Concatenate` layer should be called on a list of at least 2 inputs");let t=!0;for(const n of e)if(null!=n){t=!1;break}if(t)return;const n=[];for(let t=0;t<e.length;++t){const s=e[t].slice();s.splice(this.axis,1);let a=!1;for(const e of n)if(r.util.arraysEqual(e,s)){a=!0;break}a||n.push(s)}if(n.length>1)throw new Tn("A `Concatenate` layer requires inputs with matching shapes except for the concat axis. Got input shapes: "+JSON.stringify(e))}mergeFunction(e){return(0,r.tidy)((()=>Ts(e,this.axis)))}computeOutputShape(e){if(!Array.isArray(e)||!Array.isArray(e[0]))throw new Tn("A `Concatenate` layer should be called on a list of inputs.");const t=e,n=t[0].slice(),s=this.axis<0?n.length+this.axis:this.axis;for(const e of t.slice(1)){if(null==n[s]||null==e[s]){n[s]=null;break}n[s]+=e[s]}return n}computeMask(e,t){if(null==t)return null;if(!Array.isArray(t))throw new Tn("`mask` should be an array for Concatenate");if(!Array.isArray(e))throw new Tn("`inputs` should be an array for Concatenate");if(t.length!==e.length)throw new Tn(`Mismatch in the length of mask (${t.length}) and the legnth of inputs (${e.length})`);return r.tidy((()=>{let n=!0;if(t.forEach((e=>{null==e||(n=!1)})),n)return null;const s=[];for(let n=0;n<e.length;++n)null==t[n]?s.push(r.cast(r.onesLike(e[n]),"bool")):t[n].rank<e[n].rank?s.push(r.expandDims(t[n],-1)):s.push(t[n]);const a=r.concat(s,this.axis);return r.all(a,-1,!1)}))}getConfig(){const e={axis:this.axis},t=super.getConfig();return Object.assign(e,t),e}}function wo(e,t){for(;e<0;)e+=t;return e}vo.className="Concatenate",r.serialization.registerClass(vo);class ko extends fo{constructor(e){super(e),this.axes=e.axes,this.normalize=null!=e.normalize&&e.normalize,this.supportsMasking=!0,this.reshapeRequired=!1}build(e){r.util.assert(Array.isArray(e)&&2===e.length&&Array.isArray(e[0])&&Array.isArray(e[1]),(()=>"A `Dot` layer should be called on a list of exactly 2 inputs."));const t=e[0],n=e[1];if(t.length>3||n.length>3)throw new Cn("Dot layer does not support tensors of 4D or higher rank yet.");const s=this.interpretAxes(t,n);if(t[s[0]]!==n[s[1]])throw new Tn(`Dimension incompatibility: ${t[s[0]]} !== ${n[s[1]]}`)}mergeFunction(e){if(2!==e.length)throw new Tn(`A \`Dot\` layer must be called on exactly 2 inputs, but received ${e.length} input(s).`);let t,n=e[0],s=e[1];return t=Array.isArray(this.axes)?this.axes.map(((t,n)=>wo(t,e[n].shape.length))):[wo(this.axes,n.shape.length),wo(this.axes,s.shape.length)],this.normalize&&(n=Za(n,t[0]),s=Za(s,t[1])),function(e,t,n){if(e.shape.length>3||t.shape.length>3)throw new Cn("batchDot is not implemented for tensors of 4D or higher rank yet");if(r.util.assert(e.shape.length>=2,(()=>`batchDot requires the rank of x to be >= 2, but got ${e.shape.length}`)),r.util.assert(e.shape.length>=2,(()=>`batchDot requires the rank of y to be >= 2, but got ${t.shape.length}`)),"number"==typeof n&&(n=[n,n]),"complex64"===e.dtype||"complex64"===t.dtype)throw new Cn("batchDot is not implemented for complex64-type Tensors yet.");const s=e.shape.length,a=t.shape.length;null==n&&(n=[s-1,a-2]);const i=n;return r.tidy((()=>{let n,o;if(s>a){n=s-a;const e=[];for(let t=0;t<n;++t)e.push(1);t=r.reshape(t,t.shape.concat(e))}else if(a>s){n=a-s;const t=[];for(let e=0;e<n;++e)t.push(1);e=r.reshape(e,e.shape.concat(t))}else n=0;if(2===e.shape.length&&2===t.shape.length)o=i[0]===i[1]?r.sum(r.mul(e,t),i[0]):r.sum(r.mul(r.transpose(e,[1,0]),t),i[1]);else{const n=i[0]!==e.shape.length-1,s=i[1]===t.shape.length-1;o=r.matMul(e,t,n,s)}if(n>0){let e;e=s>a?s+a-3:s-1;const t=[];for(let s=e;s<e+n;++s)t.push(s);o=r.squeeze(o,t)}return 1===o.shape.length&&(o=r.expandDims(o,1)),o}))}(n,s,t)}interpretAxes(e,t){let n;return n=Array.isArray(this.axes)?this.axes:[wo(this.axes,e.length),wo(this.axes,t.length)],n}computeOutputShape(e){r.util.assert(Array.isArray(e)&&2===e.length&&Array.isArray(e[0])&&Array.isArray(e[1]),(()=>"A `Dot` layer should be called on a list of exactly 2 inputs."));const t=e[0].slice(),n=e[1].slice();if(t.length>3||n.length>3)throw new Cn("Dot layer does not support tensors of 4D or higher rank yet.");const s=this.interpretAxes(t,n);t.splice(s[0],1),n.splice(s[1],1),n.splice(0,1);const a=t.concat(n);return 1===a.length&&a.push(1),a}computeMask(e,t){return null}getConfig(){const e={axes:this.axes,normalize:this.normalize},t=super.getConfig();return Object.assign(e,t),e}}ko.className="Dot",r.serialization.registerClass(ko);class Io extends ba{constructor(e){super(e),this.supportsMasking=!0,this.stddev=e.stddev}computeOutputShape(e){return e}getConfig(){const e=super.getConfig(),t={stddev:this.stddev};return Object.assign(t,e),t}call(e,t){return(0,r.tidy)((()=>{this.invokeCallHook(e,t);const n=oa(e);return Ms((()=>(0,r.add)(Es(n.shape,0,this.stddev),n)),(()=>n),t.training||!1)}))}}Io.className="GaussianNoise",r.serialization.registerClass(Io);class So extends ba{constructor(e){super(e),this.supportsMasking=!0,this.rate=e.rate}computeOutputShape(e){return e}getConfig(){const e=super.getConfig(),t={rate:this.rate};return Object.assign(t,e),t}call(e,t){return(0,r.tidy)((()=>{this.invokeCallHook(e,t);const n=oa(e);return this.rate>0&&this.rate<1?Ms((()=>{const e=Math.sqrt(this.rate/(1-this.rate));return(0,r.mul)(n,Es(n.shape,1,e))}),(()=>n),t.training||!1):n}))}}So.className="GaussianDropout",r.serialization.registerClass(So);class No extends ba{constructor(e){super(e),this.supportsMasking=!0,this.rate=e.rate,this.noiseShape=e.noiseShape}_getNoiseShape(e){return this.noiseShape||oa(e).shape}computeOutputShape(e){return e}getConfig(){const e=super.getConfig(),t={rate:this.rate};return Object.assign(t,e),t}call(e,t){return(0,r.tidy)((()=>{if(this.rate<1&&this.rate>0){const n=this._getNoiseShape(e),s=()=>{const t=oa(e),s=-1.7580993408473766;let a=(0,r.greaterEqual)((0,r.randomUniform)(n),this.rate);a=ws(a,"float32");const i=((1-this.rate)*(1+this.rate*s**2))**-.5,o=-i*s*this.rate,l=(0,r.add)((0,r.mul)(t,a),(0,r.mul)((0,r.add)(a,-1),s));return(0,r.add)((0,r.mul)(l,i),o)};return Ms(s,(()=>oa(e)),t.training||!1)}return e}))}}function To(e,t,n,s,a,i=.001){let o;if(2===e.rank)o=r.batchNorm2d(e,t,n,s,a,i);else if(3===e.rank)o=r.batchNorm3d(e,t,n,s,a,i);else{if(4!==e.rank)throw new Cn(`batchNormalization is not implemented for array of rank ${e.rank} yet`);o=r.batchNorm4d(e,t,n,s,a,i)}return o}No.className="AlphaDropout",r.serialization.registerClass(No);class Co extends ba{constructor(e){null==e&&(e={}),super(e),this.supportsMasking=!0,this.axis=null==e.axis?-1:e.axis,this.momentum=null==e.momentum?.99:e.momentum,this.epsilon=null==e.epsilon?.001:e.epsilon,this.center=null==e.center||e.center,this.scale=null==e.scale||e.scale,this.betaInitializer=aa(e.betaInitializer||"zeros"),this.gammaInitializer=aa(e.gammaInitializer||"ones"),this.movingMeanInitializer=aa(e.movingMeanInitializer||"zeros"),this.movingVarianceInitializer=aa(e.movingVarianceInitializer||"ones"),this.betaConstraint=La(e.betaConstraint),this.gammaConstraint=La(e.gammaConstraint),this.betaRegularizer=yi(e.betaRegularizer),this.gammaRegularizer=yi(e.gammaRegularizer)}build(e){e=la(e);const t=this.axis>=0?this.axis:this.axis+e.length,n=e[t];if(null==n)throw new Tn(`Axis ${t} of input tensor should have a defined dimension but the layer received an input with shape ${JSON.stringify(e)}.`);this.inputSpec=[new da({ndim:e.length,axes:{[t]:n}})];const s=[n];this.scale&&(this.gamma=this.addWeight("gamma",s,null,this.gammaInitializer,this.gammaRegularizer,!0,this.gammaConstraint)),this.center&&(this.beta=this.addWeight("beta",s,null,this.betaInitializer,this.betaRegularizer,!0,this.betaConstraint)),this.movingMean=this.addWeight("moving_mean",s,null,this.movingMeanInitializer,null,!1),this.movingVariance=this.addWeight("moving_variance",s,null,this.movingVarianceInitializer,null,!1),this.built=!0}call(e,t){return(0,r.tidy)((()=>{const n=null!=t.training&&t.training,s=oa(e),a=s.shape,i=a.length,o=bs(0,i),l=this.axis>=0?this.axis:this.axis+i;o.splice(l,1);const u=An(1,i);u[l]=a[l];const c=o.slice();c.sort();const h=!r.util.arraysEqual(c,bs(0,i).slice(0,i-1));if(!n)return(()=>{if(h){const e=(0,r.reshape)(this.movingMean.read(),u),t=(0,r.reshape)(this.movingVariance.read(),u),n=this.center?(0,r.reshape)(this.beta.read(),u):null,a=this.scale?(0,r.reshape)(this.gamma.read(),u):null;return To(s,e,t,n,a,this.epsilon)}return To(s,this.movingMean.read(),this.movingVariance.read(),null==this.beta?null:this.beta.read(),null==this.gamma?null:this.gamma.read(),this.epsilon)})();const[p,d,f]=function(e,t,n,s,a=.001){return r.util.arraysEqual(s.slice().sort(),bs(0,e.rank-1))?function(e,t,n,s,a=.001){return(0,r.tidy)((()=>{const i=r.moments(e,s),o=i.mean,l=i.variance;return[To(e,o,l,n,t,a),o,l]}))}(e,t,n,s,a):function(e,t,n,s,a=.001){return(0,r.tidy)((()=>{const i=r.moments(e,s),o=i.mean,l=i.variance,u=[];for(const t of bs(0,e.rank))-1!==s.indexOf(t)?u.push(1):u.push(e.shape[t]);const c=(0,r.reshape)(o,u),h=(0,r.reshape)(l,u),p=null==t?null:(0,r.reshape)(t,u),d=null==n?null:(0,r.reshape)(n,u);return[To(e,c,h,d,p,a),o,l]}))}(e,t,n,s,a)}(s,this.gamma.read(),this.beta.read(),o,this.epsilon),m=(e,t,n)=>{r.tidy((()=>{const s=1-n,a=e.read(),i=r.mul(r.sub(a,t),s);e.write(r.sub(a,i))}))};return(()=>{m(this.movingMean,d,this.momentum),m(this.movingVariance,f,this.momentum)})(),p}))}getConfig(){const e={axis:this.axis,momentum:this.momentum,epsilon:this.epsilon,center:this.center,scale:this.scale,betaInitializer:sa(this.betaInitializer),gammaInitializer:sa(this.gammaInitializer),movingMeanInitializer:sa(this.movingMeanInitializer),movingVarianceInitializer:sa(this.movingVarianceInitializer),betaRegularizer:mi(this.betaRegularizer),gammaRegularizer:mi(this.gammaRegularizer),betaConstraint:Ma(this.betaConstraint),gammaConstraint:Ma(this.gammaConstraint)},t=super.getConfig();return Object.assign(e,t),e}}Co.className="BatchNormalization",r.serialization.registerClass(Co);class $o extends ba{constructor(e){if(null==e&&(e={}),super(e),this.axis=null==e.axis?-1:e.axis,"number"==typeof this.axis){if(!Number.isInteger(this.axis))throw new Error(`Expected axis to be an integer, but received ${this.axis}`)}else{if(!Array.isArray(this.axis))throw new Error(`Expected axis to be an integer or an array of integers, but received ${JSON.stringify(this.axis)}`);for(const e of this.axis)if(!Number.isInteger(e))throw new Error(`Expected axis to be an array of integers, but received ${JSON.stringify(this.axis)}`)}this.epsilon=null==e.epsilon?.001:e.epsilon,this.center=null==e.center||e.center,this.scale=null==e.scale||e.scale,this.betaInitializer=aa(e.betaInitializer||"zeros"),this.gammaInitializer=aa(e.gammaInitializer||"ones"),this.betaRegularizer=yi(e.betaRegularizer),this.gammaRegularizer=yi(e.gammaRegularizer),this.supportsMasking=!0}build(e){const t=(e=la(e)).length;"number"==typeof this.axis&&(this.axis=[this.axis]);for(let e=0;e<this.axis.length;++e)this.axis[e]<0&&(this.axis[e]+=t);for(const e of this.axis)if(e<0||e>=t)throw new Error(`Invalid axis: ${e}`);if(this.axis.length!==Un(this.axis).length)throw new Error(`Found duplicate axes in: ${this.axis}`);const n=this.axis.map((t=>e[t]));this.scale?this.gamma=this.addWeight("gamma",n,"float32",this.gammaInitializer,this.gammaRegularizer,!0):this.gamma=null,this.center?this.beta=this.addWeight("beta",n,"float32",this.betaInitializer,this.betaRegularizer,!0):this.beta=null,this.built=!0}call(e,t){const n=oa(e),s=n.shape,a=s.length;return(0,r.tidy)((()=>{let{mean:e,variance:t}=(0,r.moments)(n,this.axis,!0);const i=An(1,a);for(const e of this.axis)i[e]=s[e];const o=e=>null!=e&&e.shape.length!==a?r.reshape(e,i):e;let l=this.scale?o(this.gamma.read()):null,u=this.center?o(this.beta.read()):null;const c=[],h=[];for(let e=0;e<a;++e)-1!==this.axis.indexOf(e)?(c.push(s[e]),h.push(1)):(c.push(1),h.push(s[e]));return e=r.tile(e,c),t=r.tile(t,c),null!=l&&(l=r.tile(l,h)),null!=u&&(u=r.tile(u,h)),To(n,e,t,u,l,this.epsilon)}))}getConfig(){const e={axis:this.axis,epsilon:this.epsilon,center:this.center,scale:this.scale,betaInitializer:sa(this.betaInitializer),gammaInitializer:sa(this.gammaInitializer),betaRegularizer:mi(this.betaRegularizer),gammaRegularizer:mi(this.gammaRegularizer)},t=super.getConfig();return Object.assign(e,t),e}}$o.className="LayerNormalization",r.serialization.registerClass($o);class Eo extends ba{constructor(e){if(null==e&&(e={}),super(e),this.dataFormat=null==e.dataFormat?"channelsLast":e.dataFormat,null==e.padding)this.padding=[[1,1],[1,1]];else if("number"==typeof e.padding)this.padding=[[e.padding,e.padding],[e.padding,e.padding]];else{if(e.padding=e.padding,2!==e.padding.length)throw new Tn(`ZeroPadding2D expects padding to be a length-2 array, but received a length-${e.padding.length} array.`);let t,n;if("number"==typeof e.padding[0])t=[e.padding[0],e.padding[0]],n=[e.padding[1],e.padding[1]];else{if(e.padding=e.padding,2!==e.padding[0].length)throw new Tn(`ZeroPadding2D expects height padding to be a length-2 array, but received a length-${e.padding[0].length} array.`);if(t=e.padding[0],2!==e.padding[1].length)throw new Tn(`ZeroPadding2D expects width padding to be a length-2 array, but received a length-${e.padding[1].length} array.`);n=e.padding[1]}this.padding=[t,n]}this.inputSpec=[new da({ndim:4})]}computeOutputShape(e){let t,n;return e=la(e),"channelsFirst"===this.dataFormat?(t=null!=e[2]&&e[2]>=0?e[2]+this.padding[0][0]+this.padding[0][1]:null,n=null!=e[3]&&e[3]>=0?e[3]+this.padding[1][0]+this.padding[1][1]:null,[e[0],e[1],t,n]):(t=null!=e[1]&&e[1]>=0?e[1]+this.padding[0][0]+this.padding[0][1]:null,n=null!=e[2]&&e[2]>=0?e[2]+this.padding[1][0]+this.padding[1][1]:null,[e[0],t,n,e[3]])}call(e,t){return(0,r.tidy)((()=>{return t=oa(e),n=this.padding,s=this.dataFormat,(0,r.tidy)((()=>{if(4!==t.rank)throw new Tn(`temporalPadding expects input tensor to be 4-D, but received a ${t.rank}-D tensor.`);if(null==n&&(n=[[1,1],[1,1]]),2!==n.length||2!==n[0].length||2!==n[1].length)throw new Tn("spatial2dPadding expects `padding` to be an Array of two Arrays, each of which is an Array of two integers.");if(null==s&&(s="channelsLast"),"channelsLast"!==s&&"channelsFirst"!==s)throw new Tn(`Unknown data format: ${s}. Supported data formats are 'channelsLast' and 'channelsFirst.`);let e;return e="channelsFirst"===s?[[0,0],[0,0],n[0],n[1]]:[[0,0],n[0],n[1],[0,0]],r.pad(t,e)}));var t,n,s}))}getConfig(){const e={padding:this.padding,dataFormat:this.dataFormat},t=super.getConfig();return Object.assign(e,t),e}}function _o(e,t,n,s,a,i){return(0,r.tidy)((()=>{let o;is(a),ls(i),os(s),null==n&&(n=[1,1]),null==s&&(s="valid"),null==a&&(a="channelsLast"),null==i&&(i="max"),e=Ci(e,a);const l="same"===s?"same":"valid";return o="max"===i?r.maxPool(e,t,n,l):r.avgPool(e,t,n,l),"channelsFirst"===a&&(o=r.transpose(o,[0,3,1,2])),o}))}function Ao(e,t,n,s,a,i){return(0,r.tidy)((()=>{let o;is(a),ls(i),os(s),null==n&&(n=[1,1,1]),null==s&&(s="valid"),null==a&&(a="channelsLast"),null==i&&(i="max"),e=$i(e,a);const l="same"===s?"same":"valid";return o="max"===i?r.maxPool3d(e,t,n,l):r.avgPool3d(e,t,n,l),"channelsFirst"===a&&(o=r.transpose(o,[0,4,1,2,3])),o}))}Eo.className="ZeroPadding2D",r.serialization.registerClass(Eo);class Ro extends ba{constructor(e){if(null==e.poolSize&&(e.poolSize=2),super(e),"number"==typeof e.poolSize)this.poolSize=[e.poolSize];else{if(!Array.isArray(e.poolSize)||1!==e.poolSize.length||"number"!=typeof e.poolSize[0])throw new Tn(`poolSize for 1D convolutional layer must be a number or an Array of a single number, but received ${JSON.stringify(e.poolSize)}`);this.poolSize=e.poolSize}if(Xn(this.poolSize,"poolSize"),null==e.strides)this.strides=this.poolSize;else if("number"==typeof e.strides)this.strides=[e.strides];else{if(!Array.isArray(e.strides)||1!==e.strides.length||"number"!=typeof e.strides[0])throw new Tn(`strides for 1D convolutional layer must be a number or an Array of a single number, but received ${JSON.stringify(e.strides)}`);this.strides=e.strides}Xn(this.strides,"strides"),this.padding=null==e.padding?"valid":e.padding,os(this.padding),this.inputSpec=[new da({ndim:3})]}computeOutputShape(e){const t=Ni((e=la(e))[1],this.poolSize[0],this.padding,this.strides[0]);return[e[0],t,e[2]]}call(e,t){return(0,r.tidy)((()=>{this.invokeCallHook(e,t),e=ks(oa(e),2);const n=this.poolingFunction(oa(e),[this.poolSize[0],1],[this.strides[0],1],this.padding,"channelsLast");return r.squeeze(n,[2])}))}getConfig(){const e={poolSize:this.poolSize,padding:this.padding,strides:this.strides},t=super.getConfig();return Object.assign(e,t),e}}class Fo extends Ro{constructor(e){super(e)}poolingFunction(e,t,n,s,a){return is(a),os(s),_o(e,t,n,s,a,"max")}}Fo.className="MaxPooling1D",r.serialization.registerClass(Fo);class Do extends Ro{constructor(e){super(e)}poolingFunction(e,t,n,s,a){return is(a),os(s),_o(e,t,n,s,a,"avg")}}Do.className="AveragePooling1D",r.serialization.registerClass(Do);class Oo extends ba{constructor(e){if(null==e.poolSize&&(e.poolSize=[2,2]),super(e),this.poolSize=Array.isArray(e.poolSize)?e.poolSize:[e.poolSize,e.poolSize],null==e.strides)this.strides=this.poolSize;else if(Array.isArray(e.strides)){if(2!==e.strides.length)throw new Tn(`If the strides property of a 2D pooling layer is an Array, it is expected to have a length of 2, but received length ${e.strides.length}.`);this.strides=e.strides}else this.strides=[e.strides,e.strides];Xn(this.poolSize,"poolSize"),Xn(this.strides,"strides"),this.padding=null==e.padding?"valid":e.padding,this.dataFormat=null==e.dataFormat?"channelsLast":e.dataFormat,is(this.dataFormat),os(this.padding),this.inputSpec=[new da({ndim:4})]}computeOutputShape(e){e=la(e);let t="channelsFirst"===this.dataFormat?e[2]:e[1],n="channelsFirst"===this.dataFormat?e[3]:e[2];return t=Ni(t,this.poolSize[0],this.padding,this.strides[0]),n=Ni(n,this.poolSize[1],this.padding,this.strides[1]),"channelsFirst"===this.dataFormat?[e[0],e[1],t,n]:[e[0],t,n,e[3]]}call(e,t){return(0,r.tidy)((()=>(this.invokeCallHook(e,t),this.poolingFunction(oa(e),this.poolSize,this.strides,this.padding,this.dataFormat))))}getConfig(){const e={poolSize:this.poolSize,padding:this.padding,strides:this.strides,dataFormat:this.dataFormat},t=super.getConfig();return Object.assign(e,t),e}}class Mo extends Oo{constructor(e){super(e)}poolingFunction(e,t,n,s,a){return is(a),os(s),_o(e,t,n,s,a,"max")}}Mo.className="MaxPooling2D",r.serialization.registerClass(Mo);class zo extends Oo{constructor(e){super(e)}poolingFunction(e,t,n,s,a){return is(a),os(s),_o(e,t,n,s,a,"avg")}}zo.className="AveragePooling2D",r.serialization.registerClass(zo);class Lo extends ba{constructor(e){if(null==e.poolSize&&(e.poolSize=[2,2,2]),super(e),this.poolSize=Array.isArray(e.poolSize)?e.poolSize:[e.poolSize,e.poolSize,e.poolSize],null==e.strides)this.strides=this.poolSize;else if(Array.isArray(e.strides)){if(3!==e.strides.length)throw new Tn(`If the strides property of a 3D pooling layer is an Array, it is expected to have a length of 3, but received length ${e.strides.length}.`);this.strides=e.strides}else this.strides=[e.strides,e.strides,e.strides];Xn(this.poolSize,"poolSize"),Xn(this.strides,"strides"),this.padding=null==e.padding?"valid":e.padding,this.dataFormat=null==e.dataFormat?"channelsLast":e.dataFormat,is(this.dataFormat),os(this.padding),this.inputSpec=[new da({ndim:5})]}computeOutputShape(e){e=la(e);let t="channelsFirst"===this.dataFormat?e[2]:e[1],n="channelsFirst"===this.dataFormat?e[3]:e[2],s="channelsFirst"===this.dataFormat?e[4]:e[3];return t=Ni(t,this.poolSize[0],this.padding,this.strides[0]),n=Ni(n,this.poolSize[1],this.padding,this.strides[1]),s=Ni(s,this.poolSize[2],this.padding,this.strides[2]),"channelsFirst"===this.dataFormat?[e[0],e[1],t,n,s]:[e[0],t,n,s,e[4]]}call(e,t){return(0,r.tidy)((()=>(this.invokeCallHook(e,t),this.poolingFunction(oa(e),this.poolSize,this.strides,this.padding,this.dataFormat))))}getConfig(){const e={poolSize:this.poolSize,padding:this.padding,strides:this.strides,dataFormat:this.dataFormat},t=super.getConfig();return Object.assign(e,t),e}}class Bo extends Lo{constructor(e){super(e)}poolingFunction(e,t,n,s,a){return is(a),os(s),Ao(e,t,n,s,a,"max")}}Bo.className="MaxPooling3D",r.serialization.registerClass(Bo);class Po extends Lo{constructor(e){super(e)}poolingFunction(e,t,n,s,a){return is(a),os(s),Ao(e,t,n,s,a,"avg")}}Po.className="AveragePooling3D",r.serialization.registerClass(Po);class Vo extends ba{constructor(e){super(e),this.inputSpec=[new da({ndim:3})]}computeOutputShape(e){return[e[0],e[2]]}call(e,t){throw new Cn}}class Wo extends Vo{constructor(e){super(e||{})}call(e,t){return(0,r.tidy)((()=>{const t=oa(e);return r.mean(t,1)}))}}Wo.className="GlobalAveragePooling1D",r.serialization.registerClass(Wo);class Uo extends Vo{constructor(e){super(e||{})}call(e,t){return(0,r.tidy)((()=>{const t=oa(e);return r.max(t,1)}))}}Uo.className="GlobalMaxPooling1D",r.serialization.registerClass(Uo);class Go extends ba{constructor(e){super(e),this.dataFormat=null==e.dataFormat?"channelsLast":e.dataFormat,is(this.dataFormat),this.inputSpec=[new da({ndim:4})]}computeOutputShape(e){return"channelsLast"===this.dataFormat?[e[0],e[3]]:[e[0],e[1]]}call(e,t){throw new Cn}getConfig(){const e={dataFormat:this.dataFormat},t=super.getConfig();return Object.assign(e,t),e}}class Ho extends Go{call(e,t){return(0,r.tidy)((()=>{const t=oa(e);return"channelsLast"===this.dataFormat?r.mean(t,[1,2]):r.mean(t,[2,3])}))}}Ho.className="GlobalAveragePooling2D",r.serialization.registerClass(Ho);class qo extends Go{call(e,t){return(0,r.tidy)((()=>{const t=oa(e);return"channelsLast"===this.dataFormat?r.max(t,[1,2]):r.max(t,[2,3])}))}}qo.className="GlobalMaxPooling2D",r.serialization.registerClass(qo);class Xo extends ba{constructor(e){super(e),this.layer=e.layer}build(e){this.built=!0}get trainable(){return null!=this.layer&&this.layer.trainable}set trainable(e){null!=this.layer&&(this.layer.trainable=e)}get trainableWeights(){return this.layer.trainableWeights}get nonTrainableWeights(){return this.layer.nonTrainableWeights}get updates(){return this.layer._updates}get losses(){return this.layer.losses}getWeights(){return this.layer.getWeights()}setWeights(e){this.layer.setWeights(e)}getConfig(){const e={layer:{className:this.layer.getClassName(),config:this.layer.getConfig()}},t=super.getConfig();return Object.assign(e,t),e}setFastWeightInitDuringBuild(e){super.setFastWeightInitDuringBuild(e),null!=this.layer&&this.layer.setFastWeightInitDuringBuild(e)}static fromConfig(e,t,n={}){const s=Ya(t.layer,n);delete t.layer;const a={layer:s};return Object.assign(a,t),new e(a)}}class jo extends Xo{constructor(e){super(e),this.supportsMasking=!0}build(e){if((e=la(e)).length<3)throw new Tn(`TimeDistributed layer expects an input shape >= 3D, but received input shape ${JSON.stringify(e)}`);this.inputSpec=[{shape:e}];const t=[e[0]].concat(e.slice(2));this.layer.built||(this.layer.build(t),this.layer.built=!0),super.build(e)}computeOutputShape(e){const t=[(e=la(e))[0]].concat(e.slice(2)),n=this.layer.computeOutputShape(t),s=e[1];return[n[0],s].concat(n.slice(1))}call(e,t){return(0,r.tidy)((()=>Ui(((e,n)=>[oa(this.layer.call(e,t)),[]]),e=oa(e),[],!1,null,null,!1,!0)[1]))}}jo.className="TimeDistributed",r.serialization.registerClass(jo);class Ko extends Xo{constructor(e){super(e);const t=e.layer.getConfig(),n={};n.className=e.layer.getClassName(),n.config=t,this.forwardLayer=Ya(n),t.goBackwards=!0!==t.goBackwards;const s={};var a;if(s.className=e.layer.getClassName(),s.config=t,this.backwardLayer=Ya(s),this.forwardLayer.name="forward_"+this.forwardLayer.name,this.backwardLayer.name="backward_"+this.backwardLayer.name,this.mergeMode=void 0===e.mergeMode?"concat":e.mergeMode,a=this.mergeMode,Hn(as,"BidirectionalMergeMode",a),e.weights)throw new Cn("weights support is not implemented for Bidirectional layer yet.");this._stateful=e.layer.stateful,this.returnSequences=e.layer.returnSequences,this.returnState=e.layer.returnState,this.supportsMasking=!0,this._trainable=!0,this.inputSpec=e.layer.inputSpec,this.numConstants=null}get trainable(){return this._trainable}set trainable(e){this._trainable=e,null!=this.forwardLayer&&(this.forwardLayer.trainable=e),null!=this.backwardLayer&&(this.backwardLayer.trainable=e)}getWeights(){return this.forwardLayer.getWeights().concat(this.backwardLayer.getWeights())}setWeights(e){const t=e.length,n=Math.floor(t/2);this.forwardLayer.setWeights(e.slice(0,n)),this.backwardLayer.setWeights(e.slice(n))}computeOutputShape(e){let t,n,s,a=this.forwardLayer.computeOutputShape(e);return Array.isArray(a)&&Array.isArray(a[0])||(a=[a]),this.returnState?(s=a.slice(1),t=a[0]):t=a[0],"concat"===this.mergeMode?(t[t.length-1]*=2,n=[t]):n=null==this.mergeMode?[t,t.slice()]:[t],this.returnState?null==this.mergeMode?n.concat(s).concat(s.slice()):[t].concat(s).concat(s.slice()):Dn(n)}apply(e,t){let n=null==t?null:t.initialState,s=null==t?null:t.constants;null==t&&(t={});const a=Wi(e,n,s,this.numConstants);if(e=a.inputs,n=a.initialState,s=a.constants,Array.isArray(e)&&(n=e.slice(1),e=e[0]),(null==n||0===n.length)&&null==s)return super.apply(e,t);const r=[],i=[];if(null!=n){const e=n.length;if(e%2>0)throw new Tn("When passing `initialState` to a Bidrectional RNN, the state should be an Array containing the states of the underlying RNNs.");t.initialState=n,r.push(...n);const s=n.map((e=>new da({shape:e.shape})));this.forwardLayer.stateSpec=s.slice(0,e/2),this.backwardLayer.stateSpec=s.slice(e/2),i.push(...s)}if(null!=s)throw new Cn("Support for constants in Bidirectional layers is not implemented yet.");const o=r[0]instanceof fa;for(const e of r)if(e instanceof fa!==o)throw new Tn("The initial state of a Bidirectional layer cannot be specified as a mix of symbolic and non-symbolic tensors");if(o){const n=[e].concat(r),s=this.inputSpec.concat(i),a=this.inputSpec;this.inputSpec=s;const o=super.apply(n,t);return this.inputSpec=a,o}return super.apply(e,t)}call(e,t){return(0,r.tidy)((()=>{const n=t.initialState;let s,a,i,o;if(null==n)s=this.forwardLayer.call(e,t),a=this.backwardLayer.call(e,t);else{const r=n.slice(0,n.length/2),i=n.slice(n.length/2);s=this.forwardLayer.call(e,Object.assign(t,{initialState:r})),a=this.backwardLayer.call(e,Object.assign(t,{initialState:i}))}return this.returnState&&(Array.isArray(s)&&(i=s.slice(1).concat(a.slice(1))),s=s[0],a=a[0]),this.returnSequences&&(a=r.reverse(a,1)),"concat"===this.mergeMode?o=Ts([s,a]):"sum"===this.mergeMode?o=r.add(s,a):"ave"===this.mergeMode?o=r.mul(.5,r.add(s,a)):"mul"===this.mergeMode?o=r.mul(s,a):null==this.mergeMode&&(o=[s,a]),this.returnState?null==this.mergeMode?o.concat(i):[o].concat(i):o}))}resetStates(e){this.forwardLayer.resetStates(),this.backwardLayer.resetStates()}build(e){cs(this.forwardLayer.name,(()=>{this.forwardLayer.build(e)})),cs(this.backwardLayer.name,(()=>{this.backwardLayer.build(e)})),this.built=!0}computeMask(e,t){let n;if(Array.isArray(t)&&(t=t[0]),n=this.returnSequences?null==this.mergeMode?[t,t]:t:null==this.mergeMode?[null,null]:null,this.returnState){const e=this.forwardLayer.states.map((e=>null));return Array.isArray(n)?n.concat(e).concat(e):[n].concat(e).concat(e)}return n}get trainableWeights(){return this.forwardLayer.trainableWeights.concat(this.backwardLayer.trainableWeights)}get nonTrainableWeights(){return this.forwardLayer.nonTrainableWeights.concat(this.backwardLayer.nonTrainableWeights)}setFastWeightInitDuringBuild(e){super.setFastWeightInitDuringBuild(e),null!=this.forwardLayer&&this.forwardLayer.setFastWeightInitDuringBuild(e),null!=this.backwardLayer&&this.backwardLayer.setFastWeightInitDuringBuild(e)}getConfig(){const e={mergeMode:this.mergeMode},t=super.getConfig();return Object.assign(e,t),e}static fromConfig(e,t){const n=Ya(t.layer);if(delete t.layer,null!=t.numConstants)throw new Cn("Deserialization of a Bidirectional layer with numConstants present is not supported yet.");const s=t;return s.layer=n,new e(s)}}Ko.className="Bidirectional",r.serialization.registerClass(Ko);class Yo extends ba{constructor(e){super(e),this.scale=e.scale,e.offset?this.offset=e.offset:this.offset=0}getConfig(){const e={scale:this.scale,offset:this.offset},t=super.getConfig();return Object.assign(e,t),e}call(e,t){return(0,r.tidy)((()=>("float32"!==(e=oa(e)).dtype&&(e=ws(e,"float32")),(0,r.add)((0,r.mul)(e,this.scale),this.offset))))}}function Zo(e){return new va(e)}function Qo(e){return new wi(e)}function Jo(e){return new bi(e)}function el(e){return new xi(e)}function tl(e){return new vi(e)}function nl(e){return new Ii(e)}function sl(e){return new ki(e)}function al(e){return new Li(e)}function rl(e){return new Ri(e)}function il(e){return new Di(e)}function ol(e){return new Fi(e)}function ll(e){return new Oi(e)}function ul(e){return new zi(e)}function cl(e){return new Bi(e)}function hl(e){return new Pi(e)}function pl(e){return new Vi(e)}function dl(e){return new oo(e)}function fl(e){return new ro(e)}function ml(e){return new so(e)}function gl(e){return new ao(e)}function yl(e){return new io(e)}function bl(e){return new lo(e)}function xl(e){return new uo(e)}function vl(e){return new co(e)}function wl(e){return new po(e)}function kl(e){return new mo(e)}function Il(e){return new yo(e)}function Sl(e){return new vo(e)}function Nl(e){return new bo(e)}function Tl(e){return new xo(e)}function Cl(e){return new go(e)}function $l(e){return new ko(e)}function El(e){return new Co(e)}function _l(e){return new $o(e)}function Al(e){return new Eo(e)}function Rl(e){return new Do(e)}function Fl(e){return Rl(e)}function Dl(e){return Rl(e)}function Ol(e){return new zo(e)}function Ml(e){return Ol(e)}function zl(e){return Ol(e)}function Ll(e){return new Po(e)}function Bl(e){return Ll(e)}function Pl(e){return Ll(e)}function Vl(e){return new Wo(e)}function Wl(e){return new Ho(e)}function Ul(e){return new Uo(e)}function Gl(e){return new qo(e)}function Hl(e){return new Fo(e)}function ql(e){return new Mo(e)}function Xl(e){return new Bo(e)}function jl(e){return new Ki(e)}function Kl(e){return new ji(e)}function Yl(e){return new Zi(e)}function Zl(e){return new Yi(e)}function Ql(e){return new Xi(e)}function Jl(e){return new qi(e)}function eu(e){return new no(e)}function tu(e){return new to(e)}function nu(e){return new Gi(e)}function su(e){return new Qi(e)}function au(e){return new Ko(e)}function ru(e){return new jo(e)}Yo.className="Rescaling",r.serialization.registerClass(Yo);const iu=Ul,ou=Gl,lu=Hl,uu=ql;function cu(e){return new Io(e)}function hu(e){return new So(e)}function pu(e){return new No(e)}function du(e){return new ho(e)}function fu(e){return new Yo(e)}var mu,gu,yu=n(1897),bu=n(6542);function xu(e,t,n=new Map,s=new Set){if(null==e)return null;if("function"==typeof Blob&&e instanceof Blob)return e.slice();if(s.has(e))throw new Error("Circular references are not supported.");if(n.has(e))return n.get(e);const a=t(e);if(a.recurse&&null!==a.value)throw new Error("A deep map function may not return both a value and recurse=true.");if(a.recurse){if(Iu(e)){const a=Array.isArray(e)?[]:{};s.add(e);for(const r in e){const i=xu(e[r],t,n,s);a[r]=i}return s.delete(e),e.__proto__&&(a.__proto__=e.__proto__),a}throw new Error(`Can't recurse into non-iterable type: ${e}`)}return n.set(e,a.value),a.value}function vu(e,t=ku){return wu(e,t)}function wu(e,t,n=new Set){const s=e[0];if(n.has(s))throw new Error("Circular references are not supported.");const a=t(e);if(a.recurse&&null!==a.value)throw new Error("A deep zip function may not return both a value and recurse=true.");if(a.recurse){if(Iu(s)){const a=Array.isArray(s)?[]:{};n.add(s);for(const r in s){const s=wu(e.map((e=>e[r])),t,n);a[r]=s}return n.delete(s),a}throw new Error(`Can't recurse into non-iterable type: ${s}`)}return a.value}function ku(e){return null===e?null:Iu(e[0])?{value:null,recurse:!0}:{value:e,recurse:!1}}function Iu(e){let t=!1;if(r.env().get("IS_BROWSER"))t=e instanceof TextDecoder;else{const{StringDecoder:s}=n(8090);t=e instanceof s}return null!=e&&!ArrayBuffer.isView(e)&&(Array.isArray(e)||"object"==typeof e&&!(e instanceof r.Tensor)&&!(e instanceof Promise)&&!t)}function Su(e){return function(e,t){return xu(e,t)}(e,Nu)}function Nu(e){return e instanceof r.Tensor?{value:e.clone(),recurse:!1}:Iu(e)?{value:null,recurse:!0}:{value:e,recurse:!1}}class Tu{constructor(e){if(this.capacity=e,this.begin=0,this.end=0,null==e)throw new RangeError("Can't create a ring buffer of unknown capacity.");if(e<1)throw new RangeError("Can't create ring buffer of capacity < 1.");this.data=new Array(e),this.doubledCapacity=2*e}wrap(e){for(;e<0;)e+=this.doubledCapacity;return e%this.doubledCapacity}get(e){if(e<0)throw new RangeError("Can't get item at a negative index.");return this.data[e%this.capacity]}set(e,t){if(e<0)throw new RangeError("Can't set item at a negative index.");this.data[e%this.capacity]=t}length(){let e=this.end-this.begin;return e<0&&(e=this.doubledCapacity+e),e}isFull(){return this.length()===this.capacity}isEmpty(){return 0===this.length()}push(e){if(this.isFull())throw new RangeError("Ring buffer is full.");this.set(this.end,e),this.end=this.wrap(this.end+1)}pushAll(e){for(const t of e)this.push(t)}pop(){if(this.isEmpty())throw new RangeError("Ring buffer is empty.");this.end=this.wrap(this.end-1);const e=this.get(this.end);return this.set(this.end,void 0),e}unshift(e){if(this.isFull())throw new RangeError("Ring buffer is full.");this.begin=this.wrap(this.begin-1),this.set(this.begin,e)}shift(){if(this.isEmpty())throw new RangeError("Ring buffer is empty.");const e=this.get(this.begin);return this.set(this.begin,void 0),this.begin=this.wrap(this.begin+1),e}shuffleExcise(e){if(this.isEmpty())throw new RangeError("Ring buffer is empty.");const t=this.wrap(this.begin+e),n=this.get(t);return this.set(t,this.pop()),n}}class Cu extends Tu{constructor(){super(Cu.INITIAL_CAPACITY)}isFull(){return!1}push(e){super.isFull()&&this.expand(),super.push(e)}unshift(e){super.isFull()&&this.expand(),super.unshift(e)}expand(){const e=2*this.capacity,t=new Array(e),n=this.length();for(let e=0;e<n;e++)t[e]=this.get(this.wrap(this.begin+e));this.data=t,this.capacity=e,this.doubledCapacity=2*this.capacity,this.begin=0,this.end=n}}Cu.INITIAL_CAPACITY=32;class $u{async toArray(){const e=[];let t=await this.next();for(;!t.done;)e.push(t.value),t=await this.next();return e}async toArrayForTest(){const e=this.prefetch(100),t=[];let n=await e.next();for(;!n.done;)t.push(n.value),n=await e.next();return t}async resolveFully(){let e=await this.next();for(;!e.done;)e=await this.next()}async resolveWhile(e){let t=await this.next(),n=e(t.value);for(;!t.done&&n;)t=await this.next(),n=e(t.value)}handleErrors(e){return new zu(this,e)}filter(e){return new Ou(this,e)}map(e){return new Mu(this,e)}mapAsync(e){return new Lu(this,e)}serialMapAsync(e){return new Lu(this,e).serial()}flatmap(e){return new Pu(this,e)}async forEachAsync(e){return this.map(e).resolveFully()}async serialForEach(e){return this.serialMapAsync(e).resolveWhile((e=>!0===e))}rowMajorBatch(e,t=!0){return new Du(this,e,t)}columnMajorBatch(e,t=!0,n=ku){return this.rowMajorBatch(e,t).map((e=>vu(e,n)))}concatenate(e,t){return new Vu(new Eu([this,e]),t)}take(e){return e<0||null==e?this:new Fu(this,e)}skip(e){return e<0||null==e?this:new Ru(this,e)}prefetch(e){return new Wu(this,e)}shuffle(e,t){return new Uu(this,e,t)}serial(){return new Au(this)}}class Eu extends $u{constructor(e){super(),this.items=e,this.trav=0}summary(){return`Array of ${this.items.length} items`}async next(){if(this.trav>=this.items.length)return{value:null,done:!0};const e=this.items[this.trav];return this.trav++,{value:Su(e),done:!1}}}class _u extends $u{constructor(e){super(),this.nextFn=e}summary(){return"Function call"}async next(){try{return this.nextFn()}catch(e){throw e.message=`Error thrown while iterating through a dataset: ${e.message}`,e}}}class Au extends $u{constructor(e){super(),this.upstream=e,this.lastRead=Promise.resolve({value:null,done:!1})}summary(){return`${this.upstream.summary()} -> Serial`}async next(){return this.lastRead=this.lastRead.then((()=>this.serialNext())),this.lastRead}async serialNext(){return this.upstream.next()}}class Ru extends $u{constructor(e,t){super(),this.upstream=e,this.maxCount=t,this.count=0,this.lastRead=Promise.resolve({value:null,done:!1})}summary(){return`${this.upstream.summary()} -> Skip`}async next(){return this.lastRead=this.lastRead.then((()=>this.serialNext())),this.lastRead}async serialNext(){for(;this.count++<this.maxCount;){const e=await this.upstream.next();if(e.done)return e;r.dispose(e.value)}return this.upstream.next()}}class Fu extends $u{constructor(e,t){super(),this.upstream=e,this.maxCount=t,this.count=0}summary(){return`${this.upstream.summary()} -> Take`}async next(){return this.count++>=this.maxCount?{value:null,done:!0}:this.upstream.next()}}class Du extends $u{constructor(e,t,n=!0){super(),this.upstream=e,this.batchSize=t,this.enableSmallLastBatch=n,this.lastRead=Promise.resolve({value:null,done:!1})}summary(){return`${this.upstream.summary()} -> RowMajorBatch`}async next(){return this.lastRead=this.lastRead.then((()=>this.serialNext())),this.lastRead}async serialNext(){const e=[];for(;e.length<this.batchSize;){const t=await this.upstream.next();if(t.done)return this.enableSmallLastBatch&&e.length>0?{value:e,done:!1}:{value:null,done:!0};e.push(t.value)}return{value:e,done:!1}}}class Ou extends $u{constructor(e,t){super(),this.upstream=e,this.predicate=t,this.lastRead=Promise.resolve({value:null,done:!1})}summary(){return`${this.upstream.summary()} -> Filter`}async next(){return this.lastRead=this.lastRead.then((()=>this.serialNext())),this.lastRead}async serialNext(){for(;;){const e=await this.upstream.next();if(e.done||this.predicate(e.value))return e;r.dispose(e.value)}}}class Mu extends $u{constructor(e,t){super(),this.upstream=e,this.transform=t}summary(){return`${this.upstream.summary()} -> Map`}async next(){const e=await this.upstream.next();if(e.done)return{value:null,done:!0};const t=r.tensor_util.getTensorsInContainer(e.value),n=this.transform(e.value),s=r.tensor_util.getTensorsInContainer(n);for(const e of t)r.tensor_util.isTensorInList(e,s)||e.dispose();return{value:n,done:!1}}}class zu extends $u{constructor(e,t){super(),this.upstream=e,this.handler=t,this.count=0,this.lastRead=Promise.resolve({value:null,done:!1})}summary(){return`${this.upstream.summary()} -> handleErrors`}async next(){return this.lastRead=this.lastRead.then((()=>this.serialNext())),this.lastRead}async serialNext(){for(;;)try{return await this.upstream.next()}catch(e){if(!this.handler(e))return{value:null,done:!0}}}}class Lu extends $u{constructor(e,t){super(),this.upstream=e,this.transform=t}summary(){return`${this.upstream.summary()} -> AsyncMap`}async next(){const e=await this.upstream.next();if(e.done)return{value:null,done:!0};const t=r.tensor_util.getTensorsInContainer(e.value),n=await this.transform(e.value),s=r.tensor_util.getTensorsInContainer(n);for(const e of t)r.tensor_util.isTensorInList(e,s)||e.dispose();return{value:n,done:!1}}}class Bu extends $u{constructor(){super(),this.outputQueue=new Cu,this.lastRead=Promise.resolve({value:null,done:!1})}async next(){return this.lastRead=this.lastRead.then((()=>this.serialNext())),this.lastRead}async serialNext(){for(;0===this.outputQueue.length();)if(!await this.pump())return{value:null,done:!0};return{value:this.outputQueue.shift(),done:!1}}}class Pu extends Bu{constructor(e,t){super(),this.upstream=e,this.transform=t}summary(){return`${this.upstream.summary()} -> Flatmap`}async pump(){const e=await this.upstream.next();if(e.done)return!1;const t=r.tensor_util.getTensorsInContainer(e.value),n=this.transform(e.value),s=r.tensor_util.getTensorsInContainer(n);this.outputQueue.pushAll(n);for(const e of t)r.tensor_util.isTensorInList(e,s)||e.dispose();return!0}}class Vu extends $u{constructor(e,t){super(),this.baseErrorHandler=t,this.lastRead=null,this.iterator=null,this.moreIterators=e}summary(){return"TODO: fill in upstream of chained summaries -> Chained"}async next(){return this.lastRead=this.readFromChain(this.lastRead),this.lastRead}async readFromChain(e){if(await e,null==this.iterator){const e=await this.moreIterators.next();if(e.done)return{value:null,done:!0};this.iterator=e.value,null!=this.baseErrorHandler&&(this.iterator=this.iterator.handleErrors(this.baseErrorHandler))}const t=await this.iterator.next();return t.done?(this.iterator=null,this.readFromChain(e)):t}}(gu=mu||(mu={}))[gu.FAIL=0]="FAIL",gu[gu.SHORTEST=1]="SHORTEST",gu[gu.LONGEST=2]="LONGEST";class Wu extends $u{constructor(e,t){super(),this.upstream=e,this.bufferSize=t,this.buffer=new Tu(t)}summary(){return`${this.upstream.summary()} -> Prefetch`}refill(){for(;!this.buffer.isFull();){const e=this.upstream.next();this.buffer.push(e)}}next(){return this.refill(),this.buffer.shift()}}class Uu extends Wu{constructor(e,t,n){super(e,t),this.upstream=e,this.windowSize=t,this.upstreamExhausted=!1,this.random=bu.alea(n||r.util.now().toString()),this.lastRead=Promise.resolve({value:null,done:!1})}async next(){return this.lastRead=this.lastRead.then((()=>this.serialNext())),this.lastRead}randomInt(e){return Math.floor(this.random()*e)}chooseIndex(){return this.randomInt(this.buffer.length())}async serialNext(){for(this.upstreamExhausted||this.refill();!this.buffer.isEmpty();){const e=this.chooseIndex(),t=await this.buffer.shuffleExcise(e);if(!t.done)return this.refill(),t;this.upstreamExhausted=!0}return{value:null,done:!0}}}class Gu{constructor(){this.size=null}batch(e,t=!0){const n=this;let s;return r.util.assert(e>0,(()=>`batchSize needs to be positive, but it is\n      ${e}`)),s=this.size===1/0||null==this.size?this.size:t?Math.ceil(this.size/e):Math.floor(this.size/e),Hu((async()=>(await n.iterator()).columnMajorBatch(e,t,qu)),s)}concatenate(e){const t=this;let n;return n=this.size===1/0||e.size===1/0?1/0:null!=this.size&&null!=e.size?this.size+e.size:null,Hu((async()=>(await t.iterator()).concatenate(await e.iterator())),n)}filter(e){const t=this;let n;return n=this.size===1/0?1/0:null,Hu((async()=>(await t.iterator()).filter((t=>r.tidy((()=>e(t)))))),n)}async forEachAsync(e){return(await this.iterator()).forEachAsync(e)}map(e){const t=this;return Hu((async()=>(await t.iterator()).map((t=>r.tidy((()=>e(t)))))),this.size)}mapAsync(e){const t=this;return Hu((async()=>(await t.iterator()).mapAsync(e)),this.size)}prefetch(e){if(null==e)throw new RangeError("`Dataset.prefetch()` requires bufferSize to be specified.");const t=this;return Hu((async()=>(await t.iterator()).prefetch(e)),this.size)}repeat(e){const t=this;let n;return n=null!=this.size&&e>0?this.size*e:0===e?0:null!=this.size&&(void 0===e||e<0)?1/0:null,Hu((async()=>{return n=(a=async()=>({value:await t.iterator(),done:!1}),new _u(a)).take(e),new Vu(n,s);var n,s,a}),n)}skip(e){const t=this;let n;return n=null!=this.size&&e>=0&&this.size>=e?this.size-e:null!=this.size&&(this.size<e||void 0===e||e<0)?0:null,Hu((async()=>(await t.iterator()).skip(e)),n)}shuffle(e,t,n=!0){if(null==e||e<0)throw null==this.size?new RangeError("`Dataset.shuffle()` requires bufferSize to be specified."):new RangeError(`\`Dataset.shuffle()\` requires bufferSize to be specified.  If your data fits in main memory (for regular JS objects), and/or GPU memory (for \`tf.Tensor\`s), consider setting bufferSize to the dataset size (${this.size} elements)`);const s=this,a=bu.alea(t||r.util.now().toString());return Hu((async()=>{let t=a.int32();return n&&(t+=a.int32()),(await s.iterator()).shuffle(e,t.toString())}),this.size)}take(e){const t=this;let n;return n=null!=this.size&&this.size>e?e:null!=this.size&&this.size<=e?this.size:null,Hu((async()=>(await t.iterator()).take(e)),n)}async toArray(){if(this.size===1/0)throw new Error("Can not convert infinite data stream to array.");return(await this.iterator()).toArray()}async toArrayForTest(){if(this.size===1/0)throw new Error("Can not convert infinite data stream to array.");return(await this.iterator()).toArrayForTest()}}function Hu(e,t=null){return new class extends Gu{constructor(){super(...arguments),this.size=t}async iterator(){return e()}}}function qu(e){if(null===e)return null;return null==(t=e[0])||null===(n=t)||"object"!=typeof n&&"function"!=typeof n||Array.isArray(t)||"object"==typeof t&&t instanceof r.Tensor||r.util.isTypedArray(t)?{value:function(e){if(0===e.length)throw new Error("Can't make a batch of zero elements.");return e[0]instanceof r.Tensor?r.stack(e):r.tensor(e)}(e),recurse:!1}:{value:null,recurse:!0};var t,n}function Xu(e,t){Array.isArray(e)||(e=[e]),e.forEach((e=>{null!=e&&r.util.assert("complex64"!==e.dtype,(()=>`${t} does not support complex64 tensors in the CPU backend.`))}))}Gu.MAX_BUFFER_SIZE=1e4,Symbol("out"),Symbol("field"),Symbol("quote"),Symbol("quoteafterquote"),Symbol("quoteinquote");const ju=r.kernel_impls.whereImpl;class Ku extends r.KernelBackend{constructor(){super(),this.blockSize=48,this.firstUse=!0,this.data=new r.DataStorage(this,(0,r.engine)())}nextDataId(){return Ku.nextDataId++}write(e,t,n){this.firstUse&&(this.firstUse=!1,(0,r.env)().get("IS_NODE")&&r.backend_util.warn("\n============================\nHi, looks like you are running TensorFlow.js in Node.js. To speed things up dramatically, install our node backend, visit https://github.com/tensorflow/tfjs-node for more details. \n============================"));const s={id:this.nextDataId()};return this.data.set(s,{values:e,dtype:n,refCount:1}),s}makeTensorInfo(e,t,n){let s;if("string"===t&&null!=n&&n.length>0&&r.util.isString(n[0])){const a=n.map((e=>r.util.encodeString(e)));s=this.write(a,e,t)}else s=this.write(n,e,t);return{dataId:s,shape:e,dtype:t}}refCount(e){return this.data.has(e)?this.data.get(e).refCount:0}incRef(e){this.data.get(e).refCount++}decRef(e){this.data.has(e)&&this.data.get(e).refCount--}move(e,t,n,s,a){this.data.set(e,{values:t,dtype:s,refCount:a})}numDataIds(){return this.data.numDataIds()}async read(e){return this.readSync(e)}readSync(e){const{dtype:t,complexTensorInfos:n}=this.data.get(e);if("complex64"===t){const e=this.readSync(n.real.dataId),t=this.readSync(n.imag.dataId);return r.backend_util.mergeRealAndImagArrays(e,t)}return this.data.get(e).values}bufferSync(e){const t=this.readSync(e.dataId);if("string"===e.dtype)try{const n=t.map((e=>r.util.decodeString(e)));return(0,r.buffer)(e.shape,e.dtype,n)}catch(e){throw new Error("Failed to decode encoded string bytes into utf-8")}return(0,r.buffer)(e.shape,e.dtype,t)}makeOutput(e,t,n){return(0,r.engine)().makeTensorFromTensorInfo(this.makeTensorInfo(t,n,e),this)}disposeData(e,t=!1){if(this.data.has(e)){if(this.data.get(e).refCount--,!t&&this.data.get(e).refCount>0)return!1;const{complexTensorInfos:n}=this.data.get(e);null!=n&&(this.disposeData(n.real.dataId,!0),this.disposeData(n.imag.dataId,!0)),this.data.delete(e)}return!0}disposeIntermediateTensorInfo(e){this.disposeData(e.dataId)}async time(e){const t=r.util.now();return e(),{kernelMs:r.util.now()-t}}memory(){return{unreliable:!0,reasons:["The reported memory is an upper bound. Due to automatic garbage collection, the true allocated memory may be less."]}}where(e){Xu([e],"where");const t=this.readSync(e.dataId);return ju(e.shape,t)}dispose(){}floatPrecision(){return 32}epsilon(){return super.epsilon()}}function Yu(e,t,n){return({inputs:s,attrs:a,backend:i})=>{const{x:o}=s;if(Xu(o,e),"string"===o.dtype||"string"===n)throw new Error("unaryKernelFunc does not support string input/output");const l=i,u=l.data.get(o.dataId).values,c=r.util.sizeFromShape(o.shape),h=n||o.dtype,p=r.util.getArrayFromDType(h,c);for(let e=0;e<c;++e)p[e]=t(u[e],a);return l.makeTensorInfo(o.shape,h,p)}}function Zu(e,t,n){return({inputs:s,attrs:a,backend:r})=>{const{x:i}=s;if(Xu(i,e),"string"===i.dtype||"string"===n)throw new Error("unaryKernelFunc does not support string input/output");const o=r,l=o.data.get(i.dataId).values,u=n||i.dtype,c=t(l,u,a);return o.makeTensorInfo(i.shape,u,c)}}Ku.nextDataId=0,(0,r.registerBackend)("cpu",(()=>new Ku),1);const Qu=Yu(r.Elu,(e=>e>=0?e:Math.exp(e)-1)),Ju={kernelName:r.Elu,backendName:"cpu",kernelFunc:Qu};function ec(e){const{inputs:t,backend:n}=e,{x:s}=t;return n.incRef(s.dataId),{dataId:s.dataId,shape:s.shape,dtype:s.dtype}}const tc={kernelName:r.Identity,backendName:"cpu",kernelFunc:ec};function nc(e){const{inputs:t,backend:n,attrs:s}=e,{x:a}=t,{alpha:i}=s;Xu([a],"leakyRelu");const o=r.util.sizeFromShape(a.shape),l=n.data.get(a.dataId).values,u=r.util.getTypedArrayFromDType("float32",o);for(let e=0;e<l.length;e++)u[e]=l[e]<0?i*l[e]:l[e];return n.makeTensorInfo(a.shape,"float32",u)}const sc={kernelName:r.LeakyRelu,backendName:"cpu",kernelFunc:nc};function ac(e){return(t,n,s,a,i)=>{const o=r.backend_util.assertAndGetBroadcastShape(t,n),l=o.length,u=r.util.computeStrides(o),c=r.util.sizeFromShape(o),h=r.util.getTypedArrayFromDType(i,c),p=t.length,d=n.length,f=r.util.computeStrides(t),m=r.util.computeStrides(n),g=r.backend_util.getBroadcastDims(t,o),y=r.backend_util.getBroadcastDims(n,o);if(g.length+y.length===0)for(let t=0;t<h.length;++t)h[t]=e(s[t%s.length],a[t%a.length]);else for(let t=0;t<h.length;++t){const n=r.util.indexToLoc(t,l,u),i=n.slice(-p);g.forEach((e=>i[e]=0));const o=r.util.locToIndex(i,p,f),c=n.slice(-d);y.forEach((e=>c[e]=0));const b=r.util.locToIndex(c,d,m);h[t]=e(s[o],a[b])}return[h,o]}}const rc=ac(((e,t)=>e<0?t*e:e));function ic(e){const{inputs:t,backend:n}=e,{x:s,alpha:a}=t;Xu([s,a],"prelu");const r=n.data.get(s.dataId).values,i=n.data.get(a.dataId).values,[o,l]=rc(s.shape,a.shape,r,i,"float32");return n.makeTensorInfo(l,"float32",o)}const oc={kernelName:r.Prelu,backendName:"cpu",kernelFunc:ic},lc=Yu(r.Relu,(e=>Math.max(0,e))),uc={kernelName:r.Relu,backendName:"cpu",kernelFunc:lc},cc=Yu(r.Relu6,(e=>Math.min(Math.max(0,e),6))),hc={kernelName:r.Relu6,backendName:"cpu",kernelFunc:cc};function pc(e){return(t,n,s)=>{const a=r.util.getTypedArrayFromDType(n,t.length);for(let n=0;n<t.length;++n)a[n]=e(t[n],s);return a}}const dc=pc((e=>1/(1+Math.exp(-e)))),fc=Yu(r.Sigmoid,(e=>1/(1+Math.exp(-e)))),mc={kernelName:r.Sigmoid,backendName:"cpu",kernelFunc:fc};function gc(e,t,n,s,a){if("linear"===n)return ec({inputs:{x:t},backend:e});if("relu"===n)return lc({inputs:{x:t},backend:e});if("elu"===n)return Qu({inputs:{x:t},backend:e});if("relu6"===n)return cc({inputs:{x:t},backend:e});if("prelu"===n)return ic({inputs:{x:t,alpha:s},backend:e});if("leakyrelu"===n)return nc({inputs:{x:t},backend:e,attrs:{alpha:a}});if("sigmoid"===n)return fc({inputs:{x:t},backend:e});throw new Error(`Activation ${n} has not been implemented for the CPU backend.`)}function yc(e){const{inputs:t,backend:n}=e,{real:s,imag:a}=t,r=n.data.get(s.dataId).values,i=n.data.get(a.dataId).values,o=n.makeTensorInfo(s.shape,"complex64");return n.data.get(o.dataId).complexTensorInfos={real:n.makeTensorInfo(s.shape,"float32",r),imag:n.makeTensorInfo(a.shape,"float32",i)},o}const bc={kernelName:r.Complex,backendName:"cpu",kernelFunc:yc};function xc(e,t,n="float32"){if("complex64"===n)return yc({inputs:{real:xc(e,t,"float32"),imag:xc(e,t,"float32")},backend:e});const s=r.util.makeZerosTypedArray(r.util.sizeFromShape(t),n);return e.makeTensorInfo(t,n,s)}function vc(e){const{inputs:t,backend:n}=e,{input:s}=t,a=n.data.get(s.dataId).complexTensorInfos.real,r=n.data.get(a.dataId).values;return n.makeTensorInfo(a.shape,a.dtype,r)}const wc={kernelName:r.Real,backendName:"cpu",kernelFunc:vc};function kc(e,t,n,s){if("int32"===s)return[t,"int32",Int32Array.from(e)];if("bool"===s){const s=r.util.toTypedArray([0],n),[a,i]=ac(((e,t)=>e!==t?1:0))(t,[],e,s,"bool");return[i,"bool",a]}throw new Error(`Error in Cast: failed to cast ${n} to ${s}`)}function Ic(e){const{inputs:t,backend:n,attrs:s}=e,{x:a}=t,{dtype:i}=s;if("complex64"===i){if("complex64"===a.dtype)return ec({inputs:{x:a},backend:n});const e=xc(n,a.shape,a.dtype),t=Ic({inputs:{x:a},backend:n,attrs:{dtype:"float32"}}),s=yc({inputs:{real:t,imag:e},backend:n});return n.disposeIntermediateTensorInfo(e),n.disposeIntermediateTensorInfo(t),s}if("complex64"===a.dtype){const e=vc({inputs:{input:a},backend:n}),t=Ic({inputs:{x:e},backend:n,attrs:{dtype:i}});return n.disposeIntermediateTensorInfo(e),t}if(!r.util.hasEncodingLoss(a.dtype,i)){const e=ec({inputs:{x:a},backend:n});return{dataId:e.dataId,shape:e.shape,dtype:i}}const o=n.data.get(a.dataId).values,[l,u,c]=kc(o,a.shape,a.dtype,i);return n.makeTensorInfo(l,u,c)}const Sc={kernelName:r.Cast,backendName:"cpu",kernelFunc:Ic};function Nc(e,t,n,s){return null==n?({inputs:n,backend:a})=>{const{a:i,b:o}=n,l=a;Xu([i,o],e);const u=l.data.get(i.dataId).values,c=l.data.get(o.dataId).values,h="string"===i.dtype?r.backend_util.fromUint8ToStringArray(u):u,p="string"===i.dtype?r.backend_util.fromUint8ToStringArray(c):c,d=s||i.dtype,[f,m]=t(i.shape,o.shape,h,p,d);return l.makeTensorInfo(m,d,f)}:({inputs:e,backend:a})=>{const{a:r,b:i}=e,o=a;if("complex64"===r.dtype||"complex64"===i.dtype){const e=Ic({inputs:{x:r},backend:o,attrs:{dtype:"complex64"}}),t=o.data.get(e.dataId),s=t.complexTensorInfos.real,a=t.complexTensorInfos.imag,l=o.data.get(s.dataId).values,u=o.data.get(a.dataId).values,c=Ic({inputs:{x:i},backend:o,attrs:{dtype:"complex64"}}),h=o.data.get(c.dataId),p=h.complexTensorInfos.real,d=h.complexTensorInfos.imag,f=o.data.get(p.dataId).values,m=o.data.get(d.dataId).values,[g,y,b]=n(r.shape,i.shape,l,u,f,m),x=o.makeTensorInfo(b,"float32",g),v=o.makeTensorInfo(b,"float32",y),w=yc({inputs:{real:x,imag:v},backend:o});return o.disposeIntermediateTensorInfo(e),o.disposeIntermediateTensorInfo(c),o.disposeIntermediateTensorInfo(x),o.disposeIntermediateTensorInfo(v),w}{const e=o.data.get(r.dataId).values,n=o.data.get(i.dataId).values,a=s||r.dtype,[l,u]=t(r.shape,i.shape,e,n,a);return o.makeTensorInfo(u,a,l)}}}function Tc(e){return(t,n,s,a,i,o)=>{const l=r.backend_util.assertAndGetBroadcastShape(t,n),u=r.util.sizeFromShape(l),c=l.length,h=r.util.computeStrides(l),p=r.util.getTypedArrayFromDType("float32",u),d=r.util.getTypedArrayFromDType("float32",u),f=r.backend_util.getBroadcastDims(t,l),m=r.backend_util.getBroadcastDims(n,l),g=r.backend_util.mergeRealAndImagArrays(s,a),y=r.backend_util.mergeRealAndImagArrays(i,o),b=t.length,x=r.util.computeStrides(t),v=n.length,w=r.util.computeStrides(n);if(f.length+m.length===0)for(let t=0;t<p.length;t++){const n=t%g.length,s=t%y.length,a=e(g[2*n],g[2*n+1],y[2*s],y[2*s+1]);p[t]=a.real,d[t]=a.imag}else for(let t=0;t<p.length;t++){const n=r.util.indexToLoc(t,c,h),s=n.slice(-b);f.forEach((e=>s[e]=0));const a=r.util.locToIndex(s,b,x),i=n.slice(-v);m.forEach((e=>i[e]=0));const o=r.util.locToIndex(i,v,w),l=e(g[2*a],g[2*a+1],y[2*o],y[2*o+1]);p[t]=l.real,d[t]=l.imag}return[p,d,l]}}const Cc=ac(((e,t)=>e+t)),$c=Tc(((e,t,n,s)=>({real:e+n,imag:t+s}))),Ec=Nc(r.Add,Cc,$c),_c={kernelName:r.Add,backendName:"cpu",kernelFunc:Ec};function Ac(e){const{inputs:t,backend:n,attrs:s}=e,{x:a}=t,{shape:i}=s,o=r.util.sizeFromShape(a.shape),l=r.util.inferFromImplicitShape(i,o),u=r.util.sizeFromShape(l);r.util.assert(o===u,(()=>`The new shape (${l}) has ${u} elements and the old shape (${a.shape}) has ${o} elements. The new shape and old shape must have the same number of elements.`)),n.incRef(a.dataId);const c=n.data.get(a.dataId);if(null!=c.complexTensorInfos){const e=c.complexTensorInfos.real,t=c.complexTensorInfos.imag;e.shape=l,t.shape=l}return{dataId:a.dataId,shape:l,dtype:a.dtype}}const Rc={kernelName:r.Reshape,backendName:"cpu",kernelFunc:Ac};function Fc(e){const{inputs:t,backend:n,attrs:s}=e,{a,b:i}=t,{transposeA:o,transposeB:l}=s;Xu([a,i],"matMul");const u=a.shape.length,c=i.shape.length,h=o?a.shape[u-2]:a.shape[u-1],p=l?i.shape[c-1]:i.shape[c-2],d=o?a.shape[u-1]:a.shape[u-2],f=l?i.shape[c-2]:i.shape[c-1],m=a.shape.slice(0,-2),g=i.shape.slice(0,-2),y=r.util.sizeFromShape(m),b=r.util.sizeFromShape(g),x=r.broadcast_util.assertAndGetBroadcastShape(a.shape.slice(0,-2),i.shape.slice(0,-2)).concat([d,f]);r.util.assert(h===p,(()=>`Error in matMul: inner shapes (${h}) and (${p}) of Tensors with shapes ${a.shape} and ${i.shape} and transposeA=${o} and transposeB=${l} must match.`));const v=l?[b,f,p]:[b,p,f],w=Ac({inputs:{x:a},backend:n,attrs:{shape:o?[y,h,d]:[y,d,h]}}),k=Ac({inputs:{x:i},backend:n,attrs:{shape:v}}),I=o?w.shape[1]:w.shape[2],S=o?w.shape[2]:w.shape[1],N=l?k.shape[1]:k.shape[2],T=Math.max(y,b),C=n.data.get(w.dataId).values,$=n.data.get(k.dataId).values,E=r.util.computeStrides(w.shape),_=r.util.computeStrides(k.shape),[A,R,F]=o?[E[0],1,E[1]]:[E[0],E[1],1],[D,O,M]=l?[1,_[1],_[0]]:[_[1],1,_[0]],z=S*N,L=(0,r.buffer)([T,S,N],w.dtype),B=L.values,P=n.blockSize;for(let e=0;e<T;e++)for(let t=0;t<S;t+=P)for(let n=0;n<N;n+=P)for(let s=0;s<I;s+=P){const a=Math.min(t+P,S),r=Math.min(n+P,N),i=Math.min(s+P,I);for(let o=t;o<a;o++)for(let t=n;t<r;t++){let n=0;for(let a=s;a<i;a++){const s=Math.min(e,y-1)*A,r=Math.min(e,b-1)*M;n+=C[s+o*R+a*F]*$[a*D+t*O+r]}B[e*z+(o*N+t)]+=n}}return n.disposeIntermediateTensorInfo(w),n.disposeIntermediateTensorInfo(k),n.makeTensorInfo(x,L.dtype,L.values)}const Dc={kernelName:r.BatchMatMul,backendName:"cpu",kernelFunc:Fc},Oc={kernelName:r._FusedMatMul,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{a,b:r,bias:i,preluActivationWeights:o}=t,{transposeA:l,transposeB:u,activation:c,leakyreluAlpha:h}=s;let p,d,f;const m=[];p=Fc({inputs:{a,b:r},attrs:{transposeA:l,transposeB:u},backend:n}),i&&(d=Ec({inputs:{a:p,b:i},backend:n}),m.push(p),p=d),c&&(f=gc(n,p,c,o,h),m.push(p),p=f);for(const e of m)n.disposeIntermediateTensorInfo(e);return p}};function Mc(e){const t=new Float32Array(e.length);for(let n=0;n<e.length;++n)t[n]=Math.abs(e[n]);return t}const zc={kernelName:r.Abs,backendName:"cpu",kernelFunc:e=>{const{x:t}=e.inputs,n=e.backend;Xu(t,"abs");let s=new Float32Array(r.util.sizeFromShape(t.shape));return s=Mc(n.data.get(t.dataId).values),n.makeOutput(s,t.shape,t.dtype)}},Lc=Yu(r.Acos,(e=>Math.acos(e))),Bc={kernelName:r.Acos,backendName:"cpu",kernelFunc:Lc},Pc=Yu(r.Acosh,(e=>Math.acosh(e))),Vc={kernelName:r.Acosh,backendName:"cpu",kernelFunc:Pc},Wc={kernelName:r.AddN,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n}=e,s=t;Xu(t,"addN");const a=s.map((e=>n.data.get(e.dataId).values)),i=(0,r.buffer)(s[0].shape,s[0].dtype),o=i.values;for(let e=0;e<s.length;e++){const t=a[e];for(let e=0;e<o.length;e++)o[e]+=t[e]}return n.makeTensorInfo(i.shape,i.dtype,i.values)}};function Uc(e,t,n,s,a){const i=t.length,o=r.util.sizeFromShape(t),l=r.util.computeStrides(t),u=r.util.computeStrides(a),c=r.util.getTypedArrayFromDType(n,r.util.sizeFromShape(a));for(let t=0;t<o;++t){const n=r.util.indexToLoc(t,i,l),a=new Array(n.length);for(let e=0;e<a.length;e++)a[e]=n[s[e]];c[r.util.locToIndex(a,i,u)]=e[t]}return c}function Gc(e){const{inputs:t,attrs:n,backend:s}=e,{x:a}=t,{perm:r}=n;Xu(a,"transpose");const i=a.shape.length,o=new Array(i);for(let e=0;e<o.length;e++)o[e]=a.shape[r[e]];const l=Uc(s.data.get(a.dataId).values,a.shape,a.dtype,r,o);return{dataId:s.write(l,o,a.dtype),shape:o,dtype:a.dtype}}const Hc={kernelName:r.Transpose,backendName:"cpu",kernelFunc:Gc},qc={kernelName:r.All,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:a}=t,{axis:i,keepDims:o}=s;Xu(a,"all");const l=r.util.parseAxisParam(i,a.shape);let u=l;const c=r.backend_util.getAxesPermutation(u,a.shape.length);let h=a;null!=c&&(h=Gc({inputs:{x:a},backend:n,attrs:{perm:c}}),u=r.backend_util.getInnerMostAxes(u.length,a.shape.length)),r.backend_util.assertAxesAreInnerMostDims("all",u,h.shape.length);const[p,d]=r.backend_util.computeOutAndReduceShapes(h.shape,u),f=r.util.sizeFromShape(d),m=r.util.makeZerosTypedArray(r.util.sizeFromShape(p),h.dtype),g=n.data.get(h.dataId).values;for(let e=0;e<m.length;++e){const t=e*f;let n=g[t];for(let e=0;e<f;++e){const s=g[t+e];n=n&&s}m[e]=n}null!=c&&n.disposeIntermediateTensorInfo(h);const y=n.makeTensorInfo(p,h.dtype,m);if(o){const e=Ac({inputs:{x:y},backend:n,attrs:{shape:r.backend_util.expandShapeToKeepDim(p,l)}});return n.disposeIntermediateTensorInfo(y),e}return y}},Xc={kernelName:r.Any,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:a}=t,{axis:i,keepDims:o}=s;Xu(a,"any");const l=r.util.parseAxisParam(i,a.shape);let u=l;const c=r.backend_util.getAxesPermutation(u,a.shape.length);let h=a;null!=c&&(h=Gc({inputs:{x:a},backend:n,attrs:{perm:c}}),u=r.backend_util.getInnerMostAxes(u.length,a.shape.length)),r.backend_util.assertAxesAreInnerMostDims("any",u,h.shape.length);const[p,d]=r.backend_util.computeOutAndReduceShapes(h.shape,u),f=r.util.sizeFromShape(d),m=r.util.makeZerosTypedArray(r.util.sizeFromShape(p),h.dtype),g=n.data.get(h.dataId).values;for(let e=0;e<m.length;++e){const t=e*f;let n=g[t];for(let e=0;e<f;++e){const s=g[t+e];n=n||s}m[e]=n}null!=c&&n.disposeIntermediateTensorInfo(h);const y=n.makeTensorInfo(p,h.dtype,m);if(o){const e=Ac({inputs:{x:y},backend:n,attrs:{shape:r.backend_util.expandShapeToKeepDim(p,l)}});return n.disposeIntermediateTensorInfo(y),e}return y}},jc={kernelName:r.ArgMax,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:a}=t,{axis:i}=s;Xu(a,"argMax");let o=r.util.parseAxisParam(i,a.shape);const l=r.backend_util.getAxesPermutation(o,a.shape.length);let u=a;const c=[];null!=l&&(u=Gc({inputs:{x:a},backend:n,attrs:{perm:l}}),c.push(u),o=r.backend_util.getInnerMostAxes(o.length,u.shape.length)),o=[o[0]],r.backend_util.assertAxesAreInnerMostDims("argMax",o,u.shape.length);const[h,p]=r.backend_util.computeOutAndReduceShapes(u.shape,o),d=r.util.sizeFromShape(h),f=r.util.makeZerosTypedArray(d,"int32"),m=r.util.sizeFromShape(p),g=n.data.get(u.dataId).values;for(let e=0;e<f.length;++e){const t=e*m;let n=g[t],s=0;for(let e=0;e<m;++e){const a=g[t+e];a>n&&(n=a,s=e)}f[e]=s}return c.forEach((e=>n.disposeIntermediateTensorInfo(e))),n.makeTensorInfo(h,"int32",f)}},Kc={kernelName:r.ArgMin,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:a}=t,{axis:i}=s;Xu(a,"argMin");let o=r.util.parseAxisParam(i,a.shape);const l=r.backend_util.getAxesPermutation(o,a.shape.length);let u=a;const c=[];null!=l&&(u=Gc({inputs:{x:a},backend:n,attrs:{perm:l}}),c.push(u),o=r.backend_util.getInnerMostAxes(o.length,u.shape.length)),o=[o[0]],r.backend_util.assertAxesAreInnerMostDims("argMin",o,u.shape.length);const[h,p]=r.backend_util.computeOutAndReduceShapes(u.shape,o),d=r.util.sizeFromShape(h),f=r.util.makeZerosTypedArray(d,"int32"),m=r.util.sizeFromShape(p),g=n.data.get(u.dataId).values;for(let e=0;e<f.length;++e){const t=e*m;let n=g[t],s=0;for(let e=0;e<m;++e){const a=g[t+e];a<n&&(n=a,s=e)}f[e]=s}return c.forEach((e=>n.disposeIntermediateTensorInfo(e))),n.makeTensorInfo(h,"int32",f)}},Yc=Yu(r.Asin,(e=>Math.asin(e))),Zc={kernelName:r.Asin,backendName:"cpu",kernelFunc:Yc},Qc=Yu(r.Asinh,(e=>Math.asinh(e))),Jc={kernelName:r.Asinh,backendName:"cpu",kernelFunc:Qc},eh=Yu(r.Atan,(e=>Math.atan(e))),th={kernelName:r.Atan,backendName:"cpu",kernelFunc:eh},nh=ac(((e,t)=>Math.atan2(e,t))),sh=Nc(r.Atan2,nh),ah={kernelName:r.Atan2,backendName:"cpu",kernelFunc:sh},rh=Yu(r.Atanh,(e=>Math.atanh(e))),ih={kernelName:r.Atanh,backendName:"cpu",kernelFunc:rh};function oh(e,t,n,s,a,i){const o=a.strideHeight,l=a.strideWidth,u=a.dilationHeight,c=a.dilationWidth,h=a.effectiveFilterHeight,p=a.effectiveFilterWidth,d=a.padInfo.top,f=a.padInfo.left,m="max"===i?Number.NEGATIVE_INFINITY:Number.POSITIVE_INFINITY,g=(0,r.buffer)(a.outShape,n),y=g.values,b=a.outShape[1]*a.outShape[2]*a.outShape[3],x=a.outShape[2]*a.outShape[3],v=a.outShape[3];for(let t=0;t<a.batchSize;++t){const n=t*b,r=t*s[0];for(let t=0;t<a.inChannels;++t)for(let g=0;g<a.outHeight;++g){const b=g*o-d,w=Math.max(0,b),k=Math.min(a.inHeight,h+b),I=n+g*x;for(let n=0;n<a.outWidth;++n){const o=n*l-f,h=Math.max(0,o),d=Math.min(a.inWidth,p+o);let g=m,b=0,x=0;for(let n=w;n<k;n+=u){const a=r+n*s[1];for(let n=h;n<d;n+=c){const r=e[a+n*s[2]+t];"max"===i&&r>g?g=r:"avg"===i&&(b+=r,x++)}if(isNaN(g))break}y[I+n*v+t]="avg"===i?b/x:g}}}return g}function lh(e,t,n,s,a=!1,i=!1){const o=(0,r.buffer)(s.outShape,"int32"),l=s.strideHeight,u=s.strideWidth,c=s.dilationHeight,h=s.dilationWidth,p=s.effectiveFilterHeight,d=s.effectiveFilterWidth,f=s.padInfo.top,m=s.padInfo.left,g=(0,r.buffer)(t,n,e);for(let e=0;e<s.batchSize;++e)for(let t=0;t<s.inChannels;++t)for(let n=0;n<s.outHeight;++n){const r=n*l-f;let y=r;for(;y<0;)y+=c;const b=Math.min(s.inHeight,p+r);for(let l=0;l<s.outWidth;++l){const p=l*u-m;let f=p;for(;f<0;)f+=h;const x=Math.min(s.inWidth,d+p);let v=Number.NEGATIVE_INFINITY,w=-1;for(let n=y;n<b;n+=c){const o=n-r;for(let r=f;r<x;r+=h){const l=r-p,u=g.get(e,n,r,t);u>v&&(v=u,w=a?i?((e*s.inHeight+n)*s.inWidth+r)*s.inChannels+t:(n*s.inWidth+r)*s.inChannels+t:o*d+l)}}o.set(w,e,n,l,t)}}return o}function uh(e,t,n,s,a,i){const o=a.strideDepth,l=a.strideHeight,u=a.strideWidth,c=a.dilationDepth,h=a.dilationHeight,p=a.dilationWidth,d=a.effectiveFilterDepth,f=a.effectiveFilterHeight,m=a.effectiveFilterWidth,g=a.padInfo.front,y=a.padInfo.top,b=a.padInfo.left,x="max"===i?Number.NEGATIVE_INFINITY:Number.POSITIVE_INFINITY,v=(0,r.buffer)(a.outShape,n),w=v.values,k=a.outShape[1]*a.outShape[2]*a.outShape[3]*a.outShape[4],I=a.outShape[2]*a.outShape[3]*a.outShape[4],S=a.outShape[3]*a.outShape[4],N=a.outShape[4];for(let t=0;t<a.batchSize;++t){const n=t*k,r=t*s[0];for(let t=0;t<a.inChannels;++t)for(let v=0;v<a.outDepth;++v){const k=v*o-g;let T=k;for(;T<0;)T+=c;const C=Math.min(a.inDepth,d+k),$=n+v*I;for(let n=0;n<a.outHeight;++n){const o=n*l-y;let d=o;for(;d<0;)d+=h;const g=Math.min(a.inHeight,f+o),v=$+n*S;for(let n=0;n<a.outWidth;++n){const o=n*u-b;let l=o;for(;l<0;)l+=p;const f=Math.min(a.inWidth,m+o),y=v+n*N;let k=x,I=0,S=0;for(let n=T;n<C;n+=c){const a=r+n*s[1];for(let n=d;n<g;n+=h){const r=a+n*s[2];for(let n=l;n<f;n+=p){const a=e[r+n*s[3]+t];if("max"===i&&a>k?k=a:"avg"===i&&(I+=a,S++),isNaN(k))break}if(isNaN(k))break}if(isNaN(k))break}w[y+t]="avg"===i?I/S:k}}}}return v}const ch={kernelName:r.AvgPool,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:a}=t;Xu(a,"avgPool");const{filterSize:i,strides:o,pad:l,dimRoundingMode:u}=s;r.util.assert(r.backend_util.eitherStridesOrDilationsAreOne(o,1),(()=>`Error in avgPool: Either strides or dilations must be 1. Got strides ${o} and dilations '1'`));const c=r.backend_util.computePool2DInfo(a.shape,i,o,1,l,u);let h;if(1===c.filterWidth&&1===c.filterHeight&&r.util.arraysEqual(c.inShape,c.outShape))h=ec({inputs:{x:a},backend:n});else{const e=n.data.get(a.dataId).values,t=r.util.computeStrides(a.shape),s=oh(e,a.shape,a.dtype,t,c,"avg");h=n.makeTensorInfo(c.outShape,a.dtype,s.values)}return h}},hh={kernelName:r.AvgPool3D,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:a}=t,{filterSize:i,strides:o,pad:l,dimRoundingMode:u,dataFormat:c}=s;Xu(a,"avgPool3d");const h=r.backend_util.computePool3DInfo(a.shape,i,o,1,l,u,c),p=uh(n.data.get(a.dataId).values,a.shape,a.dtype,r.util.computeStrides(a.shape),h,"avg");return n.makeTensorInfo(p.shape,"float32",p.values)}},ph={kernelName:r.AvgPool3DGrad,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{dy:a,input:i}=t,{filterSize:o,strides:l,pad:u,dimRoundingMode:c}=s;Xu([a,i],"avgPool3DGrad");const h=r.backend_util.computePool3DInfo(i.shape,o,l,1,u,c),p=h.strideDepth,d=h.strideHeight,f=h.strideWidth,m=h.filterDepth,g=h.filterHeight,y=h.filterWidth,b=h.dilationDepth,x=h.dilationHeight,v=h.dilationWidth,w=h.effectiveFilterDepth,k=h.effectiveFilterHeight,I=h.effectiveFilterWidth,S=w-1-h.padInfo.front,N=I-1-h.padInfo.left,T=k-1-h.padInfo.top,C=(0,r.buffer)(i.shape,"float32"),$=1/(m*g*y),E=n.bufferSync(a);for(let e=0;e<h.batchSize;++e)for(let t=0;t<h.inChannels;++t)for(let n=0;n<h.inDepth;++n)for(let s=0;s<h.inHeight;++s)for(let a=0;a<h.inWidth;++a){const r=n-S,i=s-T,o=a-N;let l=0;for(let n=0;n<w;n+=b){const s=(r+n)/p;if(!(s<0||s>=h.outDepth||Math.floor(s)!==s))for(let n=0;n<k;n+=x){const a=(i+n)/d;if(!(a<0||a>=h.outHeight||Math.floor(a)!==a))for(let n=0;n<I;n+=v){const r=(o+n)/f;r<0||r>=h.outWidth||Math.floor(r)!==r||(l+=E.get(e,s,a,r,t))}}}C.set(l*$,e,n,s,a,t)}return n.makeTensorInfo(C.shape,C.dtype,C.values)}},dh={kernelName:r.AvgPoolGrad,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{dy:a,input:i}=t,o=i;Xu([a,i],"avgPoolGrad");const{filterSize:l,strides:u,pad:c}=s,h=r.backend_util.computePool2DInfo(o.shape,l,u,1,c),p=h.strideHeight,d=h.strideWidth,f=h.filterHeight,m=h.filterWidth,g=h.dilationHeight,y=h.dilationWidth,b=h.effectiveFilterHeight,x=h.effectiveFilterWidth,v=x-1-h.padInfo.left,w=b-1-h.padInfo.top,k=(0,r.buffer)(o.shape,"float32"),I=1/(f*m),S=n.data.get(a.dataId).values,N=(0,r.buffer)(a.shape,"float32",S);for(let e=0;e<h.batchSize;++e)for(let t=0;t<h.inChannels;++t)for(let n=0;n<h.inHeight;++n)for(let s=0;s<h.inWidth;++s){const a=n-w,r=s-v;let i=0;for(let n=0;n<b;n+=g){const s=(a+n)/p;if(!(s<0||s>=h.outHeight||Math.floor(s)!==s))for(let n=0;n<x;n+=y){const a=(r+n)/d;a<0||a>=h.outWidth||Math.floor(a)!==a||(i+=N.get(e,s,a,t))}}k.set(i*I,e,n,s,t)}return n.makeTensorInfo(k.shape,k.dtype,k.values)}},fh={kernelName:r.FusedBatchNorm,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:a,scale:i,offset:o,mean:l,variance:u}=t;r.util.assert(l.shape.length===u.shape.length,(()=>"Batch normalization gradient requires mean and variance to have equal ranks.")),r.util.assert(null==o||l.shape.length===o.shape.length,(()=>"Batch normalization gradient requires mean and offset to have equal ranks.")),r.util.assert(null==i||l.shape.length===i.shape.length,(()=>"Batch normalization gradient requires mean and scale to have equal ranks.")),Xu([a,l,u,i,o],"batchNorm");let{varianceEpsilon:c}=s;null==c&&(c=.001);const h=n.data.get(a.dataId).values,p=n.data.get(l.dataId).values,d=n.data.get(u.dataId).values,f=i?n.data.get(i.dataId).values:new Float32Array([1]),m=o?n.data.get(o.dataId).values:new Float32Array([0]),g=new Float32Array(h.length),y=m.length,b=f.length,x=d.length,v=p.length;let w=0,k=0,I=0,S=0;for(let e=0;e<h.length;++e)g[e]=m[w++]+(h[e]-p[k++])*f[I++]/Math.sqrt(d[S++]+c),w>=y&&(w=0),k>=v&&(k=0),I>=b&&(I=0),S>=x&&(S=0);return n.makeTensorInfo(a.shape,a.dtype,g)}};function mh(e,t,n,s,a){const i=r.slice_util.isSliceContinous(s,t,n),o=r.util.sizeFromShape(n),l=r.util.computeStrides(s);if(i){const n=r.slice_util.computeFlatOffset(t,l);return"string"===a?e.slice(n,n+o):e.subarray(n,n+o)}const u="string"===a?r.backend_util.fromUint8ToStringArray(e):e,c=(0,r.buffer)(s,a,u),h=(0,r.buffer)(n,a);for(let e=0;e<h.size;++e){const n=h.indexToLoc(e),s=n.map(((e,n)=>e+t[n]));h.set(c.get(...s),...n)}return"string"===a?r.backend_util.fromStringArrayToUint8(h.values):h.values}function gh(e){const{inputs:t,backend:n,attrs:s}=e,{x:a}=t,{begin:i,size:o}=s;Xu(a,"slice");const[l,u]=r.slice_util.parseSliceParams(a,i,o);r.slice_util.assertParamsValid(a,l,u);const c=mh(n.data.get(a.dataId).values,l,u,a.shape,a.dtype);return n.makeTensorInfo(u,a.dtype,c)}const yh={kernelName:r.Slice,backendName:"cpu",kernelFunc:gh},bh={kernelName:r.BatchToSpaceND,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:a}=t,{blockShape:i,crops:o}=s;Xu([a],"batchToSpaceND");const l=i.reduce(((e,t)=>e*t)),u=r.backend_util.getReshaped(a.shape,i,l),c=r.backend_util.getPermuted(u.length,i.length),h=r.backend_util.getReshapedPermuted(a.shape,i,l),p=r.backend_util.getSliceBeginCoords(o,i.length),d=r.backend_util.getSliceSize(h,o,i.length),f=Ac({inputs:{x:a},backend:n,attrs:{shape:u}}),m=Gc({inputs:{x:f},backend:n,attrs:{perm:c}}),g=Ac({inputs:{x:m},backend:n,attrs:{shape:h}}),y=gh({inputs:{x:g},backend:n,attrs:{begin:p,size:d}});return n.disposeIntermediateTensorInfo(f),n.disposeIntermediateTensorInfo(m),n.disposeIntermediateTensorInfo(g),y}};function xh(e,t,n,s,a){const i=r.util.sizeFromShape(s),o=r.util.makeZerosTypedArray(a,n);for(let n=0;n<e.length;n++){const s=e[n];if(s<0)throw new Error("Input x must be non-negative!");s>=a||(o[s]+=i>0?t[n]:1)}return o}function vh(e,t,n,s=!1){const a=e.shape[0],i=e.shape[1],o=(0,r.buffer)([a,n],t.dtype);for(let r=0;r<a;r++)for(let a=0;a<i;a++){const i=e.get(r,a);if(i<0)throw new Error("Input x must be non-negative!");i>=n||(s?o.set(1,r,i):t.size>0?o.set(o.get(r,i)+t.get(r,a),r,i):o.set(o.get(r,i)+1,r,i))}return o}const wh={kernelName:r.Bincount,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:a,weights:r}=t,{size:i}=s,o=xh(n.data.get(a.dataId).values,n.data.get(r.dataId).values,r.dtype,r.shape,i);return n.makeTensorInfo([i],r.dtype,o)}},kh={kernelName:r.BroadcastArgs,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n}=e,{s0:s,s1:a}=t,i=n.data.get(s.dataId).values,o=n.data.get(a.dataId).values,l=r.backend_util.assertAndGetBroadcastShape(Array.from(i),Array.from(o));return n.makeTensorInfo([l.length],"int32",Int32Array.from(l))}},Ih=pc((e=>Math.ceil(e))),Sh=Zu(r.Ceil,Ih),Nh={kernelName:r.Ceil,backendName:"cpu",kernelFunc:Sh},Th=Yu(r.ClipByValue,((e,t)=>{const n=t;return e>n.clipValueMax?n.clipValueMax:e<n.clipValueMin?n.clipValueMin:e})),Ch={kernelName:r.ClipByValue,backendName:"cpu",kernelFunc:Th},$h={kernelName:r.ComplexAbs,backendName:"cpu",kernelFunc:e=>{const{x:t}=e.inputs,n=e.backend,s=new Float32Array(r.util.sizeFromShape(t.shape)),a=n.data.get(t.dataId),i=a.complexTensorInfos.real,o=a.complexTensorInfos.imag,l=n.data.get(i.dataId).values,u=n.data.get(o.dataId).values;for(let e=0;e<l.length;e++){const t=l[e],n=u[e];s[e]=Math.hypot(t,n)}return n.makeOutput(s,t.shape,"float32")}};function Eh(e,t,n,s){const a=r.util.getArrayFromDType(n,r.util.sizeFromShape(t));if(s&&"string"!==n){let t=0;e.forEach((e=>{const n=r.util.sizeFromShape(e.shape);a.set(e.vals,t),t+=n}))}else{let s=0;e.forEach((e=>{const i="string"===n?r.backend_util.fromUint8ToStringArray(e.vals):e.vals;let o=0;for(let n=0;n<e.shape[0];++n){const r=n*t[1]+s;for(let t=0;t<e.shape[1];++t)a[r+t]=i[o++]}s+=e.shape[1]}))}return a}function _h(e){const{inputs:t,backend:n}=e,{input:s}=t,a=n.data.get(s.dataId).complexTensorInfos.imag,r=n.data.get(a.dataId).values;return n.makeTensorInfo(a.shape,a.dtype,r)}const Ah={kernelName:r.Imag,backendName:"cpu",kernelFunc:_h};function Rh(e){const{inputs:t,backend:n,attrs:s}=e,{axis:a}=s,i=r.util.parseAxisParam(a,t[0].shape)[0],o=t.map((e=>e.shape));r.backend_util.assertParamsConsistent(o,i);let l=r.backend_util.computeOutShape(t.map((e=>e.shape)),i);if(0===r.util.sizeFromShape(l))return n.makeTensorInfo(l,t[0].dtype,[]);const u=t.filter((e=>r.util.sizeFromShape(e.shape)>0));if(1===u.length)return ec({inputs:{x:u[0]},backend:n});if("complex64"===u[0].dtype){const e=u.map((e=>vc({inputs:{input:e},backend:n}))),t=u.map((e=>_h({inputs:{input:e},backend:n}))),s=Rh({inputs:e,backend:n,attrs:{axis:i}}),a=Rh({inputs:t,backend:n,attrs:{axis:i}}),r=yc({inputs:{real:s,imag:a},backend:n});return e.forEach((e=>n.disposeIntermediateTensorInfo(e))),t.forEach((e=>n.disposeIntermediateTensorInfo(e))),n.disposeIntermediateTensorInfo(s),n.disposeIntermediateTensorInfo(a),r}const c=u.map((e=>{const t=r.util.sizeFromShape(e.shape.slice(i));return Ac({inputs:{x:e},backend:n,attrs:{shape:[-1,t]}})})),h=c.map((e=>({vals:n.data.get(e.dataId).values,shape:e.shape})));l=r.backend_util.computeOutShape(c.map((e=>e.shape)),1);const p=1===c[0].shape[0],d=Eh(h,l,t[0].dtype,p),f=r.backend_util.computeOutShape(u.map((e=>e.shape)),i),m=n.makeTensorInfo(f,t[0].dtype,d);return c.forEach((e=>n.disposeIntermediateTensorInfo(e))),m}const Fh={kernelName:r.Concat,backendName:"cpu",kernelFunc:Rh};function Dh(e){const{inputs:t,backend:n,attrs:s}=e,{x:a,filter:i}=t,{strides:o,pad:l,dataFormat:u,dilations:c,dimRoundingMode:h}=s;Xu([a,i],"conv2d");const p=r.backend_util.convertConv2DDataFormat(u),d=r.backend_util.computeConv2DInfo(a.shape,i.shape,o,c,l,h,!1,p),f=d.filterHeight,m=d.filterWidth,g=d.dilationHeight,y=d.dilationWidth,b=d.padInfo.left,x=d.padInfo.top,v="channelsLast"===d.dataFormat,w=new r.TensorBuffer(d.outShape,a.dtype),k=r.util.computeStrides(a.shape),I=r.util.computeStrides(i.shape),S=k[0],N=v?k[1]:k[2],T=v?k[2]:1,C=v?1:k[1],$=w.strides[0],E=v?w.strides[1]:w.strides[2],_=v?w.strides[2]:1,A=v?1:w.strides[1],R=n.data.get(a.dataId).values,F=n.data.get(i.dataId).values,D=w.values;for(let e=0;e<d.batchSize;++e){const t=e*S,n=e*$;for(let e=0;e<d.outHeight;++e){const s=n+e*E,a=e*d.strideHeight-x;for(let e=0;e<f;++e){const n=a+e*g;if(n<0||n>=d.inHeight)continue;const r=e*I[0],i=t+n*N;for(let e=0;e<d.outWidth;++e){const t=s+e*_,n=e*d.strideWidth-b;for(let e=0;e<m;++e){const s=n+e*y;if(s<0||s>=d.inWidth)continue;const a=i+s*T;let o=r+e*I[1];for(let e=0;e<d.inChannels;++e){const n=R[a+e*C];for(let e=0;e<d.outChannels;++e)D[t+e*A]+=n*F[o+e];o+=d.outChannels}}}}}}return n.makeTensorInfo(w.shape,w.dtype,D)}const Oh={kernelName:r.Conv2D,backendName:"cpu",kernelFunc:Dh},Mh={kernelName:r.Conv2DBackpropFilter,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:a,dy:i}=t,{strides:o,pad:l,dataFormat:u,dimRoundingMode:c,filterShape:h}=s;Xu([a,i],"conv2dBackpropFilter");const p=r.backend_util.convertConv2DDataFormat(u),d=r.backend_util.computeConv2DInfo(a.shape,h,o,1,l,c,!1,p),{strideHeight:f,strideWidth:m,filterHeight:g,filterWidth:y}=d,b="channelsLast"===d.dataFormat,x=new r.TensorBuffer(d.filterShape,"float32"),v=d.padInfo.left,w=d.padInfo.top,k=n.data.get(a.dataId).values,I=n.data.get(i.dataId).values,S=new r.TensorBuffer(a.shape,a.dtype,k),N=new r.TensorBuffer(i.shape,i.dtype,I);for(let e=0;e<g;++e){const t=Math.max(0,Math.ceil((w-e)/f)),n=Math.min(d.outHeight,(d.inHeight+w-e)/f);for(let s=0;s<y;++s){const a=Math.max(0,Math.ceil((v-s)/m)),r=Math.min(d.outWidth,(d.inWidth+v-s)/m);for(let i=0;i<d.inChannels;++i)for(let o=0;o<d.outChannels;++o){let l=0;for(let u=0;u<d.batchSize;++u)for(let c=t;c<n;++c){const t=e+c*f-w;for(let e=a;e<r;++e){const n=s+e*m-v;l+=b?S.get(u,t,n,i)*N.get(u,c,e,o):S.get(u,i,t,n)*N.get(u,o,c,e)}}x.set(l,e,s,i,o)}}}return n.makeTensorInfo(x.shape,x.dtype,x.values)}},zh={kernelName:r.Conv2DBackpropInput,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{dy:a,filter:i}=t,{inputShape:o,strides:l,pad:u,dataFormat:c,dimRoundingMode:h}=s;Xu([a,i],"conv2dBackpropInput");const p=r.util.computeStrides(i.shape),d=r.util.computeStrides(a.shape);let f=r.backend_util.convertConv2DDataFormat(c);const m=r.backend_util.computeConv2DInfo(o,i.shape,l,1,u,h,!1,f),g=new r.TensorBuffer(m.inShape,"float32"),y=g.values,b=n.data.get(a.dataId).values,x=n.data.get(i.dataId).values,[v,w,k]=p,{batchSize:I,filterHeight:S,filterWidth:N,inChannels:T,inHeight:C,inWidth:$,outChannels:E,outHeight:_,outWidth:A,strideHeight:R,strideWidth:F}=m;f=m.dataFormat;const D=S-1-m.padInfo.top,O=N-1-m.padInfo.left,M="channelsLast"===f,z=g.strides[0],L=M?g.strides[1]:g.strides[2],B=M?g.strides[2]:1,P=M?1:g.strides[1],V=d[0],W=M?d[1]:d[2],U=M?d[2]:1,G=M?1:d[1];for(let e=0;e<I;++e)for(let t=0;t<T;++t)for(let n=0;n<C;++n){const s=n-D,a=Math.max(0,Math.ceil(s/R)),r=Math.min(_,(S+s)/R);for(let i=0;i<$;++i){const o=i-O,l=Math.max(0,Math.ceil(o/F)),u=Math.min(A,(N+o)/F);let c=0;for(let n=a;n<r;++n){const a=n*R-s;for(let s=l;s<u;++s){const r=V*e+W*n+U*s,i=v*(S-1-a)+w*(N-1-(s*F-o))+k*t;for(let e=0;e<E;++e)c+=b[r+G*e]*x[i+e]}}y[z*e+L*n+B*i+P*t]=c}}return n.makeTensorInfo(g.shape,g.dtype,g.values)}},Lh={kernelName:r.Conv3D,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:a,filter:i}=t,{strides:o,pad:l,dilations:u}=s;Xu([a,i],"conv3d");const c=r.backend_util.computeConv3DInfo(a.shape,i.shape,o,u,l),{filterDepth:h,filterHeight:p,filterWidth:d,dilationDepth:f,dilationHeight:m,dilationWidth:g,padInfo:y}=c,b=y.front,x=y.left,v=y.top,w=new r.TensorBuffer(c.outShape,a.dtype),k=n.data.get(a.dataId).values,I=n.data.get(i.dataId).values,S=w.values,N=r.util.computeStrides(a.shape),T=r.util.computeStrides(i.shape);for(let e=0;e<c.batchSize;++e){const t=e*N[0],n=e*w.strides[0];for(let e=0;e<c.outDepth;++e){const s=n+e*w.strides[1],a=e*c.strideDepth-b;for(let e=0;e<h;++e){const n=a+e*f;if(n<0||n>=c.inDepth)continue;const r=e*T[0],i=t+n*N[1];for(let e=0;e<c.outHeight;++e){const t=s+e*w.strides[2],n=e*c.strideHeight-v;for(let e=0;e<p;++e){const s=n+e*m;if(s<0||s>=c.inHeight)continue;const a=r+e*T[1],o=i+s*N[2];for(let e=0;e<c.outWidth;++e){const n=t+e*c.outChannels,s=e*c.strideWidth-x;for(let e=0;e<d;++e){const t=s+e*g;if(t<0||t>=c.inWidth)continue;const r=a+e*T[2],i=o+t*c.inChannels;let l=r;for(let e=0;e<c.inChannels;++e){const t=k[i+e];for(let e=0;e<c.outChannels;++e)S[n+e]+=t*I[l+e];l+=c.outChannels}}}}}}}}return n.makeTensorInfo(w.shape,w.dtype,w.values)}},Bh={kernelName:r.Conv3DBackpropFilterV2,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:a,dy:i}=t,{strides:o,pad:l,filterShape:u}=s;Xu([a,i],"conv3dBackpropFilterV2");const c=r.util.computeStrides(a.shape),h=r.util.computeStrides(i.shape),p=r.backend_util.computeConv3DInfo(a.shape,u,o,1,l),d=p.strideDepth,f=p.strideHeight,m=p.strideWidth,g=p.filterDepth,y=p.filterHeight,b=p.filterWidth,x=new r.TensorBuffer(p.filterShape,"float32"),v=x.values,[w,k,I,S]=x.strides,N=n.data.get(i.dataId).values,[T,C,$,E]=h,_=n.data.get(a.dataId).values,[A,R,F,D]=c,O=p.padInfo.front,M=p.padInfo.left,z=p.padInfo.top;for(let e=0;e<g;++e){const t=Math.max(0,Math.ceil((O-e)/d)),n=Math.min(p.outDepth,(p.inDepth+O-e)/d),s=e*w;for(let a=0;a<y;++a){const r=Math.max(0,Math.ceil((z-a)/f)),i=Math.min(p.outHeight,(p.inHeight+z-a)/f),o=a*k+s;for(let s=0;s<b;++s){const l=Math.max(0,Math.ceil((M-s)/m)),u=Math.min(p.outWidth,(p.inWidth+M-s)/m),c=s*I+o;for(let o=0;o<p.inChannels;++o){const h=o*S+c;for(let c=0;c<p.outChannels;++c){let g=0;for(let h=0;h<p.batchSize;++h){const p=h*A,y=h*T;for(let h=t;h<n;++h){const t=(e+h*d-O)*R+p,n=h*C+y;for(let e=r;e<i;++e){const r=(a+e*f-z)*F+t,i=e*$+n;for(let e=l;e<u;++e){const t=e*E+i;g+=_[(s+e*m-M)*D+r+o]*N[t+c]}}}}v[h+c]=g}}}}}return n.makeTensorInfo(x.shape,x.dtype,x.values)}},Ph={kernelName:r.Conv3DBackpropInputV2,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{dy:a,filter:i}=t,{pad:o,strides:l,inputShape:u}=s;Xu([a],"conv3dBackpropInputV2");const c=r.util.computeStrides(a.shape),h=r.util.computeStrides(i.shape),p=r.backend_util.computeConv3DInfo(u,i.shape,l,1,o),d=new r.TensorBuffer(p.inShape,"float32"),f=d.values,[m,g,y,b]=d.strides,x=n.data.get(a.dataId).values,[v,w,k,I]=c,S=n.data.get(i.dataId).values,[N,T,C,$]=h,{batchSize:E,filterDepth:_,filterHeight:A,filterWidth:R,inChannels:F,inDepth:D,inHeight:O,inWidth:M,outChannels:z,outDepth:L,outHeight:B,outWidth:P,strideDepth:V,strideHeight:W,strideWidth:U}=p,G=_-1-p.padInfo.front,H=A-1-p.padInfo.top,q=R-1-p.padInfo.left;for(let e=0;e<E;++e)for(let t=0;t<F;++t)for(let n=0;n<D;++n){const s=n-G,a=Math.max(0,Math.ceil(s/V)),r=Math.min(L,(_+s)/V);for(let i=0;i<O;++i){const o=i-H,l=Math.max(0,Math.ceil(o/W)),u=Math.min(B,(A+o)/W);for(let c=0;c<M;++c){const h=c-q,p=Math.max(0,Math.ceil(h/U)),d=Math.min(P,(R+h)/U);let E=0;for(let n=a;n<r;++n){const a=n*V-s;for(let s=l;s<u;++s){const r=s*W-o;for(let i=p;i<d;++i){const o=v*e+w*n+k*s+I*i,l=N*(_-1-a)+T*(A-1-r)+C*(R-1-(i*U-h))+$*t;for(let e=0;e<z;++e)E+=x[o+e]*S[l+e]}}}f[m*e+g*n+y*i+b*c+t]=E}}}return n.makeTensorInfo(d.shape,d.dtype,d.values)}},Vh=Yu(r.Cos,(e=>Math.cos(e))),Wh={kernelName:r.Cos,backendName:"cpu",kernelFunc:Vh},Uh=Yu(r.Cosh,(e=>Math.cosh(e))),Gh={kernelName:r.Cosh,backendName:"cpu",kernelFunc:Uh},Hh={kernelName:r.CropAndResize,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{image:a,boxes:i,boxInd:o}=t,{cropSize:l,method:u,extrapolationValue:c}=s,[h,p,d,f]=a.shape,m=i.shape[0],[g,y]=l,b=(0,r.buffer)([m,g,y,f],"float32"),x=n.data.get(i.dataId).values,v=n.data.get(o.dataId).values,w=n.data.get(a.dataId).values,k=r.util.computeStrides(a.shape),I=r.util.computeStrides(b.shape);for(let e=0;e<m;e++){const t=4*e,n=x[t],s=x[t+1],a=x[t+2],r=x[t+3],i=v[e];if(i>=h)continue;const o=g>1?(a-n)*(p-1)/(g-1):0,l=y>1?(r-s)*(d-1)/(y-1):0;for(let t=0;t<g;t++){const h=g>1?n*(p-1)+t*o:.5*(n+a)*(p-1);if(h<0||h>p-1)for(let n=0;n<y;n++)for(let s=0;s<f;s++){const a=s+n*I[2]+t*I[1]+e*I[0];b.values[a]=c}else if("bilinear"===u){const n=Math.floor(h),a=Math.ceil(h),o=h-n;for(let u=0;u<y;u++){const h=y>1?s*(d-1)+u*l:.5*(s+r)*(d-1);if(h<0||h>d-1){for(let n=0;n<f;n++){const s=n+u*I[2]+t*I[1]+e*I[0];b.values[s]=c}continue}const p=Math.floor(h),m=Math.ceil(h),g=h-p;for(let s=0;s<f;s++){let r=s+p*k[2]+n*k[1]+i*k[0];const l=w[r];r=s+m*k[2]+n*k[1]+i*k[0];const c=w[r];r=s+p*k[2]+a*k[1]+i*k[0];const h=w[r];r=s+m*k[2]+a*k[1]+i*k[0];const d=l+(c-l)*g,f=h+(w[r]-h)*g;r=s+u*I[2]+t*I[1]+e*I[0],b.values[r]=d+(f-d)*o}}}else for(let n=0;n<y;++n){const a=y>1?s*(d-1)+n*l:.5*(s+r)*(d-1);if(a<0||a>d-1){for(let s=0;s<f;s++){const a=s+n*I[2]+t*I[1]+e*I[0];b.values[a]=c}continue}const o=Math.round(a),u=Math.round(h);for(let s=0;s<f;s++){const a=s+o*k[2]+u*k[1]+i*k[0],r=s+n*I[2]+t*I[1]+e*I[0];b.values[r]=w[a]}}}}return n.makeTensorInfo(b.shape,b.dtype,b.values)}},qh={kernelName:r.Cumprod,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:a}=t,{axis:i,exclusive:o,reverse:l}=s;Xu(a,"cumprod");const u=r.backend_util.getAxesPermutation([i],a.shape.length);let c=a;null!=u&&(c=Gc({inputs:{x:a},backend:n,attrs:{perm:u}}));const h=r.backend_util.getInnerMostAxes(1,a.shape.length)[0];if(h!==c.shape.length-1)throw new Error(`backend.cumprod in CPU expects an inner-most axis=${c.shape.length-1} but got axis=${h}`);const p=(0,r.upcastType)(c.dtype,"int32"),d=r.util.makeOnesTypedArray(r.util.sizeFromShape(c.shape),p),f=n.data.get(c.dataId).values,m=c.shape[c.shape.length-1],g=l?(e,t)=>e+m-t-1:(e,t)=>e+t;for(let e=0;e<f.length;e+=m)for(let t=0;t<m;t++){const n=g(e,t);if(0===t)d[n]=o?1:f[n];else{const s=g(e,t-1);d[n]=o?f[s]*d[s]:f[n]*d[s]}}const y=n.makeTensorInfo(c.shape,p,d);if(null!=u){const e=Gc({inputs:{x:y},backend:n,attrs:{perm:r.backend_util.getUndoAxesPermutation(u)}});return n.disposeIntermediateTensorInfo(y),n.disposeIntermediateTensorInfo(c),e}return y}},Xh={kernelName:r.Cumsum,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:a}=t,{axis:i,exclusive:o,reverse:l}=s;Xu(a,"cumsum");const u=r.backend_util.getAxesPermutation([i],a.shape.length);let c=a;null!=u&&(c=Gc({inputs:{x:a},backend:n,attrs:{perm:u}}));const h=r.backend_util.getInnerMostAxes(1,a.shape.length)[0];if(h!==c.shape.length-1)throw new Error(`backend.cumsum in CPU expects an inner-most axis=${c.shape.length-1} but got axis=${h}`);const p=(0,r.upcastType)(c.dtype,"int32"),d=r.util.makeZerosTypedArray(r.util.sizeFromShape(c.shape),p),f=n.data.get(c.dataId).values,m=c.shape[c.shape.length-1],g=l?(e,t)=>e+m-t-1:(e,t)=>e+t;for(let e=0;e<f.length;e+=m)for(let t=0;t<m;t++){const n=g(e,t);if(0===t)d[n]=o?0:f[n];else{const s=g(e,t-1);d[n]=o?f[s]+d[s]:f[n]+d[s]}}const y=n.makeTensorInfo(c.shape,p,d);if(null!=u){const e=Gc({inputs:{x:y},backend:n,attrs:{perm:r.backend_util.getUndoAxesPermutation(u)}});return n.disposeIntermediateTensorInfo(y),n.disposeIntermediateTensorInfo(c),e}return y}},jh={kernelName:r.DenseBincount,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:a,weights:r}=t,{size:i,binaryOutput:o}=s;if(1===a.shape.length){const e=xh(n.data.get(a.dataId).values,n.data.get(r.dataId).values,r.dtype,r.shape,i);return n.makeTensorInfo([i],r.dtype,e)}if(2===a.shape.length){const e=vh(n.bufferSync(a),n.bufferSync(r),i,o);return n.makeTensorInfo(e.shape,r.dtype,e.values)}throw new Error(`Error in denseBincount: input must be at most rank 2, but got rank${a.shape.length}.`)}},Kh={kernelName:r.DepthToSpace,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:a}=t,{blockSize:i,dataFormat:o}=s;r.util.assert("NHWC"===o,(()=>`Only NHWC dataFormat supported on CPU for depthToSpace. Got ${o}`));const l=a.shape[0],u=a.shape[1],c=a.shape[2],h=a.shape[3],p=u*i,d=c*i,f=h/(i*i),m=n.data.get(a.dataId).values,g=new Float32Array(l*p*d*f);let y=0;for(let e=0;e<l;++e)for(let t=0;t<p;++t){const n=Math.floor(t/i),s=t%i;for(let t=0;t<d;++t){const a=Math.floor(t/i),r=(s*i+t%i)*f;for(let t=0;t<f;++t){const s=t+r+h*(a+c*(n+u*e));g[y++]=m[s]}}}return n.makeTensorInfo([l,p,d,f],a.dtype,g)}};function Yh(e){const{inputs:t,backend:n,attrs:s}=e,{x:a,filter:i}=t,{strides:o,pad:l,dilations:u,dimRoundingMode:c}=s;Xu([a,i],"depthwiseConv2DNative");const h=r.util.computeStrides(a.shape),p=r.util.computeStrides(i.shape);let d=u;null==d&&(d=[1,1]),r.util.assert(r.backend_util.eitherStridesOrDilationsAreOne(o,d),(()=>`Error in depthwiseConv2d: Either strides or dilations must be 1. Got strides ${o} and dilations '${d}'`));const f=r.backend_util.computeConv2DInfo(a.shape,i.shape,o,d,l,c,!0),{filterHeight:m,filterWidth:g,dilationHeight:y,dilationWidth:b,padInfo:x}=f,v=x.left,w=x.top,k=f.outChannels/f.inChannels,I=new r.TensorBuffer(f.outShape,a.dtype),S=n.data.get(a.dataId).values,N=n.data.get(i.dataId).values,T=I.values;for(let e=0;e<f.batchSize;++e){const t=e*h[0],n=e*I.strides[0];for(let e=0;e<f.outHeight;++e){const s=n+e*I.strides[1],a=e*f.strideHeight-w;for(let e=0;e<m;++e){const n=a+e*y;if(n<0||n>=f.inHeight)continue;const r=e*p[0],i=t+n*h[1];for(let e=0;e<f.outWidth;++e){const t=s+e*I.strides[2],n=e*f.strideWidth-v;for(let e=0;e<g;++e){const s=n+e*b;if(s<0||s>=f.inWidth)continue;const a=r+e*p[1],o=i+s*f.inChannels;let l=t,u=a;for(let e=0;e<f.inChannels;++e){const t=S[o+e];for(let e=0;e<k;++e)T[l+e]+=t*N[u+e];l+=k,u+=k}}}}}}return n.makeTensorInfo(I.shape,I.dtype,I.values)}const Zh={kernelName:r.DepthwiseConv2dNative,backendName:"cpu",kernelFunc:Yh},Qh={kernelName:r.DepthwiseConv2dNativeBackpropFilter,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:a,dy:i}=t,{strides:o,dilations:l,pad:u,dimRoundingMode:c,filterShape:h}=s;Xu([a,i],"depthwiseConv2dNativeBackpropFilter");const p=r.backend_util.computeConv2DInfo(a.shape,h,o,l,u,c,!0),{strideHeight:d,strideWidth:f,filterHeight:m,filterWidth:g}=p,y=new r.TensorBuffer(p.filterShape,"float32"),b=p.padInfo.left,x=p.padInfo.top,v=p.outChannels/p.inChannels,w=n.data.get(a.dataId).values,k=new r.TensorBuffer(a.shape,a.dtype,w),I=n.data.get(i.dataId).values,S=new r.TensorBuffer(i.shape,i.dtype,I);for(let e=0;e<m;++e){const t=Math.max(0,Math.ceil((x-e)/d)),n=Math.min(p.outHeight,(p.inHeight+x-e)/d);for(let s=0;s<g;++s){const a=Math.max(0,Math.ceil((b-s)/f)),r=Math.min(p.outWidth,(p.inWidth+b-s)/f);for(let i=0;i<p.outChannels;++i){const o=Math.trunc(i/v),l=i%v;let u=0;for(let l=0;l<p.batchSize;++l)for(let c=t;c<n;++c){const t=e+c*d-x;for(let e=a;e<r;++e){const n=s+e*f-b;u+=k.get(l,t,n,o)*S.get(l,c,e,i)}}y.set(u,e,s,o,l)}}}return n.makeTensorInfo(y.shape,y.dtype,y.values)}},Jh={kernelName:r.DepthwiseConv2dNativeBackpropInput,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{dy:a,filter:i}=t,{strides:o,dilations:l,pad:u,dimRoundingMode:c,inputShape:h}=s;Xu([a,i],"depthwiseConv2DNativeBackpropInput");const p=r.util.computeStrides(a.shape),d=r.util.computeStrides(i.shape),f=r.backend_util.computeConv2DInfo(h,i.shape,o,l,u,c,!0),m=new r.TensorBuffer(f.inShape,"float32"),g=m.values,[y,b,x]=m.strides,v=n.data.get(a.dataId).values,[w,k,I]=p,S=n.data.get(i.dataId).values,[N,T,C]=d,{batchSize:$,filterHeight:E,filterWidth:_,inChannels:A,inHeight:R,inWidth:F,outChannels:D,outHeight:O,outWidth:M,strideHeight:z,strideWidth:L}=f,B=E-1-f.padInfo.top,P=_-1-f.padInfo.left,V=D/A;for(let e=0;e<$;++e)for(let t=0;t<A;++t)for(let n=0;n<R;++n){const s=n-B,a=Math.max(0,Math.ceil(s/z)),r=Math.min(O,(E+s)/z);for(let i=0;i<F;++i){const o=i-P,l=Math.max(0,Math.ceil(o/L)),u=Math.min(M,(_+o)/L);let c=0;for(let n=a;n<r;++n){const a=n*z-s;for(let s=l;s<u;++s){const r=w*e+k*n+I*s,i=N*(E-1-a)+T*(_-1-(s*L-o))+C*t;for(let e=0;e<V;++e)c+=v[r+(t*V+e)]*S[i+e]}}g[y*e+b*n+x*i+t]=c}}return n.makeTensorInfo(m.shape,m.dtype,m.values)}},ep={kernelName:r.Diag,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n}=e,{x:s}=t,a=r.util.sizeFromShape(s.shape),i=n.data.get(s.dataId).values,o=(0,r.buffer)([a,a],s.dtype),l=o.values;for(let e=0;e<i.length;e++)l[e*a+e]=i[e];const u=[...s.shape,...s.shape];return n.makeTensorInfo(u,o.dtype,o.values)}},tp={kernelName:r.Dilation2D,backendName:"cpu",kernelFunc:({inputs:e,backend:t,attrs:n})=>{const{x:s,filter:a}=e,{strides:i,pad:o,dilations:l}=n,u=t,c=u.data.get(s.dataId).values,h=s.shape.length,p=u.data.get(a.dataId).values,d=a.shape.length,{batchSize:f,inHeight:m,inWidth:g,inChannels:y,outHeight:b,outWidth:x,padInfo:v,strideHeight:w,strideWidth:k,filterHeight:I,filterWidth:S,dilationHeight:N,dilationWidth:T,outShape:C}=r.backend_util.computeDilation2DInfo(s.shape,a.shape,i,o,"NHWC",l),$=r.util.sizeFromShape(C),E=C.length,_=r.util.getArrayFromDType(s.dtype,$);for(let e=0;e<f;++e)for(let t=0;t<b;++t){const n=t*w-v.top;for(let i=0;i<x;++i){const o=i*k-v.left;for(let l=0;l<y;++l){let u=Number.MIN_SAFE_INTEGER;for(let t=0;t<I;++t){const i=n+t*N;if(i>=0&&i<m)for(let n=0;n<S;++n){const f=o+n*T;if(f>=0&&f<g){const o=r.util.locToIndex([e,i,f,l],h,r.util.computeStrides(s.shape)),m=r.util.locToIndex([t,n,l],d,r.util.computeStrides(a.shape)),g=c[o]+p[m];g>u&&(u=g)}}}_[r.util.locToIndex([e,t,i,l],E,r.util.computeStrides(C))]=u}}}return{dataId:u.write(r.util.toTypedArray(_,s.dtype),C,s.dtype),shape:C,dtype:s.dtype}}},np={kernelName:r.Dilation2DBackpropFilter,backendName:"cpu",kernelFunc:({inputs:e,backend:t,attrs:n})=>{const{x:s,filter:a,dy:i}=e,{strides:o,pad:l,dilations:u}=n,c=t,h=r.util.toNestedArray(s.shape,c.data.get(s.dataId).values),p=r.util.toNestedArray(a.shape,c.data.get(a.dataId).values),{batchSize:d,inHeight:f,inWidth:m,inChannels:g,outHeight:y,outWidth:b,padInfo:x,strideHeight:v,strideWidth:w,filterHeight:k,filterWidth:I,dilationHeight:S,dilationWidth:N,outShape:T}=r.backend_util.computeDilation2DInfo(s.shape,a.shape,o,l,"NHWC",u);r.util.assert(i.rank===T.length,(()=>`Error in ${r.Dilation2DBackpropFilter}, dy must have the same rank as output ${T.length}, but got ${i.rank}`));const C=r.util.toNestedArray(T,c.data.get(i.dataId).values),$=r.util.makeZerosNestedTypedArray(a.shape,a.dtype);for(let e=0;e<d;++e)for(let t=0;t<y;++t){const n=t*v-x.top;for(let s=0;s<b;++s){const a=s*w-x.left;for(let r=0;r<g;++r){let i=Number.MIN_SAFE_INTEGER,o=0,l=0;for(let t=0;t<k;++t){const s=n+t*S;if(s>=0&&s<f)for(let n=0;n<I;++n){const u=a+n*N;if(u>=0&&u<m){const a=h[e][s][u][r]+p[t][n][r];a>i&&(i=a,o=t,l=n)}}}$[o][l][r]+=C[e][t][s][r]}}}return{dataId:c.write(r.util.toTypedArray($,s.dtype),a.shape,a.dtype),shape:a.shape,dtype:a.dtype}}},sp={kernelName:r.Dilation2DBackpropInput,backendName:"cpu",kernelFunc:({inputs:e,backend:t,attrs:n})=>{const{x:s,filter:a,dy:i}=e,{strides:o,pad:l,dilations:u}=n,c=t,h=r.util.toNestedArray(s.shape,c.data.get(s.dataId).values),p=r.util.toNestedArray(a.shape,c.data.get(a.dataId).values),{batchSize:d,inHeight:f,inWidth:m,inChannels:g,outHeight:y,outWidth:b,padInfo:x,strideHeight:v,strideWidth:w,filterHeight:k,filterWidth:I,dilationHeight:S,dilationWidth:N,outShape:T}=r.backend_util.computeDilation2DInfo(s.shape,a.shape,o,l,"NHWC",u);r.util.assert(i.rank===T.length,(()=>`Error in ${r.Dilation2DBackpropInput}, dy must have the same rank as output ${T.length}, but got ${i.rank}`));const C=r.util.toNestedArray(T,c.data.get(i.dataId).values),$=r.util.makeZerosNestedTypedArray(s.shape,s.dtype);for(let e=0;e<d;++e)for(let t=0;t<y;++t){const n=t*v-x.top;for(let s=0;s<b;++s){const a=s*w-x.left;for(let r=0;r<g;++r){let i=Number.MIN_SAFE_INTEGER,o=n<0?0:n,l=a<0?0:a;for(let t=0;t<k;++t){const s=n+t*S;if(s>=0&&s<f)for(let n=0;n<I;++n){const u=a+n*N;if(u>=0&&u<m){const a=h[e][s][u][r]+p[t][n][r];a>i&&(i=a,o=s,l=u)}}}$[e][o][l][r]+=C[e][t][s][r]}}}return{dataId:c.write(r.util.toTypedArray($,s.dtype),s.shape,s.dtype),shape:s.shape,dtype:s.dtype}}},ap=ac(((e,t)=>e*t)),rp=Tc(((e,t,n,s)=>({real:e*n-t*s,imag:e*s+t*n}))),ip=Nc(r.Multiply,ap,rp),op={kernelName:r.Multiply,backendName:"cpu",kernelFunc:ip};function lp(e){const{inputs:t,backend:n,attrs:s}=e,{x:a}=t,{axis:i,keepDims:o}=s;let l;Xu(a,"sum"),l="bool"===a.dtype?Ic({inputs:{x:a},backend:n,attrs:{dtype:"int32"}}):ec({inputs:{x:a},backend:n});const u=l.shape.length,c=r.util.parseAxisParam(i,l.shape),h=r.backend_util.getAxesPermutation(c,u);let p=c,d=l;null!=h&&(d=Gc({inputs:{x:l},backend:n,attrs:{perm:h}}),p=r.backend_util.getInnerMostAxes(p.length,u)),r.backend_util.assertAxesAreInnerMostDims("sum",p,d.shape.length);const[f,m]=r.backend_util.computeOutAndReduceShapes(d.shape,p);let g=xc(n,f,r.backend_util.upcastType(d.dtype,"int32"));const y=r.util.sizeFromShape(m),b=n.data.get(g.dataId).values,x=n.data.get(d.dataId).values;for(let e=0;e<b.length;++e){const t=e*y;let n=0;for(let e=0;e<y;++e)n+=x[t+e];b[e]=n}if(o){const e=g;g=Ac({inputs:{x:g},backend:n,attrs:{shape:r.backend_util.expandShapeToKeepDim(g.shape,c)}}),n.disposeIntermediateTensorInfo(e)}return n.disposeIntermediateTensorInfo(l),null!=h&&n.disposeIntermediateTensorInfo(d),g}const up={kernelName:r.Sum,backendName:"cpu",kernelFunc:lp},cp={kernelName:r.Einsum,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{equation:a}=s,i=t,{allDims:o,summedDims:l,idDims:u}=r.backend_util.decodeEinsumEquation(a,i.length);r.backend_util.checkEinsumDimSizes(o.length,u,i);const{path:c,steps:h}=r.backend_util.getEinsumComputePath(l,u),p=h.length;let d=null,f=o.length;const m=[];for(let e=0;e<p;++e){for(const t of h[e]){const{permutationIndices:e,expandDims:s}=r.backend_util.getEinsumPermutation(f,u[t]);let a;r.backend_util.isIdentityPermutation(e)?a=i[t]:(a=Gc({inputs:{x:i[t]},backend:n,attrs:{perm:e}}),m.push(a));const o=a.shape.slice();for(let e=0;e<s.length;++e)o.splice(s[e],0,1);r.util.arraysEqual(a.shape,o)||(a=Ac({inputs:{x:a},backend:n,attrs:{shape:o}}),m.push(a)),null===d?d=a:(d=ip({inputs:{a,b:d},backend:n}),m.push(d))}e<p-1&&(c[e]>=0&&(d=lp({inputs:{x:d},backend:n,attrs:{axis:c[e]-(o.length-f),keepDims:!1}}),m.push(d)),f--)}for(const e of m)e!==d&&n.disposeIntermediateTensorInfo(e);return d}},hp={kernelName:r.EluGrad,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n}=e,{dy:s,y:a}=t;Xu([s,a],"eluGrad");const i=new Float32Array(r.util.sizeFromShape(a.shape)),o=n.data.get(a.dataId).values,l=n.data.get(s.dataId).values;for(let e=0;e<o.length;++e){const t=o[e];i[e]=t>=1?l[e]:l[e]*(t+1)}return n.makeTensorInfo(a.shape,"float32",i)}},pp=ac(((e,t)=>e===t?1:0)),dp=Nc(r.Equal,pp,null,"bool"),fp={kernelName:r.Equal,backendName:"cpu",kernelFunc:dp},mp=r.backend_util.ERF_P,gp=r.backend_util.ERF_A1,yp=r.backend_util.ERF_A2,bp=r.backend_util.ERF_A3,xp=r.backend_util.ERF_A4,vp=r.backend_util.ERF_A5,wp=Yu(r.Erf,(e=>{const t=Math.sign(e),n=Math.abs(e),s=1/(1+mp*n);return t*(1-((((vp*s+xp)*s+bp)*s+yp)*s+gp)*s*Math.exp(-n*n))})),kp={kernelName:r.Erf,backendName:"cpu",kernelFunc:wp},Ip=pc((e=>Math.exp(e))),Sp=Zu(r.Exp,Ip,"float32"),Np={kernelName:r.Exp,backendName:"cpu",kernelFunc:Sp};function Tp(e){const{inputs:t,backend:n,attrs:s}=e,{input:a}=t,{dim:i}=s,o=a.shape.length,l=a.shape.slice();let u=i;return i<0&&(r.util.assert(-(o+1)<=i,(()=>`Axis must be in the interval [${-(o+1)}, ${o}]`)),u=o+i+1),l.splice(u,0,1),Ac({inputs:{x:a},backend:n,attrs:{shape:l}})}const Cp={kernelName:r.ExpandDims,backendName:"cpu",kernelFunc:Tp},$p=pc((e=>Math.expm1(e))),Ep=Zu(r.Expm1,$p),_p={kernelName:r.Expm1,backendName:"cpu",kernelFunc:Ep},Ap=ac(((e,t)=>e/t)),Rp=Nc(r.RealDiv,Ap),Fp={kernelName:r.RealDiv,backendName:"cpu",kernelFunc:Rp},Dp=ac(((e,t)=>e-t)),Op=Tc(((e,t,n,s)=>({real:e-n,imag:t-s}))),Mp=Nc(r.Sub,Dp,Op),zp={kernelName:r.Sub,backendName:"cpu",kernelFunc:Mp};function Lp(e,t,n){const s=e.shape,a=s[0],i=s[1],o=n.data.get(e.dataId),l=o.complexTensorInfos.real,u=o.complexTensorInfos.imag,c=[a,i],h=r.util.sizeFromShape(c),p=r.util.getTypedArrayFromDType("float32",h),d=r.util.getTypedArrayFromDType("float32",h);for(let e=0;e<a;e++){const s=gh({inputs:{x:l},backend:n,attrs:{begin:[e,0],size:[1,i]}}),a=gh({inputs:{x:u},backend:n,attrs:{begin:[e,0],size:[1,i]}}),o=yc({inputs:{real:s,imag:a},backend:n}),{real:c,imag:h}=Bp(o,t,n),f=r.backend_util.mergeRealAndImagArrays(c,h);for(let t=0;t<i;t++){const n=r.backend_util.getComplexWithIndex(f,t);p[e*i+t]=n.real,d[e*i+t]=n.imag}n.disposeIntermediateTensorInfo(s),n.disposeIntermediateTensorInfo(a),n.disposeIntermediateTensorInfo(o)}const f=n.makeTensorInfo(c,"float32",p),m=n.makeTensorInfo(c,"float32",d),g=yc({inputs:{real:f,imag:m},backend:n});return n.disposeIntermediateTensorInfo(f),n.disposeIntermediateTensorInfo(m),g}function Bp(e,t,n){const s=r.util.sizeFromShape(e.shape),a=n.data.get(e.dataId),i=n.data.get(a.complexTensorInfos.real.dataId).values,o=n.data.get(a.complexTensorInfos.imag.dataId).values;if(0==((l=s)&l-1)){const a=Pp(i,o,s,t,n),l=[e.shape[0],e.shape[1]];if(t){const e=n.makeTensorInfo(l,"float32",a.real),t=n.makeTensorInfo(l,"float32",a.imag),i=n.makeTensorInfo([],"float32",r.util.createScalarValue(s,"float32")),o=ec({inputs:{x:i},backend:n}),u=Fp.kernelFunc({inputs:{a:e,b:i},backend:n}),c=Fp.kernelFunc({inputs:{a:t,b:o},backend:n}),h=n.data.get(u.dataId).values,p=n.data.get(c.dataId).values;return n.disposeIntermediateTensorInfo(e),n.disposeIntermediateTensorInfo(t),n.disposeIntermediateTensorInfo(i),n.disposeIntermediateTensorInfo(o),n.disposeIntermediateTensorInfo(u),n.disposeIntermediateTensorInfo(c),{real:h,imag:p}}return a}{const e=function(e,t,n){const s=new Float32Array(2*t);for(let a=0;a<t;a++){let i=0,o=0;for(let s=0;s<t;s++){const l=r.backend_util.exponent(a*s,t,n),u=r.backend_util.getComplexWithIndex(e,s);i+=u.real*l.real-u.imag*l.imag,o+=u.real*l.imag+u.imag*l.real}n&&(i/=t,o/=t),r.backend_util.assignToTypedArray(s,i,o,a)}return s}(r.backend_util.mergeRealAndImagArrays(i,o),s,t);return r.backend_util.splitRealAndImagArrays(e)}var l}function Pp(e,t,n,s,a){if(1===n)return{real:e,imag:t};const i=r.backend_util.mergeRealAndImagArrays(e,t),o=n/2,l=r.backend_util.complexWithEvenIndex(i),u=l.real,c=l.imag,h=[u.length],p=a.makeTensorInfo(h,"float32",u),d=a.makeTensorInfo(h,"float32",c),f=yc({inputs:{real:p,imag:d},backend:a}),m=r.backend_util.complexWithOddIndex(i),g=m.real,y=m.imag,b=[g.length],x=a.makeTensorInfo(b,"float32",g),v=a.makeTensorInfo(b,"float32",y),w=yc({inputs:{real:x,imag:v},backend:a}),k=Pp(u,c,o,s,a),I=k.real,S=k.imag,N=[I.length],T=a.makeTensorInfo(N,"float32",I),C=a.makeTensorInfo(N,"float32",S),$=yc({inputs:{real:T,imag:C},backend:a}),E=Pp(g,y,o,s,a),_=E.real,A=E.imag,R=[_.length],F=a.makeTensorInfo(R,"float32",_),D=a.makeTensorInfo(R,"float32",A),O=yc({inputs:{real:F,imag:D},backend:a}),M=r.backend_util.exponents(n,s),z=[M.real.length],L=a.makeTensorInfo(z,"float32",M.real),B=a.makeTensorInfo(z,"float32",M.imag),P=yc({inputs:{real:L,imag:B},backend:a}),V=ip({inputs:{a:P,b:O},backend:a}),W=Ec({inputs:{a:$,b:V},backend:a}),U=Mp({inputs:{a:$,b:V},backend:a}),G=vc({inputs:{input:W},backend:a}),H=vc({inputs:{input:U},backend:a}),q=_h({inputs:{input:W},backend:a}),X=_h({inputs:{input:U},backend:a}),j=Rh({inputs:[G,H],backend:a,attrs:{axis:0}}),K=Rh({inputs:[q,X],backend:a,attrs:{axis:0}}),Y=a.data.get(j.dataId).values,Z=a.data.get(K.dataId).values;return a.disposeIntermediateTensorInfo(p),a.disposeIntermediateTensorInfo(d),a.disposeIntermediateTensorInfo(f),a.disposeIntermediateTensorInfo(x),a.disposeIntermediateTensorInfo(v),a.disposeIntermediateTensorInfo(w),a.disposeIntermediateTensorInfo(T),a.disposeIntermediateTensorInfo(C),a.disposeIntermediateTensorInfo($),a.disposeIntermediateTensorInfo(F),a.disposeIntermediateTensorInfo(D),a.disposeIntermediateTensorInfo(O),a.disposeIntermediateTensorInfo(L),a.disposeIntermediateTensorInfo(B),a.disposeIntermediateTensorInfo(P),a.disposeIntermediateTensorInfo(V),a.disposeIntermediateTensorInfo(W),a.disposeIntermediateTensorInfo(U),a.disposeIntermediateTensorInfo(G),a.disposeIntermediateTensorInfo(q),a.disposeIntermediateTensorInfo(H),a.disposeIntermediateTensorInfo(X),a.disposeIntermediateTensorInfo(j),a.disposeIntermediateTensorInfo(K),{real:Y,imag:Z}}const Vp={kernelName:r.FFT,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n}=e,{input:s}=t,a=r.util.sizeFromShape(s.shape),i=s.shape[s.shape.length-1],o=Ac({inputs:{x:s},backend:n,attrs:{shape:[a/i,i]}}),l=Lp(o,!1,n),u=Ac({inputs:{x:l},backend:n,attrs:{shape:s.shape}});return n.disposeIntermediateTensorInfo(o),n.disposeIntermediateTensorInfo(l),u}};function Wp(e){const{backend:t,attrs:n}=e,{shape:s,value:a,dtype:i}=n,o=i||r.util.inferDtype(a),l=r.util.getArrayFromDType(o,r.util.sizeFromShape(s));return function(e,t,n){e.fill(t)}(l,a),t.makeTensorInfo(s,o,l)}const Up={kernelName:r.Fill,backendName:"cpu",kernelFunc:Wp},Gp={kernelName:r.FlipLeftRight,backendName:"cpu",kernelFunc:({inputs:e,attrs:t,backend:n})=>{const{image:s}=e,a=n,i=r.util.getTypedArrayFromDType(s.dtype,r.util.sizeFromShape(s.shape)),[o,l,u,c]=s.shape,h=a.data.get(s.dataId).values;for(let e=0;e<o;e++){const t=e*u*l*c;for(let e=0;e<l;e++){const n=e*(u*c);for(let e=0;e<u;e++){const s=e*c;for(let a=0;a<c;a++){const r=Math.round(u-e-1),o=t+n+s+a;let l=h[o];r>=0&&r<u&&(l=h[t+n+r*c+a]),i[o]=l}}}}return{dataId:a.write(i,s.shape,s.dtype),shape:s.shape,dtype:s.dtype}}},Hp=pc((e=>Math.floor(e))),qp=Zu(r.Floor,Hp),Xp={kernelName:r.Floor,backendName:"cpu",kernelFunc:qp},jp=ac(((e,t)=>Math.floor(e/t))),Kp=Nc(r.FloorDiv,jp,null,"int32"),Yp={kernelName:r.FloorDiv,backendName:"cpu",kernelFunc:Kp},Zp={kernelName:r.FusedConv2D,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:a,filter:r,bias:i,preluActivationWeights:o}=t,{strides:l,pad:u,dataFormat:c,dilations:h,dimRoundingMode:p,activation:d,leakyreluAlpha:f}=s;let m=Dh({inputs:{x:a,filter:r},backend:n,attrs:{strides:l,pad:u,dataFormat:c,dilations:h,dimRoundingMode:p}});if(i){const e=m;if("NCHW"===c&&1===i.shape.length&&1!==i.shape[0]){const e=Ac({inputs:{x:i},backend:n,attrs:{shape:[i.shape[0],1,1]}});m=Ec({inputs:{a:m,b:e},backend:n}),n.disposeIntermediateTensorInfo(e)}else m=Ec({inputs:{a:m,b:i},backend:n});n.disposeIntermediateTensorInfo(e)}if(d){const e=m;if("NCHW"===c&&"prelu"===d&&1===o.shape.length&&1!==o.shape[0]){const e=Ac({inputs:{x:o},backend:n,attrs:{shape:[o.shape[0],1,1]}});m=gc(n,m,d,e,f),n.disposeIntermediateTensorInfo(e)}else m=gc(n,m,d,o,f);n.disposeIntermediateTensorInfo(e)}return m}},Qp={kernelName:r.FusedDepthwiseConv2D,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:a,filter:r,bias:i,preluActivationWeights:o}=t,{strides:l,pad:u,dataFormat:c,dilations:h,dimRoundingMode:p,activation:d,leakyreluAlpha:f}=s;let m=Yh({inputs:{x:a,filter:r},backend:n,attrs:{strides:l,pad:u,dataFormat:c,dilations:h,dimRoundingMode:p}});if(i){const e=m;m=Ec({inputs:{a:m,b:i},backend:n}),n.disposeIntermediateTensorInfo(e)}if(d){const e=m;m=gc(n,m,d,o,f),n.disposeIntermediateTensorInfo(e)}return m}};function Jp(e,t,n,s,a,i,o,l,u){const c=(0,r.buffer)([s,i],n);for(let n=0;n<s;n++){const s=[];let r=0;for(let t=0;t<a;t++){const i=e[n*a+t];r+=i*o[t],s.push(i)}if(r<0||r>=u/i)throw new Error(`Invalid indices: ${s} does not index into ${l}`);for(let e=0;e<i;e++)c.values[n*i+e]=t.get(...t.indexToLoc(r*i+e))}return c}const ed={kernelName:r.GatherNd,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n}=e,{params:s,indices:a}=t,i=r.util.sizeFromShape(s.shape),o=a.shape,l=o[o.length-1],[u,c,h,p]=r.backend_util.prepareAndValidate(s,a);if(0===c)return n.makeTensorInfo(u,s.dtype,[]);const d=Jp(n.data.get(a.dataId).values,n.bufferSync(s),s.dtype,c,l,h,p,s.shape,i);return n.makeTensorInfo(u,s.dtype,d.values)}};function td(e,t,n){const s=(0,r.buffer)(n,e.dtype);for(let n=0;n<s.size;++n){const a=s.indexToLoc(n).slice(),r=a[0],i=a[2],o=t.locToIndex([r,i]);a[2]=t.values[o];const l=e.locToIndex(a);0<=l&&l<e.values.length&&(s.values[n]=e.values[l])}return s}const nd={kernelName:r.GatherV2,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:a,indices:i}=t,{axis:o,batchDims:l}=s;Xu([a,i],"gatherV2");const u=r.util.parseAxisParam(o,a.shape)[0],c=n.data.get(i.dataId).values,h=a.shape[u];for(let e=0;e<c.length;++e){const t=c[e];r.util.assert(t<=h-1&&t>=0,(()=>`GatherV2: the index value ${t} is not in [0, ${h-1}]`))}let p=l;null==l&&(p=0);const d=r.util.sizeFromShape(i.shape),f=r.backend_util.segment_util.collectGatherOpShapeInfo(a,i,u,p),m=Ac({inputs:{x:a},backend:n,attrs:{shape:[f.batchSize,f.outerSize,f.dimSize,f.sliceSize]}}),g=Ac({inputs:{x:i},backend:n,attrs:{shape:[f.batchSize,d/f.batchSize]}}),y=[f.batchSize,f.outerSize,d/f.batchSize,f.sliceSize],b=n.bufferSync(g),x=td(n.bufferSync(m),b,y);return n.disposeIntermediateTensorInfo(m),n.disposeIntermediateTensorInfo(g),n.makeTensorInfo(f.outputShape,x.dtype,x.values)}},sd=ac(((e,t)=>e>t?1:0)),ad=Nc(r.Greater,sd,null,"bool"),rd={kernelName:r.Greater,backendName:"cpu",kernelFunc:ad},id=ac(((e,t)=>e>=t?1:0)),od=Nc(r.GreaterEqual,id,null,"bool"),ld={kernelName:r.GreaterEqual,backendName:"cpu",kernelFunc:od},ud={kernelName:r.IFFT,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n}=e,{input:s}=t,a=r.util.sizeFromShape(s.shape),i=s.shape[s.shape.length-1],o=Ac({inputs:{x:s},backend:n,attrs:{shape:[a/i,i]}}),l=Lp(o,!0,n),u=Ac({inputs:{x:l},backend:n,attrs:{shape:s.shape}});return n.disposeIntermediateTensorInfo(o),n.disposeIntermediateTensorInfo(l),u}},cd=Yu(r.IsFinite,(e=>Number.isFinite(e)?1:0),"bool"),hd={kernelName:r.IsFinite,backendName:"cpu",kernelFunc:cd},pd=Yu(r.IsInf,(e=>Math.abs(e)===1/0?1:0),"bool"),dd={kernelName:r.IsInf,backendName:"cpu",kernelFunc:pd},fd=Yu(r.IsNan,(e=>Number.isNaN(e)?1:0),"bool"),md={kernelName:r.IsNan,backendName:"cpu",kernelFunc:fd},gd=ac(((e,t)=>e<t?1:0)),yd=Nc(r.Less,gd,null,"bool"),bd={kernelName:r.Less,backendName:"cpu",kernelFunc:yd},xd=ac(((e,t)=>e<=t?1:0)),vd=Nc(r.LessEqual,xd,null,"bool"),wd={kernelName:r.LessEqual,backendName:"cpu",kernelFunc:vd};function kd(e,t,n){const s=(t-e)/(n-1),a=r.util.makeZerosTypedArray(n,"float32");a[0]=e;for(let e=1;e<a.length;e++)a[e]=a[e-1]+s;return a}const Id={kernelName:r.LinSpace,backendName:"cpu",kernelFunc:function(e){const{backend:t,attrs:n}=e,{start:s,stop:a,num:r}=n,i=kd(s,a,r);return t.makeTensorInfo([i.length],"float32",i)}},Sd=pc((e=>Math.log(e))),Nd=Zu(r.Log,Sd),Td={kernelName:r.Log,backendName:"cpu",kernelFunc:Nd},Cd=Yu(r.Log1p,(e=>Math.log1p(e))),$d={kernelName:r.Log1p,backendName:"cpu",kernelFunc:Cd},Ed=ac(((e,t)=>e&&t)),_d=Nc(r.LogicalAnd,Ed,null,"bool"),Ad={kernelName:r.LogicalAnd,backendName:"cpu",kernelFunc:_d},Rd=Yu(r.LogicalNot,(e=>e?0:1),"bool"),Fd={kernelName:r.LogicalNot,backendName:"cpu",kernelFunc:Rd},Dd=ac(((e,t)=>e||t)),Od=Nc(r.LogicalOr,Dd,null,"bool"),Md={kernelName:r.LogicalOr,backendName:"cpu",kernelFunc:Od},zd={kernelName:r.LRN,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:a}=t,{depthRadius:i,bias:o,alpha:l,beta:u}=s;Xu(a,"LRN");const c=a.shape[3],h=c-1,p=n.data.get(a.dataId).values,d=r.util.sizeFromShape(a.shape),f=new Float32Array(d);function m(e){const t=e%c;let n=e-t+Math.max(0,t-i);const s=e-t+Math.min(t+i,h);let a=0;for(;n<=s;n++){const e=p[n];a+=e*e}return a}for(let e=0;e<d;e++){const t=m(e),n=p[e]*Math.pow(o+l*t,-u);f[e]=n}return n.makeTensorInfo(a.shape,a.dtype,f)}},Ld={kernelName:r.LRNGrad,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:a,y:i,dy:o}=t,{depthRadius:l,bias:u,alpha:c,beta:h}=s;Xu(o,"LRNGrad");const p=r.util.sizeFromShape(o.shape),d=o.shape[3],f=n.data.get(o.dataId).values,m=n.data.get(a.dataId).values,g=n.data.get(i.dataId).values,y=new Float32Array(p),b=p;for(let e=0;e<b;e++){const t=e%d,n=e-t+Math.max(0,t-l),s=e-t+Math.min(d,t+l+1);let a=0;for(let e=n;e<s;e++)a+=Math.pow(m[e],2);a=c*a+u;for(let t=n;t<s;t++){let n=-2*c*h*m[t]*g[e]/a;e===t&&(n+=Math.pow(a,-h)),n*=f[e],y[t]+=n}}return n.makeTensorInfo(o.shape,a.dtype,y)}};function Bd(e,t,n,s){const a=r.util.getTypedArrayFromDType(s,r.util.sizeFromShape(n));for(let n=0;n<a.length;++n){const s=n*t;let r=e[s];for(let n=0;n<t;++n){const t=e[s+n];(Number.isNaN(t)||t>r)&&(r=t)}a[n]=r}return a}function Pd(e){const{inputs:t,backend:n,attrs:s}=e,{x:a}=t,{reductionIndices:i,keepDims:o}=s,l=n;let u=a.shape;const c=u.length,h=r.util.parseAxisParam(i,u);let p=h;const d=r.backend_util.getAxesPermutation(p,c);let f=l.data.get(a.dataId).values;if(null!=d){const e=new Array(c);for(let t=0;t<e.length;t++)e[t]=u[d[t]];f=Uc(f,u,a.dtype,d,e),p=r.backend_util.getInnerMostAxes(p.length,c),u=e}Xu(a,"max"),r.backend_util.assertAxesAreInnerMostDims("max",p,c);const[m,g]=r.backend_util.computeOutAndReduceShapes(u,p),y=Bd(f,r.util.sizeFromShape(g),m,a.dtype),b=l.write(y,m,a.dtype);let x=m;return o&&(x=r.backend_util.expandShapeToKeepDim(m,h)),{dataId:b,shape:x,dtype:a.dtype}}const Vd={kernelName:r.Max,backendName:"cpu",kernelFunc:Pd},Wd=ac(((e,t)=>Math.max(e,t))),Ud=Nc(r.Maximum,Wd),Gd={kernelName:r.Maximum,backendName:"cpu",kernelFunc:Ud},Hd={kernelName:r.MaxPool,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:a}=t;Xu(a,"maxPool");const{filterSize:i,strides:o,pad:l,dimRoundingMode:u}=s;r.util.assert(r.backend_util.eitherStridesOrDilationsAreOne(o,1),(()=>`Error in maxPool: Either strides or dilations must be 1. Got strides ${o} and dilations '1'`));const c=r.backend_util.computePool2DInfo(a.shape,i,o,1,l,u);let h;if(1===c.filterWidth&&1===c.filterHeight&&r.util.arraysEqual(c.inShape,c.outShape))h=ec({inputs:{x:a},backend:n});else{const e=n.data.get(a.dataId).values,t=r.util.computeStrides(a.shape),s=oh(e,a.shape,a.dtype,t,c,"max");h=n.makeTensorInfo(c.outShape,a.dtype,s.values)}return h}},qd={kernelName:r.MaxPool3D,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:a}=t,{filterSize:i,strides:o,pad:l,dimRoundingMode:u,dataFormat:c}=s;Xu(a,"maxPool3d");const h=r.backend_util.computePool3DInfo(a.shape,i,o,1,l,u,c),p=uh(n.data.get(a.dataId).values,a.shape,a.dtype,r.util.computeStrides(a.shape),h,"max");return n.makeTensorInfo(p.shape,"float32",p.values)}},Xd={kernelName:r.MaxPool3DGrad,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{dy:a,input:i}=t,{filterSize:o,strides:l,pad:u,dimRoundingMode:c}=s;Xu([a,i],"maxPool3DGrad");const h=r.backend_util.computePool3DInfo(i.shape,o,l,1,u,c),p=function(e,t){const n=(0,r.buffer)(t.outShape,"int32"),s=t.strideDepth,a=t.strideHeight,i=t.strideWidth,o=t.dilationDepth,l=t.dilationHeight,u=t.dilationWidth,c=t.effectiveFilterDepth,h=t.effectiveFilterHeight,p=t.effectiveFilterWidth,d=t.padInfo.front,f=t.padInfo.top,m=t.padInfo.left;for(let r=0;r<t.batchSize;++r)for(let g=0;g<t.inChannels;++g)for(let y=0;y<t.outDepth;++y){const b=y*s-d;let x=b;for(;x<0;)x+=o;const v=Math.min(t.inDepth,c+b);for(let s=0;s<t.outHeight;++s){const c=s*a-f;let d=c;for(;d<0;)d+=l;const w=Math.min(t.inHeight,h+c);for(let a=0;a<t.outWidth;++a){const f=a*i-m;let k=f;for(;k<0;)k+=u;const I=Math.min(t.inWidth,p+f);let S=Number.NEGATIVE_INFINITY,N=-1;for(let t=x;t<v;t+=o){const n=t-b;for(let s=d;s<w;s+=l){const a=s-c;for(let i=k;i<I;i+=u){const o=i-f,l=e.get(r,t,s,i,g);l>=S&&(S=l,N=n*h*p+a*h+o)}}}n.set(N,r,y,s,a,g)}}}return n}(n.bufferSync(i),h),d=h.strideDepth,f=h.strideHeight,m=h.strideWidth,g=h.dilationDepth,y=h.dilationHeight,b=h.dilationWidth,x=h.effectiveFilterDepth,v=h.effectiveFilterHeight,w=h.effectiveFilterWidth,k=x-1-h.padInfo.front,I=w-1-h.padInfo.left,S=v-1-h.padInfo.top,N=(0,r.buffer)(i.shape,"float32"),T=n.bufferSync(a);for(let e=0;e<h.batchSize;++e)for(let t=0;t<h.inChannels;++t)for(let n=0;n<h.inDepth;++n)for(let s=0;s<h.inHeight;++s)for(let a=0;a<h.inWidth;++a){const r=n-k,i=s-S,o=a-I;let l=0;for(let n=0;n<x;n+=g){const s=(r+n)/d;if(!(s<0||s>=h.outDepth||Math.floor(s)!==s))for(let a=0;a<v;a+=y){const r=(i+a)/f;if(!(r<0||r>=h.outHeight||Math.floor(r)!==r))for(let i=0;i<w;i+=b){const u=(o+i)/m;if(u<0||u>=h.outWidth||Math.floor(u)!==u)continue;const c=x*v*w-1-p.get(e,s,r,u,t)===n*v*w+a*w+i?1:0;0!==c&&(l+=T.get(e,s,r,u,t)*c)}}}N.set(l,e,n,s,a,t)}return n.makeTensorInfo(N.shape,N.dtype,N.values)}},jd={kernelName:r.MaxPoolGrad,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{dy:a,input:i,output:o}=t,l=i;Xu([i,o],"maxPoolGrad");const{filterSize:u,strides:c,pad:h,dimRoundingMode:p}=s,d=r.backend_util.computePool2DInfo(l.shape,u,c,1,h,p),f=n.data.get(l.dataId).values,m=(0,r.buffer)(d.outShape,l.dtype,lh(f,l.shape,l.dtype,d).values),g=d.strideHeight,y=d.strideWidth,b=d.dilationHeight,x=d.dilationWidth,v=d.effectiveFilterHeight,w=d.effectiveFilterWidth,k=w-1-d.padInfo.left,I=v-1-d.padInfo.top,S=(0,r.buffer)(l.shape,"float32"),N=n.data.get(a.dataId).values,T=(0,r.buffer)(a.shape,"float32",N);for(let e=0;e<d.batchSize;++e)for(let t=0;t<d.inChannels;++t)for(let n=0;n<d.inHeight;++n)for(let s=0;s<d.inWidth;++s){const a=n-I,r=s-k;let i=0;for(let n=0;n<v;n+=b){const s=(a+n)/g;if(!(s<0||s>=d.outHeight||Math.floor(s)!==s))for(let a=0;a<w;a+=x){const o=(r+a)/y;if(o<0||o>=d.outWidth||Math.floor(o)!==o)continue;const l=v*w-1-m.get(e,s,o,t)===n*w+a?1:0;0!==l&&(i+=T.get(e,s,o,t)*l)}}S.set(i,e,n,s,t)}return n.makeTensorInfo(S.shape,S.dtype,S.values)}},Kd={kernelName:r.MaxPoolWithArgmax,backendName:"cpu",kernelFunc:({inputs:e,attrs:t,backend:n})=>{const{x:s}=e,{filterSize:a,strides:i,pad:o,includeBatchInIndex:l}=t,u=n;Xu(s,"MaxPoolWithArgmax");const c=u.data.get(s.dataId).values,h=r.backend_util.computePool2DInfo(s.shape,a,i,[1,1],o),[p,d]=function(e,t,n,s,a){const i=oh(e,0,n,r.util.computeStrides(t),a,"max"),o=lh(e,t,n,a,!0,s);return[i.values,o.values]}(c,s.shape,s.dtype,l,h),f=u.write(p,h.outShape,s.dtype),m=u.write(d,h.outShape,s.dtype);return[{dataId:f,shape:h.outShape,dtype:s.dtype},{dataId:m,shape:h.outShape,dtype:"int32"}]}},Yd={kernelName:r.Mean,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:a}=t,{axis:i,keepDims:o}=s,l=r.util.parseAxisParam(i,a.shape),u=r.backend_util.computeOutAndReduceShapes(a.shape,l)[1],c=r.util.sizeFromShape(u),h=[],p=n.makeTensorInfo([],"float32",new Float32Array([c]));h.push(p);const d=Ic({inputs:{x:a},backend:n,attrs:{dtype:"float32"}});h.push(d);const f=Rp({inputs:{a:d,b:p},backend:n});h.push(f);const m=lp({inputs:{x:f},backend:n,attrs:{axis:i,keepDims:o}});return h.forEach((e=>n.disposeIntermediateTensorInfo(e))),m}},Zd={kernelName:r.Min,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:a}=t,{axis:i,keepDims:o}=s;Xu(a,"min");const l=r.util.parseAxisParam(i,a.shape);let u=l;const c=r.backend_util.getAxesPermutation(u,a.shape.length);let h=a;null!=c&&(h=Gc({inputs:{x:a},backend:n,attrs:{perm:c}}),u=r.backend_util.getInnerMostAxes(u.length,a.shape.length)),r.backend_util.assertAxesAreInnerMostDims("min",u,h.shape.length);const[p,d]=r.backend_util.computeOutAndReduceShapes(h.shape,u),f=r.util.sizeFromShape(d),m=r.util.makeZerosTypedArray(r.util.sizeFromShape(p),h.dtype),g=n.data.get(h.dataId).values;for(let e=0;e<m.length;++e){const t=e*f;let n=g[t];for(let e=0;e<f;++e){const s=g[t+e];(Number.isNaN(s)||s<n)&&(n=s)}m[e]=n}null!=c&&n.disposeIntermediateTensorInfo(h);const y=n.makeTensorInfo(p,h.dtype,m);if(o){const e=Ac({inputs:{x:y},backend:n,attrs:{shape:r.backend_util.expandShapeToKeepDim(p,l)}});return n.disposeIntermediateTensorInfo(y),e}return y}},Qd=ac(((e,t)=>Math.min(e,t))),Jd=Nc(r.Minimum,Qd),ef={kernelName:r.Minimum,backendName:"cpu",kernelFunc:Jd},tf={kernelName:r.MirrorPad,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:a}=t,{paddings:i,mode:o}=s;Xu(a,"mirrorPad");const l=i.map(((e,t)=>e[0]+a.shape[t]+e[1])),u=i.map((e=>e[0])),c=i.map(((e,t)=>e[0]+a.shape[t])),h="reflect"===o?0:1,p=n.data.get(a.dataId).values,d=a.shape.length,f=r.util.computeStrides(a.shape),m=r.util.sizeFromShape(l),g=l.length,y=r.util.computeStrides(l),b=r.util.getTypedArrayFromDType(a.dtype,m);for(let e=0;e<m;e++){let t=r.util.indexToLoc(e,g,y);for(let e=0;e<g;e++)t[e]<u[e]?t[e]=2*u[e]-t[e]-h:t[e]>=c[e]&&(t[e]=2*(c[e]-1)-t[e]+h);t=t.map(((e,t)=>e-u[t]));const n=r.util.locToIndex(t,d,f);b[e]=p[n]}return{dataId:n.write(b,l,a.dtype),shape:l,dtype:a.dtype}}},nf=ac(((e,t)=>{const n=e%t;return e<0&&t<0||e>=0&&t>=0?n:(n+t)%t})),sf=Nc(r.Mod,nf),af={kernelName:r.Mod,backendName:"cpu",kernelFunc:sf};function rf(e){const{inputs:t,backend:n,attrs:s}=e,{logits:a}=t,{dim:i}=s,o=a.shape.length;let l=i;if(-1===l&&(l=o-1),l!==o-1)throw Error(`Softmax along a non-last dimension is not yet supported. Logits was rank ${o} and dim was ${l}`);const u=r.util.parseAxisParam([l],a.shape),c=Pd({inputs:{x:a},backend:n,attrs:{reductionIndices:u,keepDims:!1}}),h=r.backend_util.expandShapeToKeepDim(c.shape,u),p=Ac({inputs:{x:c},backend:n,attrs:{shape:h}}),d=Mp({inputs:{a,b:p},backend:n}),f=Sp({inputs:{x:d},backend:n}),m=lp({inputs:{x:f},backend:n,attrs:{axis:u,keepDims:!1}}),g=Ac({inputs:{x:m},backend:n,attrs:{shape:h}}),y=Rp({inputs:{a:f,b:g},backend:n});return n.disposeIntermediateTensorInfo(c),n.disposeIntermediateTensorInfo(p),n.disposeIntermediateTensorInfo(d),n.disposeIntermediateTensorInfo(f),n.disposeIntermediateTensorInfo(m),n.disposeIntermediateTensorInfo(g),y}const of={kernelName:r.Softmax,backendName:"cpu",kernelFunc:rf},lf={kernelName:r.Multinomial,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{logits:a}=t,{numSamples:i,seed:o,normalized:l}=s;Xu(a,"multinomial");const u=l?a:rf({inputs:{logits:a},backend:n,attrs:{dim:-1}}),c=u.shape[0],h=u.shape[1],p=n.data.get(u.dataId).values,d=[c,i],f=r.util.makeZerosTypedArray(r.util.sizeFromShape(d),"int32");for(let e=0;e<c;++e){const t=e*h,n=new Float32Array(h-1);n[0]=p[t];for(let e=1;e<n.length;++e)n[e]=n[e-1]+p[t+e];const s=bu.alea(o.toString()),a=e*i;for(let e=0;e<i;++e){const t=s();f[a+e]=n.length;for(let s=0;s<n.length;s++)if(t<n[s]){f[a+e]=s;break}}}return l||n.disposeIntermediateTensorInfo(u),n.makeTensorInfo(d,"int32",f)}};function uf(e,t,n){const s=r.util.createScalarValue(-1,n);return ap([],t,s,e,n)}const cf={kernelName:r.Neg,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n}=e,{x:s}=t;Xu(s,"neg");const a=n.data.get(s.dataId).values,[r,i]=uf(a,s.shape,s.dtype);return n.makeTensorInfo(i,s.dtype,r)}},hf=r.kernel_impls.nonMaxSuppressionV3Impl,pf={kernelName:r.NonMaxSuppressionV3,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{boxes:a,scores:r}=t,{maxOutputSize:i,iouThreshold:o,scoreThreshold:l}=s;Xu(a,"NonMaxSuppression");const u=n.data.get(a.dataId).values,c=n.data.get(r.dataId).values,{selectedIndices:h}=hf(u,c,i,o,l);return n.makeTensorInfo([h.length],"int32",new Int32Array(h))}},df=r.kernel_impls.nonMaxSuppressionV4Impl,ff={kernelName:r.NonMaxSuppressionV4,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{boxes:a,scores:r}=t,{maxOutputSize:i,iouThreshold:o,scoreThreshold:l,padToMaxOutputSize:u}=s;Xu(a,"NonMaxSuppressionPadded");const c=n.data.get(a.dataId).values,h=n.data.get(r.dataId).values,{selectedIndices:p,validOutputs:d}=df(c,h,i,o,l,u);return[n.makeTensorInfo([p.length],"int32",new Int32Array(p)),n.makeTensorInfo([],"int32",new Int32Array([d]))]}},mf=r.kernel_impls.nonMaxSuppressionV5Impl,gf={kernelName:r.NonMaxSuppressionV5,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{boxes:a,scores:r}=t,{maxOutputSize:i,iouThreshold:o,scoreThreshold:l,softNmsSigma:u}=s;Xu(a,"NonMaxSuppressionWithScore");const c=n.data.get(a.dataId).values,h=n.data.get(r.dataId).values,p=i,d=o,f=l,m=u,{selectedIndices:g,selectedScores:y}=mf(c,h,p,d,f,m);return[n.makeTensorInfo([g.length],"int32",new Int32Array(g)),n.makeTensorInfo([y.length],"float32",new Float32Array(y))]}},yf=ac(((e,t)=>e!==t?1:0)),bf=Nc(r.NotEqual,yf,null,"bool"),xf={kernelName:r.NotEqual,backendName:"cpu",kernelFunc:bf},vf={kernelName:r.OneHot,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{indices:a}=t,{dtype:i,depth:o,onValue:l,offValue:u}=s;Xu(a,"oneHot");const c=r.util.sizeFromShape(a.shape),h=new Float32Array(c*o);h.fill(u);const p=n.data.get(a.dataId).values;for(let e=0;e<c;++e)p[e]>=0&&p[e]<o&&(h[e*o+p[e]]=l);return n.makeTensorInfo([...a.shape,o],i,h)}};function wf(e){const{inputs:t,backend:n}=e,{x:s}=t;if("string"===s.dtype)throw new Error("zerosLike is not supported for string tensors");if("complex64"===s.dtype){const e=vc({inputs:{input:s},backend:n}),t=wf({inputs:{x:e},backend:n}),a=_h({inputs:{input:s},backend:n}),r=wf({inputs:{x:a},backend:n}),i=yc({inputs:{real:t,imag:r},backend:n});return n.disposeIntermediateTensorInfo(e),n.disposeIntermediateTensorInfo(t),n.disposeIntermediateTensorInfo(a),n.disposeIntermediateTensorInfo(r),i}return Wp({backend:n,attrs:{shape:s.shape,value:0,dtype:s.dtype}})}const kf={kernelName:r.ZerosLike,backendName:"cpu",kernelFunc:wf},If={kernelName:r.OnesLike,backendName:"cpu",kernelFunc:function e(t){const{inputs:n,backend:s}=t,{x:a}=n;if("string"===a.dtype)throw new Error("onesLike is not supported for string tensors");if("complex64"===a.dtype){const t=vc({inputs:{input:a},backend:s}),n=e({inputs:{x:t},backend:s}),r=_h({inputs:{input:a},backend:s}),i=wf({inputs:{x:r},backend:s}),o=yc({inputs:{real:n,imag:i},backend:s});return s.disposeIntermediateTensorInfo(t),s.disposeIntermediateTensorInfo(n),s.disposeIntermediateTensorInfo(r),s.disposeIntermediateTensorInfo(i),o}return Wp({backend:s,attrs:{shape:a.shape,value:1,dtype:a.dtype}})}};function Sf(e){const{inputs:t,backend:n,attrs:s}=e,{axis:a}=s;if(1===t.length)return Tp({inputs:{input:t[0]},backend:n,attrs:{dim:a}});const i=t[0].shape,o=t[0].dtype;t.forEach((e=>{r.util.assertShapesMatch(i,e.shape,"All tensors passed to stack must have matching shapes"),r.util.assert(o===e.dtype,(()=>"All tensors passed to stack must have matching dtypes"))}));const l=[],u=Rh({inputs:t.map((e=>{const t=Tp({inputs:{input:e},backend:n,attrs:{dim:a}});return l.push(t),t})),backend:n,attrs:{axis:a}});return l.forEach((e=>n.disposeIntermediateTensorInfo(e))),u}const Nf={kernelName:r.Pack,backendName:"cpu",kernelFunc:Sf},Tf={kernelName:r.PadV2,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:a}=t,{paddings:i,constantValue:o}=s;Xu(a,"pad");const l=i.map(((e,t)=>e[0]+a.shape[t]+e[1])),u=i.map((e=>e[0])),c=n.data.get(a.dataId).values,h=r.util.sizeFromShape(a.shape),p=a.shape.length,d=r.util.computeStrides(a.shape),f=r.util.sizeFromShape(l),m=l.length,g=r.util.computeStrides(l),y=r.util.getTypedArrayFromDType(a.dtype,f);0!==o&&y.fill(o);for(let e=0;e<h;e++){const t=r.util.indexToLoc(e,p,d).map(((e,t)=>e+u[t]));y[r.util.locToIndex(t,m,g)]=c[e]}return{dataId:n.write(y,l,a.dtype),shape:l,dtype:a.dtype}}},Cf=ac(((e,t)=>Math.pow(e,t))),$f=Nc(r.Pow,Cf),Ef={kernelName:r.Pow,backendName:"cpu",kernelFunc:$f};function _f(e,t,n,s){const[a,i]=r.backend_util.computeOutAndReduceShapes(e,s),o=(0,r.upcastType)(t,"int32"),l=r.util.makeZerosTypedArray(r.util.sizeFromShape(a),o),u=r.util.sizeFromShape(i);for(let e=0;e<l.length;++e){const t=e*u;let s=1;for(let e=0;e<u;++e)s*=n[t+e];l[e]=s}return{outVals:l,outShape:a,outDtype:o}}const Af={kernelName:r.Prod,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:a}=t,{axis:i,keepDims:o}=s;Xu(a,"prod");const l=a.shape.length,u=r.util.parseAxisParam(i,a.shape),c=r.backend_util.getAxesPermutation(u,l);let h=u,p=a;const d=[];null!=c&&(p=Gc({inputs:{x:a},backend:n,attrs:{perm:c}}),d.push(p),h=r.backend_util.getInnerMostAxes(h.length,l));const f=n.data.get(p.dataId).values,{outVals:m,outShape:g,outDtype:y}=_f(p.shape,p.dtype,f,h);let b=g;return o&&(b=r.backend_util.expandShapeToKeepDim(g,u)),d.forEach((e=>n.disposeIntermediateTensorInfo(e))),n.makeTensorInfo(b,y,m)}};function Rf(e,t){const n=e.slice(0,t);for(;n.length<t;)n.push(1);for(let s=t;s<e.length;s++)n[t-1]*=e[s];return n}function Ff(e,t,n,s,a,i,o,l){if(0===e.length)throw new Error("paramsNestedSplits must be non empty");if(0===t[0].length)throw new Error("Split tensors must not be scalars");if(function(e,t,n){e.forEach(((e,s)=>{if(e<0||e>=n){const a=r.util.indexToLoc(s,t.length,r.util.computeStrides(t)).join(",");throw new Error(`indices[${a}] = ${e} is not in [0, ${n})`)}}))}(i,o,t[0][0]-1),0===s.length)throw new Error("params.rank must be nonzero");const u=s[0],{outSplits:c,valueSlices:h,numValues:p}=function(e,t,n,s){const a=[];let r=0;const i=t.length-1+n.length,o=new Array(i).fill(null).map((()=>[0]));!function(e,t){for(let n=0;n<e.length;++n){const s=e[n],a=n===e.length-1?t:e[n+1].length;if(0===s.length)throw new Error("Ragged splits may not be empty");if(s[0]<0)throw new Error("Ragged splits must be non-negative");if(s[s.length-1]>a)throw new Error("Ragged splits must not point past values");for(let e=1;e<s.length;++e)if(s[e-1]>s[e])throw new Error("Ragged splits must be sorted in ascending order")}}(n,s);let l=1;for(let e=0;e<t.length-1;++e){l*=t[e];const n=t[e+1];for(let t=1;t<l+1;++t)o[e].push(t*n)}for(let s=0;s<e.length;++s){let i=e[s],l=e[s]+1;for(let e=0;e<n.length;++e){const s=n[e],a=e+t.length-1;if(a>=0){const e=o[a],t=e[e.length-1]-s[i];for(let e=i;e<l;++e)o[a].push(s[e+1]+t)}i=s[i],l=s[l]}l!==i&&(a.push([i,l]),r+=l-i)}return{outSplits:o,valueSlices:a,numValues:r}}(i,o,e,u),d=function(e){const t=[];for(let n=0;n<e.length;++n){const s=e[n].length,a=r.util.getArrayFromDType("int32",s);t.push(a),e[n].forEach(((e,t)=>a[t]=e))}return t}(c),f=function(e,t,n,s,a){const i=t.slice();i[0]=a;const o=r.util.getArrayFromDType(n,r.util.sizeFromShape(i)),l=e.length;return function(e,t,n,s,a,r){const i=Rf(t,2)[1],o=Rf(r,2)[1];let l=0;for(const t of n)for(let n=t[0];n<t[1];++n){for(let t=0;t<s;++t)a[l*o+t]=e[n*i+t];++l}}(e,t,s,0===l?0:l/t[0],o,i),[o,i]}(n,s,a,h,p);return[d,f[0],f[1]]}const Df={kernelName:r.RaggedGather,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{paramsNestedSplits:a,paramsDenseValues:r,indices:i}=t,{outputRaggedRank:o}=s,l=a.map((e=>n.data.get(e.dataId).values)),u=a.map((e=>e.shape)),c=n.data.get(r.dataId).values,h=n.data.get(i.dataId).values,[p,d,f]=Ff(l,u,c,r.shape,r.dtype,h,i.shape),m=p.map((e=>n.makeTensorInfo([e.length],"int32",e))),g=n.makeTensorInfo(f,r.dtype,d);return m.concat([g])}};var Of=r.backend_util.RowPartitionType;class Mf{constructor(e,t,n,s,a,i,o,l,u,c){this.shape=e,this.shapeShape=t,this.values=n,this.valuesShape=s,this.valuesDType=a,this.defaultValue=i,this.defaultValueShape=o,this.rowPartitionValues=l,this.rowPartitionValuesShapes=u,this.rowPartitionTypes=r.backend_util.getRowPartitionTypesHelper(c),this.raggedRank=r.backend_util.getRaggedRank(this.rowPartitionTypes)}getRowPartitionTypeByDimension(e){return this.rowPartitionTypes[0]===Of.FIRST_DIM_SIZE?this.rowPartitionTypes[e+1]:this.rowPartitionTypes[e]}getRowPartitionTensor(e){return this.rowPartitionTypes[0]===Of.FIRST_DIM_SIZE?this.rowPartitionValues[e+1]:this.rowPartitionValues[e]}getMaxWidth(e){const t=this.getRowPartitionTensor(e-1);switch(this.getRowPartitionTypeByDimension(e-1)){case Of.VALUE_ROWIDS:return Mf.getMaxWidthValueRowID(t);case Of.ROW_SPLITS:return Mf.getMaxWidthRowSplit(t);default:throw new Error(`Cannot handle partition type ${Of[this.getRowPartitionTypeByDimension(e-1)]}`)}}static getMaxWidthRowSplit(e){const t=e.length;if(0===t||1===t)return 0;let n=0;for(let s=0;s<t-1;++s){const t=e[s+1]-e[s];t>n&&(n=t)}return n}static getMaxWidthValueRowID(e){const t=e.length;if(0===t)return 0;let n=0,s=e[0],a=0;for(let r=1;r<t;++r){const t=e[r];t!==s&&(s=t,a=Math.max(r-n,a),n=r)}return Math.max(t-n,a)}tensorShapeFromTensor(e,t,n=!0){if(0===t.length){if(-1===e[0])return[];throw new Error("The only valid scalar shape tensor is the fully unknown shape specified as -1.")}return Lf(e,n)}calculateOutputSize(e){const t=this.valuesShape,n=this.defaultValueShape;r.backend_util.validateDefaultValueShape(n,t);const s=this.tensorShapeFromTensor(this.shape,this.shapeShape),a=r.backend_util.combineRaggedTensorToTensorShapes(this.raggedRank,s,t);a[0]<0&&(a[0]=e);for(let e=1;e<=this.raggedRank;++e)a[e]<0&&(a[e]=this.getMaxWidth(e));return a}calculateFirstParentOutputIndex(e,t,n){const s=Math.min(e,n),a=[];let i=0;for(let e=0;e<s;++e,i+=t)a.push(i);for(let t=s;t<e;++t)a.push(-1);return r.util.assert(a.length===e,(()=>"Final length of result must be equal to firstDimension.")),a}calculateOutputIndexRowSplit(e,t,n,s){const a=e.length,r=[];for(let i=0;i<a-1;++i){const a=e[i+1]-e[i];let o=Math.min(s,a),l=t[i];-1===l&&(o=0);for(let e=0;e<o;++e)r.push(l),l+=n;for(let e=0;e<a-o;++e)r.push(-1)}if(a>0&&r.length!==e[a-1])throw new Error("Invalid row split size.");return r}calculateOutputIndexValueRowID(e,t,n,s){const a=e.length,r=[];if(0===a)return[];let i=0,o=e[0];if(o>=t.length)throw new Error(`Got currentValueRowId=${o}, which is not less than ${t.length}`);let l=t[o];r.push(l);for(let u=1;u<a;++u){const a=e[u];if(a===o)l>=0&&(++i,i<s?l+=n:l=-1);else{if(i=0,o=a,a>=t.length)throw new Error(`Got nextValueRowId=${a} which is not less than ${t.length}`);l=t[a]}r.push(l)}if(r.length!==e.length)throw new Error("Invalid row ids.");return r}calculateOutputIndex(e,t,n,s){const a=this.getRowPartitionTensor(e),r=this.getRowPartitionTypeByDimension(e);switch(r){case Of.VALUE_ROWIDS:return this.calculateOutputIndexValueRowID(a,t,n,s);case Of.ROW_SPLITS:if(a.length-1>t.length)throw new Error(`Row partition size is greater than output size: ${a.length-1} > ${t.length}`);return this.calculateOutputIndexRowSplit(a,t,n,s);default:throw new Error(`Unsupported partition type: ${Of[r]}`)}}getFirstDimensionSize(){const e=this.rowPartitionValues[0];if(0===this.rowPartitionTypes.length)throw new Error("No row_partition_types given.");const t=this.rowPartitionTypes[0];switch(t){case Of.FIRST_DIM_SIZE:return e[0];case Of.VALUE_ROWIDS:throw new Error("Cannot handle VALUE_ROWIDS in first dimension.");case Of.ROW_SPLITS:return this.rowPartitionValuesShapes[0][0]-1;default:throw new Error(`Cannot handle type ${Of[t]}`)}}compute(){if(this.rowPartitionValues[0].length<=0)throw new Error("Invalid first partition input. Tensor requires at least one element.");const e=this.getFirstDimensionSize(),t=this.calculateOutputSize(e),n=new Array(this.raggedRank+1);n[n.length-1]=1;for(let e=n.length-2;e>=0;--e)n[e]=n[e+1]*t[e+1];const s=Lf(t,!1),a=r.util.getArrayFromDType(this.valuesDType,r.util.sizeFromShape(s));if(n[0]*t[0]>0){let r=this.calculateFirstParentOutputIndex(e,n[0],t[0]);for(let e=1;e<=this.raggedRank;++e)r=this.calculateOutputIndex(e-1,r,n[e],t[e]);this.setOutput(this.raggedRank,r,a,s)}return[s,a]}setOutput(e,t,n,s){if(0===n.length)return;const a=this.values,i=n;let o=s.slice();o=o.slice(e+1);const l=r.util.sizeFromShape(o),u=t.length;let c=this.defaultValue;if(c.length!==l&&1!==c.length){const e=this.defaultValueShape;(0,r.tidy)((()=>{const t=(0,r.reshape)(c,e),n=(0,r.broadcastTo)(t,o);c=n.dataSync()}))}let h=0,p=0,d=0;for(let e=0;e<=u;++e){let s=e<u?t[e]:-1;if(s!==d){if(p<d){const e=a.subarray(h*l);zf(i.subarray(p*l),e,(d-p)*l)}if(e>=u){const e=n.length;s=Math.floor(e/l)}if(s>d)if(1===this.defaultValue.length)i.subarray(d*l,s*l).fill(this.defaultValue[0]),d=s;else for(;s>d;)zf(i.slice(d*l),c,l),++d;s<0?(h=e+1,p=d):(h=e,p=d,d=p+1)}else++d}}}function zf(e,t,n){for(let s=0;s<n;s++)e[s]=t[s]}function Lf(e,t){const n=[];for(let s of e){if(s<0){if(!t)throw new Error(`Dimension ${s} must be >= 0`);if(s<-1)throw new Error(`Dimension ${s} must be >= -1`);s=-1}n.push(s)}return n}function Bf(e,t,n,s,a,r,i,o,l,u){return new Mf(e,t,n,s,a,r,i,o,l,u).compute()}const Pf={kernelName:r.RaggedTensorToTensor,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{shape:a,values:r,defaultValue:i,rowPartitionTensors:o}=t,{rowPartitionTypes:l}=s,u=n.data.get(a.dataId).values,c=n.data.get(r.dataId).values,h=n.data.get(i.dataId).values,p=o.map((e=>n.data.get(e.dataId).values)),d=o.map((e=>e.shape)),[f,m]=Bf(u,a.shape,c,r.shape,r.dtype,h,i.shape,p,d,l);return n.makeTensorInfo(f,r.dtype,m)}};function Vf(e,t,n,s){if(e===t||e<t&&n<0||t<e&&n>1)return r.util.makeZerosTypedArray(0,s);const a=Math.abs(Math.ceil((t-e)/n)),i=r.util.makeZerosTypedArray(a,s);t<e&&1===n&&(n=-1),i[0]=e;for(let e=1;e<i.length;e++)i[e]=i[e-1]+n;return i}const Wf={kernelName:r.Range,backendName:"cpu",kernelFunc:function(e){const{backend:t,attrs:n}=e,{start:s,stop:a,dtype:r,step:i}=n,o=Vf(s,a,i,r);return t.makeTensorInfo([o.length],r,o)}},Uf=Yu(r.Reciprocal,(e=>1/e)),Gf={kernelName:r.Reciprocal,backendName:"cpu",kernelFunc:Uf},Hf={kernelName:r.ResizeBilinear,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{images:a}=t,{alignCorners:i,halfPixelCenters:o,size:l}=s;Xu(a,"resizeBilinear");const u=r.util.computeStrides(a.shape),[c,h]=l,[p,d,f,m]=a.shape,g=n.data.get(a.dataId).values,y=new Float32Array(r.util.sizeFromShape([p,c,h,m])),b=[i&&c>1?d-1:d,i&&h>1?f-1:f],x=[i&&c>1?c-1:c,i&&h>1?h-1:h];let v=0;const w=b[0]/x[0],k=b[1]/x[1];for(let e=0;e<p;e++)for(let t=0;t<c;t++){let n;n=o?w*(t+.5)-.5:w*t;const s=Math.max(0,Math.floor(n)),a=n-s,r=Math.min(d-1,Math.ceil(n)),i=e*u[0]+s*u[1],l=e*u[0]+r*u[1];for(let e=0;e<h;e++){let t;t=o?k*(e+.5)-.5:k*e;const n=Math.max(0,Math.floor(t)),s=t-n,r=Math.min(f-1,Math.ceil(t)),c=i+n*u[2],h=l+n*u[2],p=i+r*u[2],d=l+r*u[2];for(let e=0;e<m;e++){const t=g[c+e],n=g[h+e],r=t+(g[p+e]-t)*s,i=r+(n+(g[d+e]-n)*s-r)*a;y[v++]=i}}}return n.makeTensorInfo([p,c,h,m],"float32",y)}},qf={kernelName:r.ResizeBilinearGrad,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{images:a,dy:i}=t,{alignCorners:o}=s;Xu([i,a],"resizeBilinearGrad");const l=r.util.computeStrides(a.shape),[u,c,h,p]=a.shape,[,d,f]=i.shape,m=new Float32Array(u*c*h*p),g=[o&&d>1?c-1:c,o&&f>1?h-1:h],y=[o&&d>1?d-1:d,o&&f>1?f-1:f],b=g[0]/y[0],x=g[1]/y[1],v=n.data.get(i.dataId).values;let w=0;for(let e=0;e<u;e++){const t=e*l[0];for(let e=0;e<d;e++){const n=e*b,s=Math.floor(n),a=Math.min(Math.ceil(n),c-1),r=t+s*l[1],i=t+a*l[1],o=n-s,u=1-o;for(let e=0;e<f;e++){const t=e*x,n=Math.floor(t),s=Math.min(Math.ceil(t),h-1),a=t-n,c=1-a,d=r+n*l[2],f=r+s*l[2],g=i+n*l[2],y=i+s*l[2],b=u*c,k=u*a,I=o*c,S=o*a;for(let e=0;e<p;e++){const t=v[w++];m[d+e]+=t*b,m[f+e]+=t*k,m[g+e]+=t*I,m[y+e]+=t*S}}}}return n.makeTensorInfo([u,h,c,p],"float32",m)}},Xf={kernelName:r.ResizeNearestNeighbor,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{images:a}=t,{alignCorners:i,halfPixelCenters:o,size:l}=s;Xu(a,"resizeNearestNeighbor");const u=r.util.computeStrides(a.shape),[c,h]=l,[p,d,f,m]=a.shape,g=n.data.get(a.dataId).values,y=new Float32Array(p*c*h*m),b=[i&&c>1?d-1:d,i&&h>1?f-1:f],x=[i&&c>1?c-1:c,i&&h>1?h-1:h],v=b[0]/x[0],w=b[1]/x[1];let k=0;for(let e=0;e<p;e++){const t=e*u[0];for(let e=0;e<c;e++){const n=o?v*(e+.5):v*e;let s=Math.min(d-1,i?Math.round(n):Math.floor(n));o&&(s=Math.max(0,s));const a=t+s*u[1];for(let e=0;e<h;e++){const t=o?w*(e+.5):w*e;let n=Math.min(f-1,i?Math.round(t):Math.floor(t));o&&(n=Math.max(0,n));const s=a+n*u[2];for(let e=0;e<m;e++){const t=g[s+e];y[k++]=t}}}}return n.makeTensorInfo([p,c,h,m],a.dtype,y)}},jf={kernelName:r.ResizeNearestNeighborGrad,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{images:a,dy:i}=t,{alignCorners:o}=s;Xu([i,a],"resizeNearestNeighborGrad");const l=r.util.computeStrides(a.shape),u=r.util.computeStrides(i.shape),[c,h,p,d]=a.shape,[,f,m]=i.shape,g=new Float32Array(c*h*p*d),y=n.data.get(i.dataId).values,b=[o&&f>1?h-1:h,o&&m>1?p-1:p],x=[o&&f>1?f-1:f,o&&m>1?m-1:m],v=b[0]/x[0],w=b[1]/x[1],k=1/v,I=1/w,S=2*Math.ceil(k)+2,N=2*Math.ceil(I)+2;for(let e=0;e<c;e++){const t=e*l[0];for(let e=0;e<h;e++){const n=t+e*l[1],s=Math.floor(e*k),a=Math.floor(s-S/2);for(let s=0;s<p;s++){const r=n+s*l[2],i=Math.floor(s*I),c=Math.floor(i-N/2);for(let n=0;n<d;n++){let i=0;for(let r=0;r<S;r++){const l=r+a;if(l<0||l>=f)continue;const d=t+l*u[1],g=l*v;if(e===Math.min(h-1,o?Math.round(g):Math.floor(g)))for(let e=0;e<N;e++){const t=e+c;if(t<0||t>=m)continue;const a=d+t*u[2],r=t*w;s===Math.min(p-1,o?Math.round(r):Math.floor(r))&&(i+=y[a+n])}}g[r+n]=i}}}}return n.makeTensorInfo(a.shape,a.dtype,g)}},Kf={kernelName:r.Reverse,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:a}=t,{dims:i}=s;Xu(a,"reverse");const o=a.shape.length,l=r.util.parseAxisParam(i,a.shape);if(0===o)return ec({inputs:{x:a},backend:n});const u=new r.TensorBuffer(a.shape,a.dtype),c=n.bufferSync(a);for(let e=0;e<u.size;e++){const t=u.indexToLoc(e),n=t.slice();l.forEach((e=>n[e]=a.shape[e]-1-n[e])),u.set(c.get(...n),...t)}return n.makeTensorInfo(u.shape,u.dtype,u.values)}},Yf={kernelName:r.RotateWithOffset,backendName:"cpu",kernelFunc:({inputs:e,attrs:t,backend:n})=>{const{image:s}=e,{radians:a,fillValue:i,center:o}=t,l=n,u=r.util.getTypedArrayFromDType(s.dtype,r.util.sizeFromShape(s.shape)),[c,h,p,d]=s.shape,[f,m]=r.backend_util.getImageCenter(o,h,p),g=Math.sin(a),y=Math.cos(a),b=l.data.get(s.dataId).values;for(let e=0;e<c;e++){const t=e*p*h*d;for(let e=0;e<h;e++){const n=e*(p*d);for(let s=0;s<p;s++){const a=s*d;for(let r=0;r<d;r++){const o=[c,e,s,r],l=o[2],x=o[1];let v=(l-f)*y-(x-m)*g,w=(l-f)*g+(x-m)*y;v=Math.round(v+f),w=Math.round(w+m);let k=i;"number"!=typeof i&&(k=3===r?255:i[r]),v>=0&&v<p&&w>=0&&w<h&&(k=b[t+w*(p*d)+v*d+r]),u[t+n+a+r]=k}}}}return{dataId:l.write(u,s.shape,s.dtype),shape:s.shape,dtype:s.dtype}}},Zf=Yu(r.Round,(e=>{const t=Math.floor(e);return e-t<.5?Math.floor(e):e-t>.5?Math.ceil(e):t%2==0?t:t+1})),Qf={kernelName:r.Round,backendName:"cpu",kernelFunc:Zf},Jf=pc((e=>1/Math.sqrt(e))),em=Zu(r.Rsqrt,Jf),tm={kernelName:r.Rsqrt,backendName:"cpu",kernelFunc:em};function nm(e,t,n,s,a,i,o,l,u,c){const h=[s/a,a],p=e.values,d=t.values;if(0===s)return(0,r.buffer)(n,t.dtype);const f=(0,r.buffer)(h,t.dtype);"string"==typeof u||"number"==typeof u?f.values.fill(u):"boolean"==typeof u&&f.values.fill(+u);for(let e=0;e<i;e++){const r=[];let i=0;for(let t=0;t<o;t++){const n=p[e*o+t];r.push(n),i+=n*l[t]}if(i<0||i>=s/a)throw new Error(`Invalid indices: ${r} does not index into ${n}`);for(let n=0;n<a;n++)c?f.values[i*a+n]+=d[e*a+n]:f.values[i*a+n]=0===t.rank?d[0]:d[e*a+n]}return f}const sm={kernelName:r.ScatterNd,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{indices:a,updates:i}=t,{shape:o}=s,{sliceRank:l,numUpdates:u,sliceSize:c,strides:h,outputSize:p}=r.backend_util.calculateShapes(i,a,o),d=nm(n.bufferSync(a),n.bufferSync(i),o,p,c,u,l,h,0,!0);return n.makeTensorInfo(o,d.dtype,d.values)}};function am(e,t){let n=0,s=e.length,a=0;for(;n<s;)a=Math.floor((n+s)/2),e[a]<t?n=a+1:s=a;return s}function rm(e,t){let n=0,s=e.length,a=0;for(;n<s;)a=Math.floor((n+s)/2),e[a]<=t?n=a+1:s=a;return s}const im={kernelName:r.SearchSorted,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{sortedSequence:a,values:i}=t,{side:o}=s,l=function(e,t,n,s,a,i){const o=r.util.getArrayFromDType("int32",n*a);for(let r=0;r<n;++r){const n=e.slice(r*s,(r+1)*s),l=r*a;for(let e=0;e<a;++e)o[l+e]="left"===i?am(n,t[e+l]):rm(n,t[e+l])}return o}(n.data.get(a.dataId).values,n.data.get(i.dataId).values,a.shape[0],a.shape[1],i.shape[1],o);return n.makeTensorInfo(i.shape,"int32",l)}},om={kernelName:r.Select,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n}=e,{condition:s,t:a,e:i}=t;Xu([s,a,i],"select");const o=s.shape.length,l=n.data.get(s.dataId).values,u=n.data.get(a.dataId).values,c=n.data.get(i.dataId).values,h=(0,r.upcastType)(a.dtype,i.dtype),p=r.util.makeZerosTypedArray(r.util.sizeFromShape(a.shape),h);let d=0;const f=0===o||o>1||1===a.shape.length?1:r.util.sizeFromShape(a.shape.slice(1));for(let e=0;e<l.length;e++)for(let t=0;t<f;t++)1===l[e]?p[d++]=u[e]:p[d++]=c[e];return n.makeTensorInfo(a.shape,h,p)}},lm=r.backend_util.SELU_SCALEALPHA,um=r.backend_util.SELU_SCALE,cm=Yu(r.Selu,(e=>e>=0?um*e:lm*(Math.exp(e)-1))),hm={kernelName:r.Selu,backendName:"cpu",kernelFunc:cm},pm=Yu(r.Sign,(e=>e<0?-1:e>0?1:0)),dm={kernelName:r.Sign,backendName:"cpu",kernelFunc:pm},fm=Yu(r.Sin,(e=>Math.sin(e))),mm={kernelName:r.Sin,backendName:"cpu",kernelFunc:fm},gm=Yu(r.Sinh,(e=>Math.sinh(e))),ym={kernelName:r.Sinh,backendName:"cpu",kernelFunc:gm},bm=Math.log(1.1920928955078125e-7)+2,xm=Yu(r.Softplus,(e=>{const t=e>-bm,n=e<bm,s=Math.exp(e);let a;return a=n?s:t?e:Math.log(1+s),a})),vm={kernelName:r.Softplus,backendName:"cpu",kernelFunc:xm},wm={kernelName:r.SpaceToBatchND,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:a}=t,{blockShape:i,paddings:o}=s;Xu([a],"spaceToBatchND");const l=r.util.sizeFromShape(i),u=[[0,0]];u.push(...o);for(let e=1+i.length;e<a.shape.length;++e)u.push([0,0]);const c=Tf.kernelFunc({inputs:{x:a},backend:n,attrs:{paddings:u,constantValue:0}}),h=r.backend_util.getReshaped(c.shape,i,l,!1),p=r.backend_util.getPermuted(h.length,i.length,!1),d=r.backend_util.getReshapedPermuted(c.shape,i,l,!1),f=Ac({inputs:{x:c},backend:n,attrs:{shape:h}}),m=Gc({inputs:{x:f},backend:n,attrs:{perm:p}}),g=Ac({inputs:{x:m},backend:n,attrs:{shape:d}});return n.disposeIntermediateTensorInfo(c),n.disposeIntermediateTensorInfo(f),n.disposeIntermediateTensorInfo(m),g}};function km(e,t,n,s,a,i,o){const l=t[0],u=i[0],c=new Array(u),h=new Array(l),p=t[1];if(0===u){if(0!==l)throw new Error(r.backend_util.getSparseFillEmptyRowsIndicesDenseShapeMismatch(l));return[r.util.getArrayFromDType(n,0),[0,p],r.util.getArrayFromDType(a,0),c,h]}let d=!0,f=0;const m=new Array(u).fill(0);for(let t=0;t<l;++t){const n=e[t*p];if(n<0)throw new Error(r.backend_util.getSparseFillEmptyRowsNegativeIndexErrorMessage(t,n));if(n>=u)throw new Error(r.backend_util.getSparseFillEmptyRowsOutOfRangeIndexErrorMessage(t,n,u));++m[n],d=d&&n>=f,f=n}let g=!0;for(let e=0;e<u;++e){const t=0===m[e];c[e]=t,g=g&&!t,m[e]=Math.max(m[e],1),e>0&&(m[e]+=m[e-1])}if(g&&d){const t=e,n=s;for(let e=0;e<l;++e)h[e]=e;return[t,[l,p],n,c,h]}{const t=m[u-1],i=r.util.getArrayFromDType(n,t*p),d=r.util.getArrayFromDType(a,t),f=new Array(u).fill(0);for(let t=0;t<l;++t){const n=e[t*p],a=f[n],r=(0===n?0:m[n-1])+a;f[n]++;for(let n=0;n<p;++n)i[r*p+n]=e[t*p+n];d[r]=s[t],h[t]=r}for(let e=0;e<u;++e)if(0===f[e]){const t=0===e?0:m[e-1];i[t*p+0]=e;for(let e=1;e<p;++e)i[t*p+e]=0;d[t]=o}return[i,[t,p],d,c,h]}}const Im={kernelName:r.SparseFillEmptyRows,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n}=e,{indices:s,values:a,denseShape:r,defaultValue:i}=t;if(1!==r.shape.length)throw new Error(`Dense shape must be a vector, saw:\n        ${r.shape}`);if(2!==s.shape.length)throw new Error(`Indices must be a matrix, saw:\n        ${s.shape}`);if(1!==a.shape.length)throw new Error(`Values must be a vector, saw:\n        ${a.shape}`);if(0!==i.shape.length)throw new Error(`Default value must be a scalar, saw:\n        ${i.shape}`);const o=n.data.get(s.dataId).values,l=n.data.get(a.dataId).values,u=n.data.get(r.dataId).values,c=n.data.get(i.dataId).values[0],[h,p,d,f,m]=km(o,s.shape,s.dtype,l,a.dtype,u,c);return[n.makeTensorInfo(p,s.dtype,h),n.makeTensorInfo([p[0]],a.dtype,d),n.makeTensorInfo([f.length],"bool",new Uint8Array(f.map((e=>Number(e))))),n.makeTensorInfo([m.length],s.dtype,new Int32Array(m))]}};function Sm(e,t,n,s,a){const i=r.util.sizeFromShape(s),o=t[0],l=a.length,u=[];let c=1,h=-1;for(let e=0;e<l;++e){const t=a[e];if(-1===t){if(-1!==h)throw new Error(r.backend_util.getSparseReshapeMultipleNegativeOneOutputDimErrorMessage(h,e));h=e,u.push(1)}else{if(t<0)throw new Error(r.backend_util.getSparseReshapeNegativeOutputDimErrorMessage(e,t));c*=t,u.push(t)}}if(-1!==h){if(c<=0)throw new Error(r.backend_util.getSparseReshapeEmptyTensorZeroOutputDimErrorMessage());const e=Math.trunc(i/c);if(c*e!==i)throw new Error(r.backend_util.getSparseReshapeInputOutputMultipleErrorMessage(s,u));u[h]=e}if(r.util.sizeFromShape(u)!==i)throw new Error(r.backend_util.getSparseReshapeInputOutputMismatchErrorMessage(s,u));const p=s.length,d=[];if(p>0){d[p-1]=1;for(let e=p-2;e>=0;--e)d[e]=d[e+1]*s[e+1]}const f=[];if(l>0){f[l-1]=1;for(let e=l-2;e>=0;--e)f[e]=f[e+1]*u[e+1]}const m=r.util.getArrayFromDType(n,o*l);for(let t=0;t<o;++t){let n=0;for(let s=0;s<p;++s)n+=e[t*p+s]*d[s];for(let e=0;e<l;++e)m[t*l+e]=Math.trunc(n/f[e]),n%=f[e]}return[m,[o,l],u]}const Nm={kernelName:r.SparseReshape,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n}=e,{inputIndices:s,inputShape:a,newShape:r}=t;if(2!==s.shape.length)throw new Error(`Input indices should be a matrix but received shape\n        ${s.shape}`);if(1!==a.shape.length)throw new Error(`Input shape should be a vector but received shape\n        ${a.shape}`);if(1!==r.shape.length)throw new Error(`Target shape should be a vector but received shape ${r.shape}`);const i=Array.from(n.data.get(a.dataId).values),o=n.data.get(s.dataId).values,l=Array.from(n.data.get(r.dataId).values),[u,c,h]=Sm(o,s.shape,s.dtype,i,l);return[n.makeTensorInfo(c,s.dtype,u),n.makeTensorInfo([h.length],r.dtype,new Int32Array(h))]}};function Tm(e,t,n,s,a,i=!1,o=0){const l=s.length,u=[t[0],e.length/t[0]],c=u[1],h=l>0?a[l-1]+1:0;if(h<0)throw new Error(r.backend_util.getSparseSegmentReductionNegativeSegmentIdsErrorMessage());const p=t.slice();p[0]=h;const d=p.reduce(((e,t)=>e*t),1),f=r.util.getArrayFromDType(n,d);if(0===l)return h>0&&f.fill(o),[f,p];if(h<=0)throw new Error(r.backend_util.getSparseSegmentReductionNegativeSegmentIdsErrorMessage());let m=0,g=1,y=0,b=a[m];for(;;){let t=0;if(g<l){if(t=a[g],b===t){++g;continue}if(b>=t)throw new Error(r.backend_util.getSparseSegmentReductionNonIncreasingSegmentIdsErrorMessage())}if(b<0||b>=h)throw new Error(r.backend_util.getSparseSegmentReductionSegmentIdOutOfRangeErrorMessage(b,h));b>y&&f.fill(o,y*c,b*c);for(let t=m;t<g;++t){const n=s[t];if(n<0||n>=u[0])throw new Error(r.backend_util.getSparseSegmentReductionIndicesOutOfRangeErrorMessage(t,s[t],u[0]));for(let t=0;t<c;t++)f[b*c+t]+=e[n*c+t]}if(i)for(let e=0;e<c;e++)f[b*c+e]/=g-m;if(m=g,++g,y=b+1,b=t,g>l)break}return y<h&&f.fill(o,y*c,h*c),[f,p]}const Cm={kernelName:r.SparseSegmentMean,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n}=e,{data:s,indices:a,segmentIds:r}=t;if(s.shape.length<1)throw new Error("Data should be at least 1 dimensional but received scalar");if(1!==a.shape.length)throw new Error(`Indices should be a vector but received shape\n          ${a.shape}`);if(1!==r.shape.length)throw new Error(`Segment ids should be a vector but received shape\n          ${r.shape}`);if(a.shape[0]!==r.shape[0])throw new Error("segmentIds and indices should have same size.");const i=n.data.get(s.dataId).values,o=n.data.get(a.dataId).values,l=n.data.get(r.dataId).values,[u,c]=Tm(i,s.shape,s.dtype,o,l,!0);return n.makeTensorInfo(c,s.dtype,u)}},$m={kernelName:r.SparseSegmentSum,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n}=e,{data:s,indices:a,segmentIds:r}=t;if(s.shape.length<1)throw new Error("Data should be at least 1 dimensional but received scalar");if(1!==a.shape.length)throw new Error(`Indices should be a vector but received shape\n         ${a.shape}`);if(1!==r.shape.length)throw new Error(`Segment ids should be a vector but received shape\n         ${r.shape}`);if(a.shape[0]!==r.shape[0])throw new Error("segmentIds and indices should have same size.");const i=n.data.get(s.dataId).values,o=n.data.get(a.dataId).values,l=n.data.get(r.dataId).values,[u,c]=Tm(i,s.shape,s.dtype,o,l);return n.makeTensorInfo(c,s.dtype,u)}},Em={kernelName:r.SparseToDense,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{sparseIndices:a,sparseValues:i,defaultValue:o}=t,{outputShape:l}=s,{sliceRank:u,numUpdates:c,sliceSize:h,strides:p,outputSize:d}=r.backend_util.calculateShapes(i,a,l),f=!1,m=n.bufferSync(a);let g;switch(i.dtype){case"bool":g=nm(m,n.bufferSync(i),l,d,h,c,u,p,Boolean(n.data.get(o.dataId).values[0]),f);break;case"float32":case"int32":g=nm(m,n.bufferSync(i),l,d,h,c,u,p,n.data.get(o.dataId).values[0],f);break;case"string":g=nm(m,n.bufferSync(i),l,d,h,c,u,p,r.util.decodeString(n.data.get(o.dataId).values[0]),f);break;default:throw new Error(`Unsupported type ${i.dtype}`)}return n.makeTensorInfo(l,g.dtype,g.values)}},_m={kernelName:r.SplitV,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:a}=t,{numOrSizeSplits:i,axis:o}=s,l=r.util.parseAxisParam(o,a.shape)[0],u=r.backend_util.prepareSplitSize(a,i,l),c=new Array(a.shape.length).fill(0),h=a.shape.slice();return u.map((e=>{const t=[...h];t[l]=e;const s=gh({inputs:{x:a},backend:n,attrs:{begin:c,size:t}});return c[l]+=e,s}))}},Am=pc((e=>Math.sqrt(e))),Rm=Yu(r.Sqrt,(e=>Math.sqrt(e))),Fm={kernelName:r.Sqrt,backendName:"cpu",kernelFunc:Rm},Dm={kernelName:r.Square,backendName:"cpu",kernelFunc:({inputs:e,backend:t})=>{const{x:n}=e,s=t;Xu(n,"square");const a=s.data.get(n.dataId).values,r=new Float32Array(a.length);for(let e=0;e<a.length;++e){const t=a[e];r[e]=t*t}return{dataId:s.write(r,n.shape,n.dtype),shape:n.shape,dtype:n.dtype}}},Om=ac(((e,t)=>{const n=e-t;return n*n})),Mm=Nc(r.SquaredDifference,Om),zm={kernelName:r.SquaredDifference,backendName:"cpu",kernelFunc:Mm},Lm=Yu(r.Step,((e,t)=>{const n=t;return isNaN(e)?NaN:e>0?1:n.alpha})),Bm={kernelName:r.Step,backendName:"cpu",kernelFunc:Lm};function Pm(e,t,n,s){const a=(0,r.buffer)(e,t.dtype);for(let e=0;e<a.size;e++){const r=a.indexToLoc(e),i=new Array(r.length);for(let e=0;e<i.length;e++)i[e]=r[e]*n[e]+s[e];a.set(t.get(...i),...r)}return a}const Vm={kernelName:r.StridedSlice,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:a}=t,{begin:i,end:o,strides:l,beginMask:u,endMask:c,ellipsisMask:h,newAxisMask:p,shrinkAxisMask:d}=s;Xu(a,"stridedSlice");const{finalShapeSparse:f,finalShape:m,isIdentity:g,sliceDim0:y,isSimpleSlice:b,begin:x,end:v,strides:w}=r.slice_util.sliceInfo(a.shape,i,o,l,u,c,h,p,d);let k;if(g)k=Ac({inputs:{x:a},backend:n,attrs:{shape:m}});else if(y||b){r.util.assert(a.shape.length>=1,(()=>`Input must have rank at least 1, got: ${a.shape.length}`));const e=r.slice_util.computeOutShape(x,v,w),t=gh({inputs:{x:a},backend:n,attrs:{begin:x,size:e}});k=Ac({inputs:{x:t},backend:n,attrs:{shape:m}}),n.disposeIntermediateTensorInfo(t)}else{const e=Pm(f,n.bufferSync(a),w,x);k=n.makeTensorInfo(m,e.dtype,e.values)}return k}};class Wm{constructor(e,t,n,s,a,i){this.separator=r.util.encodeString(e),this.nGramWidths=t,this.leftPad=r.util.encodeString(n),this.rightPad=r.util.encodeString(s),this.padWidth=a,this.preserveShort=i}getPadWidth(e){return Math.min(this.padWidth<0?e-1:this.padWidth,e-1)}getNumNGrams(e,t){const n=this.getPadWidth(t);return Math.max(0,e+2*n-t+1)}createNGrams(e,t,n,s,a,r){for(let i=0;i<a;++i){const o=this.getPadWidth(r),l=Math.max(0,o-i),u=Math.max(0,o-(a-(i+1))),c=r-(l+u),h=t+(l>0?0:i-o);let p=0;p+=l*this.leftPad.length;for(let t=0;t<c;++t)p+=e[h+t].length;p+=u*this.rightPad.length,p+=(l+u+c-1)*this.separator.length,n[s+i]=new Uint8Array(p);const d=n[s+i];let f=0;const m=e=>e.forEach((e=>d[f++]=e));for(let e=0;e<l;++e)m(this.leftPad),m(this.separator);for(let t=0;t<c-1;++t)m(e[h+t]),m(this.separator);if(c>0){m(e[h+c-1]);for(let e=0;e<u;++e)m(this.separator),m(this.rightPad)}else{for(let e=0;e<u-1;++e)m(this.rightPad),m(this.separator);m(this.rightPad)}}}compute(e,t){const n=e.length,s=t.length;if(s>0){let e=t[0];if(0!==e)throw new Error(`First split value must be 0, got ${e}`);for(let a=1;a<s;++a){let s=t[a]>=e;if(s=s&&t[a]<=n,!s)throw new Error(`Invalid split value ${t[a]}, must be in [${e}, ${n}]`);e=t[a]}if(e!==n)throw new Error(`Last split value must be data size. Expected ${n}, got ${e}`)}const a=s-1,i=r.util.getArrayFromDType("int32",s);if(0===n||0===s){const e=new Array(n);for(let e=0;e<=a;++e)i[e]=0;return[e,i]}i[0]=0;for(let e=1;e<=a;++e){const n=t[e]-t[e-1];let s=0;this.nGramWidths.forEach((e=>{s+=this.getNumNGrams(n,e)})),this.preserveShort&&n>0&&0===s&&(s=1),i[e]=i[e-1]+s}const o=new Array(i[a]);for(let n=0;n<a;++n){const s=t[n];let a=i[n];if(this.nGramWidths.forEach((r=>{const i=t[n+1]-t[n],l=this.getNumNGrams(i,r);this.createNGrams(e,s,o,a,l,r),a+=l})),this.preserveShort&&a===i[n]){const r=t[n+1]-t[n];if(0===r)continue;const i=r+2*this.padWidth,l=1;this.createNGrams(e,s,o,a,l,i)}}return[o,i]}}function Um(e,t,n,s,a,r,i,o){return new Wm(n,s,a,r,i,o).compute(e,t)}const Gm={kernelName:r.StringNGrams,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{separator:a,nGramWidths:r,leftPad:i,rightPad:o,padWidth:l,preserveShortSequences:u}=s,{data:c,dataSplits:h}=t,p=n.data.get(c.dataId).values,d=n.data.get(h.dataId).values,[f,m]=Um(p,d,a,r,i,o,l,u);return[n.makeTensorInfo([f.length],"string",f),n.makeTensorInfo(h.shape,"int32",m)]}};function Hm(e,t,n,s){if(!e.length)return;if(0===t.length){for(let t=0;t<e.length;++t)s.push(e.subarray(t,t+1));return}if(1===t.length){const a=t[0];let r=e.indexOf(a);for(;-1!==r;){const t=e.subarray(0,r);n&&0===t.length||s.push(t),r=(e=e.subarray(r+1)).indexOf(a)}return void(n&&0===e.length||s.push(e))}let a=0;for(let r=0;r<e.length+1;r++)if(r===e.length||-1!==t.indexOf(e[r])){const t=e.subarray(a,r);n&&0===t.length||s.push(t),a=r+1}}function qm(e,t,n){const s=e.length,a=[];let i=0,o=0;const l=new Array(s);for(let r=0;r<s;++r){const s=a.length;Hm(e[r],t,n,a);const u=a.length-s;l[r]=u,i+=u,o=Math.max(o,u)}const u=r.util.getArrayFromDType("int32",2*i),c=new Array(i),h=[s,o];let p=0;for(let e=0;e<s;++e)for(let t=0;t<l[e];++t)u[2*p]=e,u[2*p+1]=t,c[p]=a[p],++p;return[u,c,h]}const Xm={kernelName:r.StringSplit,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{skipEmpty:a}=s,{input:r,delimiter:i}=t;if("string"!==r.dtype)throw new Error("Input must be of datatype string");if(1!==r.shape.length)throw new Error(`Input must be a vector, got shape: ${r.shape}`);if(0!==i.shape.length)throw new Error(`Delimiter must be a scalar, got shape: ${i.shape}`);const o=n.data.get(r.dataId).values,l=n.data.get(i.dataId).values[0],[u,c,h]=qm(o,l,a),p=c.length;return[n.makeTensorInfo([p,2],"int32",u),n.makeTensorInfo([p],"string",c),n.makeTensorInfo([2],"int32",new Int32Array(h))]}};function jm(e,t){const n=r.util.getArrayFromDType("int32",e.length);for(let s=0;s<e.length;++s)n[s]=r.util.fingerPrint64(e[s]).modulo(t).getLowBitsUnsigned();return n}const Km={kernelName:r.StringToHashBucketFast,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{numBuckets:a}=s,{input:r}=t;if("string"!==r.dtype)throw new Error("Input must be of datatype string");if(a<=0)throw new Error("Number of buckets must be at least 1");const i=jm(n.data.get(r.dataId).values,a);return n.makeTensorInfo(r.shape,"int32",i)}},Ym=Yu(r.Tan,(e=>Math.tan(e))),Zm={kernelName:r.Tan,backendName:"cpu",kernelFunc:Ym},Qm=Yu(r.Tanh,(e=>Math.tanh(e))),Jm={kernelName:r.Tanh,backendName:"cpu",kernelFunc:Qm};function eg(e,t){const n=new Array(e.rank);for(let s=0;s<n.length;s++)n[s]=e.shape[s]*t[s];const s=(0,r.buffer)(n,e.dtype);for(let t=0;t<s.values.length;++t){const n=s.indexToLoc(t),a=new Array(e.rank);for(let t=0;t<a.length;t++)a[t]=n[t]%e.shape[t];const r=e.locToIndex(a);s.values[t]=e.values[r]}return s}const tg={kernelName:r.Tile,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:a}=t,{reps:r}=s;Xu(a,"tile");const i=eg(n.bufferSync(a),r);return n.makeTensorInfo(i.shape,i.dtype,i.values)}},ng=(e,t)=>{const n=t.value-e.value;return 0===n?e.index-t.index:n};function sg(e,t,n=0,s=e.length-1){for(;s>n;){if(s-n>600){const a=s-n+1,r=t-n+1,i=Math.log(a),o=.5*Math.exp(2*i/3),l=.5*Math.sqrt(i*o*(a-o)/a)*Math.sign(r-a/2);sg(e,t,Math.max(n,Math.floor(t-r*o/a+l)),Math.min(s,Math.floor(t+(a-r)*o/a+l)))}const a=e[t];let i=n,o=s;for(r.util.swap(e,n,t),ng(e[s],a)>0&&r.util.swap(e,n,s);i<o;){for(r.util.swap(e,i,o),i++,o--;ng(e[i],a)<0;)i+=1;for(;ng(e[o],a)>0;)o-=1}0===ng(e[n],a)?r.util.swap(e,n,o):(o+=1,r.util.swap(e,o,s)),o<=t&&(n=o+1),t<=o&&(s=o-1)}}function ag(e,t,n,s,a){const i=t[t.length-1],[o,l]=[e.length/i,i],u=r.util.getTypedArrayFromDType(n,o*s),c=r.util.getTypedArrayFromDType("int32",o*s);for(let t=0;t<o;t++){const n=t*l,r=e.subarray(n,n+l);let i=new Array(r.length);r.forEach(((e,t)=>i[t]={value:e,index:t})),s<i.length&&(sg(i,s),i=i.slice(0,s)),a&&i.sort(ng);const o=t*s,h=u.subarray(o,o+s),p=c.subarray(o,o+s);for(let e=0;e<s;e++)h[e]=i[e].value,p[e]=i[e].index}const h=t.slice();return h[h.length-1]=s,[(0,r.buffer)(h,n,u),(0,r.buffer)(h,"int32",c)]}const rg={kernelName:r.TopK,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:a}=t,{k:r,sorted:i}=s;Xu(a,"topk");const o=n.data.get(a.dataId).values,[l,u]=ag(o,a.shape,a.dtype,r,i);return[n.makeTensorInfo(l.shape,l.dtype,l.values),n.makeTensorInfo(u.shape,u.dtype,u.values)]}},ig={kernelName:r.Transform,backendName:"cpu",kernelFunc:function(e){const{inputs:t,attrs:n,backend:s}=e,{image:a,transforms:i}=t,{interpolation:o,fillMode:l,fillValue:u,outputShape:c}=n,[h,p,d,f]=a.shape,[m,g]=null!=c?c:[p,d],y=[h,m,g,f],b=r.util.computeStrides(a.shape),x=b[0],v=b[1],w=b[2],k=r.util.computeStrides(y),I=k[0],S=k[1],N=k[2],T=r.util.getTypedArrayFromDType(a.dtype,r.util.sizeFromShape(y));T.fill(u);const C=s.data.get(a.dataId).values,$=s.data.get(i.dataId).values;for(let e=0;e<h;++e){const t=1===i.shape[0]?$:$.subarray(8*e,8*e+8);for(let n=0;n<m;++n)for(let s=0;s<g;++s)for(let a=0;a<f;++a){let r;const i=t[6]*s+t[7]*n+1;if(0===i)continue;const c=(t[0]*s+t[1]*n+t[2])/i,h=(t[3]*s+t[4]*n+t[5])/i,f=og(c,d,l),m=og(h,p,l);switch(o){case"nearest":r=ug(C,p,d,x,v,w,e,m,f,a,u);break;case"bilinear":r=cg(C,p,d,x,v,w,e,m,f,a,u);break;default:throw new Error(`Error in Transform: Expect 'nearest' or 'bilinear', but got ${o}`)}T[e*I+n*S+s*N+a]=r}return s.makeTensorInfo(y,a.dtype,T)}return{dataId:s.write(T,y,a.dtype),shape:a.shape,dtype:a.dtype}}};function og(e,t,n){switch(n){case"reflect":return function(e,t){let n=e;if(n<0)if(t<=1)n=0;else{const e=2*t;n<e&&(n=e*Math.trunc(-n/e)+n),n=n<-t?n+e:-n-1}else if(n>t-1)if(t<=1)n=0;else{const e=2*t;n-=e*Math.trunc(n/e),n>=t&&(n=e-n-1)}return r.util.clamp(0,n,t-1)}(e,t);case"wrap":return function(e,t){let n=e;if(n<0)if(t<=1)n=0;else{const e=t-1;n+=t*(Math.trunc(-n/e)+1)}else if(n>t-1)if(t<=1)n=0;else{const e=t-1;n-=t*Math.trunc(n/e)}return r.util.clamp(0,n,t-1)}(e,t);case"nearest":return function(e,t){return r.util.clamp(0,e,t-1)}(e,t);default:return function(e,t){return e}(e)}}function lg(e,t,n,s,a,r,i,o,l,u,c){return 0<=o&&o<t&&0<=l&&l<n?e[i*s+o*a+l*r+u]:c}function ug(e,t,n,s,a,r,i,o,l,u,c){return lg(e,t,n,s,a,r,i,Math.round(o),Math.round(l),u,c)}function cg(e,t,n,s,a,r,i,o,l,u,c){const h=Math.floor(o),p=Math.floor(l),d=h+1,f=p+1;return(d-o)*((f-l)*lg(e,t,n,s,a,r,i,h,p,u,c)+(l-p)*lg(e,t,n,s,a,r,i,h,f,u,c))+(o-h)*((f-l)*lg(e,t,n,s,a,r,i,d,p,u,c)+(l-p)*lg(e,t,n,s,a,r,i,d,f,u,c))}function hg(e,t,n,s){const a=r.util.parseAxisParam(t,n)[0],i=[1,n[0],1];for(let e=0;e<a;e++)i[0]*=n[e];i[1]=n[a];for(let e=a+1;e<n.length;e++)i[2]*=n[e];const o={},l=new Int32Array(n[a]),u=new r.TensorBuffer(i,s,e),c=[],h=1===i[0]&&1===i[2];for(let t=0;t<n[a];t++){let n;if(h)n=e[t].toString();else{const e=[];for(let n=0;n<i[0];n++)for(let s=0;s<i[2];s++)e.push(u.get(n,t,s));n=e.join(",")}if(void 0!==o[n])l[t]=o[n];else{const e=Object.keys(o).length;o[n]=e,l[t]=e,c.push(t)}}const p=i.slice();p[1]=Object.keys(o).length;const d=new r.TensorBuffer(p,s);c.forEach(((e,t)=>{for(let n=0;n<i[0];n++)for(let s=0;s<i[2];s++)d.set(u.get(n,e,s),n,t,s)}));const f=n.slice();return f[a]=p[1],{outputValues:d.values,outputShape:f,indices:l}}const pg={kernelName:r.Unique,backendName:"cpu",kernelFunc:function(e){const{inputs:t,attrs:n,backend:s}=e,{axis:a}=n,{x:r}=t;Xu(r,"unique");const i=s.data.get(r.dataId).values,{outputValues:o,outputShape:l,indices:u}=hg(i,a,r.shape,r.dtype);return[s.makeTensorInfo(l,r.dtype,o),s.makeTensorInfo([u.length],"int32",u)]}},dg={kernelName:r.Unpack,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{value:a}=t;let{axis:r}=s;r<0&&(r+=a.shape.length);const i=a.shape.length,o=a.shape[r],l=new Array(i-1);let u=0;for(let e=0;e<i;e++)e!==r&&(l[u++]=a.shape[e]);const c=new Array(i).fill(0),h=a.shape.slice();h[r]=1;const p=new Array(o);for(let e=0;e<p.length;e++){c[r]=e;const t=gh({inputs:{x:a},backend:n,attrs:{begin:c,size:h}});p[e]=Ac({inputs:{x:t},backend:n,attrs:{shape:l}}),n.disposeIntermediateTensorInfo(t)}return p}},fg={kernelName:r.UnsortedSegmentSum,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:a,segmentIds:i}=t,{numSegments:o}=s;Xu(a,"unsortedSegmentSum");const l=[],u=[],c=a.shape.length-i.shape.length;let h=i;for(let e=0;e<c;++e){const t=Tp({inputs:{input:h},backend:n,attrs:{dim:e+1}});h=t,u.push(t)}for(let e=0;e<o;++e){const t=r.util.createScalarValue(e,"int32"),s=n.makeTensorInfo([],"int32",t),i=dp({inputs:{a:s,b:h},backend:n}),o=Ic({inputs:{x:i},backend:n,attrs:{dtype:"float32"}}),c=ip({inputs:{a:o,b:a},backend:n}),p=lp({inputs:{x:c},backend:n,attrs:{axis:0,keepDims:!1}});l.push(p),u.push(s),u.push(i),u.push(o),u.push(c),u.push(p)}const p=Sf({inputs:l,backend:n,attrs:{axis:0}});return u.forEach((e=>n.disposeIntermediateTensorInfo(e))),p}},mg=[Oc,zc,Bc,Vc,_c,Wc,qc,Xc,jc,Kc,Zc,Jc,th,ah,ih,ch,hh,ph,dh,Dc,fh,bh,wh,kh,Sc,Nh,Ch,bc,$h,Fh,Oh,Mh,zh,Lh,Bh,Ph,Wh,Gh,Hh,qh,Xh,jh,Kh,Zh,Qh,Jh,ep,tp,np,sp,cp,Ju,hp,fp,kp,Np,Cp,_p,Vp,Up,Gp,Xp,Yp,Zp,Qp,ed,nd,rd,ld,tc,ud,Ah,hd,dd,md,sc,bd,wd,Id,Td,$d,Ad,Fd,Md,zd,Ld,Vd,Gd,Hd,qd,Xd,jd,Kd,Yd,Zd,ef,tf,af,lf,op,cf,pf,ff,gf,xf,vf,If,Nf,Tf,Ef,oc,Af,Df,Pf,Wf,wc,Fp,Gf,uc,hc,Rc,Hf,qf,Xf,jf,Kf,Yf,Qf,tm,sm,im,om,hm,mc,dm,mm,ym,yh,of,vm,wm,Im,Nm,Cm,$m,Em,_m,Fm,Dm,zm,Bm,Vm,Gm,Xm,Km,zp,up,Zm,Jm,tg,rg,ig,Hc,pg,dg,fg,kf];for(const e of mg)(0,r.registerKernel)(e);const gg={},yg={alpha:!1,antialias:!1,premultipliedAlpha:!1,preserveDrawingBuffer:!1,depth:!1,stencil:!1,failIfMajorPerformanceCaveat:!0};function bg(e,t){if(!(e in gg)||null!=t){const n=function(e,t){if(1!==e&&2!==e)throw new Error("Cannot get WebGL rendering context, WebGL is disabled.");const n=null==t?function(e){if("undefined"!=typeof OffscreenCanvas&&2===e)return new OffscreenCanvas(300,150);if("undefined"!=typeof document)return document.createElement("canvas");throw new Error("Cannot create a canvas in this context")}(e):t;return n.addEventListener("webglcontextlost",(t=>{t.preventDefault(),delete gg[e]}),!1),(0,r.env)().getBool("SOFTWARE_WEBGL_ENABLED")&&(yg.failIfMajorPerformanceCaveat=!1),1===e?n.getContext("webgl",yg)||n.getContext("experimental-webgl",yg):n.getContext("webgl2",yg)}(e,t);if(null===n)return console.log("Could not get context for WebGL version",e),null;gg[e]=n}const n=gg[e];return null==n||n.isContextLost()?(delete gg[e],bg(e)):(n.disable(n.DEPTH_TEST),n.disable(n.STENCIL_TEST),n.disable(n.BLEND),n.disable(n.DITHER),n.disable(n.POLYGON_OFFSET_FILL),n.disable(n.SAMPLE_COVERAGE),n.enable(n.SCISSOR_TEST),n.enable(n.CULL_FACE),n.cullFace(n.BACK),gg[e])}var xg,vg,wg;function kg(e,t){return[t,e]}function Ig(e){const t=r.util.sizeFromShape(e),n=Math.ceil(t/4);return r.util.sizeToSquarishShape(n)}function Sg(e,t){return[Math.max(1,Math.ceil(t/2)),Math.max(1,Math.ceil(e/2))]}function Ng(e,t){const n=e;let s,a,i,o,l,u,c,h,p,d;return 2===(0,r.env)().getNumber("WEBGL_VERSION")?(s=n.R32F,a=n.R16F,i=n.RGBA16F,o=n.RGBA32F,l=n.RED,c=4,h=1,p=n.HALF_FLOAT,d=n.FLOAT,u=n.RGBA8):(s=e.RGBA,a=e.RGBA,i=e.RGBA,o=n.RGBA,l=e.RGBA,c=4,h=4,p=null!=t?t.HALF_FLOAT_OES:null,d=e.FLOAT,u=e.RGBA),{internalFormatFloat:s,internalFormatHalfFloat:a,internalFormatPackedHalfFloat:i,internalFormatPackedFloat:o,textureFormatFloat:l,downloadTextureFormat:u,downloadUnpackNumChannels:c,defaultNumChannels:h,textureTypeHalfFloat:p,textureTypeFloat:d}}function Tg(e,t){const n=t();return(0,r.env)().getBool("DEBUG")&&function(e){const t=e.getError();if(t!==e.NO_ERROR)throw new Error("WebGL Error: "+function(e,t){switch(t){case e.NO_ERROR:return"NO_ERROR";case e.INVALID_ENUM:return"INVALID_ENUM";case e.INVALID_VALUE:return"INVALID_VALUE";case e.INVALID_OPERATION:return"INVALID_OPERATION";case e.INVALID_FRAMEBUFFER_OPERATION:return"INVALID_FRAMEBUFFER_OPERATION";case e.OUT_OF_MEMORY:return"OUT_OF_MEMORY";case e.CONTEXT_LOST_WEBGL:return"CONTEXT_LOST_WEBGL";default:return`Unknown error code ${t}`}}(e,t))}(e),n}function Cg(e){return!!((0,r.env)().getBool("WEBGL_RENDER_FLOAT32_ENABLED")||0===e||5.96e-8<Math.abs(e)&&Math.abs(e)<65504)}function $g(e,t){return zg(e,(()=>e.getExtension(t)),'Extension "'+t+'" not supported on this browser.')}!function(e){e[e.DENSE=0]="DENSE",e[e.SHARED_BATCH=1]="SHARED_BATCH"}(xg||(xg={})),function(e){e[e.RENDER=0]="RENDER",e[e.UPLOAD=1]="UPLOAD",e[e.PIXELS=2]="PIXELS",e[e.DOWNLOAD=3]="DOWNLOAD"}(vg||(vg={})),function(e){e[e.UNPACKED_FLOAT16=0]="UNPACKED_FLOAT16",e[e.UNPACKED_FLOAT32=1]="UNPACKED_FLOAT32",e[e.PACKED_4X1_UNSIGNED_BYTE=2]="PACKED_4X1_UNSIGNED_BYTE",e[e.PACKED_2X2_FLOAT32=3]="PACKED_2X2_FLOAT32",e[e.PACKED_2X2_FLOAT16=4]="PACKED_2X2_FLOAT16"}(wg||(wg={}));const Eg=/ERROR: [0-9]+:([0-9]+):/g;function _g(e,t){const n=Eg.exec(t);if(null==n)return console.log(`Couldn't parse line number in error: ${t}`),void console.log(e);const s=+n[1],a=e.split("\n"),i=a.length.toString().length+2,o=a.map(((e,t)=>r.util.rightPad((t+1).toString(),i)+e));let l=0;for(let e=0;e<o.length;e++)l=Math.max(o[e].length,l);const u=o.slice(0,s-1),c=o.slice(s-1,s),h=o.slice(s);console.log(u.join("\n")),console.log(t.split("\n")[0]),console.log(`%c ${r.util.rightPad(c[0],l)}`,"border:1px solid red; background-color:#e3d2d2; color:#a61717"),console.log(h.join("\n"))}function Ag(e,t){if(Tg(e,(()=>e.validateProgram(t))),!1===e.getProgramParameter(t,e.VALIDATE_STATUS))throw console.log(e.getProgramInfoLog(t)),new Error("Shader program validation failed.")}function Rg(e,t,n,s,a,r,i){const o=e.getAttribLocation(t,n);return-1!==o&&(Tg(e,(()=>e.bindBuffer(e.ARRAY_BUFFER,s))),Tg(e,(()=>e.vertexAttribPointer(o,a,e.FLOAT,!1,r,i))),Tg(e,(()=>e.enableVertexAttribArray(o))),!0)}function Fg(e,t,n,s){Tg(e,(()=>function(e,t,n){(function(e,t){const n=e.MAX_COMBINED_TEXTURE_IMAGE_UNITS-1,s=t+e.TEXTURE0;if(s<e.TEXTURE0||s>n)throw new Error(`textureUnit must be in [gl.TEXTURE0, gl.TEXTURE${n}].`)})(e,n),Tg(e,(()=>e.activeTexture(e.TEXTURE0+n))),Tg(e,(()=>e.bindTexture(e.TEXTURE_2D,t)))}(e,t,s))),Tg(e,(()=>e.uniform1i(n,s)))}function Dg(e,t,n){Tg(e,(()=>e.bindFramebuffer(e.FRAMEBUFFER,n))),Tg(e,(()=>e.framebufferTexture2D(e.FRAMEBUFFER,e.COLOR_ATTACHMENT0,e.TEXTURE_2D,t,0)))}function Og(e,t){Tg(e,(()=>e.bindFramebuffer(e.FRAMEBUFFER,t))),Tg(e,(()=>e.framebufferTexture2D(e.FRAMEBUFFER,e.COLOR_ATTACHMENT0,e.TEXTURE_2D,null,0)))}function Mg(e){const t=e.checkFramebufferStatus(e.FRAMEBUFFER);if(t!==e.FRAMEBUFFER_COMPLETE)throw new Error("Error binding framebuffer: "+function(e,t){switch(t){case e.FRAMEBUFFER_INCOMPLETE_ATTACHMENT:return"FRAMEBUFFER_INCOMPLETE_ATTACHMENT";case e.FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT:return"FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT";case e.FRAMEBUFFER_INCOMPLETE_DIMENSIONS:return"FRAMEBUFFER_INCOMPLETE_DIMENSIONS";case e.FRAMEBUFFER_UNSUPPORTED:return"FRAMEBUFFER_UNSUPPORTED";default:return`unknown error ${t}`}}(e,t))}function zg(e,t,n){const s=Tg(e,(()=>t()));if(null==s)throw new Error(n);return s}function Lg(e,t=2){return r.util.sizeFromShape(e.slice(0,e.length-t))}function Bg(e){if(0===e.length)throw Error("Cannot get rows and columns of an empty shape array.");return[e.length>1?e[e.length-2]:1,e[e.length-1]]}function Pg(e){let t=[1,1,1];return 0===e.length||1===e.length&&1===e[0]||(t=[Lg(e),...Bg(e)]),t}function Vg(e){return e%2==0}function Wg(e,t){if(e=e.slice(-2),t=t.slice(-2),r.util.arraysEqual(e,t))return!0;if(!e.length||!t.length)return!0;if(0===e[0]||0===e[1]||0===t[0]||0===t[1])return!0;if(e.length!==t.length){const n=e.slice(-1)[0],s=t.slice(-1)[0];if(n===s)return!0;if(Vg(n)&&Vg(s)&&(1===e[0]||1===t[0]))return!0}return e[1]===t[1]&&Vg(e[0])&&Vg(t[0])}let Ug,Gg;function Hg(e,t){return null!=e.getExtension(t)}function qg(e){try{if(null!=bg(e))return!0}catch(e){return console.log("Error when getting WebGL context: ",e),!1}return!1}function Xg(e){const t=Ng(e),n=e.createTexture();e.bindTexture(e.TEXTURE_2D,n),e.texImage2D(e.TEXTURE_2D,0,t.internalFormatFloat,1,1,0,t.textureFormatFloat,t.textureTypeFloat,null);const s=e.createFramebuffer();e.bindFramebuffer(e.FRAMEBUFFER,s),e.framebufferTexture2D(e.FRAMEBUFFER,e.COLOR_ATTACHMENT0,e.TEXTURE_2D,n,0);const a=e.checkFramebufferStatus(e.FRAMEBUFFER)===e.FRAMEBUFFER_COMPLETE;return e.bindTexture(e.TEXTURE_2D,null),e.bindFramebuffer(e.FRAMEBUFFER,null),e.deleteTexture(n),e.deleteFramebuffer(s),a}function jg(e,t){Array.isArray(e)||(e=[e]),e.forEach((e=>{null!=e&&r.util.assert("complex64"!==e.dtype,(()=>`${t} does not support complex64 tensors in the WebGL backend.`))}))}const Kg=(0,r.env)();function Yg(){let e,t,n,s,a,i,o,l,u,c;return 2===(0,r.env)().getNumber("WEBGL_VERSION")?(e="#version 300 es",t="in",n="out",s="in",a="texture",i="outputColor",o="out vec4 outputColor;",l=(0,r.env)().getBool("WEBGL2_ISNAN_CUSTOM")?"\n      bool isnan_custom(float val) {\n        uint floatToUint = floatBitsToUint(val);\n        return (floatToUint & 0x7fffffffu) > 0x7f800000u;\n      }\n\n      bvec4 isnan_custom(vec4 val) {\n        return bvec4(isnan_custom(val.x),\n          isnan_custom(val.y), isnan_custom(val.z), isnan_custom(val.w));\n      }\n\n      #define isnan(value) isnan_custom(value)\n    ":"",u="",c="\n      #define round(value) newRound(value)\n      int newRound(float value) {\n        return int(floor(value + 0.5));\n      }\n\n      ivec4 newRound(vec4 value) {\n        return ivec4(floor(value + vec4(0.5)));\n      }\n    "):(e="",t="attribute",n="varying",s="varying",a="texture2D",i="gl_FragColor",o="",l="\n      #define isnan(value) isnan_custom(value)\n      bool isnan_custom(float val) {\n        return (val > 0. || val < 1. || val == 0.) ? false : true;\n      }\n      bvec4 isnan_custom(vec4 val) {\n        return bvec4(isnan(val.x), isnan(val.y), isnan(val.z), isnan(val.w));\n      }\n    ",u="\n      uniform float INFINITY;\n\n      bool isinf(float val) {\n        return abs(val) == INFINITY;\n      }\n      bvec4 isinf(vec4 val) {\n        return equal(abs(val), vec4(INFINITY));\n      }\n    ",c="\n      int round(float value) {\n        return int(floor(value + 0.5));\n      }\n\n      ivec4 round(vec4 value) {\n        return ivec4(floor(value + vec4(0.5)));\n      }\n    "),{version:e,attribute:t,varyingVs:n,varyingFs:s,texture2D:a,output:i,defineOutput:o,defineSpecialNaN:l,defineSpecialInf:u,defineRound:c}}function Zg(e,t,n="index"){const s=r.util.computeStrides(t);return s.map(((t,a)=>`int ${e[a]} = ${n} / ${t}; ${a===s.length-1?`int ${e[a+1]} = ${n} - ${e[a]} * ${t}`:`index -= ${e[a]} * ${t}`};`)).join("")}function Qg(e,t,n="index"){const s=r.util.computeStrides(t);return s.map(((t,a)=>`int ${e[a]} = ${n} / outShapeStrides[${a}]; ${a===s.length-1?`int ${e[a+1]} = ${n} - ${e[a]} * outShapeStrides[${a}]`:`index -= ${e[a]} * outShapeStrides[${a}]`};`)).join("")}function Jg(e){const t=r.util.computeStrides(e).map((e=>e.toString()));return`\n  int getFlatIndex(ivec3 coords) {\n    return coords.x * ${t[0]} + coords.y * ${t[1]} + coords.z;\n  }\n`}Kg.registerFlag("HAS_WEBGL",(()=>Kg.getNumber("WEBGL_VERSION")>0)),Kg.registerFlag("WEBGL_VERSION",(()=>qg(2)?2:qg(1)?1:0)),Kg.registerFlag("WEBGL_CHECK_NUMERICAL_PROBLEMS",(()=>!1)),Kg.registerFlag("WEBGL_BUFFER_SUPPORTED",(()=>2===Kg.get("WEBGL_VERSION"))),Kg.registerFlag("WEBGL_CPU_FORWARD",(()=>!0)),Kg.registerFlag("WEBGL_FORCE_F16_TEXTURES",(()=>!1)),Kg.registerFlag("WEBGL_PACK",(()=>Kg.getBool("HAS_WEBGL"))),Kg.registerFlag("WEBGL_PACK_NORMALIZATION",(()=>Kg.getBool("WEBGL_PACK"))),Kg.registerFlag("WEBGL_PACK_CLIP",(()=>Kg.getBool("WEBGL_PACK"))),Kg.registerFlag("WEBGL_PACK_DEPTHWISECONV",(()=>Kg.getBool("WEBGL_PACK"))),Kg.registerFlag("WEBGL_PACK_BINARY_OPERATIONS",(()=>Kg.getBool("WEBGL_PACK"))),Kg.registerFlag("WEBGL_PACK_UNARY_OPERATIONS",(()=>Kg.getBool("WEBGL_PACK"))),Kg.registerFlag("WEBGL_PACK_ARRAY_OPERATIONS",(()=>Kg.getBool("WEBGL_PACK"))),Kg.registerFlag("WEBGL_PACK_IMAGE_OPERATIONS",(()=>Kg.getBool("WEBGL_PACK"))),Kg.registerFlag("WEBGL_PACK_REDUCE",(()=>Kg.getBool("WEBGL_PACK"))),Kg.registerFlag("WEBGL_LAZILY_UNPACK",(()=>Kg.getBool("WEBGL_PACK"))),Kg.registerFlag("WEBGL_CONV_IM2COL",(()=>Kg.getBool("WEBGL_PACK"))),Kg.registerFlag("WEBGL_MAX_TEXTURE_SIZE",(()=>function(e){if(null==Ug){const t=bg(e);Ug=t.getParameter(t.MAX_TEXTURE_SIZE)}return Ug}(Kg.getNumber("WEBGL_VERSION")))),Kg.registerFlag("WEBGL_MAX_TEXTURES_IN_SHADER",(()=>function(e){if(null==Gg){const t=bg(e);Gg=t.getParameter(t.MAX_TEXTURE_IMAGE_UNITS)}return Math.min(16,Gg)}(Kg.getNumber("WEBGL_VERSION")))),Kg.registerFlag("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION",(()=>{const e=Kg.getNumber("WEBGL_VERSION");return 0===e?0:function(e){if(0===e)return 0;let t;const n=bg(e);return t=Hg(n,"EXT_disjoint_timer_query_webgl2")&&2===e?2:Hg(n,"EXT_disjoint_timer_query")?1:0,t}(e)})),Kg.registerFlag("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_RELIABLE",(()=>Kg.getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION")>0&&!r.device_util.isMobile())),Kg.registerFlag("WEBGL_RENDER_FLOAT32_CAPABLE",(()=>function(e){if(0===e)return!1;const t=bg(e);if(1===e){if(!Hg(t,"OES_texture_float"))return!1}else if(!Hg(t,"EXT_color_buffer_float"))return!1;return Xg(t)}(Kg.getNumber("WEBGL_VERSION")))),Kg.registerFlag("WEBGL_RENDER_FLOAT32_ENABLED",(()=>!Kg.getBool("WEBGL_FORCE_F16_TEXTURES")&&Kg.getBool("WEBGL_RENDER_FLOAT32_CAPABLE"))),Kg.registerFlag("WEBGL_DOWNLOAD_FLOAT_ENABLED",(()=>function(e){if(0===e)return!1;const t=bg(e);if(1!==e){if(Hg(t,"EXT_color_buffer_float"))return Xg(t);const e="EXT_color_buffer_half_float";if(Hg(t,e)){const n=t.getExtension(e);return function(e,t){const n=Ng(e,t),s=e.createTexture();e.bindTexture(e.TEXTURE_2D,s),e.texImage2D(e.TEXTURE_2D,0,n.internalFormatHalfFloat,1,1,0,n.textureFormatFloat,n.textureTypeHalfFloat,null);const a=e.createFramebuffer();e.bindFramebuffer(e.FRAMEBUFFER,a),e.framebufferTexture2D(e.FRAMEBUFFER,e.COLOR_ATTACHMENT0,e.TEXTURE_2D,s,0);const r=e.checkFramebufferStatus(e.FRAMEBUFFER)===e.FRAMEBUFFER_COMPLETE;return e.bindTexture(e.TEXTURE_2D,null),e.bindFramebuffer(e.FRAMEBUFFER,null),e.deleteTexture(s),e.deleteFramebuffer(a),r}(t,n)}return!1}return!!Hg(t,"OES_texture_float")&&!!Hg(t,"WEBGL_color_buffer_float")&&Xg(t)}(Kg.getNumber("WEBGL_VERSION")))),Kg.registerFlag("WEBGL_FENCE_API_ENABLED",(()=>{return 2===(e=Kg.getNumber("WEBGL_VERSION"))&&null!=bg(e).fenceSync;var e})),Kg.registerFlag("WEBGL_SIZE_UPLOAD_UNIFORM",(()=>Kg.getBool("WEBGL_RENDER_FLOAT32_ENABLED")?4:0)),Kg.registerFlag("WEBGL_DELETE_TEXTURE_THRESHOLD",(()=>-1),(e=>{if(e<0&&-1!==e)throw new Error(`WEBGL_DELETE_TEXTURE_THRESHOLD must be -1 (indicating never delete) or at least 0, but got ${e}.`)})),Kg.registerFlag("WEBGL_FLUSH_THRESHOLD",(()=>r.device_util.isMobile()?1:-1),(e=>{if(e<0&&-1!==e)throw new Error(`WEBGL_FLUSH_THRESHOLD must be -1 (indicating never manual flush) or at least 0, but got ${e}.`)})),Kg.registerFlag("CPU_HANDOFF_SIZE_THRESHOLD",(()=>128)),Kg.registerFlag("WEBGL_USE_SHAPES_UNIFORMS",(()=>!1)),Kg.registerFlag("TOPK_LAST_DIM_CPU_HANDOFF_SIZE_THRESHOLD",(()=>1e5)),Kg.registerFlag("TOPK_K_CPU_HANDOFF_THRESHOLD",(()=>128)),Kg.registerFlag("WEBGL_EXP_CONV",(()=>!1)),Kg.registerFlag("SOFTWARE_WEBGL_ENABLED",(()=>Kg.getBool("IS_TEST"))),Kg.registerFlag("WEBGL_MAX_SIZE_FOR_NARROW_TEXTURE",(()=>1/0)),Kg.registerFlag("WEBGL_AUTO_SQUARIFY_NARROW_TEXTURE_SHAPE",(()=>!1)),Kg.registerFlag("WEBGL2_ISNAN_CUSTOM",(()=>!1));const ey="\n  const float FLOAT_MAX = 1.70141184e38;\n  const float FLOAT_MIN = 1.17549435e-38;\n\n  lowp vec4 encode_float(highp float v) {\n    if (isnan(v)) {\n      return vec4(255, 255, 255, 255);\n    }\n\n    highp float av = abs(v);\n\n    if(av < FLOAT_MIN) {\n      return vec4(0.0, 0.0, 0.0, 0.0);\n    } else if(v > FLOAT_MAX) {\n      return vec4(0.0, 0.0, 128.0, 127.0) / 255.0;\n    } else if(v < -FLOAT_MAX) {\n      return vec4(0.0, 0.0,  128.0, 255.0) / 255.0;\n    }\n\n    highp vec4 c = vec4(0,0,0,0);\n\n    highp float e = floor(log2(av));\n    highp float m = exp2(fract(log2(av))) - 1.0;\n\n    c[2] = floor(128.0 * m);\n    m -= c[2] / 128.0;\n    c[1] = floor(32768.0 * m);\n    m -= c[1] / 32768.0;\n    c[0] = floor(8388608.0 * m);\n\n    highp float ebias = e + 127.0;\n    c[3] = floor(ebias / 2.0);\n    ebias -= c[3] * 2.0;\n    c[2] += floor(ebias) * 128.0;\n\n    c[3] += 128.0 * step(0.0, -v);\n\n    return c / 255.0;\n  }\n",{getBroadcastDims:ty}=r.backend_util;function ny(e,t,n){const s=[];if(e.forEach((e=>{const t=r.util.sizeFromShape(e.shapeInfo.logicalShape);if(e.shapeInfo.isUniform?s.push(`uniform float ${e.name}${t>1?`[${t}]`:""};`):(s.push(`uniform sampler2D ${e.name};`),s.push(`uniform int offset${e.name};`)),n.enableShapeUniforms){const{uniformShape:t}=py(n.packedInputs,e.shapeInfo.logicalShape,e.shapeInfo.texShape);switch(t.length){case 1:s.push(`uniform int ${e.name}Shape;`);break;case 2:s.push(`uniform ivec2 ${e.name}Shape;`);break;case 3:s.push(`uniform ivec3 ${e.name}Shape;`);break;case 4:s.push(`uniform ivec4 ${e.name}Shape;`)}s.push(`uniform ivec2 ${e.name}TexShape;`)}})),n.enableShapeUniforms){switch(t.logicalShape.length){case 1:s.push("uniform int outShape;");break;case 2:s.push("uniform ivec2 outShape;"),s.push("uniform int outShapeStrides;");break;case 3:s.push("uniform ivec3 outShape;"),s.push("uniform ivec2 outShapeStrides;");break;case 4:s.push("uniform ivec4 outShape;"),s.push("uniform ivec3 outShapeStrides;")}s.push("uniform ivec2 outTexShape;")}n.customUniforms&&n.customUniforms.forEach((e=>{s.push(`uniform ${e.type} ${e.name}${e.arrayIndex?`[${e.arrayIndex}]`:""};`)}));const a=s.join("\n"),i=e.map((e=>function(e,t,n=!1,s){let a="";a+=n?ay(e,s):sy(e,s);const i=e.shapeInfo.logicalShape,o=t.logicalShape;return i.length<=o.length&&(a+=n?function(e,t){const n=e.name,s=n.charAt(0).toUpperCase()+n.slice(1),a="get"+s+"AtOutCoords",i=e.shapeInfo.logicalShape.length,o=t.logicalShape.length,l=ty(e.shapeInfo.logicalShape,t.logicalShape),u=hy(o),c=o-i;let h;const p=["x","y","z","w","u","v"];h=0===i?"":o<2&&l.length>=1?"coords = 0;":l.map((e=>`coords.${p[e+c]} = 0;`)).join("\n");let d="";d=o<2&&i>0?"coords":e.shapeInfo.logicalShape.map(((e,t)=>`coords.${p[t+c]}`)).join(", ");let f="return outputValue;";const m=1===r.util.sizeFromShape(e.shapeInfo.logicalShape),g=1===r.util.sizeFromShape(t.logicalShape);if(1!==i||m||g){if(m&&!g)f=1===o?"\n        return vec4(outputValue.x, outputValue.x, 0., 0.);\n      ":"\n        return vec4(outputValue.x);\n      ";else if(l.length){const e=i-2,t=i-1;l.indexOf(e)>-1&&l.indexOf(t)>-1?f="return vec4(outputValue.x);":l.indexOf(e)>-1?f="return vec4(outputValue.x, outputValue.y, outputValue.x, outputValue.y);":l.indexOf(t)>-1&&(f="return vec4(outputValue.xx, outputValue.zz);")}}else f="\n      return vec4(outputValue.xy, outputValue.xy);\n    ";return`\n    vec4 ${a}() {\n      ${u} coords = getOutputCoords();\n      ${h}\n      vec4 outputValue = get${s}(${d});\n      ${f}\n    }\n  `}(e,t):function(e,t){const n=e.name,s=n.charAt(0).toUpperCase()+n.slice(1),a="get"+s+"AtOutCoords",i=t.texShape,o=e.shapeInfo.texShape,l=e.shapeInfo.logicalShape.length,u=t.logicalShape.length;if(!e.shapeInfo.isUniform&&l===u&&null==e.shapeInfo.flatOffset&&r.util.arraysEqual(o,i))return`\n      float ${a}() {\n        return sampleTexture(${n}, resultUV);\n      }\n    `;const c=hy(u),h=ty(e.shapeInfo.logicalShape,t.logicalShape),p=u-l;let d;const f=["x","y","z","w","u","v"];d=0===l?"":u<2&&h.length>=1?"coords = 0;":h.map((e=>`coords.${f[e+p]} = 0;`)).join("\n");let m="";return m=u<2&&l>0?"coords":e.shapeInfo.logicalShape.map(((e,t)=>`coords.${f[t+p]}`)).join(", "),`\n    float ${a}() {\n      ${c} coords = getOutputCoords();\n      ${d}\n      return get${s}(${m});\n    }\n  `}(e,t)),a}(e,t,n.packedInputs,n.enableShapeUniforms))).join("\n"),o=t.texShape,l=Yg(),u=function(e){return`\n    float sampleTexture(sampler2D textureSampler, vec2 uv) {\n      return ${e.texture2D}(textureSampler, uv).r;\n    }\n  `}(l);let c,h,p=function(e){return`${e.version}\n    precision highp float;\n    precision highp int;\n    precision highp sampler2D;\n    ${e.varyingFs} vec2 resultUV;\n    ${e.defineOutput}\n    const vec2 halfCR = vec2(0.5, 0.5);\n\n    struct ivec5\n    {\n      int x;\n      int y;\n      int z;\n      int w;\n      int u;\n    };\n\n    struct ivec6\n    {\n      int x;\n      int y;\n      int z;\n      int w;\n      int u;\n      int v;\n    };\n\n    uniform float NAN;\n    ${e.defineSpecialNaN}\n    ${e.defineSpecialInf}\n    ${e.defineRound}\n\n    int imod(int x, int y) {\n      return x - y * (x / y);\n    }\n\n    int idiv(int a, int b, float sign) {\n      int res = a / b;\n      int mod = imod(a, b);\n      if (sign < 0. && mod != 0) {\n        res -= 1;\n      }\n      return res;\n    }\n\n    //Based on the work of Dave Hoskins\n    //https://www.shadertoy.com/view/4djSRW\n    #define HASHSCALE1 443.8975\n    float random(float seed){\n      vec2 p = resultUV * seed;\n      vec3 p3  = fract(vec3(p.xyx) * HASHSCALE1);\n      p3 += dot(p3, p3.yzx + 19.19);\n      return fract((p3.x + p3.y) * p3.z);\n    }\n\n    ${ry}\n    ${iy}\n    ${oy}\n  `}(l);return t.isPacked?(c=function(e,t,n){switch(e.length){case 0:return"\n    int getOutputCoords() {\n      return 0;\n    }\n  ";case 1:return function(e,t,n){const s=[Math.ceil(t[0]/2),Math.ceil(t[1]/2)];return 1===s[0]?n?"\n      int getOutputCoords() {\n        return 2 * int(resultUV.x * ceil(float(outTexShape[1]) / 2.0));\n      }\n    ":`\n      int getOutputCoords() {\n        return 2 * int(resultUV.x * ${s[1]}.0);\n      }\n    `:1===s[1]?n?"\n      int getOutputCoords() {\n        return 2 * int(resultUV.y * ceil(float(outTexShape[0]) / 2.0));\n      }\n    ":`\n      int getOutputCoords() {\n        return 2 * int(resultUV.y * ${s[0]}.0);\n      }\n    `:n?"\n    int getOutputCoords() {\n      ivec2 packedTexShape = ivec2(ceil(float(outTexShape[0]) / 2.0), ceil(float(outTexShape[1]) / 2.0));\n      ivec2 resTexRC = ivec2(resultUV.yx *\n                             vec2(packedTexShape[0], packedTexShape[1]));\n      return 2 * (resTexRC.x * packedTexShape[1] + resTexRC.y);\n    }\n  ":`\n    int getOutputCoords() {\n      ivec2 resTexRC = ivec2(resultUV.yx *\n                             vec2(${s[0]}, ${s[1]}));\n      return 2 * (resTexRC.x * ${s[1]} + resTexRC.y);\n    }\n  `}(0,t,n);case 2:return function(e,t,n){const s=[Math.ceil(t[0]/2),Math.ceil(t[1]/2)];if(r.util.arraysEqual(e,t))return n?"\n      ivec2 getOutputCoords() {\n        ivec2 packedTexShape = ivec2(ceil(float(outTexShape[0]) / 2.0), ceil(float(outTexShape[1]) / 2.0));\n        return 2 * ivec2(resultUV.yx * vec2(packedTexShape[0], packedTexShape[1]));\n      }\n    ":`\n      ivec2 getOutputCoords() {\n        return 2 * ivec2(resultUV.yx * vec2(${s[0]}, ${s[1]}));\n      }\n    `;const a=Math.ceil(e[1]/2);return n?"\n    ivec2 getOutputCoords() {\n      ivec2 packedTexShape = ivec2(ceil(float(outTexShape[0]) / 2.0), ceil(float(outTexShape[1]) / 2.0));\n      int texelsInLogicalRow = int(ceil(float(outShape[1]) / 2.0));\n      ivec2 resTexRC = ivec2(resultUV.yx *\n                             vec2(packedTexShape[0], packedTexShape[1]));\n\n      int index = resTexRC.x * packedTexShape[1] + resTexRC.y;\n      int r = 2 * (index / texelsInLogicalRow);\n      int c = imod(index, texelsInLogicalRow) * 2;\n\n      return ivec2(r, c);\n    }\n  ":`\n    ivec2 getOutputCoords() {\n      ivec2 resTexRC = ivec2(resultUV.yx *\n                             vec2(${s[0]}, ${s[1]}));\n\n      int index = resTexRC.x * ${s[1]} + resTexRC.y;\n      int r = 2 * (index / ${a});\n      int c = imod(index, ${a}) * 2;\n\n      return ivec2(r, c);\n    }\n  `}(e,t,n);case 3:return function(e,t,n){if(n)return"\n    ivec3 getOutputCoords() {\n      ivec2 packedTexShape = ivec2(ceil(float(outTexShape[0]) / 2.0), ceil(float(outTexShape[1]) / 2.0));\n      int texelsInLogicalRow = int(ceil(float(outShape[2]) / 2.0));\n      int texelsInBatch = texelsInLogicalRow * int(ceil(float(outShape[1]) / 2.0));\n      ivec2 resTexRC = ivec2(resultUV.yx *\n                             vec2(packedTexShape[0], packedTexShape[1]));\n      int index = resTexRC.x * packedTexShape[1] + resTexRC.y;\n\n      int b = index / texelsInBatch;\n      index -= b * texelsInBatch;\n\n      int r = 2 * (index / texelsInLogicalRow);\n      int c = imod(index, texelsInLogicalRow) * 2;\n\n      return ivec3(b, r, c);\n    }\n  ";const s=[Math.ceil(t[0]/2),Math.ceil(t[1]/2)],a=Math.ceil(e[2]/2),r=a*Math.ceil(e[1]/2);return`\n    ivec3 getOutputCoords() {\n      ivec2 resTexRC = ivec2(resultUV.yx *\n                             vec2(${s[0]}, ${s[1]}));\n      int index = resTexRC.x * ${s[1]} + resTexRC.y;\n\n      int b = index / ${r};\n      index -= b * ${r};\n\n      int r = 2 * (index / ${a});\n      int c = imod(index, ${a}) * 2;\n\n      return ivec3(b, r, c);\n    }\n  `}(e,t,n);default:return function(e,t,n){if(n)return"\n    ivec4 getOutputCoords() {\n      ivec2 packedTexShape = ivec2(ceil(float(outTexShape[0]) / 2.0), ceil(float(outTexShape[1]) / 2.0));\n      ivec2 resTexRC = ivec2(resultUV.yx *\n                             vec2(packedTexShape[0], packedTexShape[1]));\n      int index = resTexRC.x * packedTexShape[1] + resTexRC.y;\n\n      int texelsInLogicalRow = int(ceil(float(outShape[3]) / 2.0));\n      int texelsInBatch = texelsInLogicalRow * int(ceil(float(outShape[2]) / 2.0));\n      int texelsInBatchN = texelsInBatch * outShape[1];\n\n      int b2 = index / texelsInBatchN;\n      index -= b2 * texelsInBatchN;\n\n      int b = index / texelsInBatch;\n      index -= b * texelsInBatch;\n\n      int r = 2 * (index / texelsInLogicalRow);\n      int c = imod(index, texelsInLogicalRow) * 2;\n\n      return ivec4(b2, b, r, c);\n    }\n  ";const s=[Math.ceil(t[0]/2),Math.ceil(t[1]/2)],a=Math.ceil(e[e.length-1]/2),r=a*Math.ceil(e[e.length-2]/2);let i=r,o="",l="b, r, c";for(let t=2;t<e.length-1;t++)i*=e[e.length-t-1],o=`\n      int b${t} = index / ${i};\n      index -= b${t} * ${i};\n    `+o,l=`b${t}, `+l;return`\n    ivec${e.length} getOutputCoords() {\n      ivec2 resTexRC = ivec2(resultUV.yx *\n                             vec2(${s[0]}, ${s[1]}));\n      int index = resTexRC.x * ${s[1]} + resTexRC.y;\n\n      ${o}\n\n      int b = index / ${r};\n      index -= b * ${r};\n\n      int r = 2 * (index / ${a});\n      int c = imod(index, ${a}) * 2;\n\n      return ivec${e.length}(${l});\n    }\n  `}(e,t,n)}}(t.logicalShape,o,n.enableShapeUniforms),h=function(e){return`\n    void setOutput(vec4 val) {\n      ${e.output} = val;\n    }\n  `}(l)):(c=function(e,t,n){switch(e.length){case 0:return"\n    int getOutputCoords() {\n      return 0;\n    }\n  ";case 1:return function(e,t,n){return 1===t[0]?n?"\n      int getOutputCoords() {\n        return int(resultUV.x * float(outTexShape[1]));\n      }\n    ":`\n      int getOutputCoords() {\n        return int(resultUV.x * ${t[1]}.0);\n      }\n    `:1===t[1]?n?"\n      int getOutputCoords() {\n        return int(resultUV.y * float(outTexShape[0]));\n      }\n    ":`\n      int getOutputCoords() {\n        return int(resultUV.y * ${t[0]}.0);\n      }\n    `:n?"\n    int getOutputCoords() {\n      ivec2 resTexRC = ivec2(resultUV.yx *\n                             vec2(outTexShape[0], outTexShape[1]));\n      return resTexRC.x * outTexShape[1] + resTexRC.y;\n    }\n  ":`\n    int getOutputCoords() {\n      ivec2 resTexRC = ivec2(resultUV.yx *\n                             vec2(${t[0]}, ${t[1]}));\n      return resTexRC.x * ${t[1]} + resTexRC.y;\n    }\n  `}(0,t,n);case 2:return function(e,t,n){return r.util.arraysEqual(e,t)?n?"\n      ivec2 getOutputCoords() {\n        return ivec2(resultUV.yx * vec2(outTexShape[0], outTexShape[1]));\n      }\n    ":`\n      ivec2 getOutputCoords() {\n        return ivec2(resultUV.yx * vec2(${t[0]}, ${t[1]}));\n      }\n    `:1===e[1]?n?"\n      ivec2 getOutputCoords() {\n        ivec2 resTexRC = ivec2(resultUV.yx *\n                               vec2(outTexShape[0], outTexShape[1]));\n        int index = resTexRC.x * outTexShape[1] + resTexRC.y;\n        return ivec2(index, 0);\n      }\n    ":`\n      ivec2 getOutputCoords() {\n        ivec2 resTexRC = ivec2(resultUV.yx *\n                               vec2(${t[0]}, ${t[1]}));\n        int index = resTexRC.x * ${t[1]} + resTexRC.y;\n        return ivec2(index, 0);\n      }\n    `:1===e[0]?n?"\n      ivec2 getOutputCoords() {\n        ivec2 resTexRC = ivec2(resultUV.yx *\n                               vec2(outTexShape[0], outTexShape[1]));\n        int index = resTexRC.x * outTexShape[1] + resTexRC.y;\n        return ivec2(0, index);\n      }\n    ":`\n      ivec2 getOutputCoords() {\n        ivec2 resTexRC = ivec2(resultUV.yx *\n                               vec2(${t[0]}, ${t[1]}));\n        int index = resTexRC.x * ${t[1]} + resTexRC.y;\n        return ivec2(0, index);\n      }\n    `:n?"\n    ivec2 getOutputCoords() {\n      ivec2 resTexRC = ivec2(resultUV.yx *\n                             vec2(outTexShape[0], outTexShape[1]));\n      int index = resTexRC.x * outTexShape[1] + resTexRC.y;\n      int r = index / outShape[1];\n      int c = index - r * outShape[1];\n      return ivec2(r, c);\n    }\n  ":`\n    ivec2 getOutputCoords() {\n      ivec2 resTexRC = ivec2(resultUV.yx *\n                             vec2(${t[0]}, ${t[1]}));\n      int index = resTexRC.x * ${t[1]} + resTexRC.y;\n      int r = index / ${e[1]};\n      int c = index - r * ${e[1]};\n      return ivec2(r, c);\n    }\n  `}(e,t,n);case 3:return function(e,t,n){if(n)return`\n  ivec3 getOutputCoords() {\n    ivec2 resTexRC = ivec2(resultUV.yx *\n                           vec2(outTexShape[0], outTexShape[1]));\n    int index = resTexRC.x * outTexShape[1] + resTexRC.y;\n    ${Qg(["r","c","d"],e)}\n    return ivec3(r, c, d);\n  }\n`;const s=Zg(["r","c","d"],e);return`\n    ivec3 getOutputCoords() {\n      ivec2 resTexRC = ivec2(resultUV.yx *\n                             vec2(${t[0]}, ${t[1]}));\n      int index = resTexRC.x * ${t[1]} + resTexRC.y;\n      ${s}\n      return ivec3(r, c, d);\n    }\n  `}(e,t,n);case 4:return function(e,t,n){if(n)return`\n    ivec4 getOutputCoords() {\n      ivec2 resTexRC = ivec2(resultUV.yx *\n        vec2(outTexShape[0], outTexShape[1]));\n      int index = resTexRC.x * outTexShape[1] + resTexRC.y;\n      ${Qg(["r","c","d","d2"],e)}\n      return ivec4(r, c, d, d2);\n    }\n  `;const s=Zg(["r","c","d","d2"],e);return`\n    ivec4 getOutputCoords() {\n      ivec2 resTexRC = ivec2(resultUV.yx *\n        vec2(${t[0]}, ${t[1]}));\n      int index = resTexRC.x * ${t[1]} + resTexRC.y;\n      ${s}\n      return ivec4(r, c, d, d2);\n    }\n  `}(e,t,n);case 5:return function(e,t){const n=Zg(["r","c","d","d2","d3"],e);return`\n    ivec5 getOutputCoords() {\n      ivec2 resTexRC = ivec2(resultUV.yx * vec2(${t[0]},\n                             ${t[1]}));\n\n      int index = resTexRC.x * ${t[1]} + resTexRC.y;\n\n      ${n}\n\n      ivec5 outShape = ivec5(r, c, d, d2, d3);\n      return outShape;\n    }\n  `}(e,t);case 6:return function(e,t){const n=Zg(["r","c","d","d2","d3","d4"],e);return`\n    ivec6 getOutputCoords() {\n      ivec2 resTexRC = ivec2(resultUV.yx *\n        vec2(${t[0]}, ${t[1]}));\n      int index = resTexRC.x * ${t[1]} + resTexRC.y;\n\n      ${n}\n\n      ivec6 result = ivec6(r, c, d, d2, d3, d4);\n      return result;\n    }\n  `}(e,t);default:throw new Error(`${e.length}-D output sampling is not yet supported`)}}(t.logicalShape,o,n.enableShapeUniforms),h=function(e){return`\n    void setOutput(float val) {\n      ${e.output} = vec4(val, 0, 0, 0);\n    }\n  `}(l)),n.packedInputs&&(p+=ly),[p,u,h,a,c,i,n.userCode].join("\n")}function sy(e,t=!1){const n=e.shapeInfo.logicalShape;switch(n.length){case 0:return function(e,t){const n=e.name,s="get"+n.charAt(0).toUpperCase()+n.slice(1);if(e.shapeInfo.isUniform)return`float ${s}() {return ${n};}`;const[a,r]=e.shapeInfo.texShape;if(1===a&&1===r)return`\n      float ${s}() {\n        return sampleTexture(${n}, halfCR);\n      }\n    `;const i=uy(n);if(t)return`\n    float ${s}() {\n      vec2 uv = uvFromFlat(${n}TexShape[0], ${n}TexShape[1], ${i});\n      return sampleTexture(${n}, uv);\n    }\n  `;const[o,l]=e.shapeInfo.texShape;return`\n    float ${s}() {\n      vec2 uv = uvFromFlat(${o}, ${l}, ${i});\n      return sampleTexture(${n}, uv);\n    }\n  `}(e,t);case 1:return function(e,t){const n=e.name,s="get"+n.charAt(0).toUpperCase()+n.slice(1);if(e.shapeInfo.isUniform)return`\n      float ${s}(int index) {\n        ${cy(e)}\n      }\n    `;const a=e.shapeInfo.texShape,r=a[0],i=a[1];if(1===i&&1===r)return`\n      float ${s}(int index) {\n        return sampleTexture(${n}, halfCR);\n      }\n    `;const o=uy(n);return 1===i?t?`\n      float ${s}(int index) {\n        vec2 uv = vec2(0.5, (float(index + ${o}) + 0.5) / float(${n}TexShape[0]));\n        return sampleTexture(${n}, uv);\n      }\n    `:`\n      float ${s}(int index) {\n        vec2 uv = vec2(0.5, (float(index + ${o}) + 0.5) / ${r}.0);\n        return sampleTexture(${n}, uv);\n      }\n    `:1===r?t?`\n      float ${s}(int index) {\n        vec2 uv = vec2((float(index + ${o}) + 0.5) / float(${n}TexShape[1]), 0.5);\n        return sampleTexture(${n}, uv);\n      }\n    `:`\n      float ${s}(int index) {\n        vec2 uv = vec2((float(index + ${o}) + 0.5) / ${i}.0, 0.5);\n        return sampleTexture(${n}, uv);\n      }\n    `:t?`\n    float ${s}(int index) {\n      vec2 uv = uvFromFlat(${n}TexShape[0], ${n}TexShape[1], index + ${o});\n      return sampleTexture(${n}, uv);\n    }\n  `:`\n    float ${s}(int index) {\n      vec2 uv = uvFromFlat(${r}, ${i}, index + ${o});\n      return sampleTexture(${n}, uv);\n    }\n  `}(e,t);case 2:return function(e,t){const n=e.shapeInfo.logicalShape,s=e.name,a="get"+s.charAt(0).toUpperCase()+s.slice(1),i=e.shapeInfo.texShape;if(null!=i&&r.util.arraysEqual(n,i)){if(t)return`\n      float ${a}(int row, int col) {\n        vec2 uv = (vec2(col, row) + halfCR) / vec2(${s}TexShape[1], ${s}TexShape[0]);\n        return sampleTexture(${s}, uv);\n      }\n    `;const e=i[0];return`\n    float ${a}(int row, int col) {\n      vec2 uv = (vec2(col, row) + halfCR) / vec2(${i[1]}.0, ${e}.0);\n      return sampleTexture(${s}, uv);\n    }\n  `}const{newShape:o,keptDims:l}=r.util.squeezeShape(n),u=o;if(u.length<n.length){const n=["row","col"];return`\n      ${sy(dy(e,u),t)}\n      float ${a}(int row, int col) {\n        return ${a}(${fy(n,l)});\n      }\n    `}if(e.shapeInfo.isUniform)return`\n      float ${a}(int row, int col) {\n        int index = round(dot(vec2(row, col), vec2(${n[1]}, 1)));\n        ${cy(e)}\n      }\n    `;const c=i[0],h=i[1],p=uy(s);return 1===h?t?`\n      float ${a}(int row, int col) {\n        float index = dot(vec3(row, col, ${p}), vec3(${s}Shape[1], 1, 1));\n        vec2 uv = vec2(0.5, (index + 0.5) / float(${s}TexShape[0]));\n        return sampleTexture(${s}, uv);\n      }\n    `:`\n    float ${a}(int row, int col) {\n      float index = dot(vec3(row, col, ${p}), vec3(${n[1]}, 1, 1));\n      vec2 uv = vec2(0.5, (index + 0.5) / ${c}.0);\n      return sampleTexture(${s}, uv);\n    }\n  `:1===c?t?`\n      float ${a}(int row, int col) {\n        float index = dot(vec3(row, col, ${p}), vec3(${s}Shape[1], 1, 1));\n        vec2 uv = vec2((index + 0.5) / float(${s}TexShape[1]), 0.5);\n        return sampleTexture(${s}, uv);\n      }\n    `:`\n    float ${a}(int row, int col) {\n      float index = dot(vec3(row, col, ${p}), vec3(${n[1]}, 1, 1));\n      vec2 uv = vec2((index + 0.5) / ${h}.0, 0.5);\n      return sampleTexture(${s}, uv);\n    }\n  `:t?`\n      float ${a}(int row, int col) {\n        // Explicitly use integer operations as dot() only works on floats.\n        int index = row * ${s}Shape[1] + col + ${p};\n        vec2 uv = uvFromFlat(${s}TexShape[0], ${s}TexShape[1], index);\n        return sampleTexture(${s}, uv);\n      }\n    `:`\n  float ${a}(int row, int col) {\n    // Explicitly use integer operations as dot() only works on floats.\n    int index = row * ${n[1]} + col + ${p};\n    vec2 uv = uvFromFlat(${c}, ${h}, index);\n    return sampleTexture(${s}, uv);\n  }\n`}(e,t);case 3:return function(e,t){const n=e.shapeInfo.logicalShape,s=e.name,a="get"+s.charAt(0).toUpperCase()+s.slice(1),i=n[1]*n[2],o=n[2],{newShape:l,keptDims:u}=r.util.squeezeShape(n),c=l;if(c.length<n.length){const n=["row","col","depth"];return`\n        ${sy(dy(e,c),t)}\n        float ${a}(int row, int col, int depth) {\n          return ${a}(${fy(n,u)});\n        }\n      `}if(e.shapeInfo.isUniform)return`\n      float ${a}(int row, int col, int depth) {\n        int index = round(dot(vec3(row, col, depth),\n                          vec3(${i}, ${o}, 1)));\n        ${cy(e)}\n      }\n    `;const h=e.shapeInfo.texShape,p=h[0],d=h[1],f=e.shapeInfo.flatOffset;if(d===i&&null==f)return t?`\n      float ${a}(int row, int col, int depth) {\n        int stride1 = ${s}Shape[2];\n        float texR = float(row);\n        float texC = dot(vec2(col, depth), vec2(stride1, 1));\n        vec2 uv = (vec2(texC, texR) + halfCR) /\n                   vec2(${s}TexShape[1], ${s}TexShape[0]);\n        return sampleTexture(${s}, uv);\n      }\n    `:`\n        float ${a}(int row, int col, int depth) {\n          float texR = float(row);\n          float texC = dot(vec2(col, depth), vec2(${o}, 1));\n          vec2 uv = (vec2(texC, texR) + halfCR) /\n                     vec2(${d}.0, ${p}.0);\n          return sampleTexture(${s}, uv);\n        }\n      `;if(d===o&&null==f)return t?`\n      float ${a}(int row, int col, int depth) {\n        float texR = dot(vec2(row, col), vec2(${s}Shape[1], 1));\n        float texC = float(depth);\n        vec2 uv = (vec2(texC, texR) + halfCR) / vec2(${s}TexShape[1], ${s}TexShape[0]);\n        return sampleTexture(${s}, uv);\n      }\n    `:`\n    float ${a}(int row, int col, int depth) {\n      float texR = dot(vec2(row, col), vec2(${n[1]}, 1));\n      float texC = float(depth);\n      vec2 uv = (vec2(texC, texR) + halfCR) / vec2(${d}.0, ${p}.0);\n      return sampleTexture(${s}, uv);\n    }\n  `;const m=uy(s);return t?`\n    float ${a}(int row, int col, int depth) {\n      // Explicitly use integer operations as dot() only works on floats.\n      int stride0 = ${s}Shape[1] * ${s}Shape[2];\n      int stride1 = ${s}Shape[2];\n      int index = row * stride0 + col * stride1 + depth + ${m};\n      vec2 uv = uvFromFlat(${s}TexShape[0], ${s}TexShape[1], index);\n      return sampleTexture(${s}, uv);\n    }\n    `:`\n      float ${a}(int row, int col, int depth) {\n        // Explicitly use integer operations as dot() only works on floats.\n        int index = row * ${i} + col * ${o} + depth + ${m};\n        vec2 uv = uvFromFlat(${p}, ${d}, index);\n        return sampleTexture(${s}, uv);\n      }\n  `}(e,t);case 4:return function(e,t){const n=e.shapeInfo.logicalShape,s=e.name,a="get"+s.charAt(0).toUpperCase()+s.slice(1),i=n[3],o=n[2]*i,l=n[1]*o,{newShape:u,keptDims:c}=r.util.squeezeShape(n);if(u.length<n.length){const n=["row","col","depth","depth2"];return`\n      ${sy(dy(e,u),t)}\n      float ${a}(int row, int col, int depth, int depth2) {\n        return ${a}(${fy(n,c)});\n      }\n    `}if(e.shapeInfo.isUniform)return`\n      float ${a}(int row, int col, int depth, int depth2) {\n        int index = round(dot(vec4(row, col, depth, depth2),\n                          vec4(${l}, ${o}, ${i}, 1)));\n        ${cy(e)}\n      }\n    `;const h=e.shapeInfo.flatOffset,p=e.shapeInfo.texShape,d=p[0],f=p[1],m=`int stride2 = ${s}Shape[3];`,g=`int stride1 = ${s}Shape[2] * stride2;`,y=`int stride0 = ${s}Shape[1] * stride1;`;if(f===l&&null==h)return t?`\n      float ${a}(int row, int col, int depth, int depth2) {\n        ${m}\n        ${g}\n        float texR = float(row);\n        float texC =\n            dot(vec3(col, depth, depth2),\n                vec3(stride1, stride2, 1));\n        vec2 uv = (vec2(texC, texR) + halfCR) /\n                   vec2(${s}TexShape[1], ${s}TexShape[0]);\n        return sampleTexture(${s}, uv);\n      }\n    `:`\n      float ${a}(int row, int col, int depth, int depth2) {\n        float texR = float(row);\n        float texC =\n            dot(vec3(col, depth, depth2),\n                vec3(${o}, ${i}, 1));\n        vec2 uv = (vec2(texC, texR) + halfCR) /\n                   vec2(${f}.0, ${d}.0);\n        return sampleTexture(${s}, uv);\n      }\n    `;if(f===i&&null==h)return t?`\n      float ${a}(int row, int col, int depth, int depth2) {\n        float texR = dot(vec3(row, col, depth),\n                         vec3(${s}Shape[1] * ${s}Shape[2], ${s}Shape[2], 1));\n        float texC = float(depth2);\n        vec2 uv = (vec2(texC, texR) + halfCR) /\n                  vec2(${s}TexShape[1], ${s}TexShape[0]);\n        return sampleTexture(${s}, uv);\n      }\n    `:`\n      float ${a}(int row, int col, int depth, int depth2) {\n        float texR = dot(vec3(row, col, depth),\n                         vec3(${n[1]*n[2]}, ${n[2]}, 1));\n        float texC = float(depth2);\n        vec2 uv = (vec2(texC, texR) + halfCR) /\n                  vec2(${f}.0, ${d}.0);\n        return sampleTexture(${s}, uv);\n      }\n    `;const b=uy(s);return t?`\n    float ${a}(int row, int col, int depth, int depth2) {\n      // Explicitly use integer operations as dot() only works on floats.\n      ${m}\n      ${g}\n      ${y}\n      int index = row * stride0 + col * stride1 +\n          depth * stride2 + depth2;\n      vec2 uv = uvFromFlat(${s}TexShape[0], ${s}TexShape[1], index + ${b});\n      return sampleTexture(${s}, uv);\n    }\n  `:`\n    float ${a}(int row, int col, int depth, int depth2) {\n      // Explicitly use integer operations as dot() only works on floats.\n      int index = row * ${l} + col * ${o} +\n          depth * ${i} + depth2;\n      vec2 uv = uvFromFlat(${d}, ${f}, index + ${b});\n      return sampleTexture(${s}, uv);\n    }\n  `}(e,t);case 5:return function(e){const t=e.shapeInfo.logicalShape,n=e.name,s="get"+n.charAt(0).toUpperCase()+n.slice(1),a=t[4],i=t[3]*a,o=t[2]*i,l=t[1]*o,{newShape:u,keptDims:c}=r.util.squeezeShape(t);if(u.length<t.length){const t=["row","col","depth","depth2","depth3"];return`\n      ${sy(dy(e,u))}\n      float ${s}(int row, int col, int depth, int depth2, int depth3) {\n        return ${s}(${fy(t,c)});\n      }\n    `}if(e.shapeInfo.isUniform)return`\n      float ${s}(int row, int col, int depth, int depth2, int depth3) {\n        float index = dot(\n          vec4(row, col, depth, depth2),\n          vec4(${l}, ${o}, ${i}, ${a})) +\n          depth3;\n        ${cy(e)}\n      }\n    `;const h=e.shapeInfo.flatOffset,p=e.shapeInfo.texShape,d=p[0],f=p[1];if(f===l&&null==h)return`\n      float ${s}(int row, int col, int depth, int depth2, int depth3) {\n        int texR = row;\n        float texC = dot(vec4(col, depth, depth2, depth3),\n                         vec4(${o}, ${i}, ${a}, 1));\n        vec2 uv = (vec2(texC, texR) + halfCR) /\n                   vec2(${f}.0, ${d}.0);\n        return sampleTexture(${n}, uv);\n      }\n    `;if(f===a&&null==h)return`\n      float ${s}(int row, int col, int depth, int depth2, int depth3) {\n        float texR = dot(\n          vec4(row, col, depth, depth2),\n          vec4(${t[1]*t[2]*t[3]},\n               ${t[2]*t[3]}, ${t[3]}, 1));\n        int texC = depth3;\n        vec2 uv = (vec2(texC, texR) + halfCR) /\n                  vec2(${f}.0, ${d}.0);\n        return sampleTexture(${n}, uv);\n      }\n    `;return`\n    float ${s}(int row, int col, int depth, int depth2, int depth3) {\n      // Explicitly use integer operations as dot() only works on floats.\n      int index = row * ${l} + col * ${o} + depth * ${i} +\n          depth2 * ${a} + depth3 + ${uy(n)};\n      vec2 uv = uvFromFlat(${d}, ${f}, index);\n      return sampleTexture(${n}, uv);\n    }\n  `}(e);case 6:return function(e){const t=e.shapeInfo.logicalShape,n=e.name,s="get"+n.charAt(0).toUpperCase()+n.slice(1),{newShape:a,keptDims:i}=r.util.squeezeShape(t);if(a.length<t.length){const t=["row","col","depth","depth2","depth3","depth4"];return`\n      ${sy(dy(e,a))}\n      float ${s}(int row, int col, int depth,\n                    int depth2, int depth3, int depth4) {\n        return ${s}(${fy(t,i)});\n      }\n    `}const o=t[5],l=t[4]*o,u=t[3]*l,c=t[2]*u,h=t[1]*c;if(e.shapeInfo.isUniform)return`\n      float ${s}(int row, int col, int depth,\n                  int depth2, int depth3, int depth4) {\n        int index = round(dot(\n          vec4(row, col, depth, depth2),\n          vec4(${h}, ${c}, ${u}, ${l})) +\n          dot(\n            vec2(depth3, depth4),\n            vec2(${o}, 1)));\n        ${cy(e)}\n      }\n    `;const p=e.shapeInfo.flatOffset,d=e.shapeInfo.texShape,f=d[0],m=d[1];if(m===h&&null==p)return`\n      float ${s}(int row, int col, int depth,\n                    int depth2, int depth3, int depth4) {\n        int texR = row;\n        float texC = dot(vec4(col, depth, depth2, depth3),\n          vec4(${c}, ${u}, ${l}, ${o})) +\n               float(depth4);\n        vec2 uv = (vec2(texC, texR) + halfCR) /\n                   vec2(${m}.0, ${f}.0);\n        return sampleTexture(${n}, uv);\n      }\n    `;if(m===o&&null==p)return`\n      float ${s}(int row, int col, int depth,\n                    int depth2, int depth3, int depth4) {\n        float texR = dot(vec4(row, col, depth, depth2),\n          vec4(${t[1]*t[2]*t[3]*t[4]},\n               ${t[2]*t[3]*t[4]},\n               ${t[3]*t[4]},\n               ${t[4]})) + float(depth3);\n        int texC = depth4;\n        vec2 uv = (vec2(texC, texR) + halfCR) /\n                  vec2(${m}.0, ${f}.0);\n        return sampleTexture(${n}, uv);\n      }\n    `;return`\n    float ${s}(int row, int col, int depth,\n                  int depth2, int depth3, int depth4) {\n      // Explicitly use integer operations as dot() only works on floats.\n      int index = row * ${h} + col * ${c} + depth * ${u} +\n          depth2 * ${l} + depth3 * ${o} + depth4 + ${uy(n)};\n      vec2 uv = uvFromFlat(${f}, ${m}, index);\n      return sampleTexture(${n}, uv);\n    }\n  `}(e);default:throw new Error(`${n.length}-D input sampling is not yet supported`)}}function ay(e,t){switch(e.shapeInfo.logicalShape.length){case 0:return function(e){const t=e.name;return`\n    vec4 ${"get"+t.charAt(0).toUpperCase()+t.slice(1)}() {\n      return ${Yg().texture2D}(${t}, halfCR);\n    }\n  `}(e);case 1:return function(e,t){const n=e.name,s="get"+n.charAt(0).toUpperCase()+n.slice(1),a=e.shapeInfo.texShape,r=Yg();if(t)return`\n    vec4 ${s}(int index) {\n      ivec2 packedTexShape = ivec2(ceil(float(${n}TexShape[0]) / 2.0), ceil(float(${n}TexShape[1]) / 2.0));\n      vec2 uv = packedUVfrom1D(\n        packedTexShape[0], packedTexShape[1], index);\n      return ${r.texture2D}(${n}, uv);\n    }\n  `;const i=[Math.ceil(a[0]/2),Math.ceil(a[1]/2)];return`\n    vec4 ${s}(int index) {\n      vec2 uv = packedUVfrom1D(\n        ${i[0]}, ${i[1]}, index);\n      return ${r.texture2D}(${n}, uv);\n    }\n  `}(e,t);case 2:return function(e,t){const n=e.shapeInfo.logicalShape,s=e.name,a="get"+s.charAt(0).toUpperCase()+s.slice(1),i=e.shapeInfo.texShape,o=i[0],l=i[1],u=Yg();if(null!=i&&r.util.arraysEqual(n,i))return t?`\n      vec4 ${a}(int row, int col) {\n        vec2 uv = (vec2(col, row) + halfCR) / vec2(${s}TexShape[1], ${s}TexShape[0]);\n\n        return ${u.texture2D}(${s}, uv);\n      }\n    `:`\n      vec4 ${a}(int row, int col) {\n        vec2 uv = (vec2(col, row) + halfCR) / vec2(${l}.0, ${o}.0);\n\n        return ${u.texture2D}(${s}, uv);\n      }\n    `;if(t)return`\n    vec4 ${a}(int row, int col) {\n      ivec2 packedTexShape = ivec2(ceil(float(${s}TexShape[0]) / 2.0), ceil(float(${s}TexShape[1]) / 2.0));\n      int valuesPerRow = int(ceil(float(${s}Shape[1]) / 2.0));\n      vec2 uv = packedUVfrom2D(valuesPerRow, packedTexShape[0], packedTexShape[1], row, col);\n      return ${u.texture2D}(${s}, uv);\n    }\n  `;const c=[Math.ceil(i[0]/2),Math.ceil(i[1]/2)];return`\n    vec4 ${a}(int row, int col) {\n      vec2 uv = packedUVfrom2D(${Math.ceil(n[1]/2)}, ${c[0]}, ${c[1]}, row, col);\n      return ${u.texture2D}(${s}, uv);\n    }\n  `}(e,t);case 3:return function(e,t){const n=e.shapeInfo.logicalShape,s=e.name,a="get"+s.charAt(0).toUpperCase()+s.slice(1),r=e.shapeInfo.texShape,i=[Math.ceil(r[0]/2),Math.ceil(r[1]/2)];if(1===n[0]){const s=[1,2],r=["b","row","col"];return`\n        ${ay(dy(e,n.slice(1)),t)}\n        vec4 ${a}(int b, int row, int col) {\n          return ${a}(${fy(r,s)});\n        }\n      `}const o=Yg();if(t)return`\n    vec4 ${a}(int b, int row, int col) {\n      ivec2 packedTexShape = ivec2(ceil(float(${s}TexShape[0]) / 2.0), ceil(float(${s}TexShape[1]) / 2.0));\n      int valuesPerRow = int(ceil(float(${s}Shape[2]) / 2.0));\n      int texelsInBatch = valuesPerRow * int(ceil(float(${s}Shape[1]) / 2.0));\n      vec2 uv = packedUVfrom3D(\n        packedTexShape[0], packedTexShape[1], texelsInBatch, valuesPerRow, b, row, col);\n      return ${o.texture2D}(${s}, uv);\n    }\n  `;const l=i[0],u=i[1],c=Math.ceil(n[2]/2);return`\n    vec4 ${a}(int b, int row, int col) {\n      vec2 uv = packedUVfrom3D(\n        ${l}, ${u}, ${c*Math.ceil(n[1]/2)}, ${c}, b, row, col);\n      return ${o.texture2D}(${s}, uv);\n    }\n  `}(e,t);default:return function(e,t){const n=e.name,s="get"+n.charAt(0).toUpperCase()+n.slice(1),a=Yg();if(t)return`\n    vec4 ${s}(int b2, int b, int row, int col) {\n      int valuesPerRow = int(ceil(float(${n}Shape[3]) / 2.0));\n      int texelsInBatch = valuesPerRow * int(ceil(float(${n}Shape[2]) / 2.0));\n      int index = b * texelsInBatch + (row / 2) * valuesPerRow + (col / 2);\n      texelsInBatch *= ${n}Shape[1];\n      index = b2 * texelsInBatch + index;\n      ivec2 packedTexShape = ivec2(ceil(float(${n}TexShape[0]) / 2.0), ceil(float(${n}TexShape[1]) / 2.0));\n      int texR = index / packedTexShape[1];\n      int texC = index - texR * packedTexShape[1];\n      vec2 uv = (vec2(texC, texR) + halfCR) / vec2(packedTexShape[1], packedTexShape[0]); return ${a.texture2D}(${n}, uv);\n    }\n  `;const r=e.shapeInfo.logicalShape,i=r.length,o=e.shapeInfo.texShape,l=[Math.ceil(o[0]/2),Math.ceil(o[1]/2)],u=l[0],c=l[1],h=Math.ceil(r[i-1]/2);let p=h*Math.ceil(r[i-2]/2),d="int b, int row, int col",f=`b * ${p} + (row / 2) * ${h} + (col / 2)`;for(let e=2;e<i-1;e++)d=`int b${e}, `+d,p*=r[i-e-1],f=`b${e} * ${p} + `+f;return`\n    vec4 ${s}(${d}) {\n      int index = ${f};\n      int texR = index / ${c};\n      int texC = index - texR * ${c};\n      vec2 uv = (vec2(texC, texR) + halfCR) / vec2(${c}, ${u});\n      return ${a.texture2D}(${n}, uv);\n    }\n  `}(e,t)}}const ry="\nvec2 uvFromFlat(int texNumR, int texNumC, int index) {\n  int texR = index / texNumC;\n  int texC = index - texR * texNumC;\n  return (vec2(texC, texR) + halfCR) / vec2(texNumC, texNumR);\n}\nvec2 packedUVfrom1D(int texNumR, int texNumC, int index) {\n  int texelIndex = index / 2;\n  int texR = texelIndex / texNumC;\n  int texC = texelIndex - texR * texNumC;\n  return (vec2(texC, texR) + halfCR) / vec2(texNumC, texNumR);\n}\n",iy="\nvec2 packedUVfrom2D(int texelsInLogicalRow, int texNumR,\n  int texNumC, int row, int col) {\n  int texelIndex = (row / 2) * texelsInLogicalRow + (col / 2);\n  int texR = texelIndex / texNumC;\n  int texC = texelIndex - texR * texNumC;\n  return (vec2(texC, texR) + halfCR) / vec2(texNumC, texNumR);\n}\n",oy="\nvec2 packedUVfrom3D(int texNumR, int texNumC,\n    int texelsInBatch, int texelsInLogicalRow, int b,\n    int row, int col) {\n  int index = b * texelsInBatch + (row / 2) * texelsInLogicalRow + (col / 2);\n  int texR = index / texNumC;\n  int texC = index - texR * texNumC;\n  return (vec2(texC, texR) + halfCR) / vec2(texNumC, texNumR);\n}\n",ly="\n  float getChannel(vec4 frag, vec2 innerDims) {\n    vec2 modCoord = mod(innerDims, 2.);\n    return modCoord.x == 0. ?\n      (modCoord.y == 0. ? frag.r : frag.g) :\n      (modCoord.y == 0. ? frag.b : frag.a);\n  }\n  float getChannel(vec4 frag, int dim) {\n    float modCoord = mod(float(dim), 2.);\n    return modCoord == 0. ? frag.r : frag.g;\n  }\n";function uy(e){return`offset${e}`}function cy(e){const t=e.name,n=r.util.sizeFromShape(e.shapeInfo.logicalShape);return n<2?`return ${t};`:`\n    for (int i = 0; i < ${n}; i++) {\n      if (i == index) {\n        return ${t}[i];\n      }\n    }\n  `}function hy(e){if(e<=1)return"int";if(2===e)return"ivec2";if(3===e)return"ivec3";if(4===e)return"ivec4";if(5===e)return"ivec5";if(6===e)return"ivec6";throw Error(`GPU for rank ${e} is not yet supported`)}function py(e,t,n){const{newShape:s,keptDims:a}=r.util.squeezeShape(t),i=t.length,o=e&&3===i&&1===t[0],l=o?t.slice(1):s,u=!e&&i>1&&!r.util.arraysEqual(t,n)&&s.length<i||o;return{useSqueezeShape:u,uniformShape:u?l:t,keptDims:a}}function dy(e,t){const n=JSON.parse(JSON.stringify(e));return n.shapeInfo.logicalShape=t,n}function fy(e,t){return t.map((t=>e[t])).join(", ")}function my(e,t,n){const s={},a={},i={},o=[];let l,u,c,h=null,p=null;p=e.getUniformLocation(n,"NAN",!1),1===(0,r.env)().getNumber("WEBGL_VERSION")&&(h=e.getUniformLocation(n,"INFINITY",!1));const d=!1;for(let r=0;r<t.variableNames.length;r++){const o=t.variableNames[r];s[o]=e.getUniformLocation(n,o,d),s[`offset${o}`]=e.getUniformLocation(n,`offset${o}`,d),t.enableShapeUniforms&&(a[`${o}Shape`]=e.getUniformLocation(n,`${o}Shape`,d),i[`${o}TexShape`]=e.getUniformLocation(n,`${o}TexShape`,d))}return t.enableShapeUniforms&&(l=e.getUniformLocation(n,"outShape",d),c=e.getUniformLocation(n,"outShapeStrides",d),u=e.getUniformLocation(n,"outTexShape",d)),t.customUniforms&&t.customUniforms.forEach(((t,s)=>{o[s]=e.getUniformLocation(n,t.name,d)})),{uniformLocations:s,customUniformLocations:o,infLoc:h,nanLoc:p,inShapesLocations:a,inTexShapesLocations:i,outShapeLocation:l,outShapeStridesLocation:c,outTexShapeLocation:u}}function gy(e,t){if(e.length!==t.length)throw Error(`Binary was compiled with ${e.length} inputs, but was executed with ${t.length} inputs`);e.forEach(((e,n)=>{const s=e.logicalShape,a=t[n],i=a.shape;if(!r.util.arraysEqual(s,i))throw Error(`Binary was compiled with different shapes than the current args. Shapes ${s} and ${i} must match`);if(e.isUniform&&a.isUniform)return;const o=e.texShape,l=a.isUniform?null:a.texData.texShape;if(!r.util.arraysEqual(o,l))throw Error(`Binary was compiled with different texture shapes than the current args. Shape ${o} and ${l} must match`)}))}function yy(e){return(0,r.env)().getBool("WEBGL_USE_SHAPES_UNIFORMS")&&e<=4}class by{constructor(e){this.variableNames=["A"],this.packedInputs=!1,this.packedOutput=!0,this.outPackingScheme=xg.DENSE,this.customUniforms=[{name:"texShape",type:"ivec2"}];const t=Yg();this.outputShape=e,this.enableShapeUniforms=yy(this.outputShape.length),this.userCode=`\n      ivec3 outCoordsFromFlatIndex(int index) {\n        ${this.enableShapeUniforms?Qg(["r","c","d"],e):Zg(["r","c","d"],e)}\n        return ivec3(r, c, d);\n      }\n\n      void main() {\n        ivec2 resTexRC = ivec2(resultUV.yx * vec2(texShape[0], texShape[1]));\n        int index = 4 * (resTexRC.x * texShape[1] + resTexRC.y);\n\n        vec4 result = vec4(0.);\n\n        for (int i=0; i<4; i++) {\n          int flatIndex = index + i;\n          ivec3 rc = outCoordsFromFlatIndex(flatIndex);\n          result[i] = getA(rc.x, rc.y, rc.z);\n        }\n\n        ${t.output} = result;\n      }\n    `}}class xy{constructor(e){this.variableNames=["A"],this.packedInputs=!0,this.packedOutput=!0,this.outPackingScheme=xg.DENSE,this.customUniforms=[{name:"texShape",type:"ivec2"}];const t=Yg();this.outputShape=e,this.enableShapeUniforms=yy(this.outputShape.length),this.userCode=`\n      ivec3 outCoordsFromFlatIndex(int index) {\n        ${this.enableShapeUniforms?Qg(["r","c","d"],e):Zg(["r","c","d"],e)}\n        return ivec3(r, c, d);\n      }\n\n      void main() {\n        ivec2 resTexRC = ivec2(resultUV.yx * vec2(texShape[0], texShape[1]));\n        int index = 4 * (resTexRC.x * texShape[1] + resTexRC.y);\n\n        vec4 result = vec4(0.);\n\n        for (int i=0; i<4; i++) {\n          int flatIndex = index + i;\n          ivec3 rc = outCoordsFromFlatIndex(flatIndex);\n          result[i] = getChannel(getA(rc.x, rc.y, rc.z), vec2(rc.y, rc.z));\n        }\n\n        ${t.output} = result;\n      }\n    `}}class vy{constructor(e){this.variableNames=["A"],this.outTexUsage=vg.DOWNLOAD;const t=Yg();this.outputShape=e,this.userCode=`\n      ${ey}\n\n      void main() {\n        float x = getAAtOutCoords();\n        ${t.output} = encode_float(x);\n      }\n    `}}class wy{constructor(e){this.variableNames=["A"],this.packedInputs=!0,this.packedOutput=!1,this.outTexUsage=vg.DOWNLOAD;const t=Yg();this.outputShape=e,this.userCode=`\n      ${ey}\n\n      void main() {\n        ivec3 coords = getOutputCoords();\n        float x = getChannel(getAAtOutCoords(), vec2(coords.y, coords.z));\n        ${t.output} = encode_float(x);\n      }\n    `}}class ky{constructor(e,t=!1){this.variableNames=["A"],this.customUniforms=[{name:"texShape",type:"ivec2"}];const n=Yg();this.outputShape=e,this.enableShapeUniforms=yy(this.outputShape.length);let s="result";t&&(s="floor(result * 255. + 0.5)"),this.userCode=`\n      ${this.enableShapeUniforms?"\n  int getFlatIndex(ivec3 coords) {\n    return coords.x * outShapeStrides[0] + coords.y * outShapeStrides[1] + coords.z;\n  }\n":Jg(e)}\n\n      void main() {\n        ivec3 coords = getOutputCoords();\n\n        int flatIndex = getFlatIndex(coords);\n        int offset = imod(flatIndex, 4);\n\n        flatIndex = idiv(flatIndex, 4, 1.);\n\n        int r = flatIndex / texShape[1];\n        int c = imod(flatIndex, texShape[1]);\n        vec2 uv = (vec2(c, r) + halfCR) / vec2(texShape[1], texShape[0]);\n        vec4 values = ${n.texture2D}(A, uv);\n\n        float result;\n\n        if(offset == 0) {\n          result = values[0];\n        } else if(offset == 1) {\n          result = values[1];\n        } else if(offset == 2) {\n          result = values[2];\n        } else {\n          result = values[3];\n        }\n\n        ${n.output} = vec4(${s}, 0., 0., 0.);\n      }\n    `}}class Iy{constructor(e,t=!1){this.variableNames=["A"],this.packedInputs=!1,this.packedOutput=!0,this.customUniforms=[{name:"texShape",type:"ivec2"}];const n=Yg();this.outputShape=e,this.enableShapeUniforms=yy(this.outputShape.length);let s="",a="result";t&&(a="floor(result * 255. + 0.5)");for(let t=0;t<=1;t++)for(let a=0;a<=1;a++){const r=2*t+a;s+=`\n          localCoords = coords;\n          if(localCoords[2] + ${a} < ${this.enableShapeUniforms?"outShape[2]":`${e[2]}`}) {\n          localCoords[2] += ${a};\n          if (localCoords[1] + ${t} < ${this.enableShapeUniforms?"outShape[1]":`${e[1]}`}) {\n            localCoords[1] += ${t};\n\n            flatIndex = getFlatIndex(localCoords);\n            offset = imod(flatIndex, 4);\n\n            flatIndex = idiv(flatIndex, 4, 1.);\n\n            int r = flatIndex / texShape[1];\n            int c = imod(flatIndex, texShape[1]);\n            vec2 uv = (vec2(c, r) + halfCR) / vec2(texShape[1], texShape[0]);\n            values = ${n.texture2D}(A, uv);\n\n            if (offset == 0) {\n              result[${r}] = values[0];\n            } else if (offset == 1) {\n              result[${r}] = values[1];\n            } else if (offset == 2) {\n              result[${r}] = values[2];\n            } else {\n              result[${r}] = values[3];\n            }\n          }\n        }\n        `}this.userCode=`\n        ${this.enableShapeUniforms?"\n  int getFlatIndex(ivec3 coords) {\n    return coords.x * outShapeStrides[0] + coords.y * outShapeStrides[1] + coords.z;\n  }\n":Jg(e)}\n\n        void main() {\n          ivec3 coords = getOutputCoords();\n\n          vec4 result = vec4(0.);\n          int flatIndex, r, c, offset;\n          ivec3 localCoords;\n          vec2 uv;\n          vec4 values;\n\n          ${s}\n\n          ${n.output} = ${a};\n        }\n    `}}function Sy(e,t,n,s,a,i){!function(e,t){const n=(0,r.env)().getNumber("WEBGL_MAX_TEXTURE_SIZE");if(e<=0||t<=0)throw new Error(`Requested texture size [${e}x${t}] is invalid.`);if(e>n||t>n)throw new Error(`Requested texture size [${e}x${t}] greater than WebGL maximum on this browser / GPU [${n}x${n}].`)}(t,n);const o=function(e){return zg(e,(()=>e.createTexture()),"Unable to create WebGLTexture.")}(e),l=e.TEXTURE_2D;return Tg(e,(()=>e.bindTexture(l,o))),Tg(e,(()=>e.texParameteri(l,e.TEXTURE_WRAP_S,e.CLAMP_TO_EDGE))),Tg(e,(()=>e.texParameteri(l,e.TEXTURE_WRAP_T,e.CLAMP_TO_EDGE))),Tg(e,(()=>e.texParameteri(l,e.TEXTURE_MIN_FILTER,e.NEAREST))),Tg(e,(()=>e.texParameteri(l,e.TEXTURE_MAG_FILTER,e.NEAREST))),1===(0,r.env)().getNumber("WEBGL_VERSION")?Tg(e,(()=>e.texImage2D(l,0,s,t,n,0,a,i,null))):Tg(e,(()=>e.texStorage2D(l,1,s,t,n))),Tg(e,(()=>e.bindTexture(e.TEXTURE_2D,null))),{texture:o,texShape:[n,t]}}function Ny(e){return e.internalFormatFloat}function Ty(e){return e.internalFormatHalfFloat}function Cy(e){return e.downloadTextureFormat}function $y(e){return e.internalFormatPackedFloat}function Ey(e){return e.internalFormatPackedHalfFloat}class _y{constructor(e){this.outputTexture=null,this.program=null,this.disposed=!1,this.vertexAttrsAreBound=!1,this.itemsToPoll=[];const t=(0,r.env)().getNumber("WEBGL_VERSION");null!=e?(this.gl=e,function(e,t){gg[e]=t}(t,e)):this.gl=bg(t);let n="WEBGL_color_buffer_float";const s="EXT_color_buffer_half_float";if(this.parallelCompilationExtension=this.gl.getExtension("KHR_parallel_shader_compile"),1===(0,r.env)().getNumber("WEBGL_VERSION")){const e="OES_texture_float",t="OES_texture_half_float";if(this.textureFloatExtension=$g(this.gl,e),Hg(this.gl,t))this.textureHalfFloatExtension=$g(this.gl,t);else if((0,r.env)().get("WEBGL_FORCE_F16_TEXTURES"))throw new Error("GL context does not support half float textures, yet the environment flag WEBGL_FORCE_F16_TEXTURES is set to true.");if(this.colorBufferFloatExtension=this.gl.getExtension(n),Hg(this.gl,s))this.colorBufferHalfFloatExtension=$g(this.gl,s);else if((0,r.env)().get("WEBGL_FORCE_F16_TEXTURES"))throw new Error("GL context does not support color renderable half floats, yet the environment flag WEBGL_FORCE_F16_TEXTURES is set to true.")}else if(n="EXT_color_buffer_float",Hg(this.gl,n))this.colorBufferFloatExtension=this.gl.getExtension(n);else{if(!Hg(this.gl,s))throw new Error("GL context does not support color renderable floats");this.colorBufferHalfFloatExtension=this.gl.getExtension(s)}this.vertexBuffer=function(e){return function(e,t){const n=zg(e,(()=>e.createBuffer()),"Unable to create WebGLBuffer");return Tg(e,(()=>e.bindBuffer(e.ARRAY_BUFFER,n))),Tg(e,(()=>e.bufferData(e.ARRAY_BUFFER,t,e.STATIC_DRAW))),n}(e,new Float32Array([-1,1,0,0,1,-1,-1,0,0,0,1,1,0,1,1,1,-1,0,1,0]))}(this.gl),this.indexBuffer=function(e){return function(e,t){const n=zg(e,(()=>e.createBuffer()),"Unable to create WebGLBuffer");return Tg(e,(()=>e.bindBuffer(e.ELEMENT_ARRAY_BUFFER,n))),Tg(e,(()=>e.bufferData(e.ELEMENT_ARRAY_BUFFER,t,e.STATIC_DRAW))),n}(e,new Uint16Array([0,1,2,2,1,3]))}(this.gl),this.framebuffer=function(e){return zg(e,(()=>e.createFramebuffer()),"Unable to create WebGLFramebuffer.")}(this.gl),this.textureConfig=Ng(this.gl,this.textureHalfFloatExtension)}get debug(){return(0,r.env)().getBool("DEBUG")}dispose(){if(this.disposed)return;null!=this.program&&console.warn("Disposing a GPGPUContext that still has a bound WebGLProgram. This is probably a resource leak, delete the program with GPGPUContext.deleteProgram before disposing."),null!=this.outputTexture&&console.warn("Disposing a GPGPUContext that still has a bound output matrix texture.  This is probably a resource leak, delete the output matrix texture with GPGPUContext.deleteMatrixTexture before disposing.");const e=this.gl;Tg(e,(()=>e.finish())),Tg(e,(()=>e.bindFramebuffer(e.FRAMEBUFFER,null))),Tg(e,(()=>e.deleteFramebuffer(this.framebuffer))),Tg(e,(()=>e.bindBuffer(e.ARRAY_BUFFER,null))),Tg(e,(()=>e.bindBuffer(e.ELEMENT_ARRAY_BUFFER,null))),Tg(e,(()=>e.deleteBuffer(this.indexBuffer))),this.disposed=!0}createFloat32MatrixTexture(e,t){return this.throwIfDisposed(),function(e,t,n,s){const[a,r]=kg(t,n);return Sy(e,a,r,Ny(s),s.textureFormatFloat,e.FLOAT)}(this.gl,e,t,this.textureConfig)}createFloat16MatrixTexture(e,t){return this.throwIfDisposed(),function(e,t,n,s){const[a,r]=kg(t,n);return Sy(e,a,r,Ty(s),s.textureFormatFloat,s.textureTypeHalfFloat)}(this.gl,e,t,this.textureConfig)}createUnsignedBytesMatrixTexture(e,t){return this.throwIfDisposed(),function(e,t,n,s){const[a,r]=kg(t,n);return Sy(e,a,r,Cy(s),e.RGBA,e.UNSIGNED_BYTE)}(this.gl,e,t,this.textureConfig)}uploadPixelDataToTexture(e,t){this.throwIfDisposed(),function(e,t,n){Tg(e,(()=>e.bindTexture(e.TEXTURE_2D,t))),n.data instanceof Uint8Array?2===(0,r.env)().getNumber("WEBGL_VERSION")?Tg(e,(()=>e.texSubImage2D(e.TEXTURE_2D,0,0,0,n.width,n.height,e.RGBA,e.UNSIGNED_BYTE,n.data))):Tg(e,(()=>e.texImage2D(e.TEXTURE_2D,0,e.RGBA,n.width,n.height,0,e.RGBA,e.UNSIGNED_BYTE,n.data))):2===(0,r.env)().getNumber("WEBGL_VERSION")?Tg(e,(()=>e.texSubImage2D(e.TEXTURE_2D,0,0,0,e.RGBA,e.UNSIGNED_BYTE,n))):Tg(e,(()=>e.texImage2D(e.TEXTURE_2D,0,e.RGBA,e.RGBA,e.UNSIGNED_BYTE,n))),Tg(e,(()=>e.bindTexture(e.TEXTURE_2D,null)))}(this.gl,e,t)}uploadDenseMatrixToTexture(e,t,n,s){this.throwIfDisposed(),function(e,t,n,s,a,i){let o,l,u;Tg(e,(()=>e.bindTexture(e.TEXTURE_2D,t))),a instanceof Uint8Array?(o=new Uint8Array(n*s*4),l=e.UNSIGNED_BYTE,u=e.RGBA):(o=new Float32Array(n*s*4),l=e.FLOAT,u=i.internalFormatPackedFloat),o.set(a),2===(0,r.env)().getNumber("WEBGL_VERSION")?Tg(e,(()=>e.texSubImage2D(e.TEXTURE_2D,0,0,0,n,s,e.RGBA,l,o))):Tg(e,(()=>e.texImage2D(e.TEXTURE_2D,0,u,n,s,0,e.RGBA,l,o))),Tg(e,(()=>e.bindTexture(e.TEXTURE_2D,null)))}(this.gl,e,t,n,s,this.textureConfig)}createFloat16PackedMatrixTexture(e,t){return this.throwIfDisposed(),function(e,t,n,s){const[a,r]=Sg(t,n);return Sy(e,a,r,Ey(s),e.RGBA,s.textureTypeHalfFloat)}(this.gl,e,t,this.textureConfig)}createPackedMatrixTexture(e,t){return this.throwIfDisposed(),function(e,t,n,s){const[a,r]=Sg(t,n);return Sy(e,a,r,$y(s),e.RGBA,e.FLOAT)}(this.gl,e,t,this.textureConfig)}deleteMatrixTexture(e){this.throwIfDisposed(),this.outputTexture===e&&(Og(this.gl,this.framebuffer),this.outputTexture=null),Tg(this.gl,(()=>this.gl.deleteTexture(e)))}downloadByteEncodedFloatMatrixFromOutputTexture(e,t,n){return this.downloadMatrixDriver(e,(()=>function(e,t,n,s){const[a,r]=kg(t,n),i=new Uint8Array(t*n*4);return Tg(e,(()=>e.readPixels(0,0,a,r,s.downloadTextureFormat,e.UNSIGNED_BYTE,i))),new Float32Array(i.buffer)}(this.gl,t,n,this.textureConfig)))}downloadPackedMatrixFromBuffer(e,t,n,s,a,r){return function(e,t,n,s,a,r,i,o){const l=e,u=new Float32Array(function(e,t){const[n,s]=Sg(e,t);return n*s*4}(r,i));return l.bindBuffer(l.PIXEL_PACK_BUFFER,t),l.getBufferSubData(l.PIXEL_PACK_BUFFER,0,u),l.bindBuffer(l.PIXEL_PACK_BUFFER,null),u}(this.gl,e,0,0,0,a,r,this.textureConfig)}downloadFloat32MatrixFromBuffer(e,t){return function(e,t,n){const s=e,a=new Float32Array(n);return s.bindBuffer(s.PIXEL_PACK_BUFFER,t),s.getBufferSubData(s.PIXEL_PACK_BUFFER,0,a),s.bindBuffer(s.PIXEL_PACK_BUFFER,null),a}(this.gl,e,t)}createBufferFromTexture(e,t,n){this.bindTextureToFrameBuffer(e);const s=function(e,t,n,s){const a=e.createBuffer();Tg(e,(()=>e.bindBuffer(e.PIXEL_PACK_BUFFER,a)));const r=16*t*n;return Tg(e,(()=>e.bufferData(e.PIXEL_PACK_BUFFER,r,e.STREAM_READ))),Tg(e,(()=>e.readPixels(0,0,n,t,e.RGBA,e.FLOAT,0))),Tg(e,(()=>e.bindBuffer(e.PIXEL_PACK_BUFFER,null))),a}(this.gl,t,n,this.textureConfig);return this.unbindTextureToFrameBuffer(),s}createAndWaitForFence(){const e=this.createFence(this.gl);return this.pollFence(e)}createFence(e){let t,n;if((0,r.env)().getBool("WEBGL_FENCE_API_ENABLED")){const s=e,a=s.fenceSync(s.SYNC_GPU_COMMANDS_COMPLETE,0);e.flush(),n=()=>{const e=s.clientWaitSync(a,0,0);return e===s.ALREADY_SIGNALED||e===s.CONDITION_SATISFIED},t=a}else(0,r.env)().getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION")>0?(t=this.beginQuery(),this.endQuery(),n=()=>this.isQueryAvailable(t,(0,r.env)().getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION"))):n=()=>!0;return{query:t,isFencePassed:n}}downloadMatrixFromPackedTexture(e,t,n){return this.downloadMatrixDriver(e,(()=>function(e,t,n){const s=new Float32Array(t*n*4);return Tg(e,(()=>e.readPixels(0,0,n,t,e.RGBA,e.FLOAT,s))),s}(this.gl,t,n)))}createProgram(e){this.throwIfDisposed();const t=this.gl;null==this.vertexShader&&(this.vertexShader=function(e){const t=Yg();return function(e,t){const n=zg(e,(()=>e.createShader(e.VERTEX_SHADER)),"Unable to create vertex WebGLShader.");if(Tg(e,(()=>e.shaderSource(n,t))),Tg(e,(()=>e.compileShader(n))),!1===e.getShaderParameter(n,e.COMPILE_STATUS))throw console.log(e.getShaderInfoLog(n)),new Error("Failed to compile vertex shader.");return n}(e,`${t.version}\n    precision highp float;\n    ${t.attribute} vec3 clipSpacePos;\n    ${t.attribute} vec2 uv;\n    ${t.varyingVs} vec2 resultUV;\n\n    void main() {\n      gl_Position = vec4(clipSpacePos, 1);\n      resultUV = uv;\n    }`)}(t));const n=function(e){return zg(e,(()=>e.createProgram()),"Unable to create WebGLProgram.")}(t);return Tg(t,(()=>t.attachShader(n,this.vertexShader))),Tg(t,(()=>t.attachShader(n,e))),function(e,t){if(Tg(e,(()=>e.linkProgram(t))),!(0,r.env)().get("ENGINE_COMPILE_ONLY")&&!1===e.getProgramParameter(t,e.LINK_STATUS))throw console.log(e.getProgramInfoLog(t)),new Error("Failed to link vertex and fragment shaders.")}(t,n),this.debug&&Ag(t,n),this.vertexAttrsAreBound||(this.setProgram(n),this.vertexAttrsAreBound=function(e,t,n){return Tg(e,(()=>e.bindBuffer(e.ARRAY_BUFFER,n))),Rg(e,t,"clipSpacePos",n,3,20,0)&&Rg(e,t,"uv",n,2,20,12)}(t,this.program,this.vertexBuffer)),n}deleteProgram(e){this.throwIfDisposed(),e===this.program&&(this.program=null),null!=e&&Tg(this.gl,(()=>this.gl.deleteProgram(e)))}setProgram(e){this.throwIfDisposed(),this.program=e,null!=this.program&&this.debug&&Ag(this.gl,this.program),Tg(this.gl,(()=>this.gl.useProgram(e)))}getUniformLocation(e,t,n=!0){return this.throwIfDisposed(),n?function(e,t,n){return zg(e,(()=>e.getUniformLocation(t,n)),'uniform "'+n+'" not present in program.')}(this.gl,e,t):function(e,t,n){return e.getUniformLocation(t,n)}(this.gl,e,t)}getAttributeLocation(e,t){return this.throwIfDisposed(),Tg(this.gl,(()=>this.gl.getAttribLocation(e,t)))}getUniformLocationNoThrow(e,t){return this.throwIfDisposed(),this.gl.getUniformLocation(e,t)}setInputMatrixTexture(e,t,n){this.throwIfDisposed(),this.throwIfNoProgram(),Fg(this.gl,e,t,n)}setOutputMatrixTexture(e,t,n){this.setOutputMatrixTextureDriver(e,n,t)}setOutputPackedMatrixTexture(e,t,n){this.throwIfDisposed();const[s,a]=Sg(t,n);this.setOutputMatrixTextureDriver(e,s,a)}setOutputMatrixWriteRegion(e,t,n,s){this.setOutputMatrixWriteRegionDriver(n,e,s,t)}setOutputPackedMatrixWriteRegion(e,t,n,s){throw new Error("setOutputPackedMatrixWriteRegion not implemented.")}debugValidate(){null!=this.program&&Ag(this.gl,this.program),Mg(this.gl)}executeProgram(){this.throwIfDisposed(),this.throwIfNoProgram();const e=this.gl;this.debug&&this.debugValidate(),Tg(e,(()=>e.drawElements(e.TRIANGLES,6,e.UNSIGNED_SHORT,0)))}blockUntilAllProgramsCompleted(){this.throwIfDisposed(),Tg(this.gl,(()=>this.gl.finish()))}getQueryTimerExtension(){return null==this.disjointQueryTimerExtension&&(this.disjointQueryTimerExtension=$g(this.gl,2===(0,r.env)().getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION")?"EXT_disjoint_timer_query_webgl2":"EXT_disjoint_timer_query")),this.disjointQueryTimerExtension}getQueryTimerExtensionWebGL2(){return this.getQueryTimerExtension()}getQueryTimerExtensionWebGL1(){return this.getQueryTimerExtension()}beginQuery(){if(2===(0,r.env)().getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION")){const e=this.gl,t=this.getQueryTimerExtensionWebGL2(),n=e.createQuery();return e.beginQuery(t.TIME_ELAPSED_EXT,n),n}const e=this.getQueryTimerExtensionWebGL1(),t=e.createQueryEXT();return e.beginQueryEXT(e.TIME_ELAPSED_EXT,t),t}endQuery(){if(2===(0,r.env)().getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION")){const e=this.gl,t=this.getQueryTimerExtensionWebGL2();return void e.endQuery(t.TIME_ELAPSED_EXT)}const e=this.getQueryTimerExtensionWebGL1();e.endQueryEXT(e.TIME_ELAPSED_EXT)}async waitForQueryAndGetTime(e){return await r.util.repeatedTry((()=>this.disposed||this.isQueryAvailable(e,(0,r.env)().getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION")))),this.getQueryTime(e,(0,r.env)().getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION"))}getQueryTime(e,t){if(0===t)return null;if(2===t){const t=this.gl;return t.getQueryParameter(e,t.QUERY_RESULT)/1e6}{const t=this.getQueryTimerExtensionWebGL1();return t.getQueryObjectEXT(e,t.QUERY_RESULT_EXT)/1e6}}isQueryAvailable(e,t){if(0===t)return!0;if(2===t){const t=this.gl,n=this.getQueryTimerExtensionWebGL2(),s=t.getQueryParameter(e,t.QUERY_RESULT_AVAILABLE);return null==this.disjoint&&(this.disjoint=this.gl.getParameter(n.GPU_DISJOINT_EXT)),s&&!this.disjoint}{const t=this.getQueryTimerExtensionWebGL1(),n=t.getQueryObjectEXT(e,t.QUERY_RESULT_AVAILABLE_EXT);return null==this.disjoint&&(this.disjoint=this.gl.getParameter(t.GPU_DISJOINT_EXT)),n&&!this.disjoint}}pollFence(e){return new Promise((t=>{this.addItemToPoll((()=>e.isFencePassed()),(()=>t()))}))}pollItems(){const e=function(e){let t=0;for(;t<e.length&&e[t]();++t);return t-1}(this.itemsToPoll.map((e=>e.isDoneFn)));for(let t=0;t<=e;++t){const{resolveFn:e}=this.itemsToPoll[t];e()}this.itemsToPoll=this.itemsToPoll.slice(e+1)}addItemToPoll(e,t){if(this.itemsToPoll.push({isDoneFn:e,resolveFn:t}),this.itemsToPoll.length>1)return;let n;"setTimeoutCustom"in(0,r.env)().platform&&(n=(0,r.env)().platform.setTimeoutCustom.bind((0,r.env)().platform)),r.util.repeatedTry((()=>(this.pollItems(),0===this.itemsToPoll.length)),(()=>0),null,n)}bindTextureToFrameBuffer(e){this.throwIfDisposed(),Dg(this.gl,e,this.framebuffer),this.debug&&Mg(this.gl)}unbindTextureToFrameBuffer(){null!=this.outputTexture?(Dg(this.gl,this.outputTexture,this.framebuffer),this.debug&&Mg(this.gl)):Og(this.gl,this.framebuffer)}downloadMatrixDriver(e,t){this.bindTextureToFrameBuffer(e);const n=t();return this.unbindTextureToFrameBuffer(),n}setOutputMatrixTextureDriver(e,t,n){this.throwIfDisposed();const s=this.gl;Dg(s,e,this.framebuffer),this.debug&&Mg(s),this.outputTexture=e,Tg(s,(()=>s.viewport(0,0,t,n))),Tg(s,(()=>s.scissor(0,0,t,n)))}setOutputMatrixWriteRegionDriver(e,t,n,s){this.throwIfDisposed(),Tg(this.gl,(()=>this.gl.scissor(e,t,n,s)))}throwIfDisposed(){if(this.disposed)throw new Error("Attempted to use disposed GPGPUContext.")}throwIfNoProgram(){if(null==this.program)throw new Error("No GPU program is currently set.")}}const{addImpl:Ay,bincountImpl:Ry,bincountReduceImpl:Fy,castImpl:Dy,ceilImpl:Oy,concatImpl:My,equalImpl:zy,expImpl:Ly,expm1Impl:By,floorImpl:Py,gatherNdImpl:Vy,gatherV2Impl:Wy,greaterImpl:Uy,greaterEqualImpl:Gy,lessImpl:Hy,lessEqualImpl:qy,linSpaceImpl:Xy,logImpl:jy,maxImpl:Ky,maximumImpl:Yy,minimumImpl:Zy,multiplyImpl:Qy,negImpl:Jy,notEqualImpl:eb,prodImpl:tb,raggedGatherImpl:nb,raggedTensorToTensorImpl:sb,rangeImpl:ab,rsqrtImpl:rb,scatterImpl:ib,sigmoidImpl:ob,simpleAbsImpl:lb,sliceImpl:ub,sparseFillEmptyRowsImpl:cb,sparseReshapeImpl:hb,sparseSegmentReductionImpl:pb,sqrtImpl:db,stridedSliceImpl:fb,stringNGramsImpl:mb,stringSplitImpl:gb,stringToHashBucketFastImpl:yb,subImpl:bb,tileImpl:xb,topKImpl:vb,transposeImpl:wb,uniqueImpl:kb}=a;function Ib(e,t){return["x","y","z","w","u","v"].slice(0,t).map((t=>`${e}.${t}`))}function Sb(e,t){return 1===t?[e]:Ib(e,t)}class Nb{constructor(e){if(this.variableNames=["A"],this.packedInputs=!1,this.packedOutput=!0,this.outputShape=e,this.rank=e.length,this.enableShapeUniforms=yy(this.outputShape.length),0===this.rank)this.userCode="\n        void main() {\n          setOutput(vec4(getA(), 0., 0., 0.));\n        }\n      ";else{const e=Sb("rc",this.rank),t=hy(this.rank),n=this.getOutOfBoundsCondition(e),s=this.getSetup(e),a=this.getOutput(e);this.userCode=`\n        void main() {\n          ${t} rc = getOutputCoords();\n\n          if(${n}) {\n            setOutput(vec4(0));\n          } else {\n            ${s}\n\n            setOutput(vec4(${a}));\n          }\n        }\n      `}}getSourceCoordsArr(e){const t=[];for(let n=0;n<=1;n++)for(let s=0;s<=1;s++){let a=`${0===n?"r":"rp1"}, ${0===s?"c":"cp1"}`;for(let t=2;t<this.rank;t++)a=`${e[e.length-1-t]},`+a;t.push(a)}return t}getOutOfBoundsCondition(e){if(1===this.rank)return`rc > ${this.enableShapeUniforms?"outShape":this.outputShape[0]}`;let t="";for(let n=this.rank-2;n<this.rank;n++)t+=`${e[n]} >= ${this.enableShapeUniforms?`outShape[${n}]`:this.outputShape[n]}`,n<this.rank-1&&(t+="||");return t}getSetup(e){if(1===this.rank)return"";const t=e.slice(-2),n=this.enableShapeUniforms?`outShape[${this.rank} - 1]`:this.outputShape[this.rank-1],s=this.enableShapeUniforms?`outShape[${this.rank} - 2]`:this.outputShape[this.rank-2];return`\n      int r = ${t[0]};\n      int c = ${t[1]};\n      int rp1 = r + 1;\n      int cp1 = c + 1;\n\n      bool cEdge = cp1 >= ${n};\n      bool rEdge = rp1 >= ${s};\n    `}getOutput(e){const t=this.getSourceCoordsArr(e);return 1===this.rank?`getA(rc), (rc + 1 >= ${this.enableShapeUniforms?"outShape":this.outputShape[0]} ? 0. : getA(rc + 1)), 0, 0`:`getA(${t[0]}),\n            cEdge ? 0. : getA(${t[1]}),\n            rEdge ? 0. : getA(${t[2]}),\n            rEdge || cEdge ? 0. : getA(${t[3]})`}}class Tb{constructor(e,t){this.variableNames=["A"],this.packedInputs=!0,this.packedOutput=!0,this.customUniforms=[{name:"inputShape",type:"ivec3"}],this.outputShape=e,this.enableShapeUniforms=yy(this.outputShape.length);let n="";for(let e=0;e<4;e++){let t="thisRC = rc;";e%2==1&&(t+="thisRC.z += 1;"),e>1&&(t+="thisRC.y += 1;"),n+=`\n        ${t}\n        ${e>0?"if(thisRC.y < rows && thisRC.z < cols){":""}\n          int flatIndex = getFlatIndex(thisRC);\n\n          ivec3 inputRC = inputCoordsFromReshapedOutCoords(flatIndex);\n          vec2 inputRCInnerDims = vec2(float(inputRC.y),float(inputRC.z));\n\n          result[${e}] =\n            getChannel(getA(inputRC.x, inputRC.y, inputRC.z), inputRCInnerDims);\n        ${e>0?"}":""}\n      `}var s,a;this.userCode=`\n      ${s=t,a=this.enableShapeUniforms,`\n    ivec3 inputCoordsFromReshapedOutCoords(int index) {\n      ${a?function(e,t,n="index"){const s=function(e,t){const n=e.length,s=e.map((e=>`${t}[${e}]`)),a=new Array(n-1);a[n-2]=s[n-1];for(let e=n-3;e>=0;--e)a[e]=`(${a[e+1]} * ${s[e+1]})`;return a}(e.map(((e,t)=>t)),t);return s.map(((t,a)=>`int ${e[a]} = ${n} / ${s[a]}; ${a===s.length-1?`int ${e[a+1]} = ${n} - ${e[a]} * ${s[a]}`:`index -= ${e[a]} * ${s[a]}`};`)).join("")}(["r","c","d"],"inputShape"):Zg(["r","c","d"],s)}\n      return ivec3(r, c, d);\n    }\n  `}\n      ${this.enableShapeUniforms?"\n  int getFlatIndex(ivec3 coords) {\n    return coords.x * outShapeStrides[0] + coords.y * outShapeStrides[1] + coords.z;\n  }\n":Jg(e)}\n\n      void main() {\n        ivec3 rc = getOutputCoords();\n\n        vec4 result = vec4(0.);\n\n        ivec3 thisRC;\n        int rows = ${this.enableShapeUniforms?"outShape[1]":e[1]};\n        int cols = ${this.enableShapeUniforms?"outShape[2]":e[2]};\n\n        ${n}\n\n        setOutput(result);\n      }\n    `}}class Cb{constructor(e){this.gpgpu=e,this.numUsedTextures=0,this.numFreeTextures=0,this._numBytesAllocated=0,this._numBytesFree=0,this.freeTextures={},this.logEnabled=!1,this.usedTextures={}}acquireTexture(e,t,n){const s=Eb(t,n),a=_b(e,s,n);a in this.freeTextures||(this.freeTextures[a]=[]),a in this.usedTextures||(this.usedTextures[a]=[]);const r=$b(e,s,this.gpgpu.gl,this.gpgpu.textureConfig,n);if(this.freeTextures[a].length>0){this.numFreeTextures--,this.numUsedTextures++,this._numBytesFree-=r,this.log();const e=this.freeTextures[a].shift();return this.usedTextures[a].push(e),e}let i;return s===wg.PACKED_2X2_FLOAT32?i=this.gpgpu.createPackedMatrixTexture(e[0],e[1]):s===wg.PACKED_2X2_FLOAT16?i=this.gpgpu.createFloat16PackedMatrixTexture(e[0],e[1]):s===wg.UNPACKED_FLOAT32?i=this.gpgpu.createFloat32MatrixTexture(e[0],e[1]):s===wg.UNPACKED_FLOAT16?i=this.gpgpu.createFloat16MatrixTexture(e[0],e[1]):s===wg.PACKED_4X1_UNSIGNED_BYTE&&(i=this.gpgpu.createUnsignedBytesMatrixTexture(e[0],e[1])),this.usedTextures[a].push(i),this.numUsedTextures++,this._numBytesAllocated+=r,this.log(),i}releaseTexture(e,t,n,s){if(null==this.freeTextures)return;const a=Eb(n,s),i=_b(t,a,s);i in this.freeTextures||(this.freeTextures[i]=[]);const o=$b(t,a,this.gpgpu.gl,this.gpgpu.textureConfig,s),l=(0,r.env)().get("WEBGL_DELETE_TEXTURE_THRESHOLD");-1!==l&&this._numBytesAllocated>l?(this.gpgpu.deleteMatrixTexture(e.texture),this._numBytesAllocated-=o):(this.freeTextures[i].push(e),this.numFreeTextures++,this._numBytesFree+=o),this.numUsedTextures--;const u=this.usedTextures[i],c=u.indexOf(e);if(c<0)throw new Error("Cannot release a texture that was never provided by this texture manager");u.splice(c,1),this.log()}log(){if(!this.logEnabled)return;const e=this.numFreeTextures+this.numUsedTextures;console.log("Free/Used",`${this.numFreeTextures} / ${this.numUsedTextures}`,`(${e})`);const t=this._numBytesFree/this._numBytesAllocated;console.log(`Bytes allocated: ${this._numBytesAllocated}`),console.log(`Bytes unused: ${this._numBytesFree} (${Math.round(100*t)}%)`)}get numBytesAllocated(){return this._numBytesAllocated}get numBytesFree(){return this._numBytesFree}getNumUsedTextures(){return this.numUsedTextures}getNumFreeTextures(){return this.numFreeTextures}dispose(){if(null!=this.freeTextures){for(const e in this.freeTextures)this.freeTextures[e].forEach((e=>{this.gpgpu.deleteMatrixTexture(e.texture)}));for(const e in this.usedTextures)this.usedTextures[e].forEach((e=>{this.gpgpu.deleteMatrixTexture(e.texture)}));this.freeTextures=null,this.usedTextures=null,this.numUsedTextures=0,this.numFreeTextures=0,this._numBytesAllocated=0,this._numBytesFree=0}}}function $b(e,t,n,s,a){const r=function(e,t){switch(e){case wg.PACKED_2X2_FLOAT32:return $y(t);case wg.PACKED_2X2_FLOAT16:return Ey(t);case wg.UNPACKED_FLOAT32:return Ny(t);case wg.UNPACKED_FLOAT16:return Ty(t);case wg.PACKED_4X1_UNSIGNED_BYTE:return Cy(t);default:throw new Error(`Unknown physical texture type ${e}`)}}(t,s);let i;if(a){const[t,n]=Sg(e[0],e[1]);i=t*n}else{const[t,n]=kg(e[0],e[1]);i=t*n}const o=function(e,t){const n=e;if(t===n.R32F)return 4;if(t===n.R16F)return 2;if(t===n.RGBA32F)return 16;if(t===e.RGBA)return 16;if(t===n.RGBA16F)return 8;if(t===n.RGBA8)return 4;throw new Error(`Unknown internal format ${t}`)}(n,r);return i*o}function Eb(e,t){if(e===vg.UPLOAD)return wg.PACKED_2X2_FLOAT32;if(e===vg.RENDER||null==e)return function(e){return(0,r.env)().getBool("WEBGL_RENDER_FLOAT32_ENABLED")?e?wg.PACKED_2X2_FLOAT32:wg.UNPACKED_FLOAT32:e?wg.PACKED_2X2_FLOAT16:wg.UNPACKED_FLOAT16}(t);if(e===vg.DOWNLOAD||e===vg.PIXELS)return wg.PACKED_4X1_UNSIGNED_BYTE;throw new Error(`Unknown logical texture type ${e}`)}function _b(e,t,n){return`${e[0]}_${e[1]}_${t}_${n}`}class Ab{constructor(e,t){this.variableNames=["A"],this.outputShape=e,this.enableShapeUniforms=yy(this.outputShape.length),this.userCode=`\n      float unaryOperation(float x) {\n        ${t}\n      }\n\n      void main() {\n        float x = getAAtOutCoords();\n        float y = unaryOperation(x);\n\n        setOutput(y);\n      }\n    `}}const Rb="return abs(x);",Fb="return x;";class Db{constructor(e,t){this.variableNames=["A"],this.packedInputs=!0,this.packedOutput=!0,this.outputShape=e,this.enableShapeUniforms=yy(this.outputShape.length),this.userCode=`\n      vec4 unaryOperation(vec4 x) {\n        ${t}\n      }\n\n      void main() {\n        vec4 x = getAAtOutCoords();\n        vec4 y = unaryOperation(x);\n\n        setOutput(y);\n      }\n    `}}class Ob{constructor(e){this.variableNames=["A"],this.packedInputs=!0,this.packedOutput=!1,this.outputShape=e,this.enableShapeUniforms=yy(this.outputShape.length);const t=e.length,n=Sb("rc",t),s=hy(t),a=function(e,t){if(1===e)return"rc";let n="";for(let s=0;s<e;s++)n+=t[s],s<e-1&&(n+=",");return n}(t,n),r=n.slice(-2),i=t<=1?"rc":`vec2(${r.join(",")})`;this.userCode=`\n      void main() {\n        ${s} rc = getOutputCoords();\n        vec4 packedInput = getA(${a});\n\n        setOutput(getChannel(packedInput, ${i}));\n      }\n    `}}const Mb=r.kernel_impls.whereImpl,zb={},Lb=(0,r.env)().getNumber("CPU_HANDOFF_SIZE_THRESHOLD");class Bb extends r.KernelBackend{constructor(e){if(super(),this.pendingRead=new WeakMap,this.pendingDisposal=new WeakSet,this.dataRefCount=new WeakMap,this.numBytesInGPU=0,this.uploadWaitMs=0,this.downloadWaitMs=0,this.lastGlFlushTime=0,this.warnedAboutMemory=!1,this.pendingDeletes=0,this.disposed=!1,!(0,r.env)().getBool("HAS_WEBGL"))throw new Error("WebGL is not supported on this device");let t;if(null!=e){if(e instanceof _y)t=e;else{const n=bg((0,r.env)().getNumber("WEBGL_VERSION"),e);t=new _y(n)}this.binaryCache={},this.gpgpuCreatedLocally=!1}else{const e=bg((0,r.env)().getNumber("WEBGL_VERSION"));t=new _y(e),this.binaryCache=((n=(0,r.env)().getNumber("WEBGL_VERSION"))in zb||(zb[n]={}),zb[n]),this.gpgpuCreatedLocally=!0}var n;this.gpgpu=t,this.canvas=this.gpgpu.gl.canvas,this.textureManager=new Cb(this.gpgpu),this.numMBBeforeWarning=null==(0,r.env)().global.screen?1024:(0,r.env)().global.screen.height*(0,r.env)().global.screen.width*window.devicePixelRatio*600/1024/1024,this.texData=new r.DataStorage(this,(0,r.engine)())}nextDataId(){return Bb.nextDataId++}numDataIds(){return this.texData.numDataIds()-this.pendingDeletes}write(e,t,n){if(((0,r.env)().getBool("WEBGL_CHECK_NUMERICAL_PROBLEMS")||(0,r.env)().getBool("DEBUG"))&&this.checkNumericalProblems(e),"complex64"===n&&null!=e)throw new Error("Cannot write to a complex64 dtype. Please use tf.complex(real, imag).");const s={id:this.nextDataId()};return this.texData.set(s,{shape:t,dtype:n,values:e,usage:vg.UPLOAD,refCount:1}),s}refCount(e){return this.texData.has(e)?this.texData.get(e).refCount:0}incRef(e){this.texData.get(e).refCount++}decRef(e){this.texData.has(e)&&this.texData.get(e).refCount--}move(e,t,n,s,a){if((0,r.env)().getBool("DEBUG")&&this.checkNumericalProblems(t),"complex64"===s)throw new Error("Cannot write to a complex64 dtype. Please use tf.complex(real, imag).");this.texData.set(e,{shape:n,dtype:s,values:t,usage:vg.UPLOAD,refCount:a})}disposeIntermediateTensorInfo(e){this.disposeData(e.dataId)}readSync(e){const t=this.texData.get(e),{values:n,dtype:s,complexTensorInfos:a,slice:i,shape:o,isPacked:l}=t;if(null!=i){let t;t=l?new Db(o,Fb):new Ab(o,Fb);const n=this.runWebGLProgram(t,[{dataId:e,shape:o,dtype:s}],s),a=this.readSync(n.dataId);return this.disposeIntermediateTensorInfo(n),a}if(null!=n)return this.convertAndCacheOnCPU(e);if("string"===s)return n;const u=null!=this.activeTimers;let c,h;if(u&&(c=r.util.now()),"complex64"===s){const e=this.readSync(a.real.dataId),t=this.readSync(a.imag.dataId);h=r.backend_util.mergeRealAndImagArrays(e,t)}else h=this.getValuesFromTexture(e);return u&&(this.downloadWaitMs+=r.util.now()-c),this.convertAndCacheOnCPU(e,h)}async read(e){if(this.pendingRead.has(e)){const t=this.pendingRead.get(e);return new Promise((e=>t.push(e)))}const t=this.texData.get(e),{values:n,shape:s,slice:a,dtype:i,complexTensorInfos:o,isPacked:l}=t;if(null!=a){let t;t=l?new Db(s,Fb):new Ab(s,Fb);const n=this.runWebGLProgram(t,[{dataId:e,shape:s,dtype:i}],i),a=this.read(n.dataId);return this.disposeIntermediateTensorInfo(n),a}if(null!=n)return this.convertAndCacheOnCPU(e);if((0,r.env)().getBool("DEBUG")&&!(0,r.env)().getBool("WEBGL_DOWNLOAD_FLOAT_ENABLED")&&2===(0,r.env)().getNumber("WEBGL_VERSION"))throw new Error("tensor.data() with WEBGL_DOWNLOAD_FLOAT_ENABLED=false and WEBGL_VERSION=2 not yet supported.");let u,c,h=null;if("complex64"!==i&&(0,r.env)().get("WEBGL_BUFFER_SUPPORTED")){u=this.decode(e);const t=this.texData.get(u.dataId);h=this.gpgpu.createBufferFromTexture(t.texture.texture,...Ig(s))}if(this.pendingRead.set(e,[]),"complex64"!==i&&await this.gpgpu.createAndWaitForFence(),"complex64"===i){const e=await Promise.all([this.read(o.real.dataId),this.read(o.imag.dataId)]),t=e[0],n=e[1];c=r.backend_util.mergeRealAndImagArrays(t,n)}else if(null==h)c=this.getValuesFromTexture(e);else{const e=r.util.sizeFromShape(s);c=this.gpgpu.downloadFloat32MatrixFromBuffer(h,e)}if(null!=u&&this.disposeIntermediateTensorInfo(u),null!=h){const e=this.gpgpu.gl;Tg(e,(()=>e.deleteBuffer(h)))}const p=this.convertAndCacheOnCPU(e,c),d=this.pendingRead.get(e);return this.pendingRead.delete(e),d.forEach((e=>e(p))),this.pendingDisposal.has(e)&&(this.pendingDisposal.delete(e),this.disposeData(e)&&(0,r.engine)().removeDataId(e,this),this.pendingDeletes--),p}readToGPU(e,t={}){const n=this.texData.get(e),{values:s,shape:a,slice:i,dtype:o,isPacked:l,texture:u}=n;if("complex64"===o)throw new Error("Does not support reading texture for complex64 dtype.");if(null!=i){let n;n=l?new Db(a,Fb):new Ab(a,Fb);const s=this.runWebGLProgram(n,[{dataId:e,shape:a,dtype:o}],o),r=this.readToGPU(s,t);return this.disposeIntermediateTensorInfo(s),r}if(null==u)throw null!=s?new Error("Data is not on GPU but on CPU."):new Error("There is no data on GPU or CPU.");const c=this.decode(e,t.customTexShape),h=(0,r.engine)().makeTensorFromTensorInfo(c),p=this.texData.get(c.dataId);return Object.assign({tensorRef:h},p.texture)}bufferSync(e){const t=this.readSync(e.dataId);if("string"===e.dtype)try{const n=t.map((e=>r.util.decodeString(e)));return(0,r.buffer)(e.shape,e.dtype,n)}catch(e){throw new Error("Failed to decode encoded string bytes into utf-8")}return(0,r.buffer)(e.shape,e.dtype,t)}checkNumericalProblems(e){if(null!=e)for(let t=0;t<e.length;t++){const n=e[t];if(!Cg(n)){if((0,r.env)().getBool("WEBGL_RENDER_FLOAT32_CAPABLE"))throw Error(`The value ${n} cannot be represented with your current settings. Consider enabling float32 rendering: 'tf.env().set('WEBGL_RENDER_FLOAT32_ENABLED', true);'`);throw Error(`The value ${n} cannot be represented on this device.`)}}}getValuesFromTexture(e){const{shape:t,dtype:n,isPacked:s}=this.texData.get(e),a=r.util.sizeFromShape(t);if((0,r.env)().getBool("WEBGL_DOWNLOAD_FLOAT_ENABLED")){const n=this.decode(e),s=this.texData.get(n.dataId),r=this.gpgpu.downloadMatrixFromPackedTexture(s.texture.texture,...Ig(t)).subarray(0,a);return this.disposeIntermediateTensorInfo(n),r}const i=(0,r.env)().getBool("WEBGL_PACK")&&!0===s,o=i?Pg(t):t,l=i?new wy(o):new vy(o),u=this.runWebGLProgram(l,[{shape:o,dtype:n,dataId:e}],"float32"),c=this.texData.get(u.dataId),h=this.gpgpu.downloadByteEncodedFloatMatrixFromOutputTexture(c.texture.texture,c.texShape[0],c.texShape[1]).subarray(0,a);return this.disposeIntermediateTensorInfo(u),h}timerAvailable(){return(0,r.env)().getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_RELIABLE")>0}time(e){const t=this.activeTimers,n=[];let s=!1;null==this.programTimersStack?(this.programTimersStack=n,s=!0):this.activeTimers.push(n),this.activeTimers=n,e();const a=r.util.flatten(this.activeTimers.map((e=>e.query))).filter((e=>null!=e)),i=r.util.flatten(this.activeTimers.map((e=>e.name))).filter((e=>null!=e));this.activeTimers=t,s&&(this.programTimersStack=null);const o={uploadWaitMs:this.uploadWaitMs,downloadWaitMs:this.downloadWaitMs,kernelMs:null,wallMs:null};return(async()=>{if((0,r.env)().getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_RELIABLE")>0){const e=await Promise.all(a);o.kernelMs=r.util.sum(e),o.getExtraProfileInfo=()=>e.map(((e,t)=>({name:i[t],ms:e}))).map((e=>`${e.name}: ${e.ms}`)).join(", ")}else o.kernelMs={error:"WebGL query timers are not supported in this environment."};return this.uploadWaitMs=0,this.downloadWaitMs=0,o})()}memory(){return{unreliable:!1,numBytesInGPU:this.numBytesInGPU,numBytesInGPUAllocated:this.textureManager.numBytesAllocated,numBytesInGPUFree:this.textureManager.numBytesFree}}startTimer(){return(0,r.env)().getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_RELIABLE")>0?this.gpgpu.beginQuery():{startMs:r.util.now(),endMs:null}}endTimer(e){return(0,r.env)().getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_RELIABLE")>0?(this.gpgpu.endQuery(),e):(e.endMs=r.util.now(),e)}async getQueryTime(e){if((0,r.env)().getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_RELIABLE")>0)return this.gpgpu.waitForQueryAndGetTime(e);const t=e;return t.endMs-t.startMs}disposeData(e,t=!1){if(this.pendingDisposal.has(e))return!1;if(!this.texData.has(e))return!0;if(t?this.texData.get(e).refCount=0:this.texData.get(e).refCount--,!t&&this.texData.get(e).refCount>0)return!1;if(this.pendingRead.has(e))return this.pendingDisposal.add(e),this.pendingDeletes++,!1;this.releaseGPUData(e);const{complexTensorInfos:n}=this.texData.get(e);return null!=n&&(this.disposeData(n.real.dataId,t),this.disposeData(n.imag.dataId,t)),this.texData.delete(e),!0}releaseGPUData(e){const{texture:t,dtype:n,texShape:s,usage:a,isPacked:r,slice:i}=this.texData.get(e),o=i&&i.origDataId||e,l=this.dataRefCount.get(o);l>1?this.dataRefCount.set(o,l-1):(this.dataRefCount.delete(o),null!=t&&(this.numBytesInGPU-=this.computeBytes(s,n),this.textureManager.releaseTexture(t,s,a,r)));const u=this.texData.get(e);u.texture=null,u.texShape=null,u.isPacked=!1,u.slice=null}getTexture(e){return this.uploadToGPU(e),this.texData.get(e).texture.texture}getDataInfo(e){return this.texData.get(e)}shouldExecuteOnCPU(e,t=Lb){return(0,r.env)().getBool("WEBGL_CPU_FORWARD")&&e.every((e=>null==this.texData.get(e.dataId).texture&&r.util.sizeFromShape(e.shape)<t))}getGPGPUContext(){return this.gpgpu}where(e){r.backend_util.warn("tf.where() in webgl locks the UI thread. Call tf.whereAsync() instead");const t=e.dataSync();return Mb(e.shape,t)}packedUnaryOp(e,t,n){const s=new Db(e.shape,t),a=this.compileAndRun(s,[e],n);return(0,r.engine)().makeTensorFromTensorInfo(a)}abs(e){if(this.shouldExecuteOnCPU([e])&&"complex64"!==e.dtype){const t=lb(this.texData.get(e.dataId).values);return this.makeOutput(e.shape,e.dtype,t)}if((0,r.env)().getBool("WEBGL_PACK_UNARY_OPERATIONS"))return this.packedUnaryOp(e,Rb,e.dtype);const t=new Ab(e.shape,Rb),n=this.compileAndRun(t,[e]);return(0,r.engine)().makeTensorFromTensorInfo(n)}makeTensorInfo(e,t,n){let s;if("string"===t&&null!=n&&n.length>0&&r.util.isString(n[0])){const a=n.map((e=>r.util.encodeString(e)));s=this.write(a,e,t)}else s=this.write(n,e,t);return this.texData.get(s).usage=null,{dataId:s,shape:e,dtype:t}}makeOutput(e,t,n){return(0,r.engine)().makeTensorFromTensorInfo(this.makeTensorInfo(e,t,n),this)}unpackTensor(e){const t=new Ob(e.shape);return this.runWebGLProgram(t,[e],e.dtype)}packTensor(e){const t=new Nb(e.shape);return this.runWebGLProgram(t,[e],e.dtype,null,!0)}packedReshape(e,t){const n=[Lg(e.shape),...Bg(e.shape)],s={dtype:e.dtype,shape:n,dataId:e.dataId},a=[Lg(t),...Bg(t)],r=new Tb(a,n),i=[n],o=this.runWebGLProgram(r,[s],e.dtype,i,!0);return{dataId:o.dataId,shape:t,dtype:o.dtype}}decode(e,t){const n=this.texData.get(e),{isPacked:s,shape:a,dtype:i}=n;if(null!=t){const e=r.util.sizeFromShape(a),n=t[0]*t[1]*4;r.util.assert(e<=n,(()=>"customTexShape is too small. Row * Column * 4 should be equal or larger than the size of the tensor data."))}const o=Pg(a);let l;l=s?new xy(o):new by(o);const u=[null!=t?t:Ig(o)];return{dtype:i,shape:a,dataId:this.runWebGLProgram(l,[{shape:o,dtype:i,dataId:e}],i,u,!0,t).dataId}}runWebGLProgram(e,t,n,s,a=!1,i){const o=this.makeTensorInfo(e.outputShape,n),l=this.texData.get(o.dataId);if(e.packedOutput&&(l.isPacked=!0),e.outPackingScheme===xg.DENSE){const t=null!=i?i:Ig(e.outputShape);l.texShape=t.map((e=>2*e))}if(null!=e.outTexUsage&&(l.usage=e.outTexUsage),0===r.util.sizeFromShape(o.shape))return l.values=r.util.getTypedArrayFromDType(o.dtype,0),o;const u=[],c=t.map((t=>{if("complex64"===t.dtype)throw new Error("GPGPUProgram does not support complex64 input. For complex64 dtypes, please separate the program into real and imaginary parts.");let n=this.texData.get(t.dataId);if(null==n.texture){if(!e.packedInputs&&r.util.sizeFromShape(t.shape)<=(0,r.env)().getNumber("WEBGL_SIZE_UPLOAD_UNIFORM"))return{shape:t.shape,texData:null,isUniform:!0,uniformValues:n.values};e.packedInputs&&(n.isPacked=!0,n.shape=t.shape)}if(this.uploadToGPU(t.dataId),!!n.isPacked!=!!e.packedInputs)t=n.isPacked?this.unpackTensor(t):this.packTensor(t),u.push(t),n=this.texData.get(t.dataId);else if(n.isPacked&&!Wg(n.shape,t.shape)){const e=t,s=t.shape;t.shape=n.shape,t=this.packedReshape(t,s),u.push(t),n=this.texData.get(t.dataId),e.shape=s}return{shape:t.shape,texData:n,isUniform:!1}}));this.uploadToGPU(o.dataId);const h={shape:o.shape,texData:l,isUniform:!1},p=function(e,t,n){let s="";t.concat(n).forEach((t=>{const a=null!=t.texData&&null!=t.texData.slice&&t.texData.slice.flatOffset>0;if(e.enableShapeUniforms&&!t.isUniform){const i=t.texData.texShape,{useSqueezeShape:o,uniformShape:l,keptDims:u}=py(e.packedInputs,t.shape,i);let c="",h="",p="";if(1===l.length&&e.packedInputs){const e=[Math.ceil(i[0]/2),Math.ceil(i[1]/2)];c=`${e[0]>1}_${e[1]>1}`}else if(2!==l.length||e.packedInputs){if(l.length>2&&!e.packedInputs){const e=r.util.computeStrides(l);p=`${e[0]===i[1]}_${e[e.length-1]===i[1]}`}}else h=`${l[0]>1}_${l[1]>1}`;const d=t.shape.length,f=2===l.length&&r.util.arraysEqual(t.shape,i),m=1===r.util.sizeFromShape(t.shape),g=r.backend_util.getBroadcastDims(t.shape,n.shape),y=!e.packedInputs&&d===n.shape.length&&r.util.arraysEqual(i,n.texData.texShape),b=e.packedInputs||l.length>2?"":`${i[0]>1}_${i[1]>1}`;s+=`${d}_${y}_${o?u:""}_${l.length}_${m}_${g}_${f}_${c}_${h}_${p}_${b}_${a}`}else{const e=t.isUniform?"uniform":t.texData.texShape;s+=`${t.shape}_${e}_${a}`}}));const a=e.userCode;let i=e.constructor.name;return i+="_"+s+"_"+a+`${(0,r.env)().getNumber("WEBGL_VERSION")}`,i}(e,c,h),d=this.getAndSaveBinary(p,(()=>function(e,t,n,s){const a=n.map(((e,n)=>{const s={logicalShape:e.shape,texShape:e.isUniform?null:e.texData.texShape,isUniform:e.isUniform,isPacked:!e.isUniform&&e.texData.isPacked,flatOffset:null};return null!=e.texData&&null!=e.texData.slice&&e.texData.slice.flatOffset>0&&(s.flatOffset=e.texData.slice.flatOffset),{name:t.variableNames[n],shapeInfo:s}})),i=a.map((e=>e.shapeInfo)),o={logicalShape:s.shape,texShape:s.texData.texShape,isUniform:!1,isPacked:s.texData.isPacked,flatOffset:null},l=ny(a,o,t),u=function(e,t){const n=zg(e,(()=>e.createShader(e.FRAGMENT_SHADER)),"Unable to create fragment WebGLShader.");if(Tg(e,(()=>e.shaderSource(n,t))),Tg(e,(()=>e.compileShader(n))),(0,r.env)().get("ENGINE_COMPILE_ONLY"))return n;if(!1===e.getShaderParameter(n,e.COMPILE_STATUS))throw _g(t,e.getShaderInfoLog(n)),new Error("Failed to compile fragment shader.");return n}(e.gl,l),c=e.createProgram(u);return(0,r.env)().get("ENGINE_COMPILE_ONLY")?{program:t,fragmentShader:u,source:l,webGLProgram:c,inShapeInfos:i,outShapeInfo:o,uniformLocations:null,customUniformLocations:null,infLoc:null,nanLoc:null,inShapesLocations:null,inTexShapesLocations:null,outShapeLocation:null,outShapeStridesLocation:null,outTexShapeLocation:null}:Object.assign({program:t,fragmentShader:u,source:l,webGLProgram:c,inShapeInfos:i,outShapeInfo:o},my(e,t,c))}(this.gpgpu,e,c,h))),f=null!=this.activeTimers;let m;f&&(m=this.startTimer()),(0,r.env)().get("ENGINE_COMPILE_ONLY")||function(e,t,n,s,a){t.program.enableShapeUniforms||(gy(t.inShapeInfos,n),gy([t.outShapeInfo],[s]));const i=s.texData.texture,o=s.texData.texShape;s.texData.isPacked?e.setOutputPackedMatrixTexture(i.texture,o[0],o[1]):e.setOutputMatrixTexture(i.texture,o[0],o[1]),e.setProgram(t.webGLProgram),1===(0,r.env)().getNumber("WEBGL_VERSION")&&null!==t.infLoc&&e.gl.uniform1f(t.infLoc,1/0),null!==t.nanLoc&&e.gl.uniform1f(t.nanLoc,NaN),n.forEach(((n,s)=>{const a=t.program.variableNames[s],i=t.uniformLocations[a],o=t.uniformLocations[`offset${a}`],l=t.inShapesLocations[`${a}Shape`],u=t.inTexShapesLocations[`${a}TexShape`];if(l){const{uniformShape:s}=py(t.program.packedInputs,n.shape,n.texData.texShape);switch(s.length){case 1:e.gl.uniform1iv(l,new Int32Array(s));break;case 2:e.gl.uniform2iv(l,new Int32Array(s));break;case 3:e.gl.uniform3iv(l,new Int32Array(s));break;case 4:e.gl.uniform4iv(l,new Int32Array(s))}}if(u&&e.gl.uniform2i(u,n.texData.texShape[0],n.texData.texShape[1]),null!=i)if(n.isUniform)if(r.util.sizeFromShape(n.shape)<2)e.gl.uniform1f(i,n.uniformValues[0]);else{let t=n.uniformValues;t instanceof Float32Array||(t=new Float32Array(t)),e.gl.uniform1fv(i,t)}else null!=n.texData.slice&&null!=o&&e.gl.uniform1i(o,n.texData.slice.flatOffset),e.setInputMatrixTexture(n.texData.texture.texture,i,s)}));const l=t.outShapeLocation;if(l)switch(s.shape.length){case 1:e.gl.uniform1iv(l,new Int32Array(s.shape));break;case 2:e.gl.uniform2iv(l,new Int32Array(s.shape));break;case 3:e.gl.uniform3iv(l,new Int32Array(s.shape));break;case 4:e.gl.uniform4iv(l,new Int32Array(s.shape))}if(t.outShapeStridesLocation){const n=r.util.computeStrides(s.shape);switch(s.shape.length){case 2:e.gl.uniform1iv(t.outShapeStridesLocation,new Int32Array(n));break;case 3:e.gl.uniform2iv(t.outShapeStridesLocation,new Int32Array(n));break;case 4:e.gl.uniform3iv(t.outShapeStridesLocation,new Int32Array(n))}}t.outTexShapeLocation&&e.gl.uniform2i(t.outTexShapeLocation,s.texData.texShape[0],s.texData.texShape[1]),t.program.customUniforms&&a&&t.program.customUniforms.forEach(((n,s)=>{const r=t.customUniformLocations[s],i=a[s];if("float"===n.type)e.gl.uniform1fv(r,i);else if("vec2"===n.type)e.gl.uniform2fv(r,i);else if("vec3"===n.type)e.gl.uniform3fv(r,i);else if("vec4"===n.type)e.gl.uniform4fv(r,i);else if("int"===n.type)e.gl.uniform1iv(r,i);else if("ivec2"===n.type)e.gl.uniform2iv(r,i);else if("ivec3"===n.type)e.gl.uniform3iv(r,i);else{if("ivec4"!==n.type)throw Error(`uniform type ${n.type} is not supported yet.`);e.gl.uniform4iv(r,i)}})),e.executeProgram()}(this.gpgpu,d,c,h,s),u.forEach((e=>this.disposeIntermediateTensorInfo(e))),f&&(m=this.endTimer(m),this.activeTimers.push({name:e.constructor.name,query:this.getQueryTime(m)}));const g=(0,r.env)().get("WEBGL_FLUSH_THRESHOLD");if(g>0){const e=r.util.now();e-this.lastGlFlushTime>g&&(this.gpgpu.gl.flush(),this.lastGlFlushTime=e)}if(!(0,r.env)().getBool("WEBGL_LAZILY_UNPACK")&&l.isPacked&&!1===a){const e=this.unpackTensor(o);return this.disposeIntermediateTensorInfo(o),e}return o}compileAndRun(e,t,n,s,a=!1){return n=n||t[0].dtype,this.runWebGLProgram(e,t,n,s,a)}getAndSaveBinary(e,t){return e in this.binaryCache||(this.binaryCache[e]=t()),this.binaryCache[e]}getTextureManager(){return this.textureManager}dispose(){this.disposed||((0,r.env)().getBool("IS_TEST")||Object.keys(this.binaryCache).forEach((e=>{this.gpgpu.deleteProgram(this.binaryCache[e].webGLProgram),delete this.binaryCache[e]})),this.textureManager.dispose(),null!=this.canvas&&"undefined"!=typeof HTMLCanvasElement&&this.canvas instanceof HTMLCanvasElement?this.canvas.remove():this.canvas=null,this.gpgpuCreatedLocally&&(this.gpgpu.program=null,this.gpgpu.dispose()),this.disposed=!0)}floatPrecision(){return null==this.floatPrecisionValue&&(this.floatPrecisionValue=(0,r.tidy)((()=>{if(!(0,r.env)().get("WEBGL_RENDER_FLOAT32_ENABLED")){const e=(0,r.env)().getBool("DEBUG");(0,r.env)().set("DEBUG",!1);const t=this.abs((0,r.scalar)(1e-8)).dataSync()[0];if((0,r.env)().set("DEBUG",e),t>0)return 32}return 16}))),this.floatPrecisionValue}epsilon(){return 32===this.floatPrecision()?1e-7:1e-4}uploadToGPU(e){const t=this.texData.get(e),{shape:n,dtype:s,values:a,texture:i,usage:o,isPacked:l}=t;if(null!=i)return;const u=null!=this.activeTimers;let c;u&&(c=r.util.now());let h=t.texShape;if(null==h&&(h=function(e,t=!1){let n=(0,r.env)().getNumber("WEBGL_MAX_TEXTURE_SIZE"),s=(0,r.env)().getNumber("WEBGL_MAX_SIZE_FOR_NARROW_TEXTURE");if(s===1/0&&(0,r.env)().getBool("WEBGL_AUTO_SQUARIFY_NARROW_TEXTURE_SHAPE")&&(s=n/2),t&&(n*=2,s*=2,1===(e=e.map(((t,n)=>n>=e.length-2?r.util.nearestLargerEven(e[n]):e[n]))).length&&(e=[2,e[0]])),2!==e.length){const t=r.util.squeezeShape(e);e=t.newShape}let a=r.util.sizeFromShape(e),i=null;e.length<=1&&a<=n?i=[1,a]:2===e.length&&e[0]<=n&&e[1]<=n?i=e:3===e.length&&e[0]*e[1]<=n&&e[2]<=n?i=[e[0]*e[1],e[2]]:3===e.length&&e[0]<=n&&e[1]*e[2]<=n?i=[e[0],e[1]*e[2]]:4===e.length&&e[0]*e[1]*e[2]<=n&&e[3]<=n?i=[e[0]*e[1]*e[2],e[3]]:4===e.length&&e[0]<=n&&e[1]*e[2]*e[3]<=n&&(i=[e[0],e[1]*e[2]*e[3]]);const o=null!=i&&Math.max(...i)>s&&Math.min(...i)<=(t?2:1)&&Math.min(...i)>0;if(null==i||o)if(t){const t=Lg(e);let n=2,s=2;e.length&&([n,s]=Bg(e)),a=t*(n/2)*(s/2),i=r.util.sizeToSquarishShape(a).map((e=>2*e))}else i=r.util.sizeToSquarishShape(a);return i}(n,l),t.texShape=h),null!=a){const e=Pg(n);let i,o=h[1],p=h[0];const d=a instanceof Uint8Array||a instanceof Uint8ClampedArray;!l&&d||([o,p]=Sg(h[0],h[1])),i=l?new Iy(e,d):new ky(e,d);const f=d?[p,o]:h,m=this.makeTensorInfo(f,s),g=this.texData.get(m.dataId);g.usage=d?vg.PIXELS:vg.UPLOAD,g.texShape=f,this.gpgpu.uploadDenseMatrixToTexture(this.getTexture(m.dataId),o,p,a);const y=[[p,o]],b=!0,x=this.runWebGLProgram(i,[m],s,y,b),v=this.texData.get(x.dataId);t.texShape=v.texShape,t.isPacked=v.isPacked,t.usage=v.usage,(0,r.env)().get("ENGINE_COMPILE_ONLY")?this.disposeData(x.dataId):(t.texture=v.texture,t.values=null,this.texData.delete(x.dataId)),this.disposeIntermediateTensorInfo(m),u&&(this.uploadWaitMs+=r.util.now()-c)}else{const e=this.acquireTexture(h,o,s,l);t.texture=e}}convertAndCacheOnCPU(e,t){const n=this.texData.get(e),{dtype:s}=n;return this.releaseGPUData(e),null!=t&&(n.values=function(e,t){if("float32"===t||"complex64"===t)return e;if("int32"===t||"bool"===t){const n="int32"===t?new Int32Array(e.length):new Uint8Array(e.length);for(let t=0;t<n.length;++t)n[t]=Math.round(e[t]);return n}throw new Error(`Unknown dtype ${t}`)}(t,s)),n.values}acquireTexture(e,t,n,s){if(this.numBytesInGPU+=this.computeBytes(e,n),!this.warnedAboutMemory&&this.numBytesInGPU>1024*this.numMBBeforeWarning*1024){const e=(this.numBytesInGPU/1024/1024).toFixed(2);this.warnedAboutMemory=!0,console.warn(`High memory usage in GPU: ${e} MB, most likely due to a memory leak`)}return this.textureManager.acquireTexture(e,t,s)}computeBytes(e,t){return e[0]*e[1]*r.util.bytesPerElement(t)}checkCompileCompletion(){for(const[,e]of Object.entries(this.binaryCache))this.checkCompletion_(e)}async checkCompileCompletionAsync(){const e=[];if(this.gpgpu.parallelCompilationExtension){for(const[,t]of Object.entries(this.binaryCache))e.push(this.checkCompletionAsync_(t));return Promise.all(e)}for(const[,t]of Object.entries(this.binaryCache)){const n=new Promise((e=>{try{this.checkCompletion_(t),e(!0)}catch(e){throw e}}));e.push(n)}return Promise.all(e)}async checkCompletionAsync_(e){return this.gpgpu.gl.getProgramParameter(e.webGLProgram,this.gpgpu.parallelCompilationExtension.COMPLETION_STATUS_KHR)?this.checkCompletion_(e):(await(0,r.nextFrame)(),this.checkCompletionAsync_(e))}checkCompletion_(e){if(!1===this.gpgpu.gl.getProgramParameter(e.webGLProgram,this.gpgpu.gl.LINK_STATUS)){if(console.log(this.gpgpu.gl.getProgramInfoLog(e.webGLProgram)),!1===this.gpgpu.gl.getShaderParameter(e.fragmentShader,this.gpgpu.gl.COMPILE_STATUS))throw _g(e.source,this.gpgpu.gl.getShaderInfoLog(e.fragmentShader)),new Error("Failed to compile fragment shader.");throw new Error("Failed to link vertex and fragment shaders.")}return!0}getUniformLocations(){for(const[,e]of Object.entries(this.binaryCache)){const{uniformLocations:t,customUniformLocations:n,infLoc:s,nanLoc:a,inShapesLocations:r,inTexShapesLocations:i,outShapeLocation:o,outShapeStridesLocation:l,outTexShapeLocation:u}=my(this.gpgpu,e.program,e.webGLProgram);e.uniformLocations=t,e.customUniformLocations=n,e.infLoc=s,e.nanLoc=a,e.inShapesLocations=r,e.inTexShapesLocations=i,e.outShapeLocation=o,e.outShapeStridesLocation=l,e.outTexShapeLocation=u}}}Bb.nextDataId=0,r.device_util.isBrowser()&&(0,r.registerBackend)("webgl",(()=>new Bb),2);class Pb{constructor(e,t,n){this.variableNames=["A","B"],this.outputShape=r.backend_util.assertAndGetBroadcastShape(t,n),this.enableShapeUniforms=yy(this.outputShape.length),this.userCode=`\n      float binaryOperation(float a, float b) {\n        ${e}\n      }\n\n      void main() {\n        float a = getAAtOutCoords();\n        float b = getBAtOutCoords();\n        setOutput(binaryOperation(a, b));\n      }\n    `}}class Vb{constructor(e,t,n,s=!1){this.variableNames=["A","B"],this.supportsBroadcasting=!0,this.packedInputs=!0,this.packedOutput=!0,this.outputShape=r.backend_util.assertAndGetBroadcastShape(t,n);const a=this.outputShape.length;this.enableShapeUniforms=yy(a);let i="";if(s)if(0===a||1===r.util.sizeFromShape(this.outputShape))i="\n          result.y = 0.;\n          result.z = 0.;\n          result.w = 0.;\n        ";else if(i=`\n          ${hy(a)} coords = getOutputCoords();\n        `,1===a)this.enableShapeUniforms?i+="\n            result.y = (coords + 1) >= outShape ? 0. : result.y;\n            result.z = 0.;\n            result.w = 0.;\n          ":i+=`\n            result.y = (coords + 1) >= ${this.outputShape[0]} ? 0. : result.y;\n            result.z = 0.;\n            result.w = 0.;\n          `;else{const e=Sb("coords",a);this.enableShapeUniforms?i+=`\n            bool nextRowOutOfBounds =\n              (${e[a-2]} + 1) >= outShape[${a} - 2];\n            bool nextColOutOfBounds =\n              (${e[a-1]} + 1) >= outShape[${a} - 1];\n            result.y = nextColOutOfBounds ? 0. : result.y;\n            result.z = nextRowOutOfBounds ? 0. : result.z;\n            result.w = nextColOutOfBounds || nextRowOutOfBounds ? 0. : result.w;\n          `:i+=`\n            bool nextRowOutOfBounds =\n              (${e[a-2]} + 1) >= ${this.outputShape[a-2]};\n            bool nextColOutOfBounds =\n              (${e[a-1]} + 1) >= ${this.outputShape[a-1]};\n            result.y = nextColOutOfBounds ? 0. : result.y;\n            result.z = nextRowOutOfBounds ? 0. : result.z;\n            result.w = nextColOutOfBounds || nextRowOutOfBounds ? 0. : result.w;\n          `}this.userCode=`\n      vec4 binaryOperation(vec4 a, vec4 b) {\n        ${e}\n      }\n\n      void main() {\n        vec4 a = getAAtOutCoords();\n        vec4 b = getBAtOutCoords();\n\n        vec4 result = binaryOperation(a, b);\n        ${i}\n\n        setOutput(result);\n      }\n    `}}function Wb(e){const{inputs:t,backend:n}=e,{x:s}=t;return n.incRef(s.dataId),{dataId:s.dataId,shape:s.shape,dtype:s.dtype}}const Ub={kernelName:r.Identity,backendName:"webgl",kernelFunc:Wb};function Gb(e){const{inputs:t,backend:n}=e,{real:s,imag:a}=t,r=n.makeTensorInfo(s.shape,"complex64"),i=n.texData.get(r.dataId),o=Wb({inputs:{x:s},backend:n}),l=Wb({inputs:{x:a},backend:n});return i.complexTensorInfos={real:o,imag:l},r}const Hb={kernelName:r.Complex,backendName:"webgl",kernelFunc:Gb},qb="return (a < 0.) ? b * a : a;",Xb="\n  vec4 aLessThanZero = vec4(lessThan(a, vec4(0.)));\n  return (aLessThanZero * (b * a)) + ((vec4(1.0) - aLessThanZero) * a);\n",jb={kernelName:r.LeakyRelu,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:a}=t,{alpha:i}=s,o=n.makeTensorInfo([],"float32",r.util.createScalarValue(i,"float32")),l=(0,r.env)().getBool("WEBGL_PACK_BINARY_OPERATIONS")?new Vb(Xb,a.shape,o.shape):new Pb(qb,a.shape,o.shape),u=n.runWebGLProgram(l,[a,o],"float32");return n.disposeIntermediateTensorInfo(o),u}},Kb="return (a < 0.) ? b * a : a;",Yb="\n  vec4 aLessThanZero = vec4(lessThan(a, vec4(0.)));\n  return (aLessThanZero * (b * a)) + ((vec4(1.0) - aLessThanZero) * a);\n",Zb={kernelName:r.Prelu,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n}=e,{x:s,alpha:a}=t,i=(0,r.env)().getBool("WEBGL_PACK_BINARY_OPERATIONS")?new Vb(Yb,s.shape,a.shape):new Pb(Kb,s.shape,a.shape);return n.runWebGLProgram(i,[s,a],"float32")}};function Qb({opSnippet:e,packedOpSnippet:t,cpuKernelImpl:n,dtype:s}){return({inputs:a,backend:i})=>{const{x:o}=a,l=i,u=s||o.dtype;if(l.shouldExecuteOnCPU([o])&&null!=n){const e=l.texData.get(o.dataId),t=n(e.values,u);return l.makeTensorInfo(o.shape,u,t)}let c;return c=(0,r.env)().getBool("WEBGL_PACK_UNARY_OPERATIONS")&&null!=t?new Db(o.shape,t):new Ab(o.shape,e),l.runWebGLProgram(c,[o],u)}}function Jb({opSnippet:e,packedOpSnippet:t,checkOutOfBounds:n=!1,supportsComplex:s=!1,cpuKernelImpl:a,dtype:i}){return({inputs:o,backend:l})=>{const{a:u,b:c}=o,h=l;if(s&&"complex64"===u.dtype){const t=h.texData.get(u.dataId),n=h.texData.get(c.dataId),[s,a]=[[t.complexTensorInfos.real,n.complexTensorInfos.real],[t.complexTensorInfos.imag,n.complexTensorInfos.imag]].map((t=>{const[n,s]=t,a={dataId:n.dataId,dtype:n.dtype,shape:u.shape},i={dataId:s.dataId,dtype:s.dtype,shape:c.shape},o=new Pb(e,u.shape,c.shape);return h.runWebGLProgram(o,[a,i],(0,r.upcastType)(n.dtype,s.dtype))})),i=Gb({inputs:{real:s,imag:a},backend:h});return h.disposeIntermediateTensorInfo(s),h.disposeIntermediateTensorInfo(a),i}const p=i||(0,r.upcastType)(u.dtype,c.dtype);if(("string"===u.dtype||"string"===c.dtype||h.shouldExecuteOnCPU([u,c]))&&null!=a){const e=h.texData.get(u.dataId).values,t=h.texData.get(c.dataId).values,n="string"===u.dtype?r.backend_util.fromUint8ToStringArray(e):e,s="string"===u.dtype?r.backend_util.fromUint8ToStringArray(t):t,[i,o]=a(u.shape,c.shape,n,s,p),l=h.makeTensorInfo(o,p);return h.texData.get(l.dataId).values=i,l}let d;return d=(0,r.env)().getBool("WEBGL_PACK_BINARY_OPERATIONS")&&null!=t?new Vb(t,u.shape,c.shape,n):new Pb(e,u.shape,c.shape),h.runWebGLProgram(d,[u,c],p)}}function ex(e,t=!1){if("linear"===e)return"return x;";if("relu"===e)return t?"\n  vec4 result = x * vec4(greaterThanEqual(x, vec4(0.0)));\n  bvec4 isNaN = isnan(x);\n\n  result.r = isNaN.r ? x.r : result.r;\n  result.g = isNaN.g ? x.g : result.g;\n  result.b = isNaN.b ? x.b : result.b;\n  result.a = isNaN.a ? x.a : result.a;\n\n  return result;\n":"if (isnan(x)) return x;\n  return (x < 0.0) ? 0.0 : x;\n";if("elu"===e)return t?"\n  vec4 result;\n\n  result.r = (x.r >= 0.0) ? x.r : (exp(x.r) - 1.0);\n  result.g = (x.g >= 0.0) ? x.g : (exp(x.g) - 1.0);\n  result.b = (x.b >= 0.0) ? x.b : (exp(x.b) - 1.0);\n  result.a = (x.a >= 0.0) ? x.a : (exp(x.a) - 1.0);\n\n  return result;\n":"return (x >= 0.0) ? x : (exp(x) - 1.0);";if("relu6"===e)return t?"\n  vec4 result = min(x, vec4(6.)) * vec4(greaterThanEqual(x, vec4(0.0)));\n  bvec4 isNaN = isnan(x);\n\n  result.r = isNaN.r ? x.r : result.r;\n  result.g = isNaN.g ? x.g : result.g;\n  result.b = isNaN.b ? x.b : result.b;\n  result.a = isNaN.a ? x.a : result.a;\n\n  return result;\n":"if (isnan(x)) return x;\n  return (x < 0.0) ? 0.0 : min(6.0, x);\n";if("prelu"===e)return t?Yb:Kb;if("leakyrelu"===e)return t?Xb:qb;if("sigmoid"===e)return"return 1.0 / (1.0 + exp(-1.0 * x));";throw new Error(`Activation ${e} has not been implemented for the WebGL backend.`)}class tx{constructor(e,t,n,s=!1,a=!1,r=!1,i=null,o=!1,l=!1){this.variableNames=["matrixA","matrixB"],this.packedInputs=!0,this.packedOutput=!0,this.outputShape=n,this.enableShapeUniforms=yy(this.outputShape.length);const u=s?e[1]:e[2],c=Math.ceil(u/2),h=s?"i * 2, rc.y":"rc.y, i * 2",p=a?"rc.z, i * 2":"i * 2, rc.z",d=s?["a.xxyy","a.zzww"]:["a.xxzz","a.yyww"],f=a?["b.xzxz","b.ywyw"]:["b.xyxy","b.zwzw"];let m="",g="";i&&(m=o?`vec4 activation(vec4 a) {\n          vec4 b = getPreluActivationWeightsAtOutCoords();\n          ${i}\n        }`:l?`vec4 activation(vec4 a) {\n          vec4 b = getLeakyreluAlphaAtOutCoords();\n          ${i}\n        }`:`vec4 activation(vec4 x) {\n          ${i}\n        }`,g="result = activation(result);");const y=r?"result += getBiasAtOutCoords();":"";r&&this.variableNames.push("bias"),o&&this.variableNames.push("preluActivationWeights"),l&&this.variableNames.push("leakyreluAlpha");let b="rc.x",x="rc.x";e[0]<t[0]?b=`int(min(float(rc.x), ${e[0]-1}.))`:t[0]<e[0]&&(x=`int(min(float(rc.x), ${t[0]-1}.))`),this.userCode=`\n      ${m}\n      // Don't use uniform for sharedDimensionPacked for performance.\n      const float sharedDimension = ${c}.0;\n\n      vec4 dot2x2ARowBCol(ivec3 rc) {\n        vec4 result = vec4(0);\n        for (int i = 0; i < ${c}; i++) {\n          int batchA = ${b};\n          int batchB = ${x};\n          vec4 a = getMatrixA(batchA, ${h});\n          vec4 b = getMatrixB(batchB, ${p});\n\n          // These swizzled products need to be separately added.\n          // See: https://github.com/tensorflow/tfjs/issues/1735\n          result += (${d[0]} * ${f[0]});\n          result += (${d[1]} * ${f[1]});\n        }\n        return result;\n      }\n\n      void main() {\n        ivec3 rc = getOutputCoords();\n        vec4 result = dot2x2ARowBCol(rc);\n\n        ${y}\n\n        ${g}\n\n        setOutput(result);\n      }\n    `}}class nx{constructor(e,t,n){this.variableNames=["AReal","AImag","BReal","BImag"],this.outputShape=r.backend_util.assertAndGetBroadcastShape(t,n),this.userCode=`\n      float binaryOpComplex(\n          float areal, float aimag, float breal, float bimag) {\n        ${e}\n      }\n\n      void main() {\n        float areal = getARealAtOutCoords();\n        float aimag = getAImagAtOutCoords();\n        float breal = getBRealAtOutCoords();\n        float bimag = getBImagAtOutCoords();\n        setOutput(binaryOpComplex(areal, aimag, breal, bimag));\n      }\n    `}}const sx="return a * b;";function ax(e){const{inputs:t,backend:n}=e,{a:s,b:a}=t,i=r.backend_util.upcastType(s.dtype,a.dtype);if("complex64"===s.dtype){const e=n.texData.get(s.dataId),t=n.texData.get(a.dataId),r=new nx("return areal * breal - aimag * bimag;",s.shape,a.shape),i=new nx("return areal * bimag + aimag * breal;",s.shape,a.shape),o=[{dataId:e.complexTensorInfos.real.dataId,dtype:e.complexTensorInfos.real.dtype,shape:s.shape},{dataId:e.complexTensorInfos.imag.dataId,dtype:e.complexTensorInfos.imag.dtype,shape:s.shape},{dataId:t.complexTensorInfos.real.dataId,dtype:t.complexTensorInfos.real.dtype,shape:a.shape},{dataId:t.complexTensorInfos.imag.dataId,dtype:t.complexTensorInfos.imag.dtype,shape:a.shape}],l=n.runWebGLProgram(r,o,"float32"),u=n.runWebGLProgram(i,o,"float32"),c=Gb({inputs:{real:l,imag:u},backend:n});return n.disposeIntermediateTensorInfo(l),n.disposeIntermediateTensorInfo(u),c}if(n.shouldExecuteOnCPU([s,a])){const e=n.texData.get(s.dataId),t=n.texData.get(a.dataId),[r,o]=Qy(s.shape,a.shape,e.values,t.values,i),l=n.makeTensorInfo(o,i);return n.texData.get(l.dataId).values=r,l}let o;return o=(0,r.env)().getBool("WEBGL_PACK_BINARY_OPERATIONS")?new Vb(sx,s.shape,a.shape):new Pb(sx,s.shape,a.shape),n.runWebGLProgram(o,[s,a],i)}const rx={kernelName:r.Multiply,backendName:"webgl",kernelFunc:ax};function ix(e){const{inputs:t,backend:n,attrs:s}=e,{x:a}=t,{shape:i}=s,o=n,l=r.util.sizeFromShape(a.shape),u=r.util.inferFromImplicitShape(i,l),c=r.util.sizeFromShape(u);r.util.assert(l===c,(()=>`The new shape (${u}) has ${c} elements and the old shape (${a.shape}) has ${l} elements. The new shape and old shape must have the same number of elements.`));const h=o.texData.get(a.dataId);return!h.isPacked||Wg(a.shape,u)||null!==h.texture&&Wg(h.shape,u)?(o.incRef(a.dataId),{dataId:a.dataId,shape:u,dtype:a.dtype}):function(e,t,n){const s=[Lg(e.shape),...Bg(e.shape)],a={dtype:e.dtype,shape:s,dataId:e.dataId},r=[Lg(t),...Bg(t)],i=new Tb(r,s),o=[s],l=n.runWebGLProgram(i,[a],e.dtype,o,!0);return{dataId:l.dataId,shape:t,dtype:l.dtype}}(a,u,o)}const ox={kernelName:r.Reshape,backendName:"webgl",kernelFunc:ix};class lx{constructor(e,t){this.variableNames=["x"];const{windowSize:n,batchSize:s,inSize:a,outSize:i}=e;this.outputShape=[s,i];const o=4*Math.floor(n/4),l=n%4;let u="sumValue += dot(values, ones);";if(null!=t){const e=1/t;u=`sumValue += dot(values * ${r.util.isInt(e)?e.toPrecision(2):e}, ones);`}let c="";a%n>0&&(c=`\n        if (inIdx < 0 || inIdx >= ${a}) {\n          return 0.0;\n        }\n      `),this.userCode=`\n      const vec4 ones = vec4(1.0, 1.0, 1.0, 1.0);\n\n      float getValue(int batch, int inIdx) {\n        ${c}\n        return getX(batch, inIdx);\n      }\n\n      void main() {\n        ivec2 coords = getOutputCoords();\n        int batch = coords[0];\n        int outIdx = coords[1];\n        int inOffset = outIdx * ${n};\n\n        float sumValue = 0.0;\n\n        for (int i = 0; i < ${o}; i += 4) {\n          int inIdx = inOffset + i;\n          vec4 values = vec4(\n            getValue(batch, inIdx),\n            getValue(batch, inIdx + 1),\n            getValue(batch, inIdx + 2),\n            getValue(batch, inIdx + 3)\n          );\n\n          ${u}\n        }\n\n        int inIdx = inOffset + ${o};\n        if (${1===l}) {\n          vec4 values = vec4(getValue(batch, inIdx), 0.0, 0.0, 0.0);\n\n          ${u}\n        } else if (${2===l}) {\n          vec4 values = vec4(\n            getValue(batch, inIdx),\n            getValue(batch, inIdx + 1), 0.0, 0.0);\n\n          ${u}\n        } else if (${3===l}) {\n          vec4 values = vec4(\n            getValue(batch, inIdx),\n            getValue(batch, inIdx + 1),\n            getValue(batch, inIdx + 2), 0.0);\n\n          ${u}\n        }\n        setOutput(sumValue);\n      }\n    `}}class ux{constructor(e,t){this.variableNames=["x"];const{windowSize:n,batchSize:s,inSize:a,outSize:r}=e;this.outputShape=[s,r];let i="0.0",o="";"prod"===t?i="1.0":"min"===t?(i="1.0 / 1e-20",o="min"):"max"===t&&(i="-1.0 / 1e-20",o="max");let l=`${t}(${t}(${t}(minMaxValue[0], minMaxValue[1]), minMaxValue[2]), minMaxValue[3])`;"sum"===t?l="sumValue":"prod"===t?l="prodValue":"all"===t?l="allValue":"any"===t&&(l="anyValue");const u=4*Math.floor(n/4),c=n%4;let h=`\n      if (${"sum"===t}) {\n        sumValue += dot(values, ones);\n      } else if (${"prod"===t}) {\n        vec2 tmp = vec2(values[0], values[1]) * vec2(values[2], values[3]);\n        prodValue *= tmp[0] * tmp[1];\n      } else {\n        minMaxValue = ${o}(values, minMaxValue);\n        if (${"min"===t} || ${"max"===t}) {\n          minMaxValue = ${o}(values, minMaxValue);\n          bvec4 isNaN = isnan(values);\n          if (isNaN.r || isNaN.g || isNaN.b || isNaN.a) {\n            minMaxValue = vec4(NAN);\n          }\n        }\n      }\n    `,p="vec4";"all"===t?(i="1.0",h="\n        bool reducedAllValue = all(values);\n        float floatedReducedAllValue = float(reducedAllValue);\n        allValue = float(allValue >= 1.0 && floatedReducedAllValue >= 1.0);\n      ",p="bvec4"):"any"===t&&(i="0.0",h="\n        bool reducedAnyValue = any(values);\n        float floatedReducedAnyValue = float(reducedAnyValue);\n        anyValue = float(anyValue >= 1.0 || floatedReducedAnyValue >= 1.0);\n      ",p="bvec4");let d="";a%n>0&&(d=`\n        if (inIdx < 0 || inIdx >= ${a}) {\n          return initializationValue;\n        }\n      `),this.userCode=`\n      const float initializationValue = ${i};\n      const vec4 ones = vec4(1.0, 1.0, 1.0, 1.0);\n\n      float getValue(int batch, int inIdx) {\n        ${d}\n        return getX(batch, inIdx);\n      }\n\n      void main() {\n        ivec2 coords = getOutputCoords();\n        int batch = coords[0];\n        int outIdx = coords[1];\n        int inOffset = outIdx * ${n};\n\n        vec4 minMaxValue = vec4(${i});\n        float prodValue = 1.0;\n        float sumValue = 0.0;\n        float allValue = 1.0;\n        float anyValue = 0.0;\n\n        for (int i = 0; i < ${u}; i += 4) {\n          int inIdx = inOffset + i;\n          ${p} values = ${p}(\n            getValue(batch, inIdx),\n            getValue(batch, inIdx + 1),\n            getValue(batch, inIdx + 2),\n            getValue(batch, inIdx + 3)\n          );\n\n          ${h}\n        }\n\n        int inIdx = inOffset + ${u};\n        if (${1===c}) {\n          ${p} values = ${p}(\n            getValue(batch, inIdx),\n            initializationValue,\n            initializationValue,\n            initializationValue\n          );\n\n          ${h}\n        } else if (${2===c}) {\n          ${p} values = ${p}(\n            getValue(batch, inIdx),\n            getValue(batch, inIdx + 1),\n            initializationValue,\n            initializationValue\n          );\n\n          ${h}\n        } else if (${3===c}) {\n          ${p} values = ${p}(\n            getValue(batch, inIdx),\n            getValue(batch, inIdx + 1),\n            getValue(batch, inIdx + 2),\n            initializationValue\n          );\n\n          ${h}\n        }\n        setOutput(${l});\n      }\n    `}}function cx(e,t,n,s){const a=function(e){const t=[];for(;0===t.length||1!==t[t.length-1].outSize;){const n=t.length?t[t.length-1].outSize:e[1],s=r.backend_util.computeOptimalWindowSize(n);t.push({inSize:n,windowSize:s,outSize:Math.ceil(n/s)})}return t}(e.shape);let i=e;for(let r=0;r<a.length;r++){const{inSize:o,windowSize:l,outSize:u}=a[r];let c,h;c="mean"===n?0===r?new lx({windowSize:l,inSize:o,batchSize:e.shape[0],outSize:u},o):new lx({windowSize:l,inSize:o,batchSize:e.shape[0],outSize:u}):new ux({windowSize:l,inSize:o,batchSize:e.shape[0],outSize:u},n),h=i,i=s.runWebGLProgram(c,[i],t),h.dataId!==e.dataId&&s.disposeIntermediateTensorInfo(h)}return i}class hx{constructor(e,t){this.variableNames=["A"];const n=new Array(e.length);for(let s=0;s<n.length;s++)n[s]=e[t[s]];this.outputShape=n,this.rank=n.length;const s=hy(this.rank),a=function(e){const t=e.length;if(t>6)throw Error(`Transpose for rank ${t} is not yet supported`);const n=["resRC.x","resRC.y","resRC.z","resRC.w","resRC.u","resRC.v"],s=new Array(t);for(let t=0;t<e.length;t++)s[e[t]]=n[t];return s.join()}(t);this.userCode=`\n    void main() {\n      ${s} resRC = getOutputCoords();\n      setOutput(getA(${a}));\n    }\n    `}}class px{constructor(e,t){this.variableNames=["A"],this.packedInputs=!0,this.packedOutput=!0;const n=new Array(e.length);for(let s=0;s<n.length;s++)n[s]=e[t[s]];if(this.outputShape=n,this.rank=n.length,this.rank>6)throw Error(`Packed transpose for rank ${this.rank} is not yet supported.`);const s=hy(this.rank),a=Ib("rc",this.rank),r=new Array(this.rank);for(let e=0;e<t.length;e++)r[t[e]]=a[e];const i=`vec2(${r.slice(-2).join()})`,o=`++${a[this.rank-1]} < ${n[this.rank-1]}`,l=`getChannel(getA(${r.join()}), ${i})`;this.userCode=`\n    void main() {\n      ${s} rc = getOutputCoords();\n      vec4 result = vec4(0.);\n      result[0] = ${l};\n      if(${o}) {\n        result[1] = ${l};\n      }\n      --${a[this.rank-1]};\n      if(++${a[this.rank-2]} < ${n[this.rank-2]}) {\n        result[2] = ${l};\n        if(${o}) {\n          result[3] = ${l};\n        }\n      }\n      setOutput(result);\n    }\n    `}}function dx(e,t,n){const s=(0,r.env)().getBool("WEBGL_PACK_ARRAY_OPERATIONS")?new px(e.shape,t):new hx(e.shape,t);return n.runWebGLProgram(s,[e],e.dtype)}function fx(e){const{inputs:t,backend:n,attrs:s}=e,{x:a}=t,{axis:i,keepDims:o}=s;return function(e,t,n,s){const a=t,i=e.shape.length,o=r.util.parseAxisParam(a,e.shape);let l=o;const u=r.backend_util.getAxesPermutation(l,i),c=null!=u;let h=e;c&&(h=dx(e,u,s),l=r.backend_util.getInnerMostAxes(l.length,i)),r.backend_util.assertAxesAreInnerMostDims("sum",l,i);const[p,d]=r.backend_util.computeOutAndReduceShapes(h.shape,l);let f=p;n&&(f=r.backend_util.expandShapeToKeepDim(p,o));const m=r.util.sizeFromShape(d),g=ix({inputs:{x:h},attrs:{shape:[r.util.sizeFromShape(e.shape)/m,m]},backend:s}),y=cx(g,(0,r.sumOutType)(e.dtype),"sum",s),b=ix({inputs:{x:y},attrs:{shape:f},backend:s});return s.disposeIntermediateTensorInfo(g),s.disposeIntermediateTensorInfo(y),c&&s.disposeIntermediateTensorInfo(h),b}(a,i,o,n)}const mx={kernelName:r.Sum,backendName:"webgl",kernelFunc:fx};function gx(e){const{inputs:t,backend:n,attrs:s}=e,{x:a}=t,{perm:r}=s,i=n,o=a.shape.length,l=new Array(o);for(let e=0;e<l.length;e++)l[e]=a.shape[r[e]];let u;if(i.shouldExecuteOnCPU([a])){const e=i.texData.get(a.dataId).values,t=wb(e,a.shape,a.dtype,r,l);u=i.makeTensorInfo(l,a.dtype),i.texData.get(u.dataId).values=t}else u=dx(a,r,i);return u}const yx={kernelName:r.Transpose,backendName:"webgl",kernelFunc:gx};function bx({a:e,b:t,transposeA:n,transposeB:s,backend:a,bias:i=null,preluActivationWeights:o=null,leakyreluAlpha:l=0,activation:u=null}){const c=e.shape.length,h=t.shape.length,p=n?e.shape[c-2]:e.shape[c-1],d=s?t.shape[h-1]:t.shape[h-2],f=n?e.shape[c-1]:e.shape[c-2],m=s?t.shape[h-2]:t.shape[h-1],g=e.shape.slice(0,-2),y=t.shape.slice(0,-2),b=r.util.sizeFromShape(g),x=r.util.sizeFromShape(y),v=r.broadcast_util.assertAndGetBroadcastShape(e.shape.slice(0,-2),t.shape.slice(0,-2)).concat([f,m]);r.util.assert(p===d,(()=>`Error in matMul: inner shapes (${p}) and (${d}) of Tensors with shapes ${e.shape} and ${t.shape} and transposeA=${n} and transposeB=${s} must match.`));const w=n?[b,p,f]:[b,f,p],k=s?[x,m,d]:[x,d,m],I=ix({inputs:{x:e},backend:a,attrs:{shape:w}}),S=ix({inputs:{x:t},backend:a,attrs:{shape:k}}),N=[I,S],T=Math.max(b,x),C=n?I.shape[1]:I.shape[2],$=null!=i,E=null!=o,_="leakyrelu"===u,A=null!=u?ex(u,!0):null;let R;if((1===f||1===m)&&C>1e3&&!1===($||E||_||null!=A)){let e=I,t=S;n&&(e=gx({inputs:{x:I},backend:a,attrs:{perm:[0,2,1]}}),N.push(e)),s&&(t=gx({inputs:{x:S},backend:a,attrs:{perm:[0,2,1]}}),N.push(t));const r=1===m;let i=e;1!==m&&(i=ix({inputs:{x:e},backend:a,attrs:{shape:[T,C,1]}}),N.push(i));const o=1===m?2:1;let l=t;r&&(l=ix({inputs:{x:t},backend:a,attrs:{shape:[T,1,C]}}),N.push(l));const u=ax({inputs:{a:i,b:l},backend:a});R=fx({inputs:{x:u},backend:a,attrs:{axis:o,keepDims:!0}}),N.push(u)}else{const u=(0,r.upcastType)(e.dtype,t.dtype),c=new tx(w,k,[T,f,m],n,s,$,A,E,_),h=[I,S];if(null!=i&&h.push(i),E&&h.push(o),_){const e=a.makeTensorInfo([],"float32",r.util.createScalarValue(l,"float32"));h.push(e),N.push(e)}R=a.runWebGLProgram(c,h,u)}const F=ix({inputs:{x:R},backend:a,attrs:{shape:v}});N.push(R);for(const e of N)a.disposeIntermediateTensorInfo(e);return F}const xx={kernelName:r._FusedMatMul,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{a,b:r,bias:i,preluActivationWeights:o}=t,{transposeA:l,transposeB:u,activation:c,leakyreluAlpha:h}=s;return bx({a,b:r,transposeA:l,transposeB:u,backend:n,bias:i,preluActivationWeights:o,leakyreluAlpha:h,activation:c})}},vx="return abs(x);",wx={kernelName:r.Abs,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n}=e,{x:s}=t;if(n.shouldExecuteOnCPU([s])&&"complex64"!==s.dtype){const e=n.texData.get(s.dataId),t=lb(e.values);return n.makeTensorInfo(s.shape,s.dtype,t)}let a;return a=(0,r.env)().getBool("WEBGL_PACK_UNARY_OPERATIONS")?new Db(s.shape,vx):new Ab(s.shape,vx),n.runWebGLProgram(a,[s],s.dtype)}},kx=Qb({opSnippet:"if (isnan(x)) return x;\n  if (abs(x) > 1.) {\n    return NAN;\n  }\n  return acos(x);\n"}),Ix={kernelName:r.Acos,backendName:"webgl",kernelFunc:kx},Sx=Qb({opSnippet:"if (isnan(x)) return x;\n  if (x < 1.0) return NAN;\nreturn log(x + sqrt(x * x - 1.0));"}),Nx={kernelName:r.Acosh,backendName:"webgl",kernelFunc:Sx},Tx="return a + b;",Cx=Jb({opSnippet:Tx,packedOpSnippet:Tx,supportsComplex:!0,cpuKernelImpl:Ay}),$x={kernelName:r.Add,backendName:"webgl",kernelFunc:Cx};class Ex{constructor(e,t){this.outputShape=[],this.outputShape=e,this.variableNames=t.map(((e,t)=>`T${t}`));const n=[];this.variableNames.forEach((e=>{n.push(`float v${e} = get${e}AtOutCoords();`)}));const s=this.variableNames.map((e=>`v${e}`)).join(" + ");this.userCode=`\n      void main() {\n        ${n.join("\n        ")}\n\n        float result = ${s};\n        setOutput(result);\n      }\n    `}}class _x{constructor(e,t){this.outputShape=[],this.packedInputs=!0,this.packedOutput=!0,this.outputShape=e,this.variableNames=t.map(((e,t)=>`T${t}`));const n=[];this.variableNames.forEach((e=>{n.push(`vec4 v${e} = get${e}AtOutCoords();`)}));const s=this.variableNames.map((e=>`v${e}`)).join(" + ");this.userCode=`\n      void main() {\n        ${n.join("\n        ")}\n\n        vec4 result = ${s};\n        setOutput(result);\n      }\n    `}}const Ax={kernelName:r.AddN,backendName:"webgl",kernelFunc:function e(t){const{inputs:n,backend:s}=t,a=n;if(1===a.length)return Wb({inputs:{x:a[0]},backend:s});if(a.length>(0,r.env)().get("WEBGL_MAX_TEXTURES_IN_SHADER")){const t=Math.floor(a.length/2),n=e({inputs:a.slice(0,t),backend:s}),r=e({inputs:a.slice(t),backend:s});return e({inputs:[n,r],backend:s})}const i=a.map((e=>e.dtype)).reduce(((e,t)=>(0,r.upcastType)(e,t))),o=a.map((e=>e.shape)),l=(0,r.env)().getBool("WEBGL_PACK")?new _x(a[0].shape,o):new Ex(a[0].shape,o);return s.runWebGLProgram(l,a,i)}},Rx={kernelName:r.All,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:a}=t,{axis:i,keepDims:o}=s,l=a.shape.length,u=r.util.parseAxisParam(i,a.shape);let c=u;const h=r.backend_util.getAxesPermutation(c,l);let p=a;null!=h&&(p=gx({inputs:{x:a},backend:n,attrs:{perm:h}}),c=r.backend_util.getInnerMostAxes(c.length,l)),r.backend_util.assertAxesAreInnerMostDims("all",c,l);const[d,f]=r.backend_util.computeOutAndReduceShapes(p.shape,c),m=ix({inputs:{x:p},backend:n,attrs:{shape:[-1,r.util.sizeFromShape(f)]}}),g=cx(m,m.dtype,"all",n);let y;return y=ix(o?{inputs:{x:g},backend:n,attrs:{shape:r.backend_util.expandShapeToKeepDim(d,u)}}:{inputs:{x:g},backend:n,attrs:{shape:d}}),n.disposeIntermediateTensorInfo(m),n.disposeIntermediateTensorInfo(g),null!=h&&n.disposeIntermediateTensorInfo(p),y}},Fx={kernelName:r.Any,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:a}=t,{axis:i,keepDims:o}=s,l=a.shape.length,u=r.util.parseAxisParam(i,a.shape);let c=u;const h=r.backend_util.getAxesPermutation(c,l);let p=a;null!=h&&(p=gx({inputs:{x:a},backend:n,attrs:{perm:h}}),c=r.backend_util.getInnerMostAxes(c.length,l)),r.backend_util.assertAxesAreInnerMostDims("any",c,l);const[d,f]=r.backend_util.computeOutAndReduceShapes(p.shape,c),m=ix({inputs:{x:p},backend:n,attrs:{shape:[-1,r.util.sizeFromShape(f)]}}),g=cx(m,m.dtype,"any",n);let y;return y=ix(o?{inputs:{x:g},backend:n,attrs:{shape:r.backend_util.expandShapeToKeepDim(d,u)}}:{inputs:{x:g},backend:n,attrs:{shape:d}}),n.disposeIntermediateTensorInfo(m),n.disposeIntermediateTensorInfo(g),null!=h&&n.disposeIntermediateTensorInfo(p),y}};class Dx{constructor(e,t,n){this.variableNames=["A"];const{windowSize:s,batchSize:a,outSize:r}=e;n||this.variableNames.push("bestIndicesA"),this.outputShape=[a,r];const i="max"===t?">":"<",o=n?"inOffset + i;":"round(getBestIndicesA(batch, inOffset + i));";this.userCode=`\n      void main() {\n        ivec2 coords = getOutputCoords();\n        int batch = coords[0];\n        int outIdx = coords[1];\n        int inOffset = outIdx * ${s};\n\n        int bestIndex = inOffset;\n        float bestValue = getA(batch, bestIndex);\n\n        for (int i = 0; i < ${s}; i++) {\n          int inIdx = ${o};\n          float candidate = getA(batch, inIdx);\n          if (candidate ${i} bestValue) {\n            bestValue = candidate;\n            bestIndex = inIdx;\n          }\n        }\n        setOutput(float(bestIndex));\n      }\n    `}}class Ox{constructor(e,t,n,s){this.variableNames=["A"],this.packedInputs=!0,this.packedOutput=!0,r.util.assert(e.length>2,(()=>`Packed arg${n.charAt(0).toUpperCase()+n.slice(1)} supports only inputs with rank above 2.`));const a=e[e.length-1],i=Math.ceil(a/t);this.outputShape=e.slice(0,-1),i>1&&this.outputShape.push(i),s||this.variableNames.push("bestIndicesA");const o=this.outputShape,l=o.length,u=hy(l),c=Sb("coords",l);let h,p;if(1===i){p=l+1;const e=hy(p);h=`\n        ${e} sourceLocR = ${e}(${c.join()}, 0);\n        ++${c[l-1]};\n        ${e} sourceLocG = ${e}(${c.join()}, 0);\n        ++${c[l-2]};\n        ${e} sourceLocA = ${e}(${c.join()}, 0);\n        --${c[l-1]};\n        ${e} sourceLocB = ${e}(${c.join()}, 0);\n        --${c[l-2]};`}else p=l,h=`\n        ${u} sourceLocR = coords;\n        ++${c[l-1]};\n        ${u} sourceLocG = coords;\n        ++${c[l-2]};\n        ${u} sourceLocA = coords;\n        --${c[l-1]};\n        ${u} sourceLocB = coords;\n        --${c[l-2]};`;const d=["x","y","z","w","u","v"].slice(0,p),f="."+d[p-1],m=d.map((e=>"int "+e)),g=Sb("sourceLocR",p-1).concat("inIdx.r"),y=Sb("sourceLocG",p-1).concat("inIdx.g"),b=Sb("sourceLocB",p-1).concat("inIdx.b"),x=Sb("sourceLocA",p-1).concat("inIdx.a"),v="max"===n?"greaterThan":"lessThan",w=s?"":`\n          inIdx = round(vec4(getBestIndicesAChannel(${g.join()}),\n                             getBestIndicesAChannel(${y.join()}),\n                             getBestIndicesAChannel(${b.join()}),\n                             getBestIndicesAChannel(${x.join()})));`,k=`vec4(\n            getAChannel(${g.join()}),\n            hasNextCol ? getAChannel(${y.join()}) : 0.,\n            hasNextRow ? getAChannel(${b.join()}) : 0.,\n            hasNextRow && hasNextCol ? getAChannel(${x.join()}) : 0.)`,I=s?"":`\n      float getBestIndicesAChannel(${m.join()}) {\n        return getChannel(getBestIndicesA(${d.join()}),\n                                          vec2(${d.slice(-2).join()}));\n      }`;this.userCode=`\n      float getAChannel(${m.join()}) {\n        return getChannel(getA(${d.join()}),\n                               vec2(${d.slice(-2).join()}));\n      }\n      ${I}\n      void main() {\n        ${u} coords = getOutputCoords();\n        bool hasNextCol = ${c[l-1]} < ${o[l-1]-1};\n        bool hasNextRow = ${c[l-2]} < ${o[l-2]-1};\n        ${h}\n        ivec4 srcIdx = ivec4(sourceLocR${f}, sourceLocG${f},\n          sourceLocB${f}, sourceLocA${f}) * ${t};\n        ivec4 inIdx = srcIdx;\n        vec4 bestIndex = vec4(inIdx);\n        vec4 bestValue = ${k};\n\n        for (int i = 0; i < ${t}; i++) {\n          inIdx = srcIdx;\n          ${w}\n          vec4 candidate = ${k};\n          bvec4 nan = isnan(candidate);\n          bvec4 replace = bvec4(\n            vec4(${v}(candidate, bestValue)) * (vec4(1.0) - vec4(nan)));\n\n          bestValue = vec4(replace.x  ? candidate.x : bestValue.x,\n                           replace.y  ? candidate.y : bestValue.y,\n                           replace.z  ? candidate.z : bestValue.z,\n                           replace.w  ? candidate.w : bestValue.w);\n          bestIndex = mix(bestIndex, vec4(inIdx), vec4(replace));\n          srcIdx++;\n        }\n        setOutput(bestIndex);\n      }\n    `}}function Mx(e,t,n,s=null){let a=t.shape[0],i=t.shape[1];null!=s&&(a=s.shape[0],i=s.shape[1]);const o=r.backend_util.computeOptimalWindowSize(i),l={windowSize:o,inSize:i,batchSize:a,outSize:Math.ceil(i/o)},u=new Dx(l,n,null==s),c=[t];null!=s&&c.push(s);const h=e.runWebGLProgram(u,c,"int32");if(1===h.shape[1])return h;const p=Mx(e,t,n,h);return e.disposeIntermediateTensorInfo(h),p}function zx(e,t,n,s=null){const a=null!=s?s.shape:t.shape,i=a[a.length-1],o=r.backend_util.computeOptimalWindowSize(i),l=new Ox(a,o,n,null==s),u=null==s?[t]:[t,s],c=e.runWebGLProgram(l,u,"int32");if(c.shape.length===t.shape.length){const s=zx(e,t,n,c);return e.disposeIntermediateTensorInfo(c),s}return c}function Lx(e,t,n,s){const a=[n];if(r.backend_util.assertAxesAreInnerMostDims("arg"+s.charAt(0).toUpperCase()+s.slice(1),a,t.shape.length),!(0,r.env)().getBool("WEBGL_PACK_REDUCE")||t.shape.length<=2){const n=[],i=e.texData.get(t.dataId);let o=t;null!==i&&i.isPacked&&(o=e.unpackTensor(t),n.push(o));const[l,u]=r.backend_util.computeOutAndReduceShapes(o.shape,a),c=r.util.sizeFromShape(u),h=ix({inputs:{x:o},backend:e,attrs:{shape:[-1,c]}});n.push(h);const p=Mx(e,h,s);n.push(p);const d=ix({inputs:{x:p},backend:e,attrs:{shape:l}});return n.forEach((t=>e.disposeIntermediateTensorInfo(t))),d}return zx(e,t,s)}const Bx={kernelName:r.ArgMax,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:a}=t,{axis:i}=s;let o=r.util.parseAxisParam(i,a.shape);const l=r.backend_util.getAxesPermutation(o,a.shape.length);let u=a;const c=[];null!=l&&(u=gx({inputs:{x:a},backend:n,attrs:{perm:l}}),c.push(u),o=r.backend_util.getInnerMostAxes(o.length,u.shape.length)),r.backend_util.assertAxesAreInnerMostDims("argMax",[o[0]],u.shape.length);const h=Lx(n,u,o[0],"max");return c.forEach((e=>n.disposeIntermediateTensorInfo(e))),h}},Px={kernelName:r.ArgMin,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:a}=t,{axis:i}=s;let o=r.util.parseAxisParam(i,a.shape);const l=r.backend_util.getAxesPermutation(o,a.shape.length);let u=a;const c=[];null!=l&&(u=gx({inputs:{x:a},backend:n,attrs:{perm:l}}),c.push(u),o=r.backend_util.getInnerMostAxes(o.length,u.shape.length)),r.backend_util.assertAxesAreInnerMostDims("argMin",[o[0]],u.shape.length);const h=Lx(n,u,o[0],"min");return c.forEach((e=>n.disposeIntermediateTensorInfo(e))),h}},Vx=Qb({opSnippet:"if (isnan(x)) return x;\n  if (abs(x) > 1.) {\n    return NAN;\n  }\n  return asin(x);\n"}),Wx={kernelName:r.Asin,backendName:"webgl",kernelFunc:Vx},Ux=Qb({opSnippet:"if (isnan(x)) return x;return log(x + sqrt(x * x + 1.0));"}),Gx={kernelName:r.Asinh,backendName:"webgl",kernelFunc:Ux},Hx=Qb({opSnippet:"if (isnan(x)) return x;\n  return atan(x);\n"}),qx={kernelName:r.Atan,backendName:"webgl",kernelFunc:Hx},Xx=Jb({opSnippet:"\n  if (isnan(a)) return a;\n  if (isnan(b)) return b;\n\n  return atan(a, b);\n",packedOpSnippet:"\n  vec4 result = atan(a, b);\n  bvec4 isNaNA = isnan(a);\n  bvec4 isNaNB = isnan(b);\n  bvec4 isNaN = bvec4(isNaNA.x || isNaNB.x, isNaNA.y || isNaNB.y, isNaNA.z || isNaNB.z, isNaNA.w || isNaNB.w);\n  \n  result.r = isNaN.r ? NAN : result.r;\n  result.g = isNaN.g ? NAN : result.g;\n  result.b = isNaN.b ? NAN : result.b;\n  result.a = isNaN.a ? NAN : result.a;\n\n  return result;\n"}),jx={kernelName:r.Atan2,backendName:"webgl",kernelFunc:Xx},Kx=Qb({opSnippet:"if (isnan(x)) return x;\n  if ((x < -1.0) || (x > 1.0)) return NAN;\nreturn (log(1.0 + x) - log(1.0 - x)) / 2.0;"}),Yx={kernelName:r.Atanh,backendName:"webgl",kernelFunc:Kx};class Zx{constructor(e,t,n,s=!1,a=!1){if(this.variableNames=["x"],"avg"===t&&n)throw new Error("Cannot compute positions for average pool.");const r=e.filterWidth,i=e.strideHeight,o=e.strideWidth,l=e.dilationHeight,u=e.dilationWidth,c=e.effectiveFilterHeight,h=e.effectiveFilterWidth,p=e.padInfo.top,d=e.padInfo.left;this.outputShape=e.outShape;const f="avg"===t,m=`((batch  * ${e.inHeight} + xR) * ${e.inWidth} + xC) * ${e.inChannels} + d`,g=`(xR * ${e.inWidth} + xC) * ${e.inChannels} + d`;let y="0.0";if(f||(y="-1.0 / 1e-20"),n){const t=">=";return void(this.userCode=`\n        const ivec2 strides = ivec2(${i}, ${o});\n        const ivec2 pads = ivec2(${p}, ${d});\n\n        void main() {\n          ivec4 coords = getOutputCoords();\n          int batch = coords[0];\n          int d = coords[3];\n\n          ivec2 xRCCorner = coords.yz * strides - pads;\n          int xRCorner = xRCCorner.x;\n          int xCCorner = xRCCorner.y;\n\n          // max/min x(?, ?, d) to get y(yR, yC, d).\n          // ? = to be determined\n          float minMaxValue = 0.0;\n          float minMaxValueFound = 0.0;\n          int minMaxPosition = 0;\n          float avgValue = 0.0;\n\n          for (int wR = 0; wR < ${c};\n              wR += ${l}) {\n            int xR = xRCorner + wR;\n\n            if (xR < 0 || xR >= ${e.inHeight}) {\n              continue;\n            }\n\n            for (int wC = 0; wC < ${h};\n                wC += ${u}) {\n              int xC = xCCorner + wC;\n\n              if (xC < 0 || xC >= ${e.inWidth}) {\n                continue;\n              }\n\n              float value = getX(batch, xR, xC, d);\n\n              // If a min / max value has already been found, use it. If not,\n              // use the current value.\n              float currMinMaxValue = mix(\n                  value, minMaxValue, minMaxValueFound);\n              if (value ${t} currMinMaxValue) {\n                minMaxValue = value;\n                minMaxValueFound = 1.0;\n                minMaxPosition = ${s?a?m:g:`wR * ${h} + wC`};\n              }\n            }\n          }\n          setOutput(float(minMaxPosition));\n        }\n      `)}let b=`${t}(${t}(${t}(minMaxValue[0], minMaxValue[1]), minMaxValue[2]), minMaxValue[3])`;"avg"===t&&(b="avgValue / count");const x=4*Math.floor(r/4),v=r%4,w=`\n      if (${f}) {\n        avgValue += dot(values, ones);\n      } else {\n        minMaxValue = max(values, minMaxValue);\n      }\n    `;this.userCode=`\n      const ivec2 strides = ivec2(${i}, ${o});\n      const ivec2 pads = ivec2(${p}, ${d});\n      const float initializationValue = ${y};\n      const vec4 ones = vec4(1.0, 1.0, 1.0, 1.0);\n\n      float count = 0.0;\n\n      float getValue(int batch, int xR, int xC, int d) {\n        if (xC < 0 || xC >= ${e.inWidth}) {\n          return initializationValue;\n        }\n        count += 1.0;\n        return getX(batch, xR, xC, d);\n      }\n\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int batch = coords[0];\n        int d = coords[3];\n\n        ivec2 xRCCorner = coords.yz * strides - pads;\n        int xRCorner = xRCCorner.x;\n        int xCCorner = xRCCorner.y;\n\n        // max/min x(?, ?, d) to get y(yR, yC, d).\n        // ? = to be determined\n        vec4 minMaxValue = vec4(${y});\n        float avgValue = 0.0;\n        count = 0.0;\n\n        for (int wR = 0; wR < ${c};\n            wR += ${l}) {\n          int xR = xRCorner + wR;\n\n          if (xR < 0 || xR >= ${e.inHeight}) {\n            continue;\n          }\n\n          for (int wC = 0; wC < ${x}; wC += 4) {\n            int xC = xCCorner + wC * ${u};\n\n            vec4 values = vec4(\n              getValue(batch, xR, xC, d),\n              getValue(batch, xR, xC + ${u}, d),\n              getValue(batch, xR, xC + 2 * ${u}, d),\n              getValue(batch, xR, xC + 3 * ${u}, d)\n            );\n\n            ${w}\n          }\n\n          int xC = xCCorner + ${x};\n          if (${1===v}) {\n            vec4 values = vec4(\n              getValue(batch, xR, xC, d),\n              initializationValue,\n              initializationValue,\n              initializationValue\n            );\n\n            ${w}\n          } else if (${2===v}) {\n            vec4 values = vec4(\n              getValue(batch, xR, xC, d),\n              getValue(batch, xR, xC + ${u}, d),\n              initializationValue,\n              initializationValue\n            );\n\n            ${w}\n          } else if (${3===v}) {\n            vec4 values = vec4(\n              getValue(batch, xR, xC, d),\n              getValue(batch, xR, xC + ${u}, d),\n              getValue(batch, xR, xC + 2 * ${u}, d),\n              initializationValue\n            );\n\n            ${w}\n          }\n        }\n        setOutput(${b});\n      }\n    `}}class Qx{constructor(e,t,n,s=!1,a=!1){if(this.variableNames=["x"],"avg"===t&&n)throw new Error("Cannot compute positions for average pool.");const r=e.filterWidth,i=e.strideDepth,o=e.strideHeight,l=e.strideWidth,u=e.dilationDepth,c=e.dilationHeight,h=e.dilationWidth,p=e.effectiveFilterDepth,d=e.effectiveFilterHeight,f=e.effectiveFilterWidth,m=e.padInfo.front,g=e.padInfo.top,y=e.padInfo.left;this.outputShape=e.outShape;const b="avg"===t;let x="0.0";if(b||(x="-1.0 / 1e-20"),n){const t=">=";return void(this.userCode=`\n        const ivec3 strides =\n            ivec3(${i}, ${o}, ${l});\n        const ivec3 pads = ivec3(${m}, ${g}, ${y});\n\n        void main() {\n          ivec5 coords = getOutputCoords();\n          int batch = coords.x;\n          int ch = coords.u;\n\n          ivec3 xCorner = ivec3(coords.y, coords.z, coords.w) * strides - pads;\n          int xDCorner = xCorner.x;\n          int xRCorner = xCorner.y;\n          int xCCorner = xCorner.z;\n\n          // max/min x(?, ?, ?, ch) to get y(yD, yR, yC, ch).\n          // ? = to be determined\n          float minMaxValue = 0.0;\n          float minMaxValueFound = 0.0;\n          int minMaxPosition = 0;\n\n          for (int wD = 0; wD < ${p};\n              wD += ${u}) {\n            int xD = xDCorner + wD;\n\n            if (xD < 0 || xD >= ${e.inDepth}) {\n              continue;\n            }\n\n            for (int wR = 0; wR < ${d};\n                wR += ${c}) {\n              int xR = xRCorner + wR;\n\n              if (xR < 0 || xR >= ${e.inHeight}) {\n                continue;\n              }\n\n              for (int wC = 0; wC < ${f};\n                  wC += ${h}) {\n                int xC = xCCorner + wC;\n\n                if (xC < 0 || xC >= ${e.inWidth}) {\n                  continue;\n                }\n\n                float value = getX(batch, xD, xR, xC, ch);\n\n                // If a min / max value has already been found, use it. If not,\n                // use the current value.\n                float currMinMaxValue = mix(\n                    value, minMaxValue, minMaxValueFound);\n                if (value ${t} currMinMaxValue) {\n                  minMaxValue = value;\n                  minMaxValueFound = 1.0;\n                  minMaxPosition = ${s?a?`(((batch * ${e.inDepth} + xD) * ${e.inHeight} + xR) * ${e.inWidth} + xC) * ${e.inChannels} + ch`:`((xD * ${e.inHeight} + xR) * ${e.inWidth} + xC) * ${e.inChannels} + ch`:`wD * ${d} * ${f} +\n                      wR * ${f} + wC`};\n                }\n              }\n            }\n          }\n          setOutput(float(minMaxPosition));\n        }\n      `)}let v=`${t}(${t}(${t}(minMaxValue[0], minMaxValue[1]), minMaxValue[2]), minMaxValue[3])`;"avg"===t&&(v="avgValue / count");const w=4*Math.floor(r/4),k=r%4,I=`\n      if (${b}) {\n        avgValue += dot(values, ones);\n      } else {\n        minMaxValue = max(values, minMaxValue);\n      }\n    `;this.userCode=`\n      const ivec3 strides =\n        ivec3(${i}, ${o}, ${l});\n      const ivec3 pads = ivec3(${m}, ${g}, ${y});\n      const float initializationValue = ${x};\n      const vec4 ones = vec4(1.0, 1.0, 1.0, 1.0);\n\n      float count = 0.0;\n\n      float getValue(int batch, int xD, int xR, int xC, int ch) {\n        if (xC < 0 || xC >= ${e.inWidth}) {\n          return initializationValue;\n        }\n        count += 1.0;\n        return getX(batch, xD, xR, xC, ch);\n      }\n\n      void main() {\n        ivec5 coords = getOutputCoords();\n        int batch = coords.x;\n        int ch = coords.u;\n\n        ivec3 xCorner = ivec3(coords.y, coords.z, coords.w) * strides - pads;\n        int xDCorner = xCorner.x;\n        int xRCorner = xCorner.y;\n        int xCCorner = xCorner.z;\n\n        // max/min x(?, ?, ?, d) to get y(yD, yR, yC, ch).\n        // ? = to be determined\n        vec4 minMaxValue = vec4(${x});\n        float avgValue = 0.0;\n        count = 0.0;\n\n        for (int wD = 0; wD < ${p};\n            wD += ${u}) {\n          int xD = xDCorner + wD;\n\n          if (xD < 0 || xD >= ${e.inDepth}) {\n            continue;\n          }\n\n          for (int wR = 0; wR < ${d};\n            wR += ${c}) {\n            int xR = xRCorner + wR;\n\n            if (xR < 0 || xR >= ${e.inHeight}) {\n              continue;\n            }\n\n            for (int wC = 0; wC < ${w}; wC += 4) {\n              int xC = xCCorner + wC * ${h};\n\n              vec4 values = vec4(\n                getValue(batch, xD, xR, xC, ch),\n                getValue(batch, xD, xR, xC + ${h}, ch),\n                getValue(batch, xD, xR, xC + 2 * ${h}, ch),\n                getValue(batch, xD, xR, xC + 3 * ${h}, ch)\n              );\n\n              ${I}\n            }\n\n            int xC = xCCorner + ${w};\n            if (${1===k}) {\n              vec4 values = vec4(\n                getValue(batch, xD, xR, xC, ch),\n                initializationValue,\n                initializationValue,\n                initializationValue\n              );\n\n              ${I}\n            } else if (${2===k}) {\n              vec4 values = vec4(\n                getValue(batch, xD, xR, xC, ch),\n                getValue(batch, xD, xR, xC + ${h}, ch),\n                initializationValue,\n                initializationValue\n              );\n\n              ${I}\n            } else if (${3===k}) {\n              vec4 values = vec4(\n                getValue(batch, xD, xR, xC, ch),\n                getValue(batch, xD, xR, xC + ${h}, ch),\n                getValue(batch, xD, xR, xC + 2 * ${h}, ch),\n                initializationValue\n              );\n\n              ${I}\n            }\n          }\n          setOutput(${v});\n        }\n      }\n    `}}const Jx={kernelName:r.AvgPool,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:a}=t;jg(a,"avgPool");const{filterSize:i,strides:o,pad:l,dimRoundingMode:u}=s;r.util.assert(r.backend_util.eitherStridesOrDilationsAreOne(o,1),(()=>`Error in avgPool: Either strides or dilations must be 1. Got strides ${o} and dilations '1'`));const c=r.backend_util.computePool2DInfo(a.shape,i,o,1,l,u);if(1===c.filterWidth&&1===c.filterHeight&&r.util.arraysEqual(c.inShape,c.outShape))return Wb({inputs:{x:a},backend:n});const h=new Zx(c,"avg",!1);return n.runWebGLProgram(h,[a],"float32")}},ev={kernelName:r.AvgPool3D,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:a}=t,{filterSize:i,strides:o,pad:l,dimRoundingMode:u,dataFormat:c}=s,h=r.backend_util.computePool3DInfo(a.shape,i,o,[1,1,1],l,u,c),p=new Qx(h,"avg",!1);return n.runWebGLProgram(p,[a],"float32")}};class tv{constructor(e){this.variableNames=["dy"],this.outputShape=e.inShape;const t=e.filterHeight,n=e.filterWidth,s=e.strideHeight,a=e.strideWidth,r=e.dilationHeight,i=e.dilationWidth,o=e.effectiveFilterHeight,l=e.effectiveFilterWidth,u=o-1-e.padInfo.top,c=l-1-e.padInfo.left,h=1/(t*n);this.userCode=`\n      const ivec2 pads = ivec2(${u}, ${c});\n      const float avgMultiplier = float(${h});\n\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int b = coords[0];\n        int d = coords[3];\n\n        ivec2 dyRCCorner = coords.yz - pads;\n        int dyRCorner = dyRCCorner.x;\n        int dyCCorner = dyRCCorner.y;\n\n        // Convolve dy(?, ?, d) with pos mask(:, :, d) to get dx(xR, xC, d).\n        // ? = to be determined. : = across all values in that axis.\n        float dotProd = 0.0;\n        for (int wR = 0; wR < ${o};\n            wR += ${r}) {\n          float dyR = float(dyRCorner + wR) / ${s}.0;\n\n          if (dyR < 0.0 || dyR >= ${e.outHeight}.0 || fract(dyR) > 0.0) {\n            continue;\n          }\n          int idyR = int(dyR);\n\n          for (int wC = 0; wC < ${l};\n            wC+= ${i}) {\n            float dyC = float(dyCCorner + wC) / ${a}.0;\n\n            if (dyC < 0.0 || dyC >= ${e.outWidth}.0 ||\n                fract(dyC) > 0.0) {\n              continue;\n            }\n            int idyC = int(dyC);\n\n            float dyValue = getDy(b, idyR, idyC, d);\n\n            dotProd += dyValue * avgMultiplier;\n          }\n        }\n        setOutput(dotProd);\n      }\n    `}}class nv{constructor(e){this.variableNames=["dy"],this.outputShape=e.inShape;const t=e.filterDepth,n=e.filterHeight,s=e.filterWidth,a=e.strideDepth,r=e.strideHeight,i=e.strideWidth,o=e.dilationDepth,l=e.dilationHeight,u=e.dilationWidth,c=e.effectiveFilterDepth,h=e.effectiveFilterHeight,p=e.effectiveFilterWidth,d=c-1-e.padInfo.front,f=h-1-e.padInfo.top,m=p-1-e.padInfo.left,g=1/(t*n*s);this.userCode=`\n      const ivec3 pads = ivec3(${d}, ${f}, ${m});\n      const float avgMultiplier = float(${g});\n\n      void main() {\n        ivec5 coords = getOutputCoords();\n        int batch = coords.x;\n        int ch = coords.u;\n\n        ivec3 dyCorner = ivec3(coords.y, coords.z, coords.w) - pads;\n        int dyDCorner = dyCorner.x;\n        int dyRCorner = dyCorner.y;\n        int dyCCorner = dyCorner.z;\n\n        // Convolve dy(?, ?, ?, d) with pos mask(:, :, :, ch) to get\n        // dx(xD, xR, xC, ch).\n        // ? = to be determined. : = across all values in that axis.\n        float dotProd = 0.0;\n\n        for (int wD = 0; wD < ${c};\n            wD += ${o}) {\n          float dyD = float(dyDCorner + wD) / ${a}.0;\n\n          if (dyD < 0.0 || dyD >= ${e.outDepth}.0 || fract(dyD) > 0.0) {\n            continue;\n          }\n          int idyD = int(dyD);\n\n          for (int wR = 0; wR < ${h};\n              wR += ${l}) {\n            float dyR = float(dyRCorner + wR) / ${r}.0;\n\n            if (dyR < 0.0 || dyR >= ${e.outHeight}.0 ||\n                fract(dyR) > 0.0) {\n              continue;\n            }\n            int idyR = int(dyR);\n\n            for (int wC = 0; wC < ${p};\n                wC += ${u}) {\n              float dyC = float(dyCCorner + wC) / ${i}.0;\n\n              if (dyC < 0.0 || dyC >= ${e.outWidth}.0 ||\n                  fract(dyC) > 0.0) {\n                continue;\n              }\n              int idyC = int(dyC);\n\n              float dyValue = getDy(batch, idyD, idyR, idyC, ch);\n\n              dotProd += dyValue * avgMultiplier;\n            }\n          }\n        }\n        setOutput(dotProd);\n      }\n    `}}const sv={kernelName:r.AvgPool3DGrad,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{dy:a,input:i}=t,o=i,{filterSize:l,strides:u,pad:c,dimRoundingMode:h}=s,p=r.backend_util.computePool3DInfo(o.shape,l,u,[1,1,1],c,h),d=new nv(p);return n.runWebGLProgram(d,[a],o.dtype)}},av={kernelName:r.AvgPoolGrad,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{dy:a,input:i}=t,o=i;jg([a,i],"avgPoolGrad");const{filterSize:l,strides:u,pad:c}=s,h=r.backend_util.computePool2DInfo(o.shape,l,u,1,c),p=new tv(h);return n.runWebGLProgram(p,[a],o.dtype)}},rv={kernelName:r.BatchMatMul,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{a,b:r}=t,{transposeA:i,transposeB:o}=s;return bx({a,b:r,transposeA:i,transposeB:o,backend:n})}};class iv{constructor(e,t,n,s,a,i){this.outputShape=[],this.variableNames=["x","mean","variance"],r.backend_util.assertAndGetBroadcastShape(e,t),r.backend_util.assertAndGetBroadcastShape(e,n);let o="0.0";null!=s&&(r.backend_util.assertAndGetBroadcastShape(e,s),this.variableNames.push("offset"),o="getOffsetAtOutCoords()");let l="1.0";null!=a&&(r.backend_util.assertAndGetBroadcastShape(e,a),this.variableNames.push("scale"),l="getScaleAtOutCoords()"),this.outputShape=e,this.userCode=`\n      void main() {\n        float x = getXAtOutCoords();\n        float mean = getMeanAtOutCoords();\n        float variance = getVarianceAtOutCoords();\n        float offset = ${o};\n        float scale = ${l};\n        float inv = scale * inversesqrt(variance + float(${i}));\n        setOutput(dot(vec3(x, -mean, offset), vec3(inv, inv, 1)));\n      }\n    `}}class ov{constructor(e,t,n,s,a,i){this.packedInputs=!0,this.packedOutput=!0,this.variableNames=["x","mean","variance"],r.backend_util.assertAndGetBroadcastShape(e,t),r.backend_util.assertAndGetBroadcastShape(e,n);let o="vec4(0.0)";null!=s&&(r.backend_util.assertAndGetBroadcastShape(e,s),this.variableNames.push("offset"),o="getOffsetAtOutCoords()");let l="vec4(1.0)";null!=a&&(r.backend_util.assertAndGetBroadcastShape(e,a),this.variableNames.push("scale"),l="getScaleAtOutCoords()"),this.outputShape=e,this.userCode=`\n      void main() {\n        vec4 offset = ${o};\n        vec4 scale = ${l};\n\n        vec4 x = getXAtOutCoords();\n        vec4 mean = getMeanAtOutCoords();\n        vec4 variance = getVarianceAtOutCoords();\n\n        vec4 inv = scale * inversesqrt(variance + vec4(${i}));\n\n        setOutput((x - mean) * inv + offset);\n      }\n    `}}const lv={kernelName:r.FusedBatchNorm,backendName:"webgl",kernelFunc:({inputs:e,backend:t,attrs:n})=>{const{x:s,mean:a,variance:i,offset:o,scale:l}=e;r.util.assert(a.shape.length===i.shape.length,(()=>"Batch normalization gradient requires mean and variance to have equal ranks.")),r.util.assert(null==o||a.shape.length===o.shape.length,(()=>"Batch normalization gradient requires mean and offset to have equal ranks.")),r.util.assert(null==l||a.shape.length===l.shape.length,(()=>"Batch normalization gradient requires mean and scale to have equal ranks."));let{varianceEpsilon:u}=n;null==u&&(u=.001);const c=[s,a,i];let h=null;null!=o&&(h=o.shape,c.push(o));let p=null;null!=l&&(p=l.shape,c.push(l));const d=(0,r.env)().getBool("WEBGL_PACK_NORMALIZATION")?new ov(s.shape,a.shape,i.shape,h,p,u):new iv(s.shape,a.shape,i.shape,h,p,u);return t.runWebGLProgram(d,c,c[0].dtype)}};class uv{constructor(e){this.variableNames=["source"],this.outputShape=e,this.rank=e.length;const t=hy(this.rank);this.customUniforms=[{name:"start",arrayIndex:this.rank,type:"int"}];const n=function(e){if(1===e)return"sourceLoc";if(e<=6)return cv.slice(0,e).map((e=>"sourceLoc."+e)).join(",");throw Error(`Slicing for rank ${e} is not yet supported`)}(this.rank);let s;s=`\n        ${t} sourceLoc;\n        ${t} coords = getOutputCoords();\n        ${e.map(((e,t)=>`sourceLoc.${cv[t]} = start[${t}] + coords.${cv[t]};`)).join("\n")}\n      `,this.userCode=`\n      void main() {\n        ${s}\n        setOutput(getSource(${n}));\n      }\n    `}}const cv=["x","y","z","w","u","v"];class hv{constructor(e){this.variableNames=["source"],this.packedInputs=!0,this.packedOutput=!0,this.outputShape=e,this.rank=e.length,this.customUniforms=[{name:"start",arrayIndex:this.rank,type:"int"}];const t=hy(this.rank),n=Sb("coords",this.rank),s=Sb("sourceLoc",this.rank),a=1===this.rank?"sourceLoc":`vec2(${s.slice(-2).join()})`,r=`getChannel(getSource(${s.join()}), ${a})`,i=`\n      result.x = ${r};\n      if (++${n[this.rank-1]} < ${e[this.rank-1]}) {\n        ++${s[this.rank-1]};\n        result.y = ${r};\n        --${s[this.rank-1]};\n      }\n    `,o=1===this.rank?"":`\n      --${n[this.rank-1]};\n      if (++${n[this.rank-2]} < ${e[this.rank-2]}) {\n        ++${s[this.rank-2]};\n        result.z = ${r};\n        if (++${n[this.rank-1]} < ${e[this.rank-1]}) {\n          ++${s[this.rank-1]};\n          result.w = ${r};\n        }\n      }\n    `,l=this.rank<=4?`sourceLoc = coords +\n            ${t}(${e.map(((e,t)=>`start[${t}]`)).join()});`:e.map(((e,t)=>`${s[t]} = ${n[t]} + start[${t}];`)).join("\n");this.userCode=`\n      void main() {\n        ${t} coords = getOutputCoords();\n        ${t} sourceLoc;\n        ${l}\n        vec4 result = vec4(0.);\n        ${i}\n        ${o}\n        setOutput(result);\n      }\n    `}}function pv(e){const{inputs:t,backend:n,attrs:s}=e,{x:a}=t,{begin:i,size:o}=s,[l,u]=r.slice_util.parseSliceParams(a,i,o);if(r.slice_util.assertParamsValid(a,l,u),0===r.util.sizeFromShape(u))return n.makeTensorInfo(u,a.dtype,[]);if(n.shouldExecuteOnCPU([a])||"string"===a.dtype){const e=n.texData.get(a.dataId),t=ub(e.values,l,u,a.shape,a.dtype);return n.makeTensorInfo(u,a.dtype,t)}const{isPacked:c}=n.texData.get(a.dataId),h=r.slice_util.isSliceContinous(a.shape,l,u);if(c||!h){const e=(0,r.env)().getBool("WEBGL_PACK_ARRAY_OPERATIONS")?new hv(u):new uv(u),t=[l];return n.runWebGLProgram(e,[a],a.dtype,t)}return n.uploadToGPU(a.dataId),function(e,t,n,s){const a=s.texData.get(e.dataId),i=s.makeTensorInfo(n,e.dtype),o=s.texData.get(i.dataId);Object.assign(o,a),o.refCount=1,o.shape=n,o.dtype=e.dtype;let l=r.slice_util.computeFlatOffset(t,r.util.computeStrides(e.shape));a.slice&&(l+=a.slice.flatOffset),o.slice={flatOffset:l,origDataId:a.slice&&a.slice.origDataId||e.dataId};const u=s.dataRefCount.get(o.slice.origDataId)||1;return s.dataRefCount.set(o.slice.origDataId,u+1),i}(a,l,u,n)}const dv={kernelName:r.Slice,backendName:"webgl",kernelFunc:pv},fv={kernelName:r.BatchToSpaceND,backendName:"webgl",kernelFunc:e=>{const{inputs:t,backend:n,attrs:s}=e,{x:a}=t,{blockShape:i,crops:o}=s;r.util.assert(a.shape.length<=4,(()=>"batchToSpaceND for rank > 4 with a WebGL backend not implemented yet"));const l=i.reduce(((e,t)=>e*t)),u=r.backend_util.getReshaped(a.shape,i,l),c=r.backend_util.getPermuted(u.length,i.length),h=r.backend_util.getReshapedPermuted(a.shape,i,l),p=r.backend_util.getSliceBeginCoords(o,i.length),d=r.backend_util.getSliceSize(h,o,i.length),f=[],m=ix({inputs:{x:a},backend:n,attrs:{shape:u}}),g=gx({inputs:{x:m},backend:n,attrs:{perm:c}}),y=ix({inputs:{x:g},backend:n,attrs:{shape:h}}),b=pv({inputs:{x:y},backend:n,attrs:{begin:p,size:d}});return f.push(m),f.push(g),f.push(y),f.forEach((e=>n.disposeIntermediateTensorInfo(e))),b}},mv={kernelName:r.Bincount,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:a,weights:r}=t,{size:i}=s,o=n.readSync(a.dataId),l=n.readSync(r.dataId),u=Ry(o,l,r.dtype,r.shape,i);return n.makeTensorInfo([i],r.dtype,u)}},gv={kernelName:r.BroadcastArgs,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n}=e,{s0:s,s1:a}=t,i=n.readSync(s.dataId),o=n.readSync(a.dataId),l=r.backend_util.assertAndGetBroadcastShape(Array.from(i),Array.from(o));return n.makeTensorInfo([l.length],"int32",Int32Array.from(l))}},yv=Jb({opSnippet:"return float(a != b);",cpuKernelImpl:eb,dtype:"bool"}),bv={kernelName:r.NotEqual,backendName:"webgl",kernelFunc:yv};function xv(e){const{inputs:t,backend:n}=e,{input:s}=t;return Wb({inputs:{x:n.texData.get(s.dataId).complexTensorInfos.real},backend:n})}const vv={kernelName:r.Real,backendName:"webgl",kernelFunc:xv},wv={kernelName:r.Cast,backendName:"webgl",kernelFunc:function e(t){const{inputs:n,backend:s,attrs:a}=t,{x:i}=n,{dtype:o}=a;if("complex64"===o){if("complex64"===i.dtype)return Wb({inputs:{x:i},backend:s});const t=r.zeros(i.shape),n=e({inputs:{x:i},backend:s,attrs:{dtype:"float32"}}),a=Gb({inputs:{real:n,imag:t},backend:s});return t.dispose(),s.disposeIntermediateTensorInfo(n),a}if("complex64"===i.dtype){const t=xv({inputs:{input:i},backend:s}),n=e({inputs:{x:t},backend:s,attrs:{dtype:o}});return s.disposeIntermediateTensorInfo(t),n}if(!r.util.hasEncodingLoss(i.dtype,o)){const e=Wb({inputs:{x:i},backend:s});return{dataId:e.dataId,shape:e.shape,dtype:o}}if(s.shouldExecuteOnCPU([i])){const e=s.texData.get(i.dataId).values,[t,n,a]=Dy(e,i.shape,i.dtype,o);return s.makeTensorInfo(t,n,a)}if("int32"===o)return function(e,t){const n=new Ab(e.shape,"return float(int(x));"),s=t.runWebGLProgram(n,[e],"int32");return{dataId:s.dataId,shape:s.shape,dtype:s.dtype}}(i,s);if("bool"===o){const e=s.makeTensorInfo([],"bool",r.util.getTypedArrayFromDType("bool",1)),t=yv({inputs:{a:i,b:e},backend:s});return s.disposeIntermediateTensorInfo(e),t}throw new Error(`Error in Cast: failed to cast ${i.dtype} to ${o}`)}},kv="return ceil(x);",Iv=Qb({opSnippet:kv,packedOpSnippet:kv,cpuKernelImpl:Oy}),Sv={kernelName:r.Ceil,backendName:"webgl",kernelFunc:Iv};class Nv{constructor(e){this.variableNames=["A"],this.customUniforms=[{name:"minVal",type:"float"},{name:"maxVal",type:"float"}],this.outputShape=e,this.userCode="\n\n      void main() {\n        float value = getAAtOutCoords();\n        if (isnan(value)) {\n          setOutput(value);\n          return;\n        }\n\n        setOutput(clamp(value, minVal, maxVal));\n      }\n    "}}class Tv{constructor(e){this.variableNames=["A"],this.packedInputs=!0,this.packedOutput=!0,this.customUniforms=[{name:"minVal",type:"float"},{name:"maxVal",type:"float"}],this.outputShape=e,this.userCode="\n      void main() {\n        vec4 value = getAAtOutCoords();\n\n        if (any(isnan(value))) {\n          setOutput(value);\n          return;\n        }\n\n        setOutput(clamp(value, vec4(minVal), vec4(maxVal)));\n      }\n    "}}const Cv={kernelName:r.ClipByValue,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:a}=t,{clipValueMin:i,clipValueMax:o}=s;let l;l=(0,r.env)().getBool("WEBGL_PACK_CLIP")?new Tv(a.shape):new Nv(a.shape);const u=[[i],[o]];return n.runWebGLProgram(l,[a],a.dtype,u)}};class $v{constructor(e){this.variableNames=["real","imag"],this.outputShape=e,this.userCode="\n      void main() {\n        float re = abs(getRealAtOutCoords());\n        float im = abs(getImagAtOutCoords());\n        float mx = max(re, im);\n\n        // sadly the length function in glsl is not underflow-safe\n        // (at least not on Intel GPUs). So the safe solution is\n        // to ensure underflow-safety in all cases.\n        setOutput(\n          mx == 0.0 ? 0.0 : mx * length(vec2(1, min(re, im)/mx))\n        );\n      }\n    "}}function Ev(e,t){return{dataId:t.dataId,dtype:t.dtype,shape:e.shape}}const _v={kernelName:r.ComplexAbs,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n}=e,{x:s}=t,a=n.texData.get(s.dataId),r=new $v(s.shape),i=[Ev(s,a.complexTensorInfos.real),Ev(s,a.complexTensorInfos.imag)];return n.runWebGLProgram(r,i,i[0].dtype)}};class Av{constructor(e){this.outputShape=[],this.outputShape=r.backend_util.computeOutShape(e,1),this.variableNames=e.map(((e,t)=>`T${t}`));const t=new Array(e.length-1);t[0]=e[0][1];for(let n=1;n<t.length;n++)t[n]=t[n-1]+e[n][1];const n=[`if (yC < ${t[0]}) setOutput(getT0(yR, yC));`];for(let e=1;e<t.length;e++){const s=t[e-1];n.push(`else if (yC < ${t[e]}) setOutput(getT${e}(yR, yC-${s}));`)}const s=t.length,a=t[t.length-1];n.push(`else setOutput(getT${s}(yR, yC-${a}));`),this.userCode=`\n      void main() {\n        ivec2 coords = getOutputCoords();\n        int yR = coords.x;\n        int yC = coords.y;\n\n        ${n.join("\n        ")}\n      }\n    `}}class Rv{constructor(e,t){this.packedInputs=!0,this.packedOutput=!0,this.outputShape=[],this.outputShape=r.backend_util.computeOutShape(e,t);const n=this.outputShape,s=n.length,a=hy(s),i=Sb("coords",s),o=["x","y","z","w","u","v"].slice(0,s);this.variableNames=e.map(((e,t)=>`T${t}`));const l=new Array(e.length-1);l[0]=e[0][t];for(let n=1;n<l.length;n++)l[n]=l[n-1]+e[n][t];const u=o[t],c=o.slice(-2),h=o.join();let p=`if (${u} < ${l[0]}) {\n        return getChannel(\n            getT0(${h}), vec2(${c.join()}));\n        }`;for(let e=1;e<l.length;e++){const t=l[e-1];p+=`\n        if (${u} < ${l[e]}  && ${u} >= ${l[e-1]}) {\n          return getChannel(\n            getT${e}(${Fv(o,u,t)}),\n            vec2(${Fv(c,u,t)}));\n        }`}const d=l.length,f=l[l.length-1];p+=`\n        return getChannel(\n          getT${d}(${Fv(o,u,f)}),\n          vec2(${Fv(c,u,f)}));`,this.userCode=`\n      float getValue(${o.map((e=>"int "+e))}) {\n        ${p}\n      }\n\n      void main() {\n        ${a} coords = getOutputCoords();\n        vec4 result = vec4(getValue(${i}), 0., 0., 0.);\n\n        ${i[s-1]} = ${i[s-1]} + 1;\n        if (${i[s-1]} < ${n[s-1]}) {\n          result.g = getValue(${i});\n        }\n\n        ${i[s-2]} = ${i[s-2]} + 1;\n        if (${i[s-2]} < ${n[s-2]}) {\n          result.a = getValue(${i});\n        }\n\n        ${i[s-1]} = ${i[s-1]} - 1;\n        if (${i[s-2]} < ${n[s-2]} &&\n            ${i[s-1]} < ${n[s-1]}) {\n          result.b = getValue(${i});\n        }\n        setOutput(result);\n      }\n    `}}function Fv(e,t,n){const s=e.indexOf(t);return e.map(((e,t)=>t===s?`${e} - ${n}`:e)).join()}function Dv(e){const{inputs:t,backend:n}=e,{input:s}=t;return Wb({inputs:{x:n.texData.get(s.dataId).complexTensorInfos.imag},backend:n})}const Ov={kernelName:r.Imag,backendName:"webgl",kernelFunc:Dv};function Mv(e,t,n){const s=e[0].dtype;if("complex64"===s){const s=e.map((e=>xv({inputs:{input:e},backend:n}))),a=e.map((e=>Dv({inputs:{input:e},backend:n}))),r=Mv(s,t,n),i=Mv(a,t,n),o=Gb({inputs:{real:r,imag:i},backend:n});return s.forEach((e=>n.disposeIntermediateTensorInfo(e))),a.forEach((e=>n.disposeIntermediateTensorInfo(e))),n.disposeIntermediateTensorInfo(r),n.disposeIntermediateTensorInfo(i),o}let a=n.shouldExecuteOnCPU(e);if("string"===s&&(a=!0),a){const a=e.map((e=>{const s=r.util.sizeFromShape(e.shape.slice(t));return ix({inputs:{x:e},backend:n,attrs:{shape:[-1,s]}})})),i=a.map((e=>({vals:n.readSync(e.dataId),shape:e.shape}))),o=r.backend_util.computeOutShape(a.map((e=>e.shape)),1),l=1===a[0].shape[0],u=My(i,o,s,l),c=r.backend_util.computeOutShape(e.map((e=>e.shape)),t),h=n.makeTensorInfo(c,s,u);return a.forEach((e=>n.disposeIntermediateTensorInfo(e))),h}const i=(0,r.env)().getNumber("WEBGL_MAX_TEXTURES_IN_SHADER");if(e.length>i){const s=[];for(let a=0;a<e.length;a+=i){const r=e.slice(a,a+i);s.push(Mv(r,t,n))}const a=Mv(s,t,n);for(const e of s)n.disposeIntermediateTensorInfo(e);return a}if((0,r.env)().getBool("WEBGL_PACK_ARRAY_OPERATIONS")&&e[0].shape.length>1){const a=new Rv(e.map((e=>e.shape)),t);return n.runWebGLProgram(a,e,s)}const{tensors2D:o,outShape:l}=function(e,t,n){const s=r.backend_util.computeOutShape(e.map((e=>e.shape)),t);return{tensors2D:e.map((e=>ix({inputs:{x:e},attrs:{shape:[-1,r.util.sizeFromShape(e.shape.slice(t))]},backend:n}))),outShape:s}}(e,t,n),u=new Av(o.map((e=>e.shape))),c=n.runWebGLProgram(u,o,s);o.forEach((e=>n.disposeIntermediateTensorInfo(e)));const h=ix({inputs:{x:c},attrs:{shape:l},backend:n});return n.disposeIntermediateTensorInfo(c),h}function zv(e){const{inputs:t,backend:n,attrs:s}=e,{axis:a}=s,i=r.util.parseAxisParam(a,t[0].shape)[0],o=t.map((e=>e.shape));r.backend_util.assertParamsConsistent(o,i);const l=r.backend_util.computeOutShape(t.map((e=>e.shape)),i);if(0===r.util.sizeFromShape(l))return n.makeTensorInfo(l,t[0].dtype,[]);const u=t.filter((e=>r.util.sizeFromShape(e.shape)>0));return 1===u.length?Wb({inputs:{x:u[0]},backend:n}):Mv(u,i,n)}const Lv={kernelName:r.Concat,backendName:"webgl",kernelFunc:zv};class Bv{constructor(e,t=!1,n=null,s=!1,a=!1){this.variableNames=["x","W"],this.outputShape=e.outShape;const r=e.padInfo.top,i=e.padInfo.left,o=e.strideHeight,l=e.strideWidth,u=e.dilationHeight,c=e.dilationWidth,h=e.filterHeight,p=e.filterWidth,d=4*Math.floor(e.inChannels/4),f=e.inChannels%4,m="channelsLast"===e.dataFormat,g=m?1:2,y=m?2:3,b=m?3:1;let x="",v="";n&&(x=s?`float activation(float a) {\n          float b = getPreluActivationWeightsAtOutCoords();\n          ${n}\n        }`:a?`float activation(float a) {\n          float b = getLeakyreluAlphaAtOutCoords();\n          ${n}\n        }`:`\n          float activation(float x) {\n            ${n}\n          }\n        `,v="result = activation(result);");const w=t?"result += getBiasAtOutCoords();":"";t&&this.variableNames.push("bias"),s&&this.variableNames.push("preluActivationWeights"),a&&this.variableNames.push("leakyreluAlpha"),this.userCode=`\n      ${x}\n\n      const ivec2 strides = ivec2(${o}, ${l});\n      const ivec2 pads = ivec2(${r}, ${i});\n\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int batch = coords[0];\n        int d2 = coords[${b}];\n\n        ivec2 xRCCorner =\n            ivec2(coords[${g}], coords[${y}]) * strides - pads;\n        int xRCorner = xRCCorner.x;\n        int xCCorner = xRCCorner.y;\n\n        // Convolve x(?, ?, d1) with w(:, :, d1, d2) to get y(yR, yC, d2).\n        // ? = to be determined. : = across all values in that axis.\n        float dotProd = 0.0;\n        for (int wR = 0; wR < ${h}; wR++) {\n          int xR = xRCorner + wR * ${u};\n\n          if (xR < 0 || xR >= ${e.inHeight}) {\n            continue;\n          }\n\n          for (int wC = 0; wC < ${p}; wC++) {\n            int xC = xCCorner + wC * ${c};\n\n            if (xC < 0 || xC >= ${e.inWidth}) {\n              continue;\n            }\n\n            for (int d1 = 0; d1 < ${d}; d1 += 4) {\n              vec4 wValues = vec4(\n                getW(wR, wC, d1, d2),\n                getW(wR, wC, d1 + 1, d2),\n                getW(wR, wC, d1 + 2, d2),\n                getW(wR, wC, d1 + 3, d2)\n              );\n\n              if (${m}) {\n                vec4 xValues = vec4(\n                  getX(batch, xR, xC, d1),\n                  getX(batch, xR, xC, d1 + 1),\n                  getX(batch, xR, xC, d1 + 2),\n                  getX(batch, xR, xC, d1 + 3)\n                );\n                dotProd += dot(xValues, wValues);\n              } else {\n                vec4 xValues = vec4(\n                  getX(batch, d1, xR, xC),\n                  getX(batch, d1 + 1, xR, xC),\n                  getX(batch, d1 + 2, xR, xC),\n                  getX(batch, d1 + 3, xR, xC)\n                );\n                dotProd += dot(xValues, wValues);\n              }\n            }\n\n            if (${1===f}) {\n\n              if (${m}) {\n                dotProd +=\n                    getX(batch, xR, xC, ${d}) *\n                    getW(wR, wC, ${d}, d2);\n              } else {\n                dotProd +=\n                    getX(batch, ${d}, xR, xC) *\n                    getW(wR, wC, ${d}, d2);\n              }\n\n            } else if (${2===f}) {\n              vec2 wValues = vec2(\n                getW(wR, wC, ${d}, d2),\n                getW(wR, wC, ${d} + 1, d2)\n              );\n\n              if (${m}) {\n                vec2 xValues = vec2(\n                  getX(batch, xR, xC, ${d}),\n                  getX(batch, xR, xC, ${d} + 1)\n                );\n                dotProd += dot(xValues, wValues);\n              } else {\n                vec2 xValues = vec2(\n                  getX(batch, ${d}, xR, xC),\n                  getX(batch, ${d} + 1, xR, xC)\n                );\n                dotProd += dot(xValues, wValues);\n              }\n\n            } else if (${3===f}) {\n              vec3 wValues = vec3(\n                getW(wR, wC, ${d}, d2),\n                getW(wR, wC, ${d} + 1, d2),\n                getW(wR, wC, ${d} + 2, d2)\n              );\n\n              if (${m}) {\n                vec3 xValues = vec3(\n                  getX(batch, xR, xC, ${d}),\n                  getX(batch, xR, xC, ${d} + 1),\n                  getX(batch, xR, xC, ${d} + 2)\n                );\n                dotProd += dot(xValues, wValues);\n              } else {\n                vec3 xValues = vec3(\n                  getX(batch, ${d}, xR, xC),\n                  getX(batch, ${d} + 1, xR, xC),\n                  getX(batch, ${d} + 2, xR, xC)\n                );\n                dotProd += dot(xValues, wValues);\n              }\n\n            }\n          }\n        }\n\n        float result = dotProd;\n        ${w}\n        ${v}\n        setOutput(result);\n      }\n    `}}class Pv{constructor(e){this.variableNames=["x","W"],this.outputShape=e.outShape;const t=e.padInfo.front,n=e.padInfo.top,s=e.padInfo.left,a=e.strideDepth,r=e.strideHeight,i=e.strideWidth,o=e.dilationDepth,l=e.dilationHeight,u=e.dilationWidth,c=e.filterDepth,h=e.filterHeight,p=e.filterWidth,d=4*Math.floor(e.inChannels/4),f=e.inChannels%4;this.userCode=`\n      const ivec3 strides = ivec3(${a}, ${r}, ${i});\n      const ivec3 pads = ivec3(${t}, ${n}, ${s});\n\n      void main() {\n        ivec5 coords = getOutputCoords();\n        int batch = coords.x;\n        int d2 = coords.u;\n\n        ivec3 xFRCCorner = ivec3(coords.y, coords.z, coords.w) * strides - pads;\n        int xFCorner = xFRCCorner.x;\n        int xRCorner = xFRCCorner.y;\n        int xCCorner = xFRCCorner.z;\n\n        // Convolve x(?, ?, ?, d1) with w(:, :, :, d1, d2) to get\n        // y(yF, yR, yC, d2). ? = to be determined. : = across all\n        // values in that axis.\n        float dotProd = 0.0;\n        for (int wF = 0; wF < ${c}; wF++) {\n          int xF = xFCorner + wF * ${o};\n\n          if (xF < 0 || xF >= ${e.inDepth}) {\n            continue;\n          }\n\n          for (int wR = 0; wR < ${h}; wR++) {\n            int xR = xRCorner + wR * ${l};\n\n            if (xR < 0 || xR >= ${e.inHeight}) {\n              continue;\n            }\n\n            for (int wC = 0; wC < ${p}; wC++) {\n              int xC = xCCorner + wC * ${u};\n\n              if (xC < 0 || xC >= ${e.inWidth}) {\n                continue;\n              }\n\n              for (int d1 = 0; d1 < ${d}; d1 += 4) {\n                vec4 xValues = vec4(\n                  getX(batch, xF, xR, xC, d1),\n                  getX(batch, xF, xR, xC, d1 + 1),\n                  getX(batch, xF, xR, xC, d1 + 2),\n                  getX(batch, xF, xR, xC, d1 + 3)\n                );\n                vec4 wValues = vec4(\n                  getW(wF, wR, wC, d1, d2),\n                  getW(wF, wR, wC, d1 + 1, d2),\n                  getW(wF, wR, wC, d1 + 2, d2),\n                  getW(wF, wR, wC, d1 + 3, d2)\n                );\n\n                dotProd += dot(xValues, wValues);\n              }\n\n              if (${1===f}) {\n                dotProd +=\n                  getX(batch, xF, xR, xC, ${d}) *\n                  getW(wF, wR, wC, ${d}, d2);\n              } else if (${2===f}) {\n                vec2 xValues = vec2(\n                  getX(batch, xF, xR, xC, ${d}),\n                  getX(batch, xF, xR, xC, ${d} + 1)\n                );\n                vec2 wValues = vec2(\n                  getW(wF, wR, wC, ${d}, d2),\n                  getW(wF, wR, wC, ${d} + 1, d2)\n                );\n                dotProd += dot(xValues, wValues);\n              } else if (${3===f}) {\n                vec3 xValues = vec3(\n                  getX(batch, xF, xR, xC, ${d}),\n                  getX(batch, xF, xR, xC, ${d} + 1),\n                  getX(batch, xF, xR, xC, ${d} + 2)\n                );\n                vec3 wValues = vec3(\n                  getW(wF, wR, wC, ${d}, d2),\n                  getW(wF, wR, wC, ${d} + 1, d2),\n                  getW(wF, wR, wC, ${d} + 2, d2)\n                );\n                dotProd += dot(xValues, wValues);\n              }\n            }\n          }\n        }\n        setOutput(dotProd);\n      }\n    `}}class Vv{constructor(e,t=!1,n=null,s=!1,a=!1){this.variableNames=["x","W"],this.packedInputs=!0,this.packedOutput=!0,this.customUniforms=[{name:"pads",type:"ivec2"},{name:"strides",type:"ivec2"},{name:"dilations",type:"ivec2"},{name:"inDims",type:"ivec2"}],this.outputShape=e.outShape,this.enableShapeUniforms=yy(this.outputShape.length);const i=e.padInfo.left,o=e.strideWidth,l=e.dilationWidth,u=e.filterHeight,c=e.filterWidth,h=c;let p="\n       int xR; int xC; int xCOffset;\n       vec4 wTexel; vec4 previous; vec4 final;";for(let e=0;e<c;e++)p+=`\n           vec4 xTexelC${2*e};\n           int xTexelC${2*e}Ready;\n           vec4 xTexelC${2*e+1};\n           int xTexelC${2*e+1}Ready;\n           vec4 xC${e};`;p+=`\n     for (int r = 0; r < ${u}; r++) {\n      for (int d1 = 0; d1 < ${e.inChannels}; d1 += 2) {\n       `;for(let e=0;e<c;e++)p+=`\n           xTexelC${2*e} = vec4(0.0);\n           xTexelC${2*e}Ready = 0;\n           xTexelC${2*e+1} = vec4(0.0);\n           xTexelC${2*e+1}Ready = 0;\n           xC${e} = vec4(0.0);`;p+="\n         xR = xRCorner + r * dilations[0];\n         if (xR >=0 && xR < inDims[0]) {\n       ";for(let t=0;t<(h+1)/2;t++){const n=2*t;if(p+=`\n           xC = xCCorner + ${n*l};\n           `,1===o){if(n<c&&(i%2==1?(p+=`\n                 xCOffset = xC + 1;\n                 if (xCOffset >= 0 && xCOffset < inDims[1] && xTexelC${n}Ready == 0) {\n                   xTexelC${n} = getX(batch, xR, xCOffset, d1);\n\n                   // Need to manually clear unused channels in case\n                   // we're reading from recycled texture.\n                   if (xCOffset + 1 >= inDims[1]) {\n                     xTexelC${n}.zw = vec2(0.0);\n                   }\n                   xTexelC${n}Ready = 1;\n                 }\n               `,p+=1===l&&n>0?`\n                 xC${n} = vec4(xTexelC${n-2}.zw, xTexelC${n}.xy);\n                 `:`\n                   xCOffset = xC + 1 - 2;\n\n                   if (xCOffset >= 0 && xCOffset < inDims[1]) {\n                     previous = getX(batch, xR, xCOffset, d1);\n\n                     // Need to manually clear unused channels in case\n                     // we're reading from recycled texture.\n                     if (xCOffset + 1 >= inDims[1]) {\n                       previous.zw = vec2(0.0);\n                     }\n\n                     xC${n} = vec4(previous.zw, xTexelC${n}.xy);\n                   } else {\n                     xC${n} = vec4(0.0, 0.0, xTexelC${n}.xy);\n                   }\n                   `):p+=`\n                 if (xC >= 0 && xC < inDims[1] && xTexelC${n}Ready == 0) {\n                   xTexelC${n} = getX(batch, xR, xC, d1);\n                   if (xC + 1 >= inDims[1]) {\n                     xTexelC${n}.zw = vec2(0.0);\n                   }\n                   xTexelC${n}Ready = 1;\n                 }\n\n                 xC${n} = xTexelC${n};\n                 `,n+1<c)){const e=i%2==0?r.util.nearestLargerEven(l):l;l%2==0&&i%2==1||l%2!=0&&i%2!=1?(p+=`\n                   xCOffset = xC + imod(pads[1], 2) + ${e};\n\n                   if (xCOffset >= 0 && xCOffset < inDims[1] && xTexelC${n+1}Ready == 0) {\n                     xTexelC${n+1} = getX(batch, xR, xCOffset, d1);\n\n                     // Need to manually clear unused channels in case\n                     // we're reading from recycled texture.\n                     if (xCOffset + 1 >= inDims[1]) {\n                       xTexelC${n+1}.zw = vec2(0.0);\n                     }\n                     xTexelC${n+1}Ready = 1;\n                   }\n                   `,p+=l>1?`\n                     xCOffset -= 2;\n                     if (xCOffset >= 0 && xCOffset < inDims[1]) {\n                      previous = getX(batch, xR, xCOffset, d1);\n                      xC${n+1} = vec4(previous.zw, xTexelC${n+1}.xy);\n                     } else {\n                      xC${n+1} = vec4(0.0, 0.0, xTexelC${n+1}.xy);\n                     }\n                     `:`\n                     xC${n+1} = vec4(xTexelC${n}.zw, xTexelC${n+1}.xy);\n                     `):p+=1===e?`\n                     xC${n+1} = xTexelC${n};\n                     `:`\n                     xCOffset = xC + ${e};\n\n                     if (xCOffset >= 0 && xCOffset < inDims[1] && xTexelC${n+1}Ready == 0) {\n                       xTexelC${n+1} = getX(batch, xR, xCOffset, d1);\n                       if (xCOffset + 1 >= inDims[1]) {\n                         xTexelC${n+1}.zw = vec2(0.0);\n                       }\n                       xTexelC${n+1}Ready = 1;\n                     }\n\n                     xC${n+1} = xTexelC${n+1};\n                     `}}else n<c&&(i%2==1?(p+=`\n                 xCOffset = xC + 1 - strides[1];\n                 if(xCOffset >= 0 && xCOffset < inDims[1] && xTexelC${n}Ready == 0) {\n                   xTexelC${n} = getX(batch, xR, xCOffset, d1);\n                   // Need to manually clear unused channels in case\n                   // we're reading from recycled texture.\n                   if (xCOffset + 1 >= inDims[1]) {\n                     xTexelC${n}.zw = vec2(0.0);\n                   }\n                   xTexelC${n}Ready = 1;\n                 }\n\n                 if(xC + 1 >= 0 && xC + 1 < inDims[1] && xTexelC${n+1}Ready == 0) {\n                   xTexelC${n+1} = getX(batch, xR, xC + 1, d1);\n                   // Need to manually clear unused channels in case\n                   // we're reading from recycled texture.\n                   if (xC + 2 >= inDims[1]) {\n                     xTexelC${n+1}.zw = vec2(0.0);\n                   }\n                   xTexelC${n+1}Ready = 1;\n                 }\n\n                 xC${n} = vec4(xTexelC${n}.zw, xTexelC${n+1}.zw);\n               `,n+1<c&&(p+=`\n                   final = vec4(0.0);\n                   xCOffset = xC + 1 + strides[1];\n                   if(xCOffset >= 0 && xCOffset < inDims[1]) {\n                     final = getX(batch, xR, xCOffset, d1);\n                   }\n                   xC${n+1} = vec4(xTexelC${n+1}.xy, final.xy);\n                 `)):(p+=`\n                 if(xC >= 0 && xC < inDims[1] && xTexelC${n}Ready == 0) {\n                   xTexelC${n} = getX(batch, xR, xC, d1);\n                   if (xC + 1 >= inDims[1]) {\n                     xTexelC${n}.zw = vec2(0.0);\n                   }\n                   xTexelC${n}Ready = 1;\n                 }\n\n                 xCOffset = xC + strides[1];\n                 if(xCOffset >= 0 && xCOffset < inDims[1] && xTexelC${n+1}Ready == 0) {\n                   xTexelC${n+1} = getX(batch, xR, xCOffset, d1);\n                   if (xCOffset + 1 >= inDims[1]) {\n                     xTexelC${n+1}.zw = vec2(0.);\n                   }\n                   xTexelC${n+1}Ready = 1;\n                 }\n\n                 xC${n} = vec4(\n                   xTexelC${n}.xy, xTexelC${n+1}.xy);\n               `,n+1<c&&(p+=`\n                   xC${n+1} = vec4(xTexelC${n}.zw, xTexelC${n+1}.zw);\n                 `)));n<c&&(p+=`\n             wTexel = getW(r, ${n}, d1, d2);\n             dotProd += xC${n}.xxzz * vec4(wTexel.xy, wTexel.xy);\n             if(d1 + 1 < ${e.inChannels}) {\n               dotProd += xC${n}.yyww * vec4(wTexel.zw, wTexel.zw);\n             }\n           `,n+1<c&&(p+=`\n               wTexel = getW(r, ${n+1}, d1, d2);\n               dotProd += xC${n+1}.xxzz * vec4(wTexel.xy, wTexel.xy);\n               if(d1 + 1 < ${e.inChannels}) {\n                 dotProd += xC${n+1}.yyww * vec4(wTexel.zw, wTexel.zw);\n               }\n             `))}p+="\n     }\n   ",p+="\n     }\n   ",p+="\n     }\n   ";let d="",f="";n&&(d=s?`vec4 activation(vec4 a) {\n           vec4 b = getPreluActivationWeightsAtOutCoords();\n           ${n}\n         }`:a?`vec4 activation(vec4 a) {\n           vec4 b = getLeakyreluAlphaAtOutCoords();\n           ${n}\n         }`:`vec4 activation(vec4 x) {\n           ${n}\n         }`,f="result = activation(result);");const m=t?"result += getBiasAtOutCoords();":"";t&&this.variableNames.push("bias"),s&&this.variableNames.push("preluActivationWeights"),a&&this.variableNames.push("leakyreluAlpha"),this.userCode=`\n       ${d}\n\n       void main() {\n         ivec4 coords = getOutputCoords();\n         int batch = coords.x;\n         ivec2 xRCCorner = coords.yz * strides - pads;\n         int d2 = coords.w;\n         int xRCorner = xRCCorner.x;\n         int xCCorner = xRCCorner.y;\n\n         //intialize dotProd with a small epsilon seems to reduce GPU accuracy loss.\n         vec4 dotProd = vec4(0.000000000000001);\n\n         ${p}\n\n         vec4 result = dotProd - vec4(0.000000000000001);\n         ${m}\n         ${f}\n         setOutput(result);\n       }\n     `}}class Wv{constructor(e,t){this.variableNames=["A"],this.packedInputs=!0,this.packedOutput=!0,this.customUniforms=[{name:"inputShape",type:"ivec4"},{name:"pad",type:"ivec2"},{name:"stride",type:"ivec2"},{name:"dilation",type:"ivec2"},{name:"inChannels",type:"int"},{name:"itemsPerBlockRow",type:"int"},{name:"outWidth",type:"int"}],this.outputShape=e,this.enableShapeUniforms=yy(this.outputShape.length);const{dataFormat:n}=t,s=Yg(),a="channelsLast"===n,r=a?1:2,i=a?2:3,o=this.enableShapeUniforms?"if(blockIndex < outShape[2] && pos < outShape[1]) {":`if(blockIndex < ${e[2]} && pos < ${e[1]}) {`;let l="";for(let e=0;e<=1;e++)for(let t=0;t<=1;t++)l+=`\n          blockIndex = rc.z + ${t};\n          pos = rc.y + ${e};\n\n          ${o}\n            offsetY = int(blockIndex / outWidth) * stride[0] - pad[0];\n            d0 = offsetY + dilation[0] * (pos / itemsPerBlockRow);\n\n            if(d0 < inputShape[${r}] && d0 >= 0) {\n              // Use custom imod instead mod. On Intel GPU, mod may generate\n              // unexpected value.\n              // https://github.com/tensorflow/tfjs/issues/5447\n              offsetX = imod(blockIndex, outWidth) * stride[1] - pad[1];\n              d1 = offsetX + dilation[1] * (imod(pos, itemsPerBlockRow) /\n                  inChannels);\n\n              if(d1 < inputShape[${i}] && d1 >= 0) {\n\n                ch = imod(pos, inChannels);\n\n                if (${a}) {\n                  innerDims = vec2(d1, ch);\n                  result[${2*e+t}] = getChannel(\n                    getA(rc.x, d0, int(innerDims.x),\n                    int(innerDims.y)), innerDims);\n                } else {\n                  innerDims = vec2(d0, d1);\n                  result[${2*e+t}] = getChannel(\n                    getA(rc.x, ch, int(innerDims.x),\n                    int(innerDims.y)), innerDims);\n                }\n              }\n            }\n          }\n        `;this.userCode=`\n      void main() {\n        ivec3 rc = getOutputCoords();\n\n        vec4 result = vec4(0);\n\n        int blockIndex, pos, offsetY, d0, offsetX, d1, ch;\n        vec2 innerDims;\n\n        ${l}\n\n        ${s.output} = result;\n      }\n    `}}function Uv(e,t){const n=e.length;return n>=3?t?[...e.slice(0,-3),e[n-3]*e[n-2],e[n-1]]:[...e.slice(0,-3),e[n-3],e[n-2]*e[n-1]]:!t&&1===n&&e[0]>1?[e[0],1]:null}function Gv({x:e,filter:t,convInfo:n,backend:s,bias:a=null,preluActivationWeights:i=null,leakyreluAlpha:o=0,activation:l=null}){const u=e.shape,c=s.texData.get(e.dataId),h=n.inChannels,p=u[0]*u[1]*u[2],d=n.outChannels,f="channelsLast"===n.dataFormat;let m;const g=[];if(null!=i){const e=Uv(i.shape,f);null!=e&&(i=ix({inputs:{x:i},backend:s,attrs:{shape:e}}),g.push(i))}if(null!=a){const e=Uv(a.shape,f);null!=e&&(a=ix({inputs:{x:a},backend:s,attrs:{shape:e}}),g.push(a))}if((1!==p&&1!==d||!(h>1e3))&&c.isPacked&&f&&null!=c.texture&&u[2]%2!=0&&r.util.arraysEqual(c.shape.slice(-3),u.slice(-3))){const h=u[0]*u[1]*(u[2]+1),p={dataId:e.dataId,shape:[1,h,n.inChannels],dtype:e.dtype},d=c.shape;c.shape=c.shape.slice(),c.shape[c.shape.length-2]++,r.util.assert(Wg(c.shape,p.shape),(()=>`packed reshape ${c.shape} to ${p.shape} isn't free`));const f=ix({inputs:{x:t},backend:s,attrs:{shape:[1,n.inChannels,n.outChannels]}});g.push(f);const y=bx({a:p,b:f,backend:s,transposeA:!1,transposeB:!1,bias:a,activation:l,preluActivationWeights:i,leakyreluAlpha:o}),b=s.texData.get(y.dataId);r.util.assert(b.isPacked,(()=>"batchMatMul result is expected to be packed")),c.shape=d,b.shape=n.outShape,m=Wb({inputs:{x:y},backend:s}),m.shape=n.outShape,g.push(y)}else{const r=n.outHeight*n.outWidth,u=ix({inputs:{x:e},backend:s,attrs:{shape:f?[n.batchSize,r,n.inChannels]:[n.batchSize,n.inChannels,r]}}),c=ix({inputs:{x:t},backend:s,attrs:{shape:[1,n.inChannels,n.outChannels]}}),h=bx({a:f?u:c,b:f?c:u,transposeA:!f,transposeB:!1,backend:s,bias:a,activation:l,preluActivationWeights:i,leakyreluAlpha:o});m=ix({inputs:{x:h},backend:s,attrs:{shape:n.outShape}}),g.push(u),g.push(c),g.push(h)}for(const e of g)s.disposeIntermediateTensorInfo(e);return m}function Hv({x:e,filter:t,convInfo:n,backend:s,bias:a=null,preluActivationWeights:i=null,leakyreluAlpha:o=0,activation:l=null}){const{filterWidth:u,filterHeight:c,inChannels:h,outWidth:p,outHeight:d,dataFormat:f}=n,m="channelsLast"===f,g=u*c*h,y=d*p,b=[n.batchSize,g,y],x=[];if(null!=i){const e=Uv(i.shape,m);null!=e&&(i=ix({inputs:{x:i},backend:s,attrs:{shape:e}}),x.push(i))}if(null!=a){const e=Uv(a.shape,m);null!=e&&(a=ix({inputs:{x:a},backend:s,attrs:{shape:e}}),x.push(a))}const v=ix({inputs:{x:t},backend:s,attrs:{shape:[1,g,r.util.sizeFromShape(t.shape)/g]}});x.push(v);const w=new Wv(b,n),k=[e.shape,[n.padInfo.top,n.padInfo.left],[n.strideHeight,n.strideWidth],[n.dilationHeight,n.dilationWidth],[n.inChannels],[n.filterWidth*n.inChannels],[n.outWidth]],I=s.runWebGLProgram(w,[e],"float32",k),S=ix({inputs:{x:I},backend:s,attrs:{shape:b}});x.push(I),x.push(S);const N=null!=a,T=null!=i,C="leakyrelu"===l,$=l?ex(l,!0):null,E=new tx(m?S.shape:v.shape,m?v.shape:S.shape,m?[n.batchSize,y,n.outChannels]:[n.batchSize,n.outChannels,y],!0,!1,N,$,T,C),_=m?[S,v]:[v,S];if(a&&_.push(a),T&&_.push(i),C){const e=s.makeTensorInfo([],"float32",r.util.createScalarValue(o,"float32"));_.push(e),x.push(e)}const A=s.runWebGLProgram(E,_,"float32"),R=ix({inputs:{x:A},backend:s,attrs:{shape:n.outShape}});x.push(A);for(const e of x)s.disposeIntermediateTensorInfo(e);return R}const qv={kernelName:r.Conv2D,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:a,filter:i}=t,{strides:o,pad:l,dataFormat:u,dilations:c,dimRoundingMode:h}=s,p=r.backend_util.convertConv2DDataFormat(u),d=r.backend_util.computeConv2DInfo(a.shape,i.shape,o,c,l,h,!1,p);let f;if(1!==d.filterHeight||1!==d.filterWidth||1!==d.dilationHeight||1!==d.dilationWidth||1!==d.strideHeight||1!==d.strideWidth||"SAME"!==d.padInfo.type&&"VALID"!==d.padInfo.type)if(d.strideWidth<=2&&"channelsLast"===p&&(0,r.env)().getBool("WEBGL_EXP_CONV")){const e=new Vv(d),t=[[d.padInfo.top,d.padInfo.left],[d.strideHeight,d.strideWidth],[d.dilationHeight,d.dilationWidth],[d.inHeight,d.inWidth]];f=n.runWebGLProgram(e,[a,i],"float32",t)}else if((0,r.env)().getBool("WEBGL_CONV_IM2COL"))f=Hv({x:a,filter:i,convInfo:d,backend:n});else{const e=new Bv(d);f=n.runWebGLProgram(e,[a,i],"float32")}else f=Gv({x:a,filter:i,convInfo:d,backend:n});const m=ix({inputs:{x:f},backend:n,attrs:{shape:d.outShape}});return n.disposeIntermediateTensorInfo(f),m}};class Xv{constructor(e){this.variableNames=["x","dy"],this.outputShape=e.filterShape;const t=e.strideHeight,n=e.strideWidth,s=e.padInfo.top,a=e.padInfo.left,r="channelsLast"===e.dataFormat;this.userCode=`\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int wR = coords.x;\n        int wC = coords.y;\n        int d1 = coords.z;\n        int d2 = coords.w;\n\n        // Convolve x(?, ?, d1) with dy(:, :, d2) to get dw(wR, wC, d1, d2).\n        // ? = to be determined. : = across all values in that axis.\n        float dotProd = 0.0;\n\n        for (int b = 0; b < ${e.batchSize}; b++) {\n          for (int yR = 0; yR < ${e.outHeight}; yR++) {\n            int xR = wR + yR * ${t} - ${s};\n\n            if (xR < 0 || xR >= ${e.inHeight}) {\n              continue;\n            }\n\n            for (int yC = 0; yC < ${e.outWidth}; yC++) {\n              int xC = wC + yC * ${n} - ${a};\n\n              if (xC < 0 || xC >= ${e.inWidth}) {\n                continue;\n              }\n\n              if (${r}) {\n                float dyValue = getDy(b, yR, yC, d2);\n                float xValue = getX(b, xR, xC, d1);\n                dotProd += (xValue * dyValue);\n              } else {\n                float dyValue = getDy(b, d2, yR, yC);\n                float xValue = getX(b, d1, xR, xC);\n                dotProd += (xValue * dyValue);\n              }\n\n            }\n          }\n        }\n        setOutput(dotProd);\n      }\n    `}}class jv{constructor(e){this.variableNames=["dy","W"],this.outputShape=e.inShape;const t=e.filterHeight,n=e.filterWidth,s=e.strideHeight,a=e.strideWidth,r="channelsLast"===e.dataFormat,i=t-1-e.padInfo.top,o=n-1-e.padInfo.left,l=r?1:2,u=r?2:3,c=r?3:1;this.userCode=`\n      const ivec2 pads = ivec2(${i}, ${o});\n\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int batch = coords[0];\n        int d1 = coords[${c}];\n\n        ivec2 dyCorner = ivec2(coords[${l}], coords[${u}]) - pads;\n        int dyRCorner = dyCorner.x;\n        int dyCCorner = dyCorner.y;\n\n        // Convolve dy(?, ?, d2) with w(:, :, d1, d2) to compute dx(xR, xC, d1).\n        // ? = to be determined. : = across all values in that axis.\n        float dotProd = 0.0;\n        for (int wR = 0; wR < ${t}; wR++) {\n          float dyR = float(dyRCorner + wR) / ${s}.0;\n\n          if (dyR < 0.0 || dyR >= ${e.outHeight}.0 || fract(dyR) > 0.0) {\n            continue;\n          }\n          int idyR = int(dyR);\n\n          int wRPerm = ${t} - 1 - wR;\n\n          for (int wC = 0; wC < ${n}; wC++) {\n            float dyC = float(dyCCorner + wC) / ${a}.0;\n\n            if (dyC < 0.0 || dyC >= ${e.outWidth}.0 ||\n                fract(dyC) > 0.0) {\n              continue;\n            }\n            int idyC = int(dyC);\n\n            int wCPerm = ${n} - 1 - wC;\n\n            for (int d2 = 0; d2 < ${e.outChannels}; d2++) {\n\n              if (${r}) {\n                float xValue = getDy(batch, idyR, idyC, d2);\n                float wValue = getW(wRPerm, wCPerm, d1, d2);\n                dotProd += xValue * wValue;\n              } else {\n                float xValue = getDy(batch, d2, idyR, idyC);\n                float wValue = getW(wRPerm, wCPerm, d1, d2);\n                dotProd += xValue * wValue;\n              }\n\n            }\n          }\n        }\n        setOutput(dotProd);\n      }\n    `}}class Kv{constructor(e){this.variableNames=["x","dy"],this.outputShape=e.filterShape;const t=e.strideDepth,n=e.strideHeight,s=e.strideWidth,a=e.padInfo.front,r=e.padInfo.top,i=e.padInfo.left;this.userCode=`\n      void main() {\n        ivec5 coords = getOutputCoords();\n        int wF = coords.x;\n        int wR = coords.y;\n        int wC = coords.z;\n        int d1 = coords.w;\n        int d2 = coords.u;\n\n        float dotProd = 0.0;\n\n        for (int b = 0; b < ${e.batchSize}; b++) {\n          for (int yF = 0; yF < ${e.outDepth}; yF++) {\n            int xF = wF + yF * ${t} - ${a};\n\n            if (xF < 0 || xF >= ${e.inDepth}) {\n              continue;\n            }\n\n            for (int yR = 0; yR < ${e.outHeight}; yR++) {\n              int xR = wR + yR * ${n} - ${r};\n\n              if (xR < 0 || xR >= ${e.inHeight}) {\n                continue;\n              }\n\n              for (int yC = 0; yC < ${e.outWidth}; yC++) {\n                int xC = wC + yC * ${s} - ${i};\n\n                if (xC < 0 || xC >= ${e.inWidth}) {\n                  continue;\n                }\n\n                float dyValue = getDy(b, yF, yR, yC, d2);\n                float xValue = getX(b, xF, xR, xC, d1);\n                dotProd += (xValue * dyValue);\n              }\n            }\n          }\n        }\n        setOutput(dotProd);\n      }\n    `}}class Yv{constructor(e){this.variableNames=["dy","W"],this.outputShape=e.inShape;const t=e.filterDepth,n=e.filterHeight,s=e.filterWidth,a=e.strideDepth,r=e.strideHeight,i=e.strideWidth,o=t-1-e.padInfo.front,l=n-1-e.padInfo.top,u=s-1-e.padInfo.left;this.userCode=`\n      const ivec3 pads = ivec3(${o}, ${l}, ${u});\n\n      void main() {\n        ivec5 coords = getOutputCoords();\n        int batch = coords.x;\n        int d1 = coords.u;\n\n\n        ivec3 dyCorner = ivec3(coords.y, coords.z, coords.w) - pads;\n        int dyFCorner = dyCorner.x;\n        int dyRCorner = dyCorner.y;\n        int dyCCorner = dyCorner.z;\n\n        float dotProd = 0.0;\n        for (int wF = 0; wF < ${t}; wF++) {\n          float dyF = float(dyFCorner + wF) / ${a}.0;\n\n          if (dyF < 0.0 || dyF >= ${e.outDepth}.0 || fract(dyF) > 0.0) {\n            continue;\n          }\n          int idyF = int(dyF);\n\n          int wFPerm = ${t} - 1 - wF;\n\n          for (int wR = 0; wR < ${n}; wR++) {\n            float dyR = float(dyRCorner + wR) / ${r}.0;\n\n            if (dyR < 0.0 || dyR >= ${e.outHeight}.0 ||\n              fract(dyR) > 0.0) {\n              continue;\n            }\n            int idyR = int(dyR);\n\n            int wRPerm = ${n} - 1 - wR;\n\n            for (int wC = 0; wC < ${s}; wC++) {\n              float dyC = float(dyCCorner + wC) / ${i}.0;\n\n              if (dyC < 0.0 || dyC >= ${e.outWidth}.0 ||\n                  fract(dyC) > 0.0) {\n                continue;\n              }\n              int idyC = int(dyC);\n\n              int wCPerm = ${s} - 1 - wC;\n\n              for (int d2 = 0; d2 < ${e.outChannels}; d2++) {\n                float xValue = getDy(batch, idyF, idyR, idyC, d2);\n                float wValue = getW(wFPerm, wRPerm, wCPerm, d1, d2);\n                dotProd += xValue * wValue;\n              }\n            }\n          }\n        }\n        setOutput(dotProd);\n      }\n    `}}const Zv={kernelName:r.Conv2DBackpropFilter,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:a,dy:i}=t,{strides:o,pad:l,dataFormat:u,dimRoundingMode:c,filterShape:h}=s,p=r.backend_util.convertConv2DDataFormat(u),d=r.backend_util.computeConv2DInfo(a.shape,h,o,1,l,c,!1,p),f=new Xv(d);return n.runWebGLProgram(f,[a,i],"float32")}},Qv={kernelName:r.Conv2DBackpropInput,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{dy:a,filter:i}=t,{inputShape:o,strides:l,pad:u,dataFormat:c,dimRoundingMode:h}=s,p=r.backend_util.convertConv2DDataFormat(c),d=r.backend_util.computeConv2DInfo(o,i.shape,l,1,u,h,!1,p),f=new jv(d);return n.runWebGLProgram(f,[a,i],"float32")}},Jv={kernelName:r.Conv3D,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:a,filter:i}=t,{strides:o,pad:l,dilations:u}=s,c=r.backend_util.computeConv3DInfo(a.shape,i.shape,o,u,l),h=new Pv(c);return n.runWebGLProgram(h,[a,i],"float32")}},ew={kernelName:r.Conv3DBackpropFilterV2,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:a,dy:i}=t,{strides:o,pad:l,filterShape:u}=s,c=r.backend_util.computeConv3DInfo(a.shape,u,o,1,l),h=new Kv(c);return n.runWebGLProgram(h,[a,i],"float32")}},tw={kernelName:r.Conv3DBackpropInputV2,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{dy:a,filter:i}=t,{pad:o,strides:l,inputShape:u}=s,c=r.backend_util.computeConv3DInfo(u,i.shape,l,1,o),h=new Yv(c);return n.runWebGLProgram(h,[a,i],"float32")}},nw=Qb({opSnippet:"if (isnan(x)) return x;\n  return cos(x);\n"}),sw={kernelName:r.Cos,backendName:"webgl",kernelFunc:nw},aw=Qb({opSnippet:"\n  float e2x = exp(-x);\n  return (e2x + 1.0 / e2x) / 2.0;\n"}),rw={kernelName:r.Cosh,backendName:"webgl",kernelFunc:aw};class iw{constructor(e,t,n,s,a){this.variableNames=["Image","Boxes","BoxInd"],this.outputShape=[];const[r,i,o,l]=e,[u]=t,[c,h]=n;this.outputShape=[u,c,h,l];const p="bilinear"===s?1:0,[d,f]=[i-1+".0",o-1+".0"],[m,g,y]=c>1?[""+(i-1)/(c-1),"(y2-y1) * height_ratio",`y1*${d} + float(y)*(height_scale)`]:["0.0","0.0",`0.5 * (y1+y2) * ${d}`],[b,x,v]=h>1?[""+(o-1)/(h-1),"(x2-x1) * width_ratio",`x1*${f} + float(x)*(width_scale)`]:["0.0","0.0",`0.5 * (x1+x2) * ${f}`];this.userCode=`\n      const float height_ratio = float(${m});\n      const float width_ratio = float(${b});\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int b = coords[0];\n        int y = coords[1];\n        int x = coords[2];\n        int d = coords[3];\n\n        // get box vals\n        float y1 = getBoxes(b,0);\n        float x1 = getBoxes(b,1);\n        float y2 = getBoxes(b,2);\n        float x2 = getBoxes(b,3);\n\n        // get image in batch index\n        int bInd = round(getBoxInd(b));\n        if(bInd < 0 || bInd >= ${r}) {\n          return;\n        }\n\n        float height_scale = ${g};\n        float width_scale = ${x};\n\n        float in_y = ${y};\n        if( in_y < 0.0 || in_y > ${d} ) {\n          setOutput(float(${a}));\n          return;\n        }\n        float in_x = ${v};\n        if( in_x < 0.0 || in_x > ${f} ) {\n          setOutput(float(${a}));\n          return;\n        }\n\n        vec2 sourceFracIndexCR = vec2(in_x,in_y);\n        if(${p} == 1) {\n          // Compute the four integer indices.\n          ivec2 sourceFloorCR = ivec2(sourceFracIndexCR);\n          ivec2 sourceCeilCR = ivec2(ceil(sourceFracIndexCR));\n\n          float topLeft = getImage(b, sourceFloorCR.y, sourceFloorCR.x, d);\n          float bottomLeft = getImage(b, sourceCeilCR.y, sourceFloorCR.x, d);\n          float topRight = getImage(b, sourceFloorCR.y, sourceCeilCR.x, d);\n          float bottomRight = getImage(b, sourceCeilCR.y, sourceCeilCR.x, d);\n\n          vec2 fracCR = sourceFracIndexCR - vec2(sourceFloorCR);\n\n          float top = topLeft + (topRight - topLeft) * fracCR.x;\n          float bottom = bottomLeft + (bottomRight - bottomLeft) * fracCR.x;\n          float newValue = top + (bottom - top) * fracCR.y;\n          setOutput(newValue);\n        } else {\n          // Compute the coordinators of nearest neighbor point.\n          ivec2 sourceNearestCR = ivec2(floor(\n            sourceFracIndexCR + vec2(0.5,0.5)));\n          float newValue = getImage(b, sourceNearestCR.y, sourceNearestCR.x, d);\n          setOutput(newValue);\n        }\n      }\n    `}}const ow={kernelName:r.CropAndResize,backendName:"webgl",kernelFunc:e=>{const{inputs:t,backend:n,attrs:s}=e,{image:a,boxes:r,boxInd:i}=t,{cropSize:o,method:l,extrapolationValue:u}=s,c=new iw(a.shape,r.shape,o,l,u);return n.runWebGLProgram(c,[a,r,i],"float32")}};var lw;!function(e){e.Prod="*",e.Sum="+"}(lw||(lw={}));class uw{constructor(e,t,n,s){this.op=e,this.outputShape=t,this.variableNames=["x"],this.customUniforms=[{name:"index",type:"float"}];const a=this.outputShape.length,r=this.op===lw.Prod?"1.0":"0.0",i=n?r:`getX(${cw(a,"coords",this.op)})`,o=this.outputShape[this.outputShape.length-1];let l="",u="";n?(l=s?"end != "+(o-1):"end != 0",u=s?"end + 1":"end - 1"):(l=s?`end + pow2 < ${o}`:"end >= pow2",u=s?"end + pow2":"end - pow2"),this.userCode=`\n      void main() {\n        ${hy(a)} coords = getOutputCoords();\n        int end = ${hw(a,"coords",this.op)};\n        float val = ${i};\n        int pow2 = int(pow(2.0, index));\n        if (${l}) {\n          int idx = ${u};\n          ${hw(a,"coords",this.op)} = idx;\n          val ${this.op}= getX(${cw(a,"coords",this.op)});\n        }\n        setOutput(val);\n      }\n    `}}function cw(e,t,n){if(1===e)return`${t}`;if(2===e)return`${t}.x, ${t}.y`;if(3===e)return`${t}.x, ${t}.y, ${t}.z`;if(4===e)return`${t}.x, ${t}.y, ${t}.z, ${t}.w`;throw new Error(`Cumulative ${n} for rank ${e} is not yet supported`)}function hw(e,t,n){if(1===e)return`${t}`;if(2===e)return`${t}.y`;if(3===e)return`${t}.z`;if(4===e)return`${t}.w`;throw new Error(`Cumulative ${n} for rank ${e} is not yet supported`)}function pw(e,t,n,s,a,i){const o=t.shape.length,l=r.backend_util.getAxesPermutation([s],o);let u=t;null!=l&&(u=gx({inputs:{x:t},backend:n,attrs:{perm:l}}));const c=r.backend_util.getInnerMostAxes(1,o)[0];if(c!==o-1)throw new Error(`WebGL cumprod shader expects an inner-most axis=${t.shape.length-1} but got axis=${s}`);const h=u.shape[c];let p=Wb({inputs:{x:u},backend:n});for(let t=0;t<=Math.ceil(Math.log2(h))-1;t++){const s=new uw(e,u.shape,!1,i),a=[[t]],r=p;p=n.runWebGLProgram(s,[p],p.dtype,a),n.disposeIntermediateTensorInfo(r)}if(a){const t=new uw(e,u.shape,a,i),s=p;p=n.runWebGLProgram(t,[p],p.dtype),n.disposeIntermediateTensorInfo(s)}if(null!=l){const e=gx({inputs:{x:p},backend:n,attrs:{perm:r.backend_util.getUndoAxesPermutation(l)}});return n.disposeIntermediateTensorInfo(p),n.disposeIntermediateTensorInfo(u),e}return p}const dw={kernelName:r.Cumprod,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:a}=t,{axis:r,exclusive:i,reverse:o}=s;return pw(lw.Prod,a,n,r,i,o)}},fw={kernelName:r.Cumsum,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:a}=t,{axis:r,exclusive:i,reverse:o}=s;return pw(lw.Sum,a,n,r,i,o)}},mw={kernelName:r.DenseBincount,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:a,weights:r}=t,{size:i,binaryOutput:o}=s;if(1===a.shape.length){const e=n.readSync(a.dataId),t=n.readSync(r.dataId),s=Ry(e,t,r.dtype,r.shape,i);return n.makeTensorInfo([i],r.dtype,s)}if(2===a.shape.length){const e=n.bufferSync(a),t=n.bufferSync(r),s=Fy(e,t,i,o);return n.makeTensorInfo(s.shape,r.dtype,s.values)}throw new Error(`Error in denseBincount: input must be at most rank 2, but got rank${a.shape.length}.`)}};class gw{constructor(e,t,n){this.variableNames=["x"],this.outputShape=[],this.outputShape=e,this.blockSize=t,this.dataFormat=n,this.userCode=`\n    void main() {\n      ivec4 coords = getOutputCoords();\n      int b = coords[0];\n      int h = ${this.getHeightCoordString()};\n      int w = ${this.getWidthCoordString()};\n      int d = ${this.getDepthCoordString()};\n\n      int in_h = h / ${t};\n      int offset_h = imod(h, ${t});\n      int in_w = w / ${t};\n      int offset_w = imod(w, ${t});\n      int offset_d = (offset_h * ${t} + offset_w) *\n        ${this.getOutputDepthSize()};\n      int in_d = d + offset_d;\n\n      float result = ${this.getInputSamplingString()};\n      setOutput(result);\n    }\n  `}getHeightCoordString(){return"NHWC"===this.dataFormat?"coords[1]":"coords[2]"}getWidthCoordString(){return"NHWC"===this.dataFormat?"coords[2]":"coords[3]"}getDepthCoordString(){return"NHWC"===this.dataFormat?"coords[3]":"coords[1]"}getOutputDepthSize(){return"NHWC"===this.dataFormat?this.outputShape[3]:this.outputShape[1]}getInputSamplingString(){return"NHWC"===this.dataFormat?"getX(b, in_h, in_w, in_d)":"getX(b, in_d, in_h, in_w)"}}const yw={kernelName:r.DepthToSpace,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:a}=t,{blockSize:r,dataFormat:i}=s,o=a.shape[0],l=("NHWC"===i?a.shape[1]:a.shape[2])*r,u=("NHWC"===i?a.shape[2]:a.shape[3])*r,c=("NHWC"===i?a.shape[3]:a.shape[1])/(r*r),h=new gw("NHWC"===i?[o,l,u,c]:[o,c,l,u],r,i);return n.runWebGLProgram(h,[a],a.dtype)}};class bw{constructor(e,t=!1,n=null,s=!1,a=!1){this.variableNames=["x","W"],this.customUniforms=[{name:"pads",type:"ivec2"},{name:"strides",type:"ivec2"},{name:"dilations",type:"ivec2"},{name:"inDims",type:"ivec2"}],this.outputShape=e.outShape,this.enableShapeUniforms=yy(this.outputShape.length);const r=e.filterHeight,i=e.filterWidth,o=e.outChannels/e.inChannels;let l="",u="";n&&(l=s?`float activation(float a) {\n          float b = getPreluActivationWeightsAtOutCoords();\n          ${n}\n        }`:a?`float activation(float a) {\n          float b = getLeakyreluAlphaAtOutCoords();\n          ${n}\n        }`:`\n          float activation(float x) {\n            ${n}\n          }\n        `,u="result = activation(result);");const c=t?"result += getBiasAtOutCoords();":"";t&&this.variableNames.push("bias"),s&&this.variableNames.push("preluActivationWeights"),a&&this.variableNames.push("leakyreluAlpha"),this.userCode=`\n      ${l}\n\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int batch = coords.x;\n        ivec2 xRCCorner = coords.yz * strides - pads;\n        int d2 = coords.w;\n        int d1 = d2 / ${o};\n        int q = d2 - d1 * ${o};\n\n        int xRCorner = xRCCorner.x;\n        int xCCorner = xRCCorner.y;\n\n        // Convolve x(?, ?, d1) with w(:, :, d1, q) to get y(yR, yC, d2).\n        // ? = to be determined. : = across all values in that axis.\n        float dotProd = 0.0;\n        // TO DO(dsmilkov): Flatten the two for loops and vec4 the operations.\n        for (int wR = 0; wR < ${r}; wR++) {\n          int xR = xRCorner + wR * dilations[0];\n\n          if (xR < 0 || xR >= inDims[0]) {\n            continue;\n          }\n\n          for (int wC = 0; wC < ${i}; wC++) {\n            int xC = xCCorner + wC * dilations[1];\n\n            if (xC < 0 || xC >= inDims[1]) {\n              continue;\n            }\n\n            float xVal = getX(batch, xR, xC, d1);\n            float wVal = getW(wR, wC, d1, q);\n            dotProd += xVal * wVal;\n          }\n        }\n\n        float result = dotProd;\n        ${c}\n        ${u}\n        setOutput(result);\n      }\n    `}}class xw{constructor(e,t=!1,n=null,s=!1,a=!1){this.variableNames=["x","W"],this.packedInputs=!0,this.packedOutput=!0,this.customUniforms=[{name:"pads",type:"ivec2"},{name:"strides",type:"ivec2"},{name:"dilations",type:"ivec2"},{name:"inDims",type:"ivec2"}],this.outputShape=e.outShape,this.enableShapeUniforms=yy(this.outputShape.length);const i=e.outChannels/e.inChannels,o=e.padInfo.left,l=e.strideWidth,u=e.dilationWidth,c=e.filterHeight,h=e.filterWidth,p=h;let d="\n      int xR; int xC; int xCOffset;\n      vec4 wTexel; vec4 previous; vec4 final;";for(let e=0;e<h;e++)d+=`\n          vec4 xTexelC${2*e};\n          int xTexelC${2*e}Ready;\n          vec4 xTexelC${2*e+1};\n          int xTexelC${2*e+1}Ready;\n          vec4 xC${e};`;d+=`\n    for (int r = 0; r < ${c}; r++) {\n      `;for(let e=0;e<h;e++)d+=`\n          xTexelC${2*e} = vec4(0.0);\n          xTexelC${2*e}Ready = 0;\n          xTexelC${2*e+1} = vec4(0.0);\n          xTexelC${2*e+1}Ready = 0;\n          xC${e} = vec4(0.0);`;d+="\n        xR = xRCorner + r * dilations[0];\n        if (xR >=0 && xR < inDims[0]) {\n      ";for(let e=0;e<(p+1)/2;e++){const t=2*e;if(d+=`\n          xC = xCCorner + ${t*u};\n          `,1===l){if(t<h&&(o%2==1?(d+=`\n                xCOffset = xC + 1;\n                if (xCOffset >= 0 && xCOffset < inDims[1] && xTexelC${t}Ready == 0) {\n                  xTexelC${t} = getX(batch, xR, xCOffset, d1);\n\n                  // Need to manually clear unused channels in case\n                  // we're reading from recycled texture.\n                  if (xCOffset + 1 >= inDims[1]) {\n                    xTexelC${t}.zw = vec2(0.0);\n                  }\n                  xTexelC${t}Ready = 1;\n                }\n              `,d+=1===u&&t>0?`\n                xC${t} = vec4(xTexelC${t-2}.zw, xTexelC${t}.xy);\n                `:`\n                  xCOffset = xC + 1 - 2;\n\n                  if (xCOffset >= 0 && xCOffset < inDims[1]) {\n                    previous = getX(batch, xR, xCOffset, d1);\n\n                    // Need to manually clear unused channels in case\n                    // we're reading from recycled texture.\n                    if (xCOffset + 1 >= inDims[1]) {\n                      previous.zw = vec2(0.0);\n                    }\n\n                    xC${t} = vec4(previous.zw, xTexelC${t}.xy);\n                  } else {\n                    xC${t} = vec4(0.0, 0.0, xTexelC${t}.xy);\n                  }\n                  `):d+=`\n                if (xC >= 0 && xC < inDims[1] && xTexelC${t}Ready == 0) {\n                  xTexelC${t} = getX(batch, xR, xC, d1);\n                  if (xC + 1 >= inDims[1]) {\n                    xTexelC${t}.zw = vec2(0.0);\n                  }\n                  xTexelC${t}Ready = 1;\n                }\n\n                xC${t} = xTexelC${t};\n                `,t+1<h)){const e=o%2==0?r.util.nearestLargerEven(u):u;u%2==0&&o%2==1||u%2!=0&&o%2!=1?(d+=`\n                  xCOffset = xC + imod(pads[1], 2) + ${e};\n\n                  if (xCOffset >= 0 && xCOffset < inDims[1] && xTexelC${t+1}Ready == 0) {\n                    xTexelC${t+1} = getX(batch, xR, xCOffset, d1);\n\n                    // Need to manually clear unused channels in case\n                    // we're reading from recycled texture.\n                    if (xCOffset + 1 >= inDims[1]) {\n                      xTexelC${t+1}.zw = vec2(0.0);\n                    }\n                    xTexelC${t+1}Ready = 1;\n                  }\n                  `,d+=u>1?`\n                    xCOffset -= 2;\n                    if (xCOffset >= 0 && xCOffset < inDims[1]) {\n                     previous = getX(batch, xR, xCOffset, d1);\n                     xC${t+1} = vec4(previous.zw, xTexelC${t+1}.xy);\n                    } else {\n                     xC${t+1} = vec4(0.0, 0.0, xTexelC${t+1}.xy);\n                    }\n                    `:`\n                    xC${t+1} = vec4(xTexelC${t}.zw, xTexelC${t+1}.xy);\n                    `):d+=1===e?`\n                    xC${t+1} = xTexelC${t};\n                    `:`\n                    xCOffset = xC + ${e};\n\n                    if (xCOffset >= 0 && xCOffset < inDims[1] && xTexelC${t+1}Ready == 0) {\n                      xTexelC${t+1} = getX(batch, xR, xCOffset, d1);\n                      if (xCOffset + 1 >= inDims[1]) {\n                        xTexelC${t+1}.zw = vec2(0.0);\n                      }\n                      xTexelC${t+1}Ready = 1;\n                    }\n\n                    xC${t+1} = xTexelC${t+1};\n                    `}}else t<h&&(o%2==1?(d+=`\n                xCOffset = xC + 1 - strides[1];\n                if(xCOffset >= 0 && xCOffset < inDims[1] && xTexelC${t}Ready == 0) {\n                  xTexelC${t} = getX(batch, xR, xCOffset, d1);\n                  // Need to manually clear unused channels in case\n                  // we're reading from recycled texture.\n                  if (xCOffset + 1 >= inDims[1]) {\n                    xTexelC${t}.zw = vec2(0.0);\n                  }\n                  xTexelC${t}Ready = 1;\n                }\n\n                if(xC + 1 >= 0 && xC + 1 < inDims[1] && xTexelC${t+1}Ready == 0) {\n                  xTexelC${t+1} = getX(batch, xR, xC + 1, d1);\n                  // Need to manually clear unused channels in case\n                  // we're reading from recycled texture.\n                  if (xC + 2 >= inDims[1]) {\n                    xTexelC${t+1}.zw = vec2(0.0);\n                  }\n                  xTexelC${t+1}Ready = 1;\n                }\n\n                xC${t} = vec4(xTexelC${t}.zw, xTexelC${t+1}.zw);\n              `,t+1<h&&(d+=`\n                  final = vec4(0.0);\n                  xCOffset = xC + 1 + strides[1];\n                  if(xCOffset >= 0 && xCOffset < inDims[1]) {\n                    final = getX(batch, xR, xCOffset, d1);\n                  }\n                  xC${t+1} = vec4(xTexelC${t+1}.xy, final.xy);\n                `)):(d+=`\n                if(xC >= 0 && xC < inDims[1] && xTexelC${t}Ready == 0) {\n                  xTexelC${t} = getX(batch, xR, xC, d1);\n                  if (xC + 1 >= inDims[1]) {\n                    xTexelC${t}.zw = vec2(0.0);\n                  }\n                  xTexelC${t}Ready = 1;\n                }\n\n                xCOffset = xC + strides[1];\n                if(xCOffset >= 0 && xCOffset < inDims[1] && xTexelC${t+1}Ready == 0) {\n                  xTexelC${t+1} = getX(batch, xR, xCOffset, d1);\n                  if (xCOffset + 1 >= inDims[1]) {\n                    xTexelC${t+1}.zw = vec2(0.);\n                  }\n                  xTexelC${t+1}Ready = 1;\n                }\n\n                xC${t} = vec4(\n                  xTexelC${t}.xy, xTexelC${t+1}.xy);\n              `,t+1<h&&(d+=`\n                  xC${t+1} = vec4(xTexelC${t}.zw, xTexelC${t+1}.zw);\n                `)));t<h&&(d+=`\n            wTexel = getW(r, ${t}, d1, q);\n            dotProd += xC${t} * vec4(wTexel.xz, wTexel.xz);\n          `,t+1<h&&(d+=`\n              wTexel = getW(r, ${t+1}, d1, q);\n              dotProd += xC${t+1} * vec4(wTexel.xz, wTexel.xz);\n            `))}d+="\n    }\n  ",d+="\n      }\n    ";let f="",m="";n&&(f=s?`vec4 activation(vec4 a) {\n          vec4 b = getPreluActivationWeightsAtOutCoords();\n          ${n}\n        }`:a?`vec4 activation(vec4 a) {\n          vec4 b = getLeakyreluAlphaAtOutCoords();\n          ${n}\n        }`:`vec4 activation(vec4 x) {\n          ${n}\n        }`,m="result = activation(result);");const g=t?"result += getBiasAtOutCoords();":"";t&&this.variableNames.push("bias"),s&&this.variableNames.push("preluActivationWeights"),a&&this.variableNames.push("leakyreluAlpha"),this.userCode=`\n      ${f}\n\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int batch = coords.x;\n        ivec2 xRCCorner = coords.yz * strides - pads;\n        int d2 = coords.w;\n        int d1 = d2 / ${i};\n        int q = d2 - d1 * ${i};\n        int xRCorner = xRCCorner.x;\n        int xCCorner = xRCCorner.y;\n\n        //intialize dotProd with a small epsilon seems to reduce GPU accuracy loss.\n        vec4 dotProd = vec4(0.000000000000001);\n\n        ${d}\n\n        vec4 result = dotProd - vec4(0.000000000000001);\n        ${g}\n        ${m}\n        setOutput(result);\n      }\n    `}}const vw={kernelName:r.DepthwiseConv2dNative,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:a,filter:i}=t,{strides:o,pad:l,dilations:u,dimRoundingMode:c}=s;let h=u;null==h&&(h=[1,1]),r.util.assert(r.backend_util.eitherStridesOrDilationsAreOne(o,h),(()=>`Error in depthwiseConv2d: Either strides or dilations must be 1. Got strides ${o} and dilations '${h}'`));const p=r.backend_util.computeConv2DInfo(a.shape,i.shape,o,h,l,c,!0);let d;d=(0,r.env)().getBool("WEBGL_PACK_DEPTHWISECONV")&&p.strideWidth<=2&&p.outChannels/p.inChannels==1?new xw(p):new bw(p);const f=[[p.padInfo.top,p.padInfo.left],[p.strideHeight,p.strideWidth],[p.dilationHeight,p.dilationWidth],[p.inHeight,p.inWidth]];return n.runWebGLProgram(d,[a,i],"float32",f)}};class ww{constructor(e){this.variableNames=["x","dy"],this.outputShape=e.filterShape;const t=e.strideHeight,n=e.strideWidth,s=e.padInfo.top,a=e.padInfo.left,r=e.outChannels/e.inChannels;this.userCode=`\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int wR = coords.x;\n        int wC = coords.y;\n        int d1 = coords.z;\n        int dm = coords.w;\n        int d2 = d1 * ${r} + dm;\n\n        float dotProd = 0.0;\n\n        // TO DO: Vec4 over the batch size\n        for (int b = 0; b < ${e.batchSize}; b++) {\n          for (int yR = 0; yR < ${e.outHeight}; yR++) {\n            int xR = wR + yR * ${t} - ${s};\n\n            if (xR < 0 || xR >= ${e.inHeight}) {\n              continue;\n            }\n\n            for (int yC = 0; yC < ${e.outWidth}; yC++) {\n              int xC = wC + yC * ${n} - ${a};\n\n              if (xC < 0 || xC >= ${e.inWidth}) {\n                continue;\n              }\n\n              float dyValue = getDy(b, yR, yC, d2);\n              float xValue = getX(b, xR, xC, d1);\n              dotProd += (xValue * dyValue);\n            }\n          }\n        }\n        setOutput(dotProd);\n      }\n    `}}class kw{constructor(e){this.variableNames=["dy","W"],this.outputShape=e.inShape;const t=e.filterHeight,n=e.filterWidth,s=e.strideHeight,a=e.strideWidth,r=t-1-e.padInfo.top,i=n-1-e.padInfo.left,o=e.outChannels/e.inChannels;this.userCode=`\n      const ivec2 pads = ivec2(${r}, ${i});\n\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int batch = coords[0];\n        int d1 = coords[3];\n        ivec2 dyCorner = coords.yz - pads;\n        int dyRCorner = dyCorner.x;\n        int dyCCorner = dyCorner.y;\n\n        float dotProd = 0.0;\n\n        for (int wR = 0; wR < ${t}; wR++) {\n          float dyR = float(dyRCorner + wR) / ${s}.0;\n\n          if (dyR < 0.0 || dyR >= ${e.outHeight}.0 || fract(dyR) > 0.0) {\n            continue;\n          }\n          int idyR = int(dyR);\n\n          int wRPerm = ${t} - 1 - wR;\n\n          for (int wC = 0; wC < ${n}; wC++) {\n            float dyC = float(dyCCorner + wC) / ${a}.0;\n\n            if (dyC < 0.0 || dyC >= ${e.outWidth}.0 ||\n                fract(dyC) > 0.0) {\n              continue;\n            }\n            int idyC = int(dyC);\n\n            int wCPerm = ${n} - 1 - wC;\n\n            // TO DO: Vec4 over the channelMul\n            for (int dm = 0; dm < ${o}; dm++) {\n              int d2 = d1 * ${o} + dm;\n              float xValue = getDy(batch, idyR, idyC, d2);\n              float wValue = getW(wRPerm, wCPerm, d1, dm);\n              dotProd += xValue * wValue;\n            }\n          }\n        }\n        setOutput(dotProd);\n      }\n    `}}const Iw={kernelName:r.DepthwiseConv2dNativeBackpropFilter,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:a,dy:i}=t,{strides:o,dilations:l,pad:u,dimRoundingMode:c,filterShape:h}=s,p=r.backend_util.computeConv2DInfo(a.shape,h,o,l,u,c,!0),d=new ww(p);return n.runWebGLProgram(d,[a,i],"float32")}},Sw={kernelName:r.DepthwiseConv2dNativeBackpropInput,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{dy:a,filter:i}=t,{strides:o,dilations:l,pad:u,dimRoundingMode:c,inputShape:h}=s,p=r.backend_util.computeConv2DInfo(h,i.shape,o,l,u,c,!0),d=new kw(p);return n.runWebGLProgram(d,[a,i],"float32")}};class Nw{constructor(e){this.variableNames=["X"],this.outputShape=[e,e],this.userCode="\n      void main() {\n          ivec2 coords = getOutputCoords();\n          float val = coords[0] == coords[1] ? getX(coords[0]) : 0.0;\n          setOutput(val);\n      }\n    "}}const Tw={kernelName:r.Diag,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n}=e,{x:s}=t,a=[...s.shape,...s.shape],i=r.util.sizeFromShape(s.shape),o=ix({inputs:{x:s},backend:n,attrs:{shape:[i]}}),l=new Nw(i),u=n.runWebGLProgram(l,[o],o.dtype),c=ix({inputs:{x:u},backend:n,attrs:{shape:a}});return n.disposeIntermediateTensorInfo(o),n.disposeIntermediateTensorInfo(u),c}};class Cw{constructor(e){this.variableNames=["x","W"],this.outputShape=e.outShape;const{inHeight:t,inWidth:n,padInfo:s,strideHeight:a,strideWidth:r,filterHeight:i,filterWidth:o,dilationHeight:l,dilationWidth:u}=e,{top:c,left:h}=s;this.userCode=`\n      const ivec2 strides = ivec2(${a}, ${r});\n      const ivec2 pads = ivec2(${c}, ${h});\n      const float neg_infinity = -3.4e38;\n\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int batch = coords.x;\n        int d1 = coords.w;\n        ivec2 outTopLeftCorner =\n            coords.yz * strides - pads;\n        int hBeg = outTopLeftCorner.x;\n        int wBeg = outTopLeftCorner.y;\n\n        float curVal = neg_infinity;\n        for (int h = 0; h < ${i}; h++) {\n          int hIn = hBeg + h * ${l};\n\n          if (hIn >= 0 && hIn < ${t}) {\n            for (int w = 0; w < ${o}; w++) {\n              int wIn = wBeg + w * ${u};\n\n              if (wIn >= 0 && wIn < ${n}) {\n                float xVal = getX(batch, hIn, wIn, d1);\n                float wVal = getW(h, w, d1);\n\n                float val = xVal + wVal;\n                if (val > curVal) {\n                  curVal = val;\n                }\n              }\n            }\n          }\n        }\n\n        float result = curVal;\n        setOutput(result);\n      }\n    `}}const $w={kernelName:r.Dilation2D,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:a,filter:i}=t,{strides:o,pad:l,dilations:u}=s,c=r.backend_util.computeDilation2DInfo(a.shape,i.shape,o,l,"NHWC",u);let h;const p=new Cw(c);h=n.runWebGLProgram(p,[a,i],"float32");const d=ix({inputs:{x:h},backend:n,attrs:{shape:c.outShape}});return n.disposeIntermediateTensorInfo(h),d}},Ew={kernelName:r.Einsum,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{equation:a}=s,i=t,{allDims:o,summedDims:l,idDims:u}=r.backend_util.decodeEinsumEquation(a,i.length);r.backend_util.checkEinsumDimSizes(o.length,u,i);const{path:c,steps:h}=r.backend_util.getEinsumComputePath(l,u),p=h.length;let d=null,f=o.length;const m=[];for(let e=0;e<p;++e){for(const t of h[e]){const{permutationIndices:e,expandDims:s}=r.backend_util.getEinsumPermutation(f,u[t]);let a;r.backend_util.isIdentityPermutation(e)?a=i[t]:(a=gx({inputs:{x:i[t]},backend:n,attrs:{perm:e}}),m.push(a));const o=a.shape.slice();for(let e=0;e<s.length;++e)o.splice(s[e],0,1);r.util.arraysEqual(a.shape,o)||(a=ix({inputs:{x:a},backend:n,attrs:{shape:o}}),m.push(a)),null===d?d=a:(d=ax({inputs:{a,b:d},backend:n}),m.push(d))}e<p-1&&(c[e]>=0&&(d=fx({inputs:{x:d},backend:n,attrs:{axis:c[e]-(o.length-f),keepDims:!1}}),m.push(d)),f--)}for(const e of m)e!==d&&n.disposeIntermediateTensorInfo(e);return d}},_w=Qb({opSnippet:"return (x >= 0.0) ? x : (exp(x) - 1.0);",packedOpSnippet:"\n  vec4 result;\n\n  result.r = (x.r >= 0.0) ? x.r : (exp(x.r) - 1.0);\n  result.g = (x.g >= 0.0) ? x.g : (exp(x.g) - 1.0);\n  result.b = (x.b >= 0.0) ? x.b : (exp(x.b) - 1.0);\n  result.a = (x.a >= 0.0) ? x.a : (exp(x.a) - 1.0);\n\n  return result;\n"}),Aw={kernelName:r.Elu,backendName:"webgl",kernelFunc:_w},Rw={kernelName:r.EluGrad,backendName:"webgl",kernelFunc:e=>{const{inputs:t,backend:n}=e,{dy:s,y:a}=t,i=(0,r.env)().getBool("WEBGL_PACK_BINARY_OPERATIONS")?new Vb("\n  vec4 bGTEZero = vec4(greaterThanEqual(b, vec4(0.)));\n  return (bGTEZero * a) + ((vec4(1.0) - bGTEZero) * (a * (b + vec4(1.0))));\n",s.shape,a.shape):new Pb("return (b >= 1.0) ? a : a * (b + 1.0);",s.shape,a.shape);return n.runWebGLProgram(i,[s,a],s.dtype)}},Fw=Jb({opSnippet:"return float(a == b);",packedOpSnippet:"\n  return vec4(equal(a, b));\n",dtype:"bool",cpuKernelImpl:zy}),Dw={kernelName:r.Equal,backendName:"webgl",kernelFunc:Fw},Ow=Qb({opSnippet:`\n  // Error function is calculated approximately with elementary function.\n  // See "Handbook of Mathematical Functions with Formulas,\n  // Graphs, and Mathematical Tables", Abramowitz and Stegun.\n  float p = ${r.backend_util.ERF_P};\n  float a1 = ${r.backend_util.ERF_A1};\n  float a2 = ${r.backend_util.ERF_A2};\n  float a3 = ${r.backend_util.ERF_A3};\n  float a4 = ${r.backend_util.ERF_A4};\n  float a5 = ${r.backend_util.ERF_A5};\n\n  float sign = sign(x);\n  x = abs(x);\n  float t = 1.0 / (1.0 + p * x);\n  return sign * (1.0 - (((((a5*t + a4)*t) + a3)*t + a2)*t + a1)*t*exp(-x*x));\n`}),Mw={kernelName:r.Erf,backendName:"webgl",kernelFunc:Ow},zw=Qb({opSnippet:"if (isnan(x)) return x;\n  return exp(x);\n",packedOpSnippet:"\n  vec4 result = exp(x);\n  bvec4 isNaN = isnan(x);\n  result.r = isNaN.r ? x.r : result.r;\n  result.g = isNaN.g ? x.g : result.g;\n  result.b = isNaN.b ? x.b : result.b;\n  result.a = isNaN.a ? x.a : result.a;\n\n  return result;\n",cpuKernelImpl:Ly,dtype:"float32"}),Lw={kernelName:r.Exp,backendName:"webgl",kernelFunc:zw};function Bw(e){const{inputs:t,attrs:n,backend:s}=e,{dim:a}=n,{input:i}=t,o=i.shape.length,l=i.shape.slice();let u=a;return a<0&&(r.util.assert(-(o+1)<=a,(()=>`Axis must be in the interval [${-(o+1)}, ${o}]`)),u=o+a+1),l.splice(u,0,1),ix({inputs:{x:i},backend:s,attrs:{shape:l}})}const Pw={kernelName:r.ExpandDims,backendName:"webgl",kernelFunc:Bw},Vw="return exp(x) - 1.0;",Ww=Qb({opSnippet:Vw,packedOpSnippet:Vw,cpuKernelImpl:By}),Uw={kernelName:r.Expm1,backendName:"webgl",kernelFunc:Ww};class Gw{constructor(e,t,n){this.variableNames=["real","imag"];const s=t[1];this.outputShape=t;const a=n?`2.0 * ${Math.PI}`:`-2.0 * ${Math.PI}`,r=n?`${s}.0`:"1.0";let i;if("real"===e)i="return real * expR - imag * expI;";else{if("imag"!==e)throw new Error(`FFT component must be either "real" or "imag", got ${e}.`);i="return real * expI + imag * expR;"}this.userCode=`\n      const float exponentMultiplier = ${a};\n\n      float unaryOpComplex(float real, float expR, float imag, float expI) {\n        ${i}\n      }\n\n      float mulMatDFT(int batch, int index) {\n        float indexRatio = float(index) / float(${s});\n        float exponentMultiplierTimesIndexRatio =\n            exponentMultiplier * indexRatio;\n\n        float result = 0.0;\n\n        for (int i = 0; i < ${s}; i++) {\n          // x = (-2|2 * PI / N) * index * i;\n          float x = exponentMultiplierTimesIndexRatio * float(i);\n          float expR = cos(x);\n          float expI = sin(x);\n          float real = getReal(batch, i);\n          float imag = getImag(batch, i);\n\n          result +=\n              unaryOpComplex(real, expR, imag, expI) / ${r};\n        }\n\n        return result;\n      }\n\n      void main() {\n        ivec2 coords = getOutputCoords();\n        setOutput(mulMatDFT(coords[0], coords[1]));\n      }\n    `}}function Hw(e,t,n){const s=n.texData.get(e.dataId),a=r.util.sizeFromShape(e.shape),i=e.shape[e.shape.length-1],o=ix({inputs:{x:e},backend:n,attrs:{shape:[a/i,i]}}),l=o.shape,u=new Gw("real",l,t),c=new Gw("imag",l,t),h=[{dataId:s.complexTensorInfos.real.dataId,dtype:s.complexTensorInfos.real.dtype,shape:l},{dataId:s.complexTensorInfos.imag.dataId,dtype:s.complexTensorInfos.imag.dtype,shape:l}],p=n.runWebGLProgram(u,h,"float32"),d=n.runWebGLProgram(c,h,"float32"),f=Gb({inputs:{real:p,imag:d},backend:n});n.disposeIntermediateTensorInfo(p),n.disposeIntermediateTensorInfo(d);const m=ix({inputs:{x:f},backend:n,attrs:{shape:e.shape}});return n.disposeIntermediateTensorInfo(o),n.disposeIntermediateTensorInfo(f),m}const qw={kernelName:r.FFT,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n}=e,{input:s}=t;return Hw(s,!1,n)}};class Xw{constructor(e,t){this.outputShape=[],this.customUniforms=[{name:"value",type:"float"}],this.variableNames=["x"],this.outputShape=e,this.userCode="\n      void main() {\n        // Input can be obtained from uniform value.\n        setOutput(value);\n      }\n    "}}function jw(e){const{backend:t,attrs:n}=e,{shape:s,value:a}=n;let{dtype:i}=n;if(i=i||r.util.inferDtype(a),"string"===i){const e=r.util.getArrayFromDType(i,r.util.sizeFromShape(s));return e.fill(a),t.makeTensorInfo(s,i,e)}{const e=new Xw(s,a),n=[[a]];return t.runWebGLProgram(e,[],i,n)}}const Kw={kernelName:r.Fill,backendName:"webgl",kernelFunc:jw};class Yw{constructor(e){this.variableNames=["Image"],this.outputShape=[];const t=e[2];this.outputShape=e,this.userCode=`\n        void main() {\n          ivec4 coords = getOutputCoords();\n          int x = coords[2];\n\n          int coordX = ${t} - x - 1;\n          float outputValue;\n          if(coordX >= 0 && coordX < ${t}) {\n            outputValue = getImage(coords[0], coords[1], coordX, coords[3]);\n          } else {\n            outputValue = getImage(coords[0], coords[1], coords[2], coords[3]);\n          }\n          setOutput(outputValue);\n        }\n    `}}const Zw={kernelName:r.FlipLeftRight,backendName:"webgl",kernelFunc:({inputs:e,backend:t})=>{const{image:n}=e,s=t,a=new Yw(n.shape);return s.runWebGLProgram(a,[n],n.dtype)}},Qw="return floor(x);",Jw=Qb({opSnippet:Qw,packedOpSnippet:Qw,cpuKernelImpl:Py}),ek={kernelName:r.Floor,backendName:"webgl",kernelFunc:Jw},tk=Jb({opSnippet:"\n  float s = sign(a) * sign(b);\n  int ia = round(a);\n  int ib = round(b);\n  if (ib != 0) {\n    // Windows (D3D) wants guaranteed non-zero int division at compile-time.\n    return float(idiv(ia, ib, s));\n  } else {\n    return NAN;\n  }\n",packedOpSnippet:"\n  ivec4 ia = round(a);\n  ivec4 ib = round(b);\n  bvec4 cond = notEqual(ib, ivec4(0));\n  ivec4 result = ivec4(0);\n  vec4 s = sign(a) * sign(b);\n\n  // Windows (D3D) wants guaranteed non-zero int division at compile-time.\n  if (cond[0]) {\n    result[0] = idiv(ia[0], ib[0], s[0]);\n  }\n  if (cond[1]) {\n    result[1] = idiv(ia[1], ib[1], s[1]);\n  }\n  if (cond[2]) {\n    result[2] = idiv(ia[2], ib[2], s[2]);\n  }\n  if (cond[3]) {\n    result[3] = idiv(ia[3], ib[3], s[3]);\n  }\n  return vec4(result);\n",dtype:"int32"}),nk={kernelName:r.FloorDiv,backendName:"webgl",kernelFunc:tk};class sk{constructor(e){this.variableNames=["A"];const t=Yg(),[n,s]=e;this.outputShape=e,this.userCode=`\n      void main() {\n        ivec3 coords = getOutputCoords();\n        int texR = coords[0];\n        int texC = coords[1];\n        int depth = coords[2];\n        vec2 uv = (vec2(texC, texR) + halfCR) / vec2(${s}.0, ${n}.0);\n\n        vec4 values = ${t.texture2D}(A, uv);\n        float value;\n        if (depth == 0) {\n          value = values.r;\n        } else if (depth == 1) {\n          value = values.g;\n        } else if (depth == 2) {\n          value = values.b;\n        } else if (depth == 3) {\n          value = values.a;\n        }\n\n        setOutput(floor(value * 255.0 + 0.5));\n      }\n    `}}class ak{constructor(e){this.variableNames=["A"],this.packedInputs=!1,this.packedOutput=!0;const t=Yg(),[n,s]=e;this.outputShape=e,this.userCode=`\n      void main() {\n        ivec3 coords = getOutputCoords();\n        int texR = coords[0];\n        int texC = coords[1];\n        int depth = coords[2];\n\n        vec4 result = vec4(0.);\n\n        for(int row=0; row<=1; row++) {\n          for(int col=0; col<=1; col++) {\n            texC = coords[1] + row;\n            depth = coords[2] + col;\n\n            vec2 uv = (vec2(texC, texR) + halfCR) /\n                       vec2(${s}.0, ${n}.0);\n            vec4 values = ${t.texture2D}(A, uv);\n            float value;\n            if (depth == 0) {\n              value = values.r;\n            } else if (depth == 1) {\n              value = values.g;\n            } else if (depth == 2) {\n              value = values.b;\n            } else if (depth == 3) {\n              value = values.a;\n            }\n\n            result[row * 2 + col] = floor(value * 255.0 + 0.5);\n          }\n        }\n\n        ${t.output} = result;\n      }\n    `}}const rk={kernelName:r.FromPixels,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e;let{pixels:a}=t;const{numChannels:i}=s,o="undefined"!=typeof HTMLVideoElement&&a instanceof HTMLVideoElement,l="undefined"!=typeof HTMLImageElement&&a instanceof HTMLImageElement,[u,c]=o?[a.videoWidth,a.videoHeight]:[a.width,a.height],h=[c,u],p=[c,u,i];if(l||o){const e=(0,r.env)().getBool("CANVAS2D_WILL_READ_FREQUENTLY_FOR_GPU");null!=ik&&e===ok||(ok=e,ik=document.createElement("canvas").getContext("2d",{willReadFrequently:ok})),ik.canvas.width=u,ik.canvas.height=c,ik.drawImage(a,0,0,u,c),a=ik.canvas}const d=n.makeTensorInfo(h,"int32");n.texData.get(d.dataId).usage=vg.PIXELS,n.gpgpu.uploadPixelDataToTexture(n.getTexture(d.dataId),a);const f=(0,r.env)().getBool("WEBGL_PACK")?new ak(p):new sk(p),m=n.runWebGLProgram(f,[d],"int32");return n.disposeData(d.dataId),m}};let ik,ok=(0,r.env)().getBool("CANVAS2D_WILL_READ_FREQUENTLY_FOR_GPU");const lk={kernelName:r.FusedConv2D,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:a,filter:i,bias:o,preluActivationWeights:l}=t,{strides:u,pad:c,dataFormat:h,dilations:p,dimRoundingMode:d,activation:f,leakyreluAlpha:m}=s,g=r.backend_util.convertConv2DDataFormat(h),y=r.backend_util.computeConv2DInfo(a.shape,i.shape,u,p,c,d,!1,g);let b;const x=[],v=null!=o,w=null!=l,k="leakyrelu"===f,I=()=>{const e=[a,i],t=(e,t)=>{if("NCHW"===t&&1===e.shape.length&&1!==e.shape[0]){const t=ix({inputs:{x:e},backend:n,attrs:{shape:[e.shape[0],1,1]}});return x.push(t),t}return e};if(v&&e.push(t(o,h)),w&&e.push(t(l,h)),k){const t=n.makeTensorInfo([],"float32",r.util.createScalarValue(m,"float32"));e.push(t),x.push(t)}return e};if(1!==y.filterHeight||1!==y.filterWidth||1!==y.dilationHeight||1!==y.dilationWidth||1!==y.strideHeight||1!==y.strideWidth||"SAME"!==y.padInfo.type&&"VALID"!==y.padInfo.type)if(y.strideWidth<=2&&"channelsLast"===g&&(0,r.env)().getBool("WEBGL_EXP_CONV")){const e=f?ex(f,!0):null,t=new Vv(y,v,e,w,k),s=[[y.padInfo.top,y.padInfo.left],[y.strideHeight,y.strideWidth],[y.dilationHeight,y.dilationWidth],[y.inHeight,y.inWidth]],a=I();b=n.runWebGLProgram(t,a,"float32",s)}else if((0,r.env)().getBool("WEBGL_CONV_IM2COL"))b=Hv({x:a,filter:i,convInfo:y,backend:n,bias:o,activation:f,preluActivationWeights:l,leakyreluAlpha:m});else{const e=f?ex(f,!1):null,t=new Bv(y,v,e,w,k),s=I();b=n.runWebGLProgram(t,s,"float32")}else b=Gv({x:a,filter:i,convInfo:y,backend:n,bias:o,activation:f,preluActivationWeights:l,leakyreluAlpha:m});const S=ix({inputs:{x:b},backend:n,attrs:{shape:y.outShape}});return x.push(b),x.forEach((e=>n.disposeIntermediateTensorInfo(e))),S}},uk={kernelName:r.FusedDepthwiseConv2D,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:a,filter:i,bias:o,preluActivationWeights:l}=t,{strides:u,pad:c,dilations:h,dimRoundingMode:p,activation:d,leakyreluAlpha:f}=s,m=[];let g=h;null==g&&(g=[1,1]),r.util.assert(r.backend_util.eitherStridesOrDilationsAreOne(u,g),(()=>`Error in depthwiseConv2d: Either strides or dilations must be 1. Got strides ${u} and dilations '${g}'`));const y=r.backend_util.computeConv2DInfo(a.shape,i.shape,u,g,c,p,!0),b=(0,r.env)().getBool("WEBGL_PACK_DEPTHWISECONV")&&y.strideWidth<=2&&y.outChannels/y.inChannels==1,x=d?ex(d,b):null,v=[a,i],w=null!=o,k=null!=l,I="leakyrelu"===d;if(w&&v.push(o),k&&v.push(l),I){const e=n.makeTensorInfo([],"float32",r.util.createScalarValue(f,"float32"));v.push(e),m.push(e)}let S;S=b?new xw(y,w,x,k,I):new bw(y,w,x,k,I);const N=[[y.padInfo.top,y.padInfo.left],[y.strideHeight,y.strideWidth],[y.dilationHeight,y.dilationWidth],[y.inHeight,y.inWidth]],T=n.runWebGLProgram(S,v,"float32",N);return m.forEach((e=>n.disposeIntermediateTensorInfo(e))),T}};class ck{constructor(e,t,n,s){this.sliceDim=e,this.strides=t,this.paramsShape=s,this.variableNames=["x","indices"],this.outputShape=n;const a=hy(n.length);let r="\n    int index;";for(let e=0;e<this.sliceDim;e++)r+=`\n          index = round(getIndices(coords[0], ${e}));\n          out_of_bounds = out_of_bounds || index < 0;\n          out_of_bounds = out_of_bounds || index >= ${this.paramsShape[e]};\n          flattenIndex += index * ${this.strides[e]};`;this.userCode=`\n         void main() {\n          ${a} coords = getOutputCoords();\n          int flattenIndex = 0;\n          bool out_of_bounds = false;\n\n          ${r}\n\n          setOutput(out_of_bounds ? 0.0 : getX(flattenIndex, coords[1]));\n        }\n      `}}const hk={kernelName:r.GatherNd,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n}=e,{params:s,indices:a}=t,i=a.shape,o=i[i.length-1],l=r.util.sizeFromShape(s.shape),[u,c,h,p]=r.backend_util.prepareAndValidate(s,a),d=ix({inputs:{x:a},backend:n,attrs:{shape:[c,o]}}),f=ix({inputs:{x:s},backend:n,attrs:{shape:[r.util.sizeFromShape(s.shape)/h,h]}});if(n.shouldExecuteOnCPU([s,a])||"string"===s.dtype){const e=n.readSync(a.dataId),t=n.bufferSync(s),r=Vy(e,t,s.dtype,c,o,h,p,s.shape,l);return n.makeTensorInfo(u,s.dtype,r.values)}const m=new ck(o,p,[c,h],s.shape),g=n.runWebGLProgram(m,[f,d],f.dtype),y=ix({inputs:{x:g},backend:n,attrs:{shape:u}});return n.disposeIntermediateTensorInfo(d),n.disposeIntermediateTensorInfo(f),n.disposeIntermediateTensorInfo(g),y}};class pk{constructor(e,t){this.variableNames=["A","indices"],this.outputShape=t,this.rank=t.length;const n=hy(this.rank),s=function(e,t){const n=["resRC.x","resRC.y","resRC.z","resRC.w"],s=[];for(let t=0;t<e.length;t++)2===t?s.push("index"):s.push(`${n[t]}`);return s.join()}(e);this.userCode=`\n      void main() {\n        ${n} resRC = getOutputCoords();\n        int index = int(getIndices(resRC.x, resRC.z));\n        float inBounds = (index >= 0) && (index < ${e[2]}) ? 1.0 : 0.0;\n        setOutput(inBounds * getA(${s}));\n      }\n    `}}function dk(e){const{inputs:t,backend:n,attrs:s}=e,{x:a,indices:i}=t,{axis:o,batchDims:l}=s,u=r.util.parseAxisParam(o,a.shape)[0];if((0,r.env)().get("DEBUG")){const e=n.readSync(i.dataId),t=a.shape[u];for(let n=0;n<e.length;++n){const s=e[n];r.util.assert(s<=t-1&&s>=0,(()=>`GatherV2: the index value ${s} is not in [0, ${t-1}]`))}}const c=r.backend_util.segment_util.collectGatherOpShapeInfo(a,i,u,l),h=r.util.sizeFromShape(i.shape),p=[],d=ix({inputs:{x:a},backend:n,attrs:{shape:[c.batchSize,c.outerSize,c.dimSize,c.sliceSize]}}),f=ix({inputs:{x:i},backend:n,attrs:{shape:[c.batchSize,h/c.batchSize]}});p.push(d),p.push(f);const m=[c.batchSize,c.outerSize,h/c.batchSize,c.sliceSize];if(n.shouldExecuteOnCPU([a,i])||"string"===a.dtype){const e=n.bufferSync(f),t=n.bufferSync(d),s=Wy(t,e,m);return p.forEach((e=>n.disposeIntermediateTensorInfo(e))),n.makeTensorInfo(c.outputShape,s.dtype,s.values)}const g=new pk(d.shape,m),y=n.runWebGLProgram(g,[d,f],d.dtype);p.push(y);const b=ix({inputs:{x:y},backend:n,attrs:{shape:c.outputShape}});return p.forEach((e=>n.disposeIntermediateTensorInfo(e))),b}const fk={kernelName:r.GatherV2,backendName:"webgl",kernelFunc:dk},mk=Jb({opSnippet:"return float(a > b);",packedOpSnippet:"\n  return vec4(greaterThan(a, b));\n",cpuKernelImpl:Uy,dtype:"bool"}),gk={kernelName:r.Greater,backendName:"webgl",kernelFunc:mk},yk=Jb({opSnippet:"return float(a >= b);",packedOpSnippet:"\n  return vec4(greaterThanEqual(a, b));\n",dtype:"bool",cpuKernelImpl:Gy}),bk={kernelName:r.GreaterEqual,backendName:"webgl",kernelFunc:yk},xk={kernelName:r.IFFT,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n}=e,{input:s}=t;return Hw(s,!0,n)}},vk=Qb({opSnippet:"return float(!isnan(x) && !isinf(x));",dtype:"bool"}),wk={kernelName:r.IsFinite,backendName:"webgl",kernelFunc:vk},kk=Qb({opSnippet:"return float(isinf(x));",dtype:"bool"}),Ik={kernelName:r.IsInf,backendName:"webgl",kernelFunc:kk},Sk=Qb({opSnippet:"return float(isnan(x));",dtype:"bool"}),Nk={kernelName:r.IsNan,backendName:"webgl",kernelFunc:Sk},Tk=Jb({opSnippet:"return float(a < b);",packedOpSnippet:"\n  return vec4(lessThan(a, b));\n",cpuKernelImpl:Hy,dtype:"bool"}),Ck={kernelName:r.Less,backendName:"webgl",kernelFunc:Tk},$k=Jb({opSnippet:"return float(a <= b);",packedOpSnippet:"\n  return vec4(lessThanEqual(a, b));\n",cpuKernelImpl:qy,dtype:"bool"}),Ek={kernelName:r.LessEqual,backendName:"webgl",kernelFunc:$k},_k={kernelName:r.LinSpace,backendName:"webgl",kernelFunc:function(e){const{backend:t,attrs:n}=e,{start:s,stop:a,num:r}=n,i=Xy(s,a,r);return t.makeTensorInfo([i.length],"float32",i)}},Ak=Qb({opSnippet:"if (isnan(x)) return x;\n  return x < 0.0 ? 0./0. : log(x);\n",packedOpSnippet:"\n  vec4 result = log(x);\n  bvec4 isNaN = isnan(x);\n  result.r = isNaN.r ? x.r : (x.r < 0.0 ? 0./0. : result.r);\n  result.g = isNaN.g ? x.g : (x.g < 0.0 ? 0./0. : result.g);\n  result.b = isNaN.b ? x.b : (x.b < 0.0 ? 0./0. : result.b);\n  result.a = isNaN.a ? x.a : (x.a < 0.0 ? 0./0. : result.a);\n  return result;\n",cpuKernelImpl:jy}),Rk={kernelName:r.Log,backendName:"webgl",kernelFunc:Ak},Fk=Qb({opSnippet:"if (isnan(x)) return x;\n  return log(1.0 + x);\n"}),Dk={kernelName:r.Log1p,backendName:"webgl",kernelFunc:Fk},Ok=Jb({opSnippet:"return float(a >= 1.0 && b >= 1.0);",packedOpSnippet:"\n  return vec4(\n    vec4(greaterThanEqual(a, vec4(1.0))) *\n    vec4(greaterThanEqual(b, vec4(1.0))));\n",dtype:"bool"}),Mk={kernelName:r.LogicalAnd,backendName:"webgl",kernelFunc:Ok},zk=Qb({opSnippet:"return float(!(x >= 1.0));"}),Lk={kernelName:r.LogicalNot,backendName:"webgl",kernelFunc:zk},Bk=Jb({opSnippet:"return float(a >= 1.0 || b >= 1.0);",packedOpSnippet:"\n  return min(\n    vec4(greaterThanEqual(a, vec4(1.0))) +\n    vec4(greaterThanEqual(b, vec4(1.0))),\n    vec4(1.0));\n",dtype:"bool"}),Pk={kernelName:r.LogicalOr,backendName:"webgl",kernelFunc:Bk};class Vk{constructor(e,t,n,s,a){this.variableNames=["x"],this.outputShape=[];const r=t,i=e[3]-1;let o;this.outputShape=e;const l=`float(${n}) + float(${s}) * sum`;o=.5===a?`inversesqrt(${l})`:1===a?`1.0/(${l})`:`exp(log(${l}) * float(-${a}));`,this.userCode=`\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int b = coords[0];\n        int r = coords[1];\n        int c = coords[2];\n        int d = coords[3];\n        float x = getX(b, r, c, d);\n        float sum = 0.0;\n        for (int j = -${r}; j <= ${r}; j++) {\n          int idx = d + j;\n          if (idx >= 0 && idx <=  ${i}) {\n            float z = getX(b, r, c, idx);\n            sum += z * z;\n          }\n        }\n        float val = x * ${o};\n        setOutput(val);\n      }\n    `}}class Wk{constructor(e,t,n,s,a){this.variableNames=["x"],this.outputShape=[],this.packedInputs=!0,this.packedOutput=!0;const r=t,i=e[3]-1;let o;this.outputShape=e;const l=`float(${n}) + float(${s}) * sum`;o=.5===a?`inversesqrt(${l})`:1===a?`1.0/(${l})`:`exp(log(${l}) * float(-${a}));`,this.userCode=`\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int b = coords.x;\n        int r = coords.y;\n        int c = coords.z;\n        int d = coords.w;\n\n        bool hasNextCol = d < ${this.outputShape[3]};\n        bool hasNextRow = c < ${this.outputShape[2]};\n\n        vec4 sum = vec4(0.);\n        vec4 xFragAtOutputCoords = getX(b, r, c, d);\n\n        vec4 xAtOutputCoords = vec4(\n          getChannel(xFragAtOutputCoords, vec2(c, d)),\n          hasNextCol ?\n            getChannel(xFragAtOutputCoords, vec2(c, d + 1)) : 0.0,\n          hasNextRow ?\n            getChannel(xFragAtOutputCoords , vec2(c + 1, d)) : 0.0,\n          (hasNextRow && hasNextCol) ?\n            getChannel(xFragAtOutputCoords, vec2(c + 1, d + 1)) : 0.0\n        );\n\n        int firstChannel = d - ${r};\n        vec2 cache = vec2(0.);\n        if(firstChannel >= 0){\n          vec4 firstChannelFrag = getX(b, r, c, firstChannel);\n          cache.x = getChannel(firstChannelFrag, vec2(c, firstChannel));\n            if(hasNextRow){\n              cache.y = getChannel(firstChannelFrag, vec2(c + 1, firstChannel));\n            }\n        }\n\n        ivec2 depth = ivec2(d, d + 1);\n        for (int j = - ${r}; j <= ${r}; j++) {\n          ivec2 idx = depth + j;\n          bvec2 aboveLowerBound = greaterThanEqual(idx, ivec2(0));\n          bvec2 belowUpperBound = lessThanEqual(idx, ivec2(${i}));\n\n          bool depthInRange = aboveLowerBound.x && belowUpperBound.x;\n          bool depthPlusOneInRange = aboveLowerBound.y && belowUpperBound.y;\n\n          if(depthInRange || depthPlusOneInRange){\n            vec4 z = vec4(0.);\n            vec4 xFragAtCurrentDepth;\n            z.xz = cache.xy;\n            if(depthPlusOneInRange && hasNextCol){\n              xFragAtCurrentDepth = idx.y != d ?\n                getX(b, r, c, idx.y) : xFragAtOutputCoords;\n              z.y = getChannel(xFragAtCurrentDepth, vec2(c, idx.y));\n              if(hasNextRow){\n                z.w = getChannel(xFragAtCurrentDepth, vec2(c + 1, idx.y));\n              }\n            }\n            cache.xy = z.yw;\n            sum += z * z;\n          }\n        }\n        vec4 result = xAtOutputCoords * ${o};\n        setOutput(result);\n      }\n    `}}const Uk={kernelName:r.LRN,backendName:"webgl",kernelFunc:e=>{const{inputs:t,backend:n,attrs:s}=e,{x:a}=t,{depthRadius:i,bias:o,alpha:l,beta:u}=s,c=(0,r.env)().getBool("WEBGL_PACK_NORMALIZATION")?new Wk(a.shape,i,o,l,u):new Vk(a.shape,i,o,l,u);return n.runWebGLProgram(c,[a],a.dtype)}};class Gk{constructor(e,t,n,s,a){this.variableNames=["inputImage","outputImage","dy"],this.outputShape=[],this.outputShape=e,this.depth=e[3],this.depthRadius=t,this.bias=n,this.alpha=s,this.beta=a,this.userCode=`\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int b = coords[0];\n        int r = coords[1];\n        int c = coords[2];\n\n        float result = 0.0;\n        for (int d = 0; d < ${this.depth}; ++d) {\n          int depthBegin = int(max(0.0, float(d - ${t})));\n          int depthEnd = int(min(float(${this.depth}),\n              float(d + ${t} + 1)));\n\n          const int MIN_DEPTH_BEGIN = 0;\n          const int MAX_DEPTH_END = ${this.depth};\n\n          float norm = 0.0;\n          for (int k = MIN_DEPTH_BEGIN; k < MAX_DEPTH_END; ++k) {\n            if (k < depthBegin){\n              continue;\n            }\n            else if (k >= depthBegin && k < depthEnd) {\n              norm += getInputImage(b, r, c, k) * getInputImage(b, r, c, k);\n            }\n            else {\n              break;\n            }\n          }\n\n          norm = float(${s}) * norm + float(${n});\n\n          for(int k = MIN_DEPTH_BEGIN; k < MAX_DEPTH_END; ++k){\n            if (k < depthBegin){\n              continue;\n            }\n            else if (k >= depthBegin && k < depthEnd){\n              float dyi = -2.0 * float(${s})\n                * float(${a})\n                * getInputImage(b ,r ,c, k) * getOutputImage(b, r, c, d)\n                / norm;\n              if (k == d) {\n                dyi += pow(norm, -1.0 * ${a});\n              }\n              if (k == coords[3]) {\n                dyi *= getDy(b, r, c, d);\n                result += dyi;\n              }\n            }\n            else {\n              break;\n            }\n          }\n      }\n      setOutput(result);\n      }\n    `}}const Hk={kernelName:r.LRNGrad,backendName:"webgl",kernelFunc:e=>{const{inputs:t,backend:n,attrs:s}=e,{x:a,y:r,dy:i}=t,{depthRadius:o,bias:l,alpha:u,beta:c}=s,h=new Gk(a.shape,o,l,u,c);return n.runWebGLProgram(h,[a,r,i],a.dtype)}};function qk(e){const{inputs:t,backend:n,attrs:s}=e,{x:a}=t,{reductionIndices:i,keepDims:o}=s,l=a.shape.length,u=r.util.parseAxisParam(i,a.shape);let c=u;const h=r.backend_util.getAxesPermutation(c,l),p=null!=h,d=n.shouldExecuteOnCPU([a]);let f=a;if(p){if(d){const e=n.texData.get(f.dataId).values,t=new Array(l);for(let e=0;e<t.length;e++)t[e]=a.shape[h[e]];const s=wb(e,a.shape,a.dtype,h,t);f=n.makeTensorInfo(t,a.dtype),n.texData.get(f.dataId).values=s}else f=dx(a,h,n);c=r.backend_util.getInnerMostAxes(c.length,l)}r.backend_util.assertAxesAreInnerMostDims("max",c,l);const[m,g]=r.backend_util.computeOutAndReduceShapes(f.shape,c);let y,b=m;if(o&&(b=r.backend_util.expandShapeToKeepDim(m,u)),d){const e=n.texData.get(f.dataId).values,t=Ky(e,r.util.sizeFromShape(g),b,a.dtype);y=n.makeTensorInfo(b,a.dtype),n.texData.get(y.dataId).values=t}else y=function(e,t,n,s){const a=r.util.sizeFromShape(t),i=ix({inputs:{x:e},attrs:{shape:[r.util.sizeFromShape(e.shape)/a,a]},backend:s}),o=cx(i,e.dtype,"max",s),l=ix({inputs:{x:o},attrs:{shape:n},backend:s});return s.disposeIntermediateTensorInfo(i),s.disposeIntermediateTensorInfo(o),l}(f,g,b,n);return p&&n.disposeIntermediateTensorInfo(f),y}const Xk={kernelName:r.Max,backendName:"webgl",kernelFunc:qk},jk=Jb({opSnippet:"\n  if (isnan(a)) return a;\n  if (isnan(b)) return b;\n\n  return max(a, b);\n",packedOpSnippet:"\n  vec4 result = vec4(max(a, b));\n  bvec4 isNaNA = isnan(a);\n  bvec4 isNaNB = isnan(b);\n  bvec4 isNaN = bvec4(isNaNA.x || isNaNB.x, isNaNA.y || isNaNB.y, isNaNA.z || isNaNB.z, isNaNA.w || isNaNB.w);\n  \n  result.r = isNaN.r ? NAN : result.r;\n  result.g = isNaN.g ? NAN : result.g;\n  result.b = isNaN.b ? NAN : result.b;\n  result.a = isNaN.a ? NAN : result.a;\n\n  return result;\n",cpuKernelImpl:Yy}),Kk={kernelName:r.Maximum,backendName:"webgl",kernelFunc:jk},Yk={kernelName:r.MaxPool,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:a}=t;jg(a,"maxPool");const{filterSize:i,strides:o,pad:l,dimRoundingMode:u}=s;r.util.assert(r.backend_util.eitherStridesOrDilationsAreOne(o,1),(()=>`Error in maxPool: Either strides or dilations must be 1. Got strides ${o} and dilations '1'`));const c=r.backend_util.computePool2DInfo(a.shape,i,o,1,l,u);if(1===c.filterWidth&&1===c.filterHeight&&r.util.arraysEqual(c.inShape,c.outShape))return Wb({inputs:{x:a},backend:n});const h=new Zx(c,"max",!1);return n.runWebGLProgram(h,[a],a.dtype)}},Zk={kernelName:r.MaxPool3D,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:a}=t,{filterSize:i,strides:o,pad:l,dataFormat:u,dimRoundingMode:c}=s,h=r.backend_util.computePool3DInfo(a.shape,i,o,[1,1,1],l,c,u),p=new Qx(h,"max",!1);return n.runWebGLProgram(p,[a],a.dtype)}};class Qk{constructor(e){this.variableNames=["dy","maxPos"],this.outputShape=e.inShape;const t=e.strideHeight,n=e.strideWidth,s=e.dilationHeight,a=e.effectiveFilterHeight,r=e.effectiveFilterWidth,i=a-1-e.padInfo.top,o=r-1-e.padInfo.left,l=a*r-1;this.userCode=`\n      const ivec2 pads = ivec2(${i}, ${o});\n\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int b = coords[0];\n        int d = coords[3];\n\n        ivec2 dyRCCorner = coords.yz - pads;\n        int dyRCorner = dyRCCorner.x;\n        int dyCCorner = dyRCCorner.y;\n\n        // Convolve dy(?, ?, d) with pos mask(:, :, d) to get dx(xR, xC, d).\n        // ? = to be determined. : = across all values in that axis.\n        float dotProd = 0.0;\n        for (int wR = 0; wR < ${a};\n          wR += ${s}) {\n          float dyR = float(dyRCorner + wR) / ${t}.0;\n\n          if (dyR < 0.0 || dyR >= ${e.outHeight}.0 || fract(dyR) > 0.0) {\n            continue;\n          }\n          int idyR = int(dyR);\n\n          for (int wC = 0; wC < ${r}; wC++) {\n            float dyC = float(dyCCorner + wC) / ${n}.0;\n\n            if (dyC < 0.0 || dyC >= ${e.outWidth}.0 ||\n                fract(dyC) > 0.0) {\n              continue;\n            }\n            int idyC = int(dyC);\n\n            float dyValue = getDy(b, idyR, idyC, d);\n            int maxPosValue = ${l} - int(getMaxPos(b, idyR, idyC, d));\n\n            // Get the current value, check it against the value from the\n            // position matrix.\n            int curPosValue = wR * ${r} + wC;\n            float mask = float(maxPosValue == curPosValue ? 1.0 : 0.0);\n\n            dotProd += dyValue * mask;\n          }\n        }\n        setOutput(dotProd);\n      }\n    `}}class Jk{constructor(e){this.variableNames=["dy","maxPos"],this.outputShape=e.inShape;const t=e.strideDepth,n=e.strideHeight,s=e.strideWidth,a=e.dilationDepth,r=e.dilationHeight,i=e.dilationWidth,o=e.effectiveFilterDepth,l=e.effectiveFilterHeight,u=e.effectiveFilterWidth,c=o-1-e.padInfo.front,h=l-1-e.padInfo.top,p=u-1-e.padInfo.left,d=o*l*u-1;this.userCode=`\n      const ivec3 pads = ivec3(${c}, ${h}, ${p});\n\n      void main() {\n        ivec5 coords = getOutputCoords();\n        int batch = coords.x;\n        int ch = coords.u;\n\n        ivec3 dyCorner = ivec3(coords.y, coords.z, coords.w) - pads;\n        int dyDCorner = dyCorner.x;\n        int dyRCorner = dyCorner.y;\n        int dyCCorner = dyCorner.z;\n\n        // Convolve dy(?, ?, ?, ch) with pos mask(:, :, :, d) to get\n        // dx(xD, xR, xC, ch).\n        // ? = to be determined. : = across all values in that axis.\n        float dotProd = 0.0;\n\n        for (int wD = 0; wD < ${o};\n           wD += ${a}) {\n          float dyD = float(dyDCorner + wD) / ${t}.0;\n\n          if (dyD < 0.0 || dyD >= ${e.outDepth}.0 || fract(dyD) > 0.0) {\n            continue;\n          }\n          int idyD = int(dyD);\n\n          for (int wR = 0; wR < ${l};\n              wR += ${r}) {\n            float dyR = float(dyRCorner + wR) / ${n}.0;\n\n            if (dyR < 0.0 || dyR >= ${e.outHeight}.0 ||\n                fract(dyR) > 0.0) {\n              continue;\n            }\n            int idyR = int(dyR);\n\n            for (int wC = 0; wC < ${u};\n                wC += ${i}) {\n              float dyC = float(dyCCorner + wC) / ${s}.0;\n\n              if (dyC < 0.0 || dyC >= ${e.outWidth}.0 ||\n                  fract(dyC) > 0.0) {\n                continue;\n              }\n              int idyC = int(dyC);\n\n              float dyValue = getDy(batch, idyD, idyR, idyC, ch);\n              int maxPosValue = ${d} -\n                  int(getMaxPos(batch, idyD, idyR, idyC, ch));\n\n              // Get the current value, check it against the value from the\n              // position matrix.\n              int curPosValue =\n                  wD * ${l} * ${u} +\n                  wR * ${u} + wC;\n              float mask = float(maxPosValue == curPosValue ? 1.0 : 0.0);\n\n              dotProd += dyValue * mask;\n            }\n          }\n        }\n        setOutput(dotProd);\n      }\n    `}}const eI={kernelName:r.MaxPool3DGrad,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{dy:a,input:i}=t,o=i,{filterSize:l,strides:u,pad:c,dimRoundingMode:h}=s,p=r.backend_util.computePool3DInfo(o.shape,l,u,[1,1,1],c,h),d=new Qx(p,"max",!0),f=n.runWebGLProgram(d,[o],o.dtype),m=new Jk(p),g=n.runWebGLProgram(m,[a,f],o.dtype);return n.disposeIntermediateTensorInfo(f),g}},tI={kernelName:r.MaxPoolGrad,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{dy:a,input:i,output:o}=t,l=i;jg([i,o],"maxPoolGrad");const{filterSize:u,strides:c,pad:h,dimRoundingMode:p}=s,d=r.backend_util.computePool2DInfo(l.shape,u,c,1,h,p),f=new Zx(d,"max",!0),m=n.runWebGLProgram(f,[l],l.dtype),g=new Qk(d),y=n.runWebGLProgram(g,[a,m],l.dtype);return n.disposeIntermediateTensorInfo(m),y}},nI={kernelName:r.MaxPoolWithArgmax,backendName:"webgl",kernelFunc:({inputs:e,attrs:t,backend:n})=>{const{x:s}=e,{filterSize:a,strides:i,pad:o,includeBatchInIndex:l}=t,u=n;r.util.assert(4===s.shape.length,(()=>`Error in maxPool: input must be rank 4 but got rank ${s.shape.length}.`));const c=[1,1];r.util.assert(r.backend_util.eitherStridesOrDilationsAreOne(i,c),(()=>`Error in maxPool: Either strides or dilations must be 1. Got strides ${i} and dilations '${c}'`));const h=r.backend_util.computePool2DInfo(s.shape,a,i,c,o),[p,d]=function(e,t,n,s){let a=new Zx(n,"max",!1);const r=s.runWebGLProgram(a,[e],"float32");return a=new Zx(n,"max",!0,!0,t),[r,s.runWebGLProgram(a,[e],"float32")]}(s,l,h,u);return[p,d]}},sI={kernelName:r.Mean,backendName:"webgl",kernelFunc:({inputs:e,attrs:t,backend:n})=>{const{x:s}=e,{keepDims:a,axis:i}=t,o=n,l=s.shape.length,u=r.util.parseAxisParam(i,s.shape);let c=u;const h=r.backend_util.getAxesPermutation(c,l),p=null!=h,d=o.shouldExecuteOnCPU([s]),f=[];let m=s;if(p){if(d){const e=o.texData.get(m.dataId).values,t=new Array(l);for(let e=0;e<t.length;e++)t[e]=s.shape[h[e]];const n=wb(e,s.shape,s.dtype,h,t);m=o.makeTensorInfo(t,s.dtype),o.texData.get(m.dataId).values=n}else m=dx(s,h,o);f.push(m),c=r.backend_util.getInnerMostAxes(c.length,l)}r.backend_util.assertAxesAreInnerMostDims("sum",c,l);const[g,y]=r.backend_util.computeOutAndReduceShapes(m.shape,c);let b=g;a&&(b=r.backend_util.expandShapeToKeepDim(g,u));const x=function(e,t,n,s){const a=r.util.sizeFromShape(t),i=ix({inputs:{x:e},attrs:{shape:[r.util.sizeFromShape(e.shape)/a,a]},backend:s}),o=cx(i,"float32","mean",s),l=ix({inputs:{x:o},attrs:{shape:n},backend:s});return s.disposeIntermediateTensorInfo(i),s.disposeIntermediateTensorInfo(o),l}(m,y,b,o);for(const e of f)o.disposeIntermediateTensorInfo(e);return x}},aI={kernelName:r.Min,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:a}=t,{axis:i,keepDims:o}=s,l=a.shape.length,u=r.util.parseAxisParam(i,a.shape);let c=u;const h=r.backend_util.getAxesPermutation(c,l);let p=a;null!=h&&(p=gx({inputs:{x:a},backend:n,attrs:{perm:h}}),c=r.backend_util.getInnerMostAxes(c.length,a.shape.length)),r.backend_util.assertAxesAreInnerMostDims("min",c,l);const[d,f]=r.backend_util.computeOutAndReduceShapes(p.shape,c),m=ix({inputs:{x:p},backend:n,attrs:{shape:[-1,r.util.sizeFromShape(f)]}}),g=cx(m,m.dtype,"min",n);let y;return y=ix(o?{inputs:{x:g},backend:n,attrs:{shape:r.backend_util.expandShapeToKeepDim(d,u)}}:{inputs:{x:g},backend:n,attrs:{shape:d}}),n.disposeIntermediateTensorInfo(m),n.disposeIntermediateTensorInfo(g),null!=h&&n.disposeIntermediateTensorInfo(p),y}},rI=Jb({opSnippet:"\n  if (isnan(a)) return a;\n  if (isnan(b)) return b;\n\n  return min(a, b);\n",packedOpSnippet:"\n  vec4 result = vec4(min(a, b));\n  bvec4 isNaNA = isnan(a);\n  bvec4 isNaNB = isnan(b);\n  bvec4 isNaN = bvec4(isNaNA.x || isNaNB.x, isNaNA.y || isNaNB.y, isNaNA.z || isNaNB.z, isNaNA.w || isNaNB.w);\n  \n  result.r = isNaN.r ? NAN : result.r;\n  result.g = isNaN.g ? NAN : result.g;\n  result.b = isNaN.b ? NAN : result.b;\n  result.a = isNaN.a ? NAN : result.a;\n\n  return result;\n",cpuKernelImpl:Zy}),iI={kernelName:r.Minimum,backendName:"webgl",kernelFunc:rI};class oI{constructor(e,t,n){this.variableNames=["x"],this.outputShape=t.map(((t,n)=>t[0]+e[n]+t[1]));const s=e.length,a=hy(s),r=t.map((e=>e[0])).join(","),i=t.map(((t,n)=>t[0]+e[n])).join(","),o=["coords[0]","coords[1]","coords[2]","coords[3]"].slice(0,s),l="reflect"===n?0:1;this.userCode=1!==s?`\n      ${a} start = ${a}(${r});\n      ${a} end = ${a}(${i});\n\n      void main() {\n        ${a} outC = getOutputCoords();\n        for (int i = 0; i < ${s}; i++) {\n          if (outC[i] < start[i]) {\n            outC[i] = start[i] * 2 - outC[i] - ${l};\n          } else if(outC[i] >= end[i]) {\n            outC[i] = (end[i] - 1) * 2 - outC[i] + ${l};\n          }\n        }\n        ${a} coords = outC - start;\n        setOutput(getX(${o}));\n      }\n    `:`\n        int start = ${r};\n        int end = ${i};\n\n        void main() {\n          int outC = getOutputCoords();\n          if (outC < start) {\n            outC = start * 2 - outC - ${l};\n          } else if(outC >= end) {\n            outC = (end - 1) * 2 - outC + ${l};\n          }\n          setOutput(getX(outC - start));\n        }\n      `}}class lI{constructor(e,t,n){this.variableNames=["x"],this.packedInputs=!0,this.packedOutput=!0,this.outputShape=t.map(((t,n)=>t[0]+e[n]+t[1]));const s=e.length,a=hy(s),r=t.map((e=>e[0])).join(","),i=t.map(((t,n)=>t[0]+e[n])).join(","),o=Sb("rc",s),l=Sb("source",s),u=`${o[s-1]} < ${this.outputShape[s-1]}`,c=1===s?"source":`vec2(${l.slice(-2).join()})`,h="reflect"===n?0:1;let p="";if(1===s){const e=`\n        ${a} source = rc;\n        if (source < start) {\n          source = start * 2 - source - ${h};\n        } else if (source >= end) {\n          source = (end - 1) * 2 - source + ${h};\n        }\n        source -= start;\n      `;p=`\n        ${a} rc = outputLoc;\n        ${e}\n        result[0] = getChannel(getX(${l.join()}), ${c});\n        ${o[s-1]} += 1;\n        if(${u}) {\n          ${e}\n          result[1] = getChannel(getX(${l.join()}), ${c});\n        }\n      `}else{const e=`\n        ${a} source = rc;\n        ${a} lt = ${a}(lessThan(source, start));\n        ${a} gte = ${a}(greaterThanEqual(source, end));\n        ${a} orig = 1 - (lt + gte);\n        source = orig * source +\n                lt * (start * 2 - source - ${h}) +\n                gte * ((end - 1) * 2 - source + ${h});\n        source -= start;\n      `;p=`\n        ${a} rc = outputLoc;\n        ${e}\n        result[0] = getChannel(getX(${l.join()}), ${c});\n        ${o[s-1]} += 1;\n        if(${u}) {\n          ${e}\n          result[1] = getChannel(getX(${l.join()}), ${c});\n        }\n        rc = outputLoc;\n        ${o[s-2]} += 1;\n        if(${o[s-2]} < ${this.outputShape[s-2]}) {\n          ${e}\n          result[2] = getChannel(getX(${l.join()}), ${c});\n          ${o[s-1]} += 1;\n          if(${u}) {\n            ${e}\n            result[3] = getChannel(getX(${l.join()}), ${c});\n          }\n        }\n      `}this.userCode=`\n      const ${a} start = ${a}(${r});\n      const ${a} end = ${a}(${i});\n\n      void main() {\n        ${a} outputLoc = getOutputCoords();\n        vec4 result = vec4(0.);\n        ${p}\n        setOutput(result);\n      }\n    `}}const uI={kernelName:r.MirrorPad,backendName:"webgl",kernelFunc:({inputs:e,backend:t,attrs:n})=>{const{x:s}=e,{paddings:a,mode:i}=n,o=(0,r.env)().getBool("WEBGL_PACK_ARRAY_OPERATIONS")?new lI(s.shape,a,i):new oI(s.shape,a,i);return t.runWebGLProgram(o,[s],s.dtype)}},cI=Jb({opSnippet:"if (b == 0.0) return NAN;\n  return mod(a, b);",packedOpSnippet:"\n  vec4 result = mod(a, b);\n  bvec4 isNaN = equal(b, vec4(0.0));\n  \n  result.r = isNaN.r ? NAN : result.r;\n  result.g = isNaN.g ? NAN : result.g;\n  result.b = isNaN.b ? NAN : result.b;\n  result.a = isNaN.a ? NAN : result.a;\n\n  return result;\n"}),hI={kernelName:r.Mod,backendName:"webgl",kernelFunc:cI};class pI{constructor(e,t,n){this.variableNames=["probs"],this.customUniforms=[{name:"seed",type:"float"}],this.outputShape=[e,n],this.userCode=`\n      void main() {\n        ivec2 coords = getOutputCoords();\n        int batch = coords[0];\n\n        float r = random(seed);\n        float cdf = 0.0;\n\n        for (int i = 0; i < ${t-1}; i++) {\n          cdf += getProbs(batch, i);\n\n          if (r < cdf) {\n            setOutput(float(i));\n            return;\n          }\n        }\n\n        // If no other event happened, last event happened.\n        setOutput(float(${t-1}));\n      }\n    `}}const dI=Jb({opSnippet:"\nif (a == b) {\n  return 1.0;\n};\nreturn a / b;",packedOpSnippet:"\n  // vec4 one = vec4(equal(a, b));\n  // return one + (vec4(1.0) - one) * a / b;\n  vec4 result = a / b;\n  if(a.x == b.x) {\n    result.x = 1.;\n  }\n  if(a.y == b.y) {\n    result.y = 1.;\n  }\n  if(a.z == b.z) {\n    result.z = 1.;\n  }\n  if(a.w == b.w) {\n    result.w = 1.;\n  }\n\n  return result;\n",checkOutOfBounds:!0}),fI={kernelName:r.RealDiv,backendName:"webgl",kernelFunc:dI},mI="return a - b;",gI=Jb({opSnippet:mI,packedOpSnippet:mI,supportsComplex:!0,cpuKernelImpl:bb}),yI={kernelName:r.Sub,backendName:"webgl",kernelFunc:gI};function bI(e){const{inputs:t,backend:n,attrs:s}=e,{logits:a}=t,{dim:i}=s,o=r.util.parseAxisParam([i],a.shape),l=qk({inputs:{x:a},backend:n,attrs:{reductionIndices:o,keepDims:!1}}),u=r.backend_util.expandShapeToKeepDim(l.shape,o),c=ix({inputs:{x:l},backend:n,attrs:{shape:u}}),h=gI({inputs:{a,b:c},backend:n}),p=zw({inputs:{x:h},backend:n}),d=fx({inputs:{x:p},backend:n,attrs:{axis:o,keepDims:!1}}),f=ix({inputs:{x:d},backend:n,attrs:{shape:u}}),m=dI({inputs:{a:p,b:f},backend:n});return n.disposeIntermediateTensorInfo(l),n.disposeIntermediateTensorInfo(c),n.disposeIntermediateTensorInfo(h),n.disposeIntermediateTensorInfo(p),n.disposeIntermediateTensorInfo(d),n.disposeIntermediateTensorInfo(f),m}const xI={kernelName:r.Softmax,backendName:"webgl",kernelFunc:bI},vI={kernelName:r.Multinomial,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{logits:a}=t,{numSamples:r,seed:i,normalized:o}=s,l=o?a:bI({inputs:{logits:a},backend:n,attrs:{dim:a.shape.length-1}}),u=l.shape[0],c=l.shape[1],h=new pI(u,c,r),p=[[i]],d=n.runWebGLProgram(h,[l],"int32",p);return o||n.disposeIntermediateTensorInfo(l),d}},wI={kernelName:r.Neg,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n}=e,{x:s}=t;if(n.shouldExecuteOnCPU([s])){const e=n.texData.get(s.dataId),[t,a]=Jy(e.values,s.shape,s.dtype);return n.makeTensorInfo(a,s.dtype,t)}let a;return a=(0,r.env)().getBool("WEBGL_PACK_UNARY_OPERATIONS")?new Db(s.shape,"\n  vec4 result = -x;\n  bvec4 isNaN = isnan(x);\n\n  result.r = isNaN.r ? x.r : result.r;\n  result.g = isNaN.g ? x.g : result.g;\n  result.b = isNaN.b ? x.b : result.b;\n  result.a = isNaN.a ? x.a : result.a;\n\n  return result;\n"):new Ab(s.shape,"if (isnan(x)) return x;\n  return -x;\n"),n.runWebGLProgram(a,[s],s.dtype)}},kI=r.kernel_impls.nonMaxSuppressionV3Impl,II={kernelName:r.NonMaxSuppressionV3,backendName:"webgl",kernelFunc:function(e){r.backend_util.warn("tf.nonMaxSuppression() in webgl locks the UI thread. Call tf.nonMaxSuppressionAsync() instead");const{inputs:t,backend:n,attrs:s}=e,{boxes:a,scores:i}=t,{maxOutputSize:o,iouThreshold:l,scoreThreshold:u}=s,c=n.readSync(a.dataId),h=n.readSync(i.dataId),{selectedIndices:p}=kI(c,h,o,l,u);return n.makeTensorInfo([p.length],"int32",new Int32Array(p))}},SI=r.kernel_impls.nonMaxSuppressionV4Impl,NI={kernelName:r.NonMaxSuppressionV4,backendName:"webgl",kernelFunc:function(e){r.backend_util.warn("tf.nonMaxSuppression() in webgl locks the UI thread. Call tf.nonMaxSuppressionAsync() instead");const{inputs:t,backend:n,attrs:s}=e,{boxes:a,scores:i}=t,{maxOutputSize:o,iouThreshold:l,scoreThreshold:u,padToMaxOutputSize:c}=s,h=n.readSync(a.dataId),p=n.readSync(i.dataId),{selectedIndices:d,validOutputs:f}=SI(h,p,o,l,u,c);return[n.makeTensorInfo([d.length],"int32",new Int32Array(d)),n.makeTensorInfo([],"int32",new Int32Array([f]))]}},TI=r.kernel_impls.nonMaxSuppressionV5Impl,CI={kernelName:r.NonMaxSuppressionV5,backendName:"webgl",kernelFunc:function(e){r.backend_util.warn("tf.nonMaxSuppression() in webgl locks the UI thread. Call tf.nonMaxSuppressionAsync() instead");const{inputs:t,backend:n,attrs:s}=e,{boxes:a,scores:i}=t,{maxOutputSize:o,iouThreshold:l,scoreThreshold:u,softNmsSigma:c}=s,h=n.readSync(a.dataId),p=n.readSync(i.dataId),d=o,f=l,m=u,g=c,{selectedIndices:y,selectedScores:b}=TI(h,p,d,f,m,g);return[n.makeTensorInfo([y.length],"int32",new Int32Array(y)),n.makeTensorInfo([b.length],"float32",new Float32Array(b))]}};class $I{constructor(e,t,n,s){this.variableNames=["indices"],this.outputShape=[e,t],this.userCode=`\n      void main() {\n        ivec2 coords = getOutputCoords();\n        int index = round(getIndices(coords.x));\n        setOutput(mix(float(${s}), float(${n}),\n                      float(index == coords.y)));\n      }\n    `}}const EI={kernelName:r.OneHot,backendName:"webgl",kernelFunc:e=>{const{inputs:t,backend:n,attrs:s}=e,{indices:a}=t,{dtype:i,depth:o,onValue:l,offValue:u}=s,c=r.util.sizeFromShape(a.shape),h=new $I(c,o,l,u),p=ix({inputs:{x:a},backend:n,attrs:{shape:[c]}}),d=n.runWebGLProgram(h,[p],i);n.disposeIntermediateTensorInfo(p);const f=ix({inputs:{x:d},backend:n,attrs:{shape:[...a.shape,o]}});return n.disposeIntermediateTensorInfo(d),f}};function _I(e){const{inputs:t,backend:n}=e,{x:s}=t;if("complex64"===s.dtype){const e=xv({inputs:{input:s},backend:n}),t=_I({inputs:{x:e},backend:n}),a=Dv({inputs:{input:s},backend:n}),r=_I({inputs:{x:a},backend:n}),i=Gb({inputs:{real:t,imag:r},backend:n});return n.disposeIntermediateTensorInfo(e),n.disposeIntermediateTensorInfo(t),n.disposeIntermediateTensorInfo(a),n.disposeIntermediateTensorInfo(r),i}return jw({attrs:{shape:s.shape,dtype:s.dtype,value:"string"===s.dtype?"":0},backend:n})}const AI={kernelName:r.ZerosLike,backendName:"webgl",kernelFunc:_I},RI={kernelName:r.OnesLike,backendName:"webgl",kernelFunc:function e(t){const{inputs:n,backend:s}=t,{x:a}=n;if("string"===a.dtype)throw new Error("onesLike is not supported under string dtype");if("complex64"===a.dtype){const t=xv({inputs:{input:a},backend:s}),n=e({inputs:{x:t},backend:s}),r=Dv({inputs:{input:a},backend:s}),i=_I({inputs:{x:r},backend:s}),o=Gb({inputs:{real:n,imag:i},backend:s});return s.disposeIntermediateTensorInfo(t),s.disposeIntermediateTensorInfo(n),s.disposeIntermediateTensorInfo(r),s.disposeIntermediateTensorInfo(i),o}return jw({attrs:{shape:a.shape,dtype:a.dtype,value:1},backend:s})}},FI={kernelName:r.Pack,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{axis:a}=s;if(1===t.length)return Bw({inputs:{input:t[0]},backend:n,attrs:{dim:a}});const i=t[0].shape,o=t[0].dtype;t.forEach((e=>{r.util.assertShapesMatch(i,e.shape,"All tensors passed to stack must have matching shapes"),r.util.assert(o===e.dtype,(()=>"All tensors passed to stack must have matching dtypes"))}));const l=[],u=zv({inputs:t.map((e=>{const t=Bw({inputs:{input:e},backend:n,attrs:{dim:a}});return l.push(t),t})),backend:n,attrs:{axis:a}});return l.forEach((e=>n.disposeIntermediateTensorInfo(e))),u}};class DI{constructor(e,t,n){this.variableNames=["x"],this.customUniforms=[{name:"value",type:"float"}],this.outputShape=t.map(((t,n)=>t[0]+e[n]+t[1]));const s=e.length,a=hy(s),r=t.map((e=>e[0])).join(","),i=t.map(((t,n)=>t[0]+e[n])).join(","),o=["coords[0]","coords[1]","coords[2]","coords[3]"].slice(0,s);this.userCode=1!==s?`\n      ${a} start = ${a}(${r});\n      ${a} end = ${a}(${i});\n\n      void main() {\n        ${a} outC = getOutputCoords();\n        if (any(lessThan(outC, start)) || any(greaterThanEqual(outC, end))) {\n          setOutput(value);\n        } else {\n          ${a} coords = outC - start;\n          setOutput(getX(${o}));\n        }\n      }\n    `:`\n        int start = ${r};\n        int end = ${i};\n\n        void main() {\n          int outC = getOutputCoords();\n          if (outC < start || outC >= end) {\n            setOutput(value);\n          } else {\n            setOutput(getX(outC - start));\n          }\n        }\n      `}}class OI{constructor(e,t,n){this.variableNames=["x"],this.packedInputs=!0,this.packedOutput=!0,this.customUniforms=[{name:"value",type:"float"}],this.outputShape=t.map(((t,n)=>t[0]+e[n]+t[1]));const s=e.length,a=hy(s),r=t.map((e=>e[0])).join(","),i=t.map(((t,n)=>t[0]+e[n])).join(","),o=Sb("rc",s),l=Sb("source",s),u=`${o[s-1]} < ${this.outputShape[s-1]}`,c=1===s?"source":`vec2(${l.slice(-2).join()})`,h=[`${a} rc = outputLoc;`,`${o[s-1]} += 1;\n       if(${u}) {\n      `,1===s?"":`}\n       rc = outputLoc;\n       ${o[s-2]} += 1;\n       if(${o[s-2]} < ${this.outputShape[s-2]}) {`,1===s?"":`  ${o[s-1]} += 1;\n         if(${u}) {`],p=1===s?"rc < start || rc >= end":"any(lessThan(rc, start)) || any(greaterThanEqual(rc, end))";let d="";for(let e=0,t=1===s?2:4;e<t;e++)d+=`\n        ${h[e]}\n        if (${p}) {\n          result[${e}] = float(value);\n        } else {\n          ${a} source = rc - start;\n          result[${e}] = getChannel(getX(${l.join()}), ${c});\n        }\n      `;d+=1===s?"} ":"}}",this.userCode=`\n      const ${a} start = ${a}(${r});\n      const ${a} end = ${a}(${i});\n\n      void main() {\n        ${a} outputLoc = getOutputCoords();\n        vec4 result = vec4(0.);\n        ${d}\n        setOutput(result);\n      }\n    `}}const MI=e=>{const{inputs:t,backend:n,attrs:s}=e,{x:a}=t,{paddings:i,constantValue:o}=s;if(0===r.util.sizeFromShape(a.shape)){const e=i.map(((e,t)=>e[0]+a.shape[t]+e[1]));return jw({backend:n,attrs:{shape:e,value:o,dtype:a.dtype}})}const l=(0,r.env)().getBool("WEBGL_PACK_ARRAY_OPERATIONS")?new OI(a.shape,i,o):new DI(a.shape,i,o),u=[[o]];return n.runWebGLProgram(l,[a],a.dtype,u)},zI={kernelName:r.PadV2,backendName:"webgl",kernelFunc:MI},LI=Jb({opSnippet:"\n  if(a < 0.0 && floor(b) < b){\n    return NAN;\n  }\n  if (b == 0.0) {\n    return 1.0;\n  }\n  return (round(mod(b, 2.0)) != 1) ?\n      pow(abs(a), b) : sign(a) * pow(abs(a), b);\n",packedOpSnippet:"\n  // isModRound1 has 1 for components with round(mod(b, 2.0)) == 1, 0 otherwise.\n  vec4 isModRound1 = vec4(equal(round(mod(b, 2.0)), ivec4(1)));\n  vec4 multiplier = sign(a) * isModRound1 + (vec4(1.0) - isModRound1);\n  vec4 result = multiplier * pow(abs(a), b);\n\n  // Ensure that a^0 = 1, including 0^0 = 1 as this correspond to TF and JS\n  bvec4 isExpZero = equal(b, vec4(0.0));\n  result.r = isExpZero.r ? 1.0 : result.r;\n  result.g = isExpZero.g ? 1.0 : result.g;\n  result.b = isExpZero.b ? 1.0 : result.b;\n  result.a = isExpZero.a ? 1.0 : result.a;\n\n  bvec4 isNaN1 = lessThan(a, vec4(0.0));\n  bvec4 isNaN2 = lessThan(floor(b), b);\n  bvec4 isNaN = bvec4(isNaN1.x && isNaN2.x, isNaN1.y && isNaN2.y, isNaN1.z && isNaN2.z, isNaN1.w && isNaN2.w);\n  \n  result.r = isNaN.r ? NAN : result.r;\n  result.g = isNaN.g ? NAN : result.g;\n  result.b = isNaN.b ? NAN : result.b;\n  result.a = isNaN.a ? NAN : result.a;\n\n  return result;\n"}),BI={kernelName:r.Pow,backendName:"webgl",kernelFunc:LI},PI={kernelName:r.Prod,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:a}=t,{axis:i,keepDims:o}=s,l=a.shape.length,u=[],c=r.util.parseAxisParam(i,a.shape);let h=c;const p=r.backend_util.getAxesPermutation(h,l);let d,f=a;if(null!=p&&(f=gx({inputs:{x:a},backend:n,attrs:{perm:p}}),h=r.backend_util.getInnerMostAxes(h.length,l),u.push(f)),r.backend_util.assertAxesAreInnerMostDims("prod",h,l),n.shouldExecuteOnCPU([f])){const e=n.texData.get(f.dataId).values,{outVals:t,outShape:s,outDtype:a}=tb(f.shape,f.dtype,e,h);d=n.makeTensorInfo(s,a,t)}else{const[e,t]=r.backend_util.computeOutAndReduceShapes(f.shape,h),s=r.util.sizeFromShape(t),i=ix({inputs:{x:f},backend:n,attrs:{shape:[-1,s]}}),o=cx(i,(0,r.sumOutType)(a.dtype),"prod",n);d=ix({inputs:{x:o},backend:n,attrs:{shape:e}}),u.push(i),u.push(o)}if(o){u.push(d);const e=r.backend_util.expandShapeToKeepDim(d.shape,c);d=ix({inputs:{x:d},backend:n,attrs:{shape:e}})}return u.forEach((e=>n.disposeIntermediateTensorInfo(e))),d}},VI={kernelName:r.RaggedGather,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{paramsNestedSplits:a,paramsDenseValues:r,indices:i}=t,{outputRaggedRank:o}=s,l=a.map((e=>n.readSync(e.dataId))),u=a.map((e=>e.shape)),c=n.readSync(r.dataId),h=n.readSync(i.dataId),[p,d,f]=nb(l,u,c,r.shape,r.dtype,h,i.shape,o),m=p.map((e=>n.makeTensorInfo([e.length],"int32",e))),g=n.makeTensorInfo(f,r.dtype,d);return m.concat([g])}},WI={kernelName:r.RaggedTensorToTensor,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{shape:a,values:r,defaultValue:i,rowPartitionTensors:o}=t,{rowPartitionTypes:l}=s,u=n.readSync(a.dataId),c=n.readSync(r.dataId),h=n.readSync(i.dataId),p=o.map((e=>n.readSync(e.dataId))),d=o.map((e=>e.shape)),[f,m]=sb(u,a.shape,c,r.shape,r.dtype,h,i.shape,p,d,l);return n.makeTensorInfo(f,r.dtype,m)}},UI=e=>{const{backend:t,attrs:n}=e,{start:s,stop:a,step:r,dtype:i}=n,o=ab(s,a,r,i);return t.makeTensorInfo([o.length],i,o)},GI={kernelName:r.Range,backendName:"webgl",kernelFunc:UI},HI=Qb({opSnippet:"return 1.0 / x;"}),qI={kernelName:r.Reciprocal,backendName:"webgl",kernelFunc:HI},XI=Qb({opSnippet:"if (isnan(x)) return x;\n  return (x < 0.0) ? 0.0 : x;\n",packedOpSnippet:"\n  vec4 result = x * vec4(greaterThanEqual(x, vec4(0.0)));\n  bvec4 isNaN = isnan(x);\n\n  result.r = isNaN.r ? x.r : result.r;\n  result.g = isNaN.g ? x.g : result.g;\n  result.b = isNaN.b ? x.b : result.b;\n  result.a = isNaN.a ? x.a : result.a;\n\n  return result;\n"}),jI={kernelName:r.Relu,backendName:"webgl",kernelFunc:XI},KI=Qb({opSnippet:"if (isnan(x)) return x;\n  return (x < 0.0) ? 0.0 : min(6.0, x);\n",packedOpSnippet:"\n  vec4 result = min(x, vec4(6.)) * vec4(greaterThanEqual(x, vec4(0.0)));\n  bvec4 isNaN = isnan(x);\n\n  result.r = isNaN.r ? x.r : result.r;\n  result.g = isNaN.g ? x.g : result.g;\n  result.b = isNaN.b ? x.b : result.b;\n  result.a = isNaN.a ? x.a : result.a;\n\n  return result;\n"}),YI={kernelName:r.Relu6,backendName:"webgl",kernelFunc:KI};class ZI{constructor(e,t,n,s,a){this.variableNames=["A"],this.outputShape=[];const[r,i,o,l]=e;this.outputShape=[r,t,n,l];const u=[s&&t>1?i-1:i,s&&n>1?o-1:o],c=[s&&t>1?t-1:t,s&&n>1?n-1:n];let h;h=a?"(vec2(yRC) + vec2(0.5)) * effectiveInputOverOutputRatioRC - vec2(0.5)":"vec2(yRC) * effectiveInputOverOutputRatioRC",this.userCode=`\n      const vec2 effectiveInputOverOutputRatioRC = vec2(\n          ${u[0]/c[0]},\n          ${u[1]/c[1]});\n      const vec2 inputShapeRC = vec2(${i}.0, ${o}.0);\n\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int b = coords[0];\n        int d = coords[3];\n        ivec2 yRC = coords.yz;\n\n        // Fractional source index.\n        vec2 sourceFracIndexRC = ${h};\n\n        // Compute the four integer indices.\n        ivec2 sourceFloorRC = ivec2(max(sourceFracIndexRC, vec2(0.0)));\n        ivec2 sourceCeilRC = ivec2(\n          min(inputShapeRC - 1.0, ceil(sourceFracIndexRC)));\n\n        float topLeft = getA(b, sourceFloorRC.x, sourceFloorRC.y, d);\n        float bottomLeft = getA(b, sourceCeilRC.x, sourceFloorRC.y, d);\n        float topRight = getA(b, sourceFloorRC.x, sourceCeilRC.y, d);\n        float bottomRight = getA(b, sourceCeilRC.x, sourceCeilRC.y, d);\n\n        vec2 fracRC = sourceFracIndexRC - vec2(sourceFloorRC);\n\n        float top = topLeft + (topRight - topLeft) * fracRC.y;\n        float bottom = bottomLeft + (bottomRight - bottomLeft) * fracRC.y;\n        float newValue = top + (bottom - top) * fracRC.x;\n\n        setOutput(newValue);\n      }\n    `}}class QI{constructor(e,t,n,s,a){this.variableNames=["A"],this.packedInputs=!0,this.packedOutput=!0,this.outputShape=[];const[r,i,o,l]=e;this.outputShape=[r,t,n,l];const u=[s&&t>1?i-1:i,s&&n>1?o-1:o],c=[s&&t>1?t-1:t,s&&n>1?n-1:n];let h;h=a?"(vec3(yRC) + vec3(0.5)) * effectiveInputOverOutputRatioRC - vec3(0.5)":"vec3(yRC) * effectiveInputOverOutputRatioRC",this.userCode=`\n      const vec3 effectiveInputOverOutputRatioRC = vec3(\n          ${u[0]/c[0]},\n          ${u[1]/c[1]},\n          ${u[1]/c[1]});\n      const vec3 inputShapeRC = vec3(${i}.0, ${o}.0,\n                                     ${o}.0);\n\n      float getAValue(int b, int r, int c, int d) {\n        return getChannel(getA(b, r, c, d), vec2(c, d));\n      }\n\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int b = coords[0];\n        int d = coords[3];\n        // Calculate values for next column in yRC.z.\n        ivec3 yRC = coords.yzz + ivec3(0, 0, 1);\n\n        // Fractional source index.\n        vec3 sourceFracIndexRC = ${h};\n\n        // Compute the four integer indices.\n        ivec3 sourceFloorRC = ivec3(max(sourceFracIndexRC, vec3(0.0)));\n        ivec3 sourceCeilRC = ivec3(\n          min(inputShapeRC - 1.0, ceil(sourceFracIndexRC)));\n\n        // Should we calculate next column and row elements in 2x2 packed cell.\n        bool hasNextCol = d < ${l-1};\n        bool hasNextRow = coords.z < ${n-1};\n\n        // In parallel, construct four corners for all four components in\n        // packed 2x2 cell.\n        vec4 topLeft = vec4(\n          getAValue(b, sourceFloorRC.x, sourceFloorRC.y, d),\n          hasNextCol ? getAValue(b, sourceFloorRC.x, sourceFloorRC.y, d + 1)\n                     : 0.0,\n          hasNextRow ? getAValue(b, sourceFloorRC.x, sourceFloorRC.z, d)\n                     : 0.0,\n          (hasNextRow && hasNextCol) ?\n            getAValue(b, sourceFloorRC.x, sourceFloorRC.z, d + 1) : 0.0);\n\n        vec4 bottomLeft = vec4(\n          getAValue(b, sourceCeilRC.x, sourceFloorRC.y, d),\n          hasNextCol ? getAValue(b, sourceCeilRC.x, sourceFloorRC.y, d + 1)\n                     : 0.0,\n          hasNextRow ? getAValue(b, sourceCeilRC.x, sourceFloorRC.z, d)\n                     : 0.0,\n          (hasNextRow && hasNextCol) ?\n            getAValue(b, sourceCeilRC.x, sourceFloorRC.z, d + 1) : 0.0);\n\n        vec4 topRight = vec4(\n          getAValue(b, sourceFloorRC.x, sourceCeilRC.y, d),\n          hasNextCol ? getAValue(b, sourceFloorRC.x, sourceCeilRC.y, d + 1)\n                     : 0.0,\n          hasNextRow ? getAValue(b, sourceFloorRC.x, sourceCeilRC.z, d)\n                     : 0.0,\n          (hasNextRow && hasNextCol) ?\n            getAValue(b, sourceFloorRC.x, sourceCeilRC.z, d + 1) : 0.0);\n\n        vec4 bottomRight = vec4(\n          getAValue(b, sourceCeilRC.x, sourceCeilRC.y, d),\n          hasNextCol ? getAValue(b, sourceCeilRC.x, sourceCeilRC.y, d + 1)\n                     : 0.0,\n          hasNextRow ? getAValue(b, sourceCeilRC.x, sourceCeilRC.z, d)\n                     : 0.0,\n          (hasNextRow && hasNextCol) ?\n            getAValue(b, sourceCeilRC.x, sourceCeilRC.z, d + 1) : 0.0);\n\n        vec3 fracRC = sourceFracIndexRC - vec3(sourceFloorRC);\n\n        vec4 top = mix(topLeft, topRight, fracRC.yyzz);\n        vec4 bottom = mix(bottomLeft, bottomRight, fracRC.yyzz);\n        vec4 newValue = mix(top, bottom, fracRC.x);\n\n        setOutput(newValue);\n      }\n    `}}const JI={kernelName:r.ResizeBilinear,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{images:a}=t,{alignCorners:i,halfPixelCenters:o,size:l}=s,[u,c]=l,h=(0,r.env)().getBool("WEBGL_PACK_IMAGE_OPERATIONS")?new QI(a.shape,u,c,i,o):new ZI(a.shape,u,c,i,o);return n.runWebGLProgram(h,[a],"float32")}};class eS{constructor(e,t,n){this.variableNames=["dy"],this.outputShape=[],this.outputShape=t;const[,s,a]=t,[,r,i]=e,o=[n&&r>1?s-1:s,n&&i>1?a-1:a],l=[n&&r>1?r-1:r,n&&i>1?i-1:i],u=o[0]/l[0],c=o[1]/l[1],h=1/u,p=1/c,d=2*Math.ceil(h)+2,f=2*Math.ceil(p)+2;this.userCode=`\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int b = coords[0];\n        int d = coords[3];\n        int r = coords[1];\n        int c = coords[2];\n\n        float accumulator = 0.0;\n\n        const float heightScale = float(${u});\n        const float widthScale = float(${c});\n\n        const float invHeightScale = float(${h});\n        const float invWidthScale = float(${p});\n\n        const int winHeight = int(${d});\n        const int winWidth = int(${f});\n\n        // Compute bounds for where in dy we will look\n        float startRLerp = floor(float(r) * invHeightScale);\n        int startDyR = int(startRLerp - float(winHeight / 2));\n\n        float startCLerp = floor(float(c) * invWidthScale);\n        int startDyC = int(startCLerp - float(winWidth / 2));\n\n        // Loop over dy\n        for (int dyROffset = 0; dyROffset < winHeight; dyROffset++) {\n          int dyR = dyROffset + startDyR;\n\n          // Guard against the window exceeding the bounds of dy\n          if (dyR < 0 || dyR >= ${r}) {\n            continue;\n          }\n\n          for (int dyCOffset = 0; dyCOffset < winWidth; dyCOffset++) {\n            int dyC = dyCOffset + startDyC;\n\n            // Guard against the window exceeding the bounds of dy\n            if (dyC < 0 || dyC >= ${i}) {\n              continue;\n            }\n\n            float dxR = float(dyR) * heightScale;\n            int topDxRIndex = int(floor(dxR));\n            int bottomDxRIndex = int(min(ceil(dxR), ${s-1}.0));\n            float dxRLerp = dxR - float(topDxRIndex);\n            float inverseDxRLerp = 1.0 - dxRLerp;\n\n            float dxC = float(dyC) * widthScale;\n            int leftDxCIndex = int(floor(dxC));\n            int rightDxCIndex = int(min(ceil(dxC), ${a-1}.0));\n            float dxCLerp = dxC - float(leftDxCIndex);\n            float inverseDxCLerp = 1.0 - dxCLerp;\n\n            if (r == topDxRIndex && c == leftDxCIndex) {\n              // topLeft\n              accumulator +=\n                getDy(b, dyR, dyC, d) * inverseDxRLerp * inverseDxCLerp;\n            }\n\n            if (r == topDxRIndex && c == rightDxCIndex) {\n              // topRight\n              accumulator += getDy(b, dyR, dyC, d) * inverseDxRLerp * dxCLerp;\n            }\n\n            if (r == bottomDxRIndex && c == leftDxCIndex) {\n              // bottomLeft\n              accumulator += getDy(b, dyR, dyC, d) * dxRLerp * inverseDxCLerp;\n            }\n\n            if (r == bottomDxRIndex && c == rightDxCIndex) {\n              // bottomRight\n              accumulator += getDy(b, dyR, dyC, d) * dxRLerp * dxCLerp;\n            }\n          }\n        }\n        // End loop over dy\n\n        setOutput(accumulator);\n      }\n    `}}const tS={kernelName:r.ResizeBilinearGrad,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{images:a,dy:r}=t,{alignCorners:i}=s,o=new eS(r.shape,a.shape,i);return n.runWebGLProgram(o,[r],r.dtype)}};class nS{constructor(e,t,n,s,a){this.variableNames=["A"],this.outputShape=[];const[r,i,o,l]=e;this.outputShape=[r,t,n,l];const u=[s&&t>1?i-1:i,s&&n>1?o-1:o],c=[s&&t>1?t-1:t,s&&n>1?n-1:n],h=s?"0.5":"0.0";let p;p=a?"max((vec2(yRC) + vec2(0.5)) * effectiveInputOverOutputRatioRC, vec2(0.0))":"vec2(yRC) * effectiveInputOverOutputRatioRC",this.userCode=`\n      const vec2 effectiveInputOverOutputRatioRC = vec2(\n          ${u[0]/c[0]},\n          ${u[1]/c[1]});\n      const vec2 inputShapeRC = vec2(${i}.0, ${o}.0);\n\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int b = coords[0];\n        int d = coords[3];\n        ivec2 yRC = coords.yz;\n\n        // Fractional source index.\n        vec2 sourceFracIndexRC = ${p};\n\n        // Compute the coordinators of nearest neighbor point.\n        ivec2 sourceNearestRC = ivec2(\n          min(inputShapeRC - 1.0, floor(sourceFracIndexRC + ${h})));\n        float newValue = getA(b, sourceNearestRC.x, sourceNearestRC.y, d);\n\n        setOutput(newValue);\n      }\n    `}}class sS{constructor(e,t,n,s,a){this.variableNames=["A"],this.packedInputs=!0,this.packedOutput=!0,this.outputShape=[];const[r,i,o,l]=e;this.outputShape=[r,t,n,l];const u=[s&&t>1?i-1:i,s&&n>1?o-1:o],c=[s&&t>1?t-1:t,s&&n>1?n-1:n],h=s?"0.5":"0.0";let p;p=a?"max((vec3(yRC) + vec3(0.5)) * effectiveInputOverOutputRatioRC, vec3(0.0))":"vec3(yRC) * effectiveInputOverOutputRatioRC",this.userCode=`\n      const vec3 effectiveInputOverOutputRatioRC = vec3(\n          ${u[0]/c[0]},\n          ${u[1]/c[1]},\n          ${u[1]/c[1]});\n      const vec3 inputShapeRC = vec3(${i}.0, ${o}.0,\n                                     ${o}.0);\n\n      float getAValue(int b, int r, int c, int d) {\n        return getChannel(getA(b, r, c, d), vec2(c, d));\n      }\n\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int b = coords[0];\n        int d = coords[3];\n        // Calculate values for next column in yRC.z.\n        ivec3 yRC = coords.yzz + ivec3(0, 0, 1);\n\n        // Fractional source index.\n        vec3 sourceFracIndexRC = ${p};\n\n        // Compute the coordinators of nearest neighbor point.\n        ivec3 sourceNearestRC = ivec3(\n          min(inputShapeRC - 1.0, floor(sourceFracIndexRC + ${h})));\n\n        // Should we calculate next column and row elements in 2x2 packed cell.\n        bool hasNextCol = d < ${l-1};\n        bool hasNextRow = coords.z < ${n-1};\n\n        vec4 newValue = vec4(\n          getAValue(b, sourceNearestRC.x, sourceNearestRC.y, d),\n          hasNextCol ? getAValue(b, sourceNearestRC.x, sourceNearestRC.y, d + 1)\n                     : 0.0,\n          hasNextRow ? getAValue(b, sourceNearestRC.x, sourceNearestRC.z, d)\n                     : 0.0,\n          (hasNextRow && hasNextCol) ?\n            getAValue(b, sourceNearestRC.x, sourceNearestRC.z, d + 1) : 0.0);\n\n        setOutput(newValue);\n      }\n    `}}const aS={kernelName:r.ResizeNearestNeighbor,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{images:a}=t,{alignCorners:i,halfPixelCenters:o,size:l}=s,[u,c]=l,h=(0,r.env)().getBool("WEBGL_PACK_IMAGE_OPERATIONS")?new sS(a.shape,u,c,i,o):new nS(a.shape,u,c,i,o);return n.runWebGLProgram(h,[a],a.dtype)}};class rS{constructor(e,t,n){this.variableNames=["dy"],this.outputShape=[],this.outputShape=t;const[,s,a]=t,[,r,i]=e,o=[n&&r>1?s-1:s,n&&i>1?a-1:a],l=[n&&r>1?r-1:r,n&&i>1?i-1:i],u=o[0]/l[0],c=o[1]/l[1],h=1/u,p=1/c,d=2*Math.ceil(h)+2,f=2*Math.ceil(p)+2;this.userCode=`\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int b = coords[0];\n        int d = coords[3];\n        int r = coords[1];\n        int c = coords[2];\n\n        float accumulator = 0.0;\n\n        const float heightScale = float(${u});\n        const float widthScale = float(${c});\n\n        const float invHeightScale = float(${h});\n        const float invWidthScale = float(${p});\n\n        const int winHeight = int(${d});\n        const int winWidth = int(${f});\n\n        // Compute bounds for where in dy we will look\n        float startRLerp = floor(float(r) * invHeightScale);\n        int startDyR = int(floor(startRLerp - float(winHeight / 2)));\n\n        float startCLerp = floor(float(c) * invWidthScale);\n        int startDyC = int(floor(startCLerp - float(winWidth / 2)));\n\n        // Loop over dy\n        for (int dyROffset = 0; dyROffset < winHeight; dyROffset++) {\n          int dyR = dyROffset + startDyR;\n\n          // Guard against the window exceeding the bounds of dy\n          if (dyR < 0 || dyR >= ${r}) {\n            continue;\n          }\n\n          for (int dyCOffset = 0; dyCOffset < winWidth; dyCOffset++) {\n            int dyC = dyCOffset + startDyC;\n\n            // Guard against the window exceeding the bounds of dy\n            if (dyC < 0 || dyC >= ${i}) {\n              continue;\n            }\n\n            float sourceFracRow =\n              float(${o[0]}) *\n                (float(dyR) / float(${l[0]}));\n\n            float sourceFracCol =\n                float(${o[1]}) *\n                  (float(dyC) / float(${l[1]}));\n\n            int sourceNearestRow = int(min(\n                float(int(${s}) - 1),\n                ${n} ? float(round(sourceFracRow)) :\n                                  float(floor(sourceFracRow))));\n\n            int sourceNearestCol = int(min(\n                float(int(${a}) - 1),\n                ${n} ? float(round(sourceFracCol)) :\n                                  float(floor(sourceFracCol))));\n\n            if (r == sourceNearestRow && c == sourceNearestCol) {\n              accumulator += getDy(b, dyR, dyC, d);\n            }\n          }\n        }\n        // End loop over dy\n\n        setOutput(accumulator);\n      }\n    `}}const iS={kernelName:r.ResizeNearestNeighborGrad,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{images:a,dy:r}=t,{alignCorners:i}=s,o=new rS(r.shape,a.shape,i);return n.runWebGLProgram(o,[r],r.dtype)}};class oS{constructor(e,t){this.variableNames=["x"];const n=e.length;if(n>4)throw new Error(`WebGL backend: Reverse of rank-${n} tensor is not yet supported`);if(this.outputShape=e,1===n)return void(this.userCode=`\n        void main() {\n          int coord = getOutputCoords();\n          setOutput(getX(${e[0]} - coord - 1));\n        }\n      `);const s=e.map(((n,s)=>(n=>-1!==t.indexOf(n)&&1!==e[n]?`${e[n]} - coords[${n}] - 1`:`coords[${n}]`)(s))).join(","),a=hy(n);this.userCode=`\n      void main() {\n        ${a} coords = getOutputCoords();\n        setOutput(getX(${s}));\n      }\n    `}}class lS{constructor(e,t){this.variableNames=["x"],this.packedInputs=!0,this.packedOutput=!0;const n=e.length;if(n>4)throw new Error(`WebGL backend: Reverse of rank-${n} tensor is not yet supported`);this.outputShape=e;const s=Sb("rc",n),a=`${s[n-1]} + 1 < ${this.outputShape[n-1]}`,r=`${s[n-2]} + 1 < ${this.outputShape[n-2]}`,i=hy(n);function o(n){const s=e.map(((s,a)=>function(n,s){return-1!==t.indexOf(n)&&1!==e[n]?`${e[n]} - ${s[n]} - 1`:`${s[n]}`}(a,n)));return`getChannel(getX(${s.join(",")}), vec2(${s.slice(-2).join(",")}))`}this.userCode=1===n?`\n        void main(){\n          int rc = getOutputCoords();\n          vec4 result = vec4(0.);\n          result.r = getChannel(getX(${e[0]} - rc - 1),\n            ${e[0]} - rc - 1);\n          if(${a}){\n              result.g = getChannel(getX(${e[0]} - (rc  + 1) - 1),\n                ${e[0]} - (rc  + 1) - 1);\n          }\n          setOutput(result);\n        }\n      `:`\n        void main() {\n          ${i} rc = getOutputCoords();\n          vec4 result = vec4(0.);\n          result.r = ${function(e){return o(e)}(s.slice())};\n          if(${a}){\n            result.g = ${function(e){return e[n-1]="("+e[n-1]+" + 1)",o(e)}(s.slice())};\n          }\n          if(${r}) {\n            result.b = ${function(e){return e[n-2]="("+e[n-2]+" + 1)",o(e)}(s.slice())};\n            if(${a}) {\n              result.a = ${function(e){return e[n-1]="("+e[n-1]+" + 1)",e[n-2]="("+e[n-2]+" + 1)",o(e)}(s.slice())};\n            }\n          }\n          setOutput(result);\n        }\n    `}}const uS={kernelName:r.Reverse,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:a}=t,{dims:i}=s,o=a.shape.length,l=r.util.parseAxisParam(i,a.shape);if(0===o)return Wb({inputs:{x:a},backend:n});const u=(0,r.env)().getBool("WEBGL_PACK_ARRAY_OPERATIONS")?new lS(a.shape,l):new oS(a.shape,l);return n.runWebGLProgram(u,[a],a.dtype)}};class cS{constructor(e,t){this.variableNames=["Image"],this.outputShape=[],this.customUniforms=[{name:"params",type:"vec4"}];const n=e[1],s=e[2];this.outputShape=e;let a="";a="number"==typeof t?`float outputValue = ${t.toFixed(2)};`:`\n        vec3 fill = vec3(${t.join(",")});\n        float outputValue = fill[coords[3]];`,this.userCode=`\n        void main() {\n          ivec4 coords = getOutputCoords();\n          int x = coords[2];\n          int y = coords[1];\n          float coordXFloat = (float(x) - params[0]) * params[3] -\n            (float(y) - params[1]) * params[2];\n          float coordYFloat = (float(x) - params[0]) * params[2] +\n            (float(y) - params[1]) * params[3];\n          int coordX = int(round(coordXFloat + params[0]));\n          int coordY = int(round(coordYFloat + params[1]));\n          ${a}\n          if(coordX >= 0 && coordX < ${s} && coordY >= 0 && coordY < ${n}) {\n            outputValue = getImage(coords[0], coordY, coordX, coords[3]);\n          }\n          setOutput(outputValue);\n        }\n    `}}const hS={kernelName:r.RotateWithOffset,backendName:"webgl",kernelFunc:({inputs:e,attrs:t,backend:n})=>{const{image:s}=e,{radians:a,fillValue:i,center:o}=t,l=n,u=new cS(s.shape,i),[c,h]=r.backend_util.getImageCenter(o,s.shape[1],s.shape[2]),p=[[c,h,Math.sin(a),Math.cos(a)]];return l.runWebGLProgram(u,[s],s.dtype,p)}},pS=Qb({opSnippet:"\n  // OpenGL ES does not support round function.\n  // The algorithm is based on banker's rounding.\n  float base = floor(x);\n  if ((x - base) < 0.5) {\n    return floor(x);\n  } else if ((x - base) > 0.5) {\n    return ceil(x);\n  } else {\n    if (mod(base, 2.0) == 0.0) {\n      return base;\n    } else {\n      return base + 1.0;\n    }\n  }\n"}),dS={kernelName:r.Round,backendName:"webgl",kernelFunc:pS},fS=Qb({opSnippet:"return inversesqrt(x);",cpuKernelImpl:rb}),mS={kernelName:r.Rsqrt,backendName:"webgl",kernelFunc:fS};class gS{constructor(e,t,n,s,a,r,i=!0){this.variableNames=["updates","indices","defaultValue"],this.outputShape=r;const o=hy(a.length),l=hy(r.length);let u="";1===n?u="i":2===n&&(u="i, j");const c=`getIndices(${u})`;let h="";1===s?h="i":2===s&&(h="i, coords[1]");const p=`getUpdates(${h})`,d=t>1?"strides[j]":"strides";this.userCode=`\n        ${o} strides = ${o}(${a});\n\n        void main() {\n          ${l} coords = getOutputCoords();\n          float sum = 0.0;\n          bool found = false;\n          for (int i = 0; i < ${e}; i++) {\n            int flattenedIndex = 0;\n            for (int j = 0; j < ${t}; j++) {\n              int index = round(${c});\n              flattenedIndex += index * ${d};\n            }\n            if (flattenedIndex == coords[0]) {\n              sum += ${p};\n              found = true;\n            }\n          }\n          setOutput(mix(getDefaultValue(), sum, float(found)));\n        }\n      `}}const yS={kernelName:r.ScatterNd,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{indices:a,updates:i}=t,{shape:o}=s,{sliceRank:l,numUpdates:u,sliceSize:c,strides:h,outputSize:p}=r.backend_util.calculateShapes(i,a,o),d=[p/c,c];if(0===p)return n.makeTensorInfo(o,a.dtype);const f=ix({inputs:{x:a},backend:n,attrs:{shape:[u,l]}}),m=ix({inputs:{x:i},backend:n,attrs:{shape:[u,c]}}),g=n.makeTensorInfo([],"float32",new Float32Array([0])),y=new gS(u,l,f.shape.length,m.shape.length,h,d),b=n.runWebGLProgram(y,[m,f,g],m.dtype),x=ix({inputs:{x:b},backend:n,attrs:{shape:o}});return n.disposeIntermediateTensorInfo(f),n.disposeIntermediateTensorInfo(m),n.disposeIntermediateTensorInfo(b),n.disposeIntermediateTensorInfo(g),x}};class bS{constructor(e,t,n,s){this.variableNames=["sortedSequence","values"],this.customUniforms=[{name:"numInputs",type:"int"}],this.outputShape=[e,n];const a=`for (int i = 0; i < ${Math.ceil(Math.log2(t+1))}; ++i) { if (left >= right) break;`,i=2===(0,r.env)().getNumber("WEBGL_VERSION")?"while (left < right) {":a,o="left"===s?"<":"<=";this.userCode=`\n       int findBound(int batch, float value) {\n         int left = 0;\n         int right = numInputs;\n         int mid;\n         ${i}\n           mid = (left + right) / 2;\n           if (getSortedSequence(batch, mid) ${o} value) {\n             left = mid + 1;\n           } else {\n             right = mid;\n           }\n         }\n         return right;\n       }\n\n       void main() {\n         ivec2 coords = getOutputCoords();\n         int batch = coords[0];\n         int valueIndex = coords[1];\n\n         float value = getValues(batch, valueIndex);\n\n         setOutput(float(findBound(batch, value)));\n       }\n     `}}const xS={kernelName:r.SearchSorted,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{sortedSequence:a,values:r}=t,{side:i}=s,o=new bS(a.shape[0],a.shape[1],r.shape[1],i),l=[[a.shape[1]]];return n.runWebGLProgram(o,[a,r],"int32",l)}};class vS{constructor(e,t,n){let s,a;if(this.variableNames=["c","a","b"],this.outputShape=t,n>4)throw Error(`Where for rank ${n} is not yet supported`);if(1===n)a="resRC",s="resRC";else{const n=["resRC.x","resRC.y","resRC.z","resRC.w"],r=[],i=[];for(let s=0;s<t.length;s++)i.push(`${n[s]}`),s<e&&r.push(`${n[s]}`);s=r.join(),a=i.join()}const r=hy(n);this.userCode=`\n      void main() {\n        ${r} resRC = getOutputCoords();\n        float cVal = getC(${s});\n        if (cVal >= 1.0) {\n          setOutput(getA(${a}));\n        } else {\n          setOutput(getB(${a}));\n        }\n      }\n    `}}const wS={kernelName:r.Select,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n}=e,{condition:s,t:a,e:i}=t,o=new vS(s.shape.length,a.shape,a.shape.length);return n.runWebGLProgram(o,[s,a,i],(0,r.upcastType)(a.dtype,i.dtype))}},kS=Qb({opSnippet:`\n  // Stable and Attracting Fixed Point (0, 1) for Normalized Weights.\n  // see: https://arxiv.org/abs/1706.02515\n  float scaleAlpha = ${r.backend_util.SELU_SCALEALPHA};\n  float scale = ${r.backend_util.SELU_SCALE};\n  return (x >= 0.0) ? scale * x : scaleAlpha * (exp(x) - 1.0);\n`}),IS={kernelName:r.Selu,backendName:"webgl",kernelFunc:kS},SS=Qb({opSnippet:"if (isnan(x)) return x;\n  return 1.0 / (1.0 + exp(-1.0 * x));\n",packedOpSnippet:"\n  vec4 result = 1.0 / (1.0 + exp(-1.0 * x));\n  bvec4 isNaN = isnan(x);\n\n  result.r = isNaN.r ? x.r : result.r;\n  result.g = isNaN.g ? x.g : result.g;\n  result.b = isNaN.b ? x.b : result.b;\n  result.a = isNaN.a ? x.a : result.a;\n\n  return result;\n",cpuKernelImpl:ob}),NS={kernelName:r.Sigmoid,backendName:"webgl",kernelFunc:SS},TS=Qb({opSnippet:"\n  if (isnan(x)) { return 0.0; }\n  return sign(x);\n"}),CS={kernelName:r.Sign,backendName:"webgl",kernelFunc:TS},$S=Qb({opSnippet:"if (isnan(x)) return x;\n  return sin(x);\n"}),ES={kernelName:r.Sin,backendName:"webgl",kernelFunc:$S},_S=Qb({opSnippet:"\n  float e2x = exp(x);\n  return (e2x - 1.0 / e2x) / 2.0;\n"}),AS={kernelName:r.Sinh,backendName:"webgl",kernelFunc:_S},RS=Qb({opSnippet:"\n  float epsilon = 1.1920928955078125e-7;\n  float threshold = log(epsilon) + 2.0;\n\n  bool too_large = x > -threshold;\n  bool too_small = x < threshold;\n\n  float result;\n  float exp_x = exp(x);\n\n  if (too_large){\n    result = x;\n  }\n  else if (too_small){\n    result = exp_x;\n  }\n  else{\n    result = log(exp_x + 1.0);\n  }\n  return result;\n"}),FS={kernelName:r.Softplus,backendName:"webgl",kernelFunc:RS},DS={kernelName:r.SpaceToBatchND,backendName:"webgl",kernelFunc:e=>{const{inputs:t,backend:n,attrs:s}=e,{x:a}=t,{blockShape:i,paddings:o}=s;r.util.assert(a.shape.length<=4,(()=>"spaceToBatchND for rank > 4 with a WebGL backend not implemented yet"));const l=i.reduce(((e,t)=>e*t)),u=[[0,0]];u.push(...o);for(let e=1+i.length;e<a.shape.length;++e)u.push([0,0]);const c=[],h=MI({inputs:{x:a},backend:n,attrs:{paddings:u,constantValue:0}}),p=r.backend_util.getReshaped(h.shape,i,l,!1),d=r.backend_util.getPermuted(p.length,i.length,!1),f=r.backend_util.getReshapedPermuted(h.shape,i,l,!1),m=ix({inputs:{x:h},backend:n,attrs:{shape:p}}),g=gx({inputs:{x:m},backend:n,attrs:{perm:d}}),y=ix({inputs:{x:g},backend:n,attrs:{shape:f}});return c.push(h),c.push(m),c.push(g),c.forEach((e=>n.disposeIntermediateTensorInfo(e))),y}},OS={kernelName:r.SparseFillEmptyRows,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n}=e,{indices:s,values:a,denseShape:r,defaultValue:i}=t;if(1!==r.shape.length)throw new Error(`Dense shape must be a vector, saw:\n         ${r.shape}`);if(2!==s.shape.length)throw new Error(`Indices must be a matrix, saw:\n         ${s.shape}`);if(1!==a.shape.length)throw new Error(`Values must be a vector, saw:\n         ${a.shape}`);if(0!==i.shape.length)throw new Error(`Default value must be a scalar, saw:\n        ${i.shape}`);const o=n.readSync(s.dataId),l=n.readSync(a.dataId),u=n.readSync(r.dataId),c=n.readSync(i.dataId)[0],[h,p,d,f,m]=cb(o,s.shape,s.dtype,l,a.dtype,u,c);return[n.makeTensorInfo(p,s.dtype,h),n.makeTensorInfo([p[0]],a.dtype,d),n.makeTensorInfo([f.length],"bool",new Uint8Array(f.map((e=>Number(e))))),n.makeTensorInfo([m.length],s.dtype,new Int32Array(m))]}},MS={kernelName:r.SparseReshape,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n}=e,{inputIndices:s,inputShape:a,newShape:r}=t;if(2!==s.shape.length)throw new Error(`Input indices should be a matrix but received shape ${s.shape}`);if(1!==a.shape.length)throw new Error(`Input shape should be a vector but received shape ${a.shape}`);if(1!==r.shape.length)throw new Error(`Target shape should be a vector but received shape ${r.shape}`);const i=Array.from(n.readSync(a.dataId)),o=n.readSync(s.dataId),l=Array.from(n.readSync(r.dataId)),[u,c,h]=hb(o,s.shape,s.dtype,i,l);return[n.makeTensorInfo(c,s.dtype,u),n.makeTensorInfo([h.length],r.dtype,new Int32Array(h))]}},zS={kernelName:r.SparseSegmentMean,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n}=e,{data:s,indices:a,segmentIds:r}=t;if(s.shape.length<1)throw new Error("Data should be at least 1 dimensional but received scalar");if(1!==a.shape.length)throw new Error(`Indices should be a vector but received shape\n              ${a.shape}`);if(1!==r.shape.length)throw new Error(`Segment ids should be a vector but received shape\n              ${r.shape}`);const i=n.readSync(s.dataId),o=n.readSync(a.dataId),l=n.readSync(r.dataId),[u,c]=pb(i,s.shape,s.dtype,o,l,!0);return n.makeTensorInfo(c,s.dtype,u)}},LS={kernelName:r.SparseSegmentSum,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n}=e,{data:s,indices:a,segmentIds:r}=t;if(s.shape.length<1)throw new Error("Data should be at least 1 dimensional but received scalar");if(1!==a.shape.length)throw new Error(`Indices should be a vector but received shape\n             ${a.shape}`);if(1!==r.shape.length)throw new Error(`Segment ids should be a vector but received shape\n             ${r.shape}`);const i=n.readSync(s.dataId),o=n.readSync(a.dataId),l=n.readSync(r.dataId),[u,c]=pb(i,s.shape,s.dtype,o,l);return n.makeTensorInfo(c,s.dtype,u)}},BS={kernelName:r.SparseToDense,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{sparseIndices:a,sparseValues:i,defaultValue:o}=t,{outputShape:l}=s,{sliceRank:u,numUpdates:c,sliceSize:h,strides:p,outputSize:d}=r.backend_util.calculateShapes(i,a,l);if("string"===i.dtype){const e=n.bufferSync(a),t=n.bufferSync(i),s=r.util.decodeString(n.readSync(o.dataId)[0]),f=ib(e,t,l,d,h,c,u,p,s,!1);return n.makeTensorInfo(l,f.dtype,f.values)}const f=new gS(c,u,a.shape.length,i.shape.length,p,[d,1],!1),m=n.runWebGLProgram(f,[i,a,o],i.dtype),g=ix({inputs:{x:m},backend:n,attrs:{shape:l}});return n.disposeIntermediateTensorInfo(m),g}},PS={kernelName:r.SplitV,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:a}=t,{numOrSizeSplits:i,axis:o}=s,l=r.util.parseAxisParam(o,a.shape)[0],u=r.backend_util.prepareSplitSize(a,i,l),c=a.shape.length,h=new Array(c).fill(0),p=a.shape.slice();return u.map((e=>{const t=[...p];t[l]=e;const s=pv({inputs:{x:a},backend:n,attrs:{begin:h,size:t}});return h[l]+=e,s}))}},VS="return sqrt(x);",WS=Qb({opSnippet:VS,packedOpSnippet:VS,cpuKernelImpl:db}),US={kernelName:r.Sqrt,backendName:"webgl",kernelFunc:WS},GS=Qb({opSnippet:"return x * x;"}),HS={kernelName:r.Square,backendName:"webgl",kernelFunc:GS},qS="return (a - b) * (a - b);",XS=Jb({opSnippet:qS,packedOpSnippet:qS}),jS={kernelName:r.SquaredDifference,backendName:"webgl",kernelFunc:XS},KS={kernelName:r.Step,backendName:"webgl",kernelFunc:function({inputs:e,attrs:t,backend:n}){const{x:s}=e,a=`if (isnan(x)) return x;\n    return x > 0.0 ? 1.0 : float(${t.alpha});\n  `,r=new Ab(s.shape,a);return n.runWebGLProgram(r,[s],s.dtype)}};class YS{constructor(e,t,n){this.variableNames=["x"],this.outputShape=n;const s=n.length,a=hy(n.length),r=hy(n.length);let i="";if(1===s)i="coords * strides + begin";else{let e=0;i=n.map(((t,s)=>(e++,1===n.length?`coords * strides[${s}] + begin[${s}]`:`coords[${e-1}] * strides[${s}] + begin[${s}]`))).join(",")}this.userCode=`\n      ${a} begin = ${a}(${e});\n      ${a} strides = ${a}(${t});\n\n      void main() {\n        ${r} coords = getOutputCoords();\n        setOutput(getX(${i}));\n      }\n    `}}const ZS={kernelName:r.StridedSlice,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:a}=t,{begin:i,end:o,strides:l,beginMask:u,endMask:c,ellipsisMask:h,newAxisMask:p,shrinkAxisMask:d}=s,{finalShapeSparse:f,finalShape:m,isIdentity:g,sliceDim0:y,isSimpleSlice:b,begin:x,end:v,strides:w}=r.slice_util.sliceInfo(a.shape,i,o,l,u,c,h,p,d);let k;if(g)k=ix({inputs:{x:a},backend:n,attrs:{shape:m}});else if(y||b){r.util.assert(a.shape.length>=1,(()=>`Input must have rank at least 1, got: ${a.shape.length}`));const e=r.slice_util.computeOutShape(x,v,w),t=pv({inputs:{x:a},backend:n,attrs:{begin:x,size:e}});k=ix({inputs:{x:t},backend:n,attrs:{shape:m}}),n.disposeIntermediateTensorInfo(t)}else if(n.shouldExecuteOnCPU([a])){const e=n.readSync(a.dataId),t=(0,r.buffer)(a.shape,a.dtype,e),s=fb(f,t,w,x);k=n.makeTensorInfo(m,a.dtype,s.values)}else{const e=new YS(x,w,f);k=n.runWebGLProgram(e,[a],a.dtype)}const I=ix({inputs:{x:k},backend:n,attrs:{shape:m}});return n.disposeIntermediateTensorInfo(k),I}},QS={kernelName:r.StringNGrams,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{separator:a,nGramWidths:r,leftPad:i,rightPad:o,padWidth:l,preserveShortSequences:u}=s,{data:c,dataSplits:h}=t,p=n.readSync(c.dataId),d=n.readSync(h.dataId),[f,m]=mb(p,d,a,r,i,o,l,u);return[n.makeTensorInfo([f.length],"string",f),n.makeTensorInfo(h.shape,"int32",m)]}},JS={kernelName:r.StringSplit,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{skipEmpty:a}=s,{input:r,delimiter:i}=t;if("string"!==r.dtype)throw new Error("Input must be of datatype string");if(1!==r.shape.length)throw new Error(`Input must be a vector, got shape: ${r.shape}`);if(0!==i.shape.length)throw new Error(`Delimiter must be a scalar, got shape: ${i.shape}`);const o=n.readSync(r.dataId),l=n.readSync(i.dataId)[0],[u,c,h]=gb(o,l,a),p=c.length;return[n.makeTensorInfo([p,2],"int32",u),n.makeTensorInfo([p],"string",c),n.makeTensorInfo([2],"int32",new Int32Array(h))]}},eN={kernelName:r.StringToHashBucketFast,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{numBuckets:a}=s,{input:r}=t;if("string"!==r.dtype)throw new Error("Input must be of datatype string");if(a<=0)throw new Error("Number of buckets must be at least 1");const i=n.readSync(r.dataId),o=yb(i,a);return n.makeTensorInfo(r.shape,"int32",o)}},tN=Qb({opSnippet:"return tan(x);"}),nN={kernelName:r.Tan,backendName:"webgl",kernelFunc:tN},sN=Qb({opSnippet:"\n  float e2x = exp(-2.0 * abs(x));\n  return sign(x) * (1.0 - e2x) / (1.0 + e2x);\n"}),aN={kernelName:r.Tanh,backendName:"webgl",kernelFunc:sN};class rN{constructor(e,t){this.variableNames=["A"];const n=new Array(e.length);for(let s=0;s<n.length;s++)n[s]=e[s]*t[s];this.outputShape=n,this.rank=n.length;const s=hy(this.rank),a=function(e){const t=e.length;if(t>5)throw Error(`Tile for rank ${t} is not yet supported`);if(1===t)return`imod(resRC, ${e[0]})`;const n=["resRC.x","resRC.y","resRC.z","resRC.w","resRC.u"],s=[];for(let t=0;t<e.length;t++)s.push(`imod(${n[t]}, ${e[t]})`);return s.join()}(e);this.userCode=`\n      void main() {\n        ${s} resRC = getOutputCoords();\n        setOutput(getA(${a}));\n      }\n    `}}function iN(e){const{inputs:t,backend:n,attrs:s}=e,{x:a}=t,{reps:i}=s;if("string"===a.dtype||a.shape.length>5){const e=n.readSync(a.dataId),t="string"===a.dtype?e.map((e=>r.util.decodeString(e))):e,s=(0,r.buffer)(a.shape,a.dtype,t),o=xb(s,i);return n.makeTensorInfo(o.shape,o.dtype,o.values)}const o=new rN(a.shape,i);return n.runWebGLProgram(o,[a],a.dtype)}const oN={kernelName:r.Tile,backendName:"webgl",kernelFunc:iN};class lN{constructor(e){this.variableNames=["x","indices"],this.customUniforms=[{name:"n",type:"int"},{name:"firstPass",type:"int"},{name:"negativeInf",type:"float"},{name:"dir",type:"int"},{name:"inc",type:"int"}],this.outputShape=e,this.userCode="\n       void main() {\n         ivec2 coords = getOutputCoords();\n         int batch = coords[0];\n         int elemIdx = coords[1];\n\n         // We compare elements pair-wise within a group of size 2 * inc.\n         // The comparing rule for each group alternates between ascending\n         // and descending. Within each group, we compare each pair at\n         // positions i and i+inc. To decide whether an element at position i\n         // is x0 or x1, we mod it by 2 * inc, if the result is smaller than\n         // inc, it is in the first half of the group, we denote it as x0,\n         // otherwise we denote it as x1.\n         // For example, as shown in the Bitonic top K paper referenced above,\n         // Figure5(a) shows that element[1] is in the\n         // second half of the group when group size is 2, but it is in the\n         // first half of the group when group size is 4.\n\n         bool isFirstInPair = imod(elemIdx, 2 * inc) < inc;\n         int i = isFirstInPair ? elemIdx : elemIdx - inc;\n\n         int i0 = firstPass == 1 ? i : int(getIndices(batch, i));\n         int i1 = firstPass == 1 ? i + inc : int(getIndices(batch, i + inc));\n         float x0 = i0 < n ? getX(batch, i0) : negativeInf;\n         float x1 = i1 < n ? getX(batch, i1) : negativeInf;\n\n         // Denotes which direction indices are in (ascending or descending).\n         bool reverse = imod(elemIdx, 2 * dir) >= dir;\n         bool isGreater = x0 > x1 || (x0 == x1 && i1 > i0);\n         if (reverse == isGreater) { // Elements in opposite order of direction\n           int iTemp = i0;\n           i0 = i1;\n           i1 = iTemp;\n         }\n         if (isFirstInPair) {\n            setOutput(float(i0));\n         } else {\n            setOutput(float(i1));\n         }\n       }\n     "}}class uN{constructor(e){this.variableNames=["x","indices"],this.customUniforms=[{name:"n",type:"int"},{name:"firstPass",type:"int"},{name:"k",type:"int"}],this.outputShape=e,this.userCode="\n    void main() {\n         // Takes max of indices (0, k), (1, k + 1), (2, k + 2) ...\n         ivec2 coords = getOutputCoords();\n         int batch = coords[0];\n         int elemIdx = coords[1];\n\n         // The output size is half of the previous size.\n         // If the previous sequence is | | | | _ _ _ _  | | | |  _ _ _ _ (k=4),\n         // we only need to output the indices at positions |, the indices at\n         // positions _ can be thrown away, see Figure5(b) After Phase 2\n         // (Merge phase) in the Bitonic Top K paper referenced above.\n         // For example, the paper shows we only need to output the orange bars.\n         // The output sequence should look like this | | | | | | | |.\n         // Because the sequence is halved, to map the output index back\n         // to the previous sequence to find the corresponding value,\n         // we need to double the index. When we double the index,\n         // we basically interpolate a position, so 2i looks like\n         // | _ | _ | _ | _ | _ | _ | _. We move the | to the first k position\n         // of each 2k positions by - elemIdx % k. E.g. for output at\n         // index 4,5,6,7, we want to get the corresponding element at\n         // original index 8,9,10,11, for output at index 8,9,10,11,\n         // we want to get the corresponding element at original index\n         // 16,17,18,19, so on and so forth.\n\n         int i = elemIdx < k ? elemIdx : (elemIdx * 2 - imod(elemIdx, k));\n         int i0 = firstPass == 1 ? i : int(getIndices(batch, i));\n         int i1 = firstPass == 1 ? i + k : int(getIndices(batch, i + k));\n\n         float x0 = getX(batch, i0);\n         float x1 = i1 < n ? getX(batch, i1) : x0;\n\n         setOutput(x0 >= x1 ? float(i0) : float(i1));\n       }\n     "}}function cN(e,t){null!==t&&e.disposeIntermediateTensorInfo(t)}function hN(e){let t=1;for(;t<e;)t*=2;return t}const pN={kernelName:r.TopK,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:a}=t,{k:i,sorted:o}=s,l=(0,r.env)().getNumber("TOPK_LAST_DIM_CPU_HANDOFF_SIZE_THRESHOLD"),u=(0,r.env)().getNumber("TOPK_K_CPU_HANDOFF_THRESHOLD"),c=a.shape,h=c[c.length-1];if(n.shouldExecuteOnCPU([a])||h<l||i>u){const e=n.readSync(a.dataId),[t,s]=vb(e,c,a.dtype,i,o);return[n.makeTensorInfo(t.shape,t.dtype,t.values),n.makeTensorInfo(s.shape,s.dtype,s.values)]}if(0===i)return c[c.length-1]=0,[n.makeTensorInfo(c,a.dtype,[]),n.makeTensorInfo(c,"int32",[])];if(1===h)return[a,jw({attrs:{shape:c,dtype:"int32",value:0},backend:n})];const p=n.texData.get(a.dataId),d=null!==p&&p.isPacked,f=d?n.unpackTensor(a):a,m=r.util.sizeFromShape(c)/h,g=ix({inputs:{x:f},attrs:{shape:[m,h]},backend:n});d&&cN(n,f);const y=hN(i),b=hN(h);let x=null;const v=()=>null===x?[g,g]:[g,x],w=(e,t,s)=>{const a=v(),r=new lN(s),i=[[h],[null===x?1:0],[Number.NEGATIVE_INFINITY],[e],[t]],o=x;x=n.runWebGLProgram(r,a,"int32",i),cN(n,o)};for(let e=1;e<y;e*=2){const t=2*e;for(let n=e;n>=1;n/=2)w(t,n,[m,b])}for(let e=b;e>y;e/=2){const t=v(),s=new uN([m,e/2]),a=[[h],[null===x?1:0],[y]],r=x;x=n.runWebGLProgram(s,t,"int32",a),cN(n,r);const i=y/2,o=2*i;for(let e=i;e>=1;e/=2)w(o,e,x.shape)}let k=x;x=pv({inputs:{x},backend:n,attrs:{begin:0,size:[m,i]}}),cN(n,k);let I=dk({inputs:{x:g,indices:x},backend:n,attrs:{axis:1,batchDims:1}});cN(n,g);const S=c.slice(0,-1);S.push(i),k=x,x=ix({inputs:{x},attrs:{shape:S},backend:n}),cN(n,k);const N=I;return I=ix({inputs:{x:I},attrs:{shape:S},backend:n}),cN(n,N),[I,x]}};class dN{constructor(e,t,n,s,a,r){this.variableNames=["Image","Transforms"],this.outputShape=r;const i="nearest"===n?1:2;let o;switch(s){case"constant":default:o=1;break;case"reflect":o=2;break;case"wrap":o=3;break;case"nearest":o=4}this.userCode=`\n            float mapCoord(float outCoord, float len) {\n              float inCoord = outCoord;\n              if(${o} == 2) {\n                if (inCoord < 0.0) {\n                  if (len <= 1.0) {\n                    inCoord = 0.0;\n                  } else {\n                    float sz2 = 2.0 * len;\n                    if (inCoord < sz2) {\n                      inCoord = sz2 * float(int(float(-inCoord / sz2))) +\n                      inCoord;\n                    }\n                    inCoord = inCoord < -len ? inCoord + sz2 : -inCoord - 1.0;\n                  }\n                } else if (inCoord > len - 1.0) {\n                  if (len <= 1.0) {\n                    inCoord = 0.0;\n                  } else {\n                    float sz2 = 2.0 * len;\n                    inCoord -= sz2 * float(int(float(inCoord / sz2)));\n                    if (inCoord >= len) {\n                      inCoord = sz2 - inCoord - 1.0;\n                    }\n                  }\n                }\n                return clamp(inCoord, 0.0, len - 1.0);\n              } else if (${o} == 3) {\n                if (inCoord < 0.0) {\n                  if (len <= 1.0) {\n                    inCoord = 0.0;\n                  } else {\n                    float sz = len - 1.0;\n                    inCoord += len * (float(int(float(-inCoord / sz))) + 1.0);\n                  }\n                } else if (inCoord > len - 1.0) {\n                  if (len <= 1.0) {\n                    inCoord = 0.0;\n                  } else {\n                    float sz = len - 1.0;\n                    inCoord -= len * float(int(float(inCoord / sz)));\n                  }\n                }\n                return clamp(inCoord, 0.0, len - 1.0);\n              } else if (${o} == 4) {\n                return clamp(outCoord, 0.0, len - 1.0);\n              } else {\n                return outCoord;\n              }\n            }\n\n            float readWithFillValue(int batch, int coordY, int coordX,\n              int channel) {\n              float outputValue;\n              if (0 <= coordY && coordY < ${e} && 0 <= coordX && coordX < ${t}) {\n                  outputValue = getImage(batch, coordY, coordX, channel);\n              } else {\n                outputValue = float(${a});\n              }\n              return outputValue;\n            }\n\n            void main() {\n              ivec4 coords = getOutputCoords();\n              float outputValue;\n              int batch = coords[0];\n              int x = coords[2];\n              int y = coords[1];\n              int channel = coords[3];\n              float xf = float(x);\n              float yf = float(y);\n              float a1 = getTransforms(batch, 0);\n              float a2 = getTransforms(batch, 1);\n              float a3 = getTransforms(batch, 2);\n              float b1 = getTransforms(batch, 3);\n              float b2 = getTransforms(batch, 4);\n              float b3 = getTransforms(batch, 5);\n              float c1 = getTransforms(batch, 6);\n              float c2 = getTransforms(batch, 7);\n              float projection = c1 * xf + c2 * yf + 1.0;\n              if (projection == 0.0) {\n                outputValue = float(${a});\n              } else {\n                float inX = (a1 * xf + a2 * yf + a3) / projection;\n                float inY = (b1 * xf + b2 * yf + b3) / projection;\n                float mapX = mapCoord(inX, float(${t}));\n                float mapY = mapCoord(inY, float(${e}));\n\n                if (${i} == 1) {\n                  int coordY = int(round(mapY));\n                  int coordX = int(round(mapX));\n                  outputValue = readWithFillValue(batch, coordY, coordX,\n                    channel);\n                } else {\n                  float yFloor = floor(mapY);\n                  float xFloor = floor(mapX);\n                  float yCeil = yFloor + 1.0;\n                  float xCeil = xFloor + 1.0;\n                  float valueYFloor = (xCeil - mapX) *\n                  readWithFillValue(batch, int(yFloor), int(xFloor), channel) +\n                  (mapX - xFloor) *\n                  readWithFillValue(batch, int(yFloor), int(xCeil), channel);\n                  float valueYCeil = (xCeil - mapX) *\n                  readWithFillValue(batch, int(yCeil), int(xFloor), channel) +\n                  (mapX - xFloor) *\n                  readWithFillValue(batch, int(yCeil), int(xCeil), channel);\n                  outputValue = (yCeil - mapY) * valueYFloor +\n                  (mapY - yFloor) * valueYCeil;\n                }\n              }\n              setOutput(outputValue);\n            }\n        `}}const fN={kernelName:r.Transform,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{image:a,transforms:r}=t,{interpolation:i,fillMode:o,fillValue:l,outputShape:u}=s,[c,h,p,d]=a.shape,[f,m]=null!=u?u:[h,p],g=new dN(h,p,i,o,l,[c,f,m,d]);return n.runWebGLProgram(g,[a,r],"float32")}},mN={kernelName:r.Unique,backendName:"webgl",kernelFunc:function(e){const{inputs:t,attrs:n,backend:s}=e,{axis:a}=n,{x:r}=t;jg(r,"unique"),console.warn("WARNING: ","UI might be locked temporarily as data is being downloaded");const i=s.readSync(r.dataId),{outputValues:o,outputShape:l,indices:u}=kb(i,a,r.shape,r.dtype);return[s.makeTensorInfo(l,r.dtype,o),s.makeTensorInfo([u.length],"int32",u)]}},gN={kernelName:r.Unpack,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{value:a}=t;let{axis:r}=s;r<0&&(r+=a.shape.length);const i=a,o=i.shape.length,l=a.shape[r],u=new Array(o-1);let c=0;for(let e=0;e<o;e++)e!==r&&(u[c++]=i.shape[e]);const h=[],p=new Array(o).fill(0),d=i.shape.slice();d[r]=1;const f=new Array(l);for(let e=0;e<f.length;e++){p[r]=e;const t=pv({inputs:{x:i},backend:n,attrs:{begin:p,size:d}}),s=ix({inputs:{x:t},backend:n,attrs:{shape:u}});f[e]=s,h.push(t)}return h.forEach((e=>n.disposeIntermediateTensorInfo(e))),f}};class yN{constructor(e,t){this.variableNames=["x","segmentIds"];const n=e.windowSize,s=e.batchSize,a=e.inSize,r=e.numSegments,i=r*Math.ceil(a/n);this.outputShape=[s,i];const o=4*Math.floor(n/4),l=n%4,u="\n        sumValue += dot(values, segFilter);\n    ";let c="";a%n>0&&(c=`\n        if (inIdx < 0 || inIdx >= ${a}) {\n          return initializationValue;\n        }\n      `);let h="";a%n>0&&(h=`\n        if (inIdx < 0 || inIdx >= ${a}) {\n          return -1.0;\n        }\n      `),this.userCode=`\n      const float initializationValue = 0.0;\n\n      float getValue(int batch, int inIdx) {\n        ${c}\n        return getX(batch, inIdx);\n      }\n\n      float getSegmentIdAtIndex(int inIdx) {\n        ${h}\n        return getSegmentIds(inIdx);\n      }\n\n      void main() {\n        ivec2 coords = getOutputCoords();\n        int batch = coords[0];\n        int outIdx = coords[1];\n        int inOffset = int(floor(float(outIdx) / float(\n          ${r})) * float(${n}));\n        int currentSeg = int(mod(float(outIdx), float(${r})));\n\n        float sumValue = 0.0;\n\n        for (int i = 0; i < ${o}; i += 4) {\n          int inIdx = inOffset + i;\n          vec4 values = vec4(\n            getValue(batch, inIdx),\n            getValue(batch, inIdx + 1),\n            getValue(batch, inIdx + 2),\n            getValue(batch, inIdx + 3)\n          );\n\n          vec4 segFilter = vec4(\n            int(getSegmentIdAtIndex(inIdx)) == currentSeg ? 1 : 0,\n            int(getSegmentIdAtIndex(inIdx + 1)) == currentSeg ? 1 : 0,\n            int(getSegmentIdAtIndex(inIdx + 2)) == currentSeg ? 1 : 0,\n            int(getSegmentIdAtIndex(inIdx + 3)) == currentSeg ? 1 : 0\n          );\n\n          ${u}\n        }\n\n        int inIdx = inOffset + ${o};\n        if (${1===l}) {\n          vec4 values = vec4(\n            getValue(batch, inIdx),\n            initializationValue,\n            initializationValue,\n            initializationValue\n          );\n\n          int inIdxSeg = int(getSegmentIdAtIndex(inIdx));\n\n          vec4 segFilter = vec4(\n            int(getSegmentIdAtIndex(inIdx)) == currentSeg ? 1 : 0,\n            0,\n            0,\n            0\n          );\n\n          ${u}\n        } else if (${2===l}) {\n          vec4 values = vec4(\n            getValue(batch, inIdx),\n            getValue(batch, inIdx + 1),\n            initializationValue,\n            initializationValue\n          );\n\n          vec4 segFilter = vec4(\n            int(getSegmentIdAtIndex(inIdx)) == currentSeg ? 1 : 0,\n            int(getSegmentIdAtIndex(inIdx + 1)) == currentSeg ? 1 : 0,\n              0,\n              0\n          );\n\n          ${u}\n        } else if (${3===l}) {\n          vec4 values = vec4(\n            getValue(batch, inIdx),\n            getValue(batch, inIdx + 1),\n            getValue(batch, inIdx + 2),\n            initializationValue\n          );\n\n          vec4 segFilter = vec4(\n            int(getSegmentIdAtIndex(inIdx)) == currentSeg ? 1 : 0,\n            int(getSegmentIdAtIndex(inIdx + 1)) == currentSeg ? 1 : 0,\n            int(getSegmentIdAtIndex(inIdx + 2)) == currentSeg ? 1 : 0,\n            0\n          );\n\n          ${u}\n        }\n        setOutput(sumValue);\n      }\n    `}}const bN=[xx,wx,Ix,Nx,$x,Ax,Rx,Fx,Bx,Px,Wx,Gx,qx,jx,Yx,Jx,ev,sv,av,rv,lv,fv,mv,gv,wv,Sv,Cv,Hb,_v,Lv,qv,Zv,Qv,Jv,ew,tw,sw,rw,ow,dw,fw,mw,yw,vw,Iw,Sw,Tw,$w,Ew,Aw,Rw,Dw,Mw,Lw,Pw,Uw,qw,Kw,Zw,ek,nk,rk,lk,uk,hk,fk,gk,bk,Ub,xk,Ov,wk,Ik,Nk,jb,Ck,Ek,_k,Rk,Dk,Mk,Lk,Pk,Uk,Hk,Xk,Kk,Yk,Zk,eI,tI,nI,sI,aI,iI,uI,hI,vI,rx,wI,II,NI,CI,bv,EI,RI,FI,zI,BI,Zb,PI,VI,WI,GI,vv,fI,qI,jI,YI,ox,JI,tS,aS,iS,uS,hS,dS,mS,yS,xS,wS,IS,NS,CS,ES,AS,dv,xI,FS,DS,OS,MS,zS,LS,BS,PS,US,HS,jS,KS,ZS,QS,JS,eN,yI,mx,nN,aN,oN,pN,fN,yx,mN,gN,{kernelName:r.UnsortedSegmentSum,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:a,segmentIds:i}=t,{numSegments:o}=s,l=a.shape.length,u=[];let c=0;const h=r.backend_util.getAxesPermutation([c],l);let p=a;null!=h&&(p=gx({inputs:{x:a},backend:n,attrs:{perm:h}}),u.push(p),c=r.backend_util.getInnerMostAxes(1,l)[0]);const d=r.backend_util.segment_util.computeOutShape(p.shape,c,o),f=r.util.sizeFromShape([p.shape[c]]),m=ix({inputs:{x:p},backend:n,attrs:{shape:[-1,f]}});u.push(m);const g=(0,r.sumOutType)(a.dtype),y=(e,t,s,a,i)=>{const o=e.shape[0],l=e.shape[1],c=r.backend_util.segment_util.segOpComputeOptimalWindowSize(l,i),h=new yN({windowSize:c,inSize:l,batchSize:o,numSegments:i},t),p=n.compileAndRun(h,[e,s],a);if(u.push(p),p.shape[1]===i)return p;const d=UI({backend:n,attrs:{start:0,stop:i,step:1,dtype:"float32"}}),f=iN({inputs:{x:d},backend:n,attrs:{reps:[l/c]}});return u.push(d),u.push(f),y(p,t,f,a,i)},b=ix({inputs:{x:y(m,"unsortedSegmentSum",i,g,o)},backend:n,attrs:{shape:d}});let x=b;if(null!=h){u.push(b);const e=r.backend_util.getUndoAxesPermutation(h);x=gx({inputs:{x},backend:n,attrs:{perm:e}})}return u.forEach((e=>n.disposeIntermediateTensorInfo(e))),x}},AI];for(const e of bN)(0,r.registerKernel)(e);const xN={"tfjs-core":r.version_core,"tfjs-backend-cpu":"3.21.0","tfjs-backend-webgl":"3.21.0","tfjs-data":"3.21.0","tfjs-layers":"3.21.0","tfjs-converter":yu.gJ,tfjs:"3.21.0"}},6521:e=>{e.exports=n;var t=null;try{t=new WebAssembly.Instance(new WebAssembly.Module(new Uint8Array([0,97,115,109,1,0,0,0,1,13,2,96,0,1,127,96,4,127,127,127,127,1,127,3,7,6,0,1,1,1,1,1,6,6,1,127,1,65,0,11,7,50,6,3,109,117,108,0,1,5,100,105,118,95,115,0,2,5,100,105,118,95,117,0,3,5,114,101,109,95,115,0,4,5,114,101,109,95,117,0,5,8,103,101,116,95,104,105,103,104,0,0,10,191,1,6,4,0,35,0,11,36,1,1,126,32,0,173,32,1,173,66,32,134,132,32,2,173,32,3,173,66,32,134,132,126,34,4,66,32,135,167,36,0,32,4,167,11,36,1,1,126,32,0,173,32,1,173,66,32,134,132,32,2,173,32,3,173,66,32,134,132,127,34,4,66,32,135,167,36,0,32,4,167,11,36,1,1,126,32,0,173,32,1,173,66,32,134,132,32,2,173,32,3,173,66,32,134,132,128,34,4,66,32,135,167,36,0,32,4,167,11,36,1,1,126,32,0,173,32,1,173,66,32,134,132,32,2,173,32,3,173,66,32,134,132,129,34,4,66,32,135,167,36,0,32,4,167,11,36,1,1,126,32,0,173,32,1,173,66,32,134,132,32,2,173,32,3,173,66,32,134,132,130,34,4,66,32,135,167,36,0,32,4,167,11])),{}).exports}catch(e){}function n(e,t,n){this.low=0|e,this.high=0|t,this.unsigned=!!n}function s(e){return!0===(e&&e.__isLong__)}n.prototype.__isLong__,Object.defineProperty(n.prototype,"__isLong__",{value:!0}),n.isLong=s;var a={},r={};function i(e,t){var n,s,i;return t?(i=0<=(e>>>=0)&&e<256)&&(s=r[e])?s:(n=l(e,(0|e)<0?-1:0,!0),i&&(r[e]=n),n):(i=-128<=(e|=0)&&e<128)&&(s=a[e])?s:(n=l(e,e<0?-1:0,!1),i&&(a[e]=n),n)}function o(e,t){if(isNaN(e))return t?y:g;if(t){if(e<0)return y;if(e>=d)return k}else{if(e<=-f)return I;if(e+1>=f)return w}return e<0?o(-e,t).neg():l(e%p|0,e/p|0,t)}function l(e,t,s){return new n(e,t,s)}n.fromInt=i,n.fromNumber=o,n.fromBits=l;var u=Math.pow;function c(e,t,n){if(0===e.length)throw Error("empty string");if("NaN"===e||"Infinity"===e||"+Infinity"===e||"-Infinity"===e)return g;if("number"==typeof t?(n=t,t=!1):t=!!t,(n=n||10)<2||36<n)throw RangeError("radix");var s;if((s=e.indexOf("-"))>0)throw Error("interior hyphen");if(0===s)return c(e.substring(1),t,n).neg();for(var a=o(u(n,8)),r=g,i=0;i<e.length;i+=8){var l=Math.min(8,e.length-i),h=parseInt(e.substring(i,i+l),n);if(l<8){var p=o(u(n,l));r=r.mul(p).add(o(h))}else r=(r=r.mul(a)).add(o(h))}return r.unsigned=t,r}function h(e,t){return"number"==typeof e?o(e,t):"string"==typeof e?c(e,t):l(e.low,e.high,"boolean"==typeof t?t:e.unsigned)}n.fromString=c,n.fromValue=h;var p=4294967296,d=p*p,f=d/2,m=i(1<<24),g=i(0);n.ZERO=g;var y=i(0,!0);n.UZERO=y;var b=i(1);n.ONE=b;var x=i(1,!0);n.UONE=x;var v=i(-1);n.NEG_ONE=v;var w=l(-1,2147483647,!1);n.MAX_VALUE=w;var k=l(-1,-1,!0);n.MAX_UNSIGNED_VALUE=k;var I=l(0,-2147483648,!1);n.MIN_VALUE=I;var S=n.prototype;S.toInt=function(){return this.unsigned?this.low>>>0:this.low},S.toNumber=function(){return this.unsigned?(this.high>>>0)*p+(this.low>>>0):this.high*p+(this.low>>>0)},S.toString=function(e){if((e=e||10)<2||36<e)throw RangeError("radix");if(this.isZero())return"0";if(this.isNegative()){if(this.eq(I)){var t=o(e),n=this.div(t),s=n.mul(t).sub(this);return n.toString(e)+s.toInt().toString(e)}return"-"+this.neg().toString(e)}for(var a=o(u(e,6),this.unsigned),r=this,i="";;){var l=r.div(a),c=(r.sub(l.mul(a)).toInt()>>>0).toString(e);if((r=l).isZero())return c+i;for(;c.length<6;)c="0"+c;i=""+c+i}},S.getHighBits=function(){return this.high},S.getHighBitsUnsigned=function(){return this.high>>>0},S.getLowBits=function(){return this.low},S.getLowBitsUnsigned=function(){return this.low>>>0},S.getNumBitsAbs=function(){if(this.isNegative())return this.eq(I)?64:this.neg().getNumBitsAbs();for(var e=0!=this.high?this.high:this.low,t=31;t>0&&0==(e&1<<t);t--);return 0!=this.high?t+33:t+1},S.isZero=function(){return 0===this.high&&0===this.low},S.eqz=S.isZero,S.isNegative=function(){return!this.unsigned&&this.high<0},S.isPositive=function(){return this.unsigned||this.high>=0},S.isOdd=function(){return 1==(1&this.low)},S.isEven=function(){return 0==(1&this.low)},S.equals=function(e){return s(e)||(e=h(e)),(this.unsigned===e.unsigned||this.high>>>31!=1||e.high>>>31!=1)&&this.high===e.high&&this.low===e.low},S.eq=S.equals,S.notEquals=function(e){return!this.eq(e)},S.neq=S.notEquals,S.ne=S.notEquals,S.lessThan=function(e){return this.comp(e)<0},S.lt=S.lessThan,S.lessThanOrEqual=function(e){return this.comp(e)<=0},S.lte=S.lessThanOrEqual,S.le=S.lessThanOrEqual,S.greaterThan=function(e){return this.comp(e)>0},S.gt=S.greaterThan,S.greaterThanOrEqual=function(e){return this.comp(e)>=0},S.gte=S.greaterThanOrEqual,S.ge=S.greaterThanOrEqual,S.compare=function(e){if(s(e)||(e=h(e)),this.eq(e))return 0;var t=this.isNegative(),n=e.isNegative();return t&&!n?-1:!t&&n?1:this.unsigned?e.high>>>0>this.high>>>0||e.high===this.high&&e.low>>>0>this.low>>>0?-1:1:this.sub(e).isNegative()?-1:1},S.comp=S.compare,S.negate=function(){return!this.unsigned&&this.eq(I)?I:this.not().add(b)},S.neg=S.negate,S.add=function(e){s(e)||(e=h(e));var t=this.high>>>16,n=65535&this.high,a=this.low>>>16,r=65535&this.low,i=e.high>>>16,o=65535&e.high,u=e.low>>>16,c=0,p=0,d=0,f=0;return d+=(f+=r+(65535&e.low))>>>16,p+=(d+=a+u)>>>16,c+=(p+=n+o)>>>16,c+=t+i,l((d&=65535)<<16|(f&=65535),(c&=65535)<<16|(p&=65535),this.unsigned)},S.subtract=function(e){return s(e)||(e=h(e)),this.add(e.neg())},S.sub=S.subtract,S.multiply=function(e){if(this.isZero())return g;if(s(e)||(e=h(e)),t)return l(t.mul(this.low,this.high,e.low,e.high),t.get_high(),this.unsigned);if(e.isZero())return g;if(this.eq(I))return e.isOdd()?I:g;if(e.eq(I))return this.isOdd()?I:g;if(this.isNegative())return e.isNegative()?this.neg().mul(e.neg()):this.neg().mul(e).neg();if(e.isNegative())return this.mul(e.neg()).neg();if(this.lt(m)&&e.lt(m))return o(this.toNumber()*e.toNumber(),this.unsigned);var n=this.high>>>16,a=65535&this.high,r=this.low>>>16,i=65535&this.low,u=e.high>>>16,c=65535&e.high,p=e.low>>>16,d=65535&e.low,f=0,y=0,b=0,x=0;return b+=(x+=i*d)>>>16,y+=(b+=r*d)>>>16,b&=65535,y+=(b+=i*p)>>>16,f+=(y+=a*d)>>>16,y&=65535,f+=(y+=r*p)>>>16,y&=65535,f+=(y+=i*c)>>>16,f+=n*d+a*p+r*c+i*u,l((b&=65535)<<16|(x&=65535),(f&=65535)<<16|(y&=65535),this.unsigned)},S.mul=S.multiply,S.divide=function(e){if(s(e)||(e=h(e)),e.isZero())throw Error("division by zero");var n,a,r;if(t)return this.unsigned||-2147483648!==this.high||-1!==e.low||-1!==e.high?l((this.unsigned?t.div_u:t.div_s)(this.low,this.high,e.low,e.high),t.get_high(),this.unsigned):this;if(this.isZero())return this.unsigned?y:g;if(this.unsigned){if(e.unsigned||(e=e.toUnsigned()),e.gt(this))return y;if(e.gt(this.shru(1)))return x;r=y}else{if(this.eq(I))return e.eq(b)||e.eq(v)?I:e.eq(I)?b:(n=this.shr(1).div(e).shl(1)).eq(g)?e.isNegative()?b:v:(a=this.sub(e.mul(n)),r=n.add(a.div(e)));if(e.eq(I))return this.unsigned?y:g;if(this.isNegative())return e.isNegative()?this.neg().div(e.neg()):this.neg().div(e).neg();if(e.isNegative())return this.div(e.neg()).neg();r=g}for(a=this;a.gte(e);){n=Math.max(1,Math.floor(a.toNumber()/e.toNumber()));for(var i=Math.ceil(Math.log(n)/Math.LN2),c=i<=48?1:u(2,i-48),p=o(n),d=p.mul(e);d.isNegative()||d.gt(a);)d=(p=o(n-=c,this.unsigned)).mul(e);p.isZero()&&(p=b),r=r.add(p),a=a.sub(d)}return r},S.div=S.divide,S.modulo=function(e){return s(e)||(e=h(e)),t?l((this.unsigned?t.rem_u:t.rem_s)(this.low,this.high,e.low,e.high),t.get_high(),this.unsigned):this.sub(this.div(e).mul(e))},S.mod=S.modulo,S.rem=S.modulo,S.not=function(){return l(~this.low,~this.high,this.unsigned)},S.and=function(e){return s(e)||(e=h(e)),l(this.low&e.low,this.high&e.high,this.unsigned)},S.or=function(e){return s(e)||(e=h(e)),l(this.low|e.low,this.high|e.high,this.unsigned)},S.xor=function(e){return s(e)||(e=h(e)),l(this.low^e.low,this.high^e.high,this.unsigned)},S.shiftLeft=function(e){return s(e)&&(e=e.toInt()),0==(e&=63)?this:e<32?l(this.low<<e,this.high<<e|this.low>>>32-e,this.unsigned):l(0,this.low<<e-32,this.unsigned)},S.shl=S.shiftLeft,S.shiftRight=function(e){return s(e)&&(e=e.toInt()),0==(e&=63)?this:e<32?l(this.low>>>e|this.high<<32-e,this.high>>e,this.unsigned):l(this.high>>e-32,this.high>=0?0:-1,this.unsigned)},S.shr=S.shiftRight,S.shiftRightUnsigned=function(e){if(s(e)&&(e=e.toInt()),0==(e&=63))return this;var t=this.high;return e<32?l(this.low>>>e|t<<32-e,t>>>e,this.unsigned):l(32===e?t:t>>>e-32,0,this.unsigned)},S.shru=S.shiftRightUnsigned,S.shr_u=S.shiftRightUnsigned,S.toSigned=function(){return this.unsigned?l(this.low,this.high,!1):this},S.toUnsigned=function(){return this.unsigned?this:l(this.low,this.high,!0)},S.toBytes=function(e){return e?this.toBytesLE():this.toBytesBE()},S.toBytesLE=function(){var e=this.high,t=this.low;return[255&t,t>>>8&255,t>>>16&255,t>>>24,255&e,e>>>8&255,e>>>16&255,e>>>24]},S.toBytesBE=function(){var e=this.high,t=this.low;return[e>>>24,e>>>16&255,e>>>8&255,255&e,t>>>24,t>>>16&255,t>>>8&255,255&t]},n.fromBytes=function(e,t,s){return s?n.fromBytesLE(e,t):n.fromBytesBE(e,t)},n.fromBytesLE=function(e,t){return new n(e[0]|e[1]<<8|e[2]<<16|e[3]<<24,e[4]|e[5]<<8|e[6]<<16|e[7]<<24,t)},n.fromBytesBE=function(e,t){return new n(e[4]<<24|e[5]<<16|e[6]<<8|e[7],e[0]<<24|e[1]<<16|e[2]<<8|e[3],t)}},6542:(e,t,n)=>{var s=n(9370),a=n(4889),r=n(3195),i=n(3227),o=n(9373),l=n(9340),u=n(2410);u.alea=s,u.xor128=a,u.xorwow=r,u.xorshift7=i,u.xor4096=o,u.tychei=l,e.exports=u},9370:function(e,t,n){var s;!function(e,a,r){function i(e){var t,n=this,s=(t=4022871197,function(e){e=String(e);for(var n=0;n<e.length;n++){var s=.02519603282416938*(t+=e.charCodeAt(n));s-=t=s>>>0,t=(s*=t)>>>0,t+=4294967296*(s-=t)}return 2.3283064365386963e-10*(t>>>0)});n.next=function(){var e=2091639*n.s0+2.3283064365386963e-10*n.c;return n.s0=n.s1,n.s1=n.s2,n.s2=e-(n.c=0|e)},n.c=1,n.s0=s(" "),n.s1=s(" "),n.s2=s(" "),n.s0-=s(e),n.s0<0&&(n.s0+=1),n.s1-=s(e),n.s1<0&&(n.s1+=1),n.s2-=s(e),n.s2<0&&(n.s2+=1),s=null}function o(e,t){return t.c=e.c,t.s0=e.s0,t.s1=e.s1,t.s2=e.s2,t}function l(e,t){var n=new i(e),s=t&&t.state,a=n.next;return a.int32=function(){return 4294967296*n.next()|0},a.double=function(){return a()+11102230246251565e-32*(2097152*a()|0)},a.quick=a,s&&("object"==typeof s&&o(s,n),a.state=function(){return o(n,{})}),a}a&&a.exports?a.exports=l:n.amdD&&n.amdO?void 0===(s=function(){return l}.call(t,n,t,a))||(a.exports=s):this.alea=l}(0,e=n.nmd(e),n.amdD)},9340:function(e,t,n){var s;!function(e,a,r){function i(e){var t=this,n="";t.next=function(){var e=t.b,n=t.c,s=t.d,a=t.a;return e=e<<25^e>>>7^n,n=n-s|0,s=s<<24^s>>>8^a,a=a-e|0,t.b=e=e<<20^e>>>12^n,t.c=n=n-s|0,t.d=s<<16^n>>>16^a,t.a=a-e|0},t.a=0,t.b=0,t.c=-1640531527,t.d=1367130551,e===Math.floor(e)?(t.a=e/4294967296|0,t.b=0|e):n+=e;for(var s=0;s<n.length+20;s++)t.b^=0|n.charCodeAt(s),t.next()}function o(e,t){return t.a=e.a,t.b=e.b,t.c=e.c,t.d=e.d,t}function l(e,t){var n=new i(e),s=t&&t.state,a=function(){return(n.next()>>>0)/4294967296};return a.double=function(){do{var e=((n.next()>>>11)+(n.next()>>>0)/4294967296)/(1<<21)}while(0===e);return e},a.int32=n.next,a.quick=a,s&&("object"==typeof s&&o(s,n),a.state=function(){return o(n,{})}),a}a&&a.exports?a.exports=l:n.amdD&&n.amdO?void 0===(s=function(){return l}.call(t,n,t,a))||(a.exports=s):this.tychei=l}(0,e=n.nmd(e),n.amdD)},4889:function(e,t,n){var s;!function(e,a,r){function i(e){var t=this,n="";t.x=0,t.y=0,t.z=0,t.w=0,t.next=function(){var e=t.x^t.x<<11;return t.x=t.y,t.y=t.z,t.z=t.w,t.w^=t.w>>>19^e^e>>>8},e===(0|e)?t.x=e:n+=e;for(var s=0;s<n.length+64;s++)t.x^=0|n.charCodeAt(s),t.next()}function o(e,t){return t.x=e.x,t.y=e.y,t.z=e.z,t.w=e.w,t}function l(e,t){var n=new i(e),s=t&&t.state,a=function(){return(n.next()>>>0)/4294967296};return a.double=function(){do{var e=((n.next()>>>11)+(n.next()>>>0)/4294967296)/(1<<21)}while(0===e);return e},a.int32=n.next,a.quick=a,s&&("object"==typeof s&&o(s,n),a.state=function(){return o(n,{})}),a}a&&a.exports?a.exports=l:n.amdD&&n.amdO?void 0===(s=function(){return l}.call(t,n,t,a))||(a.exports=s):this.xor128=l}(0,e=n.nmd(e),n.amdD)},9373:function(e,t,n){var s;!function(e,a,r){function i(e){var t=this;t.next=function(){var e,n,s=t.w,a=t.X,r=t.i;return t.w=s=s+1640531527|0,n=a[r+34&127],e=a[r=r+1&127],n^=n<<13,e^=e<<17,n^=n>>>15,e^=e>>>12,n=a[r]=n^e,t.i=r,n+(s^s>>>16)|0},function(e,t){var n,s,a,r,i,o=[],l=128;for(t===(0|t)?(s=t,t=null):(t+="\0",s=0,l=Math.max(l,t.length)),a=0,r=-32;r<l;++r)t&&(s^=t.charCodeAt((r+32)%t.length)),0===r&&(i=s),s^=s<<10,s^=s>>>15,s^=s<<4,s^=s>>>13,r>=0&&(i=i+1640531527|0,a=0==(n=o[127&r]^=s+i)?a+1:0);for(a>=128&&(o[127&(t&&t.length||0)]=-1),a=127,r=512;r>0;--r)s=o[a+34&127],n=o[a=a+1&127],s^=s<<13,n^=n<<17,s^=s>>>15,n^=n>>>12,o[a]=s^n;e.w=i,e.X=o,e.i=a}(t,e)}function o(e,t){return t.i=e.i,t.w=e.w,t.X=e.X.slice(),t}function l(e,t){null==e&&(e=+new Date);var n=new i(e),s=t&&t.state,a=function(){return(n.next()>>>0)/4294967296};return a.double=function(){do{var e=((n.next()>>>11)+(n.next()>>>0)/4294967296)/(1<<21)}while(0===e);return e},a.int32=n.next,a.quick=a,s&&(s.X&&o(s,n),a.state=function(){return o(n,{})}),a}a&&a.exports?a.exports=l:n.amdD&&n.amdO?void 0===(s=function(){return l}.call(t,n,t,a))||(a.exports=s):this.xor4096=l}(0,e=n.nmd(e),n.amdD)},3227:function(e,t,n){var s;!function(e,a,r){function i(e){var t=this;t.next=function(){var e,n,s=t.x,a=t.i;return e=s[a],n=(e^=e>>>7)^e<<24,n^=(e=s[a+1&7])^e>>>10,n^=(e=s[a+3&7])^e>>>3,n^=(e=s[a+4&7])^e<<7,e=s[a+7&7],n^=(e^=e<<13)^e<<9,s[a]=n,t.i=a+1&7,n},function(e,t){var n,s=[];if(t===(0|t))s[0]=t;else for(t=""+t,n=0;n<t.length;++n)s[7&n]=s[7&n]<<15^t.charCodeAt(n)+s[n+1&7]<<13;for(;s.length<8;)s.push(0);for(n=0;n<8&&0===s[n];++n);for(8==n?s[7]=-1:s[n],e.x=s,e.i=0,n=256;n>0;--n)e.next()}(t,e)}function o(e,t){return t.x=e.x.slice(),t.i=e.i,t}function l(e,t){null==e&&(e=+new Date);var n=new i(e),s=t&&t.state,a=function(){return(n.next()>>>0)/4294967296};return a.double=function(){do{var e=((n.next()>>>11)+(n.next()>>>0)/4294967296)/(1<<21)}while(0===e);return e},a.int32=n.next,a.quick=a,s&&(s.x&&o(s,n),a.state=function(){return o(n,{})}),a}a&&a.exports?a.exports=l:n.amdD&&n.amdO?void 0===(s=function(){return l}.call(t,n,t,a))||(a.exports=s):this.xorshift7=l}(0,e=n.nmd(e),n.amdD)},3195:function(e,t,n){var s;!function(e,a,r){function i(e){var t=this,n="";t.next=function(){var e=t.x^t.x>>>2;return t.x=t.y,t.y=t.z,t.z=t.w,t.w=t.v,(t.d=t.d+362437|0)+(t.v=t.v^t.v<<4^e^e<<1)|0},t.x=0,t.y=0,t.z=0,t.w=0,t.v=0,e===(0|e)?t.x=e:n+=e;for(var s=0;s<n.length+64;s++)t.x^=0|n.charCodeAt(s),s==n.length&&(t.d=t.x<<10^t.x>>>4),t.next()}function o(e,t){return t.x=e.x,t.y=e.y,t.z=e.z,t.w=e.w,t.v=e.v,t.d=e.d,t}function l(e,t){var n=new i(e),s=t&&t.state,a=function(){return(n.next()>>>0)/4294967296};return a.double=function(){do{var e=((n.next()>>>11)+(n.next()>>>0)/4294967296)/(1<<21)}while(0===e);return e},a.int32=n.next,a.quick=a,s&&("object"==typeof s&&o(s,n),a.state=function(){return o(n,{})}),a}a&&a.exports?a.exports=l:n.amdD&&n.amdO?void 0===(s=function(){return l}.call(t,n,t,a))||(a.exports=s):this.xorwow=l}(0,e=n.nmd(e),n.amdD)},2410:function(e,t,n){var s;!function(a,r,i){var o,l=256,u=i.pow(l,6),c=i.pow(2,52),h=2*c,p=255;function d(e,t,n){var s=[],p=y(g((t=1==t?{entropy:!0}:t||{}).entropy?[e,b(r)]:null==e?function(){try{var e;return o&&(e=o.randomBytes)?e=e(l):(e=new Uint8Array(l),(a.crypto||a.msCrypto).getRandomValues(e)),b(e)}catch(e){var t=a.navigator,n=t&&t.plugins;return[+new Date,a,n,a.screen,b(r)]}}():e,3),s),d=new f(s),x=function(){for(var e=d.g(6),t=u,n=0;e<c;)e=(e+n)*l,t*=l,n=d.g(1);for(;e>=h;)e/=2,t/=2,n>>>=1;return(e+n)/t};return x.int32=function(){return 0|d.g(4)},x.quick=function(){return d.g(4)/4294967296},x.double=x,y(b(d.S),r),(t.pass||n||function(e,t,n,s){return s&&(s.S&&m(s,d),e.state=function(){return m(d,{})}),n?(i.random=e,t):e})(x,p,"global"in t?t.global:this==i,t.state)}function f(e){var t,n=e.length,s=this,a=0,r=s.i=s.j=0,i=s.S=[];for(n||(e=[n++]);a<l;)i[a]=a++;for(a=0;a<l;a++)i[a]=i[r=p&r+e[a%n]+(t=i[a])],i[r]=t;(s.g=function(e){for(var t,n=0,a=s.i,r=s.j,i=s.S;e--;)t=i[a=p&a+1],n=n*l+i[p&(i[a]=i[r=p&r+t])+(i[r]=t)];return s.i=a,s.j=r,n})(l)}function m(e,t){return t.i=e.i,t.j=e.j,t.S=e.S.slice(),t}function g(e,t){var n,s=[],a=typeof e;if(t&&"object"==a)for(n in e)try{s.push(g(e[n],t-1))}catch(e){}return s.length?s:"string"==a?e:e+"\0"}function y(e,t){for(var n,s=e+"",a=0;a<s.length;)t[p&a]=p&(n^=19*t[p&a])+s.charCodeAt(a++);return b(t)}function b(e){return String.fromCharCode.apply(0,e)}if(y(i.random(),r),e.exports){e.exports=d;try{o=n(3706)}catch(e){}}else void 0===(s=function(){return d}.call(t,n,t,e))||(e.exports=s)}("undefined"!=typeof self?self:this,[],Math)}}]);